/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";const t="175",e=0,n=1,i=2,r=100,a=101,s=102,o=200,l=201,c=202,h=203,u=204,d=205,p=206,f=207,m=208,g=209,_=210,v=211,x=212,M=213,y=214,S=0,E=1,T=2,b=3,w=4,A=5,R=6,C=7,P=301,D=302,L=306,U=1e3,I=1001,N=1002,O=1003,F=1004,B=1005,z=1006,H=1007,V=1008,k=1009,G=1012,W=1013,X=1014,j=1015,q=1016,Y=1017,K=1018,Z=1020,J=1023,$=1026,Q=1027,tt=1029,et=1031,nt=1033,it=33776,rt=33777,at=33778,st=33779,ot=35840,lt=35841,ct=35842,ht=35843,ut=36196,dt=37492,pt=37496,ft=37808,mt=37809,gt=37810,_t=37811,vt=37812,xt=37813,Mt=37814,yt=37815,St=37816,Et=37817,Tt=37818,bt=37819,wt=37820,At=37821,Rt=36492,Ct=36494,Pt=36495,Dt=36284,Lt=36285,Ut=36286,It=2300,Nt=2301,Ot=2302,Ft="",Bt="srgb",zt="srgb-linear",Ht="linear",Vt="srgb",kt=7680,Gt=512,Wt=513,Xt=514,jt=515,qt=516,Yt=517,Kt=518,Zt=519,Jt="300 es",$t=2e3,Qt=2001;class te{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){const n=this._listeners;return void 0!==n&&void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){const n=this._listeners;if(void 0===n)return;const i=n[t];if(void 0!==i){const t=i.indexOf(e);-1!==t&&i.splice(t,1)}}dispatchEvent(t){const e=this._listeners;if(void 0===e)return;const n=e[t.type];if(void 0!==n){t.target=this;const e=n.slice(0);for(let n=0,i=e.length;n<i;n++)e[n].call(this,t);t.target=null}}}const ee=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"],ne=Math.PI/180,ie=180/Math.PI;function re(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(ee[255&t]+ee[t>>8&255]+ee[t>>16&255]+ee[t>>24&255]+"-"+ee[255&e]+ee[e>>8&255]+"-"+ee[e>>16&15|64]+ee[e>>24&255]+"-"+ee[63&n|128]+ee[n>>8&255]+"-"+ee[n>>16&255]+ee[n>>24&255]+ee[255&i]+ee[i>>8&255]+ee[i>>16&255]+ee[i>>24&255]).toLowerCase()}function ae(t,e,n){return Math.max(e,Math.min(n,t))}function se(t,e,n){return(1-n)*t+n*e}function oe(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function le(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(4294967295*t);case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int32Array:return Math.round(2147483647*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}const ce=ne;class he{constructor(t=0,e=0){he.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=ae(this.x,t.x,e.x),this.y=ae(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=ae(this.x,t,e),this.y=ae(this.y,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(ae(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(ae(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*i+t.x,this.y=r*i+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ue{constructor(t,e,n,i,r,a,s,o,l){ue.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==t&&this.set(t,e,n,i,r,a,s,o,l)}set(t,e,n,i,r,a,s,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=s,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=a,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],f=i[0],m=i[3],g=i[6],_=i[1],v=i[4],x=i[7],M=i[2],y=i[5],S=i[8];return r[0]=a*f+s*_+o*M,r[3]=a*m+s*v+o*y,r[6]=a*g+s*x+o*S,r[1]=l*f+c*_+h*M,r[4]=l*m+c*v+h*y,r[7]=l*g+c*x+h*S,r[2]=u*f+d*_+p*M,r[5]=u*m+d*v+p*y,r[8]=u*g+d*x+p*S,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8];return e*a*c-e*s*l-n*r*c+n*s*o+i*r*l-i*a*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=c*a-s*l,u=s*o-c*r,d=l*r-a*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=h*f,t[1]=(i*l-c*n)*f,t[2]=(s*n-i*a)*f,t[3]=u*f,t[4]=(c*e-i*o)*f,t[5]=(i*r-s*e)*f,t[6]=d*f,t[7]=(n*o-l*e)*f,t[8]=(a*e-n*r)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,a,s){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*a+l*s)+a+t,-i*l,i*o,-i*(-l*a+o*s)+s+e,0,0,1),this}scale(t,e){return this.premultiply(de.makeScale(t,e)),this}rotate(t){return this.premultiply(de.makeRotation(-t)),this}translate(t,e){return this.premultiply(de.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const de=new ue;function pe(t){for(let e=t.length-1;e>=0;--e)if(t[e]>=65535)return!0;return!1}function fe(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function me(){const t=fe("canvas");return t.style.display="block",t}Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const ge={};function _e(t){t in ge||(ge[t]=!0,console.warn(t))}const ve=(new ue).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),xe=(new ue).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function Me(){const t={enabled:!0,workingColorSpace:zt,spaces:{},convert:function(t,e,n){return!1!==this.enabled&&e!==n&&e&&n?(this.spaces[e].transfer===Vt&&(t.r=Se(t.r),t.g=Se(t.g),t.b=Se(t.b)),this.spaces[e].primaries!==this.spaces[n].primaries&&(t.applyMatrix3(this.spaces[e].toXYZ),t.applyMatrix3(this.spaces[n].fromXYZ)),this.spaces[n].transfer===Vt&&(t.r=Ee(t.r),t.g=Ee(t.g),t.b=Ee(t.b)),t):t},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)},getPrimaries:function(t){return this.spaces[t].primaries},getTransfer:function(t){return t===Ft?Ht:this.spaces[t].transfer},getLuminanceCoefficients:function(t,e=this.workingColorSpace){return t.fromArray(this.spaces[e].luminanceCoefficients)},define:function(t){Object.assign(this.spaces,t)},_getMatrix:function(t,e,n){return t.copy(this.spaces[e].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(t){return this.spaces[t].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(t=this.workingColorSpace){return this.spaces[t].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],n=[.2126,.7152,.0722],i=[.3127,.329];return t.define({[zt]:{primaries:e,whitePoint:i,transfer:Ht,toXYZ:ve,fromXYZ:xe,luminanceCoefficients:n,workingColorSpaceConfig:{unpackColorSpace:Bt},outputColorSpaceConfig:{drawingBufferColorSpace:Bt}},[Bt]:{primaries:e,whitePoint:i,transfer:Vt,toXYZ:ve,fromXYZ:xe,luminanceCoefficients:n,outputColorSpaceConfig:{drawingBufferColorSpace:Bt}}}),t}const ye=Me();function Se(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Ee(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}let Te;class be{static getDataURL(t,e="image/png"){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let n;if(t instanceof HTMLCanvasElement)n=t;else{void 0===Te&&(Te=fe("canvas")),Te.width=t.width,Te.height=t.height;const e=Te.getContext("2d");t instanceof ImageData?e.putImageData(t,0,0):e.drawImage(t,0,0,t.width,t.height),n=Te}return n.toDataURL(e)}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=fe("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*Se(r[t]/255);return n.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*Se(e[t]/255)):e[t]=Se(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let we=0;class Ae{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:we++}),this.uuid=re(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++)i[e].isDataTexture?t.push(Re(i[e].image)):t.push(Re(i[e]))}else t=Re(i);n.url=t}return e||(t.images[this.uuid]=n),n}}function Re(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?be.getDataURL(t):t.data?{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Ce=0;class Pe extends te{constructor(t=Pe.DEFAULT_IMAGE,e=Pe.DEFAULT_MAPPING,n=1001,i=1001,r=1006,a=1008,s=1023,o=1009,l=Pe.DEFAULT_ANISOTROPY,c=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Ce++}),this.uuid=re(),this.name="",this.source=new Ae(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=a,this.anisotropy=l,this.format=s,this.internalFormat=null,this.type=o,this.offset=new he(0,0),this.repeat=new he(1,1),this.center=new he(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ue,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=c,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case U:t.x=t.x-Math.floor(t.x);break;case I:t.x=t.x<0?0:1;break;case N:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case U:t.y=t.y-Math.floor(t.y);break;case I:t.y=t.y<0?0:1;break;case N:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){!0===t&&this.pmremVersion++}}Pe.DEFAULT_IMAGE=null,Pe.DEFAULT_MAPPING=300,Pe.DEFAULT_ANISOTROPY=1;class De{constructor(t=0,e=0,n=0,i=1){De.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const a=.01,s=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],f=o[2],m=o[6],g=o[10];if(Math.abs(c-u)<a&&Math.abs(h-f)<a&&Math.abs(p-m)<a){if(Math.abs(c+u)<s&&Math.abs(h+f)<s&&Math.abs(p+m)<s&&Math.abs(l+d+g-3)<s)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,_=(g+1)/2,v=(c+u)/4,x=(h+f)/4,M=(p+m)/4;return t>o&&t>_?t<a?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=v/n,r=x/n):o>_?o<a?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=v/i,r=M/i):_<a?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(_),n=x/r,i=M/r),this.set(n,i,r,e),this}let _=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(u-c)*(u-c));return Math.abs(_)<.001&&(_=1),this.x=(m-p)/_,this.y=(h-f)/_,this.z=(u-c)/_,this.w=Math.acos((l+d+g-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=ae(this.x,t.x,e.x),this.y=ae(this.y,t.y,e.y),this.z=ae(this.z,t.z,e.z),this.w=ae(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=ae(this.x,t,e),this.y=ae(this.y,t,e),this.z=ae(this.z,t,e),this.w=ae(this.w,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(ae(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Le extends te{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new De(0,0,t,e),this.scissorTest=!1,this.viewport=new De(0,0,t,e);const i={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:z,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const r=new Pe(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=!1,r.generateMipmaps=n.generateMipmaps,r.internalFormat=n.internalFormat,this.textures=[];const a=n.count;for(let t=0;t<a;t++)this.textures[t]=r.clone(),this.textures[t].isRenderTargetTexture=!0,this.textures[t].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){null!==this._depthTexture&&(this._depthTexture.renderTarget=null),null!==t&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.textures.length;i<r;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let e=0,n=t.textures.length;e<n;e++){this.textures[e]=t.textures[e].clone(),this.textures[e].isRenderTargetTexture=!0,this.textures[e].renderTarget=this;const n=Object.assign({},t.textures[e].image);this.textures[e].source=new Ae(n)}return this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Ue extends Le{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class Ie extends Pe{constructor(t=null,e=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=O,this.minFilter=O,this.wrapR=I,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Ne extends Pe{constructor(t=null,e=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:i},this.magFilter=O,this.minFilter=O,this.wrapR=I,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Oe{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=i}static slerpFlat(t,e,n,i,r,a,s){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[a+0],d=r[a+1],p=r[a+2],f=r[a+3];if(0===s)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===s)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(h!==f||o!==u||l!==d||c!==p){let t=1-s;const e=o*u+l*d+c*p+h*f,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,e*n);t=Math.sin(t*a)/r,s=Math.sin(s*a)/r}const r=s*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+f*r,t===1-s){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,a){const s=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[a],u=r[a+1],d=r[a+2],p=r[a+3];return t[e]=s*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-s*d,t[e+2]=l*p+c*d+s*u-o*h,t[e+3]=c*p-s*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,i=t._y,r=t._z,a=t._order,s=Math.cos,o=Math.sin,l=s(n/2),c=s(i/2),h=s(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(a){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return!0===e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],a=e[1],s=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+s+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(a-i)*t}else if(n>s&&n>h){const t=2*Math.sqrt(1+n-s-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+a)/t,this._z=(r+l)/t}else if(s>h){const t=2*Math.sqrt(1+s-n-h);this._w=(r-l)/t,this._x=(i+a)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-s);this._w=(a-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(ae(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,a=t._w,s=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+a*s+i*l-r*o,this._y=i*c+a*o+r*s-n*l,this._z=r*c+a*l+n*o-i*s,this._w=a*c-n*s-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,a=this._w;let s=a*t._w+n*t._x+i*t._y+r*t._z;if(s<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,s=-s):this.copy(t),s>=1)return this._w=a,this._x=n,this._y=i,this._z=r,this;const o=1-s*s;if(o<=Number.EPSILON){const t=1-e;return this._w=t*a+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this}const l=Math.sqrt(o),c=Math.atan2(l,s),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=a*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Fe{constructor(t=0,e=0,n=0){Fe.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(ze.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ze.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,a=t.y,s=t.z,o=t.w,l=2*(a*i-s*n),c=2*(s*e-r*i),h=2*(r*n-a*e);return this.x=e+o*l+a*h-s*c,this.y=n+o*c+s*l-r*h,this.z=i+o*h+r*c-a*l,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=ae(this.x,t.x,e.x),this.y=ae(this.y,t.y,e.y),this.z=ae(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=ae(this.x,t,e),this.y=ae(this.y,t,e),this.z=ae(this.z,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(ae(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,a=e.x,s=e.y,o=e.z;return this.x=i*o-r*s,this.y=r*a-n*o,this.z=n*s-i*a,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return Be.copy(this).projectOnVector(t),this.sub(Be)}reflect(t){return this.sub(Be.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(ae(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=2*Math.random()-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Be=new Fe,ze=new Oe;class He{constructor(t=new Fe(1/0,1/0,1/0),e=new Fe(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(ke.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(ke.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=ke.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(void 0!==n){const i=n.getAttribute("position");if(!0===e&&void 0!==i&&!0!==t.isInstancedMesh)for(let e=0,n=i.count;e<n;e++)!0===t.isMesh?t.getVertexPosition(e,ke):ke.fromBufferAttribute(i,e),ke.applyMatrix4(t.matrixWorld),this.expandByPoint(ke);else void 0!==t.boundingBox?(null===t.boundingBox&&t.computeBoundingBox(),Ge.copy(t.boundingBox)):(null===n.boundingBox&&n.computeBoundingBox(),Ge.copy(n.boundingBox)),Ge.applyMatrix4(t.matrixWorld),this.union(Ge)}const i=t.children;for(let t=0,n=i.length;t<n;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,ke),ke.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Ze),Je.subVectors(this.max,Ze),We.subVectors(t.a,Ze),Xe.subVectors(t.b,Ze),je.subVectors(t.c,Ze),qe.subVectors(Xe,We),Ye.subVectors(je,Xe),Ke.subVectors(We,je);let e=[0,-qe.z,qe.y,0,-Ye.z,Ye.y,0,-Ke.z,Ke.y,qe.z,0,-qe.x,Ye.z,0,-Ye.x,Ke.z,0,-Ke.x,-qe.y,qe.x,0,-Ye.y,Ye.x,0,-Ke.y,Ke.x,0];return!!tn(e,We,Xe,je,Je)&&(e=[1,0,0,0,1,0,0,0,1],!!tn(e,We,Xe,je,Je)&&($e.crossVectors(qe,Ye),e=[$e.x,$e.y,$e.z],tn(e,We,Xe,je,Je)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,ke).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=.5*this.getSize(ke).length()),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(Ve[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ve[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ve[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ve[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ve[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ve[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ve[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ve[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ve)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Ve=[new Fe,new Fe,new Fe,new Fe,new Fe,new Fe,new Fe,new Fe],ke=new Fe,Ge=new He,We=new Fe,Xe=new Fe,je=new Fe,qe=new Fe,Ye=new Fe,Ke=new Fe,Ze=new Fe,Je=new Fe,$e=new Fe,Qe=new Fe;function tn(t,e,n,i,r){for(let a=0,s=t.length-3;a<=s;a+=3){Qe.fromArray(t,a);const s=r.x*Math.abs(Qe.x)+r.y*Math.abs(Qe.y)+r.z*Math.abs(Qe.z),o=e.dot(Qe),l=n.dot(Qe),c=i.dot(Qe);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>s)return!1}return!0}const en=new He,nn=new Fe,rn=new Fe;class an{constructor(t=new Fe,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):en.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;nn.subVectors(t,this.center);const e=nn.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.addScaledVector(nn,n/t),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(rn.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(nn.copy(t.center).add(rn)),this.expandByPoint(nn.copy(t.center).sub(rn))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const sn=new Fe,on=new Fe,ln=new Fe,cn=new Fe,hn=new Fe,un=new Fe,dn=new Fe;class pn{constructor(t=new Fe,e=new Fe(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,sn)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=sn.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(sn.copy(this.origin).addScaledVector(this.direction,e),sn.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){on.copy(t).add(e).multiplyScalar(.5),ln.copy(e).sub(t).normalize(),cn.copy(this.origin).sub(on);const r=.5*t.distanceTo(e),a=-this.direction.dot(ln),s=cn.dot(this.direction),o=-cn.dot(ln),l=cn.lengthSq(),c=Math.abs(1-a*a);let h,u,d,p;if(c>0)if(h=a*o-s,u=a*s-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+a*u+2*s)+u*(a*h+u+2*o)+l}else u=r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-a*r+s)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(a*r+s)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=a>0?-r:r,h=Math.max(0,-(a*u+s)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.origin).addScaledVector(this.direction,h),i&&i.copy(on).addScaledVector(ln,u),d}intersectSphere(t,e){sn.subVectors(t.center,this.origin);const n=sn.dot(this.direction),i=sn.dot(sn)-n*n,r=t.radius*t.radius;if(i>r)return null;const a=Math.sqrt(r-i),s=n-a,o=n+a;return o<0?null:s<0?this.at(o,e):this.at(s,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,a,s,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,a=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,a=(t.min.y-u.y)*c),n>a||r>i?null:((r>n||isNaN(n))&&(n=r),(a<i||isNaN(i))&&(i=a),h>=0?(s=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(s=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||s>i?null:((s>n||n!=n)&&(n=s),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,sn)}intersectTriangle(t,e,n,i,r){hn.subVectors(e,t),un.subVectors(n,t),dn.crossVectors(hn,un);let a,s=this.direction.dot(dn);if(s>0){if(i)return null;a=1}else{if(!(s<0))return null;a=-1,s=-s}cn.subVectors(this.origin,t);const o=a*this.direction.dot(un.crossVectors(cn,un));if(o<0)return null;const l=a*this.direction.dot(hn.cross(cn));if(l<0)return null;if(o+l>s)return null;const c=-a*cn.dot(dn);return c<0?null:this.at(c/s,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class fn{constructor(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m){fn.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==t&&this.set(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m)}set(t,e,n,i,r,a,s,o,l,c,h,u,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=a,g[9]=s,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new fn).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/mn.setFromMatrixColumn(t,0).length(),r=1/mn.setFromMatrixColumn(t,1).length(),a=1/mn.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,i=t.y,r=t.z,a=Math.cos(n),s=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-s*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=a*o}else if("YXZ"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*s,e[4]=i*s-n,e[8]=a*l,e[1]=a*h,e[5]=a*c,e[9]=-s,e[2]=n*s-i,e[6]=r+t*s,e[10]=a*o}else if("ZXY"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*s,e[4]=-a*h,e[8]=i+n*s,e[1]=n+i*s,e[5]=a*c,e[9]=r-t*s,e[2]=-a*l,e[6]=s,e[10]=a*o}else if("ZYX"===t.order){const t=a*c,n=a*h,i=s*c,r=s*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=s*o,e[10]=a*o}else if("YZX"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=a*c,e[9]=-s*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if("XZY"===t.order){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=a*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=s*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(_n,t,vn)}lookAt(t,e,n){const i=this.elements;return yn.subVectors(t,e),0===yn.lengthSq()&&(yn.z=1),yn.normalize(),xn.crossVectors(n,yn),0===xn.lengthSq()&&(1===Math.abs(n.z)?yn.x+=1e-4:yn.z+=1e-4,yn.normalize(),xn.crossVectors(n,yn)),xn.normalize(),Mn.crossVectors(yn,xn),i[0]=xn.x,i[4]=Mn.x,i[8]=yn.x,i[1]=xn.y,i[5]=Mn.y,i[9]=yn.y,i[2]=xn.z,i[6]=Mn.z,i[10]=yn.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,a=n[0],s=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],_=n[3],v=n[7],x=n[11],M=n[15],y=i[0],S=i[4],E=i[8],T=i[12],b=i[1],w=i[5],A=i[9],R=i[13],C=i[2],P=i[6],D=i[10],L=i[14],U=i[3],I=i[7],N=i[11],O=i[15];return r[0]=a*y+s*b+o*C+l*U,r[4]=a*S+s*w+o*P+l*I,r[8]=a*E+s*A+o*D+l*N,r[12]=a*T+s*R+o*L+l*O,r[1]=c*y+h*b+u*C+d*U,r[5]=c*S+h*w+u*P+d*I,r[9]=c*E+h*A+u*D+d*N,r[13]=c*T+h*R+u*L+d*O,r[2]=p*y+f*b+m*C+g*U,r[6]=p*S+f*w+m*P+g*I,r[10]=p*E+f*A+m*D+g*N,r[14]=p*T+f*R+m*L+g*O,r[3]=_*y+v*b+x*C+M*U,r[7]=_*S+v*w+x*P+M*I,r[11]=_*E+v*A+x*D+M*N,r[15]=_*T+v*R+x*L+M*O,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],a=t[1],s=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*s*u+n*l*u+i*s*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*a*u-i*a*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*s*d-r*a*h+n*a*d+r*s*c-n*l*c)+t[15]*(-i*s*c-e*o*h+e*s*u+i*a*h-n*a*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],_=h*m*l-f*u*l+f*o*d-s*m*d-h*o*g+s*u*g,v=p*u*l-c*m*l-p*o*d+a*m*d+c*o*g-a*u*g,x=c*f*l-p*h*l+p*s*d-a*f*d-c*s*g+a*h*g,M=p*h*o-c*f*o-p*s*u+a*f*u+c*s*m-a*h*m,y=e*_+n*v+i*x+r*M;if(0===y)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/y;return t[0]=_*S,t[1]=(f*u*r-h*m*r-f*i*d+n*m*d+h*i*g-n*u*g)*S,t[2]=(s*m*r-f*o*r+f*i*l-n*m*l-s*i*g+n*o*g)*S,t[3]=(h*o*r-s*u*r-h*i*l+n*u*l+s*i*d-n*o*d)*S,t[4]=v*S,t[5]=(c*m*r-p*u*r+p*i*d-e*m*d-c*i*g+e*u*g)*S,t[6]=(p*o*r-a*m*r-p*i*l+e*m*l+a*i*g-e*o*g)*S,t[7]=(a*u*r-c*o*r+c*i*l-e*u*l-a*i*d+e*o*d)*S,t[8]=x*S,t[9]=(p*h*r-c*f*r-p*n*d+e*f*d+c*n*g-e*h*g)*S,t[10]=(a*f*r-p*s*r+p*n*l-e*f*l-a*n*g+e*s*g)*S,t[11]=(c*s*r-a*h*r-c*n*l+e*h*l+a*n*d-e*s*d)*S,t[12]=M*S,t[13]=(c*f*i-p*h*i+p*n*u-e*f*u-c*n*m+e*h*m)*S,t[14]=(p*s*i-a*f*i-p*n*o+e*f*o+a*n*m-e*s*m)*S,t[15]=(a*h*i-c*s*i+c*n*o-e*h*o-a*n*u+e*s*u)*S,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,a=t.x,s=t.y,o=t.z,l=r*a,c=r*s;return this.set(l*a+n,l*s-i*o,l*o+i*s,0,l*s+i*o,c*s+n,c*o-i*a,0,l*o-i*s,c*o+i*a,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,a){return this.set(1,n,r,0,t,1,a,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,a=e._y,s=e._z,o=e._w,l=r+r,c=a+a,h=s+s,u=r*l,d=r*c,p=r*h,f=a*c,m=a*h,g=s*h,_=o*l,v=o*c,x=o*h,M=n.x,y=n.y,S=n.z;return i[0]=(1-(f+g))*M,i[1]=(d+x)*M,i[2]=(p-v)*M,i[3]=0,i[4]=(d-x)*y,i[5]=(1-(u+g))*y,i[6]=(m+_)*y,i[7]=0,i[8]=(p+v)*S,i[9]=(m-_)*S,i[10]=(1-(u+f))*S,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=mn.set(i[0],i[1],i[2]).length();const a=mn.set(i[4],i[5],i[6]).length(),s=mn.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],gn.copy(this);const o=1/r,l=1/a,c=1/s;return gn.elements[0]*=o,gn.elements[1]*=o,gn.elements[2]*=o,gn.elements[4]*=l,gn.elements[5]*=l,gn.elements[6]*=l,gn.elements[8]*=c,gn.elements[9]*=c,gn.elements[10]*=c,e.setFromRotationMatrix(gn),n.x=r,n.y=a,n.z=s,this}makePerspective(t,e,n,i,r,a,s=2e3){const o=this.elements,l=2*r/(e-t),c=2*r/(n-i),h=(e+t)/(e-t),u=(n+i)/(n-i);let d,p;if(s===$t)d=-(a+r)/(a-r),p=-2*a*r/(a-r);else{if(s!==Qt)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+s);d=-a/(a-r),p=-a*r/(a-r)}return o[0]=l,o[4]=0,o[8]=h,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=p,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,n,i,r,a,s=2e3){const o=this.elements,l=1/(e-t),c=1/(n-i),h=1/(a-r),u=(e+t)*l,d=(n+i)*c;let p,f;if(s===$t)p=(a+r)*h,f=-2*h;else{if(s!==Qt)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+s);p=r*h,f=-1*h}return o[0]=2*l,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=f,o[14]=-p,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const mn=new Fe,gn=new fn,_n=new Fe(0,0,0),vn=new Fe(1,1,1),xn=new Fe,Mn=new Fe,yn=new Fe,Sn=new fn,En=new Oe;class Tn{constructor(t=0,e=0,n=0,i=Tn.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],a=i[4],s=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(ae(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-ae(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(s,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(ae(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-a,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-ae(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-a,l));break;case"YZX":this._z=Math.asin(ae(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(s,d));break;case"XZY":this._z=Math.asin(-ae(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(s,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return Sn.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Sn,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return En.setFromEuler(this),this.setFromQuaternion(En,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Tn.DEFAULT_ORDER="XYZ";class bn{constructor(){this.mask=1}set(t){this.mask=1<<t>>>0}enable(t){this.mask|=1<<t}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t}disable(t){this.mask&=~(1<<t)}disableAll(){this.mask=0}test(t){return!!(this.mask&t.mask)}isEnabled(t){return!!(this.mask&1<<t)}}let wn=0;const An=new Fe,Rn=new Oe,Cn=new fn,Pn=new Fe,Dn=new Fe,Ln=new Fe,Un=new Oe,In=new Fe(1,0,0),Nn=new Fe(0,1,0),On=new Fe(0,0,1),Fn={type:"added"},Bn={type:"removed"},zn={type:"childadded",child:null},Hn={type:"childremoved",child:null};class Vn extends te{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:wn++}),this.uuid=re(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Vn.DEFAULT_UP.clone();const t=new Fe,e=new Tn,n=new Oe,i=new Fe(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new fn},normalMatrix:{value:new ue}}),this.matrix=new fn,this.matrixWorld=new fn,this.matrixAutoUpdate=Vn.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Vn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new bn,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Rn.setFromAxisAngle(t,e),this.quaternion.multiply(Rn),this}rotateOnWorldAxis(t,e){return Rn.setFromAxisAngle(t,e),this.quaternion.premultiply(Rn),this}rotateX(t){return this.rotateOnAxis(In,t)}rotateY(t){return this.rotateOnAxis(Nn,t)}rotateZ(t){return this.rotateOnAxis(On,t)}translateOnAxis(t,e){return An.copy(t).applyQuaternion(this.quaternion),this.position.add(An.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(In,t)}translateY(t){return this.translateOnAxis(Nn,t)}translateZ(t){return this.translateOnAxis(On,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Cn.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Pn.copy(t):Pn.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),Dn.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Cn.lookAt(Dn,Pn,this.up):Cn.lookAt(Pn,Dn,this.up),this.quaternion.setFromRotationMatrix(Cn),i&&(Cn.extractRotation(i.matrixWorld),Rn.setFromRotationMatrix(Cn),this.quaternion.premultiply(Rn.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Fn),zn.child=t,this.dispatchEvent(zn),zn.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Bn),Hn.child=t,this.dispatchEvent(Hn),Hn.child=null),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Cn.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Cn.multiply(t.parent.matrixWorld)),t.applyMatrix4(Cn),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Fn),zn.child=t,this.dispatchEvent(zn),zn.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const i=this.children;for(let r=0,a=i.length;r<a;r++)i[r].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Dn,t,Ln),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Dn,Un,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map((t=>({boxInitialized:t.boxInitialized,boxMin:t.box.min.toArray(),boxMax:t.box.max.toArray(),sphereInitialized:t.sphereInitialized,sphereRadius:t.sphere.radius,sphereCenter:t.sphere.center.toArray()}))),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(t),null!==this._colorsTexture&&(i.colorsTexture=this._colorsTexture.toJSON(t)),null!==this.boundingSphere&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),null!==this.boundingBox&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=a(t.geometries),i=a(t.materials),r=a(t.textures),s=a(t.images),o=a(t.shapes),l=a(t.skeletons),c=a(t.animations),h=a(t.nodes);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),s.length>0&&(n.images=s),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function a(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}Vn.DEFAULT_UP=new Fe(0,1,0),Vn.DEFAULT_MATRIX_AUTO_UPDATE=!0,Vn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const kn=new Fe,Gn=new Fe,Wn=new Fe,Xn=new Fe,jn=new Fe,qn=new Fe,Yn=new Fe,Kn=new Fe,Zn=new Fe,Jn=new Fe,$n=new De,Qn=new De,ti=new De;class ei{constructor(t=new Fe,e=new Fe,n=new Fe){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),kn.subVectors(t,e),i.cross(kn);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){kn.subVectors(i,e),Gn.subVectors(n,e),Wn.subVectors(t,e);const a=kn.dot(kn),s=kn.dot(Gn),o=kn.dot(Wn),l=Gn.dot(Gn),c=Gn.dot(Wn),h=a*l-s*s;if(0===h)return r.set(0,0,0),null;const u=1/h,d=(l*o-s*c)*u,p=(a*c-s*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return null!==this.getBarycoord(t,e,n,i,Xn)&&Xn.x>=0&&Xn.y>=0&&Xn.x+Xn.y<=1}static getInterpolation(t,e,n,i,r,a,s,o){return null===this.getBarycoord(t,e,n,i,Xn)?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(r,Xn.x),o.addScaledVector(a,Xn.y),o.addScaledVector(s,Xn.z),o)}static getInterpolatedAttribute(t,e,n,i,r,a){return $n.setScalar(0),Qn.setScalar(0),ti.setScalar(0),$n.fromBufferAttribute(t,e),Qn.fromBufferAttribute(t,n),ti.fromBufferAttribute(t,i),a.setScalar(0),a.addScaledVector($n,r.x),a.addScaledVector(Qn,r.y),a.addScaledVector(ti,r.z),a}static isFrontFacing(t,e,n,i){return kn.subVectors(n,e),Gn.subVectors(t,e),kn.cross(Gn).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return kn.subVectors(this.c,this.b),Gn.subVectors(this.a,this.b),.5*kn.cross(Gn).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return ei.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return ei.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,r){return ei.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return ei.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return ei.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let a,s;jn.subVectors(i,n),qn.subVectors(r,n),Kn.subVectors(t,n);const o=jn.dot(Kn),l=qn.dot(Kn);if(o<=0&&l<=0)return e.copy(n);Zn.subVectors(t,i);const c=jn.dot(Zn),h=qn.dot(Zn);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return a=o/(o-c),e.copy(n).addScaledVector(jn,a);Jn.subVectors(t,r);const d=jn.dot(Jn),p=qn.dot(Jn);if(p>=0&&d<=p)return e.copy(r);const f=d*l-o*p;if(f<=0&&l>=0&&p<=0)return s=l/(l-p),e.copy(n).addScaledVector(qn,s);const m=c*p-d*h;if(m<=0&&h-c>=0&&d-p>=0)return Yn.subVectors(r,i),s=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(Yn,s);const g=1/(m+f+u);return a=f*g,s=u*g,e.copy(n).addScaledVector(jn,a).addScaledVector(qn,s)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const ni={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ii={h:0,s:0,l:0},ri={h:0,s:0,l:0};function ai(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}class si{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(void 0===e&&void 0===n){const e=t;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=Bt){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,ye.toWorkingColorSpace(this,e),this}setRGB(t,e,n,i=ye.workingColorSpace){return this.r=t,this.g=e,this.b=n,ye.toWorkingColorSpace(this,i),this}setHSL(t,e,n,i=ye.workingColorSpace){if(t=(t%(r=1)+r)%r,e=ae(e,0,1),n=ae(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=ai(r,i,t+1/3),this.g=ai(r,i,t),this.b=ai(r,i,t-1/3)}var r;return ye.toWorkingColorSpace(this,i),this}setStyle(t,e=Bt){function n(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const a=i[1],s=i[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(s))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const n=i[1],r=n.length;if(3===r)return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,e);if(6===r)return this.setHex(parseInt(n,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=Bt){const n=ni[t.toLowerCase()];return void 0!==n?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Se(t.r),this.g=Se(t.g),this.b=Se(t.b),this}copyLinearToSRGB(t){return this.r=Ee(t.r),this.g=Ee(t.g),this.b=Ee(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=Bt){return ye.fromWorkingColorSpace(oi.copy(this),t),65536*Math.round(ae(255*oi.r,0,255))+256*Math.round(ae(255*oi.g,0,255))+Math.round(ae(255*oi.b,0,255))}getHexString(t=Bt){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=ye.workingColorSpace){ye.fromWorkingColorSpace(oi.copy(this),e);const n=oi.r,i=oi.g,r=oi.b,a=Math.max(n,i,r),s=Math.min(n,i,r);let o,l;const c=(s+a)/2;if(s===a)o=0,l=0;else{const t=a-s;switch(l=c<=.5?t/(a+s):t/(2-a-s),a){case n:o=(i-r)/t+(i<r?6:0);break;case i:o=(r-n)/t+2;break;case r:o=(n-i)/t+4}o/=6}return t.h=o,t.s=l,t.l=c,t}getRGB(t,e=ye.workingColorSpace){return ye.fromWorkingColorSpace(oi.copy(this),e),t.r=oi.r,t.g=oi.g,t.b=oi.b,t}getStyle(t=Bt){ye.fromWorkingColorSpace(oi.copy(this),t);const e=oi.r,n=oi.g,i=oi.b;return t!==Bt?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*n)},${Math.round(255*i)})`}offsetHSL(t,e,n){return this.getHSL(ii),this.setHSL(ii.h+t,ii.s+e,ii.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(ii),t.getHSL(ri);const n=se(ii.h,ri.h,e),i=se(ii.s,ri.s,e),r=se(ii.l,ri.l,e);return this.setHSL(n,i,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b,r=t.elements;return this.r=r[0]*e+r[3]*n+r[6]*i,this.g=r[1]*e+r[4]*n+r[7]*i,this.b=r[2]*e+r[5]*n+r[8]*i,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const oi=new si;si.NAMES=ni;let li=0;class ci extends te{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:li++}),this.uuid=re(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=r,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new si(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=kt,this.stencilZFail=kt,this.stencilZPass=kt,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`)}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(n.dispersion=this.dispersion),void 0!==this.iridescence&&(n.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(n.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),void 0!==this.anisotropy&&(n.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapRotation&&(n.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),!0===this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=!0),204!==this.blendSrc&&(n.blendSrc=this.blendSrc),205!==this.blendDst&&(n.blendDst=this.blendDst),this.blendEquation!==r&&(n.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(n.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(n.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(n.blendAlpha=this.blendAlpha),3!==this.depthFunc&&(n.depthFunc=this.depthFunc),!1===this.depthTest&&(n.depthTest=this.depthTest),!1===this.depthWrite&&(n.depthWrite=this.depthWrite),!1===this.colorWrite&&(n.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(n.stencilWriteMask=this.stencilWriteMask),519!==this.stencilFunc&&(n.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(n.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==kt&&(n.stencilFail=this.stencilFail),this.stencilZFail!==kt&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==kt&&(n.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(n.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaHash&&(n.alphaHash=!0),!0===this.alphaToCoverage&&(n.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=!0),!0===this.forceSinglePass&&(n.forceSinglePass=!0),!0===this.wireframe&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),!1===this.fog&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class hi extends ci{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new si(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Tn,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const ui=new Fe,di=new he;let pi=0;class fi{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:pi++}),this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=n,this.usage=35044,this.updateRanges=[],this.gpuType=j,this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)di.fromBufferAttribute(this,e),di.applyMatrix3(t),this.setXY(e,di.x,di.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)ui.fromBufferAttribute(this,e),ui.applyMatrix3(t),this.setXYZ(e,ui.x,ui.y,ui.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)ui.fromBufferAttribute(this,e),ui.applyMatrix4(t),this.setXYZ(e,ui.x,ui.y,ui.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ui.fromBufferAttribute(this,e),ui.applyNormalMatrix(t),this.setXYZ(e,ui.x,ui.y,ui.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ui.fromBufferAttribute(this,e),ui.transformDirection(t),this.setXYZ(e,ui.x,ui.y,ui.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=oe(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=le(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=oe(e,this.array)),e}setX(t,e){return this.normalized&&(e=le(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=oe(e,this.array)),e}setY(t,e){return this.normalized&&(e=le(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=oe(e,this.array)),e}setZ(t,e){return this.normalized&&(e=le(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=oe(e,this.array)),e}setW(t,e){return this.normalized&&(e=le(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=le(e,this.array),n=le(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.normalized&&(e=le(e,this.array),n=le(n,this.array),i=le(i,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.normalized&&(e=le(e,this.array),n=le(n,this.array),i=le(i,this.array),r=le(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),35044!==this.usage&&(t.usage=this.usage),t}}class mi extends fi{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class gi extends fi{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class _i extends fi{constructor(t,e,n){super(new Float32Array(t),e,n)}}let vi=0;const xi=new fn,Mi=new Vn,yi=new Fe,Si=new He,Ei=new He,Ti=new Fe;class bi extends te{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:vi++}),this.uuid=re(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(pe(t)?gi:mi)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new ue).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return xi.makeRotationFromQuaternion(t),this.applyMatrix4(xi),this}rotateX(t){return xi.makeRotationX(t),this.applyMatrix4(xi),this}rotateY(t){return xi.makeRotationY(t),this.applyMatrix4(xi),this}rotateZ(t){return xi.makeRotationZ(t),this.applyMatrix4(xi),this}translate(t,e,n){return xi.makeTranslation(t,e,n),this.applyMatrix4(xi),this}scale(t,e,n){return xi.makeScale(t,e,n),this.applyMatrix4(xi),this}lookAt(t){return Mi.lookAt(t),Mi.updateMatrix(),this.applyMatrix4(Mi.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(yi).negate(),this.translate(yi.x,yi.y,yi.z),this}setFromPoints(t){const e=this.getAttribute("position");if(void 0===e){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}this.setAttribute("position",new _i(e,3))}else{const n=Math.min(t.length,e.count);for(let i=0;i<n;i++){const n=t[i];e.setXYZ(i,n.x,n.y,n.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new He);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new Fe(-1/0,-1/0,-1/0),new Fe(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Si.setFromBufferAttribute(n),this.morphTargetsRelative?(Ti.addVectors(this.boundingBox.min,Si.min),this.boundingBox.expandByPoint(Ti),Ti.addVectors(this.boundingBox.max,Si.max),this.boundingBox.expandByPoint(Ti)):(this.boundingBox.expandByPoint(Si.min),this.boundingBox.expandByPoint(Si.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new an);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new Fe,1/0);if(t){const n=this.boundingSphere.center;if(Si.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Ei.setFromBufferAttribute(n),this.morphTargetsRelative?(Ti.addVectors(Si.min,Ei.min),Si.expandByPoint(Ti),Ti.addVectors(Si.max,Ei.max),Si.expandByPoint(Ti)):(Si.expandByPoint(Ei.min),Si.expandByPoint(Ei.max))}Si.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)Ti.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(Ti));if(e)for(let r=0,a=e.length;r<a;r++){const a=e[r],s=this.morphTargetsRelative;for(let e=0,r=a.count;e<r;e++)Ti.fromBufferAttribute(a,e),s&&(yi.fromBufferAttribute(t,e),Ti.add(yi)),i=Math.max(i,n.distanceToSquared(Ti))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=e.position,i=e.normal,r=e.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new fi(new Float32Array(4*n.count),4));const a=this.getAttribute("tangent"),s=[],o=[];for(let t=0;t<n.count;t++)s[t]=new Fe,o[t]=new Fe;const l=new Fe,c=new Fe,h=new Fe,u=new he,d=new he,p=new he,f=new Fe,m=new Fe;function g(t,e,i){l.fromBufferAttribute(n,t),c.fromBufferAttribute(n,e),h.fromBufferAttribute(n,i),u.fromBufferAttribute(r,t),d.fromBufferAttribute(r,e),p.fromBufferAttribute(r,i),c.sub(l),h.sub(l),d.sub(u),p.sub(u);const a=1/(d.x*p.y-p.x*d.y);isFinite(a)&&(f.copy(c).multiplyScalar(p.y).addScaledVector(h,-d.y).multiplyScalar(a),m.copy(h).multiplyScalar(d.x).addScaledVector(c,-p.x).multiplyScalar(a),s[t].add(f),s[e].add(f),s[i].add(f),o[t].add(m),o[e].add(m),o[i].add(m))}let _=this.groups;0===_.length&&(_=[{start:0,count:t.count}]);for(let e=0,n=_.length;e<n;++e){const n=_[e],i=n.start;for(let e=i,r=i+n.count;e<r;e+=3)g(t.getX(e+0),t.getX(e+1),t.getX(e+2))}const v=new Fe,x=new Fe,M=new Fe,y=new Fe;function S(t){M.fromBufferAttribute(i,t),y.copy(M);const e=s[t];v.copy(e),v.sub(M.multiplyScalar(M.dot(e))).normalize(),x.crossVectors(y,e);const n=x.dot(o[t])<0?-1:1;a.setXYZW(t,v.x,v.y,v.z,n)}for(let e=0,n=_.length;e<n;++e){const n=_[e],i=n.start;for(let e=i,r=i+n.count;e<r;e+=3)S(t.getX(e+0)),S(t.getX(e+1)),S(t.getX(e+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new fi(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new Fe,r=new Fe,a=new Fe,s=new Fe,o=new Fe,l=new Fe,c=new Fe,h=new Fe;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),f=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),a.fromBufferAttribute(e,f),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),s.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),s.add(c),o.add(c),l.add(c),n.setXYZ(d,s.x,s.y,s.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let t=0,s=e.count;t<s;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),a.fromBufferAttribute(e,t+2),c.subVectors(a,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)Ti.fromBufferAttribute(t,e),Ti.normalize(),t.setXYZ(e,Ti.x,Ti.y,Ti.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,a=new n.constructor(e.length*i);let s=0,o=0;for(let r=0,l=e.length;r<l;r++){s=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)a[o++]=n[s++]}return new fi(a,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new bi,n=this.index.array,i=this.attributes;for(const r in i){const a=t(i[r],n);e.setAttribute(r,a)}const r=this.morphAttributes;for(const i in r){const a=[],s=r[i];for(let e=0,i=s.length;e<i;e++){const i=t(s[e],n);a.push(i)}e.morphAttributes[i]=a}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],a=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];a.push(i.toJSON(t.data))}a.length>0&&(i[e]=a,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const s=this.boundingSphere;return null!==s&&(t.data.boundingSphere={center:s.center.toArray(),radius:s.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone());const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let t=0,e=a.length;t<e;t++){const e=a[t];this.addGroup(e.start,e.count,e.materialIndex)}const s=t.boundingBox;null!==s&&(this.boundingBox=s.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const wi=new fn,Ai=new pn,Ri=new an,Ci=new Fe,Pi=new Fe,Di=new Fe,Li=new Fe,Ui=new Fe,Ii=new Fe,Ni=new Fe,Oi=new Fe;class Fi extends Vn{constructor(t=new bi,e=new hi){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}getVertexPosition(t,e){const n=this.geometry,i=n.attributes.position,r=n.morphAttributes.position,a=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const s=this.morphTargetInfluences;if(r&&s){Ii.set(0,0,0);for(let n=0,i=r.length;n<i;n++){const i=s[n],o=r[n];0!==i&&(Ui.fromBufferAttribute(o,t),a?Ii.addScaledVector(Ui,i):Ii.addScaledVector(Ui.sub(e),i))}e.add(Ii)}return e}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0!==i){if(null===n.boundingSphere&&n.computeBoundingSphere(),Ri.copy(n.boundingSphere),Ri.applyMatrix4(r),Ai.copy(t.ray).recast(t.near),!1===Ri.containsPoint(Ai.origin)){if(null===Ai.intersectSphere(Ri,Ci))return;if(Ai.origin.distanceToSquared(Ci)>(t.far-t.near)**2)return}wi.copy(r).invert(),Ai.copy(t.ray).applyMatrix4(wi),null!==n.boundingBox&&!1===Ai.intersectsBox(n.boundingBox)||this._computeIntersections(t,e,Ai)}}_computeIntersections(t,e,n){let i;const r=this.geometry,a=this.material,s=r.index,o=r.attributes.position,l=r.attributes.uv,c=r.attributes.uv1,h=r.attributes.normal,u=r.groups,d=r.drawRange;if(null!==s)if(Array.isArray(a))for(let r=0,o=u.length;r<o;r++){const o=u[r],p=a[o.materialIndex];for(let r=Math.max(o.start,d.start),a=Math.min(s.count,Math.min(o.start+o.count,d.start+d.count));r<a;r+=3)i=Bi(this,p,t,n,l,c,h,s.getX(r),s.getX(r+1),s.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=o.materialIndex,e.push(i))}else for(let r=Math.max(0,d.start),o=Math.min(s.count,d.start+d.count);r<o;r+=3)i=Bi(this,a,t,n,l,c,h,s.getX(r),s.getX(r+1),s.getX(r+2)),i&&(i.faceIndex=Math.floor(r/3),e.push(i));else if(void 0!==o)if(Array.isArray(a))for(let r=0,s=u.length;r<s;r++){const s=u[r],p=a[s.materialIndex];for(let r=Math.max(s.start,d.start),a=Math.min(o.count,Math.min(s.start+s.count,d.start+d.count));r<a;r+=3)i=Bi(this,p,t,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),i.face.materialIndex=s.materialIndex,e.push(i))}else for(let r=Math.max(0,d.start),s=Math.min(o.count,d.start+d.count);r<s;r+=3)i=Bi(this,a,t,n,l,c,h,r,r+1,r+2),i&&(i.faceIndex=Math.floor(r/3),e.push(i))}}function Bi(t,e,n,i,r,a,s,o,l,c){t.getVertexPosition(o,Pi),t.getVertexPosition(l,Di),t.getVertexPosition(c,Li);const h=function(t,e,n,i,r,a,s,o){let l;if(l=1===e.side?i.intersectTriangle(s,a,r,!0,o):i.intersectTriangle(r,a,s,0===e.side,o),null===l)return null;Oi.copy(o),Oi.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(Oi);return c<n.near||c>n.far?null:{distance:c,point:Oi.clone(),object:t}}(t,e,n,i,Pi,Di,Li,Ni);if(h){const t=new Fe;ei.getBarycoord(Ni,Pi,Di,Li,t),r&&(h.uv=ei.getInterpolatedAttribute(r,o,l,c,t,new he)),a&&(h.uv1=ei.getInterpolatedAttribute(a,o,l,c,t,new he)),s&&(h.normal=ei.getInterpolatedAttribute(s,o,l,c,t,new Fe),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const e={a:o,b:l,c,normal:new Fe,materialIndex:0};ei.getNormal(Pi,Di,Li,e.normal),h.face=e,h.barycoord=t}return h}class zi extends bi{constructor(t=1,e=1,n=1,i=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const s=this;i=Math.floor(i),r=Math.floor(r),a=Math.floor(a);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,a,p,f,m,g,_){const v=a/m,x=p/g,M=a/2,y=p/2,S=f/2,E=m+1,T=g+1;let b=0,w=0;const A=new Fe;for(let a=0;a<T;a++){const s=a*x-y;for(let o=0;o<E;o++){const u=o*v-M;A[t]=u*i,A[e]=s*r,A[n]=S,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=f>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/m),h.push(1-a/g),b+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=u+e+E*t,i=u+e+E*(t+1),r=u+(e+1)+E*(t+1),a=u+(e+1)+E*t;o.push(n,i,a),o.push(i,r,a),w+=6}s.addGroup(d,w,_),d+=w,u+=b}p("z","y","x",-1,-1,n,e,t,a,r,0),p("z","y","x",1,-1,n,e,-t,a,r,1),p("x","z","y",1,1,t,n,e,i,a,2),p("x","z","y",1,-1,t,n,-e,i,a,3),p("x","y","z",1,-1,t,e,n,i,r,4),p("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new _i(l,3)),this.setAttribute("normal",new _i(c,3)),this.setAttribute("uv",new _i(h,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new zi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function Hi(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?r.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[n][i]=null):e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}function Vi(t){const e={};for(let n=0;n<t.length;n++){const i=Hi(t[n]);for(const t in i)e[t]=i[t]}return e}function ki(t){const e=t.getRenderTarget();return null===e?t.outputColorSpace:!0===e.isXRRenderTarget?e.texture.colorSpace:ye.workingColorSpace}const Gi={clone:Hi,merge:Vi};class Wi extends ci{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=Hi(t.uniforms),this.uniformsGroups=function(t){const e=[];for(let n=0;n<t.length;n++)e.push(t[n].clone());return e}(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class Xi extends Vn{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new fn,this.projectionMatrix=new fn,this.projectionMatrixInverse=new fn,this.coordinateSystem=$t}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const ji=new Fe,qi=new he,Yi=new he;class Ki extends Xi{constructor(t=50,e=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*ie*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*ne*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*ie*Math.atan(Math.tan(.5*ne*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){ji.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(ji.x,ji.y).multiplyScalar(-t/ji.z),ji.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(ji.x,ji.y).multiplyScalar(-t/ji.z)}getViewSize(t,e){return this.getViewBounds(t,qi,Yi),e.subVectors(Yi,qi)}setViewOffset(t,e,n,i,r,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*ne*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const a=this.view;if(null!==this.view&&this.view.enabled){const t=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/t,e-=a.offsetY*n/s,i*=a.width/t,n*=a.height/s}const s=this.filmOffset;0!==s&&(r+=t*s/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const Zi=-90;class Ji extends Vn{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Ki(Zi,1,t,e);i.layers=this.layers,this.add(i);const r=new Ki(Zi,1,t,e);r.layers=this.layers,this.add(r);const a=new Ki(Zi,1,t,e);a.layers=this.layers,this.add(a);const s=new Ki(Zi,1,t,e);s.layers=this.layers,this.add(s);const o=new Ki(Zi,1,t,e);o.layers=this.layers,this.add(o);const l=new Ki(Zi,1,t,e);l.layers=this.layers,this.add(l)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,i,r,a,s,o]=e;for(const t of e)this.remove(t);if(t===$t)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),s.up.set(0,1,0),s.lookAt(0,0,1),o.up.set(0,1,0),o.lookAt(0,0,-1);else{if(t!==Qt)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),s.up.set(0,-1,0),s.lookAt(0,0,1),o.up.set(0,-1,0),o.lookAt(0,0,-1)}for(const t of e)this.add(t),t.updateMatrixWorld()}update(t,e){null===this.parent&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,a,s,o,l,c]=this.children,h=t.getRenderTarget(),u=t.getActiveCubeFace(),d=t.getActiveMipmapLevel(),p=t.xr.enabled;t.xr.enabled=!1;const f=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,i),t.render(e,r),t.setRenderTarget(n,1,i),t.render(e,a),t.setRenderTarget(n,2,i),t.render(e,s),t.setRenderTarget(n,3,i),t.render(e,o),t.setRenderTarget(n,4,i),t.render(e,l),n.texture.generateMipmaps=f,t.setRenderTarget(n,5,i),t.render(e,c),t.setRenderTarget(h,u,d),t.xr.enabled=p,n.texture.needsPMREMUpdate=!0}}class $i extends Pe{constructor(t=[],e=301,n,i,r,a,s,o,l,c){super(t,e,n,i,r,a,s,o,l,c),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class Qi extends Ue{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new $i(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:z}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},i="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",a=new zi(5,5,5),s=new Wi({name:"CubemapFromEquirect",uniforms:Hi(n),vertexShader:i,fragmentShader:r,side:1,blending:0});s.uniforms.tEquirect.value=e;const o=new Fi(a,s),l=e.minFilter;return e.minFilter===V&&(e.minFilter=z),new Ji(1,10,this).update(t,o),e.minFilter=l,o.geometry.dispose(),o.material.dispose(),this}clear(t,e=!0,n=!0,i=!0){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}class tr extends Vn{constructor(){super(),this.isGroup=!0,this.type="Group"}}const er={type:"move"};class nr{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new tr,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new tr,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Fe,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Fe),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new tr,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Fe,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Fe),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,a=null;const s=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(l&&t.hand){a=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n),r=this._getHandJoint(l,i);null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.matrixWorldNeedsUpdate=!0,r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],s=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&s>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&s<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));null!==s&&(i=e.getPose(t.targetRaySpace,n),null===i&&null!==r&&(i=r),null!==i&&(s.matrix.fromArray(i.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.matrixWorldNeedsUpdate=!0,i.linearVelocity?(s.hasLinearVelocity=!0,s.linearVelocity.copy(i.linearVelocity)):s.hasLinearVelocity=!1,i.angularVelocity?(s.hasAngularVelocity=!0,s.angularVelocity.copy(i.angularVelocity)):s.hasAngularVelocity=!1,this.dispatchEvent(er)))}return null!==s&&(s.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==a),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const n=new tr;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class ir extends Vn{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Tn,this.environmentIntensity=1,this.environmentRotation=new Tn,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}const rr=new Fe,ar=new Fe,sr=new ue;class or{constructor(t=new Fe(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=rr.subVectors(n,e).cross(ar.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(rr),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||sr.getNormalMatrix(t),i=this.coplanarPoint(rr).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const lr=new an,cr=new Fe;class hr{constructor(t=new or,e=new or,n=new or,i=new or,r=new or,a=new or){this.planes=[t,e,n,i,r,a]}set(t,e,n,i,r,a){const s=this.planes;return s[0].copy(t),s[1].copy(e),s[2].copy(n),s[3].copy(i),s[4].copy(r),s[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=2e3){const n=this.planes,i=t.elements,r=i[0],a=i[1],s=i[2],o=i[3],l=i[4],c=i[5],h=i[6],u=i[7],d=i[8],p=i[9],f=i[10],m=i[11],g=i[12],_=i[13],v=i[14],x=i[15];if(n[0].setComponents(o-r,u-l,m-d,x-g).normalize(),n[1].setComponents(o+r,u+l,m+d,x+g).normalize(),n[2].setComponents(o+a,u+c,m+p,x+_).normalize(),n[3].setComponents(o-a,u-c,m-p,x-_).normalize(),n[4].setComponents(o-s,u-h,m-f,x-v).normalize(),e===$t)n[5].setComponents(o+s,u+h,m+f,x+v).normalize();else{if(e!==Qt)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);n[5].setComponents(s,h,f,v).normalize()}return this}intersectsObject(t){if(void 0!==t.boundingSphere)null===t.boundingSphere&&t.computeBoundingSphere(),lr.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;null===e.boundingSphere&&e.computeBoundingSphere(),lr.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(lr)}intersectsSprite(t){return lr.center.set(0,0,0),lr.radius=.7071067811865476,lr.applyMatrix4(t.matrixWorld),this.intersectsSphere(lr)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(cr.x=i.normal.x>0?t.max.x:t.min.x,cr.y=i.normal.y>0?t.max.y:t.min.y,cr.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(cr)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}class ur extends Pe{constructor(t,e,n=1014,i,r,a,s=1003,o=1003,l,c=1026){if(c!==$&&c!==Q)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");super(null,i,r,a,s,o,c,n,l),this.isDepthTexture=!0,this.image={width:t,height:e},this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.source=new Ae(Object.assign({},t.image)),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return null!==this.compareFunction&&(e.compareFunction=this.compareFunction),e}}class dr extends bi{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,a=e/2,s=Math.floor(n),o=Math.floor(i),l=s+1,c=o+1,h=t/s,u=e/o,d=[],p=[],f=[],m=[];for(let t=0;t<c;t++){const e=t*u-a;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-e,0),f.push(0,0,1),m.push(n/s),m.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<s;e++){const n=e+l*t,i=e+l*(t+1),r=e+1+l*(t+1),a=e+1+l*t;d.push(n,i,a),d.push(i,r,a)}this.setIndex(d),this.setAttribute("position",new _i(p,3)),this.setAttribute("normal",new _i(f,3)),this.setAttribute("uv",new _i(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new dr(t.width,t.height,t.widthSegments,t.heightSegments)}}class pr extends bi{constructor(t=1,e=32,n=16,i=0,r=2*Math.PI,a=0,s=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:s},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(a+s,Math.PI);let l=0;const c=[],h=new Fe,u=new Fe,d=[],p=[],f=[],m=[];for(let d=0;d<=n;d++){const g=[],_=d/n;let v=0;0===d&&0===a?v=.5/e:d===n&&o===Math.PI&&(v=-.5/e);for(let n=0;n<=e;n++){const o=n/e;h.x=-t*Math.cos(i+o*r)*Math.sin(a+_*s),h.y=t*Math.cos(a+_*s),h.z=t*Math.sin(i+o*r)*Math.sin(a+_*s),p.push(h.x,h.y,h.z),u.copy(h).normalize(),f.push(u.x,u.y,u.z),m.push(o+v,1-_),g.push(l++)}c.push(g)}for(let t=0;t<n;t++)for(let i=0;i<e;i++){const e=c[t][i+1],r=c[t][i],s=c[t+1][i],l=c[t+1][i+1];(0!==t||a>0)&&d.push(e,r,l),(t!==n-1||o<Math.PI)&&d.push(r,s,l)}this.setIndex(d),this.setAttribute("position",new _i(p,3)),this.setAttribute("normal",new _i(f,3)),this.setAttribute("uv",new _i(m,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new pr(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class fr extends ci{constructor(t){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new si(16777215),this.specular=new si(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new si(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new he(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Tn,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class mr extends ci{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class gr extends ci{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function _r(t,e){return t&&t.constructor!==e?"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t):t}class vr{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let a;n:{i:if(!(t<i)){for(let a=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===a)break;if(r=i,i=e[++n],t<i)break e}a=e.length;break n}if(t>=r)break t;{const s=e[1];t<s&&(n=2,r=s);for(let a=n-2;;){if(void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(n===a)break;if(i=r,r=e[--n-1],t>=r)break e}a=n,n=0}}for(;n<a;){const i=n+a>>>1;t<e[i]?a=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===i)return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class xr extends vr{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,a=t+1,s=i[r],o=i[a];if(void 0===s)switch(this.getSettings_().endingStart){case 2401:r=t,s=2*e-n;break;case 2402:r=i.length-2,s=e+i[r]-i[r+1];break;default:r=t,s=n}if(void 0===o)switch(this.getSettings_().endingEnd){case 2401:a=t,o=2*n-e;break;case 2402:a=1,o=n+i[1]-i[0];break;default:a=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-s),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=a*c}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),f=p*p,m=f*p,g=-u*m+2*u*f-u*p,_=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*p+1,v=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f;for(let t=0;t!==s;++t)r[t]=g*a[c+t]+_*a[l+t]+v*a[o+t]+x*a[h+t];return r}}class Mr extends vr{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==s;++t)r[t]=a[l+t]*h+a[o+t]*c;return r}}class yr extends vr{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class Sr{constructor(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=_r(e,this.TimeBufferType),this.values=_r(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:_r(t.times,Array),values:_r(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new yr(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Mr(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new xr(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case It:e=this.InterpolantFactoryMethodDiscrete;break;case Nt:e=this.InterpolantFactoryMethodLinear;break;case Ot:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return It;case this.InterpolantFactoryMethodLinear:return Nt;case this.InterpolantFactoryMethodSmooth:return Ot}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,a=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==r||a!==i){r>=a&&(a=Math.max(a,1),r=a-1);const t=this.getValueSize();this.times=n.slice(r,a),this.values=this.values.slice(r*t,a*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let a=null;for(let e=0;e!==r;e++){const i=n[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==a&&a>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,a),t=!1;break}a=i}if(void 0!==i&&(s=i,ArrayBuffer.isView(s)&&!(s instanceof DataView)))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}var s;return t}optimize(){const t=this.times.slice(),e=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===Ot,r=t.length-1;let a=1;for(let s=1;s<r;++s){let r=!1;const o=t[s];if(o!==t[s+1]&&(1!==s||o!==t[0]))if(i)r=!0;else{const t=s*n,i=t-n,a=t+n;for(let s=0;s!==n;++s){const n=e[t+s];if(n!==e[i+s]||n!==e[a+s]){r=!0;break}}}if(r){if(s!==a){t[a]=t[s];const i=s*n,r=a*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++a}}if(r>0){t[a]=t[r];for(let t=r*n,i=a*n,s=0;s!==n;++s)e[i+s]=e[t+s];++a}return a!==t.length?(this.times=t.slice(0,a),this.values=e.slice(0,a*n)):(this.times=t,this.values=e),this}clone(){const t=this.times.slice(),e=this.values.slice(),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}Sr.prototype.ValueTypeName="",Sr.prototype.TimeBufferType=Float32Array,Sr.prototype.ValueBufferType=Float32Array,Sr.prototype.DefaultInterpolation=Nt;class Er extends Sr{constructor(t,e,n){super(t,e,n)}}Er.prototype.ValueTypeName="bool",Er.prototype.ValueBufferType=Array,Er.prototype.DefaultInterpolation=It,Er.prototype.InterpolantFactoryMethodLinear=void 0,Er.prototype.InterpolantFactoryMethodSmooth=void 0;(class extends Sr{constructor(t,e,n,i){super(t,e,n,i)}}).prototype.ValueTypeName="color";(class extends Sr{constructor(t,e,n,i){super(t,e,n,i)}}).prototype.ValueTypeName="number";class Tr extends vr{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(n-e)/(i-e);let l=t*s;for(let t=l+s;l!==t;l+=4)Oe.slerpFlat(r,0,a,l-s,a,l,o);return r}}class br extends Sr{constructor(t,e,n,i){super(t,e,n,i)}InterpolantFactoryMethodLinear(t){return new Tr(this.times,this.values,this.getValueSize(),t)}}br.prototype.ValueTypeName="quaternion",br.prototype.InterpolantFactoryMethodSmooth=void 0;class wr extends Sr{constructor(t,e,n){super(t,e,n)}}wr.prototype.ValueTypeName="string",wr.prototype.ValueBufferType=Array,wr.prototype.DefaultInterpolation=It,wr.prototype.InterpolantFactoryMethodLinear=void 0,wr.prototype.InterpolantFactoryMethodSmooth=void 0;(class extends Sr{constructor(t,e,n,i){super(t,e,n,i)}}).prototype.ValueTypeName="vector";const Ar={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class Rr{constructor(t,e,n){const i=this;let r,a=!1,s=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===a&&void 0!==i.onStart&&i.onStart(t,s,o),a=!0},this.itemEnd=function(t){s++,void 0!==i.onProgress&&i.onProgress(t,s,o),s===o&&(a=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}}const Cr=new Rr;class Pr{constructor(t){this.manager=void 0!==t?t:Cr,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}Pr.DEFAULT_MATERIAL_NAME="__DEFAULT",Error;class Dr extends Pr{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,a=Ar.get(t);if(void 0!==a)return r.manager.itemStart(t),setTimeout((function(){e&&e(a),r.manager.itemEnd(t)}),0),a;const s=fe("img");function o(){c(),Ar.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){s.removeEventListener("load",o,!1),s.removeEventListener("error",l,!1)}return s.addEventListener("load",o,!1),s.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(s.crossOrigin=this.crossOrigin),r.manager.itemStart(t),s.src=t,s}}class Lr extends Pr{constructor(t){super(t)}load(t,e,n,i){const r=new Pe,a=new Dr(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class Ur extends Vn{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new si(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),void 0!==this.target&&(e.object.target=this.target.uuid),e}}class Ir extends Xi{constructor(t=-1,e=1,n=1,i=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,a=n+t,s=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,a=r+t*this.view.width,s-=e*this.view.offsetY,o=s-e*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}class Nr extends Ur{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class Or extends Ki{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t,this.index=0}}const Fr="\\[\\]\\.:\\/",Br=new RegExp("["+Fr+"]","g"),zr="[^"+Fr+"]",Hr="[^"+Fr.replace("\\.","")+"]",Vr=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",zr)+/(WCOD+)?/.source.replace("WCOD",Hr)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",zr)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",zr)+"$"),kr=["material","materials","bones","map"];class Gr{constructor(t,e,n){this.path=e,this.parsedPath=n||Gr.parseTrackName(e),this.node=Gr.findNode(t,this.parsedPath.nodeName),this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Gr.Composite(t,e,n):new Gr(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(Br,"")}static parseTrackName(t){const e=Vr.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==kr.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const a=n(r.children);if(a)return a}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=Gr.findNode(this.rootNode,e.nodeName),this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i]}}const a=t[i];if(void 0===a){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t)}let s=this.Versioning.None;this.targetObject=t,!0===t.isMaterial?s=this.Versioning.NeedsUpdate:!0===t.isObject3D&&(s=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=a,this.propertyIndex=r}else void 0!==a.fromArray&&void 0!==a.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=a):Array.isArray(a)?(o=this.BindingType.EntireArray,this.resolvedProperty=a):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Gr.Composite=class{constructor(t,e,n){const i=n||Gr.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Gr.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Gr.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Gr.prototype.GetterByBindingType=[Gr.prototype._getValue_direct,Gr.prototype._getValue_array,Gr.prototype._getValue_arrayElement,Gr.prototype._getValue_toArray],Gr.prototype.SetterByBindingTypeAndVersioning=[[Gr.prototype._setValue_direct,Gr.prototype._setValue_direct_setNeedsUpdate,Gr.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Gr.prototype._setValue_array,Gr.prototype._setValue_array_setNeedsUpdate,Gr.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Gr.prototype._setValue_arrayElement,Gr.prototype._setValue_arrayElement_setNeedsUpdate,Gr.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Gr.prototype._setValue_fromArray,Gr.prototype._setValue_fromArray_setNeedsUpdate,Gr.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]],new Float32Array(1);class Wr{constructor(t=1,e=0,n=0){this.radius=t,this.phi=e,this.theta=n}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=ae(this.phi,t,Math.PI-t),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(ae(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class Xr extends te{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(t){void 0!==t?(null!==this.domElement&&this.disconnect(),this.domElement=t):console.warn("THREE.Controls: connect() now requires an element.")}disconnect(){}dispose(){}update(){}}function jr(t,e,n,i){const r=function(t){switch(t){case k:case 1010:return{byteLength:1,components:1};case G:case 1011:case q:return{byteLength:2,components:1};case Y:case K:return{byteLength:2,components:4};case X:case W:case j:return{byteLength:4,components:1};case 35902:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${t}.`)}(i);switch(n){case 1021:case 1024:return t*e;case 1025:return t*e*2;case 1028:case tt:return t*e/r.components*r.byteLength;case 1030:case et:return t*e*2/r.components*r.byteLength;case 1022:return t*e*3/r.components*r.byteLength;case J:case nt:return t*e*4/r.components*r.byteLength;case it:case rt:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case at:case st:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case lt:case ht:return Math.max(t,16)*Math.max(e,8)/4;case ot:case ct:return Math.max(t,8)*Math.max(e,8)/2;case ut:case dt:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case pt:case ft:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case mt:return Math.floor((t+4)/5)*Math.floor((e+3)/4)*16;case gt:return Math.floor((t+4)/5)*Math.floor((e+4)/5)*16;case _t:return Math.floor((t+5)/6)*Math.floor((e+4)/5)*16;case vt:return Math.floor((t+5)/6)*Math.floor((e+5)/6)*16;case xt:return Math.floor((t+7)/8)*Math.floor((e+4)/5)*16;case Mt:return Math.floor((t+7)/8)*Math.floor((e+5)/6)*16;case yt:return Math.floor((t+7)/8)*Math.floor((e+7)/8)*16;case St:return Math.floor((t+9)/10)*Math.floor((e+4)/5)*16;case Et:return Math.floor((t+9)/10)*Math.floor((e+5)/6)*16;case Tt:return Math.floor((t+9)/10)*Math.floor((e+7)/8)*16;case bt:return Math.floor((t+9)/10)*Math.floor((e+9)/10)*16;case wt:return Math.floor((t+11)/12)*Math.floor((e+9)/10)*16;case At:return Math.floor((t+11)/12)*Math.floor((e+11)/12)*16;case Rt:case Ct:case Pt:return Math.ceil(t/4)*Math.ceil(e/4)*16;case 36283:case Dt:return Math.ceil(t/4)*Math.ceil(e/4)*8;case Lt:case Ut:return Math.ceil(t/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${n} format.`)}function qr(){let t=null,e=!1,n=null,i=null;function r(e,a){n(e,a),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function Yr(t){const e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);const i=e.get(n);i&&(t.deleteBuffer(i.buffer),e.delete(n))},update:function(n,i){if(n.isInterleavedBufferAttribute&&(n=n.data),n.isGLBufferAttribute){const t=e.get(n);return void((!t||t.version<n.version)&&e.set(n,{buffer:n.buffer,type:n.type,bytesPerElement:n.elementSize,version:n.version}))}const r=e.get(n);if(void 0===r)e.set(n,function(e,n){const i=e.array,r=e.usage,a=i.byteLength,s=t.createBuffer();let o;if(t.bindBuffer(n,s),t.bufferData(n,i,r),e.onUploadCallback(),i instanceof Float32Array)o=t.FLOAT;else if(i instanceof Uint16Array)o=e.isFloat16BufferAttribute?t.HALF_FLOAT:t.UNSIGNED_SHORT;else if(i instanceof Int16Array)o=t.SHORT;else if(i instanceof Uint32Array)o=t.UNSIGNED_INT;else if(i instanceof Int32Array)o=t.INT;else if(i instanceof Int8Array)o=t.BYTE;else if(i instanceof Uint8Array)o=t.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+i);o=t.UNSIGNED_BYTE}return{buffer:s,type:o,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,size:a}}(n,i));else if(r.version<n.version){if(r.size!==n.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(e,n,i){const r=n.array,a=n.updateRanges;if(t.bindBuffer(i,e),0===a.length)t.bufferSubData(i,0,r);else{a.sort(((t,e)=>t.start-e.start));let e=0;for(let t=1;t<a.length;t++){const n=a[e],i=a[t];i.start<=n.start+n.count+1?n.count=Math.max(n.count,i.start+i.count-n.start):(++e,a[e]=i)}a.length=e+1;for(let e=0,n=a.length;e<n;e++){const n=a[e];t.bufferSubData(i,n.start*r.BYTES_PER_ELEMENT,r,n.start,n.count)}n.clearUpdateRanges()}n.onUploadCallback()}(r.buffer,n,i),r.version=n.version}}}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:t}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=t);const Kr={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},Zr={common:{diffuse:{value:new si(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new ue},alphaMap:{value:null},alphaMapTransform:{value:new ue},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new ue}},envmap:{envMap:{value:null},envMapRotation:{value:new ue},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new ue}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new ue}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new ue},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new ue},normalScale:{value:new he(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new ue},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new ue}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new ue}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new ue}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new si(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new si(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new ue},alphaTest:{value:0},uvTransform:{value:new ue}},sprite:{diffuse:{value:new si(16777215)},opacity:{value:1},center:{value:new he(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new ue},alphaMap:{value:null},alphaMapTransform:{value:new ue},alphaTest:{value:0}}},Jr={basic:{uniforms:Vi([Zr.common,Zr.specularmap,Zr.envmap,Zr.aomap,Zr.lightmap,Zr.fog]),vertexShader:Kr.meshbasic_vert,fragmentShader:Kr.meshbasic_frag},lambert:{uniforms:Vi([Zr.common,Zr.specularmap,Zr.envmap,Zr.aomap,Zr.lightmap,Zr.emissivemap,Zr.bumpmap,Zr.normalmap,Zr.displacementmap,Zr.fog,Zr.lights,{emissive:{value:new si(0)}}]),vertexShader:Kr.meshlambert_vert,fragmentShader:Kr.meshlambert_frag},phong:{uniforms:Vi([Zr.common,Zr.specularmap,Zr.envmap,Zr.aomap,Zr.lightmap,Zr.emissivemap,Zr.bumpmap,Zr.normalmap,Zr.displacementmap,Zr.fog,Zr.lights,{emissive:{value:new si(0)},specular:{value:new si(1118481)},shininess:{value:30}}]),vertexShader:Kr.meshphong_vert,fragmentShader:Kr.meshphong_frag},standard:{uniforms:Vi([Zr.common,Zr.envmap,Zr.aomap,Zr.lightmap,Zr.emissivemap,Zr.bumpmap,Zr.normalmap,Zr.displacementmap,Zr.roughnessmap,Zr.metalnessmap,Zr.fog,Zr.lights,{emissive:{value:new si(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Kr.meshphysical_vert,fragmentShader:Kr.meshphysical_frag},toon:{uniforms:Vi([Zr.common,Zr.aomap,Zr.lightmap,Zr.emissivemap,Zr.bumpmap,Zr.normalmap,Zr.displacementmap,Zr.gradientmap,Zr.fog,Zr.lights,{emissive:{value:new si(0)}}]),vertexShader:Kr.meshtoon_vert,fragmentShader:Kr.meshtoon_frag},matcap:{uniforms:Vi([Zr.common,Zr.bumpmap,Zr.normalmap,Zr.displacementmap,Zr.fog,{matcap:{value:null}}]),vertexShader:Kr.meshmatcap_vert,fragmentShader:Kr.meshmatcap_frag},points:{uniforms:Vi([Zr.points,Zr.fog]),vertexShader:Kr.points_vert,fragmentShader:Kr.points_frag},dashed:{uniforms:Vi([Zr.common,Zr.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Kr.linedashed_vert,fragmentShader:Kr.linedashed_frag},depth:{uniforms:Vi([Zr.common,Zr.displacementmap]),vertexShader:Kr.depth_vert,fragmentShader:Kr.depth_frag},normal:{uniforms:Vi([Zr.common,Zr.bumpmap,Zr.normalmap,Zr.displacementmap,{opacity:{value:1}}]),vertexShader:Kr.meshnormal_vert,fragmentShader:Kr.meshnormal_frag},sprite:{uniforms:Vi([Zr.sprite,Zr.fog]),vertexShader:Kr.sprite_vert,fragmentShader:Kr.sprite_frag},background:{uniforms:{uvTransform:{value:new ue},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Kr.background_vert,fragmentShader:Kr.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new ue}},vertexShader:Kr.backgroundCube_vert,fragmentShader:Kr.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Kr.cube_vert,fragmentShader:Kr.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Kr.equirect_vert,fragmentShader:Kr.equirect_frag},distanceRGBA:{uniforms:Vi([Zr.common,Zr.displacementmap,{referencePosition:{value:new Fe},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Kr.distanceRGBA_vert,fragmentShader:Kr.distanceRGBA_frag},shadow:{uniforms:Vi([Zr.lights,Zr.fog,{color:{value:new si(0)},opacity:{value:1}}]),vertexShader:Kr.shadow_vert,fragmentShader:Kr.shadow_frag}};Jr.physical={uniforms:Vi([Jr.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new ue},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new ue},clearcoatNormalScale:{value:new he(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new ue},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new ue},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new ue},sheen:{value:0},sheenColor:{value:new si(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new ue},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new ue},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new ue},transmissionSamplerSize:{value:new he},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new ue},attenuationDistance:{value:0},attenuationColor:{value:new si(0)},specularColor:{value:new si(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new ue},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new ue},anisotropyVector:{value:new he},anisotropyMap:{value:null},anisotropyMapTransform:{value:new ue}}]),vertexShader:Kr.meshphysical_vert,fragmentShader:Kr.meshphysical_frag};const $r={r:0,b:0,g:0},Qr=new Tn,ta=new fn;function ea(t,e,n,i,r,a,s){const o=new si(0);let l,c,h=!0===a?0:1,u=null,d=0,p=null;function f(t){let i=!0===t.isScene?t.background:null;return i&&i.isTexture&&(i=(t.backgroundBlurriness>0?n:e).get(i)),i}function m(e,n){e.getRGB($r,ki(t)),i.buffers.color.setClear($r.r,$r.g,$r.b,n,s)}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t),h=e,m(o,h)},getClearAlpha:function(){return h},setClearAlpha:function(t){h=t,m(o,h)},render:function(e){let n=!1;const r=f(e);null===r?m(o,h):r&&r.isColor&&(m(r,1),n=!0);const a=t.xr.getEnvironmentBlendMode();"additive"===a?i.buffers.color.setClear(0,0,0,1,s):"alpha-blend"===a&&i.buffers.color.setClear(0,0,0,0,s),(t.autoClear||n)&&(i.buffers.depth.setTest(!0),i.buffers.depth.setMask(!0),i.buffers.color.setMask(!0),t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil))},addToRenderList:function(e,n){const i=f(n);i&&(i.isCubeTexture||i.mapping===L)?(void 0===c&&(c=new Fi(new zi(1,1,1),new Wi({name:"BackgroundCubeMaterial",uniforms:Hi(Jr.backgroundCube.uniforms),vertexShader:Jr.backgroundCube.vertexShader,fragmentShader:Jr.backgroundCube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),r.update(c)),Qr.copy(n.backgroundRotation),Qr.x*=-1,Qr.y*=-1,Qr.z*=-1,i.isCubeTexture&&!1===i.isRenderTargetTexture&&(Qr.y*=-1,Qr.z*=-1),c.material.uniforms.envMap.value=i,c.material.uniforms.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,c.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness,c.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,c.material.uniforms.backgroundRotation.value.setFromMatrix4(ta.makeRotationFromEuler(Qr)),c.material.toneMapped=ye.getTransfer(i.colorSpace)!==Vt,u===i&&d===i.version&&p===t.toneMapping||(c.material.needsUpdate=!0,u=i,d=i.version,p=t.toneMapping),c.layers.enableAll(),e.unshift(c,c.geometry,c.material,0,0,null)):i&&i.isTexture&&(void 0===l&&(l=new Fi(new dr(2,2),new Wi({name:"BackgroundMaterial",uniforms:Hi(Jr.background.uniforms),vertexShader:Jr.background.vertexShader,fragmentShader:Jr.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1,allowOverride:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(l)),l.material.uniforms.t2D.value=i,l.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,l.material.toneMapped=ye.getTransfer(i.colorSpace)!==Vt,!0===i.matrixAutoUpdate&&i.updateMatrix(),l.material.uniforms.uvTransform.value.copy(i.matrix),u===i&&d===i.version&&p===t.toneMapping||(l.material.needsUpdate=!0,u=i,d=i.version,p=t.toneMapping),l.layers.enableAll(),e.unshift(l,l.geometry,l.material,0,0,null))},dispose:function(){void 0!==c&&(c.geometry.dispose(),c.material.dispose(),c=void 0),void 0!==l&&(l.geometry.dispose(),l.material.dispose(),l=void 0)}}}function na(t,e){const n=t.getParameter(t.MAX_VERTEX_ATTRIBS),i={},r=c(null);let a=r,s=!1;function o(e){return t.bindVertexArray(e)}function l(e){return t.deleteVertexArray(e)}function c(t){const e=[],i=[],r=[];for(let t=0;t<n;t++)e[t]=0,i[t]=0,r[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:i,attributeDivisors:r,object:t,attributes:{},index:null}}function h(){const t=a.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function u(t){d(t,0)}function d(e,n){const i=a.newAttributes,r=a.enabledAttributes,s=a.attributeDivisors;i[e]=1,0===r[e]&&(t.enableVertexAttribArray(e),r[e]=1),s[e]!==n&&(t.vertexAttribDivisor(e,n),s[e]=n)}function p(){const e=a.newAttributes,n=a.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function f(e,n,i,r,a,s,o){!0===o?t.vertexAttribIPointer(e,n,i,a,s):t.vertexAttribPointer(e,n,i,r,a,s)}function m(){g(),s=!0,a!==r&&(a=r,o(a.object))}function g(){r.geometry=null,r.program=null,r.wireframe=!1}return{setup:function(n,r,l,m,g){let _=!1;const v=function(e,n,r){const a=!0===r.wireframe;let s=i[e.id];void 0===s&&(s={},i[e.id]=s);let o=s[n.id];void 0===o&&(o={},s[n.id]=o);let l=o[a];return void 0===l&&(l=c(t.createVertexArray()),o[a]=l),l}(m,l,r);a!==v&&(a=v,o(a.object)),_=function(t,e,n,i){const r=a.attributes,s=e.attributes;let o=0;const l=n.getAttributes();for(const e in l)if(l[e].location>=0){const n=r[e];let i=s[e];if(void 0===i&&("instanceMatrix"===e&&t.instanceMatrix&&(i=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(i=t.instanceColor)),void 0===n)return!0;if(n.attribute!==i)return!0;if(i&&n.data!==i.data)return!0;o++}return a.attributesNum!==o||a.index!==i}(n,m,l,g),_&&function(t,e,n,i){const r={},s=e.attributes;let o=0;const l=n.getAttributes();for(const e in l)if(l[e].location>=0){let n=s[e];void 0===n&&("instanceMatrix"===e&&t.instanceMatrix&&(n=t.instanceMatrix),"instanceColor"===e&&t.instanceColor&&(n=t.instanceColor));const i={};i.attribute=n,n&&n.data&&(i.data=n.data),r[e]=i,o++}a.attributes=r,a.attributesNum=o,a.index=i}(n,m,l,g),null!==g&&e.update(g,t.ELEMENT_ARRAY_BUFFER),(_||s)&&(s=!1,function(n,i,r,a){h();const s=a.attributes,o=r.getAttributes(),l=i.defaultAttributeValues;for(const i in o){const r=o[i];if(r.location>=0){let o=s[i];if(void 0===o&&("instanceMatrix"===i&&n.instanceMatrix&&(o=n.instanceMatrix),"instanceColor"===i&&n.instanceColor&&(o=n.instanceColor)),void 0!==o){const i=o.normalized,s=o.itemSize,l=e.get(o);if(void 0===l)continue;const c=l.buffer,h=l.type,p=l.bytesPerElement,m=h===t.INT||h===t.UNSIGNED_INT||o.gpuType===W;if(o.isInterleavedBufferAttribute){const e=o.data,l=e.stride,g=o.offset;if(e.isInstancedInterleavedBuffer){for(let t=0;t<r.locationSize;t++)d(r.location+t,e.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=e.meshPerAttribute*e.count)}else for(let t=0;t<r.locationSize;t++)u(r.location+t);t.bindBuffer(t.ARRAY_BUFFER,c);for(let t=0;t<r.locationSize;t++)f(r.location+t,s/r.locationSize,h,i,l*p,(g+s/r.locationSize*t)*p,m)}else{if(o.isInstancedBufferAttribute){for(let t=0;t<r.locationSize;t++)d(r.location+t,o.meshPerAttribute);!0!==n.isInstancedMesh&&void 0===a._maxInstanceCount&&(a._maxInstanceCount=o.meshPerAttribute*o.count)}else for(let t=0;t<r.locationSize;t++)u(r.location+t);t.bindBuffer(t.ARRAY_BUFFER,c);for(let t=0;t<r.locationSize;t++)f(r.location+t,s/r.locationSize,h,i,s*p,s/r.locationSize*t*p,m)}}else if(void 0!==l){const e=l[i];if(void 0!==e)switch(e.length){case 2:t.vertexAttrib2fv(r.location,e);break;case 3:t.vertexAttrib3fv(r.location,e);break;case 4:t.vertexAttrib4fv(r.location,e);break;default:t.vertexAttrib1fv(r.location,e)}}}}p()}(n,r,l,m),null!==g&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.get(g).buffer))},reset:m,resetDefaultState:g,dispose:function(){m();for(const t in i){const e=i[t];for(const t in e){const n=e[t];for(const t in n)l(n[t].object),delete n[t];delete e[t]}delete i[t]}},releaseStatesOfGeometry:function(t){if(void 0===i[t.id])return;const e=i[t.id];for(const t in e){const n=e[t];for(const t in n)l(n[t].object),delete n[t];delete e[t]}delete i[t.id]},releaseStatesOfProgram:function(t){for(const e in i){const n=i[e];if(void 0===n[t.id])continue;const r=n[t.id];for(const t in r)l(r[t].object),delete r[t];delete n[t.id]}},initAttributes:h,enableAttribute:u,disableUnusedAttributes:p}}function ia(t,e,n){let i;function r(e,r,a){0!==a&&(t.drawArraysInstanced(i,e,r,a),n.update(r,i,a))}this.setMode=function(t){i=t},this.render=function(e,r){t.drawArrays(i,e,r),n.update(r,i,1)},this.renderInstances=r,this.renderMultiDraw=function(t,r,a){if(0===a)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i,t,0,r,0,a);let s=0;for(let t=0;t<a;t++)s+=r[t];n.update(s,i,1)},this.renderMultiDrawInstances=function(t,a,s,o){if(0===s)return;const l=e.get("WEBGL_multi_draw");if(null===l)for(let e=0;e<t.length;e++)r(t[e],a[e],o[e]);else{l.multiDrawArraysInstancedWEBGL(i,t,0,a,0,o,0,s);let e=0;for(let t=0;t<s;t++)e+=a[t]*o[t];n.update(e,i,1)}}}function ra(t,e,n,i){let r;function a(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let s=void 0!==n.precision?n.precision:"highp";const o=a(s);o!==s&&(console.warn("THREE.WebGLRenderer:",s,"not supported, using",o,"instead."),s=o);const l=!0===n.logarithmicDepthBuffer,c=!0===n.reverseDepthBuffer&&e.has("EXT_clip_control"),h=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),u=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);return{isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==r)return r;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");r=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r},getMaxPrecision:a,textureFormatReadable:function(e){return e===J||i.convert(e)===t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(n){const r=n===q&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(n!==k&&i.convert(n)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==j&&!r)},precision:s,logarithmicDepthBuffer:l,reverseDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),maxCubemapSize:t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes:t.getParameter(t.MAX_VERTEX_ATTRIBS),maxVertexUniforms:t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings:t.getParameter(t.MAX_VARYING_VECTORS),maxFragmentUniforms:t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:u>0,maxSamples:t.getParameter(t.MAX_SAMPLES)}}function aa(t){const e=this;let n=null,i=0,r=!1,a=!1;const s=new or,o=new ue,l={value:null,needsUpdate:!1};function c(t,n,i,r){const a=null!==t?t.length:0;let c=null;if(0!==a){if(c=l.value,!0!==r||null===c){const e=i+4*a,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==a;++e,n+=4)s.copy(t[e]).applyMatrix4(r,o),s.normal.toArray(c,n),c[n+3]=s.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=a,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e){const n=0!==t.length||e||0!==i||r;return r=e,i=t.length,n},this.beginShadows=function(){a=!0,c(null)},this.endShadows=function(){a=!1},this.setGlobalState=function(t,e){n=c(t,e,0)},this.setState=function(s,o,h){const u=s.clippingPlanes,d=s.clipIntersection,p=s.clipShadows,f=t.get(s);if(!r||null===u||0===u.length||a&&!p)a?c(null):(l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0);else{const t=a?0:i,e=4*t;let r=f.clippingState||null;l.value=r,r=c(u,o,e,h);for(let t=0;t!==e;++t)r[t]=n[t];f.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function sa(t){let e=new WeakMap;function n(t,e){return 303===e?t.mapping=P:304===e&&(t.mapping=D),t}function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping;if(303===a||304===a){if(e.has(r))return n(e.get(r).texture,r.mapping);{const a=r.image;if(a&&a.height>0){const s=new Qi(a.height);return s.fromEquirectangularTexture(t,r),e.set(r,s),r.addEventListener("dispose",i),n(s.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}const oa=[.125,.215,.35,.446,.526,.582],la=new Ir,ca=new si;let ha=null,ua=0,da=0,pa=!1;const fa=(1+Math.sqrt(5))/2,ma=1/fa,ga=[new Fe(-fa,ma,0),new Fe(fa,ma,0),new Fe(-ma,0,fa),new Fe(ma,0,fa),new Fe(0,fa,-ma),new Fe(0,fa,ma),new Fe(-1,1,-1),new Fe(1,1,-1),new Fe(-1,1,1),new Fe(1,1,1)],_a=new Fe;class va{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100,r={}){const{size:a=256,position:s=_a}=r;ha=this._renderer.getRenderTarget(),ua=this._renderer.getActiveCubeFace(),da=this._renderer.getActiveMipmapLevel(),pa=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(a);const o=this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(t,n,i,o,s),e>0&&this._blur(o,0,0,e),this._applyPMREM(o),this._cleanup(o),o}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Sa(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=ya(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(ha,ua,da),this._renderer.xr.enabled=pa,t.scissorTest=!1,Ma(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===P||t.mapping===D?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),ha=this._renderer.getRenderTarget(),ua=this._renderer.getActiveCubeFace(),da=this._renderer.getActiveMipmapLevel(),pa=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:z,minFilter:z,generateMipmaps:!1,type:q,format:J,colorSpace:zt,depthBuffer:!1},i=xa(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=xa(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],i=[];let r=t;const a=t-4+1+oa.length;for(let s=0;s<a;s++){const a=Math.pow(2,r);n.push(a);let o=1/a;s>t-4?o=oa[s-t+4-1]:0===s&&(o=0),i.push(o);const l=1/(a-2),c=-l,h=1+l,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,f=3,m=2,g=1,_=new Float32Array(f*p*d),v=new Float32Array(m*p*d),x=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,n=t>2?0:-1,i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];_.set(i,f*p*t),v.set(u,m*p*t);const r=[t,t,t,t,t,t];x.set(r,g*p*t)}const M=new bi;M.setAttribute("position",new fi(_,f)),M.setAttribute("uv",new fi(v,m)),M.setAttribute("faceIndex",new fi(x,g)),e.push(M),r>4&&r--}return{lodPlanes:e,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(t,e,n){const i=new Float32Array(20),r=new Fe(0,1,0);return new Wi({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(i,t,e)}return i}_compileMaterial(t){const e=new Fi(this._lodPlanes[0],t);this._renderer.compile(e,la)}_sceneToCubeUV(t,e,n,i,r){const a=new Ki(90,1,e,n),s=[1,-1,1,1,1,1],o=[1,1,1,-1,-1,-1],l=this._renderer,c=l.autoClear,h=l.toneMapping;l.getClearColor(ca),l.toneMapping=0,l.autoClear=!1;const u=new hi({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),d=new Fi(new zi,u);let p=!1;const f=t.background;f?f.isColor&&(u.color.copy(f),t.background=null,p=!0):(u.color.copy(ca),p=!0);for(let e=0;e<6;e++){const n=e%3;0===n?(a.up.set(0,s[e],0),a.position.set(r.x,r.y,r.z),a.lookAt(r.x+o[e],r.y,r.z)):1===n?(a.up.set(0,0,s[e]),a.position.set(r.x,r.y,r.z),a.lookAt(r.x,r.y+o[e],r.z)):(a.up.set(0,s[e],0),a.position.set(r.x,r.y,r.z),a.lookAt(r.x,r.y,r.z+o[e]));const c=this._cubeSize;Ma(i,n*c,e>2?c:0,c,c),l.setRenderTarget(i),p&&l.render(d,a),l.render(t,a)}d.geometry.dispose(),d.material.dispose(),l.toneMapping=h,l.autoClear=c,t.background=f}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===P||t.mapping===D;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=Sa()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=ya());const r=i?this._cubemapMaterial:this._equirectMaterial,a=new Fi(this._lodPlanes[0],r);r.uniforms.envMap.value=t;const s=this._cubeSize;Ma(e,0,0,3*s,2*s),n.setRenderTarget(e),n.render(a,la)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const i=this._lodPlanes.length;for(let e=1;e<i;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),r=ga[(i-e-1)%ga.length];this._blur(t,e-1,e,n,r)}e.autoClear=n}_blur(t,e,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,"latitudinal",r),this._halfBlur(a,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,a,s){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new Fi(this._lodPlanes[i],l),h=l.uniforms,u=this._sizeLods[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,f=isFinite(r)?1+Math.floor(3*p):20;f>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0===t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;h.envMap.value=t.texture,h.samples.value=f,h.weights.value=m,h.latitudinal.value="latitudinal"===a,s&&(h.poleAxis.value=s);const{_lodMax:_}=this;h.dTheta.value=d,h.mipInt.value=_-n;const v=this._sizeLods[i];Ma(e,3*v*(i>_-4?i-_+4:0),4*(this._cubeSize-v),3*v,2*v),o.setRenderTarget(e),o.render(c,la)}}function xa(t,e,n){const i=new Ue(t,e,n);return i.texture.mapping=L,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Ma(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function ya(){return new Wi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Sa(){return new Wi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function Ea(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const a=r.mapping,s=303===a||304===a,o=a===P||a===D;if(s||o){let a=e.get(r);const l=void 0!==a?a.texture.pmremVersion:0;if(r.isRenderTargetTexture&&r.pmremVersion!==l)return null===n&&(n=new va(t)),a=s?n.fromEquirectangular(r,a):n.fromCubemap(r,a),a.texture.pmremVersion=r.pmremVersion,e.set(r,a),a.texture;if(void 0!==a)return a.texture;{const l=r.image;return s&&l&&l.height>0||o&&l&&function(t){let e=0;for(let n=0;n<6;n++)void 0!==t[n]&&e++;return 6===e}(l)?(null===n&&(n=new va(t)),a=s?n.fromEquirectangular(r):n.fromCubemap(r),a.texture.pmremVersion=r.pmremVersion,e.set(r,a),r.addEventListener("dispose",i),a.texture):null}}}return r},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function Ta(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(){n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance"),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture"),n("WEBGL_render_shared_exponent")},get:function(t){const e=n(t);return null===e&&_e("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function ba(t,e,n,i){const r={},a=new WeakMap;function s(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener("dispose",s),delete r[o.id];const l=a.get(o);l&&(e.remove(l),a.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let s=0;if(null!==i){const t=i.array;s=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],a=t[e+2];n.push(i,r,r,a,a,i)}}else{if(void 0===r)return;{const t=r.array;s=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0,i=e+1,r=e+2;n.push(t,i,i,r,r,t)}}}const o=new(pe(n)?gi:mi)(n,1);o.version=s;const l=a.get(t);l&&e.remove(l),a.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",s),r[e.id]=!0,n.memory.geometries++),e},update:function(n){const i=n.attributes;for(const n in i)e.update(i[n],t.ARRAY_BUFFER)},getWireframeAttribute:function(t){const e=a.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return a.get(t)}}}function wa(t,e,n){let i,r,a;function s(e,s,o){0!==o&&(t.drawElementsInstanced(i,s,r,e*a,o),n.update(s,i,o))}this.setMode=function(t){i=t},this.setIndex=function(t){r=t.type,a=t.bytesPerElement},this.render=function(e,s){t.drawElements(i,s,r,e*a),n.update(s,i,1)},this.renderInstances=s,this.renderMultiDraw=function(t,a,s){if(0===s)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i,a,0,r,t,0,s);let o=0;for(let t=0;t<s;t++)o+=a[t];n.update(o,i,1)},this.renderMultiDrawInstances=function(t,o,l,c){if(0===l)return;const h=e.get("WEBGL_multi_draw");if(null===h)for(let e=0;e<t.length;e++)s(t[e]/a,o[e],c[e]);else{h.multiDrawElementsInstancedWEBGL(i,o,0,r,t,0,c,0,l);let e=0;for(let t=0;t<l;t++)e+=o[t]*c[t];n.update(e,i,1)}}}function Aa(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,i,r){switch(e.calls++,i){case t.TRIANGLES:e.triangles+=r*(n/3);break;case t.LINES:e.lines+=r*(n/2);break;case t.LINE_STRIP:e.lines+=r*(n-1);break;case t.LINE_LOOP:e.lines+=r*n;break;case t.POINTS:e.points+=r*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i)}}}}function Ra(t,e,n){const i=new WeakMap,r=new De;return{update:function(a,s,o){const l=a.morphTargetInfluences,c=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color,h=void 0!==c?c.length:0;let u=i.get(s);if(void 0===u||u.count!==h){void 0!==u&&u.texture.dispose();const d=void 0!==s.morphAttributes.position,p=void 0!==s.morphAttributes.normal,f=void 0!==s.morphAttributes.color,m=s.morphAttributes.position||[],g=s.morphAttributes.normal||[],_=s.morphAttributes.color||[];let v=0;!0===d&&(v=1),!0===p&&(v=2),!0===f&&(v=3);let x=s.attributes.position.count*v,M=1;x>e.maxTextureSize&&(M=Math.ceil(x/e.maxTextureSize),x=e.maxTextureSize);const y=new Float32Array(x*M*4*h),S=new Ie(y,x,M,h);S.type=j,S.needsUpdate=!0;const E=4*v;for(let b=0;b<h;b++){const w=m[b],A=g[b],R=_[b],C=x*M*4*b;for(let P=0;P<w.count;P++){const D=P*E;!0===d&&(r.fromBufferAttribute(w,P),y[C+D+0]=r.x,y[C+D+1]=r.y,y[C+D+2]=r.z,y[C+D+3]=0),!0===p&&(r.fromBufferAttribute(A,P),y[C+D+4]=r.x,y[C+D+5]=r.y,y[C+D+6]=r.z,y[C+D+7]=0),!0===f&&(r.fromBufferAttribute(R,P),y[C+D+8]=r.x,y[C+D+9]=r.y,y[C+D+10]=r.z,y[C+D+11]=4===R.itemSize?r.w:1)}}function T(){S.dispose(),i.delete(s),s.removeEventListener("dispose",T)}u={count:h,texture:S,size:new he(x,M)},i.set(s,u),s.addEventListener("dispose",T)}if(!0===a.isInstancedMesh&&null!==a.morphTexture)o.getUniforms().setValue(t,"morphTexture",a.morphTexture,n);else{let L=0;for(let I=0;I<l.length;I++)L+=l[I];const U=s.morphTargetsRelative?1:1-L;o.getUniforms().setValue(t,"morphTargetBaseInfluence",U),o.getUniforms().setValue(t,"morphTargetInfluences",l)}o.getUniforms().setValue(t,"morphTargetsTexture",u.texture,n),o.getUniforms().setValue(t,"morphTargetsTextureSize",u.size)}}}function Ca(t,e,n,i){let r=new WeakMap;function a(t){const e=t.target;e.removeEventListener("dispose",a),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(s){const o=i.render.frame,l=s.geometry,c=e.get(s,l);if(r.get(c)!==o&&(e.update(c),r.set(c,o)),s.isInstancedMesh&&(!1===s.hasEventListener("dispose",a)&&s.addEventListener("dispose",a),r.get(s)!==o&&(n.update(s.instanceMatrix,t.ARRAY_BUFFER),null!==s.instanceColor&&n.update(s.instanceColor,t.ARRAY_BUFFER),r.set(s,o))),s.isSkinnedMesh){const t=s.skeleton;r.get(t)!==o&&(t.update(),r.set(t,o))}return c},dispose:function(){r=new WeakMap}}}const Pa=new Pe,Da=new ur(1,1),La=new Ie,Ua=new Ne,Ia=new $i,Na=[],Oa=[],Fa=new Float32Array(16),Ba=new Float32Array(9),za=new Float32Array(4);function Ha(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let a=Na[r];if(void 0===a&&(a=new Float32Array(r),Na[r]=a),0!==e){i.toArray(a,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(a,r)}return a}function Va(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function ka(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function Ga(t,e){let n=Oa[e];void 0===n&&(n=new Int32Array(e),Oa[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function Wa(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function Xa(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Va(n,e))return;t.uniform2fv(this.addr,e),ka(n,e)}}function ja(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Va(n,e))return;t.uniform3fv(this.addr,e),ka(n,e)}}function qa(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Va(n,e))return;t.uniform4fv(this.addr,e),ka(n,e)}}function Ya(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Va(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),ka(n,e)}else{if(Va(n,i))return;za.set(i),t.uniformMatrix2fv(this.addr,!1,za),ka(n,i)}}function Ka(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Va(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),ka(n,e)}else{if(Va(n,i))return;Ba.set(i),t.uniformMatrix3fv(this.addr,!1,Ba),ka(n,i)}}function Za(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Va(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),ka(n,e)}else{if(Va(n,i))return;Fa.set(i),t.uniformMatrix4fv(this.addr,!1,Fa),ka(n,i)}}function Ja(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function $a(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2i(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Va(n,e))return;t.uniform2iv(this.addr,e),ka(n,e)}}function Qa(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3i(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(Va(n,e))return;t.uniform3iv(this.addr,e),ka(n,e)}}function ts(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4i(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Va(n,e))return;t.uniform4iv(this.addr,e),ka(n,e)}}function es(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function ns(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2ui(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Va(n,e))return;t.uniform2uiv(this.addr,e),ka(n,e)}}function is(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3ui(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(Va(n,e))return;t.uniform3uiv(this.addr,e),ka(n,e)}}function rs(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4ui(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Va(n,e))return;t.uniform4uiv(this.addr,e),ka(n,e)}}function as(t,e,n){const i=this.cache,r=n.allocateTextureUnit();let a;i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),this.type===t.SAMPLER_2D_SHADOW?(Da.compareFunction=515,a=Da):a=Pa,n.setTexture2D(e||a,r)}function ss(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||Ua,r)}function os(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(e||Ia,r)}function ls(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||La,r)}function cs(t,e){t.uniform1fv(this.addr,e)}function hs(t,e){const n=Ha(e,this.size,2);t.uniform2fv(this.addr,n)}function us(t,e){const n=Ha(e,this.size,3);t.uniform3fv(this.addr,n)}function ds(t,e){const n=Ha(e,this.size,4);t.uniform4fv(this.addr,n)}function ps(t,e){const n=Ha(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function fs(t,e){const n=Ha(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function ms(t,e){const n=Ha(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function gs(t,e){t.uniform1iv(this.addr,e)}function _s(t,e){t.uniform2iv(this.addr,e)}function vs(t,e){t.uniform3iv(this.addr,e)}function xs(t,e){t.uniform4iv(this.addr,e)}function Ms(t,e){t.uniform1uiv(this.addr,e)}function ys(t,e){t.uniform2uiv(this.addr,e)}function Ss(t,e){t.uniform3uiv(this.addr,e)}function Es(t,e){t.uniform4uiv(this.addr,e)}function Ts(t,e,n){const i=this.cache,r=e.length,a=Ga(n,r);Va(i,a)||(t.uniform1iv(this.addr,a),ka(i,a));for(let t=0;t!==r;++t)n.setTexture2D(e[t]||Pa,a[t])}function bs(t,e,n){const i=this.cache,r=e.length,a=Ga(n,r);Va(i,a)||(t.uniform1iv(this.addr,a),ka(i,a));for(let t=0;t!==r;++t)n.setTexture3D(e[t]||Ua,a[t])}function ws(t,e,n){const i=this.cache,r=e.length,a=Ga(n,r);Va(i,a)||(t.uniform1iv(this.addr,a),ka(i,a));for(let t=0;t!==r;++t)n.setTextureCube(e[t]||Ia,a[t])}function As(t,e,n){const i=this.cache,r=e.length,a=Ga(n,r);Va(i,a)||(t.uniform1iv(this.addr,a),ka(i,a));for(let t=0;t!==r;++t)n.setTexture2DArray(e[t]||La,a[t])}class Rs{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=function(t){switch(t){case 5126:return Wa;case 35664:return Xa;case 35665:return ja;case 35666:return qa;case 35674:return Ya;case 35675:return Ka;case 35676:return Za;case 5124:case 35670:return Ja;case 35667:case 35671:return $a;case 35668:case 35672:return Qa;case 35669:case 35673:return ts;case 5125:return es;case 36294:return ns;case 36295:return is;case 36296:return rs;case 35678:case 36198:case 36298:case 36306:case 35682:return as;case 35679:case 36299:case 36307:return ss;case 35680:case 36300:case 36308:case 36293:return os;case 36289:case 36303:case 36311:case 36292:return ls}}(e.type)}}class Cs{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=function(t){switch(t){case 5126:return cs;case 35664:return hs;case 35665:return us;case 35666:return ds;case 35674:return ps;case 35675:return fs;case 35676:return ms;case 5124:case 35670:return gs;case 35667:case 35671:return _s;case 35668:case 35672:return vs;case 35669:case 35673:return xs;case 5125:return Ms;case 36294:return ys;case 36295:return Ss;case 36296:return Es;case 35678:case 36198:case 36298:case 36306:case 35682:return Ts;case 35679:case 36299:case 36307:return bs;case 35680:case 36300:case 36308:case 36293:return ws;case 36289:case 36303:case 36311:case 36292:return As}}(e.type)}}class Ps{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(t,e[a.id],n)}}}const Ds=/(\w+)(\])?(\[|\.)?/g;function Ls(t,e){t.seq.push(e),t.map[e.id]=e}function Us(t,e,n){const i=t.name,r=i.length;for(Ds.lastIndex=0;;){const a=Ds.exec(i),s=Ds.lastIndex;let o=a[1];const l="]"===a[2],c=a[3];if(l&&(o|=0),void 0===c||"["===c&&s+2===r){Ls(n,void 0===c?new Rs(o,t,e):new Cs(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new Ps(o),Ls(n,t)),n=t}}}class Is{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);Us(n,t.getUniformLocation(e,n.name),this)}}setValue(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)}static upload(t,e,n,i){for(let r=0,a=e.length;r!==a;++r){const a=e[r],s=n[a.id];!1!==s.needsUpdate&&a.setValue(t,s.value,i)}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n}}function Ns(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}let Os=0;const Fs=new ue;function Bs(t,e,n){const i=t.getShaderParameter(e,t.COMPILE_STATUS),r=t.getShaderInfoLog(e).trim();if(i&&""===r)return"";const a=/ERROR: 0:(\d+)/.exec(r);if(a){const i=parseInt(a[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+function(t,e){const n=t.split("\n"),i=[],r=Math.max(e-6,0),a=Math.min(e+6,n.length);for(let t=r;t<a;t++){const r=t+1;i.push(`${r===e?">":" "} ${r}: ${n[t]}`)}return i.join("\n")}(t.getShaderSource(e),i)}return r}function zs(t,e){const n=function(t){ye._getMatrix(Fs,ye.workingColorSpace,t);const e=`mat3( ${Fs.elements.map((t=>t.toFixed(4)))} )`;switch(ye.getTransfer(t)){case Ht:return[e,"LinearTransferOETF"];case Vt:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",t),[e,"LinearTransferOETF"]}}(e);return[`vec4 ${t}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function Hs(t,e){let n;switch(e){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="Cineon";break;case 4:n="ACESFilmic";break;case 6:n="AgX";break;case 7:n="Neutral";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const Vs=new Fe;function ks(t){return""!==t}function Gs(t,e){const n=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Ws(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Xs=/^[ \t]*#include +<([\w\d./]+)>/gm;function js(t){return t.replace(Xs,Ys)}const qs=new Map;function Ys(t,e){let n=Kr[e];if(void 0===n){const t=qs.get(e);if(void 0===t)throw new Error("Can not resolve #include <"+e+">");n=Kr[t],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,t)}return js(n)}const Ks=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Zs(t){return t.replace(Ks,Js)}function Js(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function $s(t){let e=`precision ${t.precision} float;\n\tprecision ${t.precision} int;\n\tprecision ${t.precision} sampler2D;\n\tprecision ${t.precision} samplerCube;\n\tprecision ${t.precision} sampler3D;\n\tprecision ${t.precision} sampler2DArray;\n\tprecision ${t.precision} sampler2DShadow;\n\tprecision ${t.precision} samplerCubeShadow;\n\tprecision ${t.precision} sampler2DArrayShadow;\n\tprecision ${t.precision} isampler2D;\n\tprecision ${t.precision} isampler3D;\n\tprecision ${t.precision} isamplerCube;\n\tprecision ${t.precision} isampler2DArray;\n\tprecision ${t.precision} usampler2D;\n\tprecision ${t.precision} usampler3D;\n\tprecision ${t.precision} usamplerCube;\n\tprecision ${t.precision} usampler2DArray;\n\t`;return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Qs(t,e,n,i){const r=t.getContext(),a=n.defines;let s=n.vertexShader,o=n.fragmentShader;const l=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(n),c=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case P:case D:e="ENVMAP_TYPE_CUBE";break;case L:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),h=function(t){let e="ENVMAP_MODE_REFLECTION";return t.envMap&&t.envMapMode===D&&(e="ENVMAP_MODE_REFRACTION"),e}(n),u=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(n),d=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e)-2,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),p=function(t){return[t.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",t.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(ks).join("\n")}(n),f=function(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(a),m=r.createProgram();let g,_,v=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(g=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f].filter(ks).join("\n"),g.length>0&&(g+="\n"),_=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f].filter(ks).join("\n"),_.length>0&&(_+="\n")):(g=[$s(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+h:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(ks).join("\n"),_=[$s(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,f,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+h:"",n.envMap?"#define "+u:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?Kr.tonemapping_pars_fragment:"",0!==n.toneMapping?Hs("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Kr.colorspace_pars_fragment,zs("linearToOutputTexel",n.outputColorSpace),(ye.getLuminanceCoefficients(Vs),["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${Vs.x.toFixed(4)}, ${Vs.y.toFixed(4)}, ${Vs.z.toFixed(4)} );`,"\treturn dot( weights, rgb );","}"].join("\n")),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(ks).join("\n")),s=js(s),s=Gs(s,n),s=Ws(s,n),o=js(o),o=Gs(o,n),o=Ws(o,n),s=Zs(s),o=Zs(o),!0!==n.isRawShaderMaterial&&(v="#version 300 es\n",g=[p,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g,_=["#define varying in",n.glslVersion===Jt?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Jt?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const x=v+g+s,M=v+_+o,y=Ns(r,r.VERTEX_SHADER,x),S=Ns(r,r.FRAGMENT_SHADER,M);function E(e){if(t.debug.checkShaderErrors){const n=r.getProgramInfoLog(m).trim(),i=r.getShaderInfoLog(y).trim(),a=r.getShaderInfoLog(S).trim();let s=!0,o=!0;if(!1===r.getProgramParameter(m,r.LINK_STATUS))if(s=!1,"function"==typeof t.debug.onShaderError)t.debug.onShaderError(r,m,y,S);else{const t=Bs(r,y,"vertex"),i=Bs(r,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(m,r.VALIDATE_STATUS)+"\n\nMaterial Name: "+e.name+"\nMaterial Type: "+e.type+"\n\nProgram Info Log: "+n+"\n"+t+"\n"+i)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==i&&""!==a||(o=!1);o&&(e.diagnostics={runnable:s,programLog:n,vertexShader:{log:i,prefix:g},fragmentShader:{log:a,prefix:_}})}r.deleteShader(y),r.deleteShader(S),T=new Is(r,m),b=function(t,e){const n={},i=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r),a=i.name;let s=1;i.type===t.FLOAT_MAT2&&(s=2),i.type===t.FLOAT_MAT3&&(s=3),i.type===t.FLOAT_MAT4&&(s=4),n[a]={type:i.type,location:t.getAttribLocation(e,a),locationSize:s}}return n}(r,m)}let T,b;r.attachShader(m,y),r.attachShader(m,S),void 0!==n.index0AttributeName?r.bindAttribLocation(m,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(m,0,"position"),r.linkProgram(m),this.getUniforms=function(){return void 0===T&&E(this),T},this.getAttributes=function(){return void 0===b&&E(this),b};let w=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===w&&(w=r.getProgramParameter(m,37297)),w},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(m),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=Os++,this.cacheKey=e,this.usedTimes=1,this.program=m,this.vertexShader=y,this.fragmentShader=S,this}let to=0;class eo{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(t);return!1===a.has(i)&&(a.add(i),i.usedTimes++),!1===a.has(r)&&(a.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return void 0===n&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return void 0===n&&(n=new no(t),e.set(t,n)),n}}class no{constructor(t){this.id=to++,this.code=t,this.usedTimes=0}}function io(t,e,n,i,r,a,s){const o=new bn,l=new eo,c=new Set,h=[],u=r.logarithmicDepthBuffer,d=r.vertexTextures;let p=r.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function m(t){return c.add(t),0===t?"uv":`uv${t}`}return{getParameters:function(a,o,h,g,_){const v=g.fog,x=_.geometry,M=a.isMeshStandardMaterial?g.environment:null,y=(a.isMeshStandardMaterial?n:e).get(a.envMap||M),S=y&&y.mapping===L?y.image.height:null,E=f[a.type];null!==a.precision&&(p=r.getMaxPrecision(a.precision),p!==a.precision&&console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",p,"instead."));const T=x.morphAttributes.position||x.morphAttributes.normal||x.morphAttributes.color,b=void 0!==T?T.length:0;let w,A,R,C,P=0;if(void 0!==x.morphAttributes.position&&(P=1),void 0!==x.morphAttributes.normal&&(P=2),void 0!==x.morphAttributes.color&&(P=3),E){const t=Jr[E];w=t.vertexShader,A=t.fragmentShader}else w=a.vertexShader,A=a.fragmentShader,l.update(a),R=l.getVertexShaderID(a),C=l.getFragmentShaderID(a);const D=t.getRenderTarget(),U=t.state.buffers.depth.getReversed(),I=!0===_.isInstancedMesh,N=!0===_.isBatchedMesh,O=!!a.map,F=!!a.matcap,B=!!y,z=!!a.aoMap,H=!!a.lightMap,V=!!a.bumpMap,k=!!a.normalMap,G=!!a.displacementMap,W=!!a.emissiveMap,X=!!a.metalnessMap,j=!!a.roughnessMap,q=a.anisotropy>0,Y=a.clearcoat>0,K=a.dispersion>0,Z=a.iridescence>0,J=a.sheen>0,$=a.transmission>0,Q=q&&!!a.anisotropyMap,tt=Y&&!!a.clearcoatMap,et=Y&&!!a.clearcoatNormalMap,nt=Y&&!!a.clearcoatRoughnessMap,it=Z&&!!a.iridescenceMap,rt=Z&&!!a.iridescenceThicknessMap,at=J&&!!a.sheenColorMap,st=J&&!!a.sheenRoughnessMap,ot=!!a.specularMap,lt=!!a.specularColorMap,ct=!!a.specularIntensityMap,ht=$&&!!a.transmissionMap,ut=$&&!!a.thicknessMap,dt=!!a.gradientMap,pt=!!a.alphaMap,ft=a.alphaTest>0,mt=!!a.alphaHash,gt=!!a.extensions;let _t=0;a.toneMapped&&(null!==D&&!0!==D.isXRRenderTarget||(_t=t.toneMapping));const vt={shaderID:E,shaderType:a.type,shaderName:a.name,vertexShader:w,fragmentShader:A,defines:a.defines,customVertexShaderID:R,customFragmentShaderID:C,isRawShaderMaterial:!0===a.isRawShaderMaterial,glslVersion:a.glslVersion,precision:p,batching:N,batchingColor:N&&null!==_._colorsTexture,instancing:I,instancingColor:I&&null!==_.instanceColor,instancingMorph:I&&null!==_.morphTexture,supportsVertexTextures:d,outputColorSpace:null===D?t.outputColorSpace:!0===D.isXRRenderTarget?D.texture.colorSpace:zt,alphaToCoverage:!!a.alphaToCoverage,map:O,matcap:F,envMap:B,envMapMode:B&&y.mapping,envMapCubeUVHeight:S,aoMap:z,lightMap:H,bumpMap:V,normalMap:k,displacementMap:d&&G,emissiveMap:W,normalMapObjectSpace:k&&1===a.normalMapType,normalMapTangentSpace:k&&0===a.normalMapType,metalnessMap:X,roughnessMap:j,anisotropy:q,anisotropyMap:Q,clearcoat:Y,clearcoatMap:tt,clearcoatNormalMap:et,clearcoatRoughnessMap:nt,dispersion:K,iridescence:Z,iridescenceMap:it,iridescenceThicknessMap:rt,sheen:J,sheenColorMap:at,sheenRoughnessMap:st,specularMap:ot,specularColorMap:lt,specularIntensityMap:ct,transmission:$,transmissionMap:ht,thicknessMap:ut,gradientMap:dt,opaque:!1===a.transparent&&1===a.blending&&!1===a.alphaToCoverage,alphaMap:pt,alphaTest:ft,alphaHash:mt,combine:a.combine,mapUv:O&&m(a.map.channel),aoMapUv:z&&m(a.aoMap.channel),lightMapUv:H&&m(a.lightMap.channel),bumpMapUv:V&&m(a.bumpMap.channel),normalMapUv:k&&m(a.normalMap.channel),displacementMapUv:G&&m(a.displacementMap.channel),emissiveMapUv:W&&m(a.emissiveMap.channel),metalnessMapUv:X&&m(a.metalnessMap.channel),roughnessMapUv:j&&m(a.roughnessMap.channel),anisotropyMapUv:Q&&m(a.anisotropyMap.channel),clearcoatMapUv:tt&&m(a.clearcoatMap.channel),clearcoatNormalMapUv:et&&m(a.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:nt&&m(a.clearcoatRoughnessMap.channel),iridescenceMapUv:it&&m(a.iridescenceMap.channel),iridescenceThicknessMapUv:rt&&m(a.iridescenceThicknessMap.channel),sheenColorMapUv:at&&m(a.sheenColorMap.channel),sheenRoughnessMapUv:st&&m(a.sheenRoughnessMap.channel),specularMapUv:ot&&m(a.specularMap.channel),specularColorMapUv:lt&&m(a.specularColorMap.channel),specularIntensityMapUv:ct&&m(a.specularIntensityMap.channel),transmissionMapUv:ht&&m(a.transmissionMap.channel),thicknessMapUv:ut&&m(a.thicknessMap.channel),alphaMapUv:pt&&m(a.alphaMap.channel),vertexTangents:!!x.attributes.tangent&&(k||q),vertexColors:a.vertexColors,vertexAlphas:!0===a.vertexColors&&!!x.attributes.color&&4===x.attributes.color.itemSize,pointsUvs:!0===_.isPoints&&!!x.attributes.uv&&(O||pt),fog:!!v,useFog:!0===a.fog,fogExp2:!!v&&v.isFogExp2,flatShading:!0===a.flatShading,sizeAttenuation:!0===a.sizeAttenuation,logarithmicDepthBuffer:u,reverseDepthBuffer:U,skinning:!0===_.isSkinnedMesh,morphTargets:void 0!==x.morphAttributes.position,morphNormals:void 0!==x.morphAttributes.normal,morphColors:void 0!==x.morphAttributes.color,morphTargetsCount:b,morphTextureStride:P,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.length>0,shadowMapType:t.shadowMap.type,toneMapping:_t,decodeVideoTexture:O&&!0===a.map.isVideoTexture&&ye.getTransfer(a.map.colorSpace)===Vt,decodeVideoTextureEmissive:W&&!0===a.emissiveMap.isVideoTexture&&ye.getTransfer(a.emissiveMap.colorSpace)===Vt,premultipliedAlpha:a.premultipliedAlpha,doubleSided:2===a.side,flipSided:1===a.side,useDepthPacking:a.depthPacking>=0,depthPacking:a.depthPacking||0,index0AttributeName:a.index0AttributeName,extensionClipCullDistance:gt&&!0===a.extensions.clipCullDistance&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(gt&&!0===a.extensions.multiDraw||N)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:a.customProgramCacheKey()};return vt.vertexUv1s=c.has(1),vt.vertexUv2s=c.has(2),vt.vertexUv3s=c.has(3),c.clear(),vt},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(function(t,e){t.push(e.precision),t.push(e.outputColorSpace),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.mapUv),t.push(e.alphaMapUv),t.push(e.lightMapUv),t.push(e.aoMapUv),t.push(e.bumpMapUv),t.push(e.normalMapUv),t.push(e.displacementMapUv),t.push(e.emissiveMapUv),t.push(e.metalnessMapUv),t.push(e.roughnessMapUv),t.push(e.anisotropyMapUv),t.push(e.clearcoatMapUv),t.push(e.clearcoatNormalMapUv),t.push(e.clearcoatRoughnessMapUv),t.push(e.iridescenceMapUv),t.push(e.iridescenceThicknessMapUv),t.push(e.sheenColorMapUv),t.push(e.sheenRoughnessMapUv),t.push(e.specularMapUv),t.push(e.specularColorMapUv),t.push(e.specularIntensityMapUv),t.push(e.transmissionMapUv),t.push(e.thicknessMapUv),t.push(e.combine),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numSpotLightMaps),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.numSpotLightShadowsWithMaps),t.push(e.numLightProbes),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection),t.push(e.depthPacking)}(n,e),function(t,e){o.disableAll(),e.supportsVertexTextures&&o.enable(0),e.instancing&&o.enable(1),e.instancingColor&&o.enable(2),e.instancingMorph&&o.enable(3),e.matcap&&o.enable(4),e.envMap&&o.enable(5),e.normalMapObjectSpace&&o.enable(6),e.normalMapTangentSpace&&o.enable(7),e.clearcoat&&o.enable(8),e.iridescence&&o.enable(9),e.alphaTest&&o.enable(10),e.vertexColors&&o.enable(11),e.vertexAlphas&&o.enable(12),e.vertexUv1s&&o.enable(13),e.vertexUv2s&&o.enable(14),e.vertexUv3s&&o.enable(15),e.vertexTangents&&o.enable(16),e.anisotropy&&o.enable(17),e.alphaHash&&o.enable(18),e.batching&&o.enable(19),e.dispersion&&o.enable(20),e.batchingColor&&o.enable(21),t.push(o.mask),o.disableAll(),e.fog&&o.enable(0),e.useFog&&o.enable(1),e.flatShading&&o.enable(2),e.logarithmicDepthBuffer&&o.enable(3),e.reverseDepthBuffer&&o.enable(4),e.skinning&&o.enable(5),e.morphTargets&&o.enable(6),e.morphNormals&&o.enable(7),e.morphColors&&o.enable(8),e.premultipliedAlpha&&o.enable(9),e.shadowMapEnabled&&o.enable(10),e.doubleSided&&o.enable(11),e.flipSided&&o.enable(12),e.useDepthPacking&&o.enable(13),e.dithering&&o.enable(14),e.transmission&&o.enable(15),e.sheen&&o.enable(16),e.opaque&&o.enable(17),e.pointsUvs&&o.enable(18),e.decodeVideoTexture&&o.enable(19),e.decodeVideoTextureEmissive&&o.enable(20),e.alphaToCoverage&&o.enable(21),t.push(o.mask)}(n,e),n.push(t.outputColorSpace)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=f[t.type];let n;if(e){const t=Jr[e];n=Gi.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let i;for(let t=0,e=h.length;t<e;t++){const e=h[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new Qs(t,n,e,a),h.push(i)),i},releaseProgram:function(t){if(0==--t.usedTimes){const e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),t.destroy()}},releaseShaderCache:function(t){l.remove(t)},programs:h,dispose:function(){l.dispose()}}}function ro(){let t=new WeakMap;return{has:function(e){return t.has(e)},get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function ao(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function so(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function oo(){const t=[];let e=0;const n=[],i=[],r=[];function a(n,i,r,a,s,o){let l=t[e];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:s,group:o},t[e]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=a,l.renderOrder=n.renderOrder,l.z=s,l.group=o),e++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){e=0,n.length=0,i.length=0,r.length=0},push:function(t,e,s,o,l,c){const h=a(t,e,s,o,l,c);s.transmission>0?i.push(h):!0===s.transparent?r.push(h):n.push(h)},unshift:function(t,e,s,o,l,c){const h=a(t,e,s,o,l,c);s.transmission>0?i.unshift(h):!0===s.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||ao),i.length>1&&i.sort(e||so),r.length>1&&r.sort(e||so)}}}function lo(){let t=new WeakMap;return{get:function(e,n){const i=t.get(e);let r;return void 0===i?(r=new oo,t.set(e,[r])):n>=i.length?(r=new oo,i.push(r)):r=i[n],r},dispose:function(){t=new WeakMap}}}function co(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new Fe,color:new si};break;case"SpotLight":n={position:new Fe,direction:new Fe,color:new si,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Fe,color:new si,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Fe,skyColor:new si,groundColor:new si};break;case"RectAreaLight":n={color:new si,position:new Fe,halfWidth:new Fe,halfHeight:new Fe}}return t[e.id]=n,n}}}let ho=0;function uo(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function po(t){const e=new co,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new he,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let t=0;t<9;t++)i.probe.push(new Fe);const r=new Fe,a=new fn,s=new fn;return{setup:function(r){let a=0,s=0,o=0;for(let t=0;t<9;t++)i.probe[t].set(0,0,0);let l=0,c=0,h=0,u=0,d=0,p=0,f=0,m=0,g=0,_=0,v=0;r.sort(uo);for(let t=0,x=r.length;t<x;t++){const x=r[t],M=x.color,y=x.intensity,S=x.distance,E=x.shadow&&x.shadow.map?x.shadow.map.texture:null;if(x.isAmbientLight)a+=M.r*y,s+=M.g*y,o+=M.b*y;else if(x.isLightProbe){for(let t=0;t<9;t++)i.probe[t].addScaledVector(x.sh.coefficients[t],y);v++}else if(x.isDirectionalLight){const t=e.get(x);if(t.color.copy(x.color).multiplyScalar(x.intensity),x.castShadow){const t=x.shadow,e=n.get(x);e.shadowIntensity=t.intensity,e.shadowBias=t.bias,e.shadowNormalBias=t.normalBias,e.shadowRadius=t.radius,e.shadowMapSize=t.mapSize,i.directionalShadow[l]=e,i.directionalShadowMap[l]=E,i.directionalShadowMatrix[l]=x.shadow.matrix,p++}i.directional[l]=t,l++}else if(x.isSpotLight){const t=e.get(x);t.position.setFromMatrixPosition(x.matrixWorld),t.color.copy(M).multiplyScalar(y),t.distance=S,t.coneCos=Math.cos(x.angle),t.penumbraCos=Math.cos(x.angle*(1-x.penumbra)),t.decay=x.decay,i.spot[h]=t;const r=x.shadow;if(x.map&&(i.spotLightMap[g]=x.map,g++,r.updateMatrices(x),x.castShadow&&_++),i.spotLightMatrix[h]=r.matrix,x.castShadow){const t=n.get(x);t.shadowIntensity=r.intensity,t.shadowBias=r.bias,t.shadowNormalBias=r.normalBias,t.shadowRadius=r.radius,t.shadowMapSize=r.mapSize,i.spotShadow[h]=t,i.spotShadowMap[h]=E,m++}h++}else if(x.isRectAreaLight){const t=e.get(x);t.color.copy(M).multiplyScalar(y),t.halfWidth.set(.5*x.width,0,0),t.halfHeight.set(0,.5*x.height,0),i.rectArea[u]=t,u++}else if(x.isPointLight){const t=e.get(x);if(t.color.copy(x.color).multiplyScalar(x.intensity),t.distance=x.distance,t.decay=x.decay,x.castShadow){const t=x.shadow,e=n.get(x);e.shadowIntensity=t.intensity,e.shadowBias=t.bias,e.shadowNormalBias=t.normalBias,e.shadowRadius=t.radius,e.shadowMapSize=t.mapSize,e.shadowCameraNear=t.camera.near,e.shadowCameraFar=t.camera.far,i.pointShadow[c]=e,i.pointShadowMap[c]=E,i.pointShadowMatrix[c]=x.shadow.matrix,f++}i.point[c]=t,c++}else if(x.isHemisphereLight){const t=e.get(x);t.skyColor.copy(x.color).multiplyScalar(y),t.groundColor.copy(x.groundColor).multiplyScalar(y),i.hemi[d]=t,d++}}u>0&&(!0===t.has("OES_texture_float_linear")?(i.rectAreaLTC1=Zr.LTC_FLOAT_1,i.rectAreaLTC2=Zr.LTC_FLOAT_2):(i.rectAreaLTC1=Zr.LTC_HALF_1,i.rectAreaLTC2=Zr.LTC_HALF_2)),i.ambient[0]=a,i.ambient[1]=s,i.ambient[2]=o;const x=i.hash;x.directionalLength===l&&x.pointLength===c&&x.spotLength===h&&x.rectAreaLength===u&&x.hemiLength===d&&x.numDirectionalShadows===p&&x.numPointShadows===f&&x.numSpotShadows===m&&x.numSpotMaps===g&&x.numLightProbes===v||(i.directional.length=l,i.spot.length=h,i.rectArea.length=u,i.point.length=c,i.hemi.length=d,i.directionalShadow.length=p,i.directionalShadowMap.length=p,i.pointShadow.length=f,i.pointShadowMap.length=f,i.spotShadow.length=m,i.spotShadowMap.length=m,i.directionalShadowMatrix.length=p,i.pointShadowMatrix.length=f,i.spotLightMatrix.length=m+g-_,i.spotLightMap.length=g,i.numSpotLightShadowsWithMaps=_,i.numLightProbes=v,x.directionalLength=l,x.pointLength=c,x.spotLength=h,x.rectAreaLength=u,x.hemiLength=d,x.numDirectionalShadows=p,x.numPointShadows=f,x.numSpotShadows=m,x.numSpotMaps=g,x.numLightProbes=v,i.version=ho++)},setupView:function(t,e){let n=0,o=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=i.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),r.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(r),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=i.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),r.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(r),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=i.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),s.identity(),a.copy(d.matrixWorld),a.premultiply(u),s.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(s),t.halfHeight.applyMatrix4(s),c++}else if(d.isPointLight){const t=i.point[o];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o++}else if(d.isHemisphereLight){const t=i.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),h++}}},state:i}}function fo(t){const e=new po(t),n=[],i=[],r={lightsArray:n,shadowsArray:i,camera:null,lights:e,transmissionRenderTarget:{}};return{init:function(t){r.camera=t,n.length=0,i.length=0},state:r,setupLights:function(){e.setup(n)},setupLightsView:function(t){e.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){i.push(t)}}}function mo(t){let e=new WeakMap;return{get:function(n,i=0){const r=e.get(n);let a;return void 0===r?(a=new fo(t),e.set(n,[a])):i>=r.length?(a=new fo(t),r.push(a)):a=r[i],a},dispose:function(){e=new WeakMap}}}function go(t,r,a){let s=new hr;const o=new he,l=new he,c=new De,h=new mr({depthPacking:3201}),u=new gr,d={},p=a.maxTextureSize,f={[e]:1,[n]:0,[i]:2},m=new Wi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new he},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),g=m.clone();g.defines.HORIZONTAL_PASS=1;const _=new bi;_.setAttribute("position",new fi(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new Fi(_,m),x=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1;let M=this.type;function y(e,n){const i=r.update(v);m.defines.VSM_SAMPLES!==e.blurSamples&&(m.defines.VSM_SAMPLES=e.blurSamples,g.defines.VSM_SAMPLES=e.blurSamples,m.needsUpdate=!0,g.needsUpdate=!0),null===e.mapPass&&(e.mapPass=new Ue(o.x,o.y)),m.uniforms.shadow_pass.value=e.map.texture,m.uniforms.resolution.value=e.mapSize,m.uniforms.radius.value=e.radius,t.setRenderTarget(e.mapPass),t.clear(),t.renderBufferDirect(n,null,i,m,v,null),g.uniforms.shadow_pass.value=e.mapPass.texture,g.uniforms.resolution.value=e.mapSize,g.uniforms.radius.value=e.radius,t.setRenderTarget(e.map),t.clear(),t.renderBufferDirect(n,null,i,g,v,null)}function S(e,n,i,r){let a=null;const s=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(void 0!==s)a=s;else if(a=!0===i.isPointLight?u:h,t.localClippingEnabled&&!0===n.clipShadows&&Array.isArray(n.clippingPlanes)&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0){const t=a.uuid,e=n.uuid;let i=d[t];void 0===i&&(i={},d[t]=i);let r=i[e];void 0===r&&(r=a.clone(),i[e]=r,n.addEventListener("dispose",T)),a=r}return a.visible=n.visible,a.wireframe=n.wireframe,a.side=3===r?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:f[n.side],a.alphaMap=n.alphaMap,a.alphaTest=n.alphaTest,a.map=n.map,a.clipShadows=n.clipShadows,a.clippingPlanes=n.clippingPlanes,a.clipIntersection=n.clipIntersection,a.displacementMap=n.displacementMap,a.displacementScale=n.displacementScale,a.displacementBias=n.displacementBias,a.wireframeLinewidth=n.wireframeLinewidth,a.linewidth=n.linewidth,!0===i.isPointLight&&!0===a.isMeshDistanceMaterial&&(t.properties.get(a).light=i),a}function E(e,n,i,a,o){if(!1===e.visible)return;if(e.layers.test(n.layers)&&(e.isMesh||e.isLine||e.isPoints)&&(e.castShadow||e.receiveShadow&&3===o)&&(!e.frustumCulled||s.intersectsObject(e))){e.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,e.matrixWorld);const s=r.update(e),l=e.material;if(Array.isArray(l)){const r=s.groups;for(let c=0,h=r.length;c<h;c++){const h=r[c],u=l[h.materialIndex];if(u&&u.visible){const r=S(e,u,a,o);e.onBeforeShadow(t,e,n,i,s,r,h),t.renderBufferDirect(i,null,s,r,e,h),e.onAfterShadow(t,e,n,i,s,r,h)}}}else if(l.visible){const r=S(e,l,a,o);e.onBeforeShadow(t,e,n,i,s,r,null),t.renderBufferDirect(i,null,s,r,e,null),e.onAfterShadow(t,e,n,i,s,r,null)}}const l=e.children;for(let t=0,e=l.length;t<e;t++)E(l[t],n,i,a,o)}function T(t){t.target.removeEventListener("dispose",T);for(const e in d){const n=d[e],i=t.target.uuid;i in n&&(n[i].dispose(),delete n[i])}}this.render=function(e,n,i){if(!1===x.enabled)return;if(!1===x.autoUpdate&&!1===x.needsUpdate)return;if(0===e.length)return;const r=t.getRenderTarget(),a=t.getActiveCubeFace(),h=t.getActiveMipmapLevel(),u=t.state;u.setBlending(0),u.buffers.color.setClear(1,1,1,1),u.buffers.depth.setTest(!0),u.setScissorTest(!1);const d=3!==M&&3===this.type,f=3===M&&3!==this.type;for(let r=0,a=e.length;r<a;r++){const a=e[r],h=a.shadow;if(void 0===h){console.warn("THREE.WebGLShadowMap:",a,"has no shadow.");continue}if(!1===h.autoUpdate&&!1===h.needsUpdate)continue;o.copy(h.mapSize);const m=h.getFrameExtents();if(o.multiply(m),l.copy(h.mapSize),(o.x>p||o.y>p)&&(o.x>p&&(l.x=Math.floor(p/m.x),o.x=l.x*m.x,h.mapSize.x=l.x),o.y>p&&(l.y=Math.floor(p/m.y),o.y=l.y*m.y,h.mapSize.y=l.y)),null===h.map||!0===d||!0===f){const t=3!==this.type?{minFilter:O,magFilter:O}:{};null!==h.map&&h.map.dispose(),h.map=new Ue(o.x,o.y,t),h.map.texture.name=a.name+".shadowMap",h.camera.updateProjectionMatrix()}t.setRenderTarget(h.map),t.clear();const g=h.getViewportCount();for(let t=0;t<g;t++){const e=h.getViewport(t);c.set(l.x*e.x,l.y*e.y,l.x*e.z,l.y*e.w),u.viewport(c),h.updateMatrices(a,t),s=h.getFrustum(),E(n,i,h.camera,a,this.type)}!0!==h.isPointLightShadow&&3===this.type&&y(h,i),h.needsUpdate=!1}M=this.type,x.needsUpdate=!1,t.setRenderTarget(r,a,h)}}const _o={[S]:1,[T]:6,[w]:7,[b]:5,[E]:0,[R]:2,[C]:4,[A]:3};function vo(t,e){const n=new function(){let e=!1;const n=new De;let i=null;const r=new De(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,a,s,o){!0===o&&(e*=s,i*=s,a*=s),n.set(e,i,a,s),!1===r.equals(n)&&(t.clearColor(e,i,a,s),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},i=new function(){let n=!1,i=!1,r=null,a=null,s=null;return{setReversed:function(t){if(i!==t){const n=e.get("EXT_clip_control");t?n.clipControlEXT(n.LOWER_LEFT_EXT,n.ZERO_TO_ONE_EXT):n.clipControlEXT(n.LOWER_LEFT_EXT,n.NEGATIVE_ONE_TO_ONE_EXT),i=t;const r=s;s=null,this.setClear(r)}},getReversed:function(){return i},setTest:function(e){e?rt(t.DEPTH_TEST):at(t.DEPTH_TEST)},setMask:function(e){r===e||n||(t.depthMask(e),r=e)},setFunc:function(e){if(i&&(e=_o[e]),a!==e){switch(e){case 0:t.depthFunc(t.NEVER);break;case 1:t.depthFunc(t.ALWAYS);break;case 2:t.depthFunc(t.LESS);break;case 3:default:t.depthFunc(t.LEQUAL);break;case 4:t.depthFunc(t.EQUAL);break;case 5:t.depthFunc(t.GEQUAL);break;case 6:t.depthFunc(t.GREATER);break;case 7:t.depthFunc(t.NOTEQUAL)}a=e}},setLocked:function(t){n=t},setClear:function(e){s!==e&&(i&&(e=1-e),t.clearDepth(e),s=e)},reset:function(){n=!1,r=null,a=null,s=null,i=!1}}},S=new function(){let e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null;return{setTest:function(n){e||(n?rt(t.STENCIL_TEST):at(t.STENCIL_TEST))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,s){i===e&&r===n&&a===s||(t.stencilFunc(e,n,s),i=e,r=n,a=s)},setOp:function(e,n,i){s===e&&o===n&&l===i||(t.stencilOp(e,n,i),s=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,a=null,s=null,o=null,l=null,c=null}}},E=new WeakMap,T=new WeakMap;let b={},w={},A=new WeakMap,R=[],C=null,P=!1,D=null,L=null,U=null,I=null,N=null,O=null,F=null,B=new si(0,0,0),z=0,H=!1,V=null,k=null,G=null,W=null,X=null;const j=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let q=!1,Y=0;const K=t.getParameter(t.VERSION);-1!==K.indexOf("WebGL")?(Y=parseFloat(/^WebGL (\d)/.exec(K)[1]),q=Y>=1):-1!==K.indexOf("OpenGL ES")&&(Y=parseFloat(/^OpenGL ES (\d)/.exec(K)[1]),q=Y>=2);let Z=null,J={};const $=t.getParameter(t.SCISSOR_BOX),Q=t.getParameter(t.VIEWPORT),tt=(new De).fromArray($),et=(new De).fromArray(Q);function nt(e,n,i,r){const a=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(let s=0;s<i;s++)e===t.TEXTURE_3D||e===t.TEXTURE_2D_ARRAY?t.texImage3D(n,0,t.RGBA,1,1,r,0,t.RGBA,t.UNSIGNED_BYTE,a):t.texImage2D(n+s,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,a);return s}const it={};function rt(e){!0!==b[e]&&(t.enable(e),b[e]=!0)}function at(e){!1!==b[e]&&(t.disable(e),b[e]=!1)}it[t.TEXTURE_2D]=nt(t.TEXTURE_2D,t.TEXTURE_2D,1),it[t.TEXTURE_CUBE_MAP]=nt(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),it[t.TEXTURE_2D_ARRAY]=nt(t.TEXTURE_2D_ARRAY,t.TEXTURE_2D_ARRAY,1,1),it[t.TEXTURE_3D]=nt(t.TEXTURE_3D,t.TEXTURE_3D,1,1),n.setClear(0,0,0,1),i.setClear(1),S.setClear(0),rt(t.DEPTH_TEST),i.setFunc(3),ct(!1),ht(1),rt(t.CULL_FACE),lt(0);const st={[r]:t.FUNC_ADD,[a]:t.FUNC_SUBTRACT,[s]:t.FUNC_REVERSE_SUBTRACT};st[103]=t.MIN,st[104]=t.MAX;const ot={[o]:t.ZERO,[l]:t.ONE,[c]:t.SRC_COLOR,[u]:t.SRC_ALPHA,[_]:t.SRC_ALPHA_SATURATE,[m]:t.DST_COLOR,[p]:t.DST_ALPHA,[h]:t.ONE_MINUS_SRC_COLOR,[d]:t.ONE_MINUS_SRC_ALPHA,[g]:t.ONE_MINUS_DST_COLOR,[f]:t.ONE_MINUS_DST_ALPHA,[v]:t.CONSTANT_COLOR,[x]:t.ONE_MINUS_CONSTANT_COLOR,[M]:t.CONSTANT_ALPHA,[y]:t.ONE_MINUS_CONSTANT_ALPHA};function lt(e,n,i,a,s,o,l,c,h,u){if(0!==e){if(!1===P&&(rt(t.BLEND),P=!0),5===e)s=s||n,o=o||i,l=l||a,n===L&&s===N||(t.blendEquationSeparate(st[n],st[s]),L=n,N=s),i===U&&a===I&&o===O&&l===F||(t.blendFuncSeparate(ot[i],ot[a],ot[o],ot[l]),U=i,I=a,O=o,F=l),!1!==c.equals(B)&&h===z||(t.blendColor(c.r,c.g,c.b,h),B.copy(c),z=h),D=e,H=!1;else if(e!==D||u!==H){if(L===r&&N===r||(t.blendEquation(t.FUNC_ADD),L=r,N=r),u)switch(e){case 1:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case 2:t.blendFunc(t.ONE,t.ONE);break;case 3:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case 4:t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case 1:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case 2:t.blendFunc(t.SRC_ALPHA,t.ONE);break;case 3:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case 4:t.blendFunc(t.ZERO,t.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}U=null,I=null,O=null,F=null,B.set(0,0,0),z=0,D=e,H=u}}else!0===P&&(at(t.BLEND),P=!1)}function ct(e){V!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),V=e)}function ht(e){0!==e?(rt(t.CULL_FACE),e!==k&&(1===e?t.cullFace(t.BACK):2===e?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):at(t.CULL_FACE),k=e}function ut(e,n,i){e?(rt(t.POLYGON_OFFSET_FILL),W===n&&X===i||(t.polygonOffset(n,i),W=n,X=i)):at(t.POLYGON_OFFSET_FILL)}return{buffers:{color:n,depth:i,stencil:S},enable:rt,disable:at,bindFramebuffer:function(e,n){return w[e]!==n&&(t.bindFramebuffer(e,n),w[e]=n,e===t.DRAW_FRAMEBUFFER&&(w[t.FRAMEBUFFER]=n),e===t.FRAMEBUFFER&&(w[t.DRAW_FRAMEBUFFER]=n),!0)},drawBuffers:function(e,n){let i=R,r=!1;if(e){i=A.get(n),void 0===i&&(i=[],A.set(n,i));const a=e.textures;if(i.length!==a.length||i[0]!==t.COLOR_ATTACHMENT0){for(let e=0,n=a.length;e<n;e++)i[e]=t.COLOR_ATTACHMENT0+e;i.length=a.length,r=!0}}else i[0]!==t.BACK&&(i[0]=t.BACK,r=!0);r&&t.drawBuffers(i)},useProgram:function(e){return C!==e&&(t.useProgram(e),C=e,!0)},setBlending:lt,setMaterial:function(e,r){2===e.side?at(t.CULL_FACE):rt(t.CULL_FACE);let a=1===e.side;r&&(a=!a),ct(a),1===e.blending&&!1===e.transparent?lt(0):lt(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.blendColor,e.blendAlpha,e.premultipliedAlpha),i.setFunc(e.depthFunc),i.setTest(e.depthTest),i.setMask(e.depthWrite),n.setMask(e.colorWrite);const s=e.stencilWrite;S.setTest(s),s&&(S.setMask(e.stencilWriteMask),S.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),S.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),ut(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage?rt(t.SAMPLE_ALPHA_TO_COVERAGE):at(t.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:ct,setCullFace:ht,setLineWidth:function(e){e!==G&&(q&&t.lineWidth(e),G=e)},setPolygonOffset:ut,setScissorTest:function(e){e?rt(t.SCISSOR_TEST):at(t.SCISSOR_TEST)},activeTexture:function(e){void 0===e&&(e=t.TEXTURE0+j-1),Z!==e&&(t.activeTexture(e),Z=e)},bindTexture:function(e,n,i){void 0===i&&(i=null===Z?t.TEXTURE0+j-1:Z);let r=J[i];void 0===r&&(r={type:void 0,texture:void 0},J[i]=r),r.type===e&&r.texture===n||(Z!==i&&(t.activeTexture(i),Z=i),t.bindTexture(e,n||it[e]),r.type=e,r.texture=n)},unbindTexture:function(){const e=J[Z];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{t.compressedTexImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(e,n){let i=T.get(n);void 0===i&&(i=new WeakMap,T.set(n,i));let r=i.get(e);void 0===r&&(r=t.getUniformBlockIndex(n,e.name),i.set(e,r))},uniformBlockBinding:function(e,n){const i=T.get(n).get(e);E.get(n)!==i&&(t.uniformBlockBinding(n,i,e.__bindingPointIndex),E.set(n,i))},texStorage2D:function(){try{t.texStorage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===tt.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),tt.copy(e))},viewport:function(e){!1===et.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),et.copy(e))},reset:function(){t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.blendFuncSeparate(t.ONE,t.ZERO,t.ONE,t.ZERO),t.blendColor(0,0,0,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(t.LESS),i.setReversed(!1),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.clearStencil(0),t.cullFace(t.BACK),t.frontFace(t.CCW),t.polygonOffset(0,0),t.activeTexture(t.TEXTURE0),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),t.bindFramebuffer(t.READ_FRAMEBUFFER,null),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),b={},Z=null,J={},w={},A=new WeakMap,R=[],C=null,P=!1,D=null,L=null,U=null,I=null,N=null,O=null,F=null,B=new si(0,0,0),z=0,H=!1,V=null,k=null,G=null,W=null,X=null,tt.set(0,0,t.canvas.width,t.canvas.height),et.set(0,0,t.canvas.width,t.canvas.height),n.reset(),i.reset(),S.reset()}}}function xo(t,e,n,i,r,a,s){const o=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,l="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),c=new he,h=new WeakMap;let u;const d=new WeakMap;let p=!1;try{p="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function f(t,e){return p?new OffscreenCanvas(t,e):fe("canvas")}function m(t,e,n){let i=1;const r=rt(t);if((r.width>n||r.height>n)&&(i=n/Math.max(r.width,r.height)),i<1){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&t instanceof VideoFrame){const n=Math.floor(i*r.width),a=Math.floor(i*r.height);void 0===u&&(u=f(n,a));const s=e?f(n,a):u;return s.width=n,s.height=a,s.getContext("2d").drawImage(t,0,0,n,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+n+"x"+a+")."),s}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+")."),t}return t}function g(t){return t.generateMipmaps}function _(e){t.generateMipmap(e)}function v(e){return e.isWebGLCubeRenderTarget?t.TEXTURE_CUBE_MAP:e.isWebGL3DRenderTarget?t.TEXTURE_3D:e.isWebGLArrayRenderTarget||e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:t.TEXTURE_2D}function x(n,i,r,a,s=!1){if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let o=i;if(i===t.RED&&(r===t.FLOAT&&(o=t.R32F),r===t.HALF_FLOAT&&(o=t.R16F),r===t.UNSIGNED_BYTE&&(o=t.R8)),i===t.RED_INTEGER&&(r===t.UNSIGNED_BYTE&&(o=t.R8UI),r===t.UNSIGNED_SHORT&&(o=t.R16UI),r===t.UNSIGNED_INT&&(o=t.R32UI),r===t.BYTE&&(o=t.R8I),r===t.SHORT&&(o=t.R16I),r===t.INT&&(o=t.R32I)),i===t.RG&&(r===t.FLOAT&&(o=t.RG32F),r===t.HALF_FLOAT&&(o=t.RG16F),r===t.UNSIGNED_BYTE&&(o=t.RG8)),i===t.RG_INTEGER&&(r===t.UNSIGNED_BYTE&&(o=t.RG8UI),r===t.UNSIGNED_SHORT&&(o=t.RG16UI),r===t.UNSIGNED_INT&&(o=t.RG32UI),r===t.BYTE&&(o=t.RG8I),r===t.SHORT&&(o=t.RG16I),r===t.INT&&(o=t.RG32I)),i===t.RGB_INTEGER&&(r===t.UNSIGNED_BYTE&&(o=t.RGB8UI),r===t.UNSIGNED_SHORT&&(o=t.RGB16UI),r===t.UNSIGNED_INT&&(o=t.RGB32UI),r===t.BYTE&&(o=t.RGB8I),r===t.SHORT&&(o=t.RGB16I),r===t.INT&&(o=t.RGB32I)),i===t.RGBA_INTEGER&&(r===t.UNSIGNED_BYTE&&(o=t.RGBA8UI),r===t.UNSIGNED_SHORT&&(o=t.RGBA16UI),r===t.UNSIGNED_INT&&(o=t.RGBA32UI),r===t.BYTE&&(o=t.RGBA8I),r===t.SHORT&&(o=t.RGBA16I),r===t.INT&&(o=t.RGBA32I)),i===t.RGB&&r===t.UNSIGNED_INT_5_9_9_9_REV&&(o=t.RGB9_E5),i===t.RGBA){const e=s?Ht:ye.getTransfer(a);r===t.FLOAT&&(o=t.RGBA32F),r===t.HALF_FLOAT&&(o=t.RGBA16F),r===t.UNSIGNED_BYTE&&(o=e===Vt?t.SRGB8_ALPHA8:t.RGBA8),r===t.UNSIGNED_SHORT_4_4_4_4&&(o=t.RGBA4),r===t.UNSIGNED_SHORT_5_5_5_1&&(o=t.RGB5_A1)}return o!==t.R16F&&o!==t.R32F&&o!==t.RG16F&&o!==t.RG32F&&o!==t.RGBA16F&&o!==t.RGBA32F||e.get("EXT_color_buffer_float"),o}function M(e,n){let i;return e?null===n||n===X||n===Z?i=t.DEPTH24_STENCIL8:n===j?i=t.DEPTH32F_STENCIL8:n===G&&(i=t.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):null===n||n===X||n===Z?i=t.DEPTH_COMPONENT24:n===j?i=t.DEPTH_COMPONENT32F:n===G&&(i=t.DEPTH_COMPONENT16),i}function y(t,e){return!0===g(t)||t.isFramebufferTexture&&t.minFilter!==O&&t.minFilter!==z?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function S(t){const e=t.target;e.removeEventListener("dispose",S),function(t){const e=i.get(t);if(void 0===e.__webglInit)return;const n=t.source,r=d.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--,0===i.usedTimes&&T(t),0===Object.keys(r).length&&d.delete(n)}i.remove(t)}(e),e.isVideoTexture&&h.delete(e)}function E(e){const n=e.target;n.removeEventListener("dispose",E),function(e){const n=i.get(e);if(e.depthTexture&&(e.depthTexture.dispose(),i.remove(e.depthTexture)),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++){if(Array.isArray(n.__webglFramebuffer[e]))for(let i=0;i<n.__webglFramebuffer[e].length;i++)t.deleteFramebuffer(n.__webglFramebuffer[e][i]);else t.deleteFramebuffer(n.__webglFramebuffer[e]);n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[e])}else{if(Array.isArray(n.__webglFramebuffer))for(let e=0;e<n.__webglFramebuffer.length;e++)t.deleteFramebuffer(n.__webglFramebuffer[e]);else t.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&t.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let e=0;e<n.__webglColorRenderbuffer.length;e++)n.__webglColorRenderbuffer[e]&&t.deleteRenderbuffer(n.__webglColorRenderbuffer[e]);n.__webglDepthRenderbuffer&&t.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const r=e.textures;for(let e=0,n=r.length;e<n;e++){const n=i.get(r[e]);n.__webglTexture&&(t.deleteTexture(n.__webglTexture),s.memory.textures--),i.remove(r[e])}i.remove(e)}(n)}function T(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;delete d.get(r)[n.__cacheKey],s.memory.textures--}let b=0;function w(e,r){const a=i.get(e);if(e.isVideoTexture&&function(t){const e=s.render.frame;h.get(t)!==e&&(h.set(t,e),t.update())}(e),!1===e.isRenderTargetTexture&&e.version>0&&a.__version!==e.version){const t=e.image;if(null===t)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==t.complete)return void L(a,e,r);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(t.TEXTURE_2D,a.__webglTexture,t.TEXTURE0+r)}const A={[U]:t.REPEAT,[I]:t.CLAMP_TO_EDGE,[N]:t.MIRRORED_REPEAT},R={[O]:t.NEAREST,[F]:t.NEAREST_MIPMAP_NEAREST,[B]:t.NEAREST_MIPMAP_LINEAR,[z]:t.LINEAR,[H]:t.LINEAR_MIPMAP_NEAREST,[V]:t.LINEAR_MIPMAP_LINEAR},C={[Gt]:t.NEVER,[Zt]:t.ALWAYS,[Wt]:t.LESS,[jt]:t.LEQUAL,[Xt]:t.EQUAL,[Kt]:t.GEQUAL,[qt]:t.GREATER,[Yt]:t.NOTEQUAL};function P(n,a){if(a.type!==j||!1!==e.has("OES_texture_float_linear")||a.magFilter!==z&&a.magFilter!==H&&a.magFilter!==B&&a.magFilter!==V&&a.minFilter!==z&&a.minFilter!==H&&a.minFilter!==B&&a.minFilter!==V||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),t.texParameteri(n,t.TEXTURE_WRAP_S,A[a.wrapS]),t.texParameteri(n,t.TEXTURE_WRAP_T,A[a.wrapT]),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,A[a.wrapR]),t.texParameteri(n,t.TEXTURE_MAG_FILTER,R[a.magFilter]),t.texParameteri(n,t.TEXTURE_MIN_FILTER,R[a.minFilter]),a.compareFunction&&(t.texParameteri(n,t.TEXTURE_COMPARE_MODE,t.COMPARE_REF_TO_TEXTURE),t.texParameteri(n,t.TEXTURE_COMPARE_FUNC,C[a.compareFunction])),!0===e.has("EXT_texture_filter_anisotropic")){if(a.magFilter===O)return;if(a.minFilter!==B&&a.minFilter!==V)return;if(a.type===j&&!1===e.has("OES_texture_float_linear"))return;if(a.anisotropy>1||i.get(a).__currentAnisotropy){const s=e.get("EXT_texture_filter_anisotropic");t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy())),i.get(a).__currentAnisotropy=a.anisotropy}}}function D(e,n){let i=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",S));const r=n.source;let a=d.get(r);void 0===a&&(a={},d.set(r,a));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.wrapR||0),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.colorSpace),e.join()}(n);if(o!==e.__cacheKey){void 0===a[o]&&(a[o]={texture:t.createTexture(),usedTimes:0},s.memory.textures++,i=!0),a[o].usedTimes++;const r=a[e.__cacheKey];void 0!==r&&(a[e.__cacheKey].usedTimes--,0===r.usedTimes&&T(n)),e.__cacheKey=o,e.__webglTexture=a[o].texture}return i}function L(e,s,o){let l=t.TEXTURE_2D;(s.isDataArrayTexture||s.isCompressedArrayTexture)&&(l=t.TEXTURE_2D_ARRAY),s.isData3DTexture&&(l=t.TEXTURE_3D);const c=D(e,s),h=s.source;n.bindTexture(l,e.__webglTexture,t.TEXTURE0+o);const u=i.get(h);if(h.version!==u.__version||!0===c){n.activeTexture(t.TEXTURE0+o);const e=ye.getPrimaries(ye.workingColorSpace),i=s.colorSpace===Ft?null:ye.getPrimaries(s.colorSpace),d=s.colorSpace===Ft||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,s.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,s.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);let p=m(s.image,!1,r.maxTextureSize);p=it(s,p);const f=a.convert(s.format,s.colorSpace),v=a.convert(s.type);let S,E=x(s.internalFormat,f,v,s.colorSpace,s.isVideoTexture);P(l,s);const T=s.mipmaps,b=!0!==s.isVideoTexture,w=void 0===u.__version||!0===c,A=h.dataReady,R=y(s,p);if(s.isDepthTexture)E=M(s.format===Q,s.type),w&&(b?n.texStorage2D(t.TEXTURE_2D,1,E,p.width,p.height):n.texImage2D(t.TEXTURE_2D,0,E,p.width,p.height,0,f,v,null));else if(s.isDataTexture)if(T.length>0){b&&w&&n.texStorage2D(t.TEXTURE_2D,R,E,T[0].width,T[0].height);for(let e=0,i=T.length;e<i;e++)S=T[e],b?A&&n.texSubImage2D(t.TEXTURE_2D,e,0,0,S.width,S.height,f,v,S.data):n.texImage2D(t.TEXTURE_2D,e,E,S.width,S.height,0,f,v,S.data);s.generateMipmaps=!1}else b?(w&&n.texStorage2D(t.TEXTURE_2D,R,E,p.width,p.height),A&&n.texSubImage2D(t.TEXTURE_2D,0,0,0,p.width,p.height,f,v,p.data)):n.texImage2D(t.TEXTURE_2D,0,E,p.width,p.height,0,f,v,p.data);else if(s.isCompressedTexture)if(s.isCompressedArrayTexture){b&&w&&n.texStorage3D(t.TEXTURE_2D_ARRAY,R,E,T[0].width,T[0].height,p.depth);for(let e=0,i=T.length;e<i;e++)if(S=T[e],s.format!==J)if(null!==f)if(b){if(A)if(s.layerUpdates.size>0){const i=jr(S.width,S.height,s.format,s.type);for(const r of s.layerUpdates){const a=S.data.subarray(r*i/S.data.BYTES_PER_ELEMENT,(r+1)*i/S.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,r,S.width,S.height,1,f,a)}s.clearLayerUpdates()}else n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,S.width,S.height,p.depth,f,S.data)}else n.compressedTexImage3D(t.TEXTURE_2D_ARRAY,e,E,S.width,S.height,p.depth,0,S.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else b?A&&n.texSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,S.width,S.height,p.depth,f,v,S.data):n.texImage3D(t.TEXTURE_2D_ARRAY,e,E,S.width,S.height,p.depth,0,f,v,S.data)}else{b&&w&&n.texStorage2D(t.TEXTURE_2D,R,E,T[0].width,T[0].height);for(let e=0,i=T.length;e<i;e++)S=T[e],s.format!==J?null!==f?b?A&&n.compressedTexSubImage2D(t.TEXTURE_2D,e,0,0,S.width,S.height,f,S.data):n.compressedTexImage2D(t.TEXTURE_2D,e,E,S.width,S.height,0,S.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):b?A&&n.texSubImage2D(t.TEXTURE_2D,e,0,0,S.width,S.height,f,v,S.data):n.texImage2D(t.TEXTURE_2D,e,E,S.width,S.height,0,f,v,S.data)}else if(s.isDataArrayTexture)if(b){if(w&&n.texStorage3D(t.TEXTURE_2D_ARRAY,R,E,p.width,p.height,p.depth),A)if(s.layerUpdates.size>0){const e=jr(p.width,p.height,s.format,s.type);for(const i of s.layerUpdates){const r=p.data.subarray(i*e/p.data.BYTES_PER_ELEMENT,(i+1)*e/p.data.BYTES_PER_ELEMENT);n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,i,p.width,p.height,1,f,v,r)}s.clearLayerUpdates()}else n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,0,p.width,p.height,p.depth,f,v,p.data)}else n.texImage3D(t.TEXTURE_2D_ARRAY,0,E,p.width,p.height,p.depth,0,f,v,p.data);else if(s.isData3DTexture)b?(w&&n.texStorage3D(t.TEXTURE_3D,R,E,p.width,p.height,p.depth),A&&n.texSubImage3D(t.TEXTURE_3D,0,0,0,0,p.width,p.height,p.depth,f,v,p.data)):n.texImage3D(t.TEXTURE_3D,0,E,p.width,p.height,p.depth,0,f,v,p.data);else if(s.isFramebufferTexture){if(w)if(b)n.texStorage2D(t.TEXTURE_2D,R,E,p.width,p.height);else{let e=p.width,i=p.height;for(let r=0;r<R;r++)n.texImage2D(t.TEXTURE_2D,r,E,e,i,0,f,v,null),e>>=1,i>>=1}}else if(T.length>0){if(b&&w){const e=rt(T[0]);n.texStorage2D(t.TEXTURE_2D,R,E,e.width,e.height)}for(let e=0,i=T.length;e<i;e++)S=T[e],b?A&&n.texSubImage2D(t.TEXTURE_2D,e,0,0,f,v,S):n.texImage2D(t.TEXTURE_2D,e,E,f,v,S);s.generateMipmaps=!1}else if(b){if(w){const e=rt(p);n.texStorage2D(t.TEXTURE_2D,R,E,e.width,e.height)}A&&n.texSubImage2D(t.TEXTURE_2D,0,0,0,f,v,p)}else n.texImage2D(t.TEXTURE_2D,0,E,f,v,p);g(s)&&_(l),u.__version=h.version,s.onUpdate&&s.onUpdate(s)}e.__version=s.version}function W(e,r,s,l,c,h){const u=a.convert(s.format,s.colorSpace),d=a.convert(s.type),p=x(s.internalFormat,u,d,s.colorSpace),f=i.get(r),m=i.get(s);if(m.__renderTarget=r,!f.__hasExternalTextures){const e=Math.max(1,r.width>>h),i=Math.max(1,r.height>>h);c===t.TEXTURE_3D||c===t.TEXTURE_2D_ARRAY?n.texImage3D(c,h,p,e,i,r.depth,0,u,d,null):n.texImage2D(c,h,p,e,i,0,u,d,null)}n.bindFramebuffer(t.FRAMEBUFFER,e),nt(r)?o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,l,c,m.__webglTexture,0,et(r)):(c===t.TEXTURE_2D||c>=t.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=t.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&t.framebufferTexture2D(t.FRAMEBUFFER,l,c,m.__webglTexture,h),n.bindFramebuffer(t.FRAMEBUFFER,null)}function q(e,n,i){if(t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer){const r=n.depthTexture,a=r&&r.isDepthTexture?r.type:null,s=M(n.stencilBuffer,a),l=n.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,c=et(n);nt(n)?o.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,c,s,n.width,n.height):i?t.renderbufferStorageMultisample(t.RENDERBUFFER,c,s,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,s,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,l,t.RENDERBUFFER,e)}else{const e=n.textures;for(let r=0;r<e.length;r++){const s=e[r],l=a.convert(s.format,s.colorSpace),c=a.convert(s.type),h=x(s.internalFormat,l,c,s.colorSpace),u=et(n);i&&!1===nt(n)?t.renderbufferStorageMultisample(t.RENDERBUFFER,u,h,n.width,n.height):nt(n)?o.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,u,h,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,h,n.width,n.height)}}t.bindRenderbuffer(t.RENDERBUFFER,null)}function Y(e){const r=i.get(e),a=!0===e.isWebGLCubeRenderTarget;if(r.__boundDepthTexture!==e.depthTexture){const t=e.depthTexture;if(r.__depthDisposeCallback&&r.__depthDisposeCallback(),t){const e=()=>{delete r.__boundDepthTexture,delete r.__depthDisposeCallback,t.removeEventListener("dispose",e)};t.addEventListener("dispose",e),r.__depthDisposeCallback=e}r.__boundDepthTexture=t}if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(t.FRAMEBUFFER,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const a=i.get(r.depthTexture);a.__renderTarget=r,a.__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),w(r.depthTexture,0);const s=a.__webglTexture,l=et(r);if(r.depthTexture.format===$)nt(r)?o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,s,0,l):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,s,0);else{if(r.depthTexture.format!==Q)throw new Error("Unknown depthTexture format");nt(r)?o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,s,0,l):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,s,0)}}(r.__webglFramebuffer,e)}else if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)if(n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer[i]),void 0===r.__webglDepthbuffer[i])r.__webglDepthbuffer[i]=t.createRenderbuffer(),q(r.__webglDepthbuffer[i],e,!1);else{const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,a=r.__webglDepthbuffer[i];t.bindRenderbuffer(t.RENDERBUFFER,a),t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,a)}}else if(n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer),void 0===r.__webglDepthbuffer)r.__webglDepthbuffer=t.createRenderbuffer(),q(r.__webglDepthbuffer,e,!1);else{const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,i=r.__webglDepthbuffer;t.bindRenderbuffer(t.RENDERBUFFER,i),t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,i)}n.bindFramebuffer(t.FRAMEBUFFER,null)}const K=[],tt=[];function et(t){return Math.min(r.maxSamples,t.samples)}function nt(t){const n=i.get(t);return t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function it(t,e){const n=t.colorSpace,i=t.format,r=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||n!==zt&&n!==Ft&&(ye.getTransfer(n)===Vt?i===J&&r===k||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n)),e}function rt(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement?(c.width=t.naturalWidth||t.width,c.height=t.naturalHeight||t.height):"undefined"!=typeof VideoFrame&&t instanceof VideoFrame?(c.width=t.displayWidth,c.height=t.displayHeight):(c.width=t.width,c.height=t.height),c}this.allocateTextureUnit=function(){const t=b;return t>=r.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+r.maxTextures),b+=1,t},this.resetTextureUnits=function(){b=0},this.setTexture2D=w,this.setTexture2DArray=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?L(a,e,r):n.bindTexture(t.TEXTURE_2D_ARRAY,a.__webglTexture,t.TEXTURE0+r)},this.setTexture3D=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?L(a,e,r):n.bindTexture(t.TEXTURE_3D,a.__webglTexture,t.TEXTURE0+r)},this.setTextureCube=function(e,s){const o=i.get(e);e.version>0&&o.__version!==e.version?function(e,s,o){if(6!==s.image.length)return;const l=D(e,s),c=s.source;n.bindTexture(t.TEXTURE_CUBE_MAP,e.__webglTexture,t.TEXTURE0+o);const h=i.get(c);if(c.version!==h.__version||!0===l){n.activeTexture(t.TEXTURE0+o);const e=ye.getPrimaries(ye.workingColorSpace),i=s.colorSpace===Ft?null:ye.getPrimaries(s.colorSpace),u=s.colorSpace===Ft||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,s.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,s.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,s.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,u);const d=s.isCompressedTexture||s.image[0].isCompressedTexture,p=s.image[0]&&s.image[0].isDataTexture,f=[];for(let t=0;t<6;t++)f[t]=d||p?p?s.image[t].image:s.image[t]:m(s.image[t],!0,r.maxCubemapSize),f[t]=it(s,f[t]);const v=f[0],M=a.convert(s.format,s.colorSpace),S=a.convert(s.type),E=x(s.internalFormat,M,S,s.colorSpace),T=!0!==s.isVideoTexture,b=void 0===h.__version||!0===l,w=c.dataReady;let A,R=y(s,v);if(P(t.TEXTURE_CUBE_MAP,s),d){T&&b&&n.texStorage2D(t.TEXTURE_CUBE_MAP,R,E,v.width,v.height);for(let e=0;e<6;e++){A=f[e].mipmaps;for(let i=0;i<A.length;i++){const r=A[i];s.format!==J?null!==M?T?w&&n.compressedTexSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,r.width,r.height,M,r.data):n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,E,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):T?w&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,r.width,r.height,M,S,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,E,r.width,r.height,0,M,S,r.data)}}}else{if(A=s.mipmaps,T&&b){A.length>0&&R++;const e=rt(f[0]);n.texStorage2D(t.TEXTURE_CUBE_MAP,R,E,e.width,e.height)}for(let e=0;e<6;e++)if(p){T?w&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,f[e].width,f[e].height,M,S,f[e].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,E,f[e].width,f[e].height,0,M,S,f[e].data);for(let i=0;i<A.length;i++){const r=A[i].image[e].image;T?w&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,r.width,r.height,M,S,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,E,r.width,r.height,0,M,S,r.data)}}else{T?w&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,M,S,f[e]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,E,M,S,f[e]);for(let i=0;i<A.length;i++){const r=A[i];T?w&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,M,S,r.image[e]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,E,M,S,r.image[e])}}}g(s)&&_(t.TEXTURE_CUBE_MAP),h.__version=c.version,s.onUpdate&&s.onUpdate(s)}e.__version=s.version}(o,e,s):n.bindTexture(t.TEXTURE_CUBE_MAP,o.__webglTexture,t.TEXTURE0+s)},this.rebindTextures=function(e,n,r){const a=i.get(e);void 0!==n&&W(a.__webglFramebuffer,e,e.texture,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,0),void 0!==r&&Y(e)},this.setupRenderTarget=function(e){const r=e.texture,o=i.get(e),l=i.get(r);e.addEventListener("dispose",E);const c=e.textures,h=!0===e.isWebGLCubeRenderTarget,u=c.length>1;if(u||(void 0===l.__webglTexture&&(l.__webglTexture=t.createTexture()),l.__version=r.version,s.memory.textures++),h){o.__webglFramebuffer=[];for(let e=0;e<6;e++)if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer[e]=[];for(let n=0;n<r.mipmaps.length;n++)o.__webglFramebuffer[e][n]=t.createFramebuffer()}else o.__webglFramebuffer[e]=t.createFramebuffer()}else{if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer=[];for(let e=0;e<r.mipmaps.length;e++)o.__webglFramebuffer[e]=t.createFramebuffer()}else o.__webglFramebuffer=t.createFramebuffer();if(u)for(let e=0,n=c.length;e<n;e++){const n=i.get(c[e]);void 0===n.__webglTexture&&(n.__webglTexture=t.createTexture(),s.memory.textures++)}if(e.samples>0&&!1===nt(e)){o.__webglMultisampledFramebuffer=t.createFramebuffer(),o.__webglColorRenderbuffer=[],n.bindFramebuffer(t.FRAMEBUFFER,o.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const i=c[n];o.__webglColorRenderbuffer[n]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,o.__webglColorRenderbuffer[n]);const r=a.convert(i.format,i.colorSpace),s=a.convert(i.type),l=x(i.internalFormat,r,s,i.colorSpace,!0===e.isXRRenderTarget),h=et(e);t.renderbufferStorageMultisample(t.RENDERBUFFER,h,l,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+n,t.RENDERBUFFER,o.__webglColorRenderbuffer[n])}t.bindRenderbuffer(t.RENDERBUFFER,null),e.depthBuffer&&(o.__webglDepthRenderbuffer=t.createRenderbuffer(),q(o.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(t.FRAMEBUFFER,null)}}if(h){n.bindTexture(t.TEXTURE_CUBE_MAP,l.__webglTexture),P(t.TEXTURE_CUBE_MAP,r);for(let n=0;n<6;n++)if(r.mipmaps&&r.mipmaps.length>0)for(let i=0;i<r.mipmaps.length;i++)W(o.__webglFramebuffer[n][i],e,r,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,i);else W(o.__webglFramebuffer[n],e,r,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);g(r)&&_(t.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(u){for(let r=0,a=c.length;r<a;r++){const a=c[r],s=i.get(a);n.bindTexture(t.TEXTURE_2D,s.__webglTexture),P(t.TEXTURE_2D,a),W(o.__webglFramebuffer,e,a,t.COLOR_ATTACHMENT0+r,t.TEXTURE_2D,0),g(a)&&_(t.TEXTURE_2D)}n.unbindTexture()}else{let i=t.TEXTURE_2D;if((e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(i=e.isWebGL3DRenderTarget?t.TEXTURE_3D:t.TEXTURE_2D_ARRAY),n.bindTexture(i,l.__webglTexture),P(i,r),r.mipmaps&&r.mipmaps.length>0)for(let n=0;n<r.mipmaps.length;n++)W(o.__webglFramebuffer[n],e,r,t.COLOR_ATTACHMENT0,i,n);else W(o.__webglFramebuffer,e,r,t.COLOR_ATTACHMENT0,i,0);g(r)&&_(i),n.unbindTexture()}e.depthBuffer&&Y(e)},this.updateRenderTargetMipmap=function(t){const e=t.textures;for(let r=0,a=e.length;r<a;r++){const a=e[r];if(g(a)){const e=v(t),r=i.get(a).__webglTexture;n.bindTexture(e,r),_(e),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(e.samples>0)if(!1===nt(e)){const r=e.textures,a=e.width,s=e.height;let o=t.COLOR_BUFFER_BIT;const c=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,h=i.get(e),u=r.length>1;if(u)for(let e=0;e<r.length;e++)n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null),n.bindFramebuffer(t.FRAMEBUFFER,h.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0);n.bindFramebuffer(t.READ_FRAMEBUFFER,h.__webglMultisampledFramebuffer),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,h.__webglFramebuffer);for(let n=0;n<r.length;n++){if(e.resolveDepthBuffer&&(e.depthBuffer&&(o|=t.DEPTH_BUFFER_BIT),e.stencilBuffer&&e.resolveStencilBuffer&&(o|=t.STENCIL_BUFFER_BIT)),u){t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,h.__webglColorRenderbuffer[n]);const e=i.get(r[n]).__webglTexture;t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}t.blitFramebuffer(0,0,a,s,0,0,a,s,o,t.NEAREST),!0===l&&(K.length=0,tt.length=0,K.push(t.COLOR_ATTACHMENT0+n),e.depthBuffer&&!1===e.resolveDepthBuffer&&(K.push(c),tt.push(c),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,tt)),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,K))}if(n.bindFramebuffer(t.READ_FRAMEBUFFER,null),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),u)for(let e=0;e<r.length;e++){n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,h.__webglColorRenderbuffer[e]);const a=i.get(r[e]).__webglTexture;n.bindFramebuffer(t.FRAMEBUFFER,h.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,a,0)}n.bindFramebuffer(t.DRAW_FRAMEBUFFER,h.__webglMultisampledFramebuffer)}else if(e.depthBuffer&&!1===e.resolveDepthBuffer&&l){const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,[n])}},this.setupDepthRenderbuffer=Y,this.setupFrameBufferTexture=W,this.useMultisampledRTT=nt}function Mo(t,e){return{convert:function(n,i=""){let r;const a=ye.getTransfer(i);if(n===k)return t.UNSIGNED_BYTE;if(n===Y)return t.UNSIGNED_SHORT_4_4_4_4;if(n===K)return t.UNSIGNED_SHORT_5_5_5_1;if(35902===n)return t.UNSIGNED_INT_5_9_9_9_REV;if(1010===n)return t.BYTE;if(1011===n)return t.SHORT;if(n===G)return t.UNSIGNED_SHORT;if(n===W)return t.INT;if(n===X)return t.UNSIGNED_INT;if(n===j)return t.FLOAT;if(n===q)return t.HALF_FLOAT;if(1021===n)return t.ALPHA;if(1022===n)return t.RGB;if(n===J)return t.RGBA;if(1024===n)return t.LUMINANCE;if(1025===n)return t.LUMINANCE_ALPHA;if(n===$)return t.DEPTH_COMPONENT;if(n===Q)return t.DEPTH_STENCIL;if(1028===n)return t.RED;if(n===tt)return t.RED_INTEGER;if(1030===n)return t.RG;if(n===et)return t.RG_INTEGER;if(n===nt)return t.RGBA_INTEGER;if(n===it||n===rt||n===at||n===st)if(a===Vt){if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(n===it)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===rt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===at)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===st)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=e.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(n===it)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===rt)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===at)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===st)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===ot||n===lt||n===ct||n===ht){if(r=e.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(n===ot)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===lt)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===ct)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===ht)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===ut||n===dt||n===pt){if(r=e.get("WEBGL_compressed_texture_etc"),null===r)return null;if(n===ut||n===dt)return a===Vt?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===pt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(n===ft||n===mt||n===gt||n===_t||n===vt||n===xt||n===Mt||n===yt||n===St||n===Et||n===Tt||n===bt||n===wt||n===At){if(r=e.get("WEBGL_compressed_texture_astc"),null===r)return null;if(n===ft)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===mt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===gt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===_t)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===vt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===xt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Mt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===yt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===St)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Et)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Tt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===bt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===wt)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===At)return a===Vt?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===Rt||n===Ct||n===Pt){if(r=e.get("EXT_texture_compression_bptc"),null===r)return null;if(n===Rt)return a===Vt?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Ct)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Pt)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(36283===n||n===Dt||n===Lt||n===Ut){if(r=e.get("EXT_texture_compression_rgtc"),null===r)return null;if(n===Rt)return r.COMPRESSED_RED_RGTC1_EXT;if(n===Dt)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Lt)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Ut)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Z?t.UNSIGNED_INT_24_8:void 0!==t[n]?t[n]:null}}}class yo{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(null===this.texture){const i=new Pe;t.properties.get(i).__webglTexture=e.texture,e.depthNear===n.depthNear&&e.depthFar===n.depthFar||(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=i}}getMesh(t){if(null!==this.texture&&null===this.mesh){const e=t.cameras[0].viewport,n=new Wi({vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new Fi(new dr(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class So extends te{constructor(t,e){super();const n=this;let i=null,r=1,a=null,s="local-floor",o=1,l=null,c=null,h=null,u=null,d=null,p=null;const f=new yo,m=e.getContextAttributes();let g=null,_=null;const v=[],x=[],M=new he;let y=null;const S=new Ki;S.viewport=new De;const E=new Ki;E.viewport=new De;const T=[S,E],b=new Or;let w=null,A=null;function R(t){const e=x.indexOf(t.inputSource);if(-1===e)return;const n=v[e];void 0!==n&&(n.update(t.inputSource,t.frame,l||a),n.dispatchEvent({type:t.type,data:t.inputSource}))}function C(){i.removeEventListener("select",R),i.removeEventListener("selectstart",R),i.removeEventListener("selectend",R),i.removeEventListener("squeeze",R),i.removeEventListener("squeezestart",R),i.removeEventListener("squeezeend",R),i.removeEventListener("end",C),i.removeEventListener("inputsourceschange",P);for(let t=0;t<v.length;t++){const e=x[t];null!==e&&(x[t]=null,v[t].disconnect(e))}w=null,A=null,f.reset(),t.setRenderTarget(g),d=null,u=null,h=null,i=null,_=null,N.stop(),n.isPresenting=!1,t.setPixelRatio(y),t.setSize(M.width,M.height,!1),n.dispatchEvent({type:"sessionend"})}function P(t){for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=x.indexOf(n);i>=0&&(x[i]=null,v[i].disconnect(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e];let i=x.indexOf(n);if(-1===i){for(let t=0;t<v.length;t++){if(t>=x.length){x.push(n),i=t;break}if(null===x[t]){x[t]=n,i=t;break}}if(-1===i)break}const r=v[i];r&&r.connect(n)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=v[t];return void 0===e&&(e=new nr,v[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=v[t];return void 0===e&&(e=new nr,v[t]=e),e.getGripSpace()},this.getHand=function(t){let e=v[t];return void 0===e&&(e=new nr,v[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){s=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l||a},this.setReferenceSpace=function(t){l=t},this.getBaseLayer=function(){return null!==u?u:d},this.getBinding=function(){return h},this.getFrame=function(){return p},this.getSession=function(){return i},this.setSession=async function(c){if(i=c,null!==i){if(g=t.getRenderTarget(),i.addEventListener("select",R),i.addEventListener("selectstart",R),i.addEventListener("selectend",R),i.addEventListener("squeeze",R),i.addEventListener("squeezestart",R),i.addEventListener("squeezeend",R),i.addEventListener("end",C),i.addEventListener("inputsourceschange",P),!0!==m.xrCompatible&&await e.makeXRCompatible(),y=t.getPixelRatio(),t.getSize(M),"undefined"!=typeof XRWebGLBinding&&"createProjectionLayer"in XRWebGLBinding.prototype){let n=null,a=null,s=null;m.depth&&(s=m.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,n=m.stencil?Q:$,a=m.stencil?Z:X);const o={colorFormat:e.RGBA8,depthFormat:s,scaleFactor:r};h=new XRWebGLBinding(i,e),u=h.createProjectionLayer(o),i.updateRenderState({layers:[u]}),t.setPixelRatio(1),t.setSize(u.textureWidth,u.textureHeight,!1),_=new Ue(u.textureWidth,u.textureHeight,{format:J,type:k,depthTexture:new ur(u.textureWidth,u.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:m.stencil,colorSpace:t.outputColorSpace,samples:m.antialias?4:0,resolveDepthBuffer:!1===u.ignoreDepthValues,resolveStencilBuffer:!1===u.ignoreDepthValues})}else{const n={antialias:m.antialias,alpha:!0,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(i,e,n),i.updateRenderState({baseLayer:d}),t.setPixelRatio(1),t.setSize(d.framebufferWidth,d.framebufferHeight,!1),_=new Ue(d.framebufferWidth,d.framebufferHeight,{format:J,type:k,colorSpace:t.outputColorSpace,stencilBuffer:m.stencil,resolveDepthBuffer:!1===d.ignoreDepthValues,resolveStencilBuffer:!1===d.ignoreDepthValues})}_.isXRRenderTarget=!0,this.setFoveation(o),l=null,a=await i.requestReferenceSpace(s),N.setContext(i),N.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==i)return i.environmentBlendMode},this.getDepthTexture=function(){return f.getDepthTexture()};const D=new Fe,L=new Fe;function U(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;let e=t.near,n=t.far;null!==f.texture&&(f.depthNear>0&&(e=f.depthNear),f.depthFar>0&&(n=f.depthFar)),b.near=E.near=S.near=e,b.far=E.far=S.far=n,w===b.near&&A===b.far||(i.updateRenderState({depthNear:b.near,depthFar:b.far}),w=b.near,A=b.far),S.layers.mask=2|t.layers.mask,E.layers.mask=4|t.layers.mask,b.layers.mask=S.layers.mask|E.layers.mask;const r=t.parent,a=b.cameras;U(b,r);for(let t=0;t<a.length;t++)U(a[t],r);2===a.length?function(t,e,n){D.setFromMatrixPosition(e.matrixWorld),L.setFromMatrixPosition(n.matrixWorld);const i=D.distanceTo(L),r=e.projectionMatrix.elements,a=n.projectionMatrix.elements,s=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(a[8]+1)/a[0],d=s*h,p=s*u,f=i/(-h+u),m=f*-h;if(e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert(),-1===r[10])t.projectionMatrix.copy(e.projectionMatrix),t.projectionMatrixInverse.copy(e.projectionMatrixInverse);else{const e=s+f,n=o+f,r=d-m,a=p+(i-m),h=l*o/n*e,u=c*o/n*e;t.projectionMatrix.makePerspective(r,a,h,u,e,n),t.projectionMatrixInverse.copy(t.projectionMatrix).invert()}}(b,S,E):b.projectionMatrix.copy(S.projectionMatrix),function(t,e,n){null===n?t.matrix.copy(e.matrixWorld):(t.matrix.copy(n.matrixWorld),t.matrix.invert(),t.matrix.multiply(e.matrixWorld)),t.matrix.decompose(t.position,t.quaternion,t.scale),t.updateMatrixWorld(!0),t.projectionMatrix.copy(e.projectionMatrix),t.projectionMatrixInverse.copy(e.projectionMatrixInverse),t.isPerspectiveCamera&&(t.fov=2*ie*Math.atan(1/t.projectionMatrix.elements[5]),t.zoom=1)}(t,b,r)},this.getCamera=function(){return b},this.getFoveation=function(){if(null!==u||null!==d)return o},this.setFoveation=function(t){o=t,null!==u&&(u.fixedFoveation=t),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=t)},this.hasDepthSensing=function(){return null!==f.texture},this.getDepthSensingMesh=function(){return f.getMesh(b)};let I=null;const N=new qr;N.setAnimationLoop((function(e,r){if(c=r.getViewerPose(l||a),p=r,null!==c){const e=c.views;null!==d&&(t.setRenderTargetFramebuffer(_,d.framebuffer),t.setRenderTarget(_));let n=!1;e.length!==b.cameras.length&&(b.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const r=e[i];let a=null;if(null!==d)a=d.getViewport(r);else{const e=h.getViewSubImage(u,r);a=e.viewport,0===i&&(t.setRenderTargetTextures(_,e.colorTexture,e.depthStencilTexture),t.setRenderTarget(_))}let s=T[i];void 0===s&&(s=new Ki,s.layers.enable(i),s.viewport=new De,T[i]=s),s.matrix.fromArray(r.transform.matrix),s.matrix.decompose(s.position,s.quaternion,s.scale),s.projectionMatrix.fromArray(r.projectionMatrix),s.projectionMatrixInverse.copy(s.projectionMatrix).invert(),s.viewport.set(a.x,a.y,a.width,a.height),0===i&&(b.matrix.copy(s.matrix),b.matrix.decompose(b.position,b.quaternion,b.scale)),!0===n&&b.cameras.push(s)}const r=i.enabledFeatures;if(r&&r.includes("depth-sensing")&&"gpu-optimized"==i.depthUsage&&h){const n=h.getDepthInformation(e[0]);n&&n.isValid&&n.texture&&f.init(t,n,i.renderState)}}for(let t=0;t<v.length;t++){const e=x[t],n=v[t];null!==e&&void 0!==n&&n.update(e,r,l||a)}I&&I(e,r),r.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:r}),p=null})),this.setAnimationLoop=function(t){I=t},this.dispose=function(){}}}const Eo=new Tn,To=new fn;function bo(t,e){function n(t,e){!0===t.matrixAutoUpdate&&t.updateMatrix(),e.value.copy(t.matrix)}function i(t,i){t.opacity.value=i.opacity,i.color&&t.diffuse.value.copy(i.color),i.emissive&&t.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),i.map&&(t.map.value=i.map,n(i.map,t.mapTransform)),i.alphaMap&&(t.alphaMap.value=i.alphaMap,n(i.alphaMap,t.alphaMapTransform)),i.bumpMap&&(t.bumpMap.value=i.bumpMap,n(i.bumpMap,t.bumpMapTransform),t.bumpScale.value=i.bumpScale,1===i.side&&(t.bumpScale.value*=-1)),i.normalMap&&(t.normalMap.value=i.normalMap,n(i.normalMap,t.normalMapTransform),t.normalScale.value.copy(i.normalScale),1===i.side&&t.normalScale.value.negate()),i.displacementMap&&(t.displacementMap.value=i.displacementMap,n(i.displacementMap,t.displacementMapTransform),t.displacementScale.value=i.displacementScale,t.displacementBias.value=i.displacementBias),i.emissiveMap&&(t.emissiveMap.value=i.emissiveMap,n(i.emissiveMap,t.emissiveMapTransform)),i.specularMap&&(t.specularMap.value=i.specularMap,n(i.specularMap,t.specularMapTransform)),i.alphaTest>0&&(t.alphaTest.value=i.alphaTest);const r=e.get(i),a=r.envMap,s=r.envMapRotation;a&&(t.envMap.value=a,Eo.copy(s),Eo.x*=-1,Eo.y*=-1,Eo.z*=-1,a.isCubeTexture&&!1===a.isRenderTargetTexture&&(Eo.y*=-1,Eo.z*=-1),t.envMapRotation.value.setFromMatrix4(To.makeRotationFromEuler(Eo)),t.flipEnvMap.value=a.isCubeTexture&&!1===a.isRenderTargetTexture?-1:1,t.reflectivity.value=i.reflectivity,t.ior.value=i.ior,t.refractionRatio.value=i.refractionRatio),i.lightMap&&(t.lightMap.value=i.lightMap,t.lightMapIntensity.value=i.lightMapIntensity,n(i.lightMap,t.lightMapTransform)),i.aoMap&&(t.aoMap.value=i.aoMap,t.aoMapIntensity.value=i.aoMapIntensity,n(i.aoMap,t.aoMapTransform))}return{refreshFogUniforms:function(e,n){n.color.getRGB(e.fogColor.value,ki(t)),n.isFog?(e.fogNear.value=n.near,e.fogFar.value=n.far):n.isFogExp2&&(e.fogDensity.value=n.density)},refreshMaterialUniforms:function(t,r,a,s,o){r.isMeshBasicMaterial||r.isMeshLambertMaterial?i(t,r):r.isMeshToonMaterial?(i(t,r),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,r)):r.isMeshPhongMaterial?(i(t,r),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,r)):r.isMeshStandardMaterial?(i(t,r),function(t,e){t.metalness.value=e.metalness,e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap,n(e.metalnessMap,t.metalnessMapTransform)),t.roughness.value=e.roughness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap,n(e.roughnessMap,t.roughnessMapTransform)),e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}(t,r),r.isMeshPhysicalMaterial&&function(t,e,i){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap,n(e.sheenColorMap,t.sheenColorMapTransform)),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap,n(e.sheenRoughnessMap,t.sheenRoughnessMapTransform))),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap,n(e.clearcoatMap,t.clearcoatMapTransform)),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap,n(e.clearcoatRoughnessMap,t.clearcoatRoughnessMapTransform)),e.clearcoatNormalMap&&(t.clearcoatNormalMap.value=e.clearcoatNormalMap,n(e.clearcoatNormalMap,t.clearcoatNormalMapTransform),t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),1===e.side&&t.clearcoatNormalScale.value.negate())),e.dispersion>0&&(t.dispersion.value=e.dispersion),e.iridescence>0&&(t.iridescence.value=e.iridescence,t.iridescenceIOR.value=e.iridescenceIOR,t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0],t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1],e.iridescenceMap&&(t.iridescenceMap.value=e.iridescenceMap,n(e.iridescenceMap,t.iridescenceMapTransform)),e.iridescenceThicknessMap&&(t.iridescenceThicknessMap.value=e.iridescenceThicknessMap,n(e.iridescenceThicknessMap,t.iridescenceThicknessMapTransform))),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap,n(e.transmissionMap,t.transmissionMapTransform)),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap,n(e.thicknessMap,t.thicknessMapTransform)),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)),e.anisotropy>0&&(t.anisotropyVector.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation)),e.anisotropyMap&&(t.anisotropyMap.value=e.anisotropyMap,n(e.anisotropyMap,t.anisotropyMapTransform))),t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap,n(e.specularColorMap,t.specularColorMapTransform)),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap,n(e.specularIntensityMap,t.specularIntensityMapTransform))}(t,r,o)):r.isMeshMatcapMaterial?(i(t,r),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,r)):r.isMeshDepthMaterial?i(t,r):r.isMeshDistanceMaterial?(i(t,r),function(t,n){const i=e.get(n).light;t.referencePosition.value.setFromMatrixPosition(i.matrixWorld),t.nearDistance.value=i.shadow.camera.near,t.farDistance.value=i.shadow.camera.far}(t,r)):r.isMeshNormalMaterial?i(t,r):r.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform))}(t,r),r.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,r)):r.isPointsMaterial?function(t,e,i,r){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*i,t.scale.value=.5*r,e.map&&(t.map.value=e.map,n(e.map,t.uvTransform)),e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform)),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,r,a,s):r.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform)),e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform)),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,r):r.isShadowMaterial?(t.color.value.copy(r.color),t.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function wo(t,e,n,i){let r={},a={},s=[];const o=t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS);function l(t,e,n,i){const r=t.value,a=e+"_"+n;if(void 0===i[a])return i[a]="number"==typeof r||"boolean"==typeof r?r:r.clone(),!0;{const t=i[a];if("number"==typeof r||"boolean"==typeof r){if(t!==r)return i[a]=r,!0}else if(!1===t.equals(r))return t.copy(r),!0}return!1}function c(t){const e={boundary:0,storage:0};return"number"==typeof t||"boolean"==typeof t?(e.boundary=4,e.storage=4):t.isVector2?(e.boundary=8,e.storage=8):t.isVector3||t.isColor?(e.boundary=16,e.storage=12):t.isVector4?(e.boundary=16,e.storage=16):t.isMatrix3?(e.boundary=48,e.storage=48):t.isMatrix4?(e.boundary=64,e.storage=64):t.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",t),e}function h(e){const n=e.target;n.removeEventListener("dispose",h);const i=s.indexOf(n.__bindingPointIndex);s.splice(i,1),t.deleteBuffer(r[n.id]),delete r[n.id],delete a[n.id]}return{bind:function(t,e){const n=e.program;i.uniformBlockBinding(t,n)},update:function(n,u){let d=r[n.id];void 0===d&&(function(t){const e=t.uniforms;let n=0;for(let t=0,i=e.length;t<i;t++){const i=Array.isArray(e[t])?e[t]:[e[t]];for(let t=0,e=i.length;t<e;t++){const e=i[t],r=Array.isArray(e.value)?e.value:[e.value];for(let t=0,i=r.length;t<i;t++){const i=c(r[t]),a=n%16,s=a%i.boundary,o=a+s;n+=s,0!==o&&16-o<i.storage&&(n+=16-o),e.__data=new Float32Array(i.storage/Float32Array.BYTES_PER_ELEMENT),e.__offset=n,n+=i.storage}}}const i=n%16;i>0&&(n+=16-i),t.__size=n,t.__cache={}}(n),d=function(e){const n=function(){for(let t=0;t<o;t++)if(-1===s.indexOf(t))return s.push(t),t;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();e.__bindingPointIndex=n;const i=t.createBuffer(),r=e.__size,a=e.usage;return t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,r,a),t.bindBuffer(t.UNIFORM_BUFFER,null),t.bindBufferBase(t.UNIFORM_BUFFER,n,i),i}(n),r[n.id]=d,n.addEventListener("dispose",h));const p=u.program;i.updateUBOMapping(n,p);const f=e.render.frame;a[n.id]!==f&&(function(e){const n=r[e.id],i=e.uniforms,a=e.__cache;t.bindBuffer(t.UNIFORM_BUFFER,n);for(let e=0,n=i.length;e<n;e++){const n=Array.isArray(i[e])?i[e]:[i[e]];for(let i=0,r=n.length;i<r;i++){const r=n[i];if(!0===l(r,e,i,a)){const e=r.__offset,n=Array.isArray(r.value)?r.value:[r.value];let i=0;for(let a=0;a<n.length;a++){const s=n[a],o=c(s);"number"==typeof s||"boolean"==typeof s?(r.__data[0]=s,t.bufferSubData(t.UNIFORM_BUFFER,e+i,r.__data)):s.isMatrix3?(r.__data[0]=s.elements[0],r.__data[1]=s.elements[1],r.__data[2]=s.elements[2],r.__data[3]=0,r.__data[4]=s.elements[3],r.__data[5]=s.elements[4],r.__data[6]=s.elements[5],r.__data[7]=0,r.__data[8]=s.elements[6],r.__data[9]=s.elements[7],r.__data[10]=s.elements[8],r.__data[11]=0):(s.toArray(r.__data,i),i+=o.storage/Float32Array.BYTES_PER_ELEMENT)}t.bufferSubData(t.UNIFORM_BUFFER,e,r.__data)}}}t.bindBuffer(t.UNIFORM_BUFFER,null)}(n),a[n.id]=f)},dispose:function(){for(const e in r)t.deleteBuffer(r[e]);s=[],r={},a={}}}}class Ao{constructor(e={}){const{canvas:n=me(),context:i=null,depth:r=!0,stencil:a=!1,alpha:s=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:u=!1,reverseDepthBuffer:d=!1}=e;let p;if(this.isWebGLRenderer=!0,null!==i){if("undefined"!=typeof WebGLRenderingContext&&i instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");p=i.getContextAttributes().alpha}else p=s;const f=new Uint32Array(4),m=new Int32Array(4);let g=null,_=null;const v=[],x=[];this.domElement=n,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.toneMapping=0,this.toneMappingExposure=1,this.transmissionResolutionScale=1;const M=this;let y=!1;this._outputColorSpace=Bt;let S=0,E=0,T=null,b=-1,w=null;const A=new De,R=new De;let C=null;const P=new si(0);let D=0,L=n.width,U=n.height,I=1,N=null,O=null;const F=new De(0,0,L,U),B=new De(0,0,L,U);let z=!1;const H=new hr;let W=!1,j=!1;const J=new fn,$=new fn,Q=new Fe,it=new De,rt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let at=!1;function st(){return null===T?I:1}let ot,lt,ct,ht,ut,dt,pt,ft,mt,gt,_t,vt,xt,Mt,yt,St,Et,Tt,bt,wt,At,Rt,Ct,Pt,Dt=i;function Lt(t,e){return n.getContext(t,e)}try{const e={alpha:!0,depth:r,stencil:a,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in n&&n.setAttribute("data-engine",`three.js r${t}`),n.addEventListener("webglcontextlost",Nt,!1),n.addEventListener("webglcontextrestored",Ot,!1),n.addEventListener("webglcontextcreationerror",Ft,!1),null===Dt){const t="webgl2";if(Dt=Lt(t,e),null===Dt)throw Lt(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function Ut(){ot=new Ta(Dt),ot.init(),Rt=new Mo(Dt,ot),lt=new ra(Dt,ot,e,Rt),ct=new vo(Dt,ot),lt.reverseDepthBuffer&&d&&ct.buffers.depth.setReversed(!0),ht=new Aa(Dt),ut=new ro,dt=new xo(Dt,ot,ct,ut,lt,Rt,ht),pt=new sa(M),ft=new Ea(M),mt=new Yr(Dt),Ct=new na(Dt,mt),gt=new ba(Dt,mt,ht,Ct),_t=new Ca(Dt,gt,mt,ht),bt=new Ra(Dt,lt,dt),St=new aa(ut),vt=new io(M,pt,ft,ot,lt,Ct,St),xt=new bo(M,ut),Mt=new lo,yt=new mo(ot),Tt=new ea(M,pt,ft,ct,_t,p,l),Et=new go(M,_t,lt),Pt=new wo(Dt,ht,lt,ct),wt=new ia(Dt,ot,ht),At=new wa(Dt,ot,ht),ht.programs=vt.programs,M.capabilities=lt,M.extensions=ot,M.properties=ut,M.renderLists=Mt,M.shadowMap=Et,M.state=ct,M.info=ht}Ut();const It=new So(M,Dt);function Nt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),y=!0}function Ot(){console.log("THREE.WebGLRenderer: Context Restored."),y=!1;const t=ht.autoReset,e=Et.enabled,n=Et.autoUpdate,i=Et.needsUpdate,r=Et.type;Ut(),ht.autoReset=t,Et.enabled=e,Et.autoUpdate=n,Et.needsUpdate=i,Et.type=r}function Ft(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function Ht(t){const e=t.target;e.removeEventListener("dispose",Ht),function(t){(function(t){const e=ut.get(t).programs;void 0!==e&&(e.forEach((function(t){vt.releaseProgram(t)})),t.isShaderMaterial&&vt.releaseShaderCache(t))})(t),ut.remove(t)}(e)}function Vt(t,e,n){!0===t.transparent&&2===t.side&&!1===t.forceSinglePass?(t.side=1,t.needsUpdate=!0,Jt(t,e,n),t.side=0,t.needsUpdate=!0,Jt(t,e,n),t.side=2):Jt(t,e,n)}this.xr=It,this.getContext=function(){return Dt},this.getContextAttributes=function(){return Dt.getContextAttributes()},this.forceContextLoss=function(){const t=ot.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=ot.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return I},this.setPixelRatio=function(t){void 0!==t&&(I=t,this.setSize(L,U,!1))},this.getSize=function(t){return t.set(L,U)},this.setSize=function(t,e,i=!0){It.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(L=t,U=e,n.width=Math.floor(t*I),n.height=Math.floor(e*I),!0===i&&(n.style.width=t+"px",n.style.height=e+"px"),this.setViewport(0,0,t,e))},this.getDrawingBufferSize=function(t){return t.set(L*I,U*I).floor()},this.setDrawingBufferSize=function(t,e,i){L=t,U=e,I=i,n.width=Math.floor(t*i),n.height=Math.floor(e*i),this.setViewport(0,0,t,e)},this.getCurrentViewport=function(t){return t.copy(A)},this.getViewport=function(t){return t.copy(F)},this.setViewport=function(t,e,n,i){t.isVector4?F.set(t.x,t.y,t.z,t.w):F.set(t,e,n,i),ct.viewport(A.copy(F).multiplyScalar(I).round())},this.getScissor=function(t){return t.copy(B)},this.setScissor=function(t,e,n,i){t.isVector4?B.set(t.x,t.y,t.z,t.w):B.set(t,e,n,i),ct.scissor(R.copy(B).multiplyScalar(I).round())},this.getScissorTest=function(){return z},this.setScissorTest=function(t){ct.setScissorTest(z=t)},this.setOpaqueSort=function(t){N=t},this.setTransparentSort=function(t){O=t},this.getClearColor=function(t){return t.copy(Tt.getClearColor())},this.setClearColor=function(){Tt.setClearColor(...arguments)},this.getClearAlpha=function(){return Tt.getClearAlpha()},this.setClearAlpha=function(){Tt.setClearAlpha(...arguments)},this.clear=function(t=!0,e=!0,n=!0){let i=0;if(t){let t=!1;if(null!==T){const e=T.texture.format;t=e===nt||e===et||e===tt}if(t){const t=T.texture.type,e=t===k||t===X||t===G||t===Z||t===Y||t===K,n=Tt.getClearColor(),i=Tt.getClearAlpha(),r=n.r,a=n.g,s=n.b;e?(f[0]=r,f[1]=a,f[2]=s,f[3]=i,Dt.clearBufferuiv(Dt.COLOR,0,f)):(m[0]=r,m[1]=a,m[2]=s,m[3]=i,Dt.clearBufferiv(Dt.COLOR,0,m))}else i|=Dt.COLOR_BUFFER_BIT}e&&(i|=Dt.DEPTH_BUFFER_BIT),n&&(i|=Dt.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Dt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){n.removeEventListener("webglcontextlost",Nt,!1),n.removeEventListener("webglcontextrestored",Ot,!1),n.removeEventListener("webglcontextcreationerror",Ft,!1),Tt.dispose(),Mt.dispose(),yt.dispose(),ut.dispose(),pt.dispose(),ft.dispose(),_t.dispose(),Ct.dispose(),Pt.dispose(),vt.dispose(),It.dispose(),It.removeEventListener("sessionstart",Gt),It.removeEventListener("sessionend",Wt),Xt.stop()},this.renderBufferDirect=function(t,e,n,i,r,a){null===e&&(e=rt);const s=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,n,i,r){!0!==e.isScene&&(e=rt),dt.resetTextureUnits();const a=e.fog,s=i.isMeshStandardMaterial?e.environment:null,o=null===T?M.outputColorSpace:!0===T.isXRRenderTarget?T.texture.colorSpace:zt,l=(i.isMeshStandardMaterial?ft:pt).get(i.envMap||s),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0),u=!!n.morphAttributes.position,d=!!n.morphAttributes.normal,p=!!n.morphAttributes.color;let f=0;i.toneMapped&&(null!==T&&!0!==T.isXRRenderTarget||(f=M.toneMapping));const m=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,g=void 0!==m?m.length:0,v=ut.get(i),x=_.state.lights;if(!0===W&&(!0===j||t!==w)){const e=t===w&&i.id===b;St.setState(i,t,e)}let y=!1;i.version===v.__version?v.needsLights&&v.lightsStateVersion!==x.state.version||v.outputColorSpace!==o||r.isBatchedMesh&&!1===v.batching?y=!0:r.isBatchedMesh||!0!==v.batching?r.isBatchedMesh&&!0===v.batchingColor&&null===r.colorTexture||r.isBatchedMesh&&!1===v.batchingColor&&null!==r.colorTexture||r.isInstancedMesh&&!1===v.instancing?y=!0:r.isInstancedMesh||!0!==v.instancing?r.isSkinnedMesh&&!1===v.skinning?y=!0:r.isSkinnedMesh||!0!==v.skinning?r.isInstancedMesh&&!0===v.instancingColor&&null===r.instanceColor||r.isInstancedMesh&&!1===v.instancingColor&&null!==r.instanceColor||r.isInstancedMesh&&!0===v.instancingMorph&&null===r.morphTexture||r.isInstancedMesh&&!1===v.instancingMorph&&null!==r.morphTexture||v.envMap!==l||!0===i.fog&&v.fog!==a?y=!0:void 0===v.numClippingPlanes||v.numClippingPlanes===St.numPlanes&&v.numIntersection===St.numIntersection?(v.vertexAlphas!==c||v.vertexTangents!==h||v.morphTargets!==u||v.morphNormals!==d||v.morphColors!==p||v.toneMapping!==f||v.morphTargetsCount!==g)&&(y=!0):y=!0:y=!0:y=!0:y=!0:(y=!0,v.__version=i.version);let S=v.currentProgram;!0===y&&(S=Jt(i,e,r));let E=!1,A=!1,R=!1;const C=S.getUniforms(),P=v.uniforms;if(ct.useProgram(S.program)&&(E=!0,A=!0,R=!0),i.id!==b&&(b=i.id,A=!0),E||w!==t){ct.buffers.depth.getReversed()?(J.copy(t.projectionMatrix),function(t){const e=t.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}(J),function(t){const e=t.elements;-1===e[11]?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=1-e[14])}(J),C.setValue(Dt,"projectionMatrix",J)):C.setValue(Dt,"projectionMatrix",t.projectionMatrix),C.setValue(Dt,"viewMatrix",t.matrixWorldInverse);const e=C.map.cameraPosition;void 0!==e&&e.setValue(Dt,Q.setFromMatrixPosition(t.matrixWorld)),lt.logarithmicDepthBuffer&&C.setValue(Dt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&C.setValue(Dt,"isOrthographic",!0===t.isOrthographicCamera),w!==t&&(w=t,A=!0,R=!0)}if(r.isSkinnedMesh){C.setOptional(Dt,r,"bindMatrix"),C.setOptional(Dt,r,"bindMatrixInverse");const t=r.skeleton;t&&(null===t.boneTexture&&t.computeBoneTexture(),C.setValue(Dt,"boneTexture",t.boneTexture,dt))}r.isBatchedMesh&&(C.setOptional(Dt,r,"batchingTexture"),C.setValue(Dt,"batchingTexture",r._matricesTexture,dt),C.setOptional(Dt,r,"batchingIdTexture"),C.setValue(Dt,"batchingIdTexture",r._indirectTexture,dt),C.setOptional(Dt,r,"batchingColorTexture"),null!==r._colorsTexture&&C.setValue(Dt,"batchingColorTexture",r._colorsTexture,dt));const D=n.morphAttributes;var L,N;if(void 0===D.position&&void 0===D.normal&&void 0===D.color||bt.update(r,n,S),(A||v.receiveShadow!==r.receiveShadow)&&(v.receiveShadow=r.receiveShadow,C.setValue(Dt,"receiveShadow",r.receiveShadow)),i.isMeshGouraudMaterial&&null!==i.envMap&&(P.envMap.value=l,P.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1),i.isMeshStandardMaterial&&null===i.envMap&&null!==e.environment&&(P.envMapIntensity.value=e.environmentIntensity),A&&(C.setValue(Dt,"toneMappingExposure",M.toneMappingExposure),v.needsLights&&(N=R,(L=P).ambientLightColor.needsUpdate=N,L.lightProbe.needsUpdate=N,L.directionalLights.needsUpdate=N,L.directionalLightShadows.needsUpdate=N,L.pointLights.needsUpdate=N,L.pointLightShadows.needsUpdate=N,L.spotLights.needsUpdate=N,L.spotLightShadows.needsUpdate=N,L.rectAreaLights.needsUpdate=N,L.hemisphereLights.needsUpdate=N),a&&!0===i.fog&&xt.refreshFogUniforms(P,a),xt.refreshMaterialUniforms(P,i,I,U,_.state.transmissionRenderTarget[t.id]),Is.upload(Dt,$t(v),P,dt)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(Is.upload(Dt,$t(v),P,dt),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&C.setValue(Dt,"center",r.center),C.setValue(Dt,"modelViewMatrix",r.modelViewMatrix),C.setValue(Dt,"normalMatrix",r.normalMatrix),C.setValue(Dt,"modelMatrix",r.matrixWorld),i.isShaderMaterial||i.isRawShaderMaterial){const t=i.uniformsGroups;for(let e=0,n=t.length;e<n;e++){const n=t[e];Pt.update(n,S),Pt.bind(n,S)}}return S}(t,e,n,i,r);ct.setMaterial(i,s);let l=n.index,c=1;if(!0===i.wireframe){if(l=gt.getWireframeAttribute(n),void 0===l)return;c=2}const h=n.drawRange,u=n.attributes.position;let d=h.start*c,p=(h.start+h.count)*c;null!==a&&(d=Math.max(d,a.start*c),p=Math.min(p,(a.start+a.count)*c)),null!==l?(d=Math.max(d,0),p=Math.min(p,l.count)):null!=u&&(d=Math.max(d,0),p=Math.min(p,u.count));const f=p-d;if(f<0||f===1/0)return;let m;Ct.setup(r,i,o,n,l);let g=wt;if(null!==l&&(m=mt.get(l),g=At,g.setIndex(m)),r.isMesh)!0===i.wireframe?(ct.setLineWidth(i.wireframeLinewidth*st()),g.setMode(Dt.LINES)):g.setMode(Dt.TRIANGLES);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),ct.setLineWidth(t*st()),r.isLineSegments?g.setMode(Dt.LINES):r.isLineLoop?g.setMode(Dt.LINE_LOOP):g.setMode(Dt.LINE_STRIP)}else r.isPoints?g.setMode(Dt.POINTS):r.isSprite&&g.setMode(Dt.TRIANGLES);if(r.isBatchedMesh)if(null!==r._multiDrawInstances)_e("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),g.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances);else if(ot.get("WEBGL_multi_draw"))g.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else{const t=r._multiDrawStarts,e=r._multiDrawCounts,n=r._multiDrawCount,a=l?mt.get(l).bytesPerElement:1,s=ut.get(i).currentProgram.getUniforms();for(let i=0;i<n;i++)s.setValue(Dt,"_gl_DrawID",i),g.render(t[i]/a,e[i])}else if(r.isInstancedMesh)g.renderInstances(d,f,r.count);else if(n.isInstancedBufferGeometry){const t=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,e=Math.min(n.instanceCount,t);g.renderInstances(d,f,e)}else g.render(d,f)},this.compile=function(t,e,n=null){null===n&&(n=t),_=yt.get(n),_.init(e),x.push(_),n.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(_.pushLight(t),t.castShadow&&_.pushShadow(t))})),t!==n&&t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(_.pushLight(t),t.castShadow&&_.pushShadow(t))})),_.setupLights();const i=new Set;return t.traverse((function(t){if(!(t.isMesh||t.isPoints||t.isLine||t.isSprite))return;const e=t.material;if(e)if(Array.isArray(e))for(let r=0;r<e.length;r++){const a=e[r];Vt(a,n,t),i.add(a)}else Vt(e,n,t),i.add(e)})),_=x.pop(),i},this.compileAsync=function(t,e,n=null){const i=this.compile(t,e,n);return new Promise((e=>{function n(){i.forEach((function(t){ut.get(t).currentProgram.isReady()&&i.delete(t)})),0!==i.size?setTimeout(n,10):e(t)}null!==ot.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)}))};let kt=null;function Gt(){Xt.stop()}function Wt(){Xt.start()}const Xt=new qr;function jt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)_.pushLight(t),t.castShadow&&_.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||H.intersectsSprite(t)){i&&it.setFromMatrixPosition(t.matrixWorld).applyMatrix4($);const e=_t.update(t),r=t.material;r.visible&&g.push(t,e,r,n,it.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(!t.frustumCulled||H.intersectsObject(t))){const e=_t.update(t),r=t.material;if(i&&(void 0!==t.boundingSphere?(null===t.boundingSphere&&t.computeBoundingSphere(),it.copy(t.boundingSphere.center)):(null===e.boundingSphere&&e.computeBoundingSphere(),it.copy(e.boundingSphere.center)),it.applyMatrix4(t.matrixWorld).applyMatrix4($)),Array.isArray(r)){const i=e.groups;for(let a=0,s=i.length;a<s;a++){const s=i[a],o=r[s.materialIndex];o&&o.visible&&g.push(t,e,o,n,it.z,s)}}else r.visible&&g.push(t,e,r,n,it.z,null)}const r=t.children;for(let t=0,a=r.length;t<a;t++)jt(r[t],e,n,i)}function qt(t,e,n,i){const r=t.opaque,a=t.transmissive,s=t.transparent;_.setupLightsView(n),!0===W&&St.setGlobalState(M.clippingPlanes,n),i&&ct.viewport(A.copy(i)),r.length>0&&Kt(r,e,n),a.length>0&&Kt(a,e,n),s.length>0&&Kt(s,e,n),ct.buffers.depth.setTest(!0),ct.buffers.depth.setMask(!0),ct.buffers.color.setMask(!0),ct.setPolygonOffset(!1)}function Yt(t,e,n,i){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;void 0===_.state.transmissionRenderTarget[i.id]&&(_.state.transmissionRenderTarget[i.id]=new Ue(1,1,{generateMipmaps:!0,type:ot.has("EXT_color_buffer_half_float")||ot.has("EXT_color_buffer_float")?q:k,minFilter:V,samples:4,stencilBuffer:a,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:ye.workingColorSpace}));const r=_.state.transmissionRenderTarget[i.id],s=i.viewport||A;r.setSize(s.z*M.transmissionResolutionScale,s.w*M.transmissionResolutionScale);const o=M.getRenderTarget();M.setRenderTarget(r),M.getClearColor(P),D=M.getClearAlpha(),D<1&&M.setClearColor(16777215,.5),M.clear(),at&&Tt.render(n);const l=M.toneMapping;M.toneMapping=0;const c=i.viewport;if(void 0!==i.viewport&&(i.viewport=void 0),_.setupLightsView(i),!0===W&&St.setGlobalState(M.clippingPlanes,i),Kt(t,n,i),dt.updateMultisampleRenderTarget(r),dt.updateRenderTargetMipmap(r),!1===ot.has("WEBGL_multisampled_render_to_texture")){let t=!1;for(let r=0,a=e.length;r<a;r++){const a=e[r],s=a.object,o=a.geometry,l=a.material,c=a.group;if(2===l.side&&s.layers.test(i.layers)){const e=l.side;l.side=1,l.needsUpdate=!0,Zt(s,n,i,o,l,c),l.side=e,l.needsUpdate=!0,t=!0}}!0===t&&(dt.updateMultisampleRenderTarget(r),dt.updateRenderTargetMipmap(r))}M.setRenderTarget(o),M.setClearColor(P,D),void 0!==c&&(i.viewport=c),M.toneMapping=l}function Kt(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;for(let r=0,a=t.length;r<a;r++){const a=t[r],s=a.object,o=a.geometry,l=a.group;let c=a.material;!0===c.allowOverride&&null!==i&&(c=i),s.layers.test(n.layers)&&Zt(s,e,n,o,c,l)}}function Zt(t,e,n,i,r,a){t.onBeforeRender(M,e,n,i,r,a),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(M,e,n,i,t,a),!0===r.transparent&&2===r.side&&!1===r.forceSinglePass?(r.side=1,r.needsUpdate=!0,M.renderBufferDirect(n,e,i,r,t,a),r.side=0,r.needsUpdate=!0,M.renderBufferDirect(n,e,i,r,t,a),r.side=2):M.renderBufferDirect(n,e,i,r,t,a),t.onAfterRender(M,e,n,i,r,a)}function Jt(t,e,n){!0!==e.isScene&&(e=rt);const i=ut.get(t),r=_.state.lights,a=_.state.shadowsArray,s=r.state.version,o=vt.getParameters(t,r.state,a,e,n),l=vt.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?ft:pt).get(t.envMap||i.environment),i.envMapRotation=null!==i.environment&&null===t.envMap?e.environmentRotation:t.envMapRotation,void 0===c&&(t.addEventListener("dispose",Ht),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===s)return Qt(t,o),h}else o.uniforms=vt.getUniforms(t),t.onBeforeCompile(o,M),h=vt.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const u=i.uniforms;return(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=St.uniform),Qt(t,o),i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=s,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotLightMatrix.value=r.state.spotLightMatrix,u.spotLightMap.value=r.state.spotLightMap,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix),i.currentProgram=h,i.uniformsList=null,h}function $t(t){if(null===t.uniformsList){const e=t.currentProgram.getUniforms();t.uniformsList=Is.seqWithValue(e.seq,t.uniforms)}return t.uniformsList}function Qt(t,e){const n=ut.get(t);n.outputColorSpace=e.outputColorSpace,n.batching=e.batching,n.batchingColor=e.batchingColor,n.instancing=e.instancing,n.instancingColor=e.instancingColor,n.instancingMorph=e.instancingMorph,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}Xt.setAnimationLoop((function(t){kt&&kt(t)})),"undefined"!=typeof self&&Xt.setContext(self),this.setAnimationLoop=function(t){kt=t,It.setAnimationLoop(t),null===t?Xt.stop():Xt.start()},It.addEventListener("sessionstart",Gt),It.addEventListener("sessionend",Wt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===y)return;if(!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),!0===It.enabled&&!0===It.isPresenting&&(!0===It.cameraAutoUpdate&&It.updateCamera(e),e=It.getCamera()),!0===t.isScene&&t.onBeforeRender(M,t,e,T),_=yt.get(t,x.length),_.init(e),x.push(_),$.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),H.setFromProjectionMatrix($),j=this.localClippingEnabled,W=St.init(this.clippingPlanes,j),g=Mt.get(t,v.length),g.init(),v.push(g),!0===It.enabled&&!0===It.isPresenting){const t=M.xr.getDepthSensingMesh();null!==t&&jt(t,e,-1/0,M.sortObjects)}jt(t,e,0,M.sortObjects),g.finish(),!0===M.sortObjects&&g.sort(N,O),at=!1===It.enabled||!1===It.isPresenting||!1===It.hasDepthSensing(),at&&Tt.addToRenderList(g,t),this.info.render.frame++,!0===W&&St.beginShadows();const n=_.state.shadowsArray;Et.render(n,t,e),!0===W&&St.endShadows(),!0===this.info.autoReset&&this.info.reset();const i=g.opaque,r=g.transmissive;if(_.setupLights(),e.isArrayCamera){const n=e.cameras;if(r.length>0)for(let e=0,a=n.length;e<a;e++)Yt(i,r,t,n[e]);at&&Tt.render(t);for(let e=0,i=n.length;e<i;e++){const i=n[e];qt(g,t,i,i.viewport)}}else r.length>0&&Yt(i,r,t,e),at&&Tt.render(t),qt(g,t,e);null!==T&&0===E&&(dt.updateMultisampleRenderTarget(T),dt.updateRenderTargetMipmap(T)),!0===t.isScene&&t.onAfterRender(M,t,e),Ct.resetDefaultState(),b=-1,w=null,x.pop(),x.length>0?(_=x[x.length-1],!0===W&&St.setGlobalState(M.clippingPlanes,_.state.camera)):_=null,v.pop(),g=v.length>0?v[v.length-1]:null},this.getActiveCubeFace=function(){return S},this.getActiveMipmapLevel=function(){return E},this.getRenderTarget=function(){return T},this.setRenderTargetTextures=function(t,e,n){const i=ut.get(t);i.__autoAllocateDepthBuffer=!1===t.resolveDepthBuffer,!1===i.__autoAllocateDepthBuffer&&(i.__useRenderToTexture=!1),ut.get(t.texture).__webglTexture=e,ut.get(t.depthTexture).__webglTexture=i.__autoAllocateDepthBuffer?void 0:n,i.__hasExternalTextures=!0},this.setRenderTargetFramebuffer=function(t,e){const n=ut.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e};const te=Dt.createFramebuffer();this.setRenderTarget=function(t,e=0,n=0){T=t,S=e,E=n;let i=!0,r=null,a=!1,s=!1;if(t){const o=ut.get(t);if(void 0!==o.__useDefaultFramebuffer)ct.bindFramebuffer(Dt.FRAMEBUFFER,null),i=!1;else if(void 0===o.__webglFramebuffer)dt.setupRenderTarget(t);else if(o.__hasExternalTextures)dt.rebindTextures(t,ut.get(t.texture).__webglTexture,ut.get(t.depthTexture).__webglTexture);else if(t.depthBuffer){const e=t.depthTexture;if(o.__boundDepthTexture!==e){if(null!==e&&ut.has(e)&&(t.width!==e.image.width||t.height!==e.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");dt.setupDepthRenderbuffer(t)}}const l=t.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(s=!0);const c=ut.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=Array.isArray(c[e])?c[e][n]:c[e],a=!0):r=t.samples>0&&!1===dt.useMultisampledRTT(t)?ut.get(t).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c,A.copy(t.viewport),R.copy(t.scissor),C=t.scissorTest}else A.copy(F).multiplyScalar(I).floor(),R.copy(B).multiplyScalar(I).floor(),C=z;if(0!==n&&(r=te),ct.bindFramebuffer(Dt.FRAMEBUFFER,r)&&i&&ct.drawBuffers(t,r),ct.viewport(A),ct.scissor(R),ct.setScissorTest(C),a){const i=ut.get(t.texture);Dt.framebufferTexture2D(Dt.FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,Dt.TEXTURE_CUBE_MAP_POSITIVE_X+e,i.__webglTexture,n)}else if(s){const i=ut.get(t.texture),r=e;Dt.framebufferTextureLayer(Dt.FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,i.__webglTexture,n,r)}else if(null!==t&&0!==n){const e=ut.get(t.texture);Dt.framebufferTexture2D(Dt.FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,Dt.TEXTURE_2D,e.__webglTexture,n)}b=-1},this.readRenderTargetPixels=function(t,e,n,i,r,a,s){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=ut.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){ct.bindFramebuffer(Dt.FRAMEBUFFER,o);try{const s=t.texture,o=s.format,l=s.type;if(!lt.textureFormatReadable(o))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!lt.textureTypeReadable(l))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&Dt.readPixels(e,n,i,r,Rt.convert(o),Rt.convert(l),a)}finally{const t=null!==T?ut.get(T).__webglFramebuffer:null;ct.bindFramebuffer(Dt.FRAMEBUFFER,t)}}},this.readRenderTargetPixelsAsync=async function(t,e,n,i,r,a,s){if(!t||!t.isWebGLRenderTarget)throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=ut.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==s&&(o=o[s]),o){if(e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r){ct.bindFramebuffer(Dt.FRAMEBUFFER,o);const s=t.texture,l=s.format,c=s.type;if(!lt.textureFormatReadable(l))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!lt.textureTypeReadable(c))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const h=Dt.createBuffer();Dt.bindBuffer(Dt.PIXEL_PACK_BUFFER,h),Dt.bufferData(Dt.PIXEL_PACK_BUFFER,a.byteLength,Dt.STREAM_READ),Dt.readPixels(e,n,i,r,Rt.convert(l),Rt.convert(c),0);const u=null!==T?ut.get(T).__webglFramebuffer:null;ct.bindFramebuffer(Dt.FRAMEBUFFER,u);const d=Dt.fenceSync(Dt.SYNC_GPU_COMMANDS_COMPLETE,0);return Dt.flush(),await function(t,e){return new Promise((function(n,i){setTimeout((function r(){switch(t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0)){case t.WAIT_FAILED:i();break;case t.TIMEOUT_EXPIRED:setTimeout(r,4);break;default:n()}}),4)}))}(Dt,d),Dt.bindBuffer(Dt.PIXEL_PACK_BUFFER,h),Dt.getBufferSubData(Dt.PIXEL_PACK_BUFFER,0,a),Dt.deleteBuffer(h),Dt.deleteSync(d),a}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(t,e=null,n=0){const i=Math.pow(2,-n),r=Math.floor(t.image.width*i),a=Math.floor(t.image.height*i),s=null!==e?e.x:0,o=null!==e?e.y:0;dt.setTexture2D(t,0),Dt.copyTexSubImage2D(Dt.TEXTURE_2D,n,0,0,s,o,r,a),ct.unbindTexture()};const ee=Dt.createFramebuffer(),ne=Dt.createFramebuffer();this.copyTextureToTexture=function(t,e,n=null,i=null,r=0,a=null){let s,o,l,c,h,u,d,p,f;null===a&&(0!==r?(_e("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),a=r,r=0):a=0);const m=t.isCompressedTexture?t.mipmaps[a]:t.image;if(null!==n)s=n.max.x-n.min.x,o=n.max.y-n.min.y,l=n.isBox3?n.max.z-n.min.z:1,c=n.min.x,h=n.min.y,u=n.isBox3?n.min.z:0;else{const e=Math.pow(2,-r);s=Math.floor(m.width*e),o=Math.floor(m.height*e),l=t.isDataArrayTexture?m.depth:t.isData3DTexture?Math.floor(m.depth*e):1,c=0,h=0,u=0}null!==i?(d=i.x,p=i.y,f=i.z):(d=0,p=0,f=0);const g=Rt.convert(e.format),_=Rt.convert(e.type);let v;e.isData3DTexture?(dt.setTexture3D(e,0),v=Dt.TEXTURE_3D):e.isDataArrayTexture||e.isCompressedArrayTexture?(dt.setTexture2DArray(e,0),v=Dt.TEXTURE_2D_ARRAY):(dt.setTexture2D(e,0),v=Dt.TEXTURE_2D),Dt.pixelStorei(Dt.UNPACK_FLIP_Y_WEBGL,e.flipY),Dt.pixelStorei(Dt.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),Dt.pixelStorei(Dt.UNPACK_ALIGNMENT,e.unpackAlignment);const x=Dt.getParameter(Dt.UNPACK_ROW_LENGTH),M=Dt.getParameter(Dt.UNPACK_IMAGE_HEIGHT),y=Dt.getParameter(Dt.UNPACK_SKIP_PIXELS),S=Dt.getParameter(Dt.UNPACK_SKIP_ROWS),E=Dt.getParameter(Dt.UNPACK_SKIP_IMAGES);Dt.pixelStorei(Dt.UNPACK_ROW_LENGTH,m.width),Dt.pixelStorei(Dt.UNPACK_IMAGE_HEIGHT,m.height),Dt.pixelStorei(Dt.UNPACK_SKIP_PIXELS,c),Dt.pixelStorei(Dt.UNPACK_SKIP_ROWS,h),Dt.pixelStorei(Dt.UNPACK_SKIP_IMAGES,u);const T=t.isDataArrayTexture||t.isData3DTexture,b=e.isDataArrayTexture||e.isData3DTexture;if(t.isDepthTexture){const n=ut.get(t),i=ut.get(e),m=ut.get(n.__renderTarget),g=ut.get(i.__renderTarget);ct.bindFramebuffer(Dt.READ_FRAMEBUFFER,m.__webglFramebuffer),ct.bindFramebuffer(Dt.DRAW_FRAMEBUFFER,g.__webglFramebuffer);for(let n=0;n<l;n++)T&&(Dt.framebufferTextureLayer(Dt.READ_FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,ut.get(t).__webglTexture,r,u+n),Dt.framebufferTextureLayer(Dt.DRAW_FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,ut.get(e).__webglTexture,a,f+n)),Dt.blitFramebuffer(c,h,s,o,d,p,s,o,Dt.DEPTH_BUFFER_BIT,Dt.NEAREST);ct.bindFramebuffer(Dt.READ_FRAMEBUFFER,null),ct.bindFramebuffer(Dt.DRAW_FRAMEBUFFER,null)}else if(0!==r||t.isRenderTargetTexture||ut.has(t)){const n=ut.get(t),i=ut.get(e);ct.bindFramebuffer(Dt.READ_FRAMEBUFFER,ee),ct.bindFramebuffer(Dt.DRAW_FRAMEBUFFER,ne);for(let t=0;t<l;t++)T?Dt.framebufferTextureLayer(Dt.READ_FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,n.__webglTexture,r,u+t):Dt.framebufferTexture2D(Dt.READ_FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,Dt.TEXTURE_2D,n.__webglTexture,r),b?Dt.framebufferTextureLayer(Dt.DRAW_FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,i.__webglTexture,a,f+t):Dt.framebufferTexture2D(Dt.DRAW_FRAMEBUFFER,Dt.COLOR_ATTACHMENT0,Dt.TEXTURE_2D,i.__webglTexture,a),0!==r?Dt.blitFramebuffer(c,h,s,o,d,p,s,o,Dt.COLOR_BUFFER_BIT,Dt.NEAREST):b?Dt.copyTexSubImage3D(v,a,d,p,f+t,c,h,s,o):Dt.copyTexSubImage2D(v,a,d,p,c,h,s,o);ct.bindFramebuffer(Dt.READ_FRAMEBUFFER,null),ct.bindFramebuffer(Dt.DRAW_FRAMEBUFFER,null)}else b?t.isDataTexture||t.isData3DTexture?Dt.texSubImage3D(v,a,d,p,f,s,o,l,g,_,m.data):e.isCompressedArrayTexture?Dt.compressedTexSubImage3D(v,a,d,p,f,s,o,l,g,m.data):Dt.texSubImage3D(v,a,d,p,f,s,o,l,g,_,m):t.isDataTexture?Dt.texSubImage2D(Dt.TEXTURE_2D,a,d,p,s,o,g,_,m.data):t.isCompressedTexture?Dt.compressedTexSubImage2D(Dt.TEXTURE_2D,a,d,p,m.width,m.height,g,m.data):Dt.texSubImage2D(Dt.TEXTURE_2D,a,d,p,s,o,g,_,m);Dt.pixelStorei(Dt.UNPACK_ROW_LENGTH,x),Dt.pixelStorei(Dt.UNPACK_IMAGE_HEIGHT,M),Dt.pixelStorei(Dt.UNPACK_SKIP_PIXELS,y),Dt.pixelStorei(Dt.UNPACK_SKIP_ROWS,S),Dt.pixelStorei(Dt.UNPACK_SKIP_IMAGES,E),0===a&&e.generateMipmaps&&Dt.generateMipmap(v),ct.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n=null,i=null,r=0){return _e('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(t,e,n,i,r)},this.initRenderTarget=function(t){void 0===ut.get(t).__webglFramebuffer&&dt.setupRenderTarget(t)},this.initTexture=function(t){t.isCubeTexture?dt.setTextureCube(t,0):t.isData3DTexture?dt.setTexture3D(t,0):t.isDataArrayTexture||t.isCompressedArrayTexture?dt.setTexture2DArray(t,0):dt.setTexture2D(t,0),ct.unbindTexture()},this.resetState=function(){S=0,E=0,T=null,ct.reset(),Ct.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return $t}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=ye._getDrawingBufferColorSpace(t),e.unpackColorSpace=ye._getUnpackColorSpace()}}const Ro={type:"change"},Co={type:"start"},Po={type:"end"},Do=new pn,Lo=new or,Uo=Math.cos(70*ce),Io=new Fe,No=2*Math.PI,Oo=-1,Fo=1e-6;class Bo extends Xr{constructor(t,e=null){super(t,e),this.state=Oo,this.target=new Fe,this.cursor=new Fe,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:0,MIDDLE:1,RIGHT:2},this.touches={ONE:0,TWO:2},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new Fe,this._lastQuaternion=new Oe,this._lastTargetPosition=new Fe,this._quat=(new Oe).setFromUnitVectors(t.up,new Fe(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new Wr,this._sphericalDelta=new Wr,this._scale=1,this._panOffset=new Fe,this._rotateStart=new he,this._rotateEnd=new he,this._rotateDelta=new he,this._panStart=new he,this._panEnd=new he,this._panDelta=new he,this._dollyStart=new he,this._dollyEnd=new he,this._dollyDelta=new he,this._dollyDirection=new Fe,this._mouse=new he,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=Ho.bind(this),this._onPointerDown=zo.bind(this),this._onPointerUp=Vo.bind(this),this._onContextMenu=Yo.bind(this),this._onMouseWheel=Wo.bind(this),this._onKeyDown=Xo.bind(this),this._onTouchStart=jo.bind(this),this._onTouchMove=qo.bind(this),this._onMouseDown=ko.bind(this),this._onMouseMove=Go.bind(this),this._interceptControlDown=Ko.bind(this),this._interceptControlUp=Zo.bind(this),null!==this.domElement&&this.connect(this.domElement),this.update()}connect(t){super.connect(t),this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){null!==this._domElementKeyEvents&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(Ro),this.update(),this.state=Oo}update(t=null){const e=this.object.position;Io.copy(e).sub(this.target),Io.applyQuaternion(this._quat),this._spherical.setFromVector3(Io),this.autoRotate&&this.state===Oo&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=No:n>Math.PI&&(n-=No),i<-Math.PI?i+=No:i>Math.PI&&(i-=No),this._spherical.theta=n<=i?Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),!0===this.enableDamping?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const t=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=t!=this._spherical.radius}if(Io.setFromSpherical(this._spherical),Io.applyQuaternion(this._quatInverse),e.copy(this.target).add(Io),this.object.lookAt(this.target),!0===this.enableDamping?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let t=null;if(this.object.isPerspectiveCamera){const e=Io.length();t=this._clampDistance(e*this._scale);const n=e-t;this.object.position.addScaledVector(this._dollyDirection,n),this.object.updateMatrixWorld(),r=!!n}else if(this.object.isOrthographicCamera){const e=new Fe(this._mouse.x,this._mouse.y,0);e.unproject(this.object);const n=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=n!==this.object.zoom;const i=new Fe(this._mouse.x,this._mouse.y,0);i.unproject(this.object),this.object.position.sub(i).add(e),this.object.updateMatrixWorld(),t=Io.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;null!==t&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(t).add(this.object.position):(Do.origin.copy(this.object.position),Do.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(Do.direction))<Uo?this.object.lookAt(this.target):(Lo.setFromNormalAndCoplanarPoint(this.object.up,this.target),Do.intersectPlane(Lo,this.target))))}else if(this.object.isOrthographicCamera){const t=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),t!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,!!(r||this._lastPosition.distanceToSquared(this.object.position)>Fo||8*(1-this._lastQuaternion.dot(this.object.quaternion))>Fo||this._lastTargetPosition.distanceToSquared(this.target)>Fo)&&(this.dispatchEvent(Ro),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0)}_getAutoRotationAngle(t){return null!==t?No/60*this.autoRotateSpeed*t:No/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(.01*t);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){Io.setFromMatrixColumn(e,0),Io.multiplyScalar(-t),this._panOffset.add(Io)}_panUp(t,e){!0===this.screenSpacePanning?Io.setFromMatrixColumn(e,1):(Io.setFromMatrixColumn(e,0),Io.crossVectors(this.object.up,Io)),Io.multiplyScalar(t),this._panOffset.add(Io)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;Io.copy(i).sub(this.target);let r=Io.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*r/n.clientHeight,this.object.matrix),this._panUp(2*e*r/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=t-n.left,r=e-n.top,a=n.width,s=n.height;this._mouse.x=i/a*2-1,this._mouse.y=-r/s*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(No*this._rotateDelta.x/e.clientHeight),this._rotateUp(No*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(No*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(-No*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(No*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(-No*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(1===this._pointers.length)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(t){if(1===this._pointers.length)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panStart.set(n,i)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,r=Math.sqrt(n*n+i*i);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(1==this._pointers.length)this._rotateEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._rotateEnd.set(n,i)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(No*this._rotateDelta.x/e.clientHeight),this._rotateUp(No*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(1===this._pointers.length)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,i=t.pageY-e.y,r=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const a=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._updateZoomParameters(a,s)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return void this._pointers.splice(e,1)}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];void 0===e&&(e=new he,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function zo(t){!1!==this.enabled&&(0===this._pointers.length&&(this.domElement.setPointerCapture(t.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),this._isTrackingPointer(t)||(this._addPointer(t),"touch"===t.pointerType?this._onTouchStart(t):this._onMouseDown(t)))}function Ho(t){!1!==this.enabled&&("touch"===t.pointerType?this._onTouchMove(t):this._onMouseMove(t))}function Vo(t){switch(this._removePointer(t),this._pointers.length){case 0:this.domElement.releasePointerCapture(t.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(Po),this.state=Oo;break;case 1:const e=this._pointers[0],n=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:n.x,pageY:n.y})}}function ko(t){let e;switch(t.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case 1:if(!1===this.enableZoom)return;this._handleMouseDownDolly(t),this.state=1;break;case 0:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===this.enablePan)return;this._handleMouseDownPan(t),this.state=2}else{if(!1===this.enableRotate)return;this._handleMouseDownRotate(t),this.state=0}break;case 2:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===this.enableRotate)return;this._handleMouseDownRotate(t),this.state=0}else{if(!1===this.enablePan)return;this._handleMouseDownPan(t),this.state=2}break;default:this.state=Oo}this.state!==Oo&&this.dispatchEvent(Co)}function Go(t){switch(this.state){case 0:if(!1===this.enableRotate)return;this._handleMouseMoveRotate(t);break;case 1:if(!1===this.enableZoom)return;this._handleMouseMoveDolly(t);break;case 2:if(!1===this.enablePan)return;this._handleMouseMovePan(t)}}function Wo(t){!1!==this.enabled&&!1!==this.enableZoom&&this.state===Oo&&(t.preventDefault(),this.dispatchEvent(Co),this._handleMouseWheel(this._customWheelEvent(t)),this.dispatchEvent(Po))}function Xo(t){!1!==this.enabled&&this._handleKeyDown(t)}function jo(t){switch(this._trackPointer(t),this._pointers.length){case 1:switch(this.touches.ONE){case 0:if(!1===this.enableRotate)return;this._handleTouchStartRotate(t),this.state=3;break;case 1:if(!1===this.enablePan)return;this._handleTouchStartPan(t),this.state=4;break;default:this.state=Oo}break;case 2:switch(this.touches.TWO){case 2:if(!1===this.enableZoom&&!1===this.enablePan)return;this._handleTouchStartDollyPan(t),this.state=5;break;case 3:if(!1===this.enableZoom&&!1===this.enableRotate)return;this._handleTouchStartDollyRotate(t),this.state=6;break;default:this.state=Oo}break;default:this.state=Oo}this.state!==Oo&&this.dispatchEvent(Co)}function qo(t){switch(this._trackPointer(t),this.state){case 3:if(!1===this.enableRotate)return;this._handleTouchMoveRotate(t),this.update();break;case 4:if(!1===this.enablePan)return;this._handleTouchMovePan(t),this.update();break;case 5:if(!1===this.enableZoom&&!1===this.enablePan)return;this._handleTouchMoveDollyPan(t),this.update();break;case 6:if(!1===this.enableZoom&&!1===this.enableRotate)return;this._handleTouchMoveDollyRotate(t),this.update();break;default:this.state=Oo}}function Yo(t){!1!==this.enabled&&t.preventDefault()}function Ko(t){"Control"===t.key&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function Zo(t){"Control"===t.key&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}(()=>{const t=new ir;t.background=new si("black");const e=new Ao;e.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(e.domElement);const{camera:n,controls:i}=(t=>{const e=new Ki(45,2,.1,100);e.position.set(0,10,20);const n=new Bo(e,t);return n.target.set(0,5,0),n.update(),{camera:e,controls:n}})(e.domElement);{const e=40,n=(new Lr).load("https://threejs.org/manual/examples/resources/images/checker.png");n.wrapS=U,n.wrapT=U,n.magFilter=O,n.colorSpace=Bt;const i=e/2;n.repeat.set(i,i);const r=new dr(e,e),a=new fr({map:n,side:2}),s=new Fi(r,a);s.rotation.x=-.5*Math.PI,t.add(s)}{const e=4,n=new zi(e,e,e),i=new fr({color:"#8AC"}),r=new Fi(n,i);r.position.set(e+1,e/2,0),t.add(r)}{const e=3,n=new pr(e,32,16),i=new fr({color:"#CA8"}),r=new Fi(n,i);r.position.set(-e-1,e+2,0),t.add(r)}{const e=new Nr(16777215,1);t.add(e)}requestAnimationFrame((function i(){if((t=>{const e=t.domElement,n=e.clientWidth,i=e.clientHeight,r=e.width!==n||e.height!==i;return r&&t.setSize(n,i,!1),r})(e)){const t=e.domElement;n.aspect=t.clientWidth/t.clientHeight,n.updateProjectionMatrix()}e.render(t,n),requestAnimationFrame(i)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BS25nREMsR0FBVUMsS0FBS0MsR0FBSyxJQUNwQkMsR0FBVSxJQUFNRixLQUFLQyxHQVEzQixTQUFTRSxL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bnhDLElBQUkyckYsRUFDZCxDQW9CQWpnQyx1QkFUQSxTQUFTL1osSUFDTCxHQVhnQyxDQUFDNUUsSUFDakMsTUFBTS9qQyxFQUFTK2pDLEVBQVN5ZCxXQUNsQnByRCxFQUFRNEosRUFBT2lsSCxZQUNmNXVILEVBQVMySixFQUFPZ2xILGFBQ2hCZ0UsRUFBYWhwSCxFQUFPNUosUUFBVUEsR0FBUzRKLEVBQU8zSixTQUFXQSxFQUkvRCxPQUhJMnlILEdBQ0FqbEYsRUFBUzc0QixRQUFROVUsRUFBT0MsR0FBUSxHQUU3QjJ5SCxDQUFVLEVBR2JDLENBQTRCbGxGLEdBQVcsQ0FDdkMsTUFBTS9qQyxFQUFTK2pDLEVBQVN5ZCxXQUN4Qnp2QyxFQUFPNnpCLE9BQVM1bEMsRUFBT2lsSCxZQUFjamxILEVBQU9nbEgsYUFDNUNqekcsRUFBT28wQix3QkFDWCxDQUNBcEMsRUFBUzRFLE9BQU9SLEVBQU9wMkIsR0FDdkIyd0Msc0JBQXNCL1osRUFDMUIsR0FDNkIsRUFFakN1Z0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3JtYWwtZGljZS1ydW5uZXIvLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUuY29yZS5qcyIsIndlYnBhY2s6Ly9ub3JtYWwtZGljZS1ydW5uZXIvLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzIiwid2VicGFjazovL25vcm1hbC1kaWNlLXJ1bm5lci8uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qcyIsIndlYnBhY2s6Ly9ub3JtYWwtZGljZS1ydW5uZXIvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbm9ybWFsLWRpY2UtcnVubmVyLy4vc3JjL3RocmVlL2NhbWVyYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDI1IFRocmVlLmpzIEF1dGhvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbiAqL1xuY29uc3QgUkVWSVNJT04gPSAnMTc1JztcblxuLyoqXG4gKiBSZXByZXNlbnRzIG1vdXNlIGJ1dHRvbnMgYW5kIGludGVyYWN0aW9uIHR5cGVzIGluIGNvbnRleHQgb2YgY29udHJvbHMuXG4gKlxuICogQHR5cGUge0NvbnN0YW50c01vdXNlfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE1PVVNFID0geyBMRUZUOiAwLCBNSURETEU6IDEsIFJJR0hUOiAyLCBST1RBVEU6IDAsIERPTExZOiAxLCBQQU46IDIgfTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRvdWNoIGludGVyYWN0aW9uIHR5cGVzIGluIGNvbnRleHQgb2YgY29udHJvbHMuXG4gKlxuICogQHR5cGUge0NvbnN0YW50c1RvdWNofVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFRPVUNIID0geyBST1RBVEU6IDAsIFBBTjogMSwgRE9MTFlfUEFOOiAyLCBET0xMWV9ST1RBVEU6IDMgfTtcblxuLyoqXG4gKiBEaXNhYmxlcyBmYWNlIGN1bGxpbmcuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDdWxsRmFjZU5vbmUgPSAwO1xuXG4vKipcbiAqIEN1bGxzIGJhY2sgZmFjZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDdWxsRmFjZUJhY2sgPSAxO1xuXG4vKipcbiAqIEN1bGxzIGZyb250IGZhY2VzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQ3VsbEZhY2VGcm9udCA9IDI7XG5cbi8qKlxuICogQ3VsbHMgYm90aCBmcm9udCBhbmQgYmFjayBmYWNlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEN1bGxGYWNlRnJvbnRCYWNrID0gMztcblxuLyoqXG4gKiBHaXZlcyB1bmZpbHRlcmVkIHNoYWRvdyBtYXBzIC0gZmFzdGVzdCwgYnV0IGxvd2VzdCBxdWFsaXR5LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQmFzaWNTaGFkb3dNYXAgPSAwO1xuXG4vKipcbiAqIEZpbHRlcnMgc2hhZG93IG1hcHMgdXNpbmcgdGhlIFBlcmNlbnRhZ2UtQ2xvc2VyIEZpbHRlcmluZyAoUENGKSBhbGdvcml0aG0uXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBQQ0ZTaGFkb3dNYXAgPSAxO1xuXG4vKipcbiAqIEZpbHRlcnMgc2hhZG93IG1hcHMgdXNpbmcgdGhlIFBlcmNlbnRhZ2UtQ2xvc2VyIEZpbHRlcmluZyAoUENGKSBhbGdvcml0aG0gd2l0aFxuICogYmV0dGVyIHNvZnQgc2hhZG93cyBlc3BlY2lhbGx5IHdoZW4gdXNpbmcgbG93LXJlc29sdXRpb24gc2hhZG93IG1hcHMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBQQ0ZTb2Z0U2hhZG93TWFwID0gMjtcblxuLyoqXG4gKiBGaWx0ZXJzIHNoYWRvdyBtYXBzIHVzaW5nIHRoZSBWYXJpYW5jZSBTaGFkb3cgTWFwIChWU00pIGFsZ29yaXRobS5cbiAqIFdoZW4gdXNpbmcgVlNNU2hhZG93TWFwIGFsbCBzaGFkb3cgcmVjZWl2ZXJzIHdpbGwgYWxzbyBjYXN0IHNoYWRvd3MuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBWU01TaGFkb3dNYXAgPSAzO1xuXG4vKipcbiAqIE9ubHkgZnJvbnQgZmFjZXMgYXJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgRnJvbnRTaWRlID0gMDtcblxuLyoqXG4gKiBPbmx5IGJhY2sgZmFjZXMgYXJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQmFja1NpZGUgPSAxO1xuXG4vKipcbiAqIEJvdGggZnJvbnQgYW5kIGJhY2sgZmFjZXMgYXJlIHJlbmRlcmVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgRG91YmxlU2lkZSA9IDI7XG5cbi8qKlxuICogTm8gYmxlbmRpbmcgaXMgcGVyZm9ybWVkIHdoaWNoIGVmZmVjdGl2ZWx5IGRpc2FibGVzXG4gKiBhbHBoYSB0cmFuc3BhcmVuY3kuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOb0JsZW5kaW5nID0gMDtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBibGVuZGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE5vcm1hbEJsZW5kaW5nID0gMTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFkZGl0aXZlIGJsZW5kaW5nLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQWRkaXRpdmVCbGVuZGluZyA9IDI7XG5cbi8qKlxuICogUmVwcmVzZW50cyBzdWJ0cmFjdGl2ZSBibGVuZGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFN1YnRyYWN0aXZlQmxlbmRpbmcgPSAzO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgbXVsdGlwbHkgYmxlbmRpbmcuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBNdWx0aXBseUJsZW5kaW5nID0gNDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGN1c3RvbSBibGVuZGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEN1c3RvbUJsZW5kaW5nID0gNTtcblxuLyoqXG4gKiBBIGBzb3VyY2UgKyBkZXN0aW5hdGlvbmAgYmxlbmRpbmcgZXF1YXRpb24uXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBBZGRFcXVhdGlvbiA9IDEwMDtcblxuLyoqXG4gKiBBIGBzb3VyY2UgLSBkZXN0aW5hdGlvbmAgYmxlbmRpbmcgZXF1YXRpb24uXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBTdWJ0cmFjdEVxdWF0aW9uID0gMTAxO1xuXG4vKipcbiAqIEEgYGRlc3RpbmF0aW9uIC0gc291cmNlYCBibGVuZGluZyBlcXVhdGlvbi5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uID0gMTAyO1xuXG4vKipcbiAqIEEgYmxlbmQgZXF1YXRpb24gdGhhdCB1c2VzIHRoZSBtaW5pbXVtIG9mIHNvdXJjZSBhbmQgZGVzdGluYXRpb24uXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBNaW5FcXVhdGlvbiA9IDEwMztcblxuLyoqXG4gKiBBIGJsZW5kIGVxdWF0aW9uIHRoYXQgdXNlcyB0aGUgbWF4aW11bSBvZiBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTWF4RXF1YXRpb24gPSAxMDQ7XG5cbi8qKlxuICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IGAwYC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFplcm9GYWN0b3IgPSAyMDA7XG5cbi8qKlxuICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IGAxYC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE9uZUZhY3RvciA9IDIwMTtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgdGhlIHNvdXJjZSBjb2xvcnMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBTcmNDb2xvckZhY3RvciA9IDIwMjtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgYDFgIG1pbnVzIGVhY2ggc291cmNlIGNvbG9yLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgT25lTWludXNTcmNDb2xvckZhY3RvciA9IDIwMztcblxuLyoqXG4gKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgdGhlIHNvdXJjZSBhbHBoYSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFNyY0FscGhhRmFjdG9yID0gMjA0O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSAxIG1pbnVzIHRoZSBzb3VyY2UgYWxwaGEgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSB0aGUgZGVzdGluYXRpb24gYWxwaGEgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBEc3RBbHBoYUZhY3RvciA9IDIwNjtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgYDFgIG1pbnVzIHRoZSBkZXN0aW5hdGlvbiBhbHBoYSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgPSAyMDc7XG5cbi8qKlxuICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IHRoZSBkZXN0aW5hdGlvbiBjb2xvci5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IERzdENvbG9yRmFjdG9yID0gMjA4O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBgMWAgbWludXMgZWFjaCBkZXN0aW5hdGlvbiBjb2xvci5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgPSAyMDk7XG5cbi8qKlxuICogTXVsdGlwbGllcyB0aGUgUkdCIGNvbG9ycyBieSB0aGUgc21hbGxlciBvZiBlaXRoZXIgdGhlIHNvdXJjZSBhbHBoYVxuICogdmFsdWUgb3IgdGhlIHZhbHVlIG9mIGAxYCBtaW51cyB0aGUgZGVzdGluYXRpb24gYWxwaGEgdmFsdWUuIFRoZSBhbHBoYVxuICogdmFsdWUgaXMgbXVsdGlwbGllZCBieSBgMWAuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gMjEwO1xuXG4vKipcbiAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSBhIGNvbnN0YW50IGNvbG9yLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQ29uc3RhbnRDb2xvckZhY3RvciA9IDIxMTtcblxuLyoqXG4gKiBNdWx0aXBsaWVzIGFsbCBjb2xvcnMgYnkgYDFgIG1pbnVzIGEgY29uc3RhbnQgY29sb3IuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IgPSAyMTI7XG5cbi8qKlxuICogTXVsdGlwbGllcyBhbGwgY29sb3JzIGJ5IGEgY29uc3RhbnQgYWxwaGEgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDb25zdGFudEFscGhhRmFjdG9yID0gMjEzO1xuXG4vKipcbiAqIE11bHRpcGxpZXMgYWxsIGNvbG9ycyBieSAxIG1pbnVzIGEgY29uc3RhbnQgYWxwaGEgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IgPSAyMTQ7XG5cbi8qKlxuICogTmV2ZXIgcGFzcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE5ldmVyRGVwdGggPSAwO1xuXG4vKipcbiAqIEFsd2F5cyBwYXNzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQWx3YXlzRGVwdGggPSAxO1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgZGVwdGggYnVmZmVyIHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTGVzc0RlcHRoID0gMjtcblxuLyoqXG4gKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGRlcHRoIGJ1ZmZlciB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IExlc3NFcXVhbERlcHRoID0gMztcblxuLyoqXG4gKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBlcXVhbHMgdGhlIGRlcHRoIGJ1ZmZlciB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEVxdWFsRGVwdGggPSA0O1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZGVwdGggYnVmZmVyIHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgR3JlYXRlckVxdWFsRGVwdGggPSA1O1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZGVwdGggYnVmZmVyIHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgR3JlYXRlckRlcHRoID0gNjtcblxuLyoqXG4gKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBpcyBub3QgZXF1YWwgdG8gdGhlIGRlcHRoIGJ1ZmZlciB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE5vdEVxdWFsRGVwdGggPSA3O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgdGhlIGVudmlyb25tZW50IG1hcCBjb2xvciB3aXRoIHRoZSBzdXJmYWNlIGNvbG9yLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTXVsdGlwbHlPcGVyYXRpb24gPSAwO1xuXG4vKipcbiAqIFVzZXMgcmVmbGVjdGl2aXR5IHRvIGJsZW5kIGJldHdlZW4gdGhlIHR3byBjb2xvcnMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBNaXhPcGVyYXRpb24gPSAxO1xuXG4vKipcbiAqIEFkZHMgdGhlIHR3byBjb2xvcnMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBBZGRPcGVyYXRpb24gPSAyO1xuXG4vKipcbiAqIE5vIHRvbmUgbWFwcGluZyBpcyBhcHBsaWVkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTm9Ub25lTWFwcGluZyA9IDA7XG5cbi8qKlxuICogTGluZWFyIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IExpbmVhclRvbmVNYXBwaW5nID0gMTtcblxuLyoqXG4gKiBSZWluaGFyZCB0b25lIG1hcHBpbmcuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSZWluaGFyZFRvbmVNYXBwaW5nID0gMjtcblxuLyoqXG4gKiBDaW5lb24gdG9uZSBtYXBwaW5nLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQ2luZW9uVG9uZU1hcHBpbmcgPSAzO1xuXG4vKipcbiAqIEFDRVMgRmlsbWljIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEFDRVNGaWxtaWNUb25lTWFwcGluZyA9IDQ7XG5cbi8qKlxuICogQ3VzdG9tIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBFeHBlY3RzIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uIGJ5IG1vZGlmeWluZyBzaGFkZXIgY29kZSBvZiB0aGUgbWF0ZXJpYWwncyBmcmFnbWVudCBzaGFkZXIuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDdXN0b21Ub25lTWFwcGluZyA9IDU7XG5cbi8qKlxuICogQWdYIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEFnWFRvbmVNYXBwaW5nID0gNjtcblxuLyoqXG4gKiBOZXV0cmFsIHRvbmUgbWFwcGluZy5cbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiB0aGUgS2hyb25vcyAzRCBDb21tZXJjZSBHcm91cCBzdGFuZGFyZCB0b25lIG1hcHBpbmcuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOZXV0cmFsVG9uZU1hcHBpbmcgPSA3O1xuXG4vKipcbiAqIFRoZSBza2lubmVkIG1lc2ggc2hhcmVzIHRoZSBzYW1lIHdvcmxkIHNwYWNlIGFzIHRoZSBza2VsZXRvbi5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEF0dGFjaGVkQmluZE1vZGUgPSAnYXR0YWNoZWQnO1xuXG4vKipcbiAqIFRoZSBza2lubmVkIG1lc2ggZG9lcyBub3Qgc2hhcmUgdGhlIHNhbWUgd29ybGQgc3BhY2UgYXMgdGhlIHNrZWxldG9uLlxuICogVGhpcyBpcyB1c2VmdWwgd2hlbiBhIHNrZWxldG9uIGlzIHNoYXJlZCBhY3Jvc3MgbXVsdGlwbGUgc2tpbm5lZCBtZXNoZXMuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBEZXRhY2hlZEJpbmRNb2RlID0gJ2RldGFjaGVkJztcblxuLyoqXG4gKiBNYXBzIHRleHR1cmVzIHVzaW5nIHRoZSBnZW9tZXRyeSdzIFVWIGNvb3JkaW5hdGVzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgVVZNYXBwaW5nID0gMzAwO1xuXG4vKipcbiAqIFJlZmxlY3Rpb24gbWFwcGluZyBmb3IgY3ViZSB0ZXh0dXJlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEN1YmVSZWZsZWN0aW9uTWFwcGluZyA9IDMwMTtcblxuLyoqXG4gKiBSZWZyYWN0aW9uIG1hcHBpbmcgZm9yIGN1YmUgdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgPSAzMDI7XG5cbi8qKlxuICogUmVmbGVjdGlvbiBtYXBwaW5nIGZvciBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMztcblxuLyoqXG4gKiBSZWZyYWN0aW9uIG1hcHBpbmcgZm9yIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nID0gMzA0O1xuXG4vKipcbiAqIFJlZmxlY3Rpb24gbWFwcGluZyBmb3IgUE1SRU0gdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IDMwNjtcblxuLyoqXG4gKiBUaGUgdGV4dHVyZSB3aWxsIHNpbXBseSByZXBlYXQgdG8gaW5maW5pdHkuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSZXBlYXRXcmFwcGluZyA9IDEwMDA7XG5cbi8qKlxuICogVGhlIGxhc3QgcGl4ZWwgb2YgdGhlIHRleHR1cmUgc3RyZXRjaGVzIHRvIHRoZSBlZGdlIG9mIHRoZSBtZXNoLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQ2xhbXBUb0VkZ2VXcmFwcGluZyA9IDEwMDE7XG5cbi8qKlxuICogVGhlIHRleHR1cmUgd2lsbCByZXBlYXRzIHRvIGluZmluaXR5LCBtaXJyb3Jpbmcgb24gZWFjaCByZXBlYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nID0gMTAwMjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgdGV4dHVyZSBlbGVtZW50IHRoYXQgaXMgbmVhcmVzdCAoaW4gTWFuaGF0dGFuIGRpc3RhbmNlKVxuICogdG8gdGhlIHNwZWNpZmllZCB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTmVhcmVzdEZpbHRlciA9IDEwMDM7XG5cbi8qKlxuICogQ2hvb3NlcyB0aGUgbWlwbWFwIHRoYXQgbW9zdCBjbG9zZWx5IG1hdGNoZXMgdGhlIHNpemUgb2YgdGhlIHBpeGVsIGJlaW5nIHRleHR1cmVkXG4gKiBhbmQgdXNlcyB0aGUgYE5lYXJlc3RGaWx0ZXJgIGNyaXRlcmlvbiAodGhlIHRleGVsIG5lYXJlc3QgdG8gdGhlIGNlbnRlciBvZiB0aGUgcGl4ZWwpXG4gKiB0byBwcm9kdWNlIGEgdGV4dHVyZSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbmNvbnN0IE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDsgLy8gbGVnYWN5XG5cbi8qKlxuICogQ2hvb3NlcyB0aGUgdHdvIG1pcG1hcHMgdGhhdCBtb3N0IGNsb3NlbHkgbWF0Y2ggdGhlIHNpemUgb2YgdGhlIHBpeGVsIGJlaW5nIHRleHR1cmVkIGFuZFxuICogdXNlcyB0aGUgYE5lYXJlc3RGaWx0ZXJgIGNyaXRlcmlvbiB0byBwcm9kdWNlIGEgdGV4dHVyZSB2YWx1ZSBmcm9tIGVhY2ggbWlwbWFwLlxuICogVGhlIGZpbmFsIHRleHR1cmUgdmFsdWUgaXMgYSB3ZWlnaHRlZCBhdmVyYWdlIG9mIHRob3NlIHR3byB2YWx1ZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbmNvbnN0IE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA1OyAvLyBsZWdhY3lcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB3ZWlnaHRlZCBhdmVyYWdlIG9mIHRoZSBmb3VyIHRleHR1cmUgZWxlbWVudHMgdGhhdCBhcmUgY2xvc2VzdCB0byB0aGUgc3BlY2lmaWVkXG4gKiB0ZXh0dXJlIGNvb3JkaW5hdGVzLCBhbmQgY2FuIGluY2x1ZGUgaXRlbXMgd3JhcHBlZCBvciByZXBlYXRlZCBmcm9tIG90aGVyIHBhcnRzIG9mIGEgdGV4dHVyZSxcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsdWVzIG9mIGB3cmFwU2AgYW5kIGB3cmFwVGAsIGFuZCBvbiB0aGUgZXhhY3QgbWFwcGluZy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IExpbmVhckZpbHRlciA9IDEwMDY7XG5cbi8qKlxuICogQ2hvb3NlcyB0aGUgbWlwbWFwIHRoYXQgbW9zdCBjbG9zZWx5IG1hdGNoZXMgdGhlIHNpemUgb2YgdGhlIHBpeGVsIGJlaW5nIHRleHR1cmVkIGFuZCB1c2VzXG4gKiB0aGUgYExpbmVhckZpbHRlcmAgY3JpdGVyaW9uIChhIHdlaWdodGVkIGF2ZXJhZ2Ugb2YgdGhlIGZvdXIgdGV4ZWxzIHRoYXQgYXJlIGNsb3Nlc3QgdG8gdGhlXG4gKiBjZW50ZXIgb2YgdGhlIHBpeGVsKSB0byBwcm9kdWNlIGEgdGV4dHVyZSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xuY29uc3QgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7IC8vIGxlZ2FjeVxuXG4vKipcbiAqIENob29zZXMgdGhlIHR3byBtaXBtYXBzIHRoYXQgbW9zdCBjbG9zZWx5IG1hdGNoIHRoZSBzaXplIG9mIHRoZSBwaXhlbCBiZWluZyB0ZXh0dXJlZCBhbmQgdXNlc1xuICogdGhlIGBMaW5lYXJGaWx0ZXJgIGNyaXRlcmlvbiB0byBwcm9kdWNlIGEgdGV4dHVyZSB2YWx1ZSBmcm9tIGVhY2ggbWlwbWFwLiBUaGUgZmluYWwgdGV4dHVyZSB2YWx1ZVxuICogaXMgYSB3ZWlnaHRlZCBhdmVyYWdlIG9mIHRob3NlIHR3byB2YWx1ZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xuY29uc3QgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyID0gMTAwODsgLy8gbGVnYWN5XG5cbi8qKlxuICogQW4gdW5zaWduZWQgYnl0ZSBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7XG5cbi8qKlxuICogQSBieXRlIGRhdGEgdHlwZSBmb3IgdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBCeXRlVHlwZSA9IDEwMTA7XG5cbi8qKlxuICogQSBzaG9ydCBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgU2hvcnRUeXBlID0gMTAxMTtcblxuLyoqXG4gKiBBbiB1bnNpZ25lZCBzaG9ydCBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyO1xuXG4vKipcbiAqIEFuIGludCBkYXRhIHR5cGUgZm9yIHRleHR1cmVzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgSW50VHlwZSA9IDEwMTM7XG5cbi8qKlxuICogQW4gdW5zaWduZWQgaW50IGRhdGEgdHlwZSBmb3IgdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xuXG4vKipcbiAqIEEgZmxvYXQgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEZsb2F0VHlwZSA9IDEwMTU7XG5cbi8qKlxuICogQSBoYWxmIGZsb2F0IGRhdGEgdHlwZSBmb3IgdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBIYWxmRmxvYXRUeXBlID0gMTAxNjtcblxuLyoqXG4gKiBBbiB1bnNpZ25lZCBzaG9ydCA0XzRfNF80IChwYWNrZWQpIGRhdGEgdHlwZSBmb3IgdGV4dHVyZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgPSAxMDE3O1xuXG4vKipcbiAqIEFuIHVuc2lnbmVkIHNob3J0IDVfNV81XzEgKHBhY2tlZCkgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7XG5cbi8qKlxuICogQW4gdW5zaWduZWQgaW50IDI0XzggZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFVuc2lnbmVkSW50MjQ4VHlwZSA9IDEwMjA7XG5cbi8qKlxuICogQW4gdW5zaWduZWQgaW50IDVfOV85XzkgKHBhY2tlZCkgZGF0YSB0eXBlIGZvciB0ZXh0dXJlcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFVuc2lnbmVkSW50NTk5OVR5cGUgPSAzNTkwMjtcblxuLyoqXG4gKiBEaXNjYXJkcyB0aGUgcmVkLCBncmVlbiBhbmQgYmx1ZSBjb21wb25lbnRzIGFuZCByZWFkcyBqdXN0IHRoZSBhbHBoYSBjb21wb25lbnQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBBbHBoYUZvcm1hdCA9IDEwMjE7XG5cbi8qKlxuICogRGlzY2FyZHMgdGhlIGFscGhhIGNvbXBvbmVudCBhbmQgcmVhZHMgdGhlIHJlZCwgZ3JlZW4gYW5kIGJsdWUgY29tcG9uZW50LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCRm9ybWF0ID0gMTAyMjtcblxuLyoqXG4gKiBSZWFkcyB0aGUgcmVkLCBncmVlbiwgYmx1ZSBhbmQgYWxwaGEgY29tcG9uZW50cy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHQkFGb3JtYXQgPSAxMDIzO1xuXG4vKipcbiAqIHJlYWRzIGVhY2ggZWxlbWVudCBhcyBhIHNpbmdsZSBsdW1pbmFuY2UgY29tcG9uZW50LiBUaGlzIGlzIHRoZW4gY29udmVydGVkIHRvIGEgZmxvYXRpbmcgcG9pbnQsXG4gKiBjbGFtcGVkIHRvIHRoZSByYW5nZSBgWzAsMV1gLCBhbmQgdGhlbiBhc3NlbWJsZWQgaW50byBhbiBSR0JBIGVsZW1lbnQgYnkgcGxhY2luZyB0aGUgbHVtaW5hbmNlIHZhbHVlXG4gKiBpbiB0aGUgcmVkLCBncmVlbiBhbmQgYmx1ZSBjaGFubmVscywgYW5kIGF0dGFjaGluZyAxLjAgdG8gdGhlIGFscGhhIGNoYW5uZWwuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBMdW1pbmFuY2VGb3JtYXQgPSAxMDI0O1xuXG4vKipcbiAqIFJlYWRzIGVhY2ggZWxlbWVudCBhcyBhIGx1bWluYW5jZS9hbHBoYSBkb3VibGUuIFRoZSBzYW1lIHByb2Nlc3Mgb2NjdXJzIGFzIGZvciB0aGUgYEx1bWluYW5jZUZvcm1hdGAsXG4gKiBleGNlcHQgdGhhdCB0aGUgYWxwaGEgY2hhbm5lbCBtYXkgaGF2ZSB2YWx1ZXMgb3RoZXIgdGhhbiBgMS4wYC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcblxuLyoqXG4gKiBSZWFkcyBlYWNoIGVsZW1lbnQgYXMgYSBzaW5nbGUgZGVwdGggdmFsdWUsIGNvbnZlcnRzIGl0IHRvIGZsb2F0aW5nIHBvaW50LCBhbmQgY2xhbXBzIHRvIHRoZSByYW5nZSBgWzAsMV1gLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgRGVwdGhGb3JtYXQgPSAxMDI2O1xuXG4vKipcbiAqIFJlYWRzIGVhY2ggZWxlbWVudCBpcyBhIHBhaXIgb2YgZGVwdGggYW5kIHN0ZW5jaWwgdmFsdWVzLiBUaGUgZGVwdGggY29tcG9uZW50IG9mIHRoZSBwYWlyIGlzIGludGVycHJldGVkIGFzXG4gKiBpbiBgRGVwdGhGb3JtYXRgLiBUaGUgc3RlbmNpbCBjb21wb25lbnQgaXMgaW50ZXJwcmV0ZWQgYmFzZWQgb24gdGhlIGRlcHRoICsgc3RlbmNpbCBpbnRlcm5hbCBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBEZXB0aFN0ZW5jaWxGb3JtYXQgPSAxMDI3O1xuXG4vKipcbiAqIERpc2NhcmRzIHRoZSBncmVlbiwgYmx1ZSBhbmQgYWxwaGEgY29tcG9uZW50cyBhbmQgcmVhZHMganVzdCB0aGUgcmVkIGNvbXBvbmVudC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJlZEZvcm1hdCA9IDEwMjg7XG5cbi8qKlxuICogRGlzY2FyZHMgdGhlIGdyZWVuLCBibHVlIGFuZCBhbHBoYSBjb21wb25lbnRzIGFuZCByZWFkcyBqdXN0IHRoZSByZWQgY29tcG9uZW50LiBUaGUgdGV4ZWxzIGFyZSByZWFkIGFzIGludGVnZXJzIGluc3RlYWQgb2YgZmxvYXRpbmcgcG9pbnQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSZWRJbnRlZ2VyRm9ybWF0ID0gMTAyOTtcblxuLyoqXG4gKiBEaXNjYXJkcyB0aGUgYWxwaGEsIGFuZCBibHVlIGNvbXBvbmVudHMgYW5kIHJlYWRzIHRoZSByZWQsIGFuZCBncmVlbiBjb21wb25lbnRzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdGb3JtYXQgPSAxMDMwO1xuXG4vKipcbiAqIERpc2NhcmRzIHRoZSBhbHBoYSwgYW5kIGJsdWUgY29tcG9uZW50cyBhbmQgcmVhZHMgdGhlIHJlZCwgYW5kIGdyZWVuIGNvbXBvbmVudHMuIFRoZSB0ZXhlbHMgYXJlIHJlYWQgYXMgaW50ZWdlcnMgaW5zdGVhZCBvZiBmbG9hdGluZyBwb2ludC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHSW50ZWdlckZvcm1hdCA9IDEwMzE7XG5cbi8qKlxuICogRGlzY2FyZHMgdGhlIGFscGhhIGNvbXBvbmVudCBhbmQgcmVhZHMgdGhlIHJlZCwgZ3JlZW4gYW5kIGJsdWUgY29tcG9uZW50LiBUaGUgdGV4ZWxzIGFyZSByZWFkIGFzIGludGVnZXJzIGluc3RlYWQgb2YgZmxvYXRpbmcgcG9pbnQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JJbnRlZ2VyRm9ybWF0ID0gMTAzMjtcblxuLyoqXG4gKiBSZWFkcyB0aGUgcmVkLCBncmVlbiwgYmx1ZSBhbmQgYWxwaGEgY29tcG9uZW50cy4gVGhlIHRleGVscyBhcmUgcmVhZCBhcyBpbnRlZ2VycyBpbnN0ZWFkIG9mIGZsb2F0aW5nIHBvaW50LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQUludGVnZXJGb3JtYXQgPSAxMDMzO1xuXG4vKipcbiAqIEEgRFhUMS1jb21wcmVzc2VkIGltYWdlIGluIGFuIFJHQiBpbWFnZSBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc2O1xuXG4vKipcbiAqIEEgRFhUMS1jb21wcmVzc2VkIGltYWdlIGluIGFuIFJHQiBpbWFnZSBmb3JtYXQgd2l0aCBhIHNpbXBsZSBvbi9vZmYgYWxwaGEgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgPSAzMzc3NztcblxuLyoqXG4gKiBBIERYVDMtY29tcHJlc3NlZCBpbWFnZSBpbiBhbiBSR0JBIGltYWdlIGZvcm1hdC4gQ29tcGFyZWQgdG8gYSAzMi1iaXQgUkdCQSB0ZXh0dXJlLCBpdCBvZmZlcnMgNDoxIGNvbXByZXNzaW9uLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gMzM3Nzg7XG5cbi8qKlxuICogQSBEWFQ1LWNvbXByZXNzZWQgaW1hZ2UgaW4gYW4gUkdCQSBpbWFnZSBmb3JtYXQuIEl0IGFsc28gcHJvdmlkZXMgYSA0OjEgY29tcHJlc3Npb24sIGJ1dCBkaWZmZXJzIHRvIHRoZSBEWFQzXG4gKiBjb21wcmVzc2lvbiBpbiBob3cgdGhlIGFscGhhIGNvbXByZXNzaW9uIGlzIGRvbmUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSAzMzc3OTtcblxuLyoqXG4gKiBQVlJUQyBSR0IgY29tcHJlc3Npb24gaW4gNC1iaXQgbW9kZS4gT25lIGJsb2NrIGZvciBlYWNoIDTDlzQgcGl4ZWxzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MDtcblxuLyoqXG4gKiBQVlJUQyBSR0IgY29tcHJlc3Npb24gaW4gMi1iaXQgbW9kZS4gT25lIGJsb2NrIGZvciBlYWNoIDjDlzQgcGl4ZWxzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgPSAzNTg0MTtcblxuLyoqXG4gKiBQVlJUQyBSR0JBIGNvbXByZXNzaW9uIGluIDQtYml0IG1vZGUuIE9uZSBibG9jayBmb3IgZWFjaCA0w5c0IHBpeGVscy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQyO1xuXG4vKipcbiAqIFBWUlRDIFJHQkEgY29tcHJlc3Npb24gaW4gMi1iaXQgbW9kZS4gT25lIGJsb2NrIGZvciBlYWNoIDjDlzQgcGl4ZWxzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDM7XG5cbi8qKlxuICogRVRDMSBSR0IgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7XG5cbi8qKlxuICogRVRDMiBSR0IgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCX0VUQzJfRm9ybWF0ID0gMzc0OTI7XG5cbi8qKlxuICogRVRDMiBSR0JBIGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHQkFfRVRDMl9FQUNfRm9ybWF0ID0gMzc0OTY7XG5cbi8qKlxuICogQVNUQyBSR0JBIDR4NCBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4O1xuXG4vKipcbiAqIEFTVEMgUkdCQSA1eDQgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9BU1RDXzV4NF9Gb3JtYXQgPSAzNzgwOTtcblxuLyoqXG4gKiBBU1RDIFJHQkEgNXg1IGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG5cbi8qKlxuICogQVNUQyBSR0JBIDZ4NSBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExO1xuXG4vKipcbiAqIEFTVEMgUkdCQSA2eDYgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgPSAzNzgxMjtcblxuLyoqXG4gKiBBU1RDIFJHQkEgOHg1IGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG5cbi8qKlxuICogQVNUQyBSR0JBIDh4NiBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0O1xuXG4vKipcbiAqIEFTVEMgUkdCQSA4eDggZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9BU1RDXzh4OF9Gb3JtYXQgPSAzNzgxNTtcblxuLyoqXG4gKiBBU1RDIFJHQkEgMTB4NSBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgPSAzNzgxNjtcblxuLyoqXG4gKiBBU1RDIFJHQkEgMTB4NiBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgPSAzNzgxNztcblxuLyoqXG4gKiBBU1RDIFJHQkEgMTB4OCBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgPSAzNzgxODtcblxuLyoqXG4gKiBBU1RDIFJHQkEgMTB4MTAgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODE5O1xuXG4vKipcbiAqIEFTVEMgUkdCQSAxMngxMCBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XG5cbi8qKlxuICogQVNUQyBSR0JBIDEyeDEyIGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgPSAzNzgyMTtcblxuLyoqXG4gKiBCUFRDIFJHQkEgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCQV9CUFRDX0Zvcm1hdCA9IDM2NDkyO1xuXG4vKipcbiAqIEJQVEMgU2lnbmVkIFJHQiBmb3JtYXQuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JfQlBUQ19TSUdORURfRm9ybWF0ID0gMzY0OTQ7XG5cbi8qKlxuICogQlBUQyBVbnNpZ25lZCBSR0IgZm9ybWF0LlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0ID0gMzY0OTU7XG5cbi8qKlxuICogUkdUQzEgUmVkIGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJFRF9SR1RDMV9Gb3JtYXQgPSAzNjI4MztcblxuLyoqXG4gKiBSR1RDMSBTaWduZWQgUmVkIGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFNJR05FRF9SRURfUkdUQzFfRm9ybWF0ID0gMzYyODQ7XG5cbi8qKlxuICogUkdUQzIgUmVkIEdyZWVuIGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgPSAzNjI4NTtcblxuLyoqXG4gKiBSR1RDMiBTaWduZWQgUmVkIEdyZWVuIGZvcm1hdC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0ID0gMzYyODY7XG5cbi8qKlxuICogQW5pbWF0aW9ucyBhcmUgcGxheWVkIG9uY2UuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBMb29wT25jZSA9IDIyMDA7XG5cbi8qKlxuICogQW5pbWF0aW9ucyBhcmUgcGxheWVkIHdpdGggYSBjaG9zZW4gbnVtYmVyIG9mIHJlcGV0aXRpb25zLCBlYWNoIHRpbWUganVtcGluZyBmcm9tXG4gKiB0aGUgZW5kIG9mIHRoZSBjbGlwIGRpcmVjdGx5IHRvIGl0cyBiZWdpbm5pbmcuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBMb29wUmVwZWF0ID0gMjIwMTtcblxuLyoqXG4gKiBBbmltYXRpb25zIGFyZSBwbGF5ZWQgd2l0aCBhIGNob3NlbiBudW1iZXIgb2YgcmVwZXRpdGlvbnMsIGFsdGVybmF0ZWx5IHBsYXlpbmcgZm9yd2FyZFxuICogYW5kIGJhY2t3YXJkLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTG9vcFBpbmdQb25nID0gMjIwMjtcblxuLyoqXG4gKiBEaXNjcmV0ZSBpbnRlcnBvbGF0aW9uIG1vZGUgZm9yIGtleWZyYW1lIHRyYWNrcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEludGVycG9sYXRlRGlzY3JldGUgPSAyMzAwO1xuXG4vKipcbiAqIExpbmVhciBpbnRlcnBvbGF0aW9uIG1vZGUgZm9yIGtleWZyYW1lIHRyYWNrcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEludGVycG9sYXRlTGluZWFyID0gMjMwMTtcblxuLyoqXG4gKiBTbW9vdGggaW50ZXJwb2xhdGlvbiBtb2RlIGZvciBrZXlmcmFtZSB0cmFja3MuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBJbnRlcnBvbGF0ZVNtb290aCA9IDIzMDI7XG5cbi8qKlxuICogWmVybyBjdXJ2YXR1cmUgZW5kaW5nIGZvciBhbmltYXRpb25zLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgWmVyb0N1cnZhdHVyZUVuZGluZyA9IDI0MDA7XG5cbi8qKlxuICogWmVybyBzbG9wZSBlbmRpbmcgZm9yIGFuaW1hdGlvbnMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xuXG4vKipcbiAqIFdyYXAgYXJvdW5kIGVuZGluZyBmb3IgYW5pbWF0aW9ucy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFdyYXBBcm91bmRFbmRpbmcgPSAyNDAyO1xuXG4vKipcbiAqIERlZmF1bHQgYW5pbWF0aW9uIGJsZW5kIG1vZGUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUgPSAyNTAwO1xuXG4vKipcbiAqIEFkZGl0aXZlIGFuaW1hdGlvbiBibGVuZCBtb2RlLiBDYW4gYmUgdXNlZCB0byBsYXllciBtb3Rpb25zIG9uIHRvcCBvZlxuICogZWFjaCBvdGhlciB0byBidWlsZCBjb21wbGV4IHBlcmZvcm1hbmNlcyBmcm9tIHNtYWxsZXIgcmUtdXNhYmxlIGFzc2V0cy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlID0gMjUwMTtcblxuLyoqXG4gKiBGb3IgZXZlcnkgdGhyZWUgdmVydGljZXMgZHJhdyBhIHNpbmdsZSB0cmlhbmdsZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFRyaWFuZ2xlc0RyYXdNb2RlID0gMDtcblxuLyoqXG4gKiBGb3IgZWFjaCB2ZXJ0ZXggZHJhdyBhIHRyaWFuZ2xlIGZyb20gdGhlIGxhc3QgdGhyZWUgdmVydGljZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xuXG4vKipcbiAqIEZvciBlYWNoIHZlcnRleCBkcmF3IGEgdHJpYW5nbGUgZnJvbSB0aGUgZmlyc3QgdmVydGV4IGFuZCB0aGUgbGFzdCB0d28gdmVydGljZXMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBUcmlhbmdsZUZhbkRyYXdNb2RlID0gMjtcblxuLyoqXG4gKiBCYXNpYyBkZXB0aCBwYWNraW5nLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQmFzaWNEZXB0aFBhY2tpbmcgPSAzMjAwO1xuXG4vKipcbiAqIEEgZGVwdGggdmFsdWUgaXMgcGFja2VkIGludG8gMzIgYml0IFJHQkEuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JBRGVwdGhQYWNraW5nID0gMzIwMTtcblxuLyoqXG4gKiBBIGRlcHRoIHZhbHVlIGlzIHBhY2tlZCBpbnRvIDI0IGJpdCBSR0IuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSR0JEZXB0aFBhY2tpbmcgPSAzMjAyO1xuXG4vKipcbiAqIEEgZGVwdGggdmFsdWUgaXMgcGFja2VkIGludG8gMTYgYml0IFJHLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgUkdEZXB0aFBhY2tpbmcgPSAzMjAzO1xuXG4vKipcbiAqIE5vcm1hbCBpbmZvcm1hdGlvbiBpcyByZWxhdGl2ZSB0byB0aGUgdW5kZXJseWluZyBzdXJmYWNlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgVGFuZ2VudFNwYWNlTm9ybWFsTWFwID0gMDtcblxuLyoqXG4gKiBOb3JtYWwgaW5mb3JtYXRpb24gaXMgcmVsYXRpdmUgdG8gdGhlIG9iamVjdCBvcmllbnRhdGlvbi5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE9iamVjdFNwYWNlTm9ybWFsTWFwID0gMTtcblxuLy8gQ29sb3Igc3BhY2Ugc3RyaW5nIGlkZW50aWZpZXJzLCBtYXRjaGluZyBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDQgYW5kIFdlYkdQVSBuYW1lcyB3aGVyZSBhdmFpbGFibGUuXG5cbi8qKlxuICogTm8gY29sb3Igc3BhY2UuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOb0NvbG9yU3BhY2UgPSAnJztcblxuLyoqXG4gKiBzUkdCIGNvbG9yIHNwYWNlLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgU1JHQkNvbG9yU3BhY2UgPSAnc3JnYic7XG5cbi8qKlxuICogc1JHQi1saW5lYXIgY29sb3Igc3BhY2UuXG4gKlxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBMaW5lYXJTUkdCQ29sb3JTcGFjZSA9ICdzcmdiLWxpbmVhcic7XG5cbi8qKlxuICogTGluZWFyIHRyYW5zZmVyIGZ1bmN0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTGluZWFyVHJhbnNmZXIgPSAnbGluZWFyJztcblxuLyoqXG4gKiBzUkdCIHRyYW5zZmVyIGZ1bmN0aW9uLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgU1JHQlRyYW5zZmVyID0gJ3NyZ2InO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0ZW5jaWwgYnVmZmVyIHZhbHVlIHRvIGAwYC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFplcm9TdGVuY2lsT3AgPSAwO1xuXG4vKipcbiAqIEtlZXBzIHRoZSBjdXJyZW50IHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgS2VlcFN0ZW5jaWxPcCA9IDc2ODA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RlbmNpbCBidWZmZXIgdmFsdWUgdG8gdGhlIHNwZWNpZmllZCByZWZlcmVuY2UgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBSZXBsYWNlU3RlbmNpbE9wID0gNzY4MTtcblxuLyoqXG4gKiBJbmNyZW1lbnRzIHRoZSBjdXJyZW50IHN0ZW5jaWwgYnVmZmVyIHZhbHVlLiBDbGFtcHMgdG8gdGhlIG1heGltdW0gcmVwcmVzZW50YWJsZSB1bnNpZ25lZCB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEluY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODI7XG5cbi8qKlxuICogRGVjcmVtZW50cyB0aGUgY3VycmVudCBzdGVuY2lsIGJ1ZmZlciB2YWx1ZS4gQ2xhbXBzIHRvIGAwYC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IERlY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODM7XG5cbi8qKlxuICogSW5jcmVtZW50cyB0aGUgY3VycmVudCBzdGVuY2lsIGJ1ZmZlciB2YWx1ZS4gV3JhcHMgc3RlbmNpbCBidWZmZXIgdmFsdWUgdG8gemVybyB3aGVuIGluY3JlbWVudGluZ1xuICogdGhlIG1heGltdW0gcmVwcmVzZW50YWJsZSB1bnNpZ25lZCB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEluY3JlbWVudFdyYXBTdGVuY2lsT3AgPSAzNDA1NTtcblxuLyoqXG4gKiBEZWNyZW1lbnRzIHRoZSBjdXJyZW50IHN0ZW5jaWwgYnVmZmVyIHZhbHVlLiBXcmFwcyBzdGVuY2lsIGJ1ZmZlciB2YWx1ZSB0byB0aGUgbWF4aW11bSByZXByZXNlbnRhYmxlXG4gKiB1bnNpZ25lZCB2YWx1ZSB3aGVuIGRlY3JlbWVudGluZyBhIHN0ZW5jaWwgYnVmZmVyIHZhbHVlIG9mIGAwYC5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IERlY3JlbWVudFdyYXBTdGVuY2lsT3AgPSAzNDA1NjtcblxuLyoqXG4gKiBJbnZlcnRzIHRoZSBjdXJyZW50IHN0ZW5jaWwgYnVmZmVyIHZhbHVlIGJpdHdpc2UuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBJbnZlcnRTdGVuY2lsT3AgPSA1Mzg2O1xuXG4vKipcbiAqIFdpbGwgbmV2ZXIgcmV0dXJuIHRydWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOZXZlclN0ZW5jaWxGdW5jID0gNTEyO1xuXG4vKipcbiAqIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlIHN0ZW5jaWwgcmVmZXJlbmNlIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgY3VycmVudCBzdGVuY2lsIHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTGVzc1N0ZW5jaWxGdW5jID0gNTEzO1xuXG4vKipcbiAqIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlIHN0ZW5jaWwgcmVmZXJlbmNlIHZhbHVlIGlzIGVxdWFsIHRvIHRoZSBjdXJyZW50IHN0ZW5jaWwgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBFcXVhbFN0ZW5jaWxGdW5jID0gNTE0O1xuXG4vKipcbiAqIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlIHN0ZW5jaWwgcmVmZXJlbmNlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgY3VycmVudCBzdGVuY2lsIHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTGVzc0VxdWFsU3RlbmNpbEZ1bmMgPSA1MTU7XG5cbi8qKlxuICogV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgc3RlbmNpbCByZWZlcmVuY2UgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIHRoZSBjdXJyZW50IHN0ZW5jaWwgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBHcmVhdGVyU3RlbmNpbEZ1bmMgPSA1MTY7XG5cbi8qKlxuICogV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGUgc3RlbmNpbCByZWZlcmVuY2UgdmFsdWUgaXMgbm90IGVxdWFsIHRvIHRoZSBjdXJyZW50IHN0ZW5jaWwgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBOb3RFcXVhbFN0ZW5jaWxGdW5jID0gNTE3O1xuXG4vKipcbiAqIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlIHN0ZW5jaWwgcmVmZXJlbmNlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgY3VycmVudCBzdGVuY2lsIHZhbHVlLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMgPSA1MTg7XG5cbi8qKlxuICogV2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBBbHdheXNTdGVuY2lsRnVuYyA9IDUxOTtcblxuLyoqXG4gKiBOZXZlciBwYXNzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgTmV2ZXJDb21wYXJlID0gNTEyO1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgdGV4dHVyZSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IExlc3NDb21wYXJlID0gNTEzO1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGVxdWFscyB0aGUgdGV4dHVyZSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEVxdWFsQ29tcGFyZSA9IDUxNDtcblxuLyoqXG4gKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHRleHR1cmUgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBMZXNzRXF1YWxDb21wYXJlID0gNTE1O1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgdGV4dHVyZSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEdyZWF0ZXJDb21wYXJlID0gNTE2O1xuXG4vKipcbiAqIFBhc3MgaWYgdGhlIGluY29taW5nIHZhbHVlIGlzIG5vdCBlcXVhbCB0byB0aGUgdGV4dHVyZSB2YWx1ZS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IE5vdEVxdWFsQ29tcGFyZSA9IDUxNztcblxuLyoqXG4gKiBQYXNzIGlmIHRoZSBpbmNvbWluZyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIHRleHR1cmUgdmFsdWUuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBHcmVhdGVyRXF1YWxDb21wYXJlID0gNTE4O1xuXG4vKipcbiAqIEFsd2F5cyBwYXNzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgQWx3YXlzQ29tcGFyZSA9IDUxOTtcblxuLyoqXG4gKiBUaGUgY29udGVudHMgYXJlIGludGVuZGVkIHRvIGJlIHNwZWNpZmllZCBvbmNlIGJ5IHRoZSBhcHBsaWNhdGlvbiwgYW5kIHVzZWQgbWFueVxuICogdGltZXMgYXMgdGhlIHNvdXJjZSBmb3IgZHJhd2luZyBhbmQgaW1hZ2Ugc3BlY2lmaWNhdGlvbiBjb21tYW5kcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFN0YXRpY0RyYXdVc2FnZSA9IDM1MDQ0O1xuXG4vKipcbiAqIFRoZSBjb250ZW50cyBhcmUgaW50ZW5kZWQgdG8gYmUgcmVzcGVjaWZpZWQgcmVwZWF0ZWRseSBieSB0aGUgYXBwbGljYXRpb24sIGFuZFxuICogdXNlZCBtYW55IHRpbWVzIGFzIHRoZSBzb3VyY2UgZm9yIGRyYXdpbmcgYW5kIGltYWdlIHNwZWNpZmljYXRpb24gY29tbWFuZHMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBEeW5hbWljRHJhd1VzYWdlID0gMzUwNDg7XG5cbi8qKlxuICogVGhlIGNvbnRlbnRzIGFyZSBpbnRlbmRlZCB0byBiZSBzcGVjaWZpZWQgb25jZSBieSB0aGUgYXBwbGljYXRpb24sIGFuZCB1c2VkIGF0IG1vc3RcbiAqIGEgZmV3IHRpbWVzIGFzIHRoZSBzb3VyY2UgZm9yIGRyYXdpbmcgYW5kIGltYWdlIHNwZWNpZmljYXRpb24gY29tbWFuZHMuXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBTdHJlYW1EcmF3VXNhZ2UgPSAzNTA0MDtcblxuLyoqXG4gKiBUaGUgY29udGVudHMgYXJlIGludGVuZGVkIHRvIGJlIHNwZWNpZmllZCBvbmNlIGJ5IHJlYWRpbmcgZGF0YSBmcm9tIHRoZSAzRCBBUEksIGFuZCBxdWVyaWVkXG4gKiBtYW55IHRpbWVzIGJ5IHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFN0YXRpY1JlYWRVc2FnZSA9IDM1MDQ1O1xuXG4vKipcbiAqIFRoZSBjb250ZW50cyBhcmUgaW50ZW5kZWQgdG8gYmUgcmVzcGVjaWZpZWQgcmVwZWF0ZWRseSBieSByZWFkaW5nIGRhdGEgZnJvbSB0aGUgM0QgQVBJLCBhbmQgcXVlcmllZFxuICogbWFueSB0aW1lcyBieSB0aGUgYXBwbGljYXRpb24uXG4gKlxuICogQHR5cGUge251bWJlcn1cbiAqIEBjb25zdGFudFxuICovXG5jb25zdCBEeW5hbWljUmVhZFVzYWdlID0gMzUwNDk7XG5cbi8qKlxuICogVGhlIGNvbnRlbnRzIGFyZSBpbnRlbmRlZCB0byBiZSBzcGVjaWZpZWQgb25jZSBieSByZWFkaW5nIGRhdGEgZnJvbSB0aGUgM0QgQVBJLCBhbmQgcXVlcmllZCBhdCBtb3N0XG4gKiBhIGZldyB0aW1lcyBieSB0aGUgYXBwbGljYXRpb25cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFN0cmVhbVJlYWRVc2FnZSA9IDM1MDQxO1xuXG4vKipcbiAqIFRoZSBjb250ZW50cyBhcmUgaW50ZW5kZWQgdG8gYmUgc3BlY2lmaWVkIG9uY2UgYnkgcmVhZGluZyBkYXRhIGZyb20gdGhlIDNEIEFQSSwgYW5kIHVzZWQgbWFueSB0aW1lcyBhc1xuICogdGhlIHNvdXJjZSBmb3IgV2ViR0wgZHJhd2luZyBhbmQgaW1hZ2Ugc3BlY2lmaWNhdGlvbiBjb21tYW5kcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFN0YXRpY0NvcHlVc2FnZSA9IDM1MDQ2O1xuXG4vKipcbiAqIFRoZSBjb250ZW50cyBhcmUgaW50ZW5kZWQgdG8gYmUgcmVzcGVjaWZpZWQgcmVwZWF0ZWRseSBieSByZWFkaW5nIGRhdGEgZnJvbSB0aGUgM0QgQVBJLCBhbmQgdXNlZCBtYW55IHRpbWVzXG4gKiBhcyB0aGUgc291cmNlIGZvciBXZWJHTCBkcmF3aW5nIGFuZCBpbWFnZSBzcGVjaWZpY2F0aW9uIGNvbW1hbmRzLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgRHluYW1pY0NvcHlVc2FnZSA9IDM1MDUwO1xuXG4vKipcbiAqIFRoZSBjb250ZW50cyBhcmUgaW50ZW5kZWQgdG8gYmUgc3BlY2lmaWVkIG9uY2UgYnkgcmVhZGluZyBkYXRhIGZyb20gdGhlIDNEIEFQSSwgYW5kIHVzZWQgYXQgbW9zdCBhIGZldyB0aW1lc1xuICogYXMgdGhlIHNvdXJjZSBmb3IgV2ViR0wgZHJhd2luZyBhbmQgaW1hZ2Ugc3BlY2lmaWNhdGlvbiBjb21tYW5kcy5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFN0cmVhbUNvcHlVc2FnZSA9IDM1MDQyO1xuXG4vKipcbiAqIEdMU0wgMSBzaGFkZXIgY29kZS5cbiAqXG4gKiBAdHlwZSB7c3RyaW5nfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IEdMU0wxID0gJzEwMCc7XG5cbi8qKlxuICogR0xTTCAzIHNoYWRlciBjb2RlLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgR0xTTDMgPSAnMzAwIGVzJztcblxuLyoqXG4gKiBXZWJHTCBjb29yZGluYXRlIHN5c3RlbS5cbiAqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGNvbnN0YW50XG4gKi9cbmNvbnN0IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDA7XG5cbi8qKlxuICogV2ViR1BVIGNvb3JkaW5hdGUgc3lzdGVtLlxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSA9IDIwMDE7XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgZGlmZmVyZW50IHRpbWVzdGFtcCBxdWVyeSB0eXBlcy5cbiAqXG4gKiBAdHlwZSB7Q29uc3RhbnRzVGltZXN0YW1wUXVlcnl9XG4gKiBAY29uc3RhbnRcbiAqL1xuY29uc3QgVGltZXN0YW1wUXVlcnkgPSB7XG5cdENPTVBVVEU6ICdjb21wdXRlJyxcblx0UkVOREVSOiAncmVuZGVyJ1xufTtcblxuLyoqXG4gKiBUaGlzIHR5cGUgcmVwcmVzZW50cyBtb3VzZSBidXR0b25zIGFuZCBpbnRlcmFjdGlvbiB0eXBlcyBpbiBjb250ZXh0IG9mIGNvbnRyb2xzLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENvbnN0YW50c01vdXNlXG4gKiBAcHJvcGVydHkge251bWJlcn0gTUlERExFIC0gVGhlIGxlZnQgbW91c2UgYnV0dG9uLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IExFRlQgLSBUaGUgbWlkZGxlIG1vdXNlIGJ1dHRvbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBSSUdIVCAtIFRoZSByaWdodCBtb3VzZSBidXR0b24uXG4gKiBAcHJvcGVydHkge251bWJlcn0gUk9UQVRFIC0gQSByb3RhdGUgaW50ZXJhY3Rpb24uXG4gKiBAcHJvcGVydHkge251bWJlcn0gRE9MTFkgLSBBIGRvbGx5IGludGVyYWN0aW9uLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFBBTiAtIEEgcGFuIGludGVyYWN0aW9uLlxuICoqL1xuXG4vKipcbiAqIFRoaXMgdHlwZSByZXByZXNlbnRzIHRvdWNoIGludGVyYWN0aW9uIHR5cGVzIGluIGNvbnRleHQgb2YgY29udHJvbHMuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gQ29uc3RhbnRzVG91Y2hcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBST1RBVEUgLSBBIHJvdGF0ZSBpbnRlcmFjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQQU4gLSBBIHBhbiBpbnRlcmFjdGlvbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBET0xMWV9QQU4gLSBUaGUgZG9sbHktcGFuIGludGVyYWN0aW9uLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IERPTExZX1JPVEFURSAtIEEgZG9sbHktcm90YXRlIGludGVyYWN0aW9uLlxuICoqL1xuXG4vKipcbiAqIFRoaXMgdHlwZSByZXByZXNlbnRzIHRoZSBkaWZmZXJlbnQgdGltZXN0YW1wIHF1ZXJ5IHR5cGVzLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENvbnN0YW50c1RpbWVzdGFtcFF1ZXJ5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gQ09NUFVURSAtIEEgYGNvbXB1dGVgIHRpbWVzdGFtcCBxdWVyeS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRU5ERVIgLSBBIGByZW5kZXJgIHRpbWVzdGFtcCBxdWVyeS5cbiAqKi9cblxuLyoqXG4gKiBUaGlzIG1vZHVsZXMgYWxsb3dzIHRvIGRpc3BhdGNoIGV2ZW50IG9iamVjdHMgb24gY3VzdG9tIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqXG4gKiBNYWluIHJlcG9zaXRvcnk6IFtldmVudGRpc3BhdGNoZXIuanNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvZXZlbnRkaXNwYXRjaGVyLmpzL31cbiAqXG4gKiBDb2RlIEV4YW1wbGU6XG4gKiBgYGBqc1xuICogY2xhc3MgQ2FyIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcbiAqIFx0c3RhcnQoKSB7XG4gKlx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3N0YXJ0JywgbWVzc2FnZTogJ3Zyb29tIHZyb29tIScgfSApO1xuICpcdH1cbiAqfTtcbiAqXG4gKiAvLyBVc2luZyBldmVudHMgd2l0aCB0aGUgY3VzdG9tIG9iamVjdFxuICogY29uc3QgY2FyID0gbmV3IENhcigpO1xuICogY2FyLmFkZEV2ZW50TGlzdGVuZXIoICdzdGFydCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG4gKiBcdGFsZXJ0KCBldmVudC5tZXNzYWdlICk7XG4gKiB9ICk7XG4gKlxuICogY2FyLnN0YXJ0KCk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgRXZlbnREaXNwYXRjaGVyIHtcblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGdpdmVuIGV2ZW50IHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgZXZlbnQgdG8gbGlzdGVuIHRvLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGZpcmVkLlxuXHQgKi9cblx0YWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgbGlzdGVuZXIgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgdGhpcy5fbGlzdGVuZXJzID0ge307XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxpc3RlbmVyc1sgdHlwZSBdID0gW107XG5cblx0XHR9XG5cblx0XHRpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0xICkge1xuXG5cdFx0XHRsaXN0ZW5lcnNbIHR5cGUgXS5wdXNoKCBsaXN0ZW5lciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGV2ZW50IGxpc3RlbmVyIGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBnaXZlbiBldmVudCB0eXBlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSB0eXBlIG9mIGV2ZW50LlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gZXZlbnQgbGlzdGVuZXIgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIGdpdmVuIGV2ZW50IHR5cGUuXG5cdCAqL1xuXHRoYXNFdmVudExpc3RlbmVyKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdGlmICggbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gbGlzdGVuZXJzWyB0eXBlIF0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApICE9PSAtMTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGdpdmVuIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIGdpdmVuIGV2ZW50IHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgZXZlbnQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIHRvIHJlbW92ZS5cblx0ICovXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGxpc3RlbmVyICkge1xuXG5cdFx0Y29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXG5cdFx0aWYgKCBsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGNvbnN0IGxpc3RlbmVyQXJyYXkgPSBsaXN0ZW5lcnNbIHR5cGUgXTtcblxuXHRcdGlmICggbGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGxpc3RlbmVyQXJyYXkuaW5kZXhPZiggbGlzdGVuZXIgKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gLTEgKSB7XG5cblx0XHRcdFx0bGlzdGVuZXJBcnJheS5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERpc3BhdGNoZXMgYW4gZXZlbnQgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgdGhhdCBnZXRzIGZpcmVkLlxuXHQgKi9cblx0ZGlzcGF0Y2hFdmVudCggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG5cblx0XHRpZiAoIGxpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgZXZlbnQudHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGV2ZW50LnRhcmdldCA9IHRoaXM7XG5cblx0XHRcdC8vIE1ha2UgYSBjb3B5LCBpbiBjYXNlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCB3aGlsZSBpdGVyYXRpbmcuXG5cdFx0XHRjb25zdCBhcnJheSA9IGxpc3RlbmVyQXJyYXkuc2xpY2UoIDAgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhcnJheVsgaSBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY29uc3QgX2x1dCA9IFsgJzAwJywgJzAxJywgJzAyJywgJzAzJywgJzA0JywgJzA1JywgJzA2JywgJzA3JywgJzA4JywgJzA5JywgJzBhJywgJzBiJywgJzBjJywgJzBkJywgJzBlJywgJzBmJywgJzEwJywgJzExJywgJzEyJywgJzEzJywgJzE0JywgJzE1JywgJzE2JywgJzE3JywgJzE4JywgJzE5JywgJzFhJywgJzFiJywgJzFjJywgJzFkJywgJzFlJywgJzFmJywgJzIwJywgJzIxJywgJzIyJywgJzIzJywgJzI0JywgJzI1JywgJzI2JywgJzI3JywgJzI4JywgJzI5JywgJzJhJywgJzJiJywgJzJjJywgJzJkJywgJzJlJywgJzJmJywgJzMwJywgJzMxJywgJzMyJywgJzMzJywgJzM0JywgJzM1JywgJzM2JywgJzM3JywgJzM4JywgJzM5JywgJzNhJywgJzNiJywgJzNjJywgJzNkJywgJzNlJywgJzNmJywgJzQwJywgJzQxJywgJzQyJywgJzQzJywgJzQ0JywgJzQ1JywgJzQ2JywgJzQ3JywgJzQ4JywgJzQ5JywgJzRhJywgJzRiJywgJzRjJywgJzRkJywgJzRlJywgJzRmJywgJzUwJywgJzUxJywgJzUyJywgJzUzJywgJzU0JywgJzU1JywgJzU2JywgJzU3JywgJzU4JywgJzU5JywgJzVhJywgJzViJywgJzVjJywgJzVkJywgJzVlJywgJzVmJywgJzYwJywgJzYxJywgJzYyJywgJzYzJywgJzY0JywgJzY1JywgJzY2JywgJzY3JywgJzY4JywgJzY5JywgJzZhJywgJzZiJywgJzZjJywgJzZkJywgJzZlJywgJzZmJywgJzcwJywgJzcxJywgJzcyJywgJzczJywgJzc0JywgJzc1JywgJzc2JywgJzc3JywgJzc4JywgJzc5JywgJzdhJywgJzdiJywgJzdjJywgJzdkJywgJzdlJywgJzdmJywgJzgwJywgJzgxJywgJzgyJywgJzgzJywgJzg0JywgJzg1JywgJzg2JywgJzg3JywgJzg4JywgJzg5JywgJzhhJywgJzhiJywgJzhjJywgJzhkJywgJzhlJywgJzhmJywgJzkwJywgJzkxJywgJzkyJywgJzkzJywgJzk0JywgJzk1JywgJzk2JywgJzk3JywgJzk4JywgJzk5JywgJzlhJywgJzliJywgJzljJywgJzlkJywgJzllJywgJzlmJywgJ2EwJywgJ2ExJywgJ2EyJywgJ2EzJywgJ2E0JywgJ2E1JywgJ2E2JywgJ2E3JywgJ2E4JywgJ2E5JywgJ2FhJywgJ2FiJywgJ2FjJywgJ2FkJywgJ2FlJywgJ2FmJywgJ2IwJywgJ2IxJywgJ2IyJywgJ2IzJywgJ2I0JywgJ2I1JywgJ2I2JywgJ2I3JywgJ2I4JywgJ2I5JywgJ2JhJywgJ2JiJywgJ2JjJywgJ2JkJywgJ2JlJywgJ2JmJywgJ2MwJywgJ2MxJywgJ2MyJywgJ2MzJywgJ2M0JywgJ2M1JywgJ2M2JywgJ2M3JywgJ2M4JywgJ2M5JywgJ2NhJywgJ2NiJywgJ2NjJywgJ2NkJywgJ2NlJywgJ2NmJywgJ2QwJywgJ2QxJywgJ2QyJywgJ2QzJywgJ2Q0JywgJ2Q1JywgJ2Q2JywgJ2Q3JywgJ2Q4JywgJ2Q5JywgJ2RhJywgJ2RiJywgJ2RjJywgJ2RkJywgJ2RlJywgJ2RmJywgJ2UwJywgJ2UxJywgJ2UyJywgJ2UzJywgJ2U0JywgJ2U1JywgJ2U2JywgJ2U3JywgJ2U4JywgJ2U5JywgJ2VhJywgJ2ViJywgJ2VjJywgJ2VkJywgJ2VlJywgJ2VmJywgJ2YwJywgJ2YxJywgJ2YyJywgJ2YzJywgJ2Y0JywgJ2Y1JywgJ2Y2JywgJ2Y3JywgJ2Y4JywgJ2Y5JywgJ2ZhJywgJ2ZiJywgJ2ZjJywgJ2ZkJywgJ2ZlJywgJ2ZmJyBdO1xuXG5sZXQgX3NlZWQgPSAxMjM0NTY3O1xuXG5cbmNvbnN0IERFRzJSQUQgPSBNYXRoLlBJIC8gMTgwO1xuY29uc3QgUkFEMkRFRyA9IDE4MCAvIE1hdGguUEk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBbVVVJRF17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW5pdmVyc2FsbHlfdW5pcXVlX2lkZW50aWZpZXJ9XG4gKiAodW5pdmVyc2FsbHkgdW5pcXVlIGlkZW50aWZpZXIpLlxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVVSUQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVVVJRCgpIHtcblxuXHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjE5NjMxMzYjMjE5NjMxMzZcblxuXHRjb25zdCBkMCA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdGNvbnN0IGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRjb25zdCBkMyA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0Y29uc3QgdXVpZCA9IF9sdXRbIGQwICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDEgJiAweGZmIF0gKyBfbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDEgPj4gMTYgJiAweDBmIHwgMHg0MCBdICsgX2x1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDIgJiAweDNmIHwgMHg4MCBdICsgX2x1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQyID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDIgPj4gMjQgJiAweGZmIF0gK1xuXHRcdFx0X2x1dFsgZDMgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiA4ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiAyNCAmIDB4ZmYgXTtcblxuXHQvLyAudG9Mb3dlckNhc2UoKSBoZXJlIGZsYXR0ZW5zIGNvbmNhdGVuYXRlZCBzdHJpbmdzIHRvIHNhdmUgaGVhcCBtZW1vcnkgc3BhY2UuXG5cdHJldHVybiB1dWlkLnRvTG93ZXJDYXNlKCk7XG5cbn1cblxuLyoqXG4gKiBDbGFtcHMgdGhlIGdpdmVuIHZhbHVlIGJldHdlZW4gbWluIGFuZCBtYXguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNsYW1wLlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW4gdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIG1heCB2YWx1ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNsYW1wZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKCB2YWx1ZSwgbWluLCBtYXggKSB7XG5cblx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcblxufVxuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBFdWNsaWRlYW4gbW9kdWxvIG9mIHRoZSBnaXZlbiBwYXJhbWV0ZXJzIHRoYXRcbiAqIGlzIGAoICggbiAlIG0gKSArIG0gKSAlIG1gLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIC0gVGhlIGZpcnN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtIC0gVGhlIHNlY29uZCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBFdWNsaWRlYW4gbW9kdWxvLlxuICovXG5mdW5jdGlvbiBldWNsaWRlYW5Nb2R1bG8oIG4sIG0gKSB7XG5cblx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTW9kdWxvX29wZXJhdGlvblxuXG5cdHJldHVybiAoICggbiAlIG0gKSArIG0gKSAlIG07XG5cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgYDxhMSwgYTI+YCB0byByYW5nZSBgPGIxLCBiMj5gXG4gKiBmb3IgdGhlIGdpdmVuIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIGJlIG1hcHBlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBhMSAtIE1pbmltdW0gdmFsdWUgZm9yIHJhbmdlIEEuXG4gKiBAcGFyYW0ge251bWJlcn0gYTIgLSBNYXhpbXVtIHZhbHVlIGZvciByYW5nZSBBLlxuICogQHBhcmFtIHtudW1iZXJ9IGIxIC0gTWluaW11bSB2YWx1ZSBmb3IgcmFuZ2UgQi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiMiAtIE1heGltdW0gdmFsdWUgZm9yIHJhbmdlIEIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYXBwZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcExpbmVhciggeCwgYTEsIGEyLCBiMSwgYjIgKSB7XG5cblx0cmV0dXJuIGIxICsgKCB4IC0gYTEgKSAqICggYjIgLSBiMSApIC8gKCBhMiAtIGExICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwZXJjZW50YWdlIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAgb2YgdGhlIGdpdmVuIHZhbHVlXG4gKiBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHBvaW50LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHN0YXJ0IHBvaW50XG4gKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBlbmQgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBBIHZhbHVlIGJldHdlZW4gc3RhcnQgYW5kIGVuZC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuICovXG5mdW5jdGlvbiBpbnZlcnNlTGVycCggeCwgeSwgdmFsdWUgKSB7XG5cblx0Ly8gaHR0cHM6Ly93d3cuZ2FtZWRldi5uZXQvdHV0b3JpYWxzL3Byb2dyYW1taW5nL2dlbmVyYWwtYW5kLWdhbWVwbGF5LXByb2dyYW1taW5nL2ludmVyc2UtbGVycC1hLXN1cGVyLXVzZWZ1bC15ZXQtb2Z0ZW4tb3Zlcmxvb2tlZC1mdW5jdGlvbi1yNTIzMC9cblxuXHRpZiAoIHggIT09IHkgKSB7XG5cblx0XHRyZXR1cm4gKCB2YWx1ZSAtIHggKSAvICggeSAtIHggKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIDA7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmV0dXJucyBhIHZhbHVlIGxpbmVhcmx5IGludGVycG9sYXRlZCBmcm9tIHR3byBrbm93biBwb2ludHMgYmFzZWQgb24gdGhlIGdpdmVuIGludGVydmFsIC1cbiAqIGB0ID0gMGAgd2lsbCByZXR1cm4gYHhgIGFuZCBgdCA9IDFgIHdpbGwgcmV0dXJuIGB5YC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBzdGFydCBwb2ludFxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgZW5kIHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IgaW4gdGhlIGNsb3NlZCBpbnRlcnZhbCBgWzAsIDFdYC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGludGVycG9sYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGVycCggeCwgeSwgdCApIHtcblxuXHRyZXR1cm4gKCAxIC0gdCApICogeCArIHQgKiB5O1xuXG59XG5cbi8qKlxuICogU21vb3RobHkgaW50ZXJwb2xhdGUgYSBudW1iZXIgZnJvbSBgeGAgdG8gYHlgIGluICBhIHNwcmluZy1saWtlIG1hbm5lciB1c2luZyBhIGRlbHRhXG4gKiB0aW1lIHRvIG1haW50YWluIGZyYW1lIHJhdGUgaW5kZXBlbmRlbnQgbW92ZW1lbnQuIEZvciBkZXRhaWxzLCBzZWVcbiAqIFtGcmFtZSByYXRlIGluZGVwZW5kZW50IGRhbXBpbmcgdXNpbmcgbGVycF17QGxpbmsgaHR0cDovL3d3dy5yb3J5ZHJpc2NvbGwuY29tLzIwMTYvMDMvMDcvZnJhbWUtcmF0ZS1pbmRlcGVuZGVudC1kYW1waW5nLXVzaW5nLWxlcnAvfS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBjdXJyZW50IHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdGFyZ2V0IHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IGxhbWJkYSAtIEEgaGlnaGVyIGxhbWJkYSB2YWx1ZSB3aWxsIG1ha2UgdGhlIG1vdmVtZW50IG1vcmUgc3VkZGVuLFxuICogYW5kIGEgbG93ZXIgdmFsdWUgd2lsbCBtYWtlIHRoZSBtb3ZlbWVudCBtb3JlIGdyYWR1YWwuXG4gKiBAcGFyYW0ge251bWJlcn0gZHQgLSBEZWx0YSB0aW1lIGluIHNlY29uZHMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGRhbXAoIHgsIHksIGxhbWJkYSwgZHQgKSB7XG5cblx0cmV0dXJuIGxlcnAoIHgsIHksIDEgLSBNYXRoLmV4cCggLSBsYW1iZGEgKiBkdCApICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdmFsdWUgdGhhdCBhbHRlcm5hdGVzIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gYGxlbmd0aGAgcGFyYW1ldGVyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIHBpbmdwb25nLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MV0gLSBUaGUgcG9zaXRpdmUgdmFsdWUgdGhlIGZ1bmN0aW9uIHdpbGwgcGluZ3BvbmcgdG8uXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbHRlcm5hdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBwaW5ncG9uZyggeCwgbGVuZ3RoID0gMSApIHtcblxuXHQvLyBodHRwczovL3d3dy5kZXNtb3MuY29tL2NhbGN1bGF0b3IvdmNzam55ejd4NFxuXG5cdHJldHVybiBsZW5ndGggLSBNYXRoLmFicyggZXVjbGlkZWFuTW9kdWxvKCB4LCBsZW5ndGggKiAyICkgLSBsZW5ndGggKTtcblxufVxuXG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBpbiB0aGUgcmFuZ2UgYFswLDFdYCB0aGF0IHJlcHJlc2VudHMgdGhlIHBlcmNlbnRhZ2UgdGhhdCBgeGAgaGFzXG4gKiBtb3ZlZCBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YCwgYnV0IHNtb290aGVkIG9yIHNsb3dlZCBkb3duIHRoZSBjbG9zZXIgYHhgIGlzIHRvXG4gKiB0aGUgYG1pbmAgYW5kIGBtYXhgLlxuICpcbiAqIFNlZSBbU21vb3Roc3RlcF17QGxpbmsgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIGV2YWx1YXRlIGJhc2VkIG9uIGl0cyBwb3NpdGlvbiBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW4gdmFsdWUuIEFueSB4IHZhbHVlIGJlbG93IG1pbiB3aWxsIGJlIGAwYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBUaGUgbWF4IHZhbHVlLiBBbnkgeCB2YWx1ZSBhYm92ZSBtYXggd2lsbCBiZSBgMWAuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbHRlcm5hdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBzbW9vdGhzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqICggMyAtIDIgKiB4ICk7XG5cbn1cblxuLyoqXG4gKiBBIFt2YXJpYXRpb24gb24gc21vb3Roc3RlcF17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU21vb3Roc3RlcCNWYXJpYXRpb25zfVxuICogdGhhdCBoYXMgemVybyAxc3QgYW5kIDJuZCBvcmRlciBkZXJpdmF0aXZlcyBhdCB4PTAgYW5kIHg9MS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSB0byBldmFsdWF0ZSBiYXNlZCBvbiBpdHMgcG9zaXRpb24gYmV0d2VlbiBtaW4gYW5kIG1heC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSBUaGUgbWluIHZhbHVlLiBBbnkgeCB2YWx1ZSBiZWxvdyBtaW4gd2lsbCBiZSBgMGAuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIG1heCB2YWx1ZS4gQW55IHggdmFsdWUgYWJvdmUgbWF4IHdpbGwgYmUgYDFgLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgYWx0ZXJuYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc21vb3RoZXJzdGVwKCB4LCBtaW4sIG1heCApIHtcblxuXHRpZiAoIHggPD0gbWluICkgcmV0dXJuIDA7XG5cdGlmICggeCA+PSBtYXggKSByZXR1cm4gMTtcblxuXHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdHJldHVybiB4ICogeCAqIHggKiAoIHggKiAoIHggKiA2IC0gMTUgKSArIDEwICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgZnJvbSBgPGxvdywgaGlnaD5gIGludGVydmFsLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgLSBUaGUgbG93ZXIgdmFsdWUgYm91bmRhcnkuXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaCAtIFRoZSB1cHBlciB2YWx1ZSBib3VuZGFyeVxuICogQHJldHVybiB7bnVtYmVyfSBBIHJhbmRvbSBpbnRlZ2VyLlxuICovXG5mdW5jdGlvbiByYW5kSW50KCBsb3csIGhpZ2ggKSB7XG5cblx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKyAxICkgKTtcblxufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gZmxvYXQgZnJvbSBgPGxvdywgaGlnaD5gIGludGVydmFsLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgLSBUaGUgbG93ZXIgdmFsdWUgYm91bmRhcnkuXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaCAtIFRoZSB1cHBlciB2YWx1ZSBib3VuZGFyeVxuICogQHJldHVybiB7bnVtYmVyfSBBIHJhbmRvbSBmbG9hdC5cbiAqL1xuZnVuY3Rpb24gcmFuZEZsb2F0KCBsb3csIGhpZ2ggKSB7XG5cblx0cmV0dXJuIGxvdyArIE1hdGgucmFuZG9tKCkgKiAoIGhpZ2ggLSBsb3cgKTtcblxufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciBmcm9tIGA8LXJhbmdlLzIsIHJhbmdlLzI+YCBpbnRlcnZhbC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gcmFuZ2UgLSBEZWZpbmVzIHRoZSB2YWx1ZSByYW5nZS5cbiAqIEByZXR1cm4ge251bWJlcn0gQSByYW5kb20gZmxvYXQuXG4gKi9cbmZ1bmN0aW9uIHJhbmRGbG9hdFNwcmVhZCggcmFuZ2UgKSB7XG5cblx0cmV0dXJuIHJhbmdlICogKCAwLjUgLSBNYXRoLnJhbmRvbSgpICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZGV0ZXJtaW5pc3RpYyBwc2V1ZG8tcmFuZG9tIGZsb2F0IGluIHRoZSBpbnRlcnZhbCBgWzAsIDFdYC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW3NdIC0gVGhlIGludGVnZXIgc2VlZC5cbiAqIEByZXR1cm4ge251bWJlcn0gQSByYW5kb20gZmxvYXQuXG4gKi9cbmZ1bmN0aW9uIHNlZWRlZFJhbmRvbSggcyApIHtcblxuXHRpZiAoIHMgIT09IHVuZGVmaW5lZCApIF9zZWVkID0gcztcblxuXHQvLyBNdWxiZXJyeTMyIGdlbmVyYXRvclxuXG5cdGxldCB0ID0gX3NlZWQgKz0gMHg2RDJCNzlGNTtcblxuXHR0ID0gTWF0aC5pbXVsKCB0IF4gdCA+Pj4gMTUsIHQgfCAxICk7XG5cblx0dCBePSB0ICsgTWF0aC5pbXVsKCB0IF4gdCA+Pj4gNywgdCB8IDYxICk7XG5cblx0cmV0dXJuICggKCB0IF4gdCA+Pj4gMTQgKSA+Pj4gMCApIC8gNDI5NDk2NzI5NjtcblxufVxuXG4vKipcbiAqIENvbnZlcnRzIGRlZ3JlZXMgdG8gcmFkaWFucy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZGVncmVlcyAtIEEgdmFsdWUgaW4gZGVncmVlcy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNvbnZlcnRlZCB2YWx1ZSBpbiByYWRpYW5zLlxuICovXG5mdW5jdGlvbiBkZWdUb1JhZCggZGVncmVlcyApIHtcblxuXHRyZXR1cm4gZGVncmVlcyAqIERFRzJSQUQ7XG5cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyByYWRpYW5zIHRvIGRlZ3JlZXMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGlhbnMgLSBBIHZhbHVlIGluIHJhZGlhbnMuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjb252ZXJ0ZWQgdmFsdWUgaW4gZGVncmVlcy5cbiAqL1xuZnVuY3Rpb24gcmFkVG9EZWcoIHJhZGlhbnMgKSB7XG5cblx0cmV0dXJuIHJhZGlhbnMgKiBSQUQyREVHO1xuXG59XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG51bWJlciBpcyBhIHBvd2VyIG9mIHR3by5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBudW1iZXIgaXMgYSBwb3dlciBvZiB0d28gb3Igbm90LlxuICovXG5mdW5jdGlvbiBpc1Bvd2VyT2ZUd28oIHZhbHVlICkge1xuXG5cdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc21hbGxlc3QgcG93ZXIgb2YgdHdvIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbmQgYSBQT1QgZm9yLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgc21hbGxlc3QgcG93ZXIgb2YgdHdvIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGNlaWxQb3dlck9mVHdvKCB2YWx1ZSApIHtcblxuXHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsYXJnZXN0IHBvd2VyIG9mIHR3byB0aGF0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaW5kIGEgUE9UIGZvci5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxhcmdlc3QgcG93ZXIgb2YgdHdvIHRoYXQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIGZsb29yUG93ZXJPZlR3byggdmFsdWUgKSB7XG5cblx0cmV0dXJuIE1hdGgucG93KCAyLCBNYXRoLmZsb29yKCBNYXRoLmxvZyggdmFsdWUgKSAvIE1hdGguTE4yICkgKTtcblxufVxuXG4vKipcbiAqIFNldHMgdGhlIGdpdmVuIHF1YXRlcm5pb24gZnJvbSB0aGUgW0ludHJpbnNpYyBQcm9wZXIgRXVsZXIgQW5nbGVzXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FdWxlcl9hbmdsZXN9XG4gKiBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBhbmdsZXMgYW5kIG9yZGVyLlxuICpcbiAqIFJvdGF0aW9ucyBhcmUgYXBwbGllZCB0byB0aGUgYXhlcyBpbiB0aGUgb3JkZXIgc3BlY2lmaWVkIGJ5IG9yZGVyOlxuICogcm90YXRpb24gYnkgYW5nbGUgYGFgIGlzIGFwcGxpZWQgZmlyc3QsIHRoZW4gYnkgYW5nbGUgYGJgLCB0aGVuIGJ5IGFuZ2xlIGBjYC5cbiAqXG4gKiBAcGFyYW0ge1F1YXRlcm5pb259IHEgLSBUaGUgcXVhdGVybmlvbiB0byBzZXQuXG4gKiBAcGFyYW0ge251bWJlcn0gYSAtIFRoZSByb3RhdGlvbiBhcHBsaWVkIHRvIHRoZSBmaXJzdCBheGlzLCBpbiByYWRpYW5zLlxuICogQHBhcmFtIHtudW1iZXJ9IGIgLSBUaGUgcm90YXRpb24gYXBwbGllZCB0byB0aGUgc2Vjb25kIGF4aXMsIGluIHJhZGlhbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gYyAtIFRoZSByb3RhdGlvbiBhcHBsaWVkIHRvIHRoZSB0aGlyZCBheGlzLCBpbiByYWRpYW5zLlxuICogQHBhcmFtIHsoJ1hZWCd8J1haWCd8J1lYWSd8J1laWSd8J1pYWid8J1pZWicpfSBvcmRlciAtIEEgc3RyaW5nIHNwZWNpZnlpbmcgdGhlIGF4ZXMgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIHNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoIHEsIGEsIGIsIGMsIG9yZGVyICkge1xuXG5cdGNvbnN0IGNvcyA9IE1hdGguY29zO1xuXHRjb25zdCBzaW4gPSBNYXRoLnNpbjtcblxuXHRjb25zdCBjMiA9IGNvcyggYiAvIDIgKTtcblx0Y29uc3QgczIgPSBzaW4oIGIgLyAyICk7XG5cblx0Y29uc3QgYzEzID0gY29zKCAoIGEgKyBjICkgLyAyICk7XG5cdGNvbnN0IHMxMyA9IHNpbiggKCBhICsgYyApIC8gMiApO1xuXG5cdGNvbnN0IGMxXzMgPSBjb3MoICggYSAtIGMgKSAvIDIgKTtcblx0Y29uc3QgczFfMyA9IHNpbiggKCBhIC0gYyApIC8gMiApO1xuXG5cdGNvbnN0IGMzXzEgPSBjb3MoICggYyAtIGEgKSAvIDIgKTtcblx0Y29uc3QgczNfMSA9IHNpbiggKCBjIC0gYSApIC8gMiApO1xuXG5cdHN3aXRjaCAoIG9yZGVyICkge1xuXG5cdFx0Y2FzZSAnWFlYJzpcblx0XHRcdHEuc2V0KCBjMiAqIHMxMywgczIgKiBjMV8zLCBzMiAqIHMxXzMsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1laWSc6XG5cdFx0XHRxLnNldCggczIgKiBzMV8zLCBjMiAqIHMxMywgczIgKiBjMV8zLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdaWFonOlxuXHRcdFx0cS5zZXQoIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIHMxMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAnWFpYJzpcblx0XHRcdHEuc2V0KCBjMiAqIHMxMywgczIgKiBzM18xLCBzMiAqIGMzXzEsIGMyICogYzEzICk7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ1lYWSc6XG5cdFx0XHRxLnNldCggczIgKiBjM18xLCBjMiAqIHMxMywgczIgKiBzM18xLCBjMiAqIGMxMyApO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlICdaWVonOlxuXHRcdFx0cS5zZXQoIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIHMxMywgYzIgKiBjMTMgKTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGhVdGlsczogLnNldFF1YXRlcm5pb25Gcm9tUHJvcGVyRXVsZXIoKSBlbmNvdW50ZXJlZCBhbiB1bmtub3duIG9yZGVyOiAnICsgb3JkZXIgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBEZW5vcm1hbGl6ZXMgdGhlIGdpdmVuIHZhbHVlIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gdHlwZWQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGRlbm9ybWFsaXplLlxuICogQHBhcmFtIHtUeXBlZEFycmF5fSBhcnJheSAtIFRoZSB0eXBlZCBhcnJheSB0aGF0IGRlZmluZXMgdGhlIGRhdGEgdHlwZSBvZiB0aGUgdmFsdWUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkZW5vcm1hbGl6ZSAoZmxvYXQpIHZhbHVlIGluIHRoZSByYW5nZSBgWzAsMV1gLlxuICovXG5mdW5jdGlvbiBkZW5vcm1hbGl6ZSggdmFsdWUsIGFycmF5ICkge1xuXG5cdHN3aXRjaCAoIGFycmF5LmNvbnN0cnVjdG9yICkge1xuXG5cdFx0Y2FzZSBGbG9hdDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiB2YWx1ZTtcblxuXHRcdGNhc2UgVWludDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiB2YWx1ZSAvIDQyOTQ5NjcyOTUuMDtcblxuXHRcdGNhc2UgVWludDE2QXJyYXk6XG5cblx0XHRcdHJldHVybiB2YWx1ZSAvIDY1NTM1LjA7XG5cblx0XHRjYXNlIFVpbnQ4QXJyYXk6XG5cblx0XHRcdHJldHVybiB2YWx1ZSAvIDI1NS4wO1xuXG5cdFx0Y2FzZSBJbnQzMkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5tYXgoIHZhbHVlIC8gMjE0NzQ4MzY0Ny4wLCAtMSApO1xuXG5cdFx0Y2FzZSBJbnQxNkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5tYXgoIHZhbHVlIC8gMzI3NjcuMCwgLTEgKTtcblxuXHRcdGNhc2UgSW50OEFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5tYXgoIHZhbHVlIC8gMTI3LjAsIC0xICk7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGNvbXBvbmVudCB0eXBlLicgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBnaXZlbiB2YWx1ZSBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIHR5cGVkIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBmbG9hdCB2YWx1ZSBpbiB0aGUgcmFuZ2UgYFswLDFdYCB0byBub3JtYWxpemUuXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGFycmF5IC0gVGhlIHR5cGVkIGFycmF5IHRoYXQgZGVmaW5lcyB0aGUgZGF0YSB0eXBlIG9mIHRoZSB2YWx1ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG5vcm1hbGl6ZSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKCB2YWx1ZSwgYXJyYXkgKSB7XG5cblx0c3dpdGNoICggYXJyYXkuY29uc3RydWN0b3IgKSB7XG5cblx0XHRjYXNlIEZsb2F0MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXG5cdFx0Y2FzZSBVaW50MzJBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogNDI5NDk2NzI5NS4wICk7XG5cblx0XHRjYXNlIFVpbnQxNkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiA2NTUzNS4wICk7XG5cblx0XHRjYXNlIFVpbnQ4QXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDI1NS4wICk7XG5cblx0XHRjYXNlIEludDMyQXJyYXk6XG5cblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCB2YWx1ZSAqIDIxNDc0ODM2NDcuMCApO1xuXG5cdFx0Y2FzZSBJbnQxNkFycmF5OlxuXG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggdmFsdWUgKiAzMjc2Ny4wICk7XG5cblx0XHRjYXNlIEludDhBcnJheTpcblxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQoIHZhbHVlICogMTI3LjAgKTtcblxuXHRcdGRlZmF1bHQ6XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgY29tcG9uZW50IHR5cGUuJyApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEBjbGFzc1xuICogQGNsYXNzZGVzYyBBIGNvbGxlY3Rpb24gb2YgbWF0aCB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqL1xuY29uc3QgTWF0aFV0aWxzID0ge1xuXHRERUcyUkFEOiBERUcyUkFELFxuXHRSQUQyREVHOiBSQUQyREVHLFxuXHQvKipcblx0ICogR2VuZXJhdGUgYSBbVVVJRF17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVW5pdmVyc2FsbHlfdW5pcXVlX2lkZW50aWZpZXJ9XG5cdCAqICh1bml2ZXJzYWxseSB1bmlxdWUgaWRlbnRpZmllcikuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVUlELlxuXHQgKi9cblx0Z2VuZXJhdGVVVUlEOiBnZW5lcmF0ZVVVSUQsXG5cdC8qKlxuXHQgKiBDbGFtcHMgdGhlIGdpdmVuIHZhbHVlIGJldHdlZW4gbWluIGFuZCBtYXguXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2xhbXAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSBUaGUgbWluIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIG1heCB2YWx1ZS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY2xhbXBlZCB2YWx1ZS5cblx0ICovXG5cdGNsYW1wOiBjbGFtcCxcblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBFdWNsaWRlYW4gbW9kdWxvIG9mIHRoZSBnaXZlbiBwYXJhbWV0ZXJzIHRoYXRcblx0ICogaXMgYCggKCBuICUgbSApICsgbSApICUgbWAuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gbiAtIFRoZSBmaXJzdCBwYXJhbWV0ZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtIC0gVGhlIHNlY29uZCBwYXJhbWV0ZXIuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIEV1Y2xpZGVhbiBtb2R1bG8uXG5cdCAqL1xuXHRldWNsaWRlYW5Nb2R1bG86IGV1Y2xpZGVhbk1vZHVsbyxcblx0LyoqXG5cdCAqIFBlcmZvcm1zIGEgbGluZWFyIG1hcHBpbmcgZnJvbSByYW5nZSBgPGExLCBhMj5gIHRvIHJhbmdlIGA8YjEsIGIyPmBcblx0ICogZm9yIHRoZSBnaXZlbiB2YWx1ZS5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIGJlIG1hcHBlZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGExIC0gTWluaW11bSB2YWx1ZSBmb3IgcmFuZ2UgQS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGEyIC0gTWF4aW11bSB2YWx1ZSBmb3IgcmFuZ2UgQS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGIxIC0gTWluaW11bSB2YWx1ZSBmb3IgcmFuZ2UgQi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGIyIC0gTWF4aW11bSB2YWx1ZSBmb3IgcmFuZ2UgQi5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWFwcGVkIHZhbHVlLlxuXHQgKi9cblx0bWFwTGluZWFyOiBtYXBMaW5lYXIsXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwZXJjZW50YWdlIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAgb2YgdGhlIGdpdmVuIHZhbHVlXG5cdCAqIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgcG9pbnQuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSBzdGFydCBwb2ludFxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBlbmQgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIEEgdmFsdWUgYmV0d2VlbiBzdGFydCBhbmQgZW5kLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICovXG5cdGludmVyc2VMZXJwOiBpbnZlcnNlTGVycCxcblx0LyoqXG5cdCAqIFJldHVybnMgYSB2YWx1ZSBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgZnJvbSB0d28ga25vd24gcG9pbnRzIGJhc2VkIG9uIHRoZSBnaXZlbiBpbnRlcnZhbCAtXG5cdCAqIGB0ID0gMGAgd2lsbCByZXR1cm4gYHhgIGFuZCBgdCA9IDFgIHdpbGwgcmV0dXJuIGB5YC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHN0YXJ0IHBvaW50XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGVuZCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IgaW4gdGhlIGNsb3NlZCBpbnRlcnZhbCBgWzAsIDFdYC5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuXHQgKi9cblx0bGVycDogbGVycCxcblx0LyoqXG5cdCAqIFNtb290aGx5IGludGVycG9sYXRlIGEgbnVtYmVyIGZyb20gYHhgIHRvIGB5YCBpbiAgYSBzcHJpbmctbGlrZSBtYW5uZXIgdXNpbmcgYSBkZWx0YVxuXHQgKiB0aW1lIHRvIG1haW50YWluIGZyYW1lIHJhdGUgaW5kZXBlbmRlbnQgbW92ZW1lbnQuIEZvciBkZXRhaWxzLCBzZWVcblx0ICogW0ZyYW1lIHJhdGUgaW5kZXBlbmRlbnQgZGFtcGluZyB1c2luZyBsZXJwXXtAbGluayBodHRwOi8vd3d3LnJvcnlkcmlzY29sbC5jb20vMjAxNi8wMy8wNy9mcmFtZS1yYXRlLWluZGVwZW5kZW50LWRhbXBpbmctdXNpbmctbGVycC99LlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZXRob2Rcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgY3VycmVudCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdGFyZ2V0IHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbGFtYmRhIC0gQSBoaWdoZXIgbGFtYmRhIHZhbHVlIHdpbGwgbWFrZSB0aGUgbW92ZW1lbnQgbW9yZSBzdWRkZW4sXG5cdCAqIGFuZCBhIGxvd2VyIHZhbHVlIHdpbGwgbWFrZSB0aGUgbW92ZW1lbnQgbW9yZSBncmFkdWFsLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHQgLSBEZWx0YSB0aW1lIGluIHNlY29uZHMuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGludGVycG9sYXRlZCB2YWx1ZS5cblx0ICovXG5cdGRhbXA6IGRhbXAsXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdmFsdWUgdGhhdCBhbHRlcm5hdGVzIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gYGxlbmd0aGAgcGFyYW1ldGVyLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZXRob2Rcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgdG8gcGluZ3BvbmcuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTFdIC0gVGhlIHBvc2l0aXZlIHZhbHVlIHRoZSBmdW5jdGlvbiB3aWxsIHBpbmdwb25nIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbHRlcm5hdGVkIHZhbHVlLlxuXHQgKi9cblx0cGluZ3Bvbmc6IHBpbmdwb25nLFxuXHQvKipcblx0ICogUmV0dXJucyBhIHZhbHVlIGluIHRoZSByYW5nZSBgWzAsMV1gIHRoYXQgcmVwcmVzZW50cyB0aGUgcGVyY2VudGFnZSB0aGF0IGB4YCBoYXNcblx0ICogbW92ZWQgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAsIGJ1dCBzbW9vdGhlZCBvciBzbG93ZWQgZG93biB0aGUgY2xvc2VyIGB4YCBpcyB0b1xuXHQgKiB0aGUgYG1pbmAgYW5kIGBtYXhgLlxuXHQgKlxuXHQgKiBTZWUgW1Ntb290aHN0ZXBde0BsaW5rIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU21vb3Roc3RlcH0gZm9yIG1vcmUgZGV0YWlscy5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIGV2YWx1YXRlIGJhc2VkIG9uIGl0cyBwb3NpdGlvbiBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gVGhlIG1pbiB2YWx1ZS4gQW55IHggdmFsdWUgYmVsb3cgbWluIHdpbGwgYmUgYDBgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gVGhlIG1heCB2YWx1ZS4gQW55IHggdmFsdWUgYWJvdmUgbWF4IHdpbGwgYmUgYDFgLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbHRlcm5hdGVkIHZhbHVlLlxuXHQgKi9cblx0c21vb3Roc3RlcDogc21vb3Roc3RlcCxcblx0LyoqXG5cdCAqIEEgW3ZhcmlhdGlvbiBvbiBzbW9vdGhzdGVwXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwI1ZhcmlhdGlvbnN9XG5cdCAqIHRoYXQgaGFzIHplcm8gMXN0IGFuZCAybmQgb3JkZXIgZGVyaXZhdGl2ZXMgYXQgeD0wIGFuZCB4PTEuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSB0byBldmFsdWF0ZSBiYXNlZCBvbiBpdHMgcG9zaXRpb24gYmV0d2VlbiBtaW4gYW5kIG1heC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW4gdmFsdWUuIEFueSB4IHZhbHVlIGJlbG93IG1pbiB3aWxsIGJlIGAwYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heCAtIFRoZSBtYXggdmFsdWUuIEFueSB4IHZhbHVlIGFib3ZlIG1heCB3aWxsIGJlIGAxYC5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgYWx0ZXJuYXRlZCB2YWx1ZS5cblx0ICovXG5cdHNtb290aGVyc3RlcDogc21vb3RoZXJzdGVwLFxuXHQvKipcblx0ICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIGZyb20gYDxsb3csIGhpZ2g+YCBpbnRlcnZhbC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgLSBUaGUgbG93ZXIgdmFsdWUgYm91bmRhcnkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIC0gVGhlIHVwcGVyIHZhbHVlIGJvdW5kYXJ5XG5cdCAqIEByZXR1cm4ge251bWJlcn0gQSByYW5kb20gaW50ZWdlci5cblx0ICovXG5cdHJhbmRJbnQ6IHJhbmRJbnQsXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcmFuZG9tIGZsb2F0IGZyb20gYDxsb3csIGhpZ2g+YCBpbnRlcnZhbC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgLSBUaGUgbG93ZXIgdmFsdWUgYm91bmRhcnkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIC0gVGhlIHVwcGVyIHZhbHVlIGJvdW5kYXJ5XG5cdCAqIEByZXR1cm4ge251bWJlcn0gQSByYW5kb20gZmxvYXQuXG5cdCAqL1xuXHRyYW5kRmxvYXQ6IHJhbmRGbG9hdCxcblx0LyoqXG5cdCAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciBmcm9tIGA8LXJhbmdlLzIsIHJhbmdlLzI+YCBpbnRlcnZhbC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSByYW5nZSAtIERlZmluZXMgdGhlIHZhbHVlIHJhbmdlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IEEgcmFuZG9tIGZsb2F0LlxuXHQgKi9cblx0cmFuZEZsb2F0U3ByZWFkOiByYW5kRmxvYXRTcHJlYWQsXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZGV0ZXJtaW5pc3RpYyBwc2V1ZG8tcmFuZG9tIGZsb2F0IGluIHRoZSBpbnRlcnZhbCBgWzAsIDFdYC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbc10gLSBUaGUgaW50ZWdlciBzZWVkLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IEEgcmFuZG9tIGZsb2F0LlxuXHQgKi9cblx0c2VlZGVkUmFuZG9tOiBzZWVkZWRSYW5kb20sXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBkZWdyZWVzIHRvIHJhZGlhbnMuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGVncmVlcyAtIEEgdmFsdWUgaW4gZGVncmVlcy5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29udmVydGVkIHZhbHVlIGluIHJhZGlhbnMuXG5cdCAqL1xuXHRkZWdUb1JhZDogZGVnVG9SYWQsXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyByYWRpYW5zIHRvIGRlZ3JlZXMuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmFkaWFucyAtIEEgdmFsdWUgaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29udmVydGVkIHZhbHVlIGluIGRlZ3JlZXMuXG5cdCAqL1xuXHRyYWRUb0RlZzogcmFkVG9EZWcsXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gbnVtYmVyIGlzIGEgcG93ZXIgb2YgdHdvLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZXRob2Rcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBudW1iZXIgaXMgYSBwb3dlciBvZiB0d28gb3Igbm90LlxuXHQgKi9cblx0aXNQb3dlck9mVHdvOiBpc1Bvd2VyT2ZUd28sXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzbWFsbGVzdCBwb3dlciBvZiB0d28gdGhhdCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlci5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBmaW5kIGEgUE9UIGZvci5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgc21hbGxlc3QgcG93ZXIgb2YgdHdvIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIuXG5cdCAqL1xuXHRjZWlsUG93ZXJPZlR3bzogY2VpbFBvd2VyT2ZUd28sXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsYXJnZXN0IHBvd2VyIG9mIHR3byB0aGF0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBtZXRob2Rcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGZpbmQgYSBQT1QgZm9yLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsYXJnZXN0IHBvd2VyIG9mIHR3byB0aGF0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyLlxuXHQgKi9cblx0Zmxvb3JQb3dlck9mVHdvOiBmbG9vclBvd2VyT2ZUd28sXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBxdWF0ZXJuaW9uIGZyb20gdGhlIFtJbnRyaW5zaWMgUHJvcGVyIEV1bGVyIEFuZ2xlc117QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRXVsZXJfYW5nbGVzfVxuXHQgKiBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBhbmdsZXMgYW5kIG9yZGVyLlxuXHQgKlxuXHQgKiBSb3RhdGlvbnMgYXJlIGFwcGxpZWQgdG8gdGhlIGF4ZXMgaW4gdGhlIG9yZGVyIHNwZWNpZmllZCBieSBvcmRlcjpcblx0ICogcm90YXRpb24gYnkgYW5nbGUgYGFgIGlzIGFwcGxpZWQgZmlyc3QsIHRoZW4gYnkgYW5nbGUgYGJgLCB0aGVuIGJ5IGFuZ2xlIGBjYC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAbWV0aG9kXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBxdWF0ZXJuaW9uIHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGEgLSBUaGUgcm90YXRpb24gYXBwbGllZCB0byB0aGUgZmlyc3QgYXhpcywgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGIgLSBUaGUgcm90YXRpb24gYXBwbGllZCB0byB0aGUgc2Vjb25kIGF4aXMsIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjIC0gVGhlIHJvdGF0aW9uIGFwcGxpZWQgdG8gdGhlIHRoaXJkIGF4aXMsIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7KCdYWVgnfCdYWlgnfCdZWFknfCdZWlknfCdaWFonfCdaWVonKX0gb3JkZXIgLSBBIHN0cmluZyBzcGVjaWZ5aW5nIHRoZSBheGVzIG9yZGVyLlxuXHQgKi9cblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcjogc2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcixcblx0LyoqXG5cdCAqIE5vcm1hbGl6ZXMgdGhlIGdpdmVuIHZhbHVlIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gdHlwZWQgYXJyYXkuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgZmxvYXQgdmFsdWUgaW4gdGhlIHJhbmdlIGBbMCwxXWAgdG8gbm9ybWFsaXplLlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGFycmF5IC0gVGhlIHR5cGVkIGFycmF5IHRoYXQgZGVmaW5lcyB0aGUgZGF0YSB0eXBlIG9mIHRoZSB2YWx1ZS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbm9ybWFsaXplIHZhbHVlLlxuXHQgKi9cblx0bm9ybWFsaXplOiBub3JtYWxpemUsXG5cdC8qKlxuXHQgKiBEZW5vcm1hbGl6ZXMgdGhlIGdpdmVuIHZhbHVlIGFjY29yZGluZyB0byB0aGUgZ2l2ZW4gdHlwZWQgYXJyYXkuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQG1ldGhvZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gZGVub3JtYWxpemUuXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gYXJyYXkgLSBUaGUgdHlwZWQgYXJyYXkgdGhhdCBkZWZpbmVzIHRoZSBkYXRhIHR5cGUgb2YgdGhlIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkZW5vcm1hbGl6ZSAoZmxvYXQpIHZhbHVlIGluIHRoZSByYW5nZSBgWzAsMV1gLlxuXHQgKi9cblx0ZGVub3JtYWxpemU6IGRlbm9ybWFsaXplXG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIDJEIHZlY3Rvci4gQSAyRCB2ZWN0b3IgaXMgYW4gb3JkZXJlZCBwYWlyIG9mIG51bWJlcnNcbiAqIChsYWJlbGVkIHggYW5kIHkpLCB3aGljaCBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQgYSBudW1iZXIgb2YgdGhpbmdzLCBzdWNoIGFzOlxuICpcbiAqIC0gQSBwb2ludCBpbiAyRCBzcGFjZSAoaS5lLiBhIHBvc2l0aW9uIG9uIGEgcGxhbmUpLlxuICogLSBBIGRpcmVjdGlvbiBhbmQgbGVuZ3RoIGFjcm9zcyBhIHBsYW5lLiBJbiB0aHJlZS5qcyB0aGUgbGVuZ3RoIHdpbGxcbiAqIGFsd2F5cyBiZSB0aGUgRXVjbGlkZWFuIGRpc3RhbmNlKHN0cmFpZ2h0LWxpbmUgZGlzdGFuY2UpIGZyb20gYCgwLCAwKWAgdG8gYCh4LCB5KWBcbiAqIGFuZCB0aGUgZGlyZWN0aW9uIGlzIGFsc28gbWVhc3VyZWQgZnJvbSBgKDAsIDApYCB0b3dhcmRzIGAoeCwgeSlgLlxuICogLSBBbnkgYXJiaXRyYXJ5IG9yZGVyZWQgcGFpciBvZiBudW1iZXJzLlxuICpcbiAqIFRoZXJlIGFyZSBvdGhlciB0aGluZ3MgYSAyRCB2ZWN0b3IgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50LCBzdWNoIGFzXG4gKiBtb21lbnR1bSB2ZWN0b3JzLCBjb21wbGV4IG51bWJlcnMgYW5kIHNvIG9uLCBob3dldmVyIHRoZXNlIGFyZSB0aGUgbW9zdFxuICogY29tbW9uIHVzZXMgaW4gdGhyZWUuanMuXG4gKlxuICogSXRlcmF0aW5nIHRocm91Z2ggYSB2ZWN0b3IgaW5zdGFuY2Ugd2lsbCB5aWVsZCBpdHMgY29tcG9uZW50cyBgKHgsIHkpYCBpblxuICogdGhlIGNvcnJlc3BvbmRpbmcgb3JkZXIuXG4gKiBgYGBqc1xuICogY29uc3QgYSA9IG5ldyBUSFJFRS5WZWN0b3IyKCAwLCAxICk7XG4gKlxuICogLy9ubyBhcmd1bWVudHM7IHdpbGwgYmUgaW5pdGlhbGlzZWQgdG8gKDAsIDApXG4gKiBjb25zdCBiID0gbmV3IFRIUkVFLlZlY3RvcjIoICk7XG4gKlxuICogY29uc3QgZCA9IGEuZGlzdGFuY2VUbyggYiApO1xuICogYGBgXG4gKi9cbmNsYXNzIFZlY3RvcjIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IDJEIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIHggdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSB5IHZhbHVlIG9mIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdFZlY3RvcjIucHJvdG90eXBlLmlzVmVjdG9yMiA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgeCB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB5IHZhbHVlIG9mIHRoaXMgdmVjdG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnkgPSB5O1xuXG5cdH1cblxuXHQvKipcblx0ICogQWxpYXMgZm9yIHtAbGluayBWZWN0b3IyI3h9LlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKi9cblx0Z2V0IHdpZHRoKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueDtcblxuXHR9XG5cblx0c2V0IHdpZHRoKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMueCA9IHZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWxpYXMgZm9yIHtAbGluayBWZWN0b3IyI3l9LlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKi9cblx0Z2V0IGhlaWdodCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnk7XG5cblx0fVxuXG5cdHNldCBoZWlnaHQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy55ID0gdmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgb2YgdGhlIHggY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSBvZiB0aGUgeSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0KCB4LCB5ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyB0byB0aGUgc2FtZSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSB2YWx1ZSB0byBzZXQgZm9yIGFsbCB2ZWN0b3IgY29tcG9uZW50cy5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvcidzIHggY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0WCggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvcidzIHkgY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0WSggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyB0byBzZXQgYSB2ZWN0b3IgY29tcG9uZW50IHdpdGggYW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb21wb25lbnQgaW5kZXguIGAwYCBlcXVhbHMgdG8geCwgYDFgIGVxdWFscyB0byB5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldENvbXBvbmVudCggaW5kZXgsIHZhbHVlICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgdmVjdG9yIGNvbXBvbmVudCB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNvbXBvbmVudCBpbmRleC4gYDBgIGVxdWFscyB0byB4LCBgMWAgZXF1YWxzIHRvIHkuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gQSB2ZWN0b3IgY29tcG9uZW50IHZhbHVlLlxuXHQgKi9cblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gY29weS5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjb3B5KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFkZCggdiApIHtcblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlIHRvIGFsbCBjb21wb25lbnRzIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxhciB0byBhZGQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YWRkU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIHZlY3RvcnMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gYiAtIFRoZSBzZWNvbmQgdmVjdG9yLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFkZFZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3Igc2NhbGVkIGJ5IHRoZSBnaXZlbiBmYWN0b3IgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHMgLSBUaGUgZmFjdG9yIHRoYXQgc2NhbGVzIGB2YC5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRhZGRTY2FsZWRWZWN0b3IoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3VidHJhY3RzIHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIHN1YnRyYWN0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHN1YiggdiApIHtcblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3VidHJhY3RzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgZnJvbSBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gc3VidHJhY3QuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSBhIC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhlIGdpdmVuIHZlY3RvciB3aXRoIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gbXVsdGlwbHkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bXVsdGlwbHkoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSB3aXRoIGFsbCBjb21wb25lbnRzIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHRvIG11bHRpcGx5LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERpdmlkZXMgdGhpcyBpbnN0YW5jZSBieSB0aGUgZ2l2ZW4gdmVjdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIGRpdmlkZS5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRkaXZpZGUoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERpdmlkZXMgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHNjYWxhci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gZGl2aWRlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3IgKHdpdGggYW4gaW1wbGljaXQgMSBhcyB0aGUgM3JkIGNvbXBvbmVudCkgYnlcblx0ICogdGhlIGdpdmVuIDN4MyBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBtYXRyaXggdG8gYXBwbHkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdO1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgNyBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIHZlY3RvcidzIHggb3IgeVxuXHQgKiB2YWx1ZSwgcmVwbGFjZSB0aGF0IHZhbHVlIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbWluIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG1pbiggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIGdpdmVuIHZlY3RvcidzIHggb3IgeVxuXHQgKiB2YWx1ZSwgcmVwbGFjZSB0aGF0IHZhbHVlIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgbWF4IHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG1heCggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIG1heCB2ZWN0b3IncyB4IG9yIHlcblx0ICogdmFsdWUsIGl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlLlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHggb3IgeSB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIG1pbiB2ZWN0b3IncyB4IG9yIHkgdmFsdWUsXG5cdCAqIGl0IGlzIHJlcGxhY2VkIGJ5IHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1pbiAtIFRoZSBtaW5pbXVtIHggYW5kIHkgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1heCAtIFRoZSBtYXhpbXVtIHggYW5kIHkgdmFsdWVzIGluIHRoZSBkZXNpcmVkIHJhbmdlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGNsYW1wKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW4ueCwgbWF4LnggKTtcblx0XHR0aGlzLnkgPSBjbGFtcCggdGhpcy55LCBtaW4ueSwgbWF4LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogSWYgdGhpcyB2ZWN0b3IncyB4IG9yIHkgdmFsdWVzIGFyZSBncmVhdGVyIHRoYW4gdGhlIG1heCB2YWx1ZSwgdGhleSBhcmVcblx0ICogcmVwbGFjZWQgYnkgdGhlIG1heCB2YWx1ZS5cblx0ICogSWYgdGhpcyB2ZWN0b3IncyB4IG9yIHkgdmFsdWVzIGFyZSBsZXNzIHRoYW4gdGhlIG1pbiB2YWx1ZSwgdGhleSBhcmVcblx0ICogcmVwbGFjZWQgYnkgdGhlIG1pbiB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1pblZhbCAtIFRoZSBtaW5pbXVtIHZhbHVlIHRoZSBjb21wb25lbnRzIHdpbGwgYmUgY2xhbXBlZCB0by5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heFZhbCAtIFRoZSBtYXhpbXVtIHZhbHVlIHRoZSBjb21wb25lbnRzIHdpbGwgYmUgY2xhbXBlZCB0by5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjbGFtcFNjYWxhciggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBjbGFtcCggdGhpcy54LCBtaW5WYWwsIG1heFZhbCApO1xuXHRcdHRoaXMueSA9IGNsYW1wKCB0aGlzLnksIG1pblZhbCwgbWF4VmFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZhbHVlLCBpdCBpcyByZXBsYWNlZCBieVxuXHQgKiB0aGUgbWF4IHZhbHVlLlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhlIG1pbiB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkgdGhlXG5cdCAqIG1pbiB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW5pbXVtIHZhbHVlIHRoZSB2ZWN0b3IgbGVuZ3RoIHdpbGwgYmUgY2xhbXBlZCB0by5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heCAtIFRoZSBtYXhpbXVtIHZhbHVlIHRoZSB2ZWN0b3IgbGVuZ3RoIHdpbGwgYmUgY2xhbXBlZCB0by5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjbGFtcExlbmd0aCggbWluLCBtYXggKSB7XG5cblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBjbGFtcCggbGVuZ3RoLCBtaW4sIG1heCApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgdXAgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgdG93YXJkcyB6ZXJvICh1cCBpZiBuZWdhdGl2ZSxcblx0ICogZG93biBpZiBwb3NpdGl2ZSkgdG8gYW4gaW50ZWdlciB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnZlcnRzIHRoaXMgdmVjdG9yIC0gaS5lLiBzZXRzIHggPSAteCBhbmQgeSA9IC15LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG5lZ2F0ZSgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgZ2l2ZW4gdmVjdG9yIHdpdGggdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBkb3QgcHJvZHVjdCB3aXRoLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByZXN1bHQgb2YgdGhlIGRvdCBwcm9kdWN0LlxuXHQgKi9cblx0ZG90KCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIGdpdmVuIHZlY3RvciB3aXRoIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gdiAtIFRoZSB2ZWN0b3IgdG8gY29tcHV0ZSB0aGUgY3Jvc3MgcHJvZHVjdCB3aXRoLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByZXN1bHQgb2YgdGhlIGNyb3NzIHByb2R1Y3QuXG5cdCAqL1xuXHRjcm9zcyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgc3F1YXJlIG9mIHRoZSBFdWNsaWRlYW4gbGVuZ3RoIChzdHJhaWdodC1saW5lIGxlbmd0aCkgZnJvbVxuXHQgKiAoMCwgMCkgdG8gKHgsIHkpLiBJZiB5b3UgYXJlIGNvbXBhcmluZyB0aGUgbGVuZ3RocyBvZiB2ZWN0b3JzLCB5b3Ugc2hvdWxkXG5cdCAqIGNvbXBhcmUgdGhlIGxlbmd0aCBzcXVhcmVkIGluc3RlYWQgYXMgaXQgaXMgc2xpZ2h0bHkgbW9yZSBlZmZpY2llbnQgdG8gY2FsY3VsYXRlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlICBFdWNsaWRlYW4gbGVuZ3RoIChzdHJhaWdodC1saW5lIGxlbmd0aCkgZnJvbSAoMCwgMCkgdG8gKHgsIHkpLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRsZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBNYW5oYXR0YW4gbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRtYW5oYXR0YW5MZW5ndGgoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhpcyB2ZWN0b3IgdG8gYSB1bml0IHZlY3RvciAtIHRoYXQgaXMsIHNldHMgaXQgZXF1YWwgdG8gYSB2ZWN0b3Jcblx0ICogd2l0aCB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhpcyBvbmUsIGJ1dCB3aXRoIGEgdmVjdG9yIGxlbmd0aCBvZiBgMWAuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIG9mIHRoaXMgdmVjdG9yIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKi9cblx0YW5nbGUoKSB7XG5cblx0XHRjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoIC0gdGhpcy55LCAtIHRoaXMueCApICsgTWF0aC5QSTtcblxuXHRcdHJldHVybiBhbmdsZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvciBhbmQgdGhpcyBpbnN0YW5jZSBpbiByYWRpYW5zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGFuZ2xlIHdpdGguXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqL1xuXHRhbmdsZVRvKCB2ICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcblxuXHRcdGNvbnN0IHRoZXRhID0gdGhpcy5kb3QoIHYgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcblxuXHRcdHJldHVybiBNYXRoLmFjb3MoIGNsYW1wKCB0aGV0YSwgLTEsIDEgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZS5cblx0ICovXG5cdGRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKiBJZiB5b3UgYXJlIGp1c3QgY29tcGFyaW5nIHRoZSBkaXN0YW5jZSB3aXRoIGFub3RoZXIgZGlzdGFuY2UsIHlvdSBzaG91bGQgY29tcGFyZVxuXHQgKiB0aGUgZGlzdGFuY2Ugc3F1YXJlZCBpbnN0ZWFkIGFzIGl0IGlzIHNsaWdodGx5IG1vcmUgZWZmaWNpZW50IHRvIGNhbGN1bGF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBzcXVhcmVkIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmVkIGRpc3RhbmNlLlxuXHQgKi9cblx0ZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7XG5cblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIE1hbmhhdHRhbiBkaXN0YW5jZSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBNYW5oYXR0YW4gZGlzdGFuY2UgdG8uXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIE1hbmhhdHRhbiBkaXN0YW5jZS5cblx0ICovXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCAtIHYueCApICsgTWF0aC5hYnMoIHRoaXMueSAtIHYueSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIHZlY3RvciB0byBhIHZlY3RvciB3aXRoIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB0aGlzIG9uZSwgYnV0XG5cdCAqIHdpdGggdGhlIHNwZWNpZmllZCBsZW5ndGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgbmV3IGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3IgYW5kIHRoaXMgaW5zdGFuY2UsIHdoZXJlXG5cdCAqIGFscGhhIGlzIHRoZSBwZXJjZW50IGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIC0gYWxwaGEgPSAwIHdpbGwgYmUgdGhpc1xuXHQgKiB2ZWN0b3IsIGFuZCBhbHBoYSA9IDEgd2lsbCBiZSB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIGludGVycG9sYXRlIHRvd2FyZHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciwgdHlwaWNhbGx5IGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3JzLCB3aGVyZSBhbHBoYSBpcyB0aGUgcGVyY2VudFxuXHQgKiBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSAtIGFscGhhID0gMCB3aWxsIGJlIGZpcnN0IHZlY3RvciwgYW5kIGFscGhhID0gMSB3aWxsXG5cdCAqIGJlIHRoZSBzZWNvbmQgb25lLiBUaGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYxIC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSB2MiAtIFRoZSBzZWNvbmQgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IsIHR5cGljYWxseSBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwgMV1gLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyB2ZWN0b3IgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHYgLSBUaGUgdmVjdG9yIHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgdmVjdG9yIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhpcyB2ZWN0b3IncyB4IHZhbHVlIHRvIGJlIGBhcnJheVsgb2Zmc2V0IF1gIGFuZCB5XG5cdCAqIHZhbHVlIHRvIGJlIGBhcnJheVsgb2Zmc2V0ICsgMSBdYC5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnQgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBvZmZzZXQgaW50byB0aGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXcml0ZXMgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgdG8gdGhlIGdpdmVuIGFycmF5LiBJZiBubyBhcnJheSBpcyBwcm92aWRlZCxcblx0ICogdGhlIG1ldGhvZCByZXR1cm5zIGEgbmV3IGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFthcnJheT1bXV0gLSBUaGUgdGFyZ2V0IGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIHZlY3RvciBjb21wb25lbnRzLlxuXHQgKi9cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBmcm9tIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaG9sZGluZyB2ZWN0b3IgZGF0YS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJvdGF0ZXMgdGhpcyB2ZWN0b3IgYXJvdW5kIHRoZSBnaXZlbiBjZW50ZXIgYnkgdGhlIGdpdmVuIGFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IGNlbnRlciAtIFRoZSBwb2ludCBhcm91bmQgd2hpY2ggdG8gcm90YXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgdG8gcm90YXRlLCBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHJvdGF0ZUFyb3VuZCggY2VudGVyLCBhbmdsZSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKSwgcyA9IE1hdGguc2luKCBhbmdsZSApO1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCAtIGNlbnRlci54O1xuXHRcdGNvbnN0IHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcblxuXHRcdHRoaXMueCA9IHggKiBjIC0geSAqIHMgKyBjZW50ZXIueDtcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgZWFjaCBjb21wb25lbnQgb2YgdGhpcyB2ZWN0b3IgdG8gYSBwc2V1ZG8tcmFuZG9tIHZhbHVlIGJldHdlZW4gYDBgIGFuZFxuXHQgKiBgMWAsIGV4Y2x1ZGluZyBgMWAuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0cmFuZG9tKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgM3gzIG1hdHJpeC5cbiAqXG4gKiBBIE5vdGUgb24gUm93LU1ham9yIGFuZCBDb2x1bW4tTWFqb3IgT3JkZXJpbmc6XG4gKlxuICogVGhlIGNvbnN0cnVjdG9yIGFuZCB7QGxpbmsgTWF0cml4MyNzZXR9IG1ldGhvZCB0YWtlIGFyZ3VtZW50cyBpblxuICogW3Jvdy1tYWpvcl17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUm93LV9hbmRfY29sdW1uLW1ham9yX29yZGVyI0NvbHVtbi1tYWpvcl9vcmRlcn1cbiAqIG9yZGVyLCB3aGlsZSBpbnRlcm5hbGx5IHRoZXkgYXJlIHN0b3JlZCBpbiB0aGUge0BsaW5rIE1hdHJpeDMjZWxlbWVudHN9IGFycmF5IGluIGNvbHVtbi1tYWpvciBvcmRlci5cbiAqIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nOlxuICogYGBganNcbiAqIGNvbnN0IG0gPSBuZXcgVEhSRUUuTWF0cml4KCk7XG4gKiBtLnNldCggMTEsIDEyLCAxMyxcbiAqICAgICAgICAyMSwgMjIsIDIzLFxuICogICAgICAgIDMxLCAzMiwgMzMgKTtcbiAqIGBgYFxuICogd2lsbCByZXN1bHQgaW4gdGhlIGVsZW1lbnRzIGFycmF5IGNvbnRhaW5pbmc6XG4gKiBgYGBqc1xuICogbS5lbGVtZW50cyA9IFsgMTEsIDIxLCAzMSxcbiAqICAgICAgICAgICAgICAgIDEyLCAyMiwgMzIsXG4gKiAgICAgICAgICAgICAgICAxMywgMjMsIDMzIF07XG4gKiBgYGBcbiAqIGFuZCBpbnRlcm5hbGx5IGFsbCBjYWxjdWxhdGlvbnMgYXJlIHBlcmZvcm1lZCB1c2luZyBjb2x1bW4tbWFqb3Igb3JkZXJpbmcuXG4gKiBIb3dldmVyLCBhcyB0aGUgYWN0dWFsIG9yZGVyaW5nIG1ha2VzIG5vIGRpZmZlcmVuY2UgbWF0aGVtYXRpY2FsbHkgYW5kXG4gKiBtb3N0IHBlb3BsZSBhcmUgdXNlZCB0byB0aGlua2luZyBhYm91dCBtYXRyaWNlcyBpbiByb3ctbWFqb3Igb3JkZXIsIHRoZVxuICogdGhyZWUuanMgZG9jdW1lbnRhdGlvbiBzaG93cyBtYXRyaWNlcyBpbiByb3ctbWFqb3Igb3JkZXIuIEp1c3QgYmVhciBpblxuICogbWluZCB0aGF0IGlmIHlvdSBhcmUgcmVhZGluZyB0aGUgc291cmNlIGNvZGUsIHlvdSdsbCBoYXZlIHRvIHRha2UgdGhlXG4gKiB0cmFuc3Bvc2Ugb2YgYW55IG1hdHJpY2VzIG91dGxpbmVkIGhlcmUgdG8gbWFrZSBzZW5zZSBvZiB0aGUgY2FsY3VsYXRpb25zLlxuICovXG5jbGFzcyBNYXRyaXgzIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyAzeDMgbWF0cml4LiBUaGUgYXJndW1lbnRzIGFyZSBzdXBwb3NlZCB0byBiZVxuXHQgKiBpbiByb3ctbWFqb3Igb3JkZXIuIElmIG5vIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjb25zdHJ1Y3RvclxuXHQgKiBpbml0aWFsaXplcyB0aGUgbWF0cml4IGFzIGFuIGlkZW50aXR5IG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMTFdIC0gMS0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24xMl0gLSAxLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjEzXSAtIDEtMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMjFdIC0gMi0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24yMl0gLSAyLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjIzXSAtIDItMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMzFdIC0gMy0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24zMl0gLSAzLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjMzXSAtIDMtMyBtYXRyaXggZWxlbWVudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0TWF0cml4My5wcm90b3R5cGUuaXNNYXRyaXgzID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY29sdW1uLW1ham9yIGxpc3Qgb2YgbWF0cml4IHZhbHVlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxudW1iZXI+fVxuXHRcdCAqL1xuXHRcdHRoaXMuZWxlbWVudHMgPSBbXG5cblx0XHRcdDEsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0XTtcblxuXHRcdGlmICggbjExICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0KCBuMTEsIG4xMiwgbjEzLCBuMjEsIG4yMiwgbjIzLCBuMzEsIG4zMiwgbjMzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBlbGVtZW50cyBvZiB0aGUgbWF0cml4LlRoZSBhcmd1bWVudHMgYXJlIHN1cHBvc2VkIHRvIGJlXG5cdCAqIGluIHJvdy1tYWpvciBvcmRlci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMTFdIC0gMS0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24xMl0gLSAxLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjEzXSAtIDEtMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMjFdIC0gMi0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24yMl0gLSAyLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjIzXSAtIDItMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMzFdIC0gMy0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24zMl0gLSAzLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjMzXSAtIDMtMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRzZXQoIG4xMSwgbjEyLCBuMTMsIG4yMSwgbjIyLCBuMjMsIG4zMSwgbjMyLCBuMzMgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgMSBdID0gbjIxOyB0ZVsgMiBdID0gbjMxO1xuXHRcdHRlWyAzIF0gPSBuMTI7IHRlWyA0IF0gPSBuMjI7IHRlWyA1IF0gPSBuMzI7XG5cdFx0dGVbIDYgXSA9IG4xMzsgdGVbIDcgXSA9IG4yMzsgdGVbIDggXSA9IG4zMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCB0byB0aGUgM3gzIGlkZW50aXR5IG1hdHJpeC5cblx0ICpcblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRpZGVudGl0eSgpIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCxcblx0XHRcdDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBtYXRyaXggdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXgzfSBtIC0gVGhlIG1hdHJpeCB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGNvcHkoIG0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTtcblx0XHR0ZVsgMyBdID0gbWVbIDMgXTsgdGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdO1xuXHRcdHRlWyA2IF0gPSBtZVsgNiBdOyB0ZVsgNyBdID0gbWVbIDcgXTsgdGVbIDggXSA9IG1lWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBiYXNpcyBvZiB0aGlzIG1hdHJpeCBpbnRvIHRoZSB0aHJlZSBheGlzIHZlY3RvcnMgcHJvdmlkZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30geEF4aXMgLSBUaGUgYmFzaXMncyB4IGF4aXMuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30geUF4aXMgLSBUaGUgYmFzaXMncyB5IGF4aXMuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gekF4aXMgLSBUaGUgYmFzaXMncyB6IGF4aXMuXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0ZXh0cmFjdEJhc2lzKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0eEF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDAgKTtcblx0XHR5QXhpcy5zZXRGcm9tTWF0cml4M0NvbHVtbiggdGhpcywgMSApO1xuXHRcdHpBeGlzLnNldEZyb21NYXRyaXgzQ29sdW1uKCB0aGlzLCAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB0aGlzIG1hdHJpeCB0byB0aGUgdXBwZXIgM3gzIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIDR4NCBtYXRyaXguXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0c2V0RnJvbU1hdHJpeDQoIG0gKSB7XG5cblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0bWVbIDAgXSwgbWVbIDQgXSwgbWVbIDggXSxcblx0XHRcdG1lWyAxIF0sIG1lWyA1IF0sIG1lWyA5IF0sXG5cdFx0XHRtZVsgMiBdLCBtZVsgNiBdLCBtZVsgMTAgXVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUG9zdC1tdWx0aXBsaWVzIHRoaXMgbWF0cml4IGJ5IHRoZSBnaXZlbiAzeDMgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgbWF0cml4IHRvIG11bHRpcGx5IHdpdGguXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCB0aGlzLCBtICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtbXVsdGlwbGllcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gM3gzIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXgzfSBtIC0gVGhlIG1hdHJpeCB0byBtdWx0aXBseSB3aXRoLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdHByZW11bHRpcGx5KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggbSwgdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogTXVsdGlwbGVzIHRoZSBnaXZlbiAzeDMgbWF0cmljZXMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0XG5cdCAqIGluIHRoaXMgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IGEgLSBUaGUgZmlyc3QgbWF0cml4LlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IGIgLSBUaGUgc2Vjb25kIG1hdHJpeC5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtdWx0aXBseU1hdHJpY2VzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdGNvbnN0IGJlID0gYi5lbGVtZW50cztcblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgMyBdLCBhMTMgPSBhZVsgNiBdO1xuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA0IF0sIGEyMyA9IGFlWyA3IF07XG5cdFx0Y29uc3QgYTMxID0gYWVbIDIgXSwgYTMyID0gYWVbIDUgXSwgYTMzID0gYWVbIDggXTtcblxuXHRcdGNvbnN0IGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyAzIF0sIGIxMyA9IGJlWyA2IF07XG5cdFx0Y29uc3QgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTtcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNSBdLCBiMzMgPSBiZVsgOCBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcblx0XHR0ZVsgMyBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyO1xuXHRcdHRlWyA2IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzM7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuXHRcdHRlWyA0IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzI7XG5cdFx0dGVbIDcgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMztcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XG5cdFx0dGVbIDUgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjtcblx0XHR0ZVsgOCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIGV2ZXJ5IGNvbXBvbmVudCBvZiB0aGUgbWF0cml4IGJ5IHRoZSBnaXZlbiBzY2FsYXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxhci5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtdWx0aXBseVNjYWxhciggcyApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDMgXSAqPSBzOyB0ZVsgNiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNCBdICo9IHM7IHRlWyA3IF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA1IF0gKj0gczsgdGVbIDggXSAqPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhpcyBtYXRyaXguXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRldGVybWluYW50LlxuXHQgKi9cblx0ZGV0ZXJtaW5hbnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBhID0gdGVbIDAgXSwgYiA9IHRlWyAxIF0sIGMgPSB0ZVsgMiBdLFxuXHRcdFx0ZCA9IHRlWyAzIF0sIGUgPSB0ZVsgNCBdLCBmID0gdGVbIDUgXSxcblx0XHRcdGcgPSB0ZVsgNiBdLCBoID0gdGVbIDcgXSwgaSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYSAqIGUgKiBpIC0gYSAqIGYgKiBoIC0gYiAqIGQgKiBpICsgYiAqIGYgKiBnICsgYyAqIGQgKiBoIC0gYyAqIGUgKiBnO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW52ZXJ0cyB0aGlzIG1hdHJpeCwgdXNpbmcgdGhlIFthbmFseXRpYyBtZXRob2Rde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludmVydGlibGVfbWF0cml4I0FuYWx5dGljX3NvbHV0aW9ufS5cblx0ICogWW91IGNhbiBub3QgaW52ZXJ0IHdpdGggYSBkZXRlcm1pbmFudCBvZiB6ZXJvLiBJZiB5b3UgYXR0ZW1wdCB0aGlzLCB0aGUgbWV0aG9kIHByb2R1Y2VzXG5cdCAqIGEgemVybyBtYXRyaXggaW5zdGVhZC5cblx0ICpcblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRpbnZlcnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHMsXG5cblx0XHRcdG4xMSA9IHRlWyAwIF0sIG4yMSA9IHRlWyAxIF0sIG4zMSA9IHRlWyAyIF0sXG5cdFx0XHRuMTIgPSB0ZVsgMyBdLCBuMjIgPSB0ZVsgNCBdLCBuMzIgPSB0ZVsgNSBdLFxuXHRcdFx0bjEzID0gdGVbIDYgXSwgbjIzID0gdGVbIDcgXSwgbjMzID0gdGVbIDggXSxcblxuXHRcdFx0dDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxuXHRcdFx0dDEyID0gbjMyICogbjEzIC0gbjMzICogbjEyLFxuXHRcdFx0dDEzID0gbjIzICogbjEyIC0gbjIyICogbjEzLFxuXG5cdFx0XHRkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTM7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApO1xuXG5cdFx0Y29uc3QgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjMxICogbjIzIC0gbjMzICogbjIxICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMyBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xuXG5cdFx0dGVbIDYgXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcblx0XHR0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNwb3NlcyB0aGlzIG1hdHJpeCBpbiBwbGFjZS5cblx0ICpcblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHR0cmFuc3Bvc2UoKSB7XG5cblx0XHRsZXQgdG1wO1xuXHRcdGNvbnN0IG0gPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dG1wID0gbVsgMSBdOyBtWyAxIF0gPSBtWyAzIF07IG1bIDMgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyAyIF07IG1bIDIgXSA9IG1bIDYgXTsgbVsgNiBdID0gdG1wO1xuXHRcdHRtcCA9IG1bIDUgXTsgbVsgNSBdID0gbVsgNyBdOyBtWyA3IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBub3JtYWwgbWF0cml4IHdoaWNoIGlzIHRoZSBpbnZlcnNlIHRyYW5zcG9zZSBvZiB0aGUgdXBwZXJcblx0ICogbGVmdCAzeDMgcG9ydGlvbiBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXg0IC0gVGhlIDR4NCBtYXRyaXguXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0Z2V0Tm9ybWFsTWF0cml4KCBtYXRyaXg0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeDQoIG1hdHJpeDQgKS5pbnZlcnQoKS50cmFuc3Bvc2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zcG9zZXMgdGhpcyBtYXRyaXggaW50byB0aGUgc3VwcGxpZWQgYXJyYXksIGFuZCByZXR1cm5zIGl0c2VsZiB1bmNoYW5nZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gciAtIEFuIGFycmF5IHRvIHN0b3JlIHRoZSB0cmFuc3Bvc2VkIG1hdHJpeCBlbGVtZW50cy5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHR0cmFuc3Bvc2VJbnRvQXJyYXkoIHIgKSB7XG5cblx0XHRjb25zdCBtID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHJbIDAgXSA9IG1bIDAgXTtcblx0XHRyWyAxIF0gPSBtWyAzIF07XG5cdFx0clsgMiBdID0gbVsgNiBdO1xuXHRcdHJbIDMgXSA9IG1bIDEgXTtcblx0XHRyWyA0IF0gPSBtWyA0IF07XG5cdFx0clsgNSBdID0gbVsgNyBdO1xuXHRcdHJbIDYgXSA9IG1bIDIgXTtcblx0XHRyWyA3IF0gPSBtWyA1IF07XG5cdFx0clsgOCBdID0gbVsgOCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBVViB0cmFuc2Zvcm0gbWF0cml4IGZyb20gb2Zmc2V0LCByZXBlYXQsIHJvdGF0aW9uLCBhbmQgY2VudGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdHggLSBPZmZzZXQgeC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHR5IC0gT2Zmc2V0IHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIFJlcGVhdCB4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3kgLSBSZXBlYXQgeS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uIC0gUm90YXRpb24sIGluIHJhZGlhbnMuIFBvc2l0aXZlIHZhbHVlcyByb3RhdGUgY291bnRlcmNsb2Nrd2lzZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGN4IC0gQ2VudGVyIHggb2Ygcm90YXRpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjeSAtIENlbnRlciB5IG9mIHJvdGF0aW9uXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0c2V0VXZUcmFuc2Zvcm0oIHR4LCB0eSwgc3gsIHN5LCByb3RhdGlvbiwgY3gsIGN5ICkge1xuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0c3ggKiBjLCBzeCAqIHMsIC0gc3ggKiAoIGMgKiBjeCArIHMgKiBjeSApICsgY3ggKyB0eCxcblx0XHRcdC0gc3kgKiBzLCBzeSAqIGMsIC0gc3kgKiAoIC0gcyAqIGN4ICsgYyAqIGN5ICkgKyBjeSArIHR5LFxuXHRcdFx0MCwgMCwgMVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNjYWxlcyB0aGlzIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3ggLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBYIGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIFRoZSBhbW91bnQgdG8gc2NhbGUgaW4gdGhlIFkgYXhpcy5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRzY2FsZSggc3gsIHN5ICkge1xuXG5cdFx0dGhpcy5wcmVtdWx0aXBseSggX20zLm1ha2VTY2FsZSggc3gsIHN5ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUm90YXRlcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSByb3RhdGlvbiBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdHJvdGF0ZSggdGhldGEgKSB7XG5cblx0XHR0aGlzLnByZW11bHRpcGx5KCBfbTMubWFrZVJvdGF0aW9uKCAtIHRoZXRhICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNsYXRlcyB0aGlzIG1hdHJpeCBieSB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHR4IC0gVGhlIGFtb3VudCB0byB0cmFuc2xhdGUgaW4gdGhlIFggYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHR5IC0gVGhlIGFtb3VudCB0byB0cmFuc2xhdGUgaW4gdGhlIFkgYXhpcy5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHR0cmFuc2xhdGUoIHR4LCB0eSApIHtcblxuXHRcdHRoaXMucHJlbXVsdGlwbHkoIF9tMy5tYWtlVHJhbnNsYXRpb24oIHR4LCB0eSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Ly8gZm9yIDJEIFRyYW5zZm9ybXNcblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIDJEIHRyYW5zbGF0aW9uIHRyYW5zZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ8VmVjdG9yMn0geCAtIFRoZSBhbW91bnQgdG8gdHJhbnNsYXRlIGluIHRoZSBYIGF4aXMgb3IgYWx0ZXJuYXRpdmVseSBhIHRyYW5zbGF0aW9uIHZlY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZSBpbiB0aGUgWSBheGlzLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdG1ha2VUcmFuc2xhdGlvbiggeCwgeSApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjIgKSB7XG5cblx0XHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRcdDEsIDAsIHgueCxcblx0XHRcdFx0MCwgMSwgeC55LFxuXHRcdFx0XHQwLCAwLCAxXG5cblx0XHRcdCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNldChcblxuXHRcdFx0XHQxLCAwLCB4LFxuXHRcdFx0XHQwLCAxLCB5LFxuXHRcdFx0XHQwLCAwLCAxXG5cblx0XHRcdCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSAyRCByb3RhdGlvbmFsIHRyYW5zZm9ybWF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGhldGEgLSBUaGUgcm90YXRpb24gaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7TWF0cml4M30gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtYWtlUm90YXRpb24oIHRoZXRhICkge1xuXG5cdFx0Ly8gY291bnRlcmNsb2Nrd2lzZVxuXG5cdFx0Y29uc3QgYyA9IE1hdGguY29zKCB0aGV0YSApO1xuXHRcdGNvbnN0IHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRjLCAtIHMsIDAsXG5cdFx0XHRzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIDJEIHNjYWxlIHRyYW5zZm9ybS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBYIGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGFtb3VudCB0byBzY2FsZSBpbiB0aGUgWSBheGlzLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdG1ha2VTY2FsZSggeCwgeSApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR4LCAwLCAwLFxuXHRcdFx0MCwgeSwgMCxcblx0XHRcdDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgbWF0cml4IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXgzfSBtYXRyaXggLSBUaGUgbWF0cml4IHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbWF0cml4IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggbWF0cml4ICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0aWYgKCB0ZVsgaSBdICE9PSBtZVsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBlbGVtZW50cyBvZiB0aGUgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFycmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGFycmF5IC0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gSW5kZXggb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGFycmF5LlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgzfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXcml0ZXMgdGhlIGVsZW1lbnRzIG9mIHRoaXMgbWF0cml4IHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsXG5cdCAqIHRoZSBtZXRob2QgcmV0dXJucyBhIG5ldyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSBtYXRyaXggZWxlbWVudHMgaW4gY29sdW1uLW1ham9yIG9yZGVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuXG5cdCAqL1xuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbWF0cml4IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge01hdHJpeDN9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuZnJvbUFycmF5KCB0aGlzLmVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9tMyA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKTtcblxuZnVuY3Rpb24gYXJyYXlOZWVkc1VpbnQzMiggYXJyYXkgKSB7XG5cblx0Ly8gYXNzdW1lcyBsYXJnZXIgdmFsdWVzIHVzdWFsbHkgb24gbGFzdFxuXG5cdGZvciAoIGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLSBpICkge1xuXG5cdFx0aWYgKCBhcnJheVsgaSBdID49IDY1NTM1ICkgcmV0dXJuIHRydWU7IC8vIGFjY291bnQgZm9yIFBSSU1JVElWRV9SRVNUQVJUX0ZJWEVEX0lOREVYLCAjMjQ1NjVcblxuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xuXG59XG5cbmNvbnN0IFRZUEVEX0FSUkFZUyA9IHtcblx0SW50OEFycmF5OiBJbnQ4QXJyYXksXG5cdFVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXksXG5cdFVpbnQ4Q2xhbXBlZEFycmF5OiBVaW50OENsYW1wZWRBcnJheSxcblx0SW50MTZBcnJheTogSW50MTZBcnJheSxcblx0VWludDE2QXJyYXk6IFVpbnQxNkFycmF5LFxuXHRJbnQzMkFycmF5OiBJbnQzMkFycmF5LFxuXHRVaW50MzJBcnJheTogVWludDMyQXJyYXksXG5cdEZsb2F0MzJBcnJheTogRmxvYXQzMkFycmF5LFxuXHRGbG9hdDY0QXJyYXk6IEZsb2F0NjRBcnJheVxufTtcblxuZnVuY3Rpb24gZ2V0VHlwZWRBcnJheSggdHlwZSwgYnVmZmVyICkge1xuXG5cdHJldHVybiBuZXcgVFlQRURfQVJSQVlTWyB0eXBlIF0oIGJ1ZmZlciApO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyggbmFtZSApIHtcblxuXHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsIG5hbWUgKTtcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVDYW52YXNFbGVtZW50KCkge1xuXG5cdGNvbnN0IGNhbnZhcyA9IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTtcblx0Y2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRyZXR1cm4gY2FudmFzO1xuXG59XG5cbmNvbnN0IF9jYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiB3YXJuT25jZSggbWVzc2FnZSApIHtcblxuXHRpZiAoIG1lc3NhZ2UgaW4gX2NhY2hlICkgcmV0dXJuO1xuXG5cdF9jYWNoZVsgbWVzc2FnZSBdID0gdHJ1ZTtcblxuXHRjb25zb2xlLndhcm4oIG1lc3NhZ2UgKTtcblxufVxuXG5mdW5jdGlvbiBwcm9iZUFzeW5jKCBnbCwgc3luYywgaW50ZXJ2YWwgKSB7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcblxuXHRcdGZ1bmN0aW9uIHByb2JlKCkge1xuXG5cdFx0XHRzd2l0Y2ggKCBnbC5jbGllbnRXYWl0U3luYyggc3luYywgZ2wuU1lOQ19GTFVTSF9DT01NQU5EU19CSVQsIDAgKSApIHtcblxuXHRcdFx0XHRjYXNlIGdsLldBSVRfRkFJTEVEOlxuXHRcdFx0XHRcdHJlamVjdCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgZ2wuVElNRU9VVF9FWFBJUkVEOlxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIHByb2JlLCBpbnRlcnZhbCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzZXRUaW1lb3V0KCBwcm9iZSwgaW50ZXJ2YWwgKTtcblxuXHR9ICk7XG5cbn1cblxuZnVuY3Rpb24gdG9Ob3JtYWxpemVkUHJvamVjdGlvbk1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApIHtcblxuXHRjb25zdCBtID0gcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblxuXHQvLyBDb252ZXJ0IFstMSwgMV0gdG8gWzAsIDFdIHByb2plY3Rpb24gbWF0cml4XG5cdG1bIDIgXSA9IDAuNSAqIG1bIDIgXSArIDAuNSAqIG1bIDMgXTtcblx0bVsgNiBdID0gMC41ICogbVsgNiBdICsgMC41ICogbVsgNyBdO1xuXHRtWyAxMCBdID0gMC41ICogbVsgMTAgXSArIDAuNSAqIG1bIDExIF07XG5cdG1bIDE0IF0gPSAwLjUgKiBtWyAxNCBdICsgMC41ICogbVsgMTUgXTtcblxufVxuXG5mdW5jdGlvbiB0b1JldmVyc2VkUHJvamVjdGlvbk1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApIHtcblxuXHRjb25zdCBtID0gcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblx0Y29uc3QgaXNQZXJzcGVjdGl2ZU1hdHJpeCA9IG1bIDExIF0gPT09IC0xO1xuXG5cdC8vIFJldmVyc2UgWzAsIDFdIHByb2plY3Rpb24gbWF0cml4XG5cdGlmICggaXNQZXJzcGVjdGl2ZU1hdHJpeCApIHtcblxuXHRcdG1bIDEwIF0gPSAtIG1bIDEwIF0gLSAxO1xuXHRcdG1bIDE0IF0gPSAtIG1bIDE0IF07XG5cblx0fSBlbHNlIHtcblxuXHRcdG1bIDEwIF0gPSAtIG1bIDEwIF07XG5cdFx0bVsgMTQgXSA9IC0gbVsgMTQgXSArIDE7XG5cblx0fVxuXG59XG5cbmNvbnN0IExJTkVBUl9SRUM3MDlfVE9fWFlaID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpLnNldChcblx0MC40MTIzOTA4LCAwLjM1NzU4NDMsIDAuMTgwNDgwOCxcblx0MC4yMTI2MzkwLCAwLjcxNTE2ODcsIDAuMDcyMTkyMyxcblx0MC4wMTkzMzA4LCAwLjExOTE5NDgsIDAuOTUwNTMyMlxuKTtcblxuY29uc3QgWFlaX1RPX0xJTkVBUl9SRUM3MDkgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkuc2V0KFxuXHQzLjI0MDk2OTksIC0xLjUzNzM4MzIsIC0wLjQ5ODYxMDgsXG5cdC0wLjk2OTI0MzYsIDEuODc1OTY3NSwgMC4wNDE1NTUxLFxuXHQwLjA1NTYzMDEsIC0wLjIwMzk3NywgMS4wNTY5NzE1XG4pO1xuXG5mdW5jdGlvbiBjcmVhdGVDb2xvck1hbmFnZW1lbnQoKSB7XG5cblx0Y29uc3QgQ29sb3JNYW5hZ2VtZW50ID0ge1xuXG5cdFx0ZW5hYmxlZDogdHJ1ZSxcblxuXHRcdHdvcmtpbmdDb2xvclNwYWNlOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSxcblxuXHRcdC8qKlxuXHRcdCAqIEltcGxlbWVudGF0aW9ucyBvZiBzdXBwb3J0ZWQgY29sb3Igc3BhY2VzLlxuXHRcdCAqXG5cdFx0ICogUmVxdWlyZWQ6XG5cdFx0ICpcdC0gcHJpbWFyaWVzOiBjaHJvbWF0aWNpdHkgY29vcmRpbmF0ZXMgWyByeCByeSBneCBneSBieCBieSBdXG5cdFx0ICpcdC0gd2hpdGVQb2ludDogcmVmZXJlbmNlIHdoaXRlIFsgeCB5IF1cblx0XHQgKlx0LSB0cmFuc2ZlcjogdHJhbnNmZXIgZnVuY3Rpb24gKHByZS1kZWZpbmVkKVxuXHRcdCAqXHQtIHRvWFlaOiBNYXRyaXgzIFJHQiB0byBYWVogdHJhbnNmb3JtXG5cdFx0ICpcdC0gZnJvbVhZWjogTWF0cml4MyBYWVogdG8gUkdCIHRyYW5zZm9ybVxuXHRcdCAqXHQtIGx1bWluYW5jZUNvZWZmaWNpZW50czogUkdCIGx1bWluYW5jZSBjb2VmZmljaWVudHNcblx0XHQgKlxuXHRcdCAqIE9wdGlvbmFsOlxuXHRcdCAqICAtIG91dHB1dENvbG9yU3BhY2VDb25maWc6IHsgZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2U6IENvbG9yU3BhY2UgfVxuXHRcdCAqICAtIHdvcmtpbmdDb2xvclNwYWNlQ29uZmlnOiB7IHVucGFja0NvbG9yU3BhY2U6IENvbG9yU3BhY2UgfVxuXHRcdCAqXG5cdFx0ICogUmVmZXJlbmNlOlxuXHRcdCAqIC0gaHR0cHM6Ly93d3cucnVzc2VsbGNvdHRyZWxsLmNvbS9waG90by9tYXRyaXhDYWxjdWxhdG9yLmh0bVxuXHRcdCAqL1xuXHRcdHNwYWNlczoge30sXG5cblx0XHRjb252ZXJ0OiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgfHwgc291cmNlQ29sb3JTcGFjZSA9PT0gdGFyZ2V0Q29sb3JTcGFjZSB8fCAhIHNvdXJjZUNvbG9yU3BhY2UgfHwgISB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0XHRcdHJldHVybiBjb2xvcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuc3BhY2VzWyBzb3VyY2VDb2xvclNwYWNlIF0udHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApIHtcblxuXHRcdFx0XHRjb2xvci5yID0gU1JHQlRvTGluZWFyKCBjb2xvci5yICk7XG5cdFx0XHRcdGNvbG9yLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHRcdFx0Y29sb3IuYiA9IFNSR0JUb0xpbmVhciggY29sb3IuYiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5zcGFjZXNbIHNvdXJjZUNvbG9yU3BhY2UgXS5wcmltYXJpZXMgIT09IHRoaXMuc3BhY2VzWyB0YXJnZXRDb2xvclNwYWNlIF0ucHJpbWFyaWVzICkge1xuXG5cdFx0XHRcdGNvbG9yLmFwcGx5TWF0cml4MyggdGhpcy5zcGFjZXNbIHNvdXJjZUNvbG9yU3BhY2UgXS50b1hZWiApO1xuXHRcdFx0XHRjb2xvci5hcHBseU1hdHJpeDMoIHRoaXMuc3BhY2VzWyB0YXJnZXRDb2xvclNwYWNlIF0uZnJvbVhZWiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGhpcy5zcGFjZXNbIHRhcmdldENvbG9yU3BhY2UgXS50cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkge1xuXG5cdFx0XHRcdGNvbG9yLnIgPSBMaW5lYXJUb1NSR0IoIGNvbG9yLnIgKTtcblx0XHRcdFx0Y29sb3IuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdFx0XHRjb2xvci5iID0gTGluZWFyVG9TUkdCKCBjb2xvci5iICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbG9yO1xuXG5cdFx0fSxcblxuXHRcdGZyb21Xb3JraW5nQ29sb3JTcGFjZTogZnVuY3Rpb24gKCBjb2xvciwgdGFyZ2V0Q29sb3JTcGFjZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY29udmVydCggY29sb3IsIHRoaXMud29ya2luZ0NvbG9yU3BhY2UsIHRhcmdldENvbG9yU3BhY2UgKTtcblxuXHRcdH0sXG5cblx0XHR0b1dvcmtpbmdDb2xvclNwYWNlOiBmdW5jdGlvbiAoIGNvbG9yLCBzb3VyY2VDb2xvclNwYWNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jb252ZXJ0KCBjb2xvciwgc291cmNlQ29sb3JTcGFjZSwgdGhpcy53b3JraW5nQ29sb3JTcGFjZSApO1xuXG5cdFx0fSxcblxuXHRcdGdldFByaW1hcmllczogZnVuY3Rpb24gKCBjb2xvclNwYWNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS5wcmltYXJpZXM7XG5cblx0XHR9LFxuXG5cdFx0Z2V0VHJhbnNmZXI6IGZ1bmN0aW9uICggY29sb3JTcGFjZSApIHtcblxuXHRcdFx0aWYgKCBjb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgKSByZXR1cm4gTGluZWFyVHJhbnNmZXI7XG5cblx0XHRcdHJldHVybiB0aGlzLnNwYWNlc1sgY29sb3JTcGFjZSBdLnRyYW5zZmVyO1xuXG5cdFx0fSxcblxuXHRcdGdldEx1bWluYW5jZUNvZWZmaWNpZW50czogZnVuY3Rpb24gKCB0YXJnZXQsIGNvbG9yU3BhY2UgPSB0aGlzLndvcmtpbmdDb2xvclNwYWNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmZyb21BcnJheSggdGhpcy5zcGFjZXNbIGNvbG9yU3BhY2UgXS5sdW1pbmFuY2VDb2VmZmljaWVudHMgKTtcblxuXHRcdH0sXG5cblx0XHRkZWZpbmU6IGZ1bmN0aW9uICggY29sb3JTcGFjZXMgKSB7XG5cblx0XHRcdE9iamVjdC5hc3NpZ24oIHRoaXMuc3BhY2VzLCBjb2xvclNwYWNlcyApO1xuXG5cdFx0fSxcblxuXHRcdC8vIEludGVybmFsIEFQSXNcblxuXHRcdF9nZXRNYXRyaXg6IGZ1bmN0aW9uICggdGFyZ2V0TWF0cml4LCBzb3VyY2VDb2xvclNwYWNlLCB0YXJnZXRDb2xvclNwYWNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0TWF0cml4XG5cdFx0XHRcdC5jb3B5KCB0aGlzLnNwYWNlc1sgc291cmNlQ29sb3JTcGFjZSBdLnRvWFlaIClcblx0XHRcdFx0Lm11bHRpcGx5KCB0aGlzLnNwYWNlc1sgdGFyZ2V0Q29sb3JTcGFjZSBdLmZyb21YWVogKTtcblxuXHRcdH0sXG5cblx0XHRfZ2V0RHJhd2luZ0J1ZmZlckNvbG9yU3BhY2U6IGZ1bmN0aW9uICggY29sb3JTcGFjZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc3BhY2VzWyBjb2xvclNwYWNlIF0ub3V0cHV0Q29sb3JTcGFjZUNvbmZpZy5kcmF3aW5nQnVmZmVyQ29sb3JTcGFjZTtcblxuXHRcdH0sXG5cblx0XHRfZ2V0VW5wYWNrQ29sb3JTcGFjZTogZnVuY3Rpb24gKCBjb2xvclNwYWNlID0gdGhpcy53b3JraW5nQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuc3BhY2VzWyBjb2xvclNwYWNlIF0ud29ya2luZ0NvbG9yU3BhY2VDb25maWcudW5wYWNrQ29sb3JTcGFjZTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0ICogc1JHQiBkZWZpbml0aW9uc1xuXHQgKi9cblxuXHRjb25zdCBSRUM3MDlfUFJJTUFSSUVTID0gWyAwLjY0MCwgMC4zMzAsIDAuMzAwLCAwLjYwMCwgMC4xNTAsIDAuMDYwIF07XG5cdGNvbnN0IFJFQzcwOV9MVU1JTkFOQ0VfQ09FRkZJQ0lFTlRTID0gWyAwLjIxMjYsIDAuNzE1MiwgMC4wNzIyIF07XG5cdGNvbnN0IEQ2NSA9IFsgMC4zMTI3LCAwLjMyOTAgXTtcblxuXHRDb2xvck1hbmFnZW1lbnQuZGVmaW5lKCB7XG5cblx0XHRbIExpbmVhclNSR0JDb2xvclNwYWNlIF06IHtcblx0XHRcdHByaW1hcmllczogUkVDNzA5X1BSSU1BUklFUyxcblx0XHRcdHdoaXRlUG9pbnQ6IEQ2NSxcblx0XHRcdHRyYW5zZmVyOiBMaW5lYXJUcmFuc2Zlcixcblx0XHRcdHRvWFlaOiBMSU5FQVJfUkVDNzA5X1RPX1hZWixcblx0XHRcdGZyb21YWVo6IFhZWl9UT19MSU5FQVJfUkVDNzA5LFxuXHRcdFx0bHVtaW5hbmNlQ29lZmZpY2llbnRzOiBSRUM3MDlfTFVNSU5BTkNFX0NPRUZGSUNJRU5UUyxcblx0XHRcdHdvcmtpbmdDb2xvclNwYWNlQ29uZmlnOiB7IHVucGFja0NvbG9yU3BhY2U6IFNSR0JDb2xvclNwYWNlIH0sXG5cdFx0XHRvdXRwdXRDb2xvclNwYWNlQ29uZmlnOiB7IGRyYXdpbmdCdWZmZXJDb2xvclNwYWNlOiBTUkdCQ29sb3JTcGFjZSB9XG5cdFx0fSxcblxuXHRcdFsgU1JHQkNvbG9yU3BhY2UgXToge1xuXHRcdFx0cHJpbWFyaWVzOiBSRUM3MDlfUFJJTUFSSUVTLFxuXHRcdFx0d2hpdGVQb2ludDogRDY1LFxuXHRcdFx0dHJhbnNmZXI6IFNSR0JUcmFuc2Zlcixcblx0XHRcdHRvWFlaOiBMSU5FQVJfUkVDNzA5X1RPX1hZWixcblx0XHRcdGZyb21YWVo6IFhZWl9UT19MSU5FQVJfUkVDNzA5LFxuXHRcdFx0bHVtaW5hbmNlQ29lZmZpY2llbnRzOiBSRUM3MDlfTFVNSU5BTkNFX0NPRUZGSUNJRU5UUyxcblx0XHRcdG91dHB1dENvbG9yU3BhY2VDb25maWc6IHsgZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2U6IFNSR0JDb2xvclNwYWNlIH1cblx0XHR9LFxuXG5cdH0gKTtcblxuXHRyZXR1cm4gQ29sb3JNYW5hZ2VtZW50O1xuXG59XG5cbmNvbnN0IENvbG9yTWFuYWdlbWVudCA9IC8qQF9fUFVSRV9fKi8gY3JlYXRlQ29sb3JNYW5hZ2VtZW50KCk7XG5cbmZ1bmN0aW9uIFNSR0JUb0xpbmVhciggYyApIHtcblxuXHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcblxufVxuXG5mdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7XG5cblx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG59XG5cbmxldCBfY2FudmFzO1xuXG4vKipcbiAqIEEgY2xhc3MgY29udGFpbmluZyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgaW1hZ2VzLlxuICpcbiAqIEBoaWRlY29uc3RydWN0b3JcbiAqL1xuY2xhc3MgSW1hZ2VVdGlscyB7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBkYXRhIFVSSSBjb250YWluaW5nIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGltYWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhIVE1MSW1hZ2VFbGVtZW50fEhUTUxDYW52YXNFbGVtZW50KX0gaW1hZ2UgLSBUaGUgaW1hZ2Ugb2JqZWN0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9J2ltYWdlL3BuZyddIC0gSW5kaWNhdGVzIHRoZSBpbWFnZSBmb3JtYXQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRhdGEgVVJJLlxuXHQgKi9cblx0c3RhdGljIGdldERhdGFVUkwoIGltYWdlLCB0eXBlID0gJ2ltYWdlL3BuZycgKSB7XG5cblx0XHRpZiAoIC9eZGF0YTovaS50ZXN0KCBpbWFnZS5zcmMgKSApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0cmV0dXJuIGltYWdlLnNyYztcblxuXHRcdH1cblxuXHRcdGxldCBjYW52YXM7XG5cblx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB7XG5cblx0XHRcdGNhbnZhcyA9IGltYWdlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBfY2FudmFzID09PSB1bmRlZmluZWQgKSBfY2FudmFzID0gY3JlYXRlRWxlbWVudE5TKCAnY2FudmFzJyApO1xuXG5cdFx0XHRfY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRfY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdFx0Y29uc3QgY29udGV4dCA9IF9jYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXG5cdFx0XHRpZiAoIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhICkge1xuXG5cdFx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZSwgMCwgMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbnZhcyA9IF9jYW52YXM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTCggdHlwZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHNSR0IgaW1hZ2UgZGF0YSB0byBsaW5lYXIgY29sb3Igc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KEhUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR8SW1hZ2VCaXRtYXB8T2JqZWN0KX0gaW1hZ2UgLSBUaGUgaW1hZ2Ugb2JqZWN0LlxuXHQgKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudHxPYmplY3R9IFRoZSBjb252ZXJ0ZWQgaW1hZ2UuXG5cdCAqL1xuXHRzdGF0aWMgc1JHQlRvTGluZWFyKCBpbWFnZSApIHtcblxuXHRcdGlmICggKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkgfHxcblx0XHRcdCggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkgfHxcblx0XHRcdCggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7XG5cblx0XHRcdGNvbnN0IGNhbnZhcyA9IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTtcblxuXHRcdFx0Y2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuXG5cdFx0XHRjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdGNvbnRleHQuZHJhd0ltYWdlKCBpbWFnZSwgMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSggMCwgMCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXHRcdFx0Y29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRkYXRhWyBpIF0gPSBTUkdCVG9MaW5lYXIoIGRhdGFbIGkgXSAvIDI1NSApICogMjU1O1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRleHQucHV0SW1hZ2VEYXRhKCBpbWFnZURhdGEsIDAsIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdH0gZWxzZSBpZiAoIGltYWdlLmRhdGEgKSB7XG5cblx0XHRcdGNvbnN0IGRhdGEgPSBpbWFnZS5kYXRhLnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgZGF0YSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICkge1xuXG5cdFx0XHRcdFx0ZGF0YVsgaSBdID0gTWF0aC5mbG9vciggU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gLyAyNTUgKSAqIDI1NSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBhc3N1bWluZyBmbG9hdFxuXG5cdFx0XHRcdFx0ZGF0YVsgaSBdID0gU1JHQlRvTGluZWFyKCBkYXRhWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkltYWdlVXRpbHMuc1JHQlRvTGluZWFyKCk6IFVuc3VwcG9ydGVkIGltYWdlIHR5cGUuIE5vIGNvbG9yIHNwYWNlIGNvbnZlcnNpb24gYXBwbGllZC4nICk7XG5cdFx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmxldCBfc291cmNlSWQgPSAwO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRhdGEgc291cmNlIG9mIGEgdGV4dHVyZS5cbiAqXG4gKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgY2xhc3MgaXMgdG8gZGVjb3VwbGUgdGhlIGRhdGEgZGVmaW5pdGlvbiBmcm9tIHRoZSB0ZXh0dXJlXG4gKiBkZWZpbml0aW9uIHNvIHRoZSBzYW1lIGRhdGEgY2FuIGJlIHVzZWQgd2l0aCBtdWx0aXBsZSB0ZXh0dXJlIGluc3RhbmNlcy5cbiAqL1xuY2xhc3MgU291cmNlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2aWRlbyB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2FueX0gW2RhdGE9bnVsbF0gLSBUaGUgZGF0YSBkZWZpbml0aW9uIG9mIGEgdGV4dHVyZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBkYXRhID0gbnVsbCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTb3VyY2UgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIElEIG9mIHRoZSBzb3VyY2UuXG5cdFx0ICpcblx0XHQgKiBAbmFtZSBTb3VyY2UjaWRcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX3NvdXJjZUlkICsrIH0gKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBVVUlEIG9mIHRoZSBzb3VyY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRhdGEgZGVmaW5pdGlvbiBvZiBhIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7YW55fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGlzIG9ubHkgcmVsZXZhbnQgd2hlbiB7QGxpbmsgU291cmNlI25lZWRzVXBkYXRlfSBpcyBzZXQgdG8gYHRydWVgIGFuZFxuXHRcdCAqIHByb3ZpZGVzIG1vcmUgY29udHJvbCBvbiBob3cgdGV4dHVyZSBkYXRhIHNob3VsZCBiZSBwcm9jZXNzZWQuIFdoZW4gYGRhdGFSZWFkeWAgaXMgc2V0XG5cdFx0ICogdG8gYGZhbHNlYCwgdGhlIGVuZ2luZSBwZXJmb3JtcyB0aGUgbWVtb3J5IGFsbG9jYXRpb24gKGlmIG5lY2Vzc2FyeSkgYnV0IGRvZXMgbm90IHRyYW5zZmVyXG5cdFx0ICogdGhlIGRhdGEgaW50byB0aGUgR1BVIG1lbW9yeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmRhdGFSZWFkeSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHN0YXJ0cyBhdCBgMGAgYW5kIGNvdW50cyBob3cgbWFueSB0aW1lcyB7QGxpbmsgU291cmNlI25lZWRzVXBkYXRlfSBpcyBzZXQgdG8gYHRydWVgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdoZW4gdGhlIHByb3BlcnR5IGlzIHNldCB0byBgdHJ1ZWAsIHRoZSBlbmdpbmUgYWxsb2NhdGVzIHRoZSBtZW1vcnlcblx0ICogZm9yIHRoZSB0ZXh0dXJlIChpZiBuZWNlc3NhcnkpIGFuZCB0cmlnZ2VycyB0aGUgYWN0dWFsIHRleHR1cmUgdXBsb2FkXG5cdCAqIHRvIHRoZSBHUFUgbmV4dCB0aW1lIHRoZSBzb3VyY2UgaXMgdXNlZC5cblx0ICpcblx0ICogQHR5cGUge2Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcblx0ICovXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGUgc291cmNlIGludG8gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIHNvdXJjZS5cblx0ICogQHNlZSB7QGxpbmsgT2JqZWN0TG9hZGVyI3BhcnNlfVxuXHQgKi9cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEuaW1hZ2VzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gbWV0YS5pbWFnZXNbIHRoaXMudXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3V0cHV0ID0ge1xuXHRcdFx0dXVpZDogdGhpcy51dWlkLFxuXHRcdFx0dXJsOiAnJ1xuXHRcdH07XG5cblx0XHRjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuXG5cdFx0aWYgKCBkYXRhICE9PSBudWxsICkge1xuXG5cdFx0XHRsZXQgdXJsO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblxuXHRcdFx0XHQvLyBjdWJlIHRleHR1cmVcblxuXHRcdFx0XHR1cmwgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBkYXRhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRhdGFbIGkgXS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXS5pbWFnZSApICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1cmwucHVzaCggc2VyaWFsaXplSW1hZ2UoIGRhdGFbIGkgXSApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHRleHR1cmVcblxuXHRcdFx0XHR1cmwgPSBzZXJpYWxpemVJbWFnZSggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dHB1dC51cmwgPSB1cmw7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhLmltYWdlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdCggdHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkgfHxcblx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApICkge1xuXG5cdFx0Ly8gZGVmYXVsdCBpbWFnZXNcblxuXHRcdHJldHVybiBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0Ly8gaW1hZ2VzIG9mIERhdGFUZXh0dXJlXG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGRhdGE6IEFycmF5LmZyb20oIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0d2lkdGg6IGltYWdlLndpZHRoLFxuXHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodCxcblx0XHRcdFx0dHlwZTogaW1hZ2UuZGF0YS5jb25zdHJ1Y3Rvci5uYW1lXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVGV4dHVyZTogVW5hYmxlIHRvIHNlcmlhbGl6ZSBUZXh0dXJlLicgKTtcblx0XHRcdHJldHVybiB7fTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxubGV0IF90ZXh0dXJlSWQgPSAwO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCB0ZXh0dXJlcy5cbiAqXG4gKiBOb3RlOiBBZnRlciB0aGUgaW5pdGlhbCB1c2Ugb2YgYSB0ZXh0dXJlLCBpdHMgZGltZW5zaW9ucywgZm9ybWF0LCBhbmQgdHlwZVxuICogY2Fubm90IGJlIGNoYW5nZWQuIEluc3RlYWQsIGNhbGwge0BsaW5rIFRleHR1cmUjZGlzcG9zZX0gb24gdGhlIHRleHR1cmUgYW5kIGluc3RhbnRpYXRlIGEgbmV3IG9uZS5cbiAqXG4gKiBAYXVnbWVudHMgRXZlbnREaXNwYXRjaGVyXG4gKi9cbmNsYXNzIFRleHR1cmUgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gW2ltYWdlPVRleHR1cmUuREVGQVVMVF9JTUFHRV0gLSBUaGUgaW1hZ2UgaG9sZGluZyB0aGUgdGV4dHVyZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21hcHBpbmc9VGV4dHVyZS5ERUZBVUxUX01BUFBJTkddIC0gVGhlIHRleHR1cmUgbWFwcGluZy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwUz1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwUyB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwVD1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwVCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttYWdGaWx0ZXI9TGluZWFyRmlsdGVyXSAtIFRoZSBtYWcgZmlsdGVyIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21pbkZpbHRlcj1MaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJdIC0gVGhlIG1pbiBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZm9ybWF0PVJHQkFGb3JtYXRdIC0gVGhlIHRleHR1cmUgZm9ybWF0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3R5cGU9VW5zaWduZWRCeXRlVHlwZV0gLSBUaGUgdGV4dHVyZSB0eXBlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FuaXNvdHJvcHk9VGV4dHVyZS5ERUZBVUxUX0FOSVNPVFJPUFldIC0gVGhlIGFuaXNvdHJvcHkgdmFsdWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1Ob0NvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGltYWdlID0gVGV4dHVyZS5ERUZBVUxUX0lNQUdFLCBtYXBwaW5nID0gVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcsIHdyYXBTID0gQ2xhbXBUb0VkZ2VXcmFwcGluZywgd3JhcFQgPSBDbGFtcFRvRWRnZVdyYXBwaW5nLCBtYWdGaWx0ZXIgPSBMaW5lYXJGaWx0ZXIsIG1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgZm9ybWF0ID0gUkdCQUZvcm1hdCwgdHlwZSA9IFVuc2lnbmVkQnl0ZVR5cGUsIGFuaXNvdHJvcHkgPSBUZXh0dXJlLkRFRkFVTFRfQU5JU09UUk9QWSwgY29sb3JTcGFjZSA9IE5vQ29sb3JTcGFjZSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzVGV4dHVyZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgSUQgb2YgdGhlIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBAbmFtZSBUZXh0dXJlI2lkXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF90ZXh0dXJlSWQgKysgfSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIFVVSUQgb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGF0YSBkZWZpbml0aW9uIG9mIGEgdGV4dHVyZS4gQSByZWZlcmVuY2UgdG8gdGhlIGRhdGEgc291cmNlIGNhbiBiZVxuXHRcdCAqIHNoYXJlZCBhY3Jvc3MgdGV4dHVyZXMuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIGluIGNvbnRleHQgb2Ygc3ByaXRlc2hlZXRzXG5cdFx0ICogd2hlcmUgbXVsdGlwbGUgdGV4dHVyZXMgcmVuZGVyIHRoZSBzYW1lIGRhdGEgYnV0IHdpdGggZGlmZmVyZW50IHRleHR1cmVcblx0XHQgKiB0cmFuc2Zvcm1hdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7U291cmNlfVxuXHRcdCAqL1xuXHRcdHRoaXMuc291cmNlID0gbmV3IFNvdXJjZSggaW1hZ2UgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IGhvbGRpbmcgdXNlci1kZWZpbmVkIG1pcG1hcHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLm1pcG1hcHMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyB0aGUgdGV4dHVyZSBpcyBhcHBsaWVkIHRvIHRoZSBvYmplY3QuIFRoZSB2YWx1ZSBgVVZNYXBwaW5nYFxuXHRcdCAqIGlzIHRoZSBkZWZhdWx0LCB3aGVyZSB0ZXh0dXJlIG9yIHV2IGNvb3JkaW5hdGVzIGFyZSB1c2VkIHRvIGFwcGx5IHRoZSBtYXAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFVWTWFwcGluZ3xDdWJlUmVmbGVjdGlvbk1hcHBpbmd8Q3ViZVJlZnJhY3Rpb25NYXBwaW5nfEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nfEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nfEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nKX1cblx0XHQgKiBAZGVmYXVsdCBVVk1hcHBpbmdcblx0XHQqL1xuXHRcdHRoaXMubWFwcGluZyA9IG1hcHBpbmc7XG5cblx0XHQvKipcblx0XHQgKiBMZXRzIHlvdSBzZWxlY3QgdGhlIHV2IGF0dHJpYnV0ZSB0byBtYXAgdGhlIHRleHR1cmUgdG8uIGAwYCBmb3IgYHV2YCxcblx0XHQgKiBgMWAgZm9yIGB1djFgLCBgMmAgZm9yIGB1djJgIGFuZCBgM2AgZm9yIGB1djNgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5jaGFubmVsID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGVmaW5lcyBob3cgdGhlIHRleHR1cmUgaXMgd3JhcHBlZCBob3Jpem9udGFsbHkgYW5kIGNvcnJlc3BvbmRzIHRvXG5cdFx0ICogKlUqIGluIFVWIG1hcHBpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFJlcGVhdFdyYXBwaW5nfENsYW1wVG9FZGdlV3JhcHBpbmd8TWlycm9yZWRSZXBlYXRXcmFwcGluZyl9XG5cdFx0ICogQGRlZmF1bHQgQ2xhbXBUb0VkZ2VXcmFwcGluZ1xuXHRcdCAqL1xuXHRcdHRoaXMud3JhcFMgPSB3cmFwUztcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGVmaW5lcyBob3cgdGhlIHRleHR1cmUgaXMgd3JhcHBlZCBob3Jpem9udGFsbHkgYW5kIGNvcnJlc3BvbmRzIHRvXG5cdFx0ICogKlYqIGluIFVWIG1hcHBpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFJlcGVhdFdyYXBwaW5nfENsYW1wVG9FZGdlV3JhcHBpbmd8TWlycm9yZWRSZXBlYXRXcmFwcGluZyl9XG5cdFx0ICogQGRlZmF1bHQgQ2xhbXBUb0VkZ2VXcmFwcGluZ1xuXHRcdCAqL1xuXHRcdHRoaXMud3JhcFQgPSB3cmFwVDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyB0aGUgdGV4dHVyZSBpcyBzYW1wbGVkIHdoZW4gYSB0ZXhlbCBjb3ZlcnMgbW9yZSB0aGFuIG9uZSBwaXhlbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9XG5cdFx0ICogQGRlZmF1bHQgTGluZWFyRmlsdGVyXG5cdFx0ICovXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBtYWdGaWx0ZXI7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIGxlc3MgdGhhbiBvbmUgcGl4ZWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcnxMaW5lYXJGaWx0ZXJ8TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcnxMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIpfVxuXHRcdCAqIEBkZWZhdWx0IExpbmVhck1pcG1hcExpbmVhckZpbHRlclxuXHRcdCAqL1xuXHRcdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG51bWJlciBvZiBzYW1wbGVzIHRha2VuIGFsb25nIHRoZSBheGlzIHRocm91Z2ggdGhlIHBpeGVsIHRoYXQgaGFzIHRoZVxuXHRcdCAqIGhpZ2hlc3QgZGVuc2l0eSBvZiB0ZXhlbHMuIEJ5IGRlZmF1bHQsIHRoaXMgdmFsdWUgaXMgYDFgLiBBIGhpZ2hlciB2YWx1ZVxuXHRcdCAqIGdpdmVzIGEgbGVzcyBibHVycnkgcmVzdWx0IHRoYW4gYSBiYXNpYyBtaXBtYXAsIGF0IHRoZSBjb3N0IG9mIG1vcmVcblx0XHQgKiB0ZXh0dXJlIHNhbXBsZXMgYmVpbmcgdXNlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuYW5pc290cm9weSA9IGFuaXNvdHJvcHk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZm9ybWF0IG9mIHRoZSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBSR0JBRm9ybWF0XG5cdFx0ICovXG5cdFx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGVmYXVsdCBpbnRlcm5hbCBmb3JtYXQgaXMgZGVyaXZlZCBmcm9tIHtAbGluayBUZXh0dXJlI2Zvcm1hdH0gYW5kIHtAbGluayBUZXh0dXJlI3R5cGV9IGFuZFxuXHRcdCAqIGRlZmluZXMgaG93IHRoZSB0ZXh0dXJlIGRhdGEgaXMgZ29pbmcgdG8gYmUgc3RvcmVkIG9uIHRoZSBHUFUuXG5cdFx0ICpcblx0XHQgKiBUaGlzIHByb3BlcnR5IGFsbG93cyB0byBvdmVyd3JpdGUgdGhlIGRlZmF1bHQgZm9ybWF0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9zdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRhdGEgdHlwZSBvZiB0aGUgdGV4dHVyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgVW5zaWduZWRCeXRlVHlwZVxuXHRcdCAqL1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCBhIHNpbmdsZSByZXBldGl0aW9uIG9mIHRoZSB0ZXh0dXJlIGlzIG9mZnNldCBmcm9tIHRoZSBiZWdpbm5pbmcsXG5cdFx0ICogaW4gZWFjaCBkaXJlY3Rpb24gVSBhbmQgVi4gVHlwaWNhbCByYW5nZSBpcyBgMC4wYCB0byBgMS4wYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqIEBkZWZhdWx0ICgwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5vZmZzZXQgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG1hbnkgdGltZXMgdGhlIHRleHR1cmUgaXMgcmVwZWF0ZWQgYWNyb3NzIHRoZSBzdXJmYWNlLCBpbiBlYWNoXG5cdFx0ICogZGlyZWN0aW9uIFUgYW5kIFYuIElmIHJlcGVhdCBpcyBzZXQgZ3JlYXRlciB0aGFuIGAxYCBpbiBlaXRoZXIgZGlyZWN0aW9uLFxuXHRcdCAqIHRoZSBjb3JyZXNwb25kaW5nIHdyYXAgcGFyYW1ldGVyIHNob3VsZCBhbHNvIGJlIHNldCB0byBgUmVwZWF0V3JhcHBpbmdgXG5cdFx0ICogb3IgYE1pcnJvcmVkUmVwZWF0V3JhcHBpbmdgIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgdGlsaW5nIGVmZmVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEpXG5cdFx0ICovXG5cdFx0dGhpcy5yZXBlYXQgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBvaW50IGFyb3VuZCB3aGljaCByb3RhdGlvbiBvY2N1cnMuIEEgdmFsdWUgb2YgYCgwLjUsIDAuNSlgIGNvcnJlc3BvbmRzXG5cdFx0ICogdG8gdGhlIGNlbnRlciBvZiB0aGUgdGV4dHVyZS4gRGVmYXVsdCBpcyBgKDAsIDApYCwgdGhlIGxvd2VyIGxlZnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSB0ZXh0dXJlIGlzIHJvdGF0ZWQgYXJvdW5kIHRoZSBjZW50ZXIgcG9pbnQsIGluIHJhZGlhbnMuXG5cdFx0ICogUG9zaXRpdmUgdmFsdWVzIGFyZSBjb3VudGVyLWNsb2Nrd2lzZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byB1cGRhdGUgdGhlIHRleHR1cmUncyB1di10cmFuc2Zvcm1hdGlvbiB7QGxpbmsgVGV4dHVyZSNtYXRyaXh9XG5cdFx0ICogZnJvbSB0aGUgcHJvcGVydGllcyB7QGxpbmsgVGV4dHVyZSNvZmZzZXR9LCB7QGxpbmsgVGV4dHVyZSNyZXBlYXR9LFxuXHRcdCAqIHtAbGluayBUZXh0dXJlI3JvdGF0aW9ufSwgYW5kIHtAbGluayBUZXh0dXJlI2NlbnRlcn0uXG5cdFx0ICpcblx0XHQgKiBTZXQgdGhpcyB0byBgZmFsc2VgIGlmIHlvdSBhcmUgc3BlY2lmeWluZyB0aGUgdXYtdHJhbnNmb3JtIG1hdHJpeCBkaXJlY3RseS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHV2LXRyYW5zZm9ybWF0aW9uIG1hdHJpeCBvZiB0aGUgdGV4dHVyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXRyaXgzfVxuXHRcdCAqL1xuXHRcdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDMoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gZ2VuZXJhdGUgbWlwbWFwcyAoaWYgcG9zc2libGUpIGZvciBhIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBTZXQgdGhpcyB0byBgZmFsc2VgIGlmIHlvdSBhcmUgY3JlYXRpbmcgbWlwbWFwcyBtYW51YWxseS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgYWxwaGEgY2hhbm5lbCwgaWYgcHJlc2VudCwgaXMgbXVsdGlwbGllZCBpbnRvIHRoZVxuXHRcdCAqIGNvbG9yIGNoYW5uZWxzIHdoZW4gdGhlIHRleHR1cmUgaXMgdXBsb2FkZWQgdG8gdGhlIEdQVS5cblx0XHQgKlxuXHRcdCAqIE5vdGUgdGhhdCB0aGlzIHByb3BlcnR5IGhhcyBubyBlZmZlY3Qgd2hlbiB1c2luZyBgSW1hZ2VCaXRtYXBgLiBZb3UgbmVlZCB0b1xuXHRcdCAqIGNvbmZpZ3VyZSBwcmVtdWx0aXBseSBhbHBoYSBvbiBiaXRtYXAgY3JlYXRpb24gaW5zdGVhZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdGV4dHVyZSBpcyBmbGlwcGVkIGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzIHdoZW5cblx0XHQgKiB1cGxvYWRlZCB0byB0aGUgR1BVLlxuXHRcdCAqXG5cdFx0ICogTm90ZSB0aGF0IHRoaXMgcHJvcGVydHkgaGFzIG5vIGVmZmVjdCB3aGVuIHVzaW5nIGBJbWFnZUJpdG1hcGAuIFlvdSBuZWVkIHRvXG5cdFx0ICogY29uZmlndXJlIHRoZSBmbGlwIG9uIGJpdG1hcCBjcmVhdGlvbiBpbnN0ZWFkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxpcFkgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogU3BlY2lmaWVzIHRoZSBhbGlnbm1lbnQgcmVxdWlyZW1lbnRzIGZvciB0aGUgc3RhcnQgb2YgZWFjaCBwaXhlbCByb3cgaW4gbWVtb3J5LlxuXHRcdCAqIFRoZSBhbGxvd2FibGUgdmFsdWVzIGFyZSBgMWAgKGJ5dGUtYWxpZ25tZW50KSwgYDJgIChyb3dzIGFsaWduZWQgdG8gZXZlbi1udW1iZXJlZCBieXRlcyksXG5cdFx0ICogYDRgICh3b3JkLWFsaWdubWVudCksIGFuZCBgOGAgKHJvd3Mgc3RhcnQgb24gZG91YmxlLXdvcmQgYm91bmRhcmllcykuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDRcblx0XHQgKi9cblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IDQ7XHQvLyB2YWxpZCB2YWx1ZXM6IDEsIDIsIDQsIDggKHNlZSBodHRwOi8vd3d3Lmtocm9ub3Mub3JnL29wZW5nbGVzL3Nkay9kb2NzL21hbi94aHRtbC9nbFBpeGVsU3RvcmVpLnhtbClcblxuXHRcdC8qKlxuXHRcdCAqIFRleHR1cmVzIGNvbnRhaW5pbmcgY29sb3IgZGF0YSBzaG91bGQgYmUgYW5ub3RhdGVkIHdpdGggYFNSR0JDb2xvclNwYWNlYCBvciBgTGluZWFyU1JHQkNvbG9yU3BhY2VgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBOb0NvbG9yU3BhY2Vcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yU3BhY2UgPSBjb2xvclNwYWNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgY3VzdG9tIGRhdGEgYWJvdXQgdGhlIHRleHR1cmUuIEl0XG5cdFx0ICogc2hvdWxkIG5vdCBob2xkIHJlZmVyZW5jZXMgdG8gZnVuY3Rpb25zIGFzIHRoZXNlIHdpbGwgbm90IGJlIGNsb25lZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBzdGFydHMgYXQgYDBgIGFuZCBjb3VudHMgaG93IG1hbnkgdGltZXMge0BsaW5rIFRleHR1cmUjbmVlZHNVcGRhdGV9IGlzIHNldCB0byBgdHJ1ZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBjYWxsYmFjayBmdW5jdGlvbiwgY2FsbGVkIHdoZW4gdGhlIHRleHR1cmUgaXMgdXBkYXRlZCAoZS5nLiwgd2hlblxuXHRcdCAqIHtAbGluayBUZXh0dXJlI25lZWRzVXBkYXRlfSBoYXMgYmVlbiBzZXQgdG8gdHJ1ZSBhbmQgdGhlbiB0aGUgdGV4dHVyZSBpcyB1c2VkKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/RnVuY3Rpb259XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub25VcGRhdGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb3B0aW9uYWwgYmFjayByZWZlcmVuY2UgdG8gdGhlIHRleHR1cmVzIHJlbmRlciB0YXJnZXQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhSZW5kZXJUYXJnZXR8V2ViR0xSZW5kZXJUYXJnZXQpfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnJlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZXMgd2hldGhlciBhIHRleHR1cmUgYmVsb25ncyB0byBhIHJlbmRlciB0YXJnZXQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyB0ZXh0dXJlIHNob3VsZCBiZSBwcm9jZXNzZWQgYnkgYFBNUkVNR2VuZXJhdG9yYCBvciBub3Rcblx0XHQgKiAob25seSByZWxldmFudCBmb3IgcmVuZGVyIHRhcmdldCB0ZXh0dXJlcykuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnBtcmVtVmVyc2lvbiA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgaW1hZ2Ugb2JqZWN0IGhvbGRpbmcgdGhlIHRleHR1cmUgZGF0YS5cblx0ICpcblx0ICogQHR5cGUgez9PYmplY3R9XG5cdCAqL1xuXHRnZXQgaW1hZ2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zb3VyY2UuZGF0YTtcblxuXHR9XG5cblx0c2V0IGltYWdlKCB2YWx1ZSA9IG51bGwgKSB7XG5cblx0XHR0aGlzLnNvdXJjZS5kYXRhID0gdmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB0ZXh0dXJlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBmcm9tIHRoZSBmcm9tIHRoZSBwcm9wZXJ0aWVzIHtAbGluayBUZXh0dXJlI29mZnNldH0sXG5cdCAqIHtAbGluayBUZXh0dXJlI3JlcGVhdH0sIHtAbGluayBUZXh0dXJlI3JvdGF0aW9ufSwgYW5kIHtAbGluayBUZXh0dXJlI2NlbnRlcn0uXG5cdCAqL1xuXHR1cGRhdGVNYXRyaXgoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSggdGhpcy5vZmZzZXQueCwgdGhpcy5vZmZzZXQueSwgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSwgdGhpcy5yb3RhdGlvbiwgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyB0ZXh0dXJlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1RleHR1cmV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHRleHR1cmUgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSBzb3VyY2UgLSBUaGUgdGV4dHVyZSB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtUZXh0dXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHR0aGlzLnNvdXJjZSA9IHNvdXJjZS5zb3VyY2U7XG5cdFx0dGhpcy5taXBtYXBzID0gc291cmNlLm1pcG1hcHMuc2xpY2UoIDAgKTtcblxuXHRcdHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nO1xuXHRcdHRoaXMuY2hhbm5lbCA9IHNvdXJjZS5jaGFubmVsO1xuXG5cdFx0dGhpcy53cmFwUyA9IHNvdXJjZS53cmFwUztcblx0XHR0aGlzLndyYXBUID0gc291cmNlLndyYXBUO1xuXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBzb3VyY2UubWFnRmlsdGVyO1xuXHRcdHRoaXMubWluRmlsdGVyID0gc291cmNlLm1pbkZpbHRlcjtcblxuXHRcdHRoaXMuYW5pc290cm9weSA9IHNvdXJjZS5hbmlzb3Ryb3B5O1xuXG5cdFx0dGhpcy5mb3JtYXQgPSBzb3VyY2UuZm9ybWF0O1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBzb3VyY2UuaW50ZXJuYWxGb3JtYXQ7XG5cdFx0dGhpcy50eXBlID0gc291cmNlLnR5cGU7XG5cblx0XHR0aGlzLm9mZnNldC5jb3B5KCBzb3VyY2Uub2Zmc2V0ICk7XG5cdFx0dGhpcy5yZXBlYXQuY29weSggc291cmNlLnJlcGVhdCApO1xuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXguY29weSggc291cmNlLm1hdHJpeCApO1xuXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBzb3VyY2UuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdHRoaXMucHJlbXVsdGlwbHlBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBseUFscGhhO1xuXHRcdHRoaXMuZmxpcFkgPSBzb3VyY2UuZmxpcFk7XG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSBzb3VyY2UudW5wYWNrQWxpZ25tZW50O1xuXHRcdHRoaXMuY29sb3JTcGFjZSA9IHNvdXJjZS5jb2xvclNwYWNlO1xuXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSBzb3VyY2UucmVuZGVyVGFyZ2V0O1xuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gc291cmNlLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZTtcblxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXJpYWxpemVzIHRoZSB0ZXh0dXJlIGludG8gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIHRleHR1cmUuXG5cdCAqIEBzZWUge0BsaW5rIE9iamVjdExvYWRlciNwYXJzZX1cblx0ICovXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0aWYgKCAhIGlzUm9vdE9iamVjdCAmJiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gbWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF07XG5cblx0XHR9XG5cblx0XHRjb25zdCBvdXRwdXQgPSB7XG5cblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNixcblx0XHRcdFx0dHlwZTogJ1RleHR1cmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdUZXh0dXJlLnRvSlNPTidcblx0XHRcdH0sXG5cblx0XHRcdHV1aWQ6IHRoaXMudXVpZCxcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblxuXHRcdFx0aW1hZ2U6IHRoaXMuc291cmNlLnRvSlNPTiggbWV0YSApLnV1aWQsXG5cblx0XHRcdG1hcHBpbmc6IHRoaXMubWFwcGluZyxcblx0XHRcdGNoYW5uZWw6IHRoaXMuY2hhbm5lbCxcblxuXHRcdFx0cmVwZWF0OiBbIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnkgXSxcblx0XHRcdG9mZnNldDogWyB0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55IF0sXG5cdFx0XHRjZW50ZXI6IFsgdGhpcy5jZW50ZXIueCwgdGhpcy5jZW50ZXIueSBdLFxuXHRcdFx0cm90YXRpb246IHRoaXMucm90YXRpb24sXG5cblx0XHRcdHdyYXA6IFsgdGhpcy53cmFwUywgdGhpcy53cmFwVCBdLFxuXG5cdFx0XHRmb3JtYXQ6IHRoaXMuZm9ybWF0LFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQ6IHRoaXMuaW50ZXJuYWxGb3JtYXQsXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHRjb2xvclNwYWNlOiB0aGlzLmNvbG9yU3BhY2UsXG5cblx0XHRcdG1pbkZpbHRlcjogdGhpcy5taW5GaWx0ZXIsXG5cdFx0XHRtYWdGaWx0ZXI6IHRoaXMubWFnRmlsdGVyLFxuXHRcdFx0YW5pc290cm9weTogdGhpcy5hbmlzb3Ryb3B5LFxuXG5cdFx0XHRmbGlwWTogdGhpcy5mbGlwWSxcblxuXHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiB0aGlzLmdlbmVyYXRlTWlwbWFwcyxcblx0XHRcdHByZW11bHRpcGx5QWxwaGE6IHRoaXMucHJlbXVsdGlwbHlBbHBoYSxcblx0XHRcdHVucGFja0FsaWdubWVudDogdGhpcy51bnBhY2tBbGlnbm1lbnRcblxuXHRcdH07XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIG91dHB1dC51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXSA9IG91dHB1dDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqXG5cdCAqIEBmaXJlcyBUZXh0dXJlI2Rpc3Bvc2Vcblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHQvKipcblx0XHQgKiBGaXJlcyB3aGVuIHRoZSB0ZXh0dXJlIGhhcyBiZWVuIGRpc3Bvc2VkIG9mLlxuXHRcdCAqXG5cdFx0ICogQGV2ZW50IFRleHR1cmUjZGlzcG9zZVxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2Zvcm1zIHRoZSBnaXZlbiB1diB2ZWN0b3Igd2l0aCB0aGUgdGV4dHVyZXMgdXYgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHV2IC0gVGhlIHV2IHZlY3Rvci5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gVGhlIHRyYW5zZm9ybWVkIHV2IHZlY3Rvci5cblx0ICovXG5cdHRyYW5zZm9ybVV2KCB1diApIHtcblxuXHRcdGlmICggdGhpcy5tYXBwaW5nICE9PSBVVk1hcHBpbmcgKSByZXR1cm4gdXY7XG5cblx0XHR1di5hcHBseU1hdHJpeDMoIHRoaXMubWF0cml4ICk7XG5cblx0XHRpZiAoIHV2LnggPCAwIHx8IHV2LnggPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBTICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di54ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnggPSBNYXRoLmNlaWwoIHV2LnggKSAtIHV2Lng7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2LnkgPCAwIHx8IHV2LnkgPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBUICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di55ID0gdXYueSA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di55ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnkgPSBNYXRoLmNlaWwoIHV2LnkgKSAtIHV2Lnk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IoIHV2LnkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmxpcFkgKSB7XG5cblx0XHRcdHV2LnkgPSAxIC0gdXYueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB1djtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB0byBgdHJ1ZWAgaW5kaWNhdGVzIHRoZSBlbmdpbmUgdGhlIHRleHR1cmVcblx0ICogbXVzdCBiZSB1cGRhdGVkIGluIHRoZSBuZXh0IHJlbmRlci4gVGhpcyB0cmlnZ2VycyBhIHRleHR1cmUgdXBsb2FkXG5cdCAqIHRvIHRoZSBHUFUgYW5kIGVuc3VyZXMgY29ycmVjdCB0ZXh0dXJlIHBhcmFtZXRlciBjb25maWd1cmF0aW9uLlxuXHQgKlxuXHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0ICogQGRlZmF1bHQgZmFsc2Vcblx0ICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuXHQgKi9cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblx0XHRcdHRoaXMuc291cmNlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB0byBgdHJ1ZWAgaW5kaWNhdGVzIHRoZSBlbmdpbmUgdGhlIFBNUkVNXG5cdCAqIG11c3QgYmUgcmVnZW5lcmF0ZWQuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG5cdCAqL1xuXHRzZXQgbmVlZHNQTVJFTVVwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnBtcmVtVmVyc2lvbiArKztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBpbWFnZSBmb3IgYWxsIHRleHR1cmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHs/SW1hZ2V9XG4gKiBAZGVmYXVsdCBudWxsXG4gKi9cblRleHR1cmUuREVGQVVMVF9JTUFHRSA9IG51bGw7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbWFwcGluZyBmb3IgYWxsIHRleHR1cmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCBVVk1hcHBpbmdcbiAqL1xuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcgPSBVVk1hcHBpbmc7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgYW5pc290cm9weSB2YWx1ZSBmb3IgYWxsIHRleHR1cmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdCAxXG4gKi9cblRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZID0gMTtcblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSA0RCB2ZWN0b3IuIEEgNEQgdmVjdG9yIGlzIGFuIG9yZGVyZWQgcXVhZHJ1cGxldCBvZiBudW1iZXJzXG4gKiAobGFiZWxlZCB4LCB5LCB6IGFuZCB3KSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IGEgbnVtYmVyIG9mIHRoaW5ncywgc3VjaCBhczpcbiAqXG4gKiAtIEEgcG9pbnQgaW4gNEQgc3BhY2UuXG4gKiAtIEEgZGlyZWN0aW9uIGFuZCBsZW5ndGggaW4gNEQgc3BhY2UuIEluIHRocmVlLmpzIHRoZSBsZW5ndGggd2lsbFxuICogYWx3YXlzIGJlIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2Uoc3RyYWlnaHQtbGluZSBkaXN0YW5jZSkgZnJvbSBgKDAsIDAsIDAsIDApYCB0byBgKHgsIHksIHosIHcpYFxuICogYW5kIHRoZSBkaXJlY3Rpb24gaXMgYWxzbyBtZWFzdXJlZCBmcm9tIGAoMCwgMCwgMCwgMClgIHRvd2FyZHMgYCh4LCB5LCB6LCB3KWAuXG4gKiAtIEFueSBhcmJpdHJhcnkgb3JkZXJlZCBxdWFkcnVwbGV0IG9mIG51bWJlcnMuXG4gKlxuICogVGhlcmUgYXJlIG90aGVyIHRoaW5ncyBhIDREIHZlY3RvciBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQsIGhvd2V2ZXIgdGhlc2VcbiAqIGFyZSB0aGUgbW9zdCBjb21tb24gdXNlcyBpbiAqdGhyZWUuanMqLlxuICpcbiAqIEl0ZXJhdGluZyB0aHJvdWdoIGEgdmVjdG9yIGluc3RhbmNlIHdpbGwgeWllbGQgaXRzIGNvbXBvbmVudHMgYCh4LCB5LCB6LCB3KWAgaW5cbiAqIHRoZSBjb3JyZXNwb25kaW5nIG9yZGVyLlxuICogYGBganNcbiAqIGNvbnN0IGEgPSBuZXcgVEhSRUUuVmVjdG9yNCggMCwgMSwgMCwgMCApO1xuICpcbiAqIC8vbm8gYXJndW1lbnRzOyB3aWxsIGJlIGluaXRpYWxpc2VkIHRvICgwLCAwLCAwLCAxKVxuICogY29uc3QgYiA9IG5ldyBUSFJFRS5WZWN0b3I0KCApO1xuICpcbiAqIGNvbnN0IGQgPSBhLmRvdCggYiApO1xuICogYGBgXG4gKi9cbmNsYXNzIFZlY3RvcjQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IDREIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIHggdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSB5IHZhbHVlIG9mIHRoaXMgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3o9MF0gLSBUaGUgeiB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3PTFdIC0gVGhlIHcgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgdyA9IDEgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHRWZWN0b3I0LnByb3RvdHlwZS5pc1ZlY3RvcjQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHggdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMueCA9IHg7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgeSB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB6IHZhbHVlIG9mIHRoaXMgdmVjdG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHcgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMudyA9IHc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGlhcyBmb3Ige0BsaW5rIFZlY3RvcjQjen0uXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXQgd2lkdGgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy56O1xuXG5cdH1cblxuXHRzZXQgd2lkdGgoIHZhbHVlICkge1xuXG5cdFx0dGhpcy56ID0gdmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGlhcyBmb3Ige0BsaW5rIFZlY3RvcjQjd30uXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXQgaGVpZ2h0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudztcblxuXHR9XG5cblx0c2V0IGhlaWdodCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLncgPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBvZiB0aGUgeCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIG9mIHRoZSB5IGNvbXBvbmVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgdmFsdWUgb2YgdGhlIHogY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSB2YWx1ZSBvZiB0aGUgdyBjb21wb25lbnQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0KCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHo7XG5cdFx0dGhpcy53ID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgdG8gdGhlIHNhbWUgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgdmFsdWUgdG8gc2V0IGZvciBhbGwgdmVjdG9yIGNvbXBvbmVudHMuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblx0XHR0aGlzLncgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvcidzIHggY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0WCggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvcidzIHkgY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0WSggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvcidzIHogY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0WiggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvcidzIHcgY29tcG9uZW50IHRvIHRoZSBnaXZlbiB2YWx1ZVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0VyggdyApIHtcblxuXHRcdHRoaXMudyA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyB0byBzZXQgYSB2ZWN0b3IgY29tcG9uZW50IHdpdGggYW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBjb21wb25lbnQgaW5kZXguIGAwYCBlcXVhbHMgdG8geCwgYDFgIGVxdWFscyB0byB5LFxuXHQgKiBgMmAgZXF1YWxzIHRvIHosIGAzYCBlcXVhbHMgdG8gdy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDM6IHRoaXMudyA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSB2ZWN0b3IgY29tcG9uZW50IHdoaWNoIG1hdGNoZXMgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgY29tcG9uZW50IGluZGV4LiBgMGAgZXF1YWxzIHRvIHgsIGAxYCBlcXVhbHMgdG8geSxcblx0ICogYDJgIGVxdWFscyB0byB6LCBgM2AgZXF1YWxzIHRvIHcuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gQSB2ZWN0b3IgY29tcG9uZW50IHZhbHVlLlxuXHQgKi9cblx0Z2V0Q29tcG9uZW50KCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiB0aGlzLno7XG5cdFx0XHRjYXNlIDM6IHJldHVybiB0aGlzLnc7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN8VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gY29weS5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjb3B5KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cdFx0dGhpcy53ID0gKCB2LncgIT09IHVuZGVmaW5lZCApID8gdi53IDogMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFkZCggdiApIHtcblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXHRcdHRoaXMudyArPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSB0byBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXHRcdHRoaXMudyArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3JzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjR9IGEgLSBUaGUgZmlyc3QgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjR9IGIgLSBUaGUgc2Vjb25kIHZlY3Rvci5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRhZGRWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cdFx0dGhpcy53ID0gYS53ICsgYi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3Igc2NhbGVkIGJ5IHRoZSBnaXZlbiBmYWN0b3IgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3I0fSB2IC0gVGhlIHZlY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHMgLSBUaGUgZmFjdG9yIHRoYXQgc2NhbGVzIGB2YC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRhZGRTY2FsZWRWZWN0b3IoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblx0XHR0aGlzLncgKz0gdi53ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3VidHJhY3RzIHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjR9IHYgLSBUaGUgdmVjdG9yIHRvIHN1YnRyYWN0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHN1YiggdiApIHtcblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXHRcdHRoaXMudyAtPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gc2NhbGFyIHZhbHVlIGZyb20gYWxsIGNvbXBvbmVudHMgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHMgLSBUaGUgc2NhbGFyIHRvIHN1YnRyYWN0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHN1YlNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXHRcdHRoaXMudyAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIHZlY3RvcnMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gYSAtIFRoZSBmaXJzdCB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gYiAtIFRoZSBzZWNvbmQgdmVjdG9yLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHN1YlZlY3RvcnMoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblx0XHR0aGlzLncgPSBhLncgLSBiLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhlIGdpdmVuIHZlY3RvciB3aXRoIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gbXVsdGlwbHkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bXVsdGlwbHkoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cdFx0dGhpcy56ICo9IHYuejtcblx0XHR0aGlzLncgKj0gdi53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgd2l0aCBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gVGhlIHNjYWxhciB0byBtdWx0aXBseS5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRtdWx0aXBseVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cdFx0dGhpcy53ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTXVsdGlwbGllcyB0aGlzIHZlY3RvciB3aXRoIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgNHg0IG1hdHJpeC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRhcHBseU1hdHJpeDQoIG0gKSB7XG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56LCB3ID0gdGhpcy53O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSAqIHc7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA5IF0gKiB6ICsgZVsgMTMgXSAqIHc7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKiB3O1xuXHRcdHRoaXMudyA9IGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGl2aWRlcyB0aGlzIGluc3RhbmNlIGJ5IHRoZSBnaXZlbiB2ZWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gZGl2aWRlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGRpdmlkZSggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblx0XHR0aGlzLnogLz0gdi56O1xuXHRcdHRoaXMudyAvPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERpdmlkZXMgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHNjYWxhci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gZGl2aWRlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHgsIHkgYW5kIHogY29tcG9uZW50cyBvZiB0aGlzXG5cdCAqIHZlY3RvciB0byB0aGUgcXVhdGVybmlvbidzIGF4aXMgYW5kIHcgdG8gdGhlIGFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1F1YXRlcm5pb259IHEgLSBUaGUgUXVhdGVybmlvbiB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24oIHEgKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvcXVhdGVybmlvblRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBxIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy53ID0gMiAqIE1hdGguYWNvcyggcS53ICk7XG5cblx0XHRjb25zdCBzID0gTWF0aC5zcXJ0KCAxIC0gcS53ICogcS53ICk7XG5cblx0XHRpZiAoIHMgPCAwLjAwMDEgKSB7XG5cblx0XHRcdHRoaXMueCA9IDE7XG5cdFx0XHR0aGlzLnkgPSAwO1xuXHRcdFx0dGhpcy56ID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMueCA9IHEueCAvIHM7XG5cdFx0XHR0aGlzLnkgPSBxLnkgLyBzO1xuXHRcdFx0dGhpcy56ID0gcS56IC8gcztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgeCwgeSBhbmQgeiBjb21wb25lbnRzIG9mIHRoaXNcblx0ICogdmVjdG9yIHRvIHRoZSBheGlzIG9mIHJvdGF0aW9uIGFuZCB3IHRvIHRoZSBhbmdsZS5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gQSA0eDQgbWF0cml4IG9mIHdoaWNoIHRoZSB1cHBlciBsZWZ0IDN4MyBtYXRyaXggaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRBeGlzQW5nbGVGcm9tUm90YXRpb25NYXRyaXgoIG0gKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9BbmdsZS9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHRsZXQgYW5nbGUsIHgsIHksIHo7IC8vIHZhcmlhYmxlcyBmb3IgcmVzdWx0XG5cdFx0Y29uc3QgZXBzaWxvbiA9IDAuMDEsXHRcdC8vIG1hcmdpbiB0byBhbGxvdyBmb3Igcm91bmRpbmcgZXJyb3JzXG5cdFx0XHRlcHNpbG9uMiA9IDAuMSxcdFx0Ly8gbWFyZ2luIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gMCBhbmQgMTgwIGRlZ3JlZXNcblxuXHRcdFx0dGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgLSBtMjEgKSA8IGVwc2lsb24gKSAmJlxuXHRcdCAgICAgKCBNYXRoLmFicyggbTEzIC0gbTMxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0yMyAtIG0zMiApIDwgZXBzaWxvbiApICkge1xuXG5cdFx0XHQvLyBzaW5ndWxhcml0eSBmb3VuZFxuXHRcdFx0Ly8gZmlyc3QgY2hlY2sgZm9yIGlkZW50aXR5IG1hdHJpeCB3aGljaCBtdXN0IGhhdmUgKzEgZm9yIGFsbCB0ZXJtc1xuXHRcdFx0Ly8gaW4gbGVhZGluZyBkaWFnb25hbCBhbmQgemVybyBpbiBvdGhlciB0ZXJtc1xuXG5cdFx0XHRpZiAoICggTWF0aC5hYnMoIG0xMiArIG0yMSApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTMgKyBtMzEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTIzICsgbTMyICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0xMSArIG0yMiArIG0zMyAtIDMgKSA8IGVwc2lsb24yICkgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBzaW5ndWxhcml0eSBpcyBpZGVudGl0eSBtYXRyaXggc28gYW5nbGUgPSAwXG5cblx0XHRcdFx0dGhpcy5zZXQoIDEsIDAsIDAsIDAgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpczsgLy8gemVybyBhbmdsZSwgYXJiaXRyYXJ5IGF4aXNcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UgdGhpcyBzaW5ndWxhcml0eSBpcyBhbmdsZSA9IDE4MFxuXG5cdFx0XHRhbmdsZSA9IE1hdGguUEk7XG5cblx0XHRcdGNvbnN0IHh4ID0gKCBtMTEgKyAxICkgLyAyO1xuXHRcdFx0Y29uc3QgeXkgPSAoIG0yMiArIDEgKSAvIDI7XG5cdFx0XHRjb25zdCB6eiA9ICggbTMzICsgMSApIC8gMjtcblx0XHRcdGNvbnN0IHh5ID0gKCBtMTIgKyBtMjEgKSAvIDQ7XG5cdFx0XHRjb25zdCB4eiA9ICggbTEzICsgbTMxICkgLyA0O1xuXHRcdFx0Y29uc3QgeXogPSAoIG0yMyArIG0zMiApIC8gNDtcblxuXHRcdFx0aWYgKCAoIHh4ID4geXkgKSAmJiAoIHh4ID4genogKSApIHtcblxuXHRcdFx0XHQvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeHggPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdFx0eSA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eCA9IE1hdGguc3FydCggeHggKTtcblx0XHRcdFx0XHR5ID0geHkgLyB4O1xuXHRcdFx0XHRcdHogPSB4eiAvIHg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB5eSA+IHp6ICkge1xuXG5cdFx0XHRcdC8vIG0yMiBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXG5cblx0XHRcdFx0aWYgKCB5eSA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR5ID0gTWF0aC5zcXJ0KCB5eSApO1xuXHRcdFx0XHRcdHggPSB4eSAvIHk7XG5cdFx0XHRcdFx0eiA9IHl6IC8geTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbTMzIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0gc28gYmFzZSByZXN1bHQgb24gdGhpc1xuXG5cdFx0XHRcdGlmICggenogPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eiA9IE1hdGguc3FydCggenogKTtcblx0XHRcdFx0XHR4ID0geHogLyB6O1xuXHRcdFx0XHRcdHkgPSB5eiAvIHo7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0KCB4LCB5LCB6LCBhbmdsZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpczsgLy8gcmV0dXJuIDE4MCBkZWcgcm90YXRpb25cblxuXHRcdH1cblxuXHRcdC8vIGFzIHdlIGhhdmUgcmVhY2hlZCBoZXJlIHRoZXJlIGFyZSBubyBzaW5ndWxhcml0aWVzIHNvIHdlIGNhbiBoYW5kbGUgbm9ybWFsbHlcblxuXHRcdGxldCBzID0gTWF0aC5zcXJ0KCAoIG0zMiAtIG0yMyApICogKCBtMzIgLSBtMjMgKSArXG5cdFx0XHQoIG0xMyAtIG0zMSApICogKCBtMTMgLSBtMzEgKSArXG5cdFx0XHQoIG0yMSAtIG0xMiApICogKCBtMjEgLSBtMTIgKSApOyAvLyB1c2VkIHRvIG5vcm1hbGl6ZVxuXG5cdFx0aWYgKCBNYXRoLmFicyggcyApIDwgMC4wMDEgKSBzID0gMTtcblxuXHRcdC8vIHByZXZlbnQgZGl2aWRlIGJ5IHplcm8sIHNob3VsZCBub3QgaGFwcGVuIGlmIG1hdHJpeCBpcyBvcnRob2dvbmFsIGFuZCBzaG91bGQgYmVcblx0XHQvLyBjYXVnaHQgYnkgc2luZ3VsYXJpdHkgdGVzdCBhYm92ZSwgYnV0IEkndmUgbGVmdCBpdCBpbiBqdXN0IGluIGNhc2VcblxuXHRcdHRoaXMueCA9ICggbTMyIC0gbTIzICkgLyBzO1xuXHRcdHRoaXMueSA9ICggbTEzIC0gbTMxICkgLyBzO1xuXHRcdHRoaXMueiA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdHRoaXMudyA9IE1hdGguYWNvcyggKCBtMTEgKyBtMjIgKyBtMzMgLSAxICkgLyAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIHRvIHRoZSBwb3NpdGlvbiBlbGVtZW50cyBvZiB0aGVcblx0ICogZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgNHg0IG1hdHJpeC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRGcm9tTWF0cml4UG9zaXRpb24oIG0gKSB7XG5cblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXHRcdHRoaXMudyA9IGVbIDE1IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSwgeiBvciB3IHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gdmVjdG9yJ3MgeCwgeSwgeiBvciB3XG5cdCAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtaW4gdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5taW4oIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSwgeiBvciB3IHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gdmVjdG9yJ3MgeCwgeSwgeiBvciB3XG5cdCAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtYXggdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5tYXgoIHRoaXMudywgdi53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSwgeiBvciB3IHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZlY3RvcidzIHgsIHksIHogb3Igd1xuXHQgKiB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSwgeiBvciB3IHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgbWluIHZlY3RvcidzIHgsIHksIHogb3IgdyB2YWx1ZSxcblx0ICogaXQgaXMgcmVwbGFjZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gbWluIC0gVGhlIG1pbmltdW0geCwgeSBhbmQgeiB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gbWF4IC0gVGhlIG1heGltdW0geCwgeSBhbmQgeiB2YWx1ZXMgaW4gdGhlIGRlc2lyZWQgcmFuZ2UuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pbi54LCBtYXgueCApO1xuXHRcdHRoaXMueSA9IGNsYW1wKCB0aGlzLnksIG1pbi55LCBtYXgueSApO1xuXHRcdHRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pbi56LCBtYXgueiApO1xuXHRcdHRoaXMudyA9IGNsYW1wKCB0aGlzLncsIG1pbi53LCBtYXgudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHksIHogb3IgdyB2YWx1ZXMgYXJlIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZhbHVlLCB0aGV5IGFyZVxuXHQgKiByZXBsYWNlZCBieSB0aGUgbWF4IHZhbHVlLlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHksIHogb3IgdyB2YWx1ZXMgYXJlIGxlc3MgdGhhbiB0aGUgbWluIHZhbHVlLCB0aGV5IGFyZVxuXHQgKiByZXBsYWNlZCBieSB0aGUgbWluIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWluVmFsIC0gVGhlIG1pbmltdW0gdmFsdWUgdGhlIGNvbXBvbmVudHMgd2lsbCBiZSBjbGFtcGVkIHRvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4VmFsIC0gVGhlIG1heGltdW0gdmFsdWUgdGhlIGNvbXBvbmVudHMgd2lsbCBiZSBjbGFtcGVkIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pblZhbCwgbWF4VmFsICk7XG5cdFx0dGhpcy55ID0gY2xhbXAoIHRoaXMueSwgbWluVmFsLCBtYXhWYWwgKTtcblx0XHR0aGlzLnogPSBjbGFtcCggdGhpcy56LCBtaW5WYWwsIG1heFZhbCApO1xuXHRcdHRoaXMudyA9IGNsYW1wKCB0aGlzLncsIG1pblZhbCwgbWF4VmFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZhbHVlLCBpdCBpcyByZXBsYWNlZCBieVxuXHQgKiB0aGUgbWF4IHZhbHVlLlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhlIG1pbiB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkgdGhlXG5cdCAqIG1pbiB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1pbiAtIFRoZSBtaW5pbXVtIHZhbHVlIHRoZSB2ZWN0b3IgbGVuZ3RoIHdpbGwgYmUgY2xhbXBlZCB0by5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heCAtIFRoZSBtYXhpbXVtIHZhbHVlIHRoZSB2ZWN0b3IgbGVuZ3RoIHdpbGwgYmUgY2xhbXBlZCB0by5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjbGFtcExlbmd0aCggbWluLCBtYXggKSB7XG5cblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBjbGFtcCggbGVuZ3RoLCBtaW4sIG1heCApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Zmxvb3IoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmZsb29yKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLmZsb29yKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgdXAgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRjZWlsKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGguY2VpbCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5jZWlsKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciB2YWx1ZVxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHJvdW5kKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5yb3VuZCggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGFyZSByb3VuZGVkIHRvd2FyZHMgemVybyAodXAgaWYgbmVnYXRpdmUsXG5cdCAqIGRvd24gaWYgcG9zaXRpdmUpIHRvIGFuIGludGVnZXIgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0cm91bmRUb1plcm8oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnRydW5jKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnRydW5jKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnRydW5jKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLnRydW5jKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW52ZXJ0cyB0aGlzIHZlY3RvciAtIGkuZS4gc2V0cyB4ID0gLXgsIHkgPSAteSwgeiA9IC16LCB3ID0gLXcuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cdFx0dGhpcy53ID0gLSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoZSBnaXZlbiB2ZWN0b3Igd2l0aCB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjR9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRvdCBwcm9kdWN0IHdpdGguXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHJlc3VsdCBvZiB0aGUgZG90IHByb2R1Y3QuXG5cdCAqL1xuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56ICsgdGhpcy53ICogdi53O1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIHNxdWFyZSBvZiB0aGUgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIGZyb21cblx0ICogKDAsIDAsIDAsIDApIHRvICh4LCB5LCB6LCB3KS4gSWYgeW91IGFyZSBjb21wYXJpbmcgdGhlIGxlbmd0aHMgb2YgdmVjdG9ycywgeW91IHNob3VsZFxuXHQgKiBjb21wYXJlIHRoZSBsZW5ndGggc3F1YXJlZCBpbnN0ZWFkIGFzIGl0IGlzIHNsaWdodGx5IG1vcmUgZWZmaWNpZW50IHRvIGNhbGN1bGF0ZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3F1YXJlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGxlbmd0aFNxKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSAgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIGZyb20gKDAsIDAsIDAsIDApIHRvICh4LCB5LCB6LCB3KS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgTWFuaGF0dGFuIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bWFuaGF0dGFuTGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKSArIE1hdGguYWJzKCB0aGlzLncgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIHRoaXMgdmVjdG9yIHRvIGEgdW5pdCB2ZWN0b3IgLSB0aGF0IGlzLCBzZXRzIGl0IGVxdWFsIHRvIGEgdmVjdG9yXG5cdCAqIHdpdGggdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoaXMgb25lLCBidXQgd2l0aCBhIHZlY3RvciBsZW5ndGggb2YgYDFgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG5vcm1hbGl6ZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgdmVjdG9yIHRvIGEgdmVjdG9yIHdpdGggdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoaXMgb25lLCBidXRcblx0ICogd2l0aCB0aGUgc3BlY2lmaWVkIGxlbmd0aC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCAtIFRoZSBuZXcgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldExlbmd0aCggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvciBhbmQgdGhpcyBpbnN0YW5jZSwgd2hlcmVcblx0ICogYWxwaGEgaXMgdGhlIHBlcmNlbnQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgLSBhbHBoYSA9IDAgd2lsbCBiZSB0aGlzXG5cdCAqIHZlY3RvciwgYW5kIGFscGhhID0gMSB3aWxsIGJlIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gaW50ZXJwb2xhdGUgdG93YXJkcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLCB0eXBpY2FsbHkgaW4gdGhlIGNsb3NlZCBpbnRlcnZhbCBgWzAsIDFdYC5cblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRsZXJwKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXHRcdHRoaXMudyArPSAoIHYudyAtIHRoaXMudyApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3JzLCB3aGVyZSBhbHBoYSBpcyB0aGUgcGVyY2VudFxuXHQgKiBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSAtIGFscGhhID0gMCB3aWxsIGJlIGZpcnN0IHZlY3RvciwgYW5kIGFscGhhID0gMSB3aWxsXG5cdCAqIGJlIHRoZSBzZWNvbmQgb25lLiBUaGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjR9IHYxIC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3I0fSB2MiAtIFRoZSBzZWNvbmQgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IsIHR5cGljYWxseSBpbiB0aGUgY2xvc2VkIGludGVydmFsIGBbMCwgMV1gLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGxlcnBWZWN0b3JzKCB2MSwgdjIsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ID0gdjEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSA9IHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogPSB2MS56ICsgKCB2Mi56IC0gdjEueiApICogYWxwaGE7XG5cdFx0dGhpcy53ID0gdjEudyArICggdjIudyAtIHYxLncgKSAqIGFscGhhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHZlY3RvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IgdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyB2ZWN0b3IgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKi9cblx0ZXF1YWxzKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSAmJiAoIHYueiA9PT0gdGhpcy56ICkgJiYgKCB2LncgPT09IHRoaXMudyApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgdmVjdG9yJ3MgeCB2YWx1ZSB0byBiZSBgYXJyYXlbIG9mZnNldCBdYCwgeSB2YWx1ZSB0byBiZSBgYXJyYXlbIG9mZnNldCArIDEgXWAsXG5cdCAqIHogdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgKyAyIF1gLCB3IHZhbHVlIHRvIGJlIGBhcnJheVsgb2Zmc2V0ICsgMyBdYC5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnQgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBvZmZzZXQgaW50byB0aGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy53ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogV3JpdGVzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsXG5cdCAqIHRoZSBtZXRob2QgcmV0dXJucyBhIG5ldyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSB2ZWN0b3IgY29tcG9uZW50cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBJbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge0FycmF5PG51bWJlcj59IFRoZSB2ZWN0b3IgY29tcG9uZW50cy5cblx0ICovXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLnc7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGZyb20gdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBUaGUgYnVmZmVyIGF0dHJpYnV0ZSBob2xkaW5nIHZlY3RvciBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3I0fSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblx0XHR0aGlzLncgPSBhdHRyaWJ1dGUuZ2V0VyggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBlYWNoIGNvbXBvbmVudCBvZiB0aGlzIHZlY3RvciB0byBhIHBzZXVkby1yYW5kb20gdmFsdWUgYmV0d2VlbiBgMGAgYW5kXG5cdCAqIGAxYCwgZXhjbHVkaW5nIGAxYC5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yNH0gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRyYW5kb20oKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdHRoaXMueSA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy56ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLncgPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblx0XHR5aWVsZCB0aGlzLno7XG5cdFx0eWllbGQgdGhpcy53O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgcmVuZGVyIHRhcmdldCBpcyBhIGJ1ZmZlciB3aGVyZSB0aGUgdmlkZW8gY2FyZCBkcmF3cyBwaXhlbHMgZm9yIGEgc2NlbmVcbiAqIHRoYXQgaXMgYmVpbmcgcmVuZGVyZWQgaW4gdGhlIGJhY2tncm91bmQuIEl0IGlzIHVzZWQgaW4gZGlmZmVyZW50IGVmZmVjdHMsXG4gKiBzdWNoIGFzIGFwcGx5aW5nIHBvc3Rwcm9jZXNzaW5nIHRvIGEgcmVuZGVyZWQgaW1hZ2UgYmVmb3JlIGRpc3BsYXlpbmcgaXRcbiAqIG9uIHRoZSBzY3JlZW4uXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBSZW5kZXJUYXJnZXQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdC8qKlxuXHQgKiBSZW5kZXIgdGFyZ2V0IG9wdGlvbnMuXG5cdCAqXG5cdCAqIEB0eXBlZGVmIHtPYmplY3R9IFJlbmRlclRhcmdldH5PcHRpb25zXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2dlbmVyYXRlTWlwbWFwcz1mYWxzZV0gLSBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWluRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWluIGZpbHRlci5cblx0ICogQHByb3BlcnR5IHtudW1iZXJ9IFtmb3JtYXQ9UkdCQUZvcm1hdF0gLSBUaGUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEJ5dGVUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuXG5cdCAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gW2ludGVybmFsRm9ybWF0PW51bGxdIC0gVGhlIHRleHR1cmUncyBpbnRlcm5hbCBmb3JtYXQuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgdGV4dHVyZSdzIHV2IHdyYXBwaW5nIG1vZGUuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd3JhcFQ9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgdGV4dHVyZSdzIHV2IHdyYXBwaW5nIG1vZGUuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbYW5pc290cm9weT0xXSAtIFRoZSB0ZXh0dXJlJ3MgYW5pc290cm9weSB2YWx1ZS5cblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb2xvclNwYWNlPU5vQ29sb3JTcGFjZV0gLSBUaGUgdGV4dHVyZSdzIGNvbG9yIHNwYWNlLlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkZXB0aEJ1ZmZlcj10cnVlXSAtIFdoZXRoZXIgdG8gYWxsb2NhdGUgYSBkZXB0aCBidWZmZXIgb3Igbm90LlxuXHQgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzdGVuY2lsQnVmZmVyPWZhbHNlXSAtIFdoZXRoZXIgdG8gYWxsb2NhdGUgYSBzdGVuY2lsIGJ1ZmZlciBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3Jlc29sdmVEZXB0aEJ1ZmZlcj10cnVlXSAtIFdoZXRoZXIgdG8gcmVzb2x2ZSB0aGUgZGVwdGggYnVmZmVyIG9yIG5vdC5cblx0ICogQHByb3BlcnR5IHtib29sZWFufSBbcmVzb2x2ZVN0ZW5jaWxCdWZmZXI9dHJ1ZV0gLSBXaGV0aGVyICB0byByZXNvbHZlIHRoZSBzdGVuY2lsIGJ1ZmZlciBvciBub3QuXG5cdCAqIEBwcm9wZXJ0eSB7P1RleHR1cmV9IFtkZXB0aFRleHR1cmU9bnVsbF0gLSBSZWZlcmVuY2UgdG8gYSBkZXB0aCB0ZXh0dXJlLlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW3NhbXBsZXM9MF0gLSBUaGUgTVNBQSBzYW1wbGVzIGNvdW50LlxuXHQgKiBAcHJvcGVydHkge251bWJlcn0gW2NvdW50PTFdIC0gRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGNvbG9yIGF0dGFjaG1lbnRzIC4gTXVzdCBiZSBhdCBsZWFzdCBgMWAuXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJlbmRlciB0YXJnZXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGg9MV0gLSBUaGUgd2lkdGggb2YgdGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0PTFdIC0gVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtSZW5kZXJUYXJnZXR+T3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHdpZHRoIG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlcHRoIG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlY3Rhbmd1bGFyIGFyZWEgaW5zaWRlIHRoZSByZW5kZXIgdGFyZ2V0J3Mgdmlld3BvcnQuIEZyYWdtZW50cyB0aGF0IGFyZVxuXHRcdCAqIG91dHNpZGUgdGhlIGFyZWEgd2lsbCBiZSBkaXNjYXJkZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yNH1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLHdpZHRoLGhlaWdodClcblx0XHQgKi9cblx0XHR0aGlzLnNjaXNzb3IgPSBuZXcgVmVjdG9yNCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNjaXNzb3IgdGVzdCBzaG91bGQgYmUgZW5hYmxlZCB3aGVuIHJlbmRlcmluZyBpbnRvXG5cdFx0ICogdGhpcyByZW5kZXIgdGFyZ2V0IG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWN0YW5ndWxhciBhcmVhIHJlcHJlc2VudGluZyB0aGUgcmVuZGVyIHRhcmdldCdzIHZpZXdwb3J0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjR9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCx3aWR0aCxoZWlnaHQpXG5cdFx0ICovXG5cdFx0dGhpcy52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRjb25zdCBpbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgZGVwdGg6IDEgfTtcblxuXHRcdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7XG5cdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IGZhbHNlLFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQ6IG51bGwsXG5cdFx0XHRtaW5GaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRcdGRlcHRoQnVmZmVyOiB0cnVlLFxuXHRcdFx0c3RlbmNpbEJ1ZmZlcjogZmFsc2UsXG5cdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6IHRydWUsXG5cdFx0XHRyZXNvbHZlU3RlbmNpbEJ1ZmZlcjogdHJ1ZSxcblx0XHRcdGRlcHRoVGV4dHVyZTogbnVsbCxcblx0XHRcdHNhbXBsZXM6IDAsXG5cdFx0XHRjb3VudDogMVxuXHRcdH0sIG9wdGlvbnMgKTtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSggaW1hZ2UsIG9wdGlvbnMubWFwcGluZywgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuY29sb3JTcGFjZSApO1xuXG5cdFx0dGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xuXHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IG9wdGlvbnMuaW50ZXJuYWxGb3JtYXQ7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiB0ZXh0dXJlcy4gRWFjaCBjb2xvciBhdHRhY2htZW50IGlzIHJlcHJlc2VudGVkIGFzIGEgc2VwYXJhdGUgdGV4dHVyZS5cblx0XHQgKiBIYXMgYXQgbGVhc3QgYSBzaW5nbGUgZW50cnkgZm9yIHRoZSBkZWZhdWx0IGNvbG9yIGF0dGFjaG1lbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8VGV4dHVyZT59XG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlcyA9IFtdO1xuXG5cdFx0Y29uc3QgY291bnQgPSBvcHRpb25zLmNvdW50O1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0gPSB0ZXh0dXJlLmNsb25lKCk7XG5cdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0uaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5yZW5kZXJUYXJnZXQgPSB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byBhbGxvY2F0ZSBhIGRlcHRoIGJ1ZmZlciBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXI7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIGFsbG9jYXRlIGEgc3RlbmNpbCBidWZmZXIgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLnN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnN0ZW5jaWxCdWZmZXI7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIHJlc29sdmUgdGhlIGRlcHRoIGJ1ZmZlciBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5yZXNvbHZlRGVwdGhCdWZmZXIgPSBvcHRpb25zLnJlc29sdmVEZXB0aEJ1ZmZlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gcmVzb2x2ZSB0aGUgc3RlbmNpbCBidWZmZXIgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMucmVzb2x2ZVN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLnJlc29sdmVTdGVuY2lsQnVmZmVyO1xuXG5cdFx0dGhpcy5fZGVwdGhUZXh0dXJlID0gb3B0aW9ucy5kZXB0aFRleHR1cmU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbnVtYmVyIG9mIE1TQUEgc2FtcGxlcy5cblx0XHQgKlxuXHRcdCAqIEEgdmFsdWUgb2YgYDBgIGRpc2FibGVzIE1TQUEuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgdGV4dHVyZSByZXByZXNlbnRpbmcgdGhlIGRlZmF1bHQgY29sb3IgYXR0YWNobWVudC5cblx0ICpcblx0ICogQHR5cGUge1RleHR1cmV9XG5cdCAqL1xuXHRnZXQgdGV4dHVyZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnRleHR1cmVzWyAwIF07XG5cblx0fVxuXG5cdHNldCB0ZXh0dXJlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZXNbIDAgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRzZXQgZGVwdGhUZXh0dXJlKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9kZXB0aFRleHR1cmUgIT09IG51bGwgKSB0aGlzLl9kZXB0aFRleHR1cmUucmVuZGVyVGFyZ2V0ID0gbnVsbDtcblx0XHRpZiAoIGN1cnJlbnQgIT09IG51bGwgKSBjdXJyZW50LnJlbmRlclRhcmdldCA9IHRoaXM7XG5cblx0XHR0aGlzLl9kZXB0aFRleHR1cmUgPSBjdXJyZW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5zdGVhZCBvZiBzYXZpbmcgdGhlIGRlcHRoIGluIGEgcmVuZGVyYnVmZmVyLCBhIHRleHR1cmVcblx0ICogY2FuIGJlIHVzZWQgaW5zdGVhZCB3aGljaCBpcyB1c2VmdWwgZm9yIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuXHQgKiBlLmcuIGluIGNvbnRleHQgb2YgcG9zdC1wcm9jZXNzaW5nLlxuXHQgKlxuXHQgKiBAdHlwZSB7P0RlcHRoVGV4dHVyZX1cblx0ICogQGRlZmF1bHQgbnVsbFxuXHQgKi9cblx0Z2V0IGRlcHRoVGV4dHVyZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9kZXB0aFRleHR1cmU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzaXplIG9mIHRoaXMgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSAtIFRoZSBkZXB0aC5cblx0ICovXG5cdHNldFNpemUoIHdpZHRoLCBoZWlnaHQsIGRlcHRoID0gMSApIHtcblxuXHRcdGlmICggdGhpcy53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5oZWlnaHQgIT09IGhlaWdodCB8fCB0aGlzLmRlcHRoICE9PSBkZXB0aCApIHtcblxuXHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHR0aGlzLmRlcHRoID0gZGVwdGg7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLnRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMudGV4dHVyZXNbIGkgXS5pbWFnZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0uaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0uaW1hZ2UuZGVwdGggPSBkZXB0aDtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlld3BvcnQuc2V0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdFx0dGhpcy5zY2lzc29yLnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyByZW5kZXIgdGFyZ2V0IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1JlbmRlclRhcmdldH0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHNldHRpbmdzIG9mIHRoZSBnaXZlbiByZW5kZXIgdGFyZ2V0LiBUaGlzIGlzIGEgc3RydWN0dXJhbCBjb3B5IHNvXG5cdCAqIG5vIHJlc291cmNlcyBhcmUgc2hhcmVkIGJldHdlZW4gcmVuZGVyIHRhcmdldHMgYWZ0ZXIgdGhlIGNvcHkuIFRoYXQgaW5jbHVkZXNcblx0ICogYWxsIE1SVCB0ZXh0dXJlcyBhbmQgdGhlIGRlcHRoIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyVGFyZ2V0fSBzb3VyY2UgLSBUaGUgcmVuZGVyIHRhcmdldCB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtSZW5kZXJUYXJnZXR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLndpZHRoID0gc291cmNlLndpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gc291cmNlLmhlaWdodDtcblx0XHR0aGlzLmRlcHRoID0gc291cmNlLmRlcHRoO1xuXG5cdFx0dGhpcy5zY2lzc29yLmNvcHkoIHNvdXJjZS5zY2lzc29yICk7XG5cdFx0dGhpcy5zY2lzc29yVGVzdCA9IHNvdXJjZS5zY2lzc29yVGVzdDtcblxuXHRcdHRoaXMudmlld3BvcnQuY29weSggc291cmNlLnZpZXdwb3J0ICk7XG5cblx0XHR0aGlzLnRleHR1cmVzLmxlbmd0aCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gc291cmNlLnRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0gPSBzb3VyY2UudGV4dHVyZXNbIGkgXS5jbG9uZSgpO1xuXHRcdFx0dGhpcy50ZXh0dXJlc1sgaSBdLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9IHRydWU7XG5cdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0ucmVuZGVyVGFyZ2V0ID0gdGhpcztcblxuXHRcdFx0Ly8gZW5zdXJlIGltYWdlIG9iamVjdCBpcyBub3Qgc2hhcmVkLCBzZWUgIzIwMzI4XG5cblx0XHRcdGNvbnN0IGltYWdlID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS50ZXh0dXJlc1sgaSBdLmltYWdlICk7XG5cdFx0XHR0aGlzLnRleHR1cmVzWyBpIF0uc291cmNlID0gbmV3IFNvdXJjZSggaW1hZ2UgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZGVwdGhCdWZmZXIgPSBzb3VyY2UuZGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5zdGVuY2lsQnVmZmVyID0gc291cmNlLnN0ZW5jaWxCdWZmZXI7XG5cblx0XHR0aGlzLnJlc29sdmVEZXB0aEJ1ZmZlciA9IHNvdXJjZS5yZXNvbHZlRGVwdGhCdWZmZXI7XG5cdFx0dGhpcy5yZXNvbHZlU3RlbmNpbEJ1ZmZlciA9IHNvdXJjZS5yZXNvbHZlU3RlbmNpbEJ1ZmZlcjtcblxuXHRcdGlmICggc291cmNlLmRlcHRoVGV4dHVyZSAhPT0gbnVsbCApIHRoaXMuZGVwdGhUZXh0dXJlID0gc291cmNlLmRlcHRoVGV4dHVyZS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5zYW1wbGVzID0gc291cmNlLnNhbXBsZXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0ICpcblx0ICogQGZpcmVzIFJlbmRlclRhcmdldCNkaXNwb3NlXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSByZW5kZXIgdGFyZ2V0IHVzZWQgaW4gY29udGV4dCBvZiB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG4gKlxuICogQGF1Z21lbnRzIFJlbmRlclRhcmdldFxuICovXG5jbGFzcyBXZWJHTFJlbmRlclRhcmdldCBleHRlbmRzIFJlbmRlclRhcmdldCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgM0QgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge1JlbmRlclRhcmdldH5PcHRpb25zfSBbb3B0aW9uc10gLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1dlYkdMUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRleHR1cmVzIGRpcmVjdGx5IGZyb20gcmF3IGJ1ZmZlciBkYXRhLlxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlXG4gKi9cbmNsYXNzIERhdGFBcnJheVRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkYXRhIGFycmF5IHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1R5cGVkQXJyYXl9IFtkYXRhPW51bGxdIC0gVGhlIGJ1ZmZlciBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTFdIC0gVGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgZGVwdGggb2YgdGhlIHRleHR1cmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxICkge1xuXG5cdFx0c3VwZXIoIG51bGwgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNEYXRhQXJyYXlUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbWFnZSBkZWZpbml0aW9uIG9mIGEgZGF0YSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3tkYXRhOlR5cGVkQXJyYXksd2lkdGg6bnVtYmVyLGhlaWdodDpudW1iZXIsZGVwdGg6bnVtYmVyfX1cblx0XHQgKi9cblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IHRoZSB0ZXh0dXJlIGlzIHNhbXBsZWQgd2hlbiBhIHRleGVsIGNvdmVycyBtb3JlIHRoYW4gb25lIHBpeGVsLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgTmVhcmVzdEZpbHRlcmAgYnkgZGVmYXVsdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9XG5cdFx0ICogQGRlZmF1bHQgTmVhcmVzdEZpbHRlclxuXHRcdCAqL1xuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyB0aGUgdGV4dHVyZSBpcyBzYW1wbGVkIHdoZW4gYSB0ZXhlbCBjb3ZlcnMgbGVzcyB0aGFuIG9uZSBwaXhlbC5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYE5lYXJlc3RGaWx0ZXJgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcnxMaW5lYXJGaWx0ZXJ8TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcnxMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIpfVxuXHRcdCAqIEBkZWZhdWx0IE5lYXJlc3RGaWx0ZXJcblx0XHQgKi9cblx0XHR0aGlzLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGRlZmluZXMgaG93IHRoZSB0ZXh0dXJlIGlzIHdyYXBwZWQgaW4gdGhlIGRlcHRoIGFuZCBjb3JyZXNwb25kcyB0b1xuXHRcdCAqICpXKiBpbiBVVlcgbWFwcGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoUmVwZWF0V3JhcHBpbmd8Q2xhbXBUb0VkZ2VXcmFwcGluZ3xNaXJyb3JlZFJlcGVhdFdyYXBwaW5nKX1cblx0XHQgKiBAZGVmYXVsdCBDbGFtcFRvRWRnZVdyYXBwaW5nXG5cdFx0ICovXG5cdFx0dGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdGV4dHVyZSBpcyBmbGlwcGVkIGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzIHdoZW5cblx0XHQgKiB1cGxvYWRlZCB0byB0aGUgR1BVLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IHJlcXVpcmVtZW50cyBmb3IgdGhlIHN0YXJ0IG9mIGVhY2ggcGl4ZWwgcm93IGluIG1lbW9yeS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYDFgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBzZXQgb2YgYWxsIGxheWVycyB3aGljaCBuZWVkIHRvIGJlIHVwZGF0ZWQgaW4gdGhlIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7U2V0PG51bWJlcj59XG5cdFx0ICovXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMgPSBuZXcgU2V0KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXNjcmliZXMgdGhhdCBhIHNwZWNpZmljIGxheWVyIG9mIHRoZSB0ZXh0dXJlIG5lZWRzIHRvIGJlIHVwZGF0ZWQuXG5cdCAqIE5vcm1hbGx5IHdoZW4ge0BsaW5rIFRleHR1cmUjbmVlZHNVcGRhdGV9IGlzIHNldCB0byBgdHJ1ZWAsIHRoZVxuXHQgKiBlbnRpcmUgZGF0YSB0ZXh0dXJlIGFycmF5IGlzIHNlbnQgdG8gdGhlIEdQVS4gTWFya2luZyBzcGVjaWZpY1xuXHQgKiBsYXllcnMgd2lsbCBvbmx5IHRyYW5zbWl0IHN1YnNldHMgb2YgYWxsIG1pcG1hcHMgYXNzb2NpYXRlZCB3aXRoIGFcblx0ICogc3BlY2lmaWMgZGVwdGggaW4gdGhlIGFycmF5IHdoaWNoIGlzIG9mdGVuIG11Y2ggbW9yZSBwZXJmb3JtYW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbGF5ZXJJbmRleCAtIFRoZSBsYXllciBpbmRleCB0aGF0IHNob3VsZCBiZSB1cGRhdGVkLlxuXHQgKi9cblx0YWRkTGF5ZXJVcGRhdGUoIGxheWVySW5kZXggKSB7XG5cblx0XHR0aGlzLmxheWVyVXBkYXRlcy5hZGQoIGxheWVySW5kZXggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0cyB0aGUgbGF5ZXIgdXBkYXRlcyByZWdpc3RyeS5cblx0ICovXG5cdGNsZWFyTGF5ZXJVcGRhdGVzKCkge1xuXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMuY2xlYXIoKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBbiBhcnJheSByZW5kZXIgdGFyZ2V0IHVzZWQgaW4gY29udGV4dCBvZiB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG4gKlxuICogQGF1Z21lbnRzIFdlYkdMUmVuZGVyVGFyZ2V0XG4gKi9cbmNsYXNzIFdlYkdMQXJyYXlSZW5kZXJUYXJnZXQgZXh0ZW5kcyBXZWJHTFJlbmRlclRhcmdldCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXJyYXkgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIC0gVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtSZW5kZXJUYXJnZXR+T3B0aW9uc30gW29wdGlvbnNdIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlciggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1dlYkdMQXJyYXlSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcndyaXR0ZW4gd2l0aCBhIGRpZmZlcmVudCB0ZXh0dXJlIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RGF0YUFycmF5VGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJlZS1kaW1lbnNpb25hbCB0ZXh0dXJlIGZyb20gcmF3IGRhdGEsIHdpdGggcGFyYW1ldGVycyB0b1xuICogZGl2aWRlIGl0IGludG8gd2lkdGgsIGhlaWdodCwgYW5kIGRlcHRoLlxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlXG4gKi9cbmNsYXNzIERhdGEzRFRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkYXRhIGFycmF5IHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P1R5cGVkQXJyYXl9IFtkYXRhPW51bGxdIC0gVGhlIGJ1ZmZlciBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTFdIC0gVGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgZGVwdGggb2YgdGhlIHRleHR1cmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZGVwdGggPSAxICkge1xuXG5cdFx0Ly8gV2UncmUgZ29pbmcgdG8gYWRkIC5zZXRYWFgoKSBtZXRob2RzIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgbGF0ZXIuXG5cdFx0Ly8gVXNlcnMgY2FuIHN0aWxsIHNldCBpbiBEYXRhM0RUZXh0dXJlIGRpcmVjdGx5LlxuXHRcdC8vXG5cdFx0Ly9cdGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuRGF0YTNEVGV4dHVyZSggZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblx0XHQvLyBcdHRleHR1cmUuYW5pc290cm9weSA9IDE2O1xuXHRcdC8vXG5cdFx0Ly8gU2VlICMxNDgzOVxuXG5cdFx0c3VwZXIoIG51bGwgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNEYXRhM0RUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbWFnZSBkZWZpbml0aW9uIG9mIGEgZGF0YSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3tkYXRhOlR5cGVkQXJyYXksd2lkdGg6bnVtYmVyLGhlaWdodDpudW1iZXIsZGVwdGg6bnVtYmVyfX1cblx0XHQgKi9cblx0XHR0aGlzLmltYWdlID0geyBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IHRoZSB0ZXh0dXJlIGlzIHNhbXBsZWQgd2hlbiBhIHRleGVsIGNvdmVycyBtb3JlIHRoYW4gb25lIHBpeGVsLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgTmVhcmVzdEZpbHRlcmAgYnkgZGVmYXVsdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9XG5cdFx0ICogQGRlZmF1bHQgTmVhcmVzdEZpbHRlclxuXHRcdCAqL1xuXHRcdHRoaXMubWFnRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyB0aGUgdGV4dHVyZSBpcyBzYW1wbGVkIHdoZW4gYSB0ZXhlbCBjb3ZlcnMgbGVzcyB0aGFuIG9uZSBwaXhlbC5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYE5lYXJlc3RGaWx0ZXJgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXJ8TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcnxMaW5lYXJGaWx0ZXJ8TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcnxMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIpfVxuXHRcdCAqIEBkZWZhdWx0IE5lYXJlc3RGaWx0ZXJcblx0XHQgKi9cblx0XHR0aGlzLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGRlZmluZXMgaG93IHRoZSB0ZXh0dXJlIGlzIHdyYXBwZWQgaW4gdGhlIGRlcHRoIGFuZCBjb3JyZXNwb25kcyB0b1xuXHRcdCAqICpXKiBpbiBVVlcgbWFwcGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoUmVwZWF0V3JhcHBpbmd8Q2xhbXBUb0VkZ2VXcmFwcGluZ3xNaXJyb3JlZFJlcGVhdFdyYXBwaW5nKX1cblx0XHQgKiBAZGVmYXVsdCBDbGFtcFRvRWRnZVdyYXBwaW5nXG5cdFx0ICovXG5cdFx0dGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdGV4dHVyZSBpcyBmbGlwcGVkIGFsb25nIHRoZSB2ZXJ0aWNhbCBheGlzIHdoZW5cblx0XHQgKiB1cGxvYWRlZCB0byB0aGUgR1BVLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxpcFkgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNwZWNpZmllcyB0aGUgYWxpZ25tZW50IHJlcXVpcmVtZW50cyBmb3IgdGhlIHN0YXJ0IG9mIGVhY2ggcGl4ZWwgcm93IGluIG1lbW9yeS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYDFgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgM0QgcmVuZGVyIHRhcmdldCB1c2VkIGluIGNvbnRleHQgb2Yge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LlxuICpcbiAqIEBhdWdtZW50cyBXZWJHTFJlbmRlclRhcmdldFxuICovXG5jbGFzcyBXZWJHTDNEUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IDNEIHJlbmRlciB0YXJnZXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGg9MV0gLSBUaGUgd2lkdGggb2YgdGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0PTFdIC0gVGhlIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRhcmdldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7UmVuZGVyVGFyZ2V0fk9wdGlvbnN9IFtvcHRpb25zXSAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNXZWJHTDNEUmVuZGVyVGFyZ2V0ID0gdHJ1ZTtcblxuXHRcdHRoaXMuZGVwdGggPSBkZXB0aDtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHdpdGggYSBkaWZmZXJlbnQgdGV4dHVyZSB0eXBlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0RhdGEzRFRleHR1cmV9XG5cdFx0ICovXG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IERhdGEzRFRleHR1cmUoIG51bGwsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XG5cblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgUXVhdGVybmlvbi4gUXVhdGVybmlvbnMgYXJlIHVzZWQgaW4gdGhyZWUuanMgdG8gcmVwcmVzZW50IHJvdGF0aW9ucy5cbiAqXG4gKiBJdGVyYXRpbmcgdGhyb3VnaCBhIHZlY3RvciBpbnN0YW5jZSB3aWxsIHlpZWxkIGl0cyBjb21wb25lbnRzIGAoeCwgeSwgeiwgdylgIGluXG4gKiB0aGUgY29ycmVzcG9uZGluZyBvcmRlci5cbiAqXG4gKiBOb3RlIHRoYXQgdGhyZWUuanMgZXhwZWN0cyBRdWF0ZXJuaW9ucyB0byBiZSBub3JtYWxpemVkLlxuICogYGBganNcbiAqIGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICogcXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBuZXcgVEhSRUUuVmVjdG9yMyggMCwgMSwgMCApLCBNYXRoLlBJIC8gMiApO1xuICpcbiAqIGNvbnN0IHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKCAxLCAwLCAwICk7XG4gKiB2ZWN0b3IuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0ZXJuaW9uICk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgUXVhdGVybmlvbiB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcXVhdGVybmlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIHggdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgeSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbej0wXSAtIFRoZSB6IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3PTFdIC0gVGhlIHcgdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHggPSAwLCB5ID0gMCwgeiA9IDAsIHcgPSAxICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1F1YXRlcm5pb24gPSB0cnVlO1xuXG5cdFx0dGhpcy5feCA9IHg7XG5cdFx0dGhpcy5feSA9IHk7XG5cdFx0dGhpcy5feiA9IHo7XG5cdFx0dGhpcy5fdyA9IHc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnRlcnBvbGF0ZXMgYmV0d2VlbiB0d28gcXVhdGVybmlvbnMgdmlhIFNMRVJQLiBUaGlzIGltcGxlbWVudGF0aW9uIGFzc3VtZXMgdGhlXG5cdCAqIHF1YXRlcm5pb24gZGF0YSBhcmUgbWFuYWdlZCAgaW4gZmxhdCBhcnJheXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZHN0IC0gVGhlIGRlc3RpbmF0aW9uIGFycmF5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHN0T2Zmc2V0IC0gQW4gb2Zmc2V0IGludG8gdGhlIGRlc3RpbmF0aW9uIGFycmF5LlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNyYzAgLSBUaGUgc291cmNlIGFycmF5IG9mIHRoZSBmaXJzdCBxdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3JjT2Zmc2V0MCAtIEFuIG9mZnNldCBpbnRvIHRoZSBmaXJzdCBzb3VyY2UgYXJyYXkuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc3JjMSAtICBUaGUgc291cmNlIGFycmF5IG9mIHRoZSBzZWNvbmQgcXVhdGVybmlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHNyY09mZnNldDEgLSBBbiBvZmZzZXQgaW50byB0aGUgc2Vjb25kIHNvdXJjZSBhcnJheS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IgaW4gdGhlIHJhbmdlIGBbMCwxXWAuXG5cdCAqIEBzZWUge0BsaW5rIFF1YXRlcm5pb24jc2xlcnB9XG5cdCAqL1xuXHRzdGF0aWMgc2xlcnBGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSwgdCApIHtcblxuXHRcdC8vIGZ1enotZnJlZSwgYXJyYXktYmFzZWQgUXVhdGVybmlvbiBTTEVSUCBvcGVyYXRpb25cblxuXHRcdGxldCB4MCA9IHNyYzBbIHNyY09mZnNldDAgKyAwIF0sXG5cdFx0XHR5MCA9IHNyYzBbIHNyY09mZnNldDAgKyAxIF0sXG5cdFx0XHR6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF0sXG5cdFx0XHR3MCA9IHNyYzBbIHNyY09mZnNldDAgKyAzIF07XG5cblx0XHRjb25zdCB4MSA9IHNyYzFbIHNyY09mZnNldDEgKyAwIF0sXG5cdFx0XHR5MSA9IHNyYzFbIHNyY09mZnNldDEgKyAxIF0sXG5cdFx0XHR6MSA9IHNyYzFbIHNyY09mZnNldDEgKyAyIF0sXG5cdFx0XHR3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRpZiAoIHQgPT09IDAgKSB7XG5cblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMCBdID0geDA7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MDtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzA7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHQgPT09IDEgKSB7XG5cblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMCBdID0geDE7XG5cdFx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkxO1xuXHRcdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MTtcblx0XHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzE7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHcwICE9PSB3MSB8fCB4MCAhPT0geDEgfHwgeTAgIT09IHkxIHx8IHowICE9PSB6MSApIHtcblxuXHRcdFx0bGV0IHMgPSAxIC0gdDtcblx0XHRcdGNvbnN0IGNvcyA9IHgwICogeDEgKyB5MCAqIHkxICsgejAgKiB6MSArIHcwICogdzEsXG5cdFx0XHRcdGRpciA9ICggY29zID49IDAgPyAxIDogLTEgKSxcblx0XHRcdFx0c3FyU2luID0gMSAtIGNvcyAqIGNvcztcblxuXHRcdFx0Ly8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczpcblx0XHRcdGlmICggc3FyU2luID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zcXJ0KCBzcXJTaW4gKSxcblx0XHRcdFx0XHRsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApO1xuXG5cdFx0XHRcdHMgPSBNYXRoLnNpbiggcyAqIGxlbiApIC8gc2luO1xuXHRcdFx0XHR0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB0RGlyID0gdCAqIGRpcjtcblxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XG5cdFx0XHR5MCA9IHkwICogcyArIHkxICogdERpcjtcblx0XHRcdHowID0gejAgKiBzICsgejEgKiB0RGlyO1xuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XG5cblx0XHRcdC8vIE5vcm1hbGl6ZSBpbiBjYXNlIHdlIGp1c3QgZGlkIGEgbGVycDpcblx0XHRcdGlmICggcyA9PT0gMSAtIHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgZiA9IDEgLyBNYXRoLnNxcnQoIHgwICogeDAgKyB5MCAqIHkwICsgejAgKiB6MCArIHcwICogdzAgKTtcblxuXHRcdFx0XHR4MCAqPSBmO1xuXHRcdFx0XHR5MCAqPSBmO1xuXHRcdFx0XHR6MCAqPSBmO1xuXHRcdFx0XHR3MCAqPSBmO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAxIF0gPSB5MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDIgXSA9IHowO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHR3byBxdWF0ZXJuaW9ucy4gVGhpcyBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoZSBxdWF0ZXJuaW9uIGRhdGEgYXJlIG1hbmFnZWRcblx0ICogaW4gZmxhdCBhcnJheXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gZHN0IC0gVGhlIGRlc3RpbmF0aW9uIGFycmF5LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHN0T2Zmc2V0IC0gQW4gb2Zmc2V0IGludG8gdGhlIGRlc3RpbmF0aW9uIGFycmF5LlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNyYzAgLSBUaGUgc291cmNlIGFycmF5IG9mIHRoZSBmaXJzdCBxdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3JjT2Zmc2V0MCAtIEFuIG9mZnNldCBpbnRvIHRoZSBmaXJzdCBzb3VyY2UgYXJyYXkuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gc3JjMSAtICBUaGUgc291cmNlIGFycmF5IG9mIHRoZSBzZWNvbmQgcXVhdGVybmlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHNyY09mZnNldDEgLSBBbiBvZmZzZXQgaW50byB0aGUgc2Vjb25kIHNvdXJjZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIGRlc3RpbmF0aW9uIGFycmF5LlxuXHQgKiBAc2VlIHtAbGluayBRdWF0ZXJuaW9uI211bHRpcGx5UXVhdGVybmlvbnN9LlxuXHQgKi9cblx0c3RhdGljIG11bHRpcGx5UXVhdGVybmlvbnNGbGF0KCBkc3QsIGRzdE9mZnNldCwgc3JjMCwgc3JjT2Zmc2V0MCwgc3JjMSwgc3JjT2Zmc2V0MSApIHtcblxuXHRcdGNvbnN0IHgwID0gc3JjMFsgc3JjT2Zmc2V0MCBdO1xuXHRcdGNvbnN0IHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXTtcblx0XHRjb25zdCB6MCA9IHNyYzBbIHNyY09mZnNldDAgKyAyIF07XG5cdFx0Y29uc3QgdzAgPSBzcmMwWyBzcmNPZmZzZXQwICsgMyBdO1xuXG5cdFx0Y29uc3QgeDEgPSBzcmMxWyBzcmNPZmZzZXQxIF07XG5cdFx0Y29uc3QgeTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdO1xuXHRcdGNvbnN0IHoxID0gc3JjMVsgc3JjT2Zmc2V0MSArIDIgXTtcblx0XHRjb25zdCB3MSA9IHNyYzFbIHNyY09mZnNldDEgKyAzIF07XG5cblx0XHRkc3RbIGRzdE9mZnNldCBdID0geDAgKiB3MSArIHcwICogeDEgKyB5MCAqIHoxIC0gejAgKiB5MTtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwICogdzEgKyB3MCAqIHkxICsgejAgKiB4MSAtIHgwICogejE7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAyIF0gPSB6MCAqIHcxICsgdzAgKiB6MSArIHgwICogeTEgLSB5MCAqIHgxO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMyBdID0gdzAgKiB3MSAtIHgwICogeDEgLSB5MCAqIHkxIC0gejAgKiB6MTtcblxuXHRcdHJldHVybiBkc3Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgeCB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCB4KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3g7XG5cblx0fVxuXG5cdHNldCB4KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ggPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgeSB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCB5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3k7XG5cblx0fVxuXG5cdHNldCB5KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3kgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgeiB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCB6KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3o7XG5cblx0fVxuXG5cdHNldCB6KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ogPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgdyB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDFcblx0ICovXG5cdGdldCB3KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3c7XG5cblx0fVxuXG5cdHNldCB3KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3cgPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBxdWF0ZXJuaW9uIGNvbXBvbmVudHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IHZhbHVlIG9mIHRoaXMgcXVhdGVybmlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgeiB2YWx1ZSBvZiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3IC0gVGhlIHcgdmFsdWUgb2YgdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uXG5cdCAqL1xuXHRzZXQoIHgsIHksIHosIHcgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl93ID0gdztcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gcXVhdGVybmlvbiB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRlcm5pb24gLSBUaGUgcXVhdGVybmlvbiB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uXG5cdCAqL1xuXHRjb3B5KCBxdWF0ZXJuaW9uICkge1xuXG5cdFx0dGhpcy5feCA9IHF1YXRlcm5pb24ueDtcblx0XHR0aGlzLl95ID0gcXVhdGVybmlvbi55O1xuXHRcdHRoaXMuX3ogPSBxdWF0ZXJuaW9uLno7XG5cdFx0dGhpcy5fdyA9IHF1YXRlcm5pb24udztcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIHF1YXRlcm5pb24gZnJvbSB0aGUgcm90YXRpb24gc3BlY2lmaWVkIGJ5IHRoZSBnaXZlblxuXHQgKiBFdWxlciBhbmdsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXVsZXJ9IGV1bGVyIC0gVGhlIEV1bGVyIGFuZ2xlcy5cblx0ICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlPXRydWVdIC0gV2hldGhlciB0aGUgaW50ZXJuYWwgYG9uQ2hhbmdlYCBjYWxsYmFjayBzaG91bGQgYmUgZXhlY3V0ZWQgb3Igbm90LlxuXHQgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uXG5cdCAqL1xuXHRzZXRGcm9tRXVsZXIoIGV1bGVyLCB1cGRhdGUgPSB0cnVlICkge1xuXG5cdFx0Y29uc3QgeCA9IGV1bGVyLl94LCB5ID0gZXVsZXIuX3ksIHogPSBldWxlci5feiwgb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHQvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvXG5cdFx0Ly8gXHQyMDY5Ni1mdW5jdGlvbi10by1jb252ZXJ0LWJldHdlZW4tZGNtLWV1bGVyLWFuZ2xlcy1xdWF0ZXJuaW9ucy1hbmQtZXVsZXItdmVjdG9ycy9cblx0XHQvL1x0Y29udGVudC9TcGluQ2FsYy5tXG5cblx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcztcblx0XHRjb25zdCBzaW4gPSBNYXRoLnNpbjtcblxuXHRcdGNvbnN0IGMxID0gY29zKCB4IC8gMiApO1xuXHRcdGNvbnN0IGMyID0gY29zKCB5IC8gMiApO1xuXHRcdGNvbnN0IGMzID0gY29zKCB6IC8gMiApO1xuXG5cdFx0Y29uc3QgczEgPSBzaW4oIHggLyAyICk7XG5cdFx0Y29uc3QgczIgPSBzaW4oIHkgLyAyICk7XG5cdFx0Y29uc3QgczMgPSBzaW4oIHogLyAyICk7XG5cblx0XHRzd2l0Y2ggKCBvcmRlciApIHtcblxuXHRcdFx0Y2FzZSAnWFlaJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1lYWic6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWFknOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnWllYJzpcblx0XHRcdFx0dGhpcy5feCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcblx0XHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdFx0dGhpcy5feiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcblx0XHRcdFx0dGhpcy5fdyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1laWCc6XG5cdFx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG5cdFx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG5cdFx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdYWlknOlxuXHRcdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl95ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuXHRcdFx0XHR0aGlzLl96ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuXHRcdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXI6ICcgKyBvcmRlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGUgPT09IHRydWUgKSB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhpcyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGF4aXMgYW5kIGFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGF4aXMgLSBUaGUgbm9ybWFsaXplZCBheGlzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0c2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvYW5nbGVUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHRjb25zdCBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiByb3RhdGlvbiBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIEEgNHg0IG1hdHJpeCBvZiB3aGljaCB0aGUgdXBwZXIgM3gzIG9mIG1hdHJpeCBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUuIHVuc2NhbGVkKS5cblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG5cblx0XHRjb25zdCB0ZSA9IG0uZWxlbWVudHMsXG5cblx0XHRcdG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF0sXG5cdFx0XHRtMjEgPSB0ZVsgMSBdLCBtMjIgPSB0ZVsgNSBdLCBtMjMgPSB0ZVsgOSBdLFxuXHRcdFx0bTMxID0gdGVbIDIgXSwgbTMyID0gdGVbIDYgXSwgbTMzID0gdGVbIDEwIF0sXG5cblx0XHRcdHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xuXG5cdFx0aWYgKCB0cmFjZSA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7XG5cblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0zMiAtIG0yMyApICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMyAtIG0zMSApICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcblxuXHRcdH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7XG5cblx0XHRcdGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEzICsgbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTIzICsgbTMyICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiB0byB0aGUgcm90YXRpb24gcmVxdWlyZWQgdG8gcm90YXRlIHRoZSBkaXJlY3Rpb24gdmVjdG9yXG5cdCAqIGB2RnJvbWAgdG8gdGhlIGRpcmVjdGlvbiB2ZWN0b3IgYHZUb2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdkZyb20gLSBUaGUgZmlyc3QgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdlRvIC0gVGhlIHNlY29uZCAobm9ybWFsaXplZCkgZGlyZWN0aW9uIHZlY3Rvci5cblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0c2V0RnJvbVVuaXRWZWN0b3JzKCB2RnJvbSwgdlRvICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBkaXJlY3Rpb24gdmVjdG9ycyB2RnJvbSBhbmQgdlRvIGFyZSBub3JtYWxpemVkXG5cblx0XHRsZXQgciA9IHZGcm9tLmRvdCggdlRvICkgKyAxO1xuXG5cdFx0aWYgKCByIDwgTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdC8vIHZGcm9tIGFuZCB2VG8gcG9pbnQgaW4gb3Bwb3NpdGUgZGlyZWN0aW9uc1xuXG5cdFx0XHRyID0gMDtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggdkZyb20ueCApID4gTWF0aC5hYnMoIHZGcm9tLnogKSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gLSB2RnJvbS55O1xuXHRcdFx0XHR0aGlzLl95ID0gdkZyb20ueDtcblx0XHRcdFx0dGhpcy5feiA9IDA7XG5cdFx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl95ID0gLSB2RnJvbS56O1xuXHRcdFx0XHR0aGlzLl96ID0gdkZyb20ueTtcblx0XHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNyb3NzVmVjdG9ycyggdkZyb20sIHZUbyApOyAvLyBpbmxpbmVkIHRvIGF2b2lkIGN5Y2xpYyBkZXBlbmRlbmN5IG9uIFZlY3RvcjNcblxuXHRcdFx0dGhpcy5feCA9IHZGcm9tLnkgKiB2VG8ueiAtIHZGcm9tLnogKiB2VG8ueTtcblx0XHRcdHRoaXMuX3kgPSB2RnJvbS56ICogdlRvLnggLSB2RnJvbS54ICogdlRvLno7XG5cdFx0XHR0aGlzLl96ID0gdkZyb20ueCAqIHZUby55IC0gdkZyb20ueSAqIHZUby54O1xuXHRcdFx0dGhpcy5fdyA9IHI7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhpcyBxdWF0ZXJuaW9uIGFuZCB0aGUgZ2l2ZW4gb25lIGluIHJhZGlhbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBxdWF0ZXJuaW9uIHRvIGNvbXB1dGUgdGhlIGFuZ2xlIHdpdGguXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqL1xuXHRhbmdsZVRvKCBxICkge1xuXG5cdFx0cmV0dXJuIDIgKiBNYXRoLmFjb3MoIE1hdGguYWJzKCBjbGFtcCggdGhpcy5kb3QoIHEgKSwgLTEsIDEgKSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoaXMgcXVhdGVybmlvbiBieSBhIGdpdmVuIGFuZ3VsYXIgc3RlcCB0byB0aGUgZ2l2ZW4gcXVhdGVybmlvbi5cblx0ICogVGhlIG1ldGhvZCBlbnN1cmVzIHRoYXQgdGhlIGZpbmFsIHF1YXRlcm5pb24gd2lsbCBub3Qgb3ZlcnNob290IGBxYC5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIHRhcmdldCBxdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RlcCAtIFRoZSBhbmd1bGFyIHN0ZXAgaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0cm90YXRlVG93YXJkcyggcSwgc3RlcCApIHtcblxuXHRcdGNvbnN0IGFuZ2xlID0gdGhpcy5hbmdsZVRvKCBxICk7XG5cblx0XHRpZiAoIGFuZ2xlID09PSAwICkgcmV0dXJuIHRoaXM7XG5cblx0XHRjb25zdCB0ID0gTWF0aC5taW4oIDEsIHN0ZXAgLyBhbmdsZSApO1xuXG5cdFx0dGhpcy5zbGVycCggcSwgdCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvbjsgdGhhdCBpcywgdG8gdGhlXG5cdCAqIHF1YXRlcm5pb24gdGhhdCByZXByZXNlbnRzIFwibm8gcm90YXRpb25cIi5cblx0ICpcblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0aWRlbnRpdHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIDAsIDAsIDAsIDEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEludmVydHMgdGhpcyBxdWF0ZXJuaW9uIHZpYSB7QGxpbmsgUXVhdGVybmlvbiNjb25qdWdhdGV9LiBUaGVcblx0ICogcXVhdGVybmlvbiBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGguXG5cdCAqXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi5cblx0ICovXG5cdGludmVydCgpIHtcblxuXHRcdHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcm90YXRpb25hbCBjb25qdWdhdGUgb2YgdGhpcyBxdWF0ZXJuaW9uLiBUaGUgY29uanVnYXRlIG9mIGFcblx0ICogcXVhdGVybmlvbiByZXByZXNlbnRzIHRoZSBzYW1lIHJvdGF0aW9uIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gYWJvdXRcblx0ICogdGhlIHJvdGF0aW9uYWwgYXhpcy5cblx0ICpcblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0Y29uanVnYXRlKCkge1xuXG5cdFx0dGhpcy5feCAqPSAtMTtcblx0XHR0aGlzLl95ICo9IC0xO1xuXHRcdHRoaXMuX3ogKj0gLTE7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoaXMgcXVhdGVybmlvbiBhbmQgdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSB2IC0gVGhlIHF1YXRlcm5pb24gdG8gY29tcHV0ZSB0aGUgZG90IHByb2R1Y3Qgd2l0aC5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgcmVzdWx0IG9mIHRoZSBkb3QgcHJvZHVjdC5cblx0ICovXG5cdGRvdCggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLl94ICogdi5feCArIHRoaXMuX3kgKiB2Ll95ICsgdGhpcy5feiAqIHYuX3ogKyB0aGlzLl93ICogdi5fdztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBzcXVhcmVkIEV1Y2xpZGVhbiBsZW5ndGggKHN0cmFpZ2h0LWxpbmUgbGVuZ3RoKSBvZiB0aGlzIHF1YXRlcm5pb24sXG5cdCAqIGNvbnNpZGVyZWQgYXMgYSA0IGRpbWVuc2lvbmFsIHZlY3Rvci4gVGhpcyBjYW4gYmUgdXNlZnVsIGlmIHlvdSBhcmUgY29tcGFyaW5nIHRoZVxuXHQgKiBsZW5ndGhzIG9mIHR3byBxdWF0ZXJuaW9ucywgYXMgdGhpcyBpcyBhIHNsaWdodGx5IG1vcmUgZWZmaWNpZW50IGNhbGN1bGF0aW9uIHRoYW5cblx0ICoge0BsaW5rIFF1YXRlcm5pb24jbGVuZ3RofS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3F1YXJlZCBFdWNsaWRlYW4gbGVuZ3RoLlxuXHQgKi9cblx0bGVuZ3RoU3EoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3c7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgRXVjbGlkZWFuIGxlbmd0aCAoc3RyYWlnaHQtbGluZSBsZW5ndGgpIG9mIHRoaXMgcXVhdGVybmlvbixcblx0ICogY29uc2lkZXJlZCBhcyBhIDQgZGltZW5zaW9uYWwgdmVjdG9yLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBFdWNsaWRlYW4gbGVuZ3RoLlxuXHQgKi9cblx0bGVuZ3RoKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5feCAqIHRoaXMuX3ggKyB0aGlzLl95ICogdGhpcy5feSArIHRoaXMuX3ogKiB0aGlzLl96ICsgdGhpcy5fdyAqIHRoaXMuX3cgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE5vcm1hbGl6ZXMgdGhpcyBxdWF0ZXJuaW9uIC0gdGhhdCBpcywgY2FsY3VsYXRlZCB0aGUgcXVhdGVybmlvbiB0aGF0IHBlcmZvcm1zXG5cdCAqIHRoZSBzYW1lIHJvdGF0aW9uIGFzIHRoaXMgb25lLCBidXQgaGFzIGEgbGVuZ3RoIGVxdWFsIHRvIGAxYC5cblx0ICpcblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0bm9ybWFsaXplKCkge1xuXG5cdFx0bGV0IGwgPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0aWYgKCBsID09PSAwICkge1xuXG5cdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0dGhpcy5feiA9IDA7XG5cdFx0XHR0aGlzLl93ID0gMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGwgPSAxIC8gbDtcblxuXHRcdFx0dGhpcy5feCA9IHRoaXMuX3ggKiBsO1xuXHRcdFx0dGhpcy5feSA9IHRoaXMuX3kgKiBsO1xuXHRcdFx0dGhpcy5feiA9IHRoaXMuX3ogKiBsO1xuXHRcdFx0dGhpcy5fdyA9IHRoaXMuX3cgKiBsO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoaXMgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1F1YXRlcm5pb259IHEgLSBUaGUgcXVhdGVybmlvbi5cblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0bXVsdGlwbHkoIHEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVF1YXRlcm5pb25zKCB0aGlzLCBxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcmUtbXVsdGlwbGllcyB0aGlzIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIHF1YXRlcm5pb24uXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi5cblx0ICovXG5cdHByZW11bHRpcGx5KCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gcXVhdGVybmlvbnMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gYSAtIFRoZSBmaXJzdCBxdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge1F1YXRlcm5pb259IGIgLSBUaGUgc2Vjb25kIHF1YXRlcm5pb24uXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi5cblx0ICovXG5cdG11bHRpcGx5UXVhdGVybmlvbnMoIGEsIGIgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvY29kZS9pbmRleC5odG1cblxuXHRcdGNvbnN0IHFheCA9IGEuX3gsIHFheSA9IGEuX3ksIHFheiA9IGEuX3osIHFhdyA9IGEuX3c7XG5cdFx0Y29uc3QgcWJ4ID0gYi5feCwgcWJ5ID0gYi5feSwgcWJ6ID0gYi5feiwgcWJ3ID0gYi5fdztcblxuXHRcdHRoaXMuX3ggPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7XG5cdFx0dGhpcy5feSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejtcblx0XHR0aGlzLl96ID0gcWF6ICogcWJ3ICsgcWF3ICogcWJ6ICsgcWF4ICogcWJ5IC0gcWF5ICogcWJ4O1xuXHRcdHRoaXMuX3cgPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gcXVhdGVybmlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcWIgLSBUaGUgdGFyZ2V0IHF1YXRlcm5pb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi5cblx0ICovXG5cdHNsZXJwKCBxYiwgdCApIHtcblxuXHRcdGlmICggdCA9PT0gMCApIHJldHVybiB0aGlzO1xuXHRcdGlmICggdCA9PT0gMSApIHJldHVybiB0aGlzLmNvcHkoIHFiICk7XG5cblx0XHRjb25zdCB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvcmVhbE5vcm1lZEFsZ2VicmEvcXVhdGVybmlvbnMvc2xlcnAvXG5cblx0XHRsZXQgY29zSGFsZlRoZXRhID0gdyAqIHFiLl93ICsgeCAqIHFiLl94ICsgeSAqIHFiLl95ICsgeiAqIHFiLl96O1xuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPCAwICkge1xuXG5cdFx0XHR0aGlzLl93ID0gLSBxYi5fdztcblx0XHRcdHRoaXMuX3ggPSAtIHFiLl94O1xuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XG5cdFx0XHR0aGlzLl96ID0gLSBxYi5fejtcblxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvc0hhbGZUaGV0YSA+PSAxLjAgKSB7XG5cblx0XHRcdHRoaXMuX3cgPSB3O1xuXHRcdFx0dGhpcy5feCA9IHg7XG5cdFx0XHR0aGlzLl95ID0geTtcblx0XHRcdHRoaXMuX3ogPSB6O1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IHNxclNpbkhhbGZUaGV0YSA9IDEuMCAtIGNvc0hhbGZUaGV0YSAqIGNvc0hhbGZUaGV0YTtcblxuXHRcdGlmICggc3FyU2luSGFsZlRoZXRhIDw9IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRjb25zdCBzID0gMSAtIHQ7XG5cdFx0XHR0aGlzLl93ID0gcyAqIHcgKyB0ICogdGhpcy5fdztcblx0XHRcdHRoaXMuX3ggPSBzICogeCArIHQgKiB0aGlzLl94O1xuXHRcdFx0dGhpcy5feSA9IHMgKiB5ICsgdCAqIHRoaXMuX3k7XG5cdFx0XHR0aGlzLl96ID0gcyAqIHogKyB0ICogdGhpcy5fejtcblxuXHRcdFx0dGhpcy5ub3JtYWxpemUoKTsgLy8gbm9ybWFsaXplIGNhbGxzIF9vbkNoYW5nZUNhbGxiYWNrKClcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoIHNxclNpbkhhbGZUaGV0YSApO1xuXHRcdGNvbnN0IGhhbGZUaGV0YSA9IE1hdGguYXRhbjIoIHNpbkhhbGZUaGV0YSwgY29zSGFsZlRoZXRhICk7XG5cdFx0Y29uc3QgcmF0aW9BID0gTWF0aC5zaW4oICggMSAtIHQgKSAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhLFxuXHRcdFx0cmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuXHRcdHRoaXMuX3cgPSAoIHcgKiByYXRpb0EgKyB0aGlzLl93ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feCA9ICggeCAqIHJhdGlvQSArIHRoaXMuX3ggKiByYXRpb0IgKTtcblx0XHR0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ogPSAoIHogKiByYXRpb0EgKyB0aGlzLl96ICogcmF0aW9CICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIGdpdmVuIHF1YXRlcm5pb25zXG5cdCAqIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHF1YXRlcm5pb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcWEgLSBUaGUgc291cmNlIHF1YXRlcm5pb24uXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcWIgLSBUaGUgdGFyZ2V0IHF1YXRlcm5pb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgcXVhdGVybmlvbi5cblx0ICovXG5cdHNsZXJwUXVhdGVybmlvbnMoIHFhLCBxYiwgdCApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvcHkoIHFhICkuc2xlcnAoIHFiLCB0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgcXVhdGVybmlvbiB0byBhIHVuaWZvcm1seSByYW5kb20sIG5vcm1hbGl6ZWQgcXVhdGVybmlvbi5cblx0ICpcblx0ICogQHJldHVybiB7UXVhdGVybmlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBxdWF0ZXJuaW9uLlxuXHQgKi9cblx0cmFuZG9tKCkge1xuXG5cdFx0Ly8gS2VuIFNob2VtYWtlXG5cdFx0Ly8gVW5pZm9ybSByYW5kb20gcm90YXRpb25zXG5cdFx0Ly8gRC4gS2lyaywgZWRpdG9yLCBHcmFwaGljcyBHZW1zIElJSSwgcGFnZXMgMTI0LTEzMi4gQWNhZGVtaWMgUHJlc3MsIE5ldyBZb3JrLCAxOTkyLlxuXG5cdFx0Y29uc3QgdGhldGExID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuXHRcdGNvbnN0IHRoZXRhMiA9IDIgKiBNYXRoLlBJICogTWF0aC5yYW5kb20oKTtcblxuXHRcdGNvbnN0IHgwID0gTWF0aC5yYW5kb20oKTtcblx0XHRjb25zdCByMSA9IE1hdGguc3FydCggMSAtIHgwICk7XG5cdFx0Y29uc3QgcjIgPSBNYXRoLnNxcnQoIHgwICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoXG5cdFx0XHRyMSAqIE1hdGguc2luKCB0aGV0YTEgKSxcblx0XHRcdHIxICogTWF0aC5jb3MoIHRoZXRhMSApLFxuXHRcdFx0cjIgKiBNYXRoLnNpbiggdGhldGEyICksXG5cdFx0XHRyMiAqIE1hdGguY29zKCB0aGV0YTIgKSxcblx0XHQpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBxdWF0ZXJuaW9uIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxdWF0ZXJuaW9uIC0gVGhlIHF1YXRlcm5pb24gdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBxdWF0ZXJuaW9uIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggcXVhdGVybmlvbiApIHtcblxuXHRcdHJldHVybiAoIHF1YXRlcm5pb24uX3ggPT09IHRoaXMuX3ggKSAmJiAoIHF1YXRlcm5pb24uX3kgPT09IHRoaXMuX3kgKSAmJiAoIHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3ogKSAmJiAoIHF1YXRlcm5pb24uX3cgPT09IHRoaXMuX3cgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhpcyBxdWF0ZXJuaW9uJ3MgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHF1YXRlcm5pb24gY29tcG9uZW50IHZhbHVlcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBUaGUgb2Zmc2V0IGludG8gdGhlIGFycmF5LlxuXHQgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uXG5cdCAqL1xuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIG9mZnNldCArIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblx0XHR0aGlzLl93ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogV3JpdGVzIHRoZSBjb21wb25lbnRzIG9mIHRoaXMgcXVhdGVybmlvbiB0byB0aGUgZ2l2ZW4gYXJyYXkuIElmIG5vIGFycmF5IGlzIHByb3ZpZGVkLFxuXHQgKiB0aGUgbWV0aG9kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2FycmF5PVtdXSAtIFRoZSB0YXJnZXQgYXJyYXkgaG9sZGluZyB0aGUgcXVhdGVybmlvbiBjb21wb25lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIHF1YXRlcm5pb24gY29tcG9uZW50cy5cblx0ICovXG5cdHRvQXJyYXkoIGFycmF5ID0gW10sIG9mZnNldCA9IDAgKSB7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29tcG9uZW50cyBvZiB0aGlzIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlIGhvbGRpbmcgcXVhdGVybmlvbiBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIHF1YXRlcm5pb24uXG5cdCAqL1xuXHRmcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy5feCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMuX3kgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLl96ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cdFx0dGhpcy5fdyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZHMgZGVmaW5lcyB0aGUgc2VyaWFsaXphdGlvbiByZXN1bHQgb2YgdGhpcyBjbGFzcy4gUmV0dXJucyB0aGVcblx0ICogbnVtZXJpY2FsIGVsZW1lbnRzIG9mIHRoaXMgcXVhdGVybmlvbiBpbiBhbiBhcnJheSBvZiBmb3JtYXQgYFt4LCB5LCB6LCB3XWAuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FycmF5PG51bWJlcj59IFRoZSBzZXJpYWxpemVkIHF1YXRlcm5pb24uXG5cdCAqL1xuXHR0b0pTT04oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50b0FycmF5KCk7XG5cblx0fVxuXG5cdF9vbkNoYW5nZSggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X29uQ2hhbmdlQ2FsbGJhY2soKSB7fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy5feDtcblx0XHR5aWVsZCB0aGlzLl95O1xuXHRcdHlpZWxkIHRoaXMuX3o7XG5cdFx0eWllbGQgdGhpcy5fdztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSAzRCB2ZWN0b3IuIEEgM0QgdmVjdG9yIGlzIGFuIG9yZGVyZWQgdHJpcGxldCBvZiBudW1iZXJzXG4gKiAobGFiZWxlZCB4LCB5IGFuZCB6KSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IGEgbnVtYmVyIG9mIHRoaW5ncywgc3VjaCBhczpcbiAqXG4gKiAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UuXG4gKiAtIEEgZGlyZWN0aW9uIGFuZCBsZW5ndGggaW4gM0Qgc3BhY2UuIEluIHRocmVlLmpzIHRoZSBsZW5ndGggd2lsbFxuICogYWx3YXlzIGJlIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2Uoc3RyYWlnaHQtbGluZSBkaXN0YW5jZSkgZnJvbSBgKDAsIDAsIDApYCB0byBgKHgsIHksIHopYFxuICogYW5kIHRoZSBkaXJlY3Rpb24gaXMgYWxzbyBtZWFzdXJlZCBmcm9tIGAoMCwgMCwgMClgIHRvd2FyZHMgYCh4LCB5LCB6KWAuXG4gKiAtIEFueSBhcmJpdHJhcnkgb3JkZXJlZCB0cmlwbGV0IG9mIG51bWJlcnMuXG4gKlxuICogVGhlcmUgYXJlIG90aGVyIHRoaW5ncyBhIDNEIHZlY3RvciBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQsIHN1Y2ggYXNcbiAqIG1vbWVudHVtIHZlY3RvcnMgYW5kIHNvIG9uLCBob3dldmVyIHRoZXNlIGFyZSB0aGUgbW9zdFxuICogY29tbW9uIHVzZXMgaW4gdGhyZWUuanMuXG4gKlxuICogSXRlcmF0aW5nIHRocm91Z2ggYSB2ZWN0b3IgaW5zdGFuY2Ugd2lsbCB5aWVsZCBpdHMgY29tcG9uZW50cyBgKHgsIHksIHopYCBpblxuICogdGhlIGNvcnJlc3BvbmRpbmcgb3JkZXIuXG4gKiBgYGBqc1xuICogY29uc3QgYSA9IG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxLCAwICk7XG4gKlxuICogLy9ubyBhcmd1bWVudHM7IHdpbGwgYmUgaW5pdGlhbGlzZWQgdG8gKDAsIDAsIDApXG4gKiBjb25zdCBiID0gbmV3IFRIUkVFLlZlY3RvcjMoICk7XG4gKlxuICogY29uc3QgZCA9IGEuZGlzdGFuY2VUbyggYiApO1xuICogYGBgXG4gKi9cbmNsYXNzIFZlY3RvcjMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IDNEIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt4PTBdIC0gVGhlIHggdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbeT0wXSAtIFRoZSB5IHZhbHVlIG9mIHRoaXMgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3o9MF0gLSBUaGUgeiB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB4ID0gMCwgeSA9IDAsIHogPSAwICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0VmVjdG9yMy5wcm90b3R5cGUuaXNWZWN0b3IzID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB4IHZhbHVlIG9mIHRoaXMgdmVjdG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnggPSB4O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHkgdmFsdWUgb2YgdGhpcyB2ZWN0b3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgeiB2YWx1ZSBvZiB0aGlzIHZlY3Rvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy56ID0gejtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBvZiB0aGUgeCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIG9mIHRoZSB5IGNvbXBvbmVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgdmFsdWUgb2YgdGhlIHogY29tcG9uZW50LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldCggeCwgeSwgeiApIHtcblxuXHRcdGlmICggeiA9PT0gdW5kZWZpbmVkICkgeiA9IHRoaXMuejsgLy8gc3ByaXRlLnNjYWxlLnNldCh4LHkpXG5cblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgdG8gdGhlIHNhbWUgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgdmFsdWUgdG8gc2V0IGZvciBhbGwgdmVjdG9yIGNvbXBvbmVudHMuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yJ3MgeCBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHZhbHVlXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRYKCB4ICkge1xuXG5cdFx0dGhpcy54ID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yJ3MgeSBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHZhbHVlXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRZKCB5ICkge1xuXG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yJ3MgeiBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHZhbHVlXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRaKCB6ICkge1xuXG5cdFx0dGhpcy56ID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWxsb3dzIHRvIHNldCBhIHZlY3RvciBjb21wb25lbnQgd2l0aCBhbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNvbXBvbmVudCBpbmRleC4gYDBgIGVxdWFscyB0byB4LCBgMWAgZXF1YWxzIHRvIHksIGAyYCBlcXVhbHMgdG8gei5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRDb21wb25lbnQoIGluZGV4LCB2YWx1ZSApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgdmVjdG9yIGNvbXBvbmVudCB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNvbXBvbmVudCBpbmRleC4gYDBgIGVxdWFscyB0byB4LCBgMWAgZXF1YWxzIHRvIHksIGAyYCBlcXVhbHMgdG8gei5cblx0ICogQHJldHVybiB7bnVtYmVyfSBBIHZlY3RvciBjb21wb25lbnQgdmFsdWUuXG5cdCAqL1xuXHRnZXRDb21wb25lbnQoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IHZlY3RvciB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnksIHRoaXMueiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y29weSggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cdFx0dGhpcy56ID0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBhZGQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YWRkKCB2ICkge1xuXG5cdFx0dGhpcy54ICs9IHYueDtcblx0XHR0aGlzLnkgKz0gdi55O1xuXHRcdHRoaXMueiArPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSB0byBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3JzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGEgLSBUaGUgZmlyc3QgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGIgLSBUaGUgc2Vjb25kIHZlY3Rvci5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRhZGRWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICsgYi54O1xuXHRcdHRoaXMueSA9IGEueSArIGIueTtcblx0XHR0aGlzLnogPSBhLnogKyBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIHZlY3RvciBzY2FsZWQgYnkgdGhlIGdpdmVuIGZhY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN8VmVjdG9yNH0gdiAtIFRoZSB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIGZhY3RvciB0aGF0IHNjYWxlcyBgdmAuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YWRkU2NhbGVkVmVjdG9yKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cdFx0dGhpcy56ICs9IHYueiAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBzdWJ0cmFjdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzdWIoIHYgKSB7XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cdFx0dGhpcy56IC09IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3VidHJhY3RzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgZnJvbSBhbGwgY29tcG9uZW50cyBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gc3VidHJhY3QuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c3ViU2NhbGFyKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c3ViVmVjdG9ycyggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoZSBnaXZlbiB2ZWN0b3Igd2l0aCB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIG11bHRpcGx5LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG11bHRpcGx5KCB2ICkge1xuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXHRcdHRoaXMueiAqPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSB3aXRoIGFsbCBjb21wb25lbnRzIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXIgLSBUaGUgc2NhbGFyIHRvIG11bHRpcGx5LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggKj0gc2NhbGFyO1xuXHRcdHRoaXMueSAqPSBzY2FsYXI7XG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTXVsdGlwbGllcyB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bXVsdGlwbHlWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0dGhpcy54ID0gYS54ICogYi54O1xuXHRcdHRoaXMueSA9IGEueSAqIGIueTtcblx0XHR0aGlzLnogPSBhLnogKiBiLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIGdpdmVuIEV1bGVyIHJvdGF0aW9uIHRvIHRoaXMgdmVjdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBhbmdsZXMuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YXBwbHlFdWxlciggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hcHBseVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDQuc2V0RnJvbUV1bGVyKCBldWxlciApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIGEgcm90YXRpb24gc3BlY2lmaWVkIGJ5IGFuIGF4aXMgYW5kIGFuIGFuZ2xlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGF4aXMgLSBBIG5vcm1hbGl6ZWQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb24gYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YXBwbHlBeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQ0LnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gM3gzIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXgzfSBtIC0gVGhlIDN4MyBtYXRyaXguXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YXBwbHlNYXRyaXgzKCBtICkge1xuXG5cdFx0Y29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDAgXSAqIHggKyBlWyAzIF0gKiB5ICsgZVsgNiBdICogejtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXSAqIHo7XG5cdFx0dGhpcy56ID0gZVsgMiBdICogeCArIGVbIDUgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoaXMgdmVjdG9yIGJ5IHRoZSBnaXZlbiBub3JtYWwgbWF0cml4IGFuZCBub3JtYWxpemVzXG5cdCAqIHRoZSByZXN1bHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBub3JtYWwgbWF0cml4LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFwcGx5Tm9ybWFsTWF0cml4KCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXgzKCBtICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoaXMgdmVjdG9yICh3aXRoIGFuIGltcGxpY2l0IDEgaW4gdGhlIDR0aCBkaW1lbnNpb24pIGJ5IG0sIGFuZFxuXHQgKiBkaXZpZGVzIGJ5IHBlcnNwZWN0aXZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgbWF0cml4IHRvIGFwcGx5LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGFwcGx5TWF0cml4NCggbSApIHtcblxuXHRcdGNvbnN0IHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHRjb25zdCB3ID0gMSAvICggZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKTtcblxuXHRcdHRoaXMueCA9ICggZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6ICsgZVsgMTIgXSApICogdztcblx0XHR0aGlzLnkgPSAoIGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogeiArIGVbIDEzIF0gKSAqIHc7XG5cdFx0dGhpcy56ID0gKCBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSApICogdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQXBwbGllcyB0aGUgZ2l2ZW4gUXVhdGVybmlvbiB0byB0aGlzIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIFF1YXRlcm5pb24uXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0YXBwbHlRdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0Ly8gcXVhdGVybmlvbiBxIGlzIGFzc3VtZWQgdG8gaGF2ZSB1bml0IGxlbmd0aFxuXG5cdFx0Y29uc3QgdnggPSB0aGlzLngsIHZ5ID0gdGhpcy55LCB2eiA9IHRoaXMuejtcblx0XHRjb25zdCBxeCA9IHEueCwgcXkgPSBxLnksIHF6ID0gcS56LCBxdyA9IHEudztcblxuXHRcdC8vIHQgPSAyICogY3Jvc3MoIHEueHl6LCB2ICk7XG5cdFx0Y29uc3QgdHggPSAyICogKCBxeSAqIHZ6IC0gcXogKiB2eSApO1xuXHRcdGNvbnN0IHR5ID0gMiAqICggcXogKiB2eCAtIHF4ICogdnogKTtcblx0XHRjb25zdCB0eiA9IDIgKiAoIHF4ICogdnkgLSBxeSAqIHZ4ICk7XG5cblx0XHQvLyB2ICsgcS53ICogdCArIGNyb3NzKCBxLnh5eiwgdCApO1xuXHRcdHRoaXMueCA9IHZ4ICsgcXcgKiB0eCArIHF5ICogdHogLSBxeiAqIHR5O1xuXHRcdHRoaXMueSA9IHZ5ICsgcXcgKiB0eSArIHF6ICogdHggLSBxeCAqIHR6O1xuXHRcdHRoaXMueiA9IHZ6ICsgcXcgKiB0eiArIHF4ICogdHkgLSBxeSAqIHR4O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcm9qZWN0cyB0aGlzIHZlY3RvciBmcm9tIHdvcmxkIHNwYWNlIGludG8gdGhlIGNhbWVyYSdzIG5vcm1hbGl6ZWRcblx0ICogZGV2aWNlIGNvb3JkaW5hdGUgKE5EQykgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHByb2plY3QoIGNhbWVyYSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVucHJvamVjdHMgdGhpcyB2ZWN0b3IgZnJvbSB0aGUgY2FtZXJhJ3Mgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZSAoTkRDKVxuXHQgKiBzcGFjZSBpbnRvIHdvcmxkIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYS5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHR1bnByb2plY3QoIGNhbWVyYSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybXMgdGhlIGRpcmVjdGlvbiBvZiB0aGlzIHZlY3RvciBieSBhIG1hdHJpeCAodGhlIHVwcGVyIGxlZnQgMyB4IDNcblx0ICogc3Vic2V0IG9mIHRoZSBnaXZlbiA0eDQgbWF0cml4IGFuZCB0aGVuIG5vcm1hbGl6ZXMgdGhlIHJlc3VsdC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHR0cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKSB7XG5cblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XG5cdFx0Ly8gdmVjdG9yIGludGVycHJldGVkIGFzIGEgZGlyZWN0aW9uXG5cblx0XHRjb25zdCB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xuXHRcdGNvbnN0IGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEaXZpZGVzIHRoaXMgaW5zdGFuY2UgYnkgdGhlIGdpdmVuIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBkaXZpZGUuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0ZGl2aWRlKCB2ICkge1xuXG5cdFx0dGhpcy54IC89IHYueDtcblx0XHR0aGlzLnkgLz0gdi55O1xuXHRcdHRoaXMueiAvPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERpdmlkZXMgdGhpcyB2ZWN0b3IgYnkgdGhlIGdpdmVuIHNjYWxhci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdG8gZGl2aWRlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGRpdmlkZVNjYWxhciggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSBvciB6IHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gdmVjdG9yJ3MgeCwgeSBvciB6XG5cdCAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtaW4gdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bWluKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSBvciB6IHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gdmVjdG9yJ3MgeCwgeSBvciB6XG5cdCAqIHZhbHVlLCByZXBsYWNlIHRoYXQgdmFsdWUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBtYXggdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bWF4KCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSBvciB6IHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZlY3RvcidzIHgsIHkgb3IgelxuXHQgKiB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuXG5cdCAqIElmIHRoaXMgdmVjdG9yJ3MgeCwgeSBvciB6IHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgbWluIHZlY3RvcidzIHgsIHkgb3IgeiB2YWx1ZSxcblx0ICogaXQgaXMgcmVwbGFjZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gbWluIC0gVGhlIG1pbmltdW0geCwgeSBhbmQgeiB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gbWF4IC0gVGhlIG1heGltdW0geCwgeSBhbmQgeiB2YWx1ZXMgaW4gdGhlIGRlc2lyZWQgcmFuZ2UuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y2xhbXAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pbi54LCBtYXgueCApO1xuXHRcdHRoaXMueSA9IGNsYW1wKCB0aGlzLnksIG1pbi55LCBtYXgueSApO1xuXHRcdHRoaXMueiA9IGNsYW1wKCB0aGlzLnosIG1pbi56LCBtYXgueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHkgb3IgeiB2YWx1ZXMgYXJlIGdyZWF0ZXIgdGhhbiB0aGUgbWF4IHZhbHVlLCB0aGV5IGFyZVxuXHQgKiByZXBsYWNlZCBieSB0aGUgbWF4IHZhbHVlLlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIHgsIHkgb3IgeiB2YWx1ZXMgYXJlIGxlc3MgdGhhbiB0aGUgbWluIHZhbHVlLCB0aGV5IGFyZVxuXHQgKiByZXBsYWNlZCBieSB0aGUgbWluIHZhbHVlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWluVmFsIC0gVGhlIG1pbmltdW0gdmFsdWUgdGhlIGNvbXBvbmVudHMgd2lsbCBiZSBjbGFtcGVkIHRvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4VmFsIC0gVGhlIG1heGltdW0gdmFsdWUgdGhlIGNvbXBvbmVudHMgd2lsbCBiZSBjbGFtcGVkIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGNsYW1wU2NhbGFyKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IGNsYW1wKCB0aGlzLngsIG1pblZhbCwgbWF4VmFsICk7XG5cdFx0dGhpcy55ID0gY2xhbXAoIHRoaXMueSwgbWluVmFsLCBtYXhWYWwgKTtcblx0XHR0aGlzLnogPSBjbGFtcCggdGhpcy56LCBtaW5WYWwsIG1heFZhbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJZiB0aGlzIHZlY3RvcidzIGxlbmd0aCBpcyBncmVhdGVyIHRoYW4gdGhlIG1heCB2YWx1ZSwgaXQgaXMgcmVwbGFjZWQgYnlcblx0ICogdGhlIG1heCB2YWx1ZS5cblx0ICogSWYgdGhpcyB2ZWN0b3IncyBsZW5ndGggaXMgbGVzcyB0aGFuIHRoZSBtaW4gdmFsdWUsIGl0IGlzIHJlcGxhY2VkIGJ5IHRoZVxuXHQgKiBtaW4gdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gLSBUaGUgbWluaW11bSB2YWx1ZSB0aGUgdmVjdG9yIGxlbmd0aCB3aWxsIGJlIGNsYW1wZWQgdG8uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtYXggLSBUaGUgbWF4aW11bSB2YWx1ZSB0aGUgdmVjdG9yIGxlbmd0aCB3aWxsIGJlIGNsYW1wZWQgdG8uXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y2xhbXBMZW5ndGgoIG1pbiwgbWF4ICkge1xuXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggbGVuZ3RoIHx8IDEgKS5tdWx0aXBseVNjYWxhciggY2xhbXAoIGxlbmd0aCwgbWluLCBtYXggKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgZG93biB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGZsb29yKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBjb21wb25lbnRzIG9mIHRoaXMgdmVjdG9yIGFyZSByb3VuZGVkIHVwIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y2VpbCgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciBhcmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIHZhbHVlXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0cm91bmQoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgYXJlIHJvdW5kZWQgdG93YXJkcyB6ZXJvICh1cCBpZiBuZWdhdGl2ZSxcblx0ICogZG93biBpZiBwb3NpdGl2ZSkgdG8gYW4gaW50ZWdlciB2YWx1ZS5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRyb3VuZFRvWmVybygpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgudHJ1bmMoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgudHJ1bmMoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9IE1hdGgudHJ1bmMoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnZlcnRzIHRoaXMgdmVjdG9yIC0gaS5lLiBzZXRzIHggPSAteCwgeSA9IC15IGFuZCB6ID0gLXouXG5cdCAqXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bmVnYXRlKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoZSBnaXZlbiB2ZWN0b3Igd2l0aCB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRvdCBwcm9kdWN0IHdpdGguXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHJlc3VsdCBvZiB0aGUgZG90IHByb2R1Y3QuXG5cdCAqL1xuXHRkb3QoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56O1xuXG5cdH1cblxuXHQvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBzcXVhcmUgb2YgdGhlIEV1Y2xpZGVhbiBsZW5ndGggKHN0cmFpZ2h0LWxpbmUgbGVuZ3RoKSBmcm9tXG5cdCAqICgwLCAwLCAwKSB0byAoeCwgeSwgeikuIElmIHlvdSBhcmUgY29tcGFyaW5nIHRoZSBsZW5ndGhzIG9mIHZlY3RvcnMsIHlvdSBzaG91bGRcblx0ICogY29tcGFyZSB0aGUgbGVuZ3RoIHNxdWFyZWQgaW5zdGVhZCBhcyBpdCBpcyBzbGlnaHRseSBtb3JlIGVmZmljaWVudCB0byBjYWxjdWxhdGUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZSBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRsZW5ndGhTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgIEV1Y2xpZGVhbiBsZW5ndGggKHN0cmFpZ2h0LWxpbmUgbGVuZ3RoKSBmcm9tICgwLCAwLCAwKSB0byAoeCwgeSwgeikuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIE1hbmhhdHRhbiBsZW5ndGggb2YgdGhpcyB2ZWN0b3IuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cblx0ICovXG5cdG1hbmhhdHRhbkxlbmd0aCgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGlzIHZlY3RvciB0byBhIHVuaXQgdmVjdG9yIC0gdGhhdCBpcywgc2V0cyBpdCBlcXVhbCB0byBhIHZlY3RvclxuXHQgKiB3aXRoIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB0aGlzIG9uZSwgYnV0IHdpdGggYSB2ZWN0b3IgbGVuZ3RoIG9mIGAxYC5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRub3JtYWxpemUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIHZlY3RvciB0byBhIHZlY3RvciB3aXRoIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB0aGlzIG9uZSwgYnV0XG5cdCAqIHdpdGggdGhlIHNwZWNpZmllZCBsZW5ndGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgbmV3IGxlbmd0aCBvZiB0aGlzIHZlY3Rvci5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRMZW5ndGgoIGxlbmd0aCApIHtcblxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCBsZW5ndGggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHRoZSBnaXZlbiB2ZWN0b3IgYW5kIHRoaXMgaW5zdGFuY2UsIHdoZXJlXG5cdCAqIGFscGhhIGlzIHRoZSBwZXJjZW50IGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIC0gYWxwaGEgPSAwIHdpbGwgYmUgdGhpc1xuXHQgKiB2ZWN0b3IsIGFuZCBhbHBoYSA9IDEgd2lsbCBiZSB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGludGVycG9sYXRlIHRvd2FyZHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciwgdHlwaWNhbGx5IGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bGVycCggdiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggKz0gKCB2LnggLSB0aGlzLnggKSAqIGFscGhhO1xuXHRcdHRoaXMueSArPSAoIHYueSAtIHRoaXMueSApICogYWxwaGE7XG5cdFx0dGhpcy56ICs9ICggdi56IC0gdGhpcy56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvcnMsIHdoZXJlIGFscGhhIGlzIHRoZSBwZXJjZW50XG5cdCAqIGRpc3RhbmNlIGFsb25nIHRoZSBsaW5lIC0gYWxwaGEgPSAwIHdpbGwgYmUgZmlyc3QgdmVjdG9yLCBhbmQgYWxwaGEgPSAxIHdpbGxcblx0ICogYmUgdGhlIHNlY29uZCBvbmUuIFRoZSByZXN1bHQgaXMgc3RvcmVkIGluIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdjEgLSBUaGUgZmlyc3QgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYyIC0gVGhlIHNlY29uZCB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbHBoYSAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciwgdHlwaWNhbGx5IGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLCAxXWAuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0bGVycFZlY3RvcnMoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnggPSB2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGE7XG5cdFx0dGhpcy55ID0gdjEueSArICggdjIueSAtIHYxLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiA9IHYxLnogKyAoIHYyLnogLSB2MS56ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgZ2l2ZW4gdmVjdG9yIHdpdGggdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBjcm9zcyBwcm9kdWN0IHdpdGguXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSByZXN1bHQgb2YgdGhlIGNyb3NzIHByb2R1Y3QuXG5cdCAqL1xuXHRjcm9zcyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLmNyb3NzVmVjdG9ycyggdGhpcywgdiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgZ2l2ZW4gdmVjdG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHRcblx0ICogaW4gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0Y3Jvc3NWZWN0b3JzKCBhLCBiICkge1xuXG5cdFx0Y29uc3QgYXggPSBhLngsIGF5ID0gYS55LCBheiA9IGEuejtcblx0XHRjb25zdCBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56O1xuXG5cdFx0dGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnk7XG5cdFx0dGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XG5cdFx0dGhpcy56ID0gYXggKiBieSAtIGF5ICogYng7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByb2plY3RzIHRoaXMgdmVjdG9yIG9udG8gdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBwcm9qZWN0IHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHByb2plY3RPblZlY3RvciggdiApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gdi5sZW5ndGhTcSgpO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCApO1xuXG5cdFx0Y29uc3Qgc2NhbGFyID0gdi5kb3QoIHRoaXMgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdiApLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByb2plY3RzIHRoaXMgdmVjdG9yIG9udG8gYSBwbGFuZSBieSBzdWJ0cmFjdGluZyB0aGlzXG5cdCAqIHZlY3RvciBwcm9qZWN0ZWQgb250byB0aGUgcGxhbmUncyBub3JtYWwgZnJvbSB0aGlzIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwbGFuZU5vcm1hbCAtIFRoZSBwbGFuZSBub3JtYWwuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0cHJvamVjdE9uUGxhbmUoIHBsYW5lTm9ybWFsICkge1xuXG5cdFx0X3ZlY3RvciRjLmNvcHkoIHRoaXMgKS5wcm9qZWN0T25WZWN0b3IoIHBsYW5lTm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWIoIF92ZWN0b3IkYyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVmbGVjdHMgdGhpcyB2ZWN0b3Igb2ZmIGEgcGxhbmUgb3J0aG9nb25hbCB0byB0aGUgZ2l2ZW4gbm9ybWFsIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBub3JtYWwgLSBUaGUgKG5vcm1hbGl6ZWQpIG5vcm1hbCB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0cmVmbGVjdCggbm9ybWFsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViKCBfdmVjdG9yJGMuY29weSggbm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIDIgKiB0aGlzLmRvdCggbm9ybWFsICkgKSApO1xuXG5cdH1cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIGdpdmVuIHZlY3RvciBhbmQgdGhpcyBpbnN0YW5jZSBpbiByYWRpYW5zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGFuZ2xlIHdpdGguXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqL1xuXHRhbmdsZVRvKCB2ICkge1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcblxuXHRcdGNvbnN0IHRoZXRhID0gdGhpcy5kb3QoIHYgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0Ly8gY2xhbXAsIHRvIGhhbmRsZSBudW1lcmljYWwgcHJvYmxlbXNcblxuXHRcdHJldHVybiBNYXRoLmFjb3MoIGNsYW1wKCB0aGV0YSwgLTEsIDEgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZS5cblx0ICovXG5cdGRpc3RhbmNlVG8oIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGZyb20gdGhlIGdpdmVuIHZlY3RvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKiBJZiB5b3UgYXJlIGp1c3QgY29tcGFyaW5nIHRoZSBkaXN0YW5jZSB3aXRoIGFub3RoZXIgZGlzdGFuY2UsIHlvdSBzaG91bGQgY29tcGFyZVxuXHQgKiB0aGUgZGlzdGFuY2Ugc3F1YXJlZCBpbnN0ZWFkIGFzIGl0IGlzIHNsaWdodGx5IG1vcmUgZWZmaWNpZW50IHRvIGNhbGN1bGF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBjb21wdXRlIHRoZSBzcXVhcmVkIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmVkIGRpc3RhbmNlLlxuXHQgKi9cblx0ZGlzdGFuY2VUb1NxdWFyZWQoIHYgKSB7XG5cblx0XHRjb25zdCBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56O1xuXG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkejtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBNYW5oYXR0YW4gZGlzdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IgdG8gY29tcHV0ZSB0aGUgTWFuaGF0dGFuIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBNYW5oYXR0YW4gZGlzdGFuY2UuXG5cdCAqL1xuXHRtYW5oYXR0YW5EaXN0YW5jZVRvKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIHNwaGVyaWNhbCBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtTcGhlcmljYWx9IHMgLSBUaGUgc3BoZXJpY2FsIGNvb3JkaW5hdGVzLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldEZyb21TcGhlcmljYWwoIHMgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tU3BoZXJpY2FsQ29vcmRzKCBzLnJhZGl1cywgcy5waGksIHMudGhldGEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIHNwaGVyaWNhbCBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByYWRpdXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBwaGkgLSBUaGUgcGhpIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSB0aGV0YSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldEZyb21TcGhlcmljYWxDb29yZHMoIHJhZGl1cywgcGhpLCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IHNpblBoaVJhZGl1cyA9IE1hdGguc2luKCBwaGkgKSAqIHJhZGl1cztcblxuXHRcdHRoaXMueCA9IHNpblBoaVJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IE1hdGguY29zKCBwaGkgKSAqIHJhZGl1cztcblx0XHR0aGlzLnogPSBzaW5QaGlSYWRpdXMgKiBNYXRoLmNvcyggdGhldGEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgZnJvbSB0aGUgZ2l2ZW4gY3lsaW5kcmljYWwgY29vcmRpbmF0ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q3lsaW5kcmljYWx9IGMgLSBUaGUgY3lsaW5kcmljYWwgY29vcmRpbmF0ZXMuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0RnJvbUN5bGluZHJpY2FsKCBjICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKCBjLnJhZGl1cywgYy50aGV0YSwgYy55ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiBjeWxpbmRyaWNhbCBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByYWRpdXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSB0aGV0YSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMueCA9IHJhZGl1cyAqIE1hdGguc2luKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy56ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIHRvIHRoZSBwb3NpdGlvbiBlbGVtZW50cyBvZiB0aGVcblx0ICogZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgNHg0IG1hdHJpeC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRGcm9tTWF0cml4UG9zaXRpb24oIG0gKSB7XG5cblx0XHRjb25zdCBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB2ZWN0b3IgY29tcG9uZW50cyB0byB0aGUgc2NhbGUgZWxlbWVudHMgb2YgdGhlXG5cdCAqIGdpdmVuIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIDR4NCBtYXRyaXguXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0RnJvbU1hdHJpeFNjYWxlKCBtICkge1xuXG5cdFx0Y29uc3Qgc3ggPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN6ID0gdGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAyICkubGVuZ3RoKCk7XG5cblx0XHR0aGlzLnggPSBzeDtcblx0XHR0aGlzLnkgPSBzeTtcblx0XHR0aGlzLnogPSBzejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgZnJvbSB0aGUgc3BlY2lmaWVkIG1hdHJpeCBjb2x1bW4uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSA0eDQgbWF0cml4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgY29sdW1uIGluZGV4LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHNldEZyb21NYXRyaXhDb2x1bW4oIG0sIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUFycmF5KCBtLmVsZW1lbnRzLCBpbmRleCAqIDQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIHNwZWNpZmllZCBtYXRyaXggY29sdW1uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgM3gzIG1hdHJpeC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGNvbHVtbiBpbmRleC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSByZWZlcmVuY2UgdG8gdGhpcyB2ZWN0b3IuXG5cdCAqL1xuXHRzZXRGcm9tTWF0cml4M0NvbHVtbiggbSwgaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogMyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmVjdG9yIGNvbXBvbmVudHMgZnJvbSB0aGUgZ2l2ZW4gRXVsZXIgYW5nbGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V1bGVyfSBlIC0gVGhlIEV1bGVyIGFuZ2xlcyB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0RnJvbUV1bGVyKCBlICkge1xuXG5cdFx0dGhpcy54ID0gZS5feDtcblx0XHR0aGlzLnkgPSBlLl95O1xuXHRcdHRoaXMueiA9IGUuX3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZlY3RvciBjb21wb25lbnRzIGZyb20gdGhlIFJHQiBjb21wb25lbnRzIG9mIHRoZVxuXHQgKiBnaXZlbiBjb2xvci5cblx0ICpcblx0ICogQHBhcmFtIHtDb2xvcn0gYyAtIFRoZSBjb2xvciB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0c2V0RnJvbUNvbG9yKCBjICkge1xuXG5cdFx0dGhpcy54ID0gYy5yO1xuXHRcdHRoaXMueSA9IGMuZztcblx0XHR0aGlzLnogPSBjLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgdmVjdG9yIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byB0ZXN0IGZvciBlcXVhbGl0eS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHZlY3RvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqL1xuXHRlcXVhbHMoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIHZlY3RvcidzIHggdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgXWAsIHkgdmFsdWUgdG8gYmUgYGFycmF5WyBvZmZzZXQgKyAxIF1gXG5cdCAqIGFuZCB6IHZhbHVlIHRvIGJlIGBhcnJheVsgb2Zmc2V0ICsgMiBdYC5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIHZlY3RvciBjb21wb25lbnQgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBvZmZzZXQgaW50byB0aGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdyaXRlcyB0aGUgY29tcG9uZW50cyBvZiB0aGlzIHZlY3RvciB0byB0aGUgZ2l2ZW4gYXJyYXkuIElmIG5vIGFycmF5IGlzIHByb3ZpZGVkLFxuXHQgKiB0aGUgbWV0aG9kIHJldHVybnMgYSBuZXcgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2FycmF5PVtdXSAtIFRoZSB0YXJnZXQgYXJyYXkgaG9sZGluZyB0aGUgdmVjdG9yIGNvbXBvbmVudHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gSW5kZXggb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGFycmF5LlxuXHQgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgdmVjdG9yIGNvbXBvbmVudHMuXG5cdCAqL1xuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuejtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB2ZWN0b3IgZnJvbSB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlIGhvbGRpbmcgdmVjdG9yIGRhdGEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdmVjdG9yLlxuXHQgKi9cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCApIHtcblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGVhY2ggY29tcG9uZW50IG9mIHRoaXMgdmVjdG9yIHRvIGEgcHNldWRvLXJhbmRvbSB2YWx1ZSBiZXR3ZWVuIGAwYCBhbmRcblx0ICogYDFgLCBleGNsdWRpbmcgYDFgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHJhbmRvbSgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0dGhpcy55ID0gTWF0aC5yYW5kb20oKTtcblx0XHR0aGlzLnogPSBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgdmVjdG9yIHRvIGEgdW5pZm9ybWx5IHJhbmRvbSBwb2ludCBvbiBhIHVuaXQgc3BoZXJlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdHJhbmRvbURpcmVjdGlvbigpIHtcblxuXHRcdC8vIGh0dHBzOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL1NwaGVyZVBvaW50UGlja2luZy5odG1sXG5cblx0XHRjb25zdCB0aGV0YSA9IE1hdGgucmFuZG9tKCkgKiBNYXRoLlBJICogMjtcblx0XHRjb25zdCB1ID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xuXHRcdGNvbnN0IGMgPSBNYXRoLnNxcnQoIDEgLSB1ICogdSApO1xuXG5cdFx0dGhpcy54ID0gYyAqIE1hdGguY29zKCB0aGV0YSApO1xuXHRcdHRoaXMueSA9IHU7XG5cdFx0dGhpcy56ID0gYyAqIE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy54O1xuXHRcdHlpZWxkIHRoaXMueTtcblx0XHR5aWVsZCB0aGlzLno7XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkYyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9xdWF0ZXJuaW9uJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBRdWF0ZXJuaW9uKCk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBheGlzLWFsaWduZWQgYm91bmRpbmcgYm94IChBQUJCKSBpbiAzRCBzcGFjZS5cbiAqL1xuY2xhc3MgQm94MyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYm91bmRpbmcgYm94LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFttaW49KEluZmluaXR5LEluZmluaXR5LEluZmluaXR5KV0gLSBBIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBib3guXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW21heD0oLUluZmluaXR5LC1JbmZpbml0eSwtSW5maW5pdHkpXSAtIEEgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIGJveC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtaW4gPSBuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApLCBtYXggPSBuZXcgVmVjdG9yMyggLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSApICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0JveDMgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBib3guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLm1pbiA9IG1pbjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgYm94LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy5tYXggPSBtYXg7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBsb3dlciBhbmQgdXBwZXIgYm91bmRhcmllcyBvZiB0aGlzIGJveC5cblx0ICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIG1ldGhvZCBvbmx5IGNvcGllcyB0aGUgdmFsdWVzIGZyb20gdGhlIGdpdmVuIG9iamVjdHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gbWluIC0gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBib3guXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gbWF4IC0gVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBib3guXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0c2V0KCBtaW4sIG1heCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIG1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIG1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYm91bmRzIG9mIHRoaXMgYm94IHNvIGl0IGVuY2xvc2VzIHRoZSBwb3NpdGlvbiBkYXRhXG5cdCAqIGluIHRoZSBnaXZlbiBhcnJheS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgM0QgcG9zaXRpb24gZGF0YS5cblx0ICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRzZXRGcm9tQXJyYXkoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkYi5mcm9tQXJyYXkoIGFycmF5LCBpICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdXBwZXIgYW5kIGxvd2VyIGJvdW5kcyBvZiB0aGlzIGJveCBzbyBpdCBlbmNsb3NlcyB0aGUgcG9zaXRpb24gZGF0YVxuXHQgKiBpbiB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIEEgYnVmZmVyIGF0dHJpYnV0ZSBob2xkaW5nIDNEIHBvc2l0aW9uIGRhdGEuXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0c2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdmVjdG9yJGIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdXBwZXIgYW5kIGxvd2VyIGJvdW5kcyBvZiB0aGlzIGJveCBzbyBpdCBlbmNsb3NlcyB0aGUgcG9zaXRpb24gZGF0YVxuXHQgKiBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMz59IHBvaW50cyAtIEFuIGFycmF5IGhvbGRpbmcgM0QgcG9zaXRpb24gZGF0YSBhcyBpbnN0YW5jZXMgb2Yge0BsaW5rIFZlY3RvcjN9LlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdHNldEZyb21Qb2ludHMoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIHBvaW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENlbnRlcnMgdGhpcyBib3ggb24gdGhlIGdpdmVuIGNlbnRlciB2ZWN0b3IgYW5kIHNldHMgdGhpcyBib3gncyB3aWR0aCwgaGVpZ2h0IGFuZFxuXHQgKiBkZXB0aCB0byB0aGUgZ2l2ZW4gc2l6ZSB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gY2VudGVyIC0gVGhlIGNlbnRlciBvZiB0aGUgYm94LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHNpemUgLSBUaGUgeCwgeSBhbmQgeiBkaW1lbnNpb25zIG9mIHRoZSBib3guXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0c2V0RnJvbUNlbnRlckFuZFNpemUoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdGNvbnN0IGhhbGZTaXplID0gX3ZlY3RvciRiLmNvcHkoIHNpemUgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBjZW50ZXIgKS5zdWIoIGhhbGZTaXplICk7XG5cdFx0dGhpcy5tYXguY29weSggY2VudGVyICkuYWRkKCBoYWxmU2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgd29ybGQtYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCBmb3IgdGhlIGdpdmVuIDNEIG9iamVjdFxuXHQgKiAoaW5jbHVkaW5nIGl0cyBjaGlsZHJlbiksIGFjY291bnRpbmcgZm9yIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsXG5cdCAqIHdvcmxkIHRyYW5zZm9ybXMuIFRoZSBmdW5jdGlvbiBtYXkgcmVzdWx0IGluIGEgbGFyZ2VyIGJveCB0aGFuIHN0cmljdGx5IG5lY2Vzc2FyeS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byBjb21wdXRlIHRoZSBib3VuZGluZyBib3ggZm9yLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVjaXNlPWZhbHNlXSAtIElmIHNldCB0byBgdHJ1ZWAsIHRoZSBtZXRob2QgY29tcHV0ZXMgdGhlIHNtYWxsZXN0XG5cdCAqIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggYXQgdGhlIGV4cGVuc2Ugb2YgbW9yZSBjb21wdXRhdGlvbi5cblx0ICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QsIHByZWNpc2UgPSBmYWxzZSApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRyZXR1cm4gdGhpcy5leHBhbmRCeU9iamVjdCggb2JqZWN0LCBwcmVjaXNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGJveCB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBib3ggdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm94IHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0Y29weSggYm94ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTWFrZXMgdGhpcyBib3ggZW1wdHkgd2hpY2ggbWVhbnMgaW4gZW5jbG9zZXMgYSB6ZXJvIHNwYWNlIGluIDNELlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdG1ha2VFbXB0eSgpIHtcblxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gdGhpcy5taW4ueiA9ICsgSW5maW5pdHk7XG5cdFx0dGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSB0aGlzLm1heC56ID0gLSBJbmZpbml0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYm94IGluY2x1ZGVzIHplcm8gcG9pbnRzIHdpdGhpbiBpdHMgYm91bmRzLlxuXHQgKiBOb3RlIHRoYXQgYSBib3ggd2l0aCBlcXVhbCBsb3dlciBhbmQgdXBwZXIgYm91bmRzIHN0aWxsIGluY2x1ZGVzIG9uZVxuXHQgKiBwb2ludCwgdGhlIG9uZSBib3RoIGJvdW5kcyBzaGFyZS5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGJveCBpcyBlbXB0eSBvciBub3QuXG5cdCAqL1xuXHRpc0VtcHR5KCkge1xuXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcblxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApIHx8ICggdGhpcy5tYXgueiA8IHRoaXMubWluLnogKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNlbnRlciBwb2ludCBvZiB0aGlzIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNlbnRlciBwb2ludC5cblx0ICovXG5cdGdldENlbnRlciggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRpbWVuc2lvbnMgb2YgdGhpcyBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBzaXplLlxuXHQgKi9cblx0Z2V0U2l6ZSggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMubWF4LCB0aGlzLm1pbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kcyB0aGUgYm91bmRhcmllcyBvZiB0aGlzIGJveCB0byBpbmNsdWRlIHRoZSBnaXZlbiBwb2ludC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBieSB0aGUgYm91bmRpbmcgYm94LlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdGV4cGFuZEJ5UG9pbnQoIHBvaW50ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBwb2ludCApO1xuXHRcdHRoaXMubWF4Lm1heCggcG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kcyB0aGlzIGJveCBlcXVpbGF0ZXJhbGx5IGJ5IHRoZSBnaXZlbiB2ZWN0b3IuIFRoZSB3aWR0aCBvZiB0aGlzXG5cdCAqIGJveCB3aWxsIGJlIGV4cGFuZGVkIGJ5IHRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGluIGJvdGhcblx0ICogZGlyZWN0aW9ucy4gVGhlIGhlaWdodCBvZiB0aGlzIGJveCB3aWxsIGJlIGV4cGFuZGVkIGJ5IHRoZSB5IGNvbXBvbmVudCBvZlxuXHQgKiB0aGUgdmVjdG9yIGluIGJvdGggZGlyZWN0aW9ucy4gVGhlIGRlcHRoIG9mIHRoaXMgYm94IHdpbGwgYmVcblx0ICogZXhwYW5kZWQgYnkgdGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgaW4gYm90aCBkaXJlY3Rpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHZlY3RvciAtIFRoZSB2ZWN0b3IgdGhhdCBzaG91bGQgZXhwYW5kIHRoZSBib3VuZGluZyBib3guXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0ZXhwYW5kQnlWZWN0b3IoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kcyBlYWNoIGRpbWVuc2lvbiBvZiB0aGUgYm94IGJ5IHRoZSBnaXZlbiBzY2FsYXIuIElmIG5lZ2F0aXZlLCB0aGVcblx0ICogZGltZW5zaW9ucyBvZiB0aGUgYm94IHdpbGwgYmUgY29udHJhY3RlZC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUgdGhhdCBzaG91bGQgZXhwYW5kIHRoZSBib3VuZGluZyBib3guXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0ZXhwYW5kQnlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTtcblx0XHR0aGlzLm1heC5hZGRTY2FsYXIoIHNjYWxhciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHBhbmRzIHRoZSBib3VuZGFyaWVzIG9mIHRoaXMgYm94IHRvIGluY2x1ZGUgdGhlIGdpdmVuIDNEIG9iamVjdCBhbmRcblx0ICogaXRzIGNoaWxkcmVuLCBhY2NvdW50aW5nIGZvciB0aGUgb2JqZWN0J3MsIGFuZCBjaGlsZHJlbidzLCB3b3JsZFxuXHQgKiB0cmFuc2Zvcm1zLiBUaGUgZnVuY3Rpb24gbWF5IHJlc3VsdCBpbiBhIGxhcmdlciBib3ggdGhhbiBzdHJpY3RseVxuXHQgKiBuZWNlc3NhcnkgKHVubGVzcyB0aGUgcHJlY2lzZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIHRydWUpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0IHRoYXQgc2hvdWxkIGV4cGFuZCB0aGUgYm91bmRpbmcgYm94LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHByZWNpc2UgLSBJZiBzZXQgdG8gYHRydWVgLCB0aGUgbWV0aG9kIGV4cGFuZHMgdGhlIGJvdW5kaW5nIGJveFxuXHQgKiBhcyBsaXR0bGUgYXMgbmVjZXNzYXJ5IGF0IHRoZSBleHBlbnNlIG9mIG1vcmUgY29tcHV0YXRpb24uXG5cdCAqIEByZXR1cm4ge0JveDN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0ZXhwYW5kQnlPYmplY3QoIG9iamVjdCwgcHJlY2lzZSA9IGZhbHNlICkge1xuXG5cdFx0Ly8gQ29tcHV0ZXMgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggb2YgYW4gb2JqZWN0IChpbmNsdWRpbmcgaXRzIGNoaWxkcmVuKSxcblx0XHQvLyBhY2NvdW50aW5nIGZvciBib3RoIHRoZSBvYmplY3QncywgYW5kIGNoaWxkcmVuJ3MsIHdvcmxkIHRyYW5zZm9ybXNcblxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIGZhbHNlICk7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdFx0Ly8gcHJlY2lzZSBBQUJCIGNvbXB1dGF0aW9uIGJhc2VkIG9uIHZlcnRleCBkYXRhIHJlcXVpcmVzIGF0IGxlYXN0IGEgcG9zaXRpb24gYXR0cmlidXRlLlxuXHRcdFx0Ly8gaW5zdGFuY2luZyBpc24ndCBzdXBwb3J0ZWQgc28gZmFyIGFuZCB1c2VzIHRoZSBub3JtYWwgKGNvbnNlcnZhdGl2ZSkgY29kZSBwYXRoLlxuXG5cdFx0XHRpZiAoIHByZWNpc2UgPT09IHRydWUgJiYgcG9zaXRpb25BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmlzTWVzaCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBpLCBfdmVjdG9yJGIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkYi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X3ZlY3RvciRiLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBfdmVjdG9yJGIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuYm91bmRpbmdCb3ggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIG9iamVjdC1sZXZlbCBib3VuZGluZyBib3hcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfYm94JDQuY29weSggb2JqZWN0LmJvdW5kaW5nQm94ICk7XG5cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gZ2VvbWV0cnktbGV2ZWwgYm91bmRpbmcgYm94XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9ib3gkNC5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ0JveCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfYm94JDQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR0aGlzLnVuaW9uKCBfYm94JDQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5T2JqZWN0KCBjaGlsZHJlblsgaSBdLCBwcmVjaXNlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBwb2ludCBsaWVzIHdpdGhpbiBvciBvbiB0aGUgYm91bmRhcmllcyBvZiB0aGlzIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3VuZGluZyBib3ggY29udGFpbnMgdGhlIGdpdmVuIHBvaW50IG9yIG5vdC5cblx0ICovXG5cdGNvbnRhaW5zUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHBvaW50LnggPj0gdGhpcy5taW4ueCAmJiBwb2ludC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHBvaW50LnkgPj0gdGhpcy5taW4ueSAmJiBwb2ludC55IDw9IHRoaXMubWF4LnkgJiZcblx0XHRcdHBvaW50LnogPj0gdGhpcy5taW4ueiAmJiBwb2ludC56IDw9IHRoaXMubWF4Lno7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGJvdW5kaW5nIGJveCBpbmNsdWRlcyB0aGUgZW50aXJldHkgb2YgdGhlIGdpdmVuIGJvdW5kaW5nIGJveC5cblx0ICogSWYgdGhpcyBib3ggYW5kIHRoZSBnaXZlbiBvbmUgYXJlIGlkZW50aWNhbCwgdGhpcyBmdW5jdGlvbiBhbHNvIHJldHVybnMgYHRydWVgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYm91bmRpbmcgYm94IGNvbnRhaW5zIHRoZSBnaXZlbiBib3VuZGluZyBib3ggb3Igbm90LlxuXHQgKi9cblx0Y29udGFpbnNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJlxuXHRcdFx0dGhpcy5taW4ueSA8PSBib3gubWluLnkgJiYgYm94Lm1heC55IDw9IHRoaXMubWF4LnkgJiZcblx0XHRcdHRoaXMubWluLnogPD0gYm94Lm1pbi56ICYmIGJveC5tYXgueiA8PSB0aGlzLm1heC56O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBvaW50IGFzIGEgcHJvcG9ydGlvbiBvZiB0aGlzIGJveCdzIHdpZHRoLCBoZWlnaHQgYW5kIGRlcHRoLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gQSBwb2ludCBpbiAzRCBzcGFjZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gQSBwb2ludCBhcyBhIHByb3BvcnRpb24gb2YgdGhpcyBib3gncyB3aWR0aCwgaGVpZ2h0IGFuZCBkZXB0aC5cblx0ICovXG5cdGdldFBhcmFtZXRlciggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxuXHRcdFx0KCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApXG5cdFx0KTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBib3VuZGluZyBib3ggaW50ZXJzZWN0cyB3aXRoIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94IGludGVyc2VjdHMgd2l0aCB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdC8vIHVzaW5nIDYgc3BsaXR0aW5nIHBsYW5lcyB0byBydWxlIG91dCBpbnRlcnNlY3Rpb25zLlxuXHRcdHJldHVybiBib3gubWF4LnggPj0gdGhpcy5taW4ueCAmJiBib3gubWluLnggPD0gdGhpcy5tYXgueCAmJlxuXHRcdFx0Ym94Lm1heC55ID49IHRoaXMubWluLnkgJiYgYm94Lm1pbi55IDw9IHRoaXMubWF4LnkgJiZcblx0XHRcdGJveC5tYXgueiA+PSB0aGlzLm1pbi56ICYmIGJveC5taW4ueiA8PSB0aGlzLm1heC56O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGJvdW5kaW5nIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhpcyBib3VuZGluZyBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgYm91bmRpbmcgc3BoZXJlIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJvdW5kaW5nIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHQvLyBGaW5kIHRoZSBwb2ludCBvbiB0aGUgQUFCQiBjbG9zZXN0IHRvIHRoZSBzcGhlcmUgY2VudGVyLlxuXHRcdHRoaXMuY2xhbXBQb2ludCggc3BoZXJlLmNlbnRlciwgX3ZlY3RvciRiICk7XG5cblx0XHQvLyBJZiB0aGF0IHBvaW50IGlzIGluc2lkZSB0aGUgc3BoZXJlLCB0aGUgQUFCQiBhbmQgc3BoZXJlIGludGVyc2VjdC5cblx0XHRyZXR1cm4gX3ZlY3RvciRiLmRpc3RhbmNlVG9TcXVhcmVkKCBzcGhlcmUuY2VudGVyICkgPD0gKCBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHBsYW5lIGludGVyc2VjdHMgd2l0aCB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gcGxhbmUgaW50ZXJzZWN0cyB3aXRoIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0aW50ZXJzZWN0c1BsYW5lKCBwbGFuZSApIHtcblxuXHRcdC8vIFdlIGNvbXB1dGUgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZG90IHByb2R1Y3QgdmFsdWVzLiBJZiB0aG9zZSB2YWx1ZXNcblx0XHQvLyBhcmUgb24gdGhlIHNhbWUgc2lkZSAoYmFjayBvciBmcm9udCkgb2YgdGhlIHBsYW5lLCB0aGVuIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cblxuXHRcdGxldCBtaW4sIG1heDtcblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnggPiAwICkge1xuXG5cdFx0XHRtaW4gPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWluLng7XG5cdFx0XHRtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtaW4gPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7XG5cdFx0XHRtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWluLng7XG5cblx0XHR9XG5cblx0XHRpZiAoIHBsYW5lLm5vcm1hbC55ID4gMCApIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5taW4ueTtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWF4Lnk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5taW4ueTtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmUubm9ybWFsLnogPiAwICkge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5tYXguejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICggbWluIDw9IC0gcGxhbmUuY29uc3RhbnQgJiYgbWF4ID49IC0gcGxhbmUuY29uc3RhbnQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB0cmlhbmdsZSBpbnRlcnNlY3RzIHdpdGggdGhpcyBib3VuZGluZyBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7VHJpYW5nbGV9IHRyaWFuZ2xlIC0gVGhlIHRyaWFuZ2xlIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHRyaWFuZ2xlIGludGVyc2VjdHMgd2l0aCB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdGludGVyc2VjdHNUcmlhbmdsZSggdHJpYW5nbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIGJveCBjZW50ZXIgYW5kIGV4dGVudHNcblx0XHR0aGlzLmdldENlbnRlciggX2NlbnRlciApO1xuXHRcdF9leHRlbnRzLnN1YlZlY3RvcnMoIHRoaXMubWF4LCBfY2VudGVyICk7XG5cblx0XHQvLyB0cmFuc2xhdGUgdHJpYW5nbGUgdG8gYWFiYiBvcmlnaW5cblx0XHRfdjAkMi5zdWJWZWN0b3JzKCB0cmlhbmdsZS5hLCBfY2VudGVyICk7XG5cdFx0X3YxJDcuc3ViVmVjdG9ycyggdHJpYW5nbGUuYiwgX2NlbnRlciApO1xuXHRcdF92MiQ0LnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmMsIF9jZW50ZXIgKTtcblxuXHRcdC8vIGNvbXB1dGUgZWRnZSB2ZWN0b3JzIGZvciB0cmlhbmdsZVxuXHRcdF9mMC5zdWJWZWN0b3JzKCBfdjEkNywgX3YwJDIgKTtcblx0XHRfZjEuc3ViVmVjdG9ycyggX3YyJDQsIF92MSQ3ICk7XG5cdFx0X2YyLnN1YlZlY3RvcnMoIF92MCQyLCBfdjIkNCApO1xuXG5cdFx0Ly8gdGVzdCBhZ2FpbnN0IGF4ZXMgdGhhdCBhcmUgZ2l2ZW4gYnkgY3Jvc3MgcHJvZHVjdCBjb21iaW5hdGlvbnMgb2YgdGhlIGVkZ2VzIG9mIHRoZSB0cmlhbmdsZSBhbmQgdGhlIGVkZ2VzIG9mIHRoZSBhYWJiXG5cdFx0Ly8gbWFrZSBhbiBheGlzIHRlc3Rpbmcgb2YgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgYWFiYiBhZ2FpbnN0IGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIHRyaWFuZ2xlID0gOSBheGlzIG9mIHNlcGFyYXRpb25cblx0XHQvLyBheGlzX2lqID0gdV9pIHggZl9qICh1MCwgdTEsIHUyID0gZmFjZSBub3JtYWxzIG9mIGFhYmIgPSB4LHkseiBheGVzIHZlY3RvcnMgc2luY2UgYWFiYiBpcyBheGlzIGFsaWduZWQpXG5cdFx0bGV0IGF4ZXMgPSBbXG5cdFx0XHQwLCAtIF9mMC56LCBfZjAueSwgMCwgLSBfZjEueiwgX2YxLnksIDAsIC0gX2YyLnosIF9mMi55LFxuXHRcdFx0X2YwLnosIDAsIC0gX2YwLngsIF9mMS56LCAwLCAtIF9mMS54LCBfZjIueiwgMCwgLSBfZjIueCxcblx0XHRcdC0gX2YwLnksIF9mMC54LCAwLCAtIF9mMS55LCBfZjEueCwgMCwgLSBfZjIueSwgX2YyLngsIDBcblx0XHRdO1xuXHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAkMiwgX3YxJDcsIF92MiQ0LCBfZXh0ZW50cyApICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyB0ZXN0IDMgZmFjZSBub3JtYWxzIGZyb20gdGhlIGFhYmJcblx0XHRheGVzID0gWyAxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxIF07XG5cdFx0aWYgKCAhIHNhdEZvckF4ZXMoIGF4ZXMsIF92MCQyLCBfdjEkNywgX3YyJDQsIF9leHRlbnRzICkgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIGZpbmFsbHkgdGVzdGluZyB0aGUgZmFjZSBub3JtYWwgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0Ly8gdXNlIGFscmVhZHkgZXhpc3RpbmcgdHJpYW5nbGUgZWRnZSB2ZWN0b3JzIGhlcmVcblx0XHRfdHJpYW5nbGVOb3JtYWwuY3Jvc3NWZWN0b3JzKCBfZjAsIF9mMSApO1xuXHRcdGF4ZXMgPSBbIF90cmlhbmdsZU5vcm1hbC54LCBfdHJpYW5nbGVOb3JtYWwueSwgX3RyaWFuZ2xlTm9ybWFsLnogXTtcblxuXHRcdHJldHVybiBzYXRGb3JBeGVzKCBheGVzLCBfdjAkMiwgX3YxJDcsIF92MiQ0LCBfZXh0ZW50cyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2xhbXBzIHRoZSBnaXZlbiBwb2ludCB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGlzIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byBjbGFtcC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNsYW1wZWQgcG9pbnQuXG5cdCAqL1xuXHRjbGFtcFBvaW50KCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGV1Y2xpZGVhbiBkaXN0YW5jZSBmcm9tIGFueSBlZGdlIG9mIHRoaXMgYm94IHRvIHRoZSBzcGVjaWZpZWQgcG9pbnQuIElmXG5cdCAqIHRoZSBnaXZlbiBwb2ludCBsaWVzIGluc2lkZSBvZiB0aGlzIGJveCwgdGhlIGRpc3RhbmNlIHdpbGwgYmUgYDBgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBldWNsaWRlYW4gZGlzdGFuY2UuXG5cdCAqL1xuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY2xhbXBQb2ludCggcG9pbnQsIF92ZWN0b3IkYiApLmRpc3RhbmNlVG8oIHBvaW50ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgYm91bmRpbmcgc3BoZXJlIHRoYXQgZW5jbG9zZXMgdGhpcyBib3VuZGluZyBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHNwaGVyZSB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7U3BoZXJlfSBUaGUgYm91bmRpbmcgc3BoZXJlIHRoYXQgZW5jbG9zZXMgdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRnZXRCb3VuZGluZ1NwaGVyZSggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0dGFyZ2V0Lm1ha2VFbXB0eSgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5nZXRDZW50ZXIoIHRhcmdldC5jZW50ZXIgKTtcblxuXHRcdFx0dGFyZ2V0LnJhZGl1cyA9IHRoaXMuZ2V0U2l6ZSggX3ZlY3RvciRiICkubGVuZ3RoKCkgKiAwLjU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIGJvdW5kaW5nIGJveCBhbmQgdGhlIGdpdmVuIG9uZSwgc2V0dGluZyB0aGUgdXBwZXJcblx0ICogYm91bmQgb2YgdGhpcyBib3ggdG8gdGhlIGxlc3NlciBvZiB0aGUgdHdvIGJveGVzJyB1cHBlciBib3VuZHMgYW5kIHRoZVxuXHQgKiBsb3dlciBib3VuZCBvZiB0aGlzIGJveCB0byB0aGUgZ3JlYXRlciBvZiB0aGUgdHdvIGJveGVzJyBsb3dlciBib3VuZHMuIElmXG5cdCAqIHRoZXJlJ3Mgbm8gb3ZlcmxhcCwgbWFrZXMgdGhpcyBib3ggZW1wdHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJvdW5kaW5nIGJveCB0byBpbnRlcnNlY3Qgd2l0aC5cblx0ICogQHJldHVybiB7Qm94M30gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRpbnRlcnNlY3QoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgdW5pb24gb2YgdGhpcyBib3ggYW5kIGFub3RoZXIgYW5kIHRoZSBnaXZlbiBvbmUsIHNldHRpbmcgdGhlIHVwcGVyXG5cdCAqIGJvdW5kIG9mIHRoaXMgYm94IHRvIHRoZSBncmVhdGVyIG9mIHRoZSB0d28gYm94ZXMnIHVwcGVyIGJvdW5kcyBhbmQgdGhlXG5cdCAqIGxvd2VyIGJvdW5kIG9mIHRoaXMgYm94IHRvIHRoZSBsZXNzZXIgb2YgdGhlIHR3byBib3hlcycgbG93ZXIgYm91bmRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdGhhdCB3aWxsIGJlIHVuaW9uZWQgd2l0aCB0aGlzIGluc3RhbmNlLlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdHVuaW9uKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNmb3JtcyB0aGlzIGJvdW5kaW5nIGJveCBieSB0aGUgZ2l2ZW4gNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdGFwcGx5TWF0cml4NCggbWF0cml4ICkge1xuXG5cdFx0Ly8gdHJhbnNmb3JtIG9mIGVtcHR5IGJveCBpcyBhbiBlbXB0eSBib3guXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gTk9URTogSSBhbSB1c2luZyBhIGJpbmFyeSBwYXR0ZXJuIHRvIHNwZWNpZnkgYWxsIDJeMyBjb21iaW5hdGlvbnMgYmVsb3dcblx0XHRfcG9pbnRzWyAwIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDAwXG5cdFx0X3BvaW50c1sgMSBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMVxuXHRcdF9wb2ludHNbIDIgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMTBcblx0XHRfcG9pbnRzWyAzIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDExXG5cdFx0X3BvaW50c1sgNCBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDEwMFxuXHRcdF9wb2ludHNbIDUgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDFcblx0XHRfcG9pbnRzWyA2IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTEwXG5cdFx0X3BvaW50c1sgNyBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMVxuXG5cdFx0dGhpcy5zZXRGcm9tUG9pbnRzKCBfcG9pbnRzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIG9mZnNldCB0byBib3RoIHRoZSB1cHBlciBhbmQgbG93ZXIgYm91bmRzIG9mIHRoaXMgYm91bmRpbmcgYm94LFxuXHQgKiBlZmZlY3RpdmVseSBtb3ZpbmcgaXQgaW4gM0Qgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gb2Zmc2V0IC0gVGhlIG9mZnNldCB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHRyYW5zbGF0ZSB0aGUgYm91bmRpbmcgYm94LlxuXHQgKiBAcmV0dXJuIHtCb3gzfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdHRyYW5zbGF0ZSggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcblx0XHR0aGlzLm1heC5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGJvdW5kaW5nIGJveCBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJveCB0byB0ZXN0IGZvciBlcXVhbGl0eS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGJvdW5kaW5nIGJveCBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqL1xuXHRlcXVhbHMoIGJveCApIHtcblxuXHRcdHJldHVybiBib3gubWluLmVxdWFscyggdGhpcy5taW4gKSAmJiBib3gubWF4LmVxdWFscyggdGhpcy5tYXggKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3BvaW50cyA9IFtcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKClcbl07XG5cbmNvbnN0IF92ZWN0b3IkYiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2JveCQ0ID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xuXG4vLyB0cmlhbmdsZSBjZW50ZXJlZCB2ZXJ0aWNlc1xuXG5jb25zdCBfdjAkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MSQ3ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YyJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8vIHRyaWFuZ2xlIGVkZ2UgdmVjdG9yc1xuXG5jb25zdCBfZjAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9jZW50ZXIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZXh0ZW50cyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90cmlhbmdsZU5vcm1hbCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF90ZXN0QXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gc2F0Rm9yQXhlcyggYXhlcywgdjAsIHYxLCB2MiwgZXh0ZW50cyApIHtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIGogPSBheGVzLmxlbmd0aCAtIDM7IGkgPD0gajsgaSArPSAzICkge1xuXG5cdFx0X3Rlc3RBeGlzLmZyb21BcnJheSggYXhlcywgaSApO1xuXHRcdC8vIHByb2plY3QgdGhlIGFhYmIgb250byB0aGUgc2VwYXJhdGluZyBheGlzXG5cdFx0Y29uc3QgciA9IGV4dGVudHMueCAqIE1hdGguYWJzKCBfdGVzdEF4aXMueCApICsgZXh0ZW50cy55ICogTWF0aC5hYnMoIF90ZXN0QXhpcy55ICkgKyBleHRlbnRzLnogKiBNYXRoLmFicyggX3Rlc3RBeGlzLnogKTtcblx0XHQvLyBwcm9qZWN0IGFsbCAzIHZlcnRpY2VzIG9mIHRoZSB0cmlhbmdsZSBvbnRvIHRoZSBzZXBhcmF0aW5nIGF4aXNcblx0XHRjb25zdCBwMCA9IHYwLmRvdCggX3Rlc3RBeGlzICk7XG5cdFx0Y29uc3QgcDEgPSB2MS5kb3QoIF90ZXN0QXhpcyApO1xuXHRcdGNvbnN0IHAyID0gdjIuZG90KCBfdGVzdEF4aXMgKTtcblx0XHQvLyBhY3R1YWwgdGVzdCwgYmFzaWNhbGx5IHNlZSBpZiBlaXRoZXIgb2YgdGhlIG1vc3QgZXh0cmVtZSBvZiB0aGUgdHJpYW5nbGUgcG9pbnRzIGludGVyc2VjdHMgclxuXHRcdGlmICggTWF0aC5tYXgoIC0gTWF0aC5tYXgoIHAwLCBwMSwgcDIgKSwgTWF0aC5taW4oIHAwLCBwMSwgcDIgKSApID4gciApIHtcblxuXHRcdFx0Ly8gcG9pbnRzIG9mIHRoZSBwcm9qZWN0ZWQgdHJpYW5nbGUgYXJlIG91dHNpZGUgdGhlIHByb2plY3RlZCBoYWxmLWxlbmd0aCBvZiB0aGUgYWFiYlxuXHRcdFx0Ly8gdGhlIGF4aXMgaXMgc2VwYXJhdGluZyBhbmQgd2UgY2FuIGV4aXRcblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuY29uc3QgX2JveCQzID0gLypAX19QVVJFX18qLyBuZXcgQm94MygpO1xuY29uc3QgX3YxJDYgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIkMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBBbiBhbmFseXRpY2FsIDNEIHNwaGVyZSBkZWZpbmVkIGJ5IGEgY2VudGVyIGFuZCByYWRpdXMuIFRoaXMgY2xhc3MgaXMgbWFpbmx5XG4gKiB1c2VkIGFzIGEgQm91bmRpbmcgU3BoZXJlIGZvciAzRCBvYmplY3RzLlxuICovXG5jbGFzcyBTcGhlcmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNwaGVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbY2VudGVyPSgwLDAsMCldIC0gVGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXVzPS0xXSAtIFRoZSByYWRpdXMgb2YgdGhlIHNwaGVyZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpLCByYWRpdXMgPSAtMSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTcGhlcmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLmNlbnRlciA9IGNlbnRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByYWRpdXMgb2YgdGhlIHNwaGVyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzcGhlcmUncyBjb21wb25lbnRzIGJ5IGNvcHlpbmcgdGhlIGdpdmVuIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBjZW50ZXIgLSBUaGUgY2VudGVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gVGhlIHJhZGl1cy5cblx0ICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS5cblx0ICovXG5cdHNldCggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBjZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gYm91bmRpbmcgc3BoZXJlIGZvciBsaXN0IG9mIHBvaW50cy5cblx0ICogSWYgdGhlIG9wdGlvbmFsIGNlbnRlciBwb2ludCBpcyBnaXZlbiwgaXQgaXMgdXNlZCBhcyB0aGUgc3BoZXJlJ3Ncblx0ICogY2VudGVyLiBPdGhlcndpc2UsIHRoZSBjZW50ZXIgb2YgdGhlIGF4aXMtYWxpZ25lZCBib3VuZGluZyBib3hcblx0ICogZW5jb21wYXNzaW5nIHRoZSBwb2ludHMgaXMgY2FsY3VsYXRlZC5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3IzPn0gcG9pbnRzIC0gQSBsaXN0IG9mIHBvaW50cyBpbiAzRCBzcGFjZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3B0aW9uYWxDZW50ZXJdIC0gVGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLlxuXHQgKiBAcmV0dXJuIHtTcGhlcmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3BoZXJlLlxuXHQgKi9cblx0c2V0RnJvbVBvaW50cyggcG9pbnRzLCBvcHRpb25hbENlbnRlciApIHtcblxuXHRcdGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG5cdFx0aWYgKCBvcHRpb25hbENlbnRlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjZW50ZXIuY29weSggb3B0aW9uYWxDZW50ZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9ib3gkMy5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKS5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IG1heFJhZGl1c1NxID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50c1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KCBtYXhSYWRpdXNTcSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gc3BoZXJlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge1NwaGVyZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmUuXG5cdCAqL1xuXHRjb3B5KCBzcGhlcmUgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5jb3B5KCBzcGhlcmUuY2VudGVyICk7XG5cdFx0dGhpcy5yYWRpdXMgPSBzcGhlcmUucmFkaXVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc3BoZXJlIGlzIGVtcHR5ICh0aGUgcmFkaXVzIHNldCB0byBhIG5lZ2F0aXZlIG51bWJlcikuXG5cdCAqXG5cdCAqIFNwaGVyZXMgd2l0aCBhIHJhZGl1cyBvZiBgMGAgY29udGFpbiBvbmx5IHRoZWlyIGNlbnRlciBwb2ludCBhbmQgYXJlIG5vdFxuXHQgKiBjb25zaWRlcmVkIHRvIGJlIGVtcHR5LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgc3BoZXJlIGlzIGVtcHR5IG9yIG5vdC5cblx0ICovXG5cdGlzRW1wdHkoKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLnJhZGl1cyA8IDAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2VzIHRoaXMgc3BoZXJlIGVtcHR5IHdoaWNoIG1lYW5zIGluIGVuY2xvc2VzIGEgemVybyBzcGFjZSBpbiAzRC5cblx0ICpcblx0ICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS5cblx0ICovXG5cdG1ha2VFbXB0eSgpIHtcblxuXHRcdHRoaXMuY2VudGVyLnNldCggMCwgMCwgMCApO1xuXHRcdHRoaXMucmFkaXVzID0gLTE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgc3BoZXJlIGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludCBpbmNsdXNpdmUgb2Zcblx0ICogdGhlIHN1cmZhY2Ugb2YgdGhlIHNwaGVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byBjaGVjay5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHNwaGVyZSBjb250YWlucyB0aGUgZ2l2ZW4gcG9pbnQgb3Igbm90LlxuXHQgKi9cblx0Y29udGFpbnNQb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gKCBwb2ludC5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2xvc2VzdCBkaXN0YW5jZSBmcm9tIHRoZSBib3VuZGFyeSBvZiB0aGUgc3BoZXJlIHRvIHRoZVxuXHQgKiBnaXZlbiBwb2ludC4gSWYgdGhlIHNwaGVyZSBjb250YWlucyB0aGUgcG9pbnQsIHRoZSBkaXN0YW5jZSB3aWxsXG5cdCAqIGJlIG5lZ2F0aXZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIGNvbXB1dGUgdGhlIGRpc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkaXN0YW5jZSB0byB0aGUgcG9pbnQuXG5cdCAqL1xuXHRkaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUbyggdGhpcy5jZW50ZXIgKSAtIHRoaXMucmFkaXVzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZSAtIFRoZSBzcGhlcmUgdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIG9uZSBvciBub3QuXG5cdCAqL1xuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zdCByYWRpdXNTdW0gPSB0aGlzLnJhZGl1cyArIHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5jZW50ZXIgKSA8PSAoIHJhZGl1c1N1bSAqIHJhZGl1c1N1bSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJveCB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgc3BoZXJlIGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gYm94IG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1NwaGVyZSggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBzcGhlcmUgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIHBsYW5lIG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNQbGFuZSggcGxhbmUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5jZW50ZXIgKSApIDw9IHRoaXMucmFkaXVzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2xhbXBzIGEgcG9pbnQgd2l0aGluIHRoZSBzcGhlcmUuIElmIHRoZSBwb2ludCBpcyBvdXRzaWRlIHRoZSBzcGhlcmUsIGl0XG5cdCAqIHdpbGwgY2xhbXAgaXQgdG8gdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIGVkZ2Ugb2YgdGhlIHNwaGVyZS4gUG9pbnRzXG5cdCAqIGFscmVhZHkgaW5zaWRlIHRoZSBzcGhlcmUgd2lsbCBub3QgYmUgYWZmZWN0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcGxhbmUgdG8gY2xhbXAuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBjbGFtcGVkIHBvaW50LlxuXHQgKi9cblx0Y2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGNvbnN0IGRlbHRhTGVuZ3RoU3EgPSB0aGlzLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdHRhcmdldC5jb3B5KCBwb2ludCApO1xuXG5cdFx0aWYgKCBkZWx0YUxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XG5cblx0XHRcdHRhcmdldC5zdWIoIHRoaXMuY2VudGVyICkubm9ybWFsaXplKCk7XG5cdFx0XHR0YXJnZXQubXVsdGlwbHlTY2FsYXIoIHRoaXMucmFkaXVzICkuYWRkKCB0aGlzLmNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBib3VuZGluZyBib3ggdGhhdCBlbmNsb3NlcyB0aGlzIHNwaGVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGJveCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7Qm94M30gVGhlIGJvdW5kaW5nIGJveCB0aGF0IGVuY2xvc2VzIHRoaXMgc3BoZXJlLlxuXHQgKi9cblx0Z2V0Qm91bmRpbmdCb3goIHRhcmdldCApIHtcblxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdC8vIEVtcHR5IHNwaGVyZSBwcm9kdWNlcyBlbXB0eSBib3VuZGluZyBib3hcblx0XHRcdHRhcmdldC5tYWtlRW1wdHkoKTtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc2V0KCB0aGlzLmNlbnRlciwgdGhpcy5jZW50ZXIgKTtcblx0XHR0YXJnZXQuZXhwYW5kQnlTY2FsYXIoIHRoaXMucmFkaXVzICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNmb3JtcyB0aGlzIHNwaGVyZSB3aXRoIHRoZSBnaXZlbiA0eDQgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG5cdCAqIEByZXR1cm4ge1NwaGVyZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmUuXG5cdCAqL1xuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuY2VudGVyLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIG1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2xhdGVzIHRoZSBzcGhlcmUncyBjZW50ZXIgYnkgdGhlIGdpdmVuIG9mZnNldC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBvZmZzZXQgLSBUaGUgb2Zmc2V0LlxuXHQgKiBAcmV0dXJuIHtTcGhlcmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3BoZXJlLlxuXHQgKi9cblx0dHJhbnNsYXRlKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmNlbnRlci5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHBhbmRzIHRoZSBib3VuZGFyaWVzIG9mIHRoaXMgc3BoZXJlIHRvIGluY2x1ZGUgdGhlIGdpdmVuIHBvaW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIGluY2x1ZGUuXG5cdCAqIEByZXR1cm4ge1NwaGVyZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmUuXG5cdCAqL1xuXHRleHBhbmRCeVBvaW50KCBwb2ludCApIHtcblxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdHRoaXMuY2VudGVyLmNvcHkoIHBvaW50ICk7XG5cblx0XHRcdHRoaXMucmFkaXVzID0gMDtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRfdjEkNi5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5jZW50ZXIgKTtcblxuXHRcdGNvbnN0IGxlbmd0aFNxID0gX3YxJDYubGVuZ3RoU3EoKTtcblxuXHRcdGlmICggbGVuZ3RoU3EgPiAoIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMgKSApIHtcblxuXHRcdFx0Ly8gY2FsY3VsYXRlIHRoZSBtaW5pbWFsIHNwaGVyZVxuXG5cdFx0XHRjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoIGxlbmd0aFNxICk7XG5cblx0XHRcdGNvbnN0IGRlbHRhID0gKCBsZW5ndGggLSB0aGlzLnJhZGl1cyApICogMC41O1xuXG5cdFx0XHR0aGlzLmNlbnRlci5hZGRTY2FsZWRWZWN0b3IoIF92MSQ2LCBkZWx0YSAvIGxlbmd0aCApO1xuXG5cdFx0XHR0aGlzLnJhZGl1cyArPSBkZWx0YTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kcyB0aGlzIHNwaGVyZSB0byBlbmNsb3NlIGJvdGggdGhlIG9yaWdpbmFsIHNwaGVyZSBhbmQgdGhlIGdpdmVuIHNwaGVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZSAtIFRoZSBzcGhlcmUgdG8gaW5jbHVkZS5cblx0ICogQHJldHVybiB7U3BoZXJlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyZS5cblx0ICovXG5cdHVuaW9uKCBzcGhlcmUgKSB7XG5cblx0XHRpZiAoIHNwaGVyZS5pc0VtcHR5KCkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHtcblxuXHRcdFx0dGhpcy5jb3B5KCBzcGhlcmUgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2VudGVyLmVxdWFscyggc3BoZXJlLmNlbnRlciApID09PSB0cnVlICkge1xuXG5cdFx0XHQgdGhpcy5yYWRpdXMgPSBNYXRoLm1heCggdGhpcy5yYWRpdXMsIHNwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF92MiQzLnN1YlZlY3RvcnMoIHNwaGVyZS5jZW50ZXIsIHRoaXMuY2VudGVyICkuc2V0TGVuZ3RoKCBzcGhlcmUucmFkaXVzICk7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggX3YxJDYuY29weSggc3BoZXJlLmNlbnRlciApLmFkZCggX3YyJDMgKSApO1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIF92MSQ2LmNvcHkoIHNwaGVyZS5jZW50ZXIgKS5zdWIoIF92MiQzICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBzcGhlcmUgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlIC0gVGhlIHNwaGVyZSB0byB0ZXN0IGZvciBlcXVhbGl0eS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGJvdW5kaW5nIHNwaGVyZSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqL1xuXHRlcXVhbHMoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiBzcGhlcmUuY2VudGVyLmVxdWFscyggdGhpcy5jZW50ZXIgKSAmJiAoIHNwaGVyZS5yYWRpdXMgPT09IHRoaXMucmFkaXVzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IHNwaGVyZSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTcGhlcmV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJGEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc2VnQ2VudGVyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3NlZ0RpciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9kaWZmID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfZWRnZTEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZWRnZTIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbm9ybWFsJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogQSByYXkgdGhhdCBlbWl0cyBmcm9tIGFuIG9yaWdpbiBpbiBhIGNlcnRhaW4gZGlyZWN0aW9uLiBUaGUgY2xhc3MgaXMgdXNlZCBieVxuICoge0BsaW5rIFJheWNhc3Rlcn0gdG8gYXNzaXN0IHdpdGggcmF5Y2FzdGluZy4gUmF5Y2FzdGluZyBpcyB1c2VkIGZvclxuICogbW91c2UgcGlja2luZyAod29ya2luZyBvdXQgd2hhdCBvYmplY3RzIGluIHRoZSAzRCBzcGFjZSB0aGUgbW91c2UgaXMgb3ZlcilcbiAqIGFtb25nc3Qgb3RoZXIgdGhpbmdzLlxuICovXG5jbGFzcyBSYXkge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJheS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3JpZ2luPSgwLDAsMCldIC0gVGhlIG9yaWdpbiBvZiB0aGUgcmF5LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFtkaXJlY3Rpb249KDAsMCwtMSldIC0gVGhlIChub3JtYWxpemVkKSBkaXJlY3Rpb24gb2YgdGhlIHJheS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvcmlnaW4gPSBuZXcgVmVjdG9yMygpLCBkaXJlY3Rpb24gPSBuZXcgVmVjdG9yMyggMCwgMCwgLTEgKSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvcmlnaW4gb2YgdGhlIHJheS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMub3JpZ2luID0gb3JpZ2luO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIChub3JtYWxpemVkKSBkaXJlY3Rpb24gb2YgdGhlIHJheS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcmF5J3MgY29tcG9uZW50cyBieSBjb3B5aW5nIHRoZSBnaXZlbiB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gb3JpZ2luIC0gVGhlIG9yaWdpbi5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uLlxuXHQgKiBAcmV0dXJuIHtSYXl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmF5LlxuXHQgKi9cblx0c2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHRcdHRoaXMub3JpZ2luLmNvcHkoIG9yaWdpbiApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIGRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gcmF5IHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmF5fSByYXkgLSBUaGUgcmF5IHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge1JheX0gQSByZWZlcmVuY2UgdG8gdGhpcyByYXkuXG5cdCAqL1xuXHRjb3B5KCByYXkgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCByYXkub3JpZ2luICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggcmF5LmRpcmVjdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdmVjdG9yIHRoYXQgaXMgbG9jYXRlZCBhdCBhIGdpdmVuIGRpc3RhbmNlIGFsb25nIHRoaXMgcmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdCAtIFRoZSBkaXN0YW5jZSBhbG9uZyB0aGUgcmF5IHRvIHJldHJpZXZlIGEgcG9zaXRpb24gZm9yLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBBIHBvc2l0aW9uIG9uIHRoZSByYXkuXG5cdCAqL1xuXHRhdCggdCwgdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIHQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkanVzdHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgcmF5IHRvIHBvaW50IGF0IHRoZSBnaXZlbiB2ZWN0b3IgaW4gd29ybGQgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB0YXJnZXQgcG9zaXRpb24uXG5cdCAqIEByZXR1cm4ge1JheX0gQSByZWZlcmVuY2UgdG8gdGhpcyByYXkuXG5cdCAqL1xuXHRsb29rQXQoIHYgKSB7XG5cblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCB2ICkuc3ViKCB0aGlzLm9yaWdpbiApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTaGlmdCB0aGUgb3JpZ2luIG9mIHRoaXMgcmF5IGFsb25nIGl0cyBkaXJlY3Rpb24gYnkgdGhlIGdpdmVuIGRpc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdCAtIFRoZSBkaXN0YW5jZSBhbG9uZyB0aGUgcmF5IHRvIGludGVycG9sYXRlLlxuXHQgKiBAcmV0dXJuIHtSYXl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmF5LlxuXHQgKi9cblx0cmVjYXN0KCB0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggdGhpcy5hdCggdCwgX3ZlY3RvciRhICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcG9pbnQgYWxvbmcgdGhpcyByYXkgdGhhdCBpcyBjbG9zZXN0IHRvIHRoZSBnaXZlbiBwb2ludC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UgdG8gZ2V0IHRoZSBjbG9zZXQgbG9jYXRpb24gb24gdGhlIHJheSBmb3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoaXMgcmF5LlxuXHQgKi9cblx0Y2xvc2VzdFBvaW50VG9Qb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKTtcblxuXHRcdGNvbnN0IGRpcmVjdGlvbkRpc3RhbmNlID0gdGFyZ2V0LmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGlyZWN0aW9uRGlzdGFuY2UgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMub3JpZ2luICkuYWRkU2NhbGVkVmVjdG9yKCB0aGlzLmRpcmVjdGlvbiwgZGlyZWN0aW9uRGlzdGFuY2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRpc3RhbmNlIG9mIHRoZSBjbG9zZXN0IGFwcHJvYWNoIGJldHdlZW4gdGhpcyByYXkgYW5kIHRoZSBnaXZlbiBwb2ludC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIEEgcG9pbnQgaW4gM0Qgc3BhY2UgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgdG8uXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlLlxuXHQgKi9cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2Ugb2YgdGhlIGNsb3Nlc3QgYXBwcm9hY2ggYmV0d2VlbiB0aGlzIHJheSBhbmQgdGhlIGdpdmVuIHBvaW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gQSBwb2ludCBpbiAzRCBzcGFjZSB0byBjb21wdXRlIHRoZSBkaXN0YW5jZSB0by5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgc3F1YXJlZCBkaXN0YW5jZS5cblx0ICovXG5cdGRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdGNvbnN0IGRpcmVjdGlvbkRpc3RhbmNlID0gX3ZlY3RvciRhLnN1YlZlY3RvcnMoIHBvaW50LCB0aGlzLm9yaWdpbiApLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdC8vIHBvaW50IGJlaGluZCB0aGUgcmF5XG5cblx0XHRpZiAoIGRpcmVjdGlvbkRpc3RhbmNlIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBwb2ludCApO1xuXG5cdFx0fVxuXG5cdFx0X3ZlY3RvciRhLmNvcHkoIHRoaXMub3JpZ2luICkuYWRkU2NhbGVkVmVjdG9yKCB0aGlzLmRpcmVjdGlvbiwgZGlyZWN0aW9uRGlzdGFuY2UgKTtcblxuXHRcdHJldHVybiBfdmVjdG9yJGEuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gdGhpcyByYXkgYW5kIHRoZSBnaXZlbiBsaW5lIHNlZ21lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdjAgLSBUaGUgc3RhcnQgcG9pbnQgb2YgdGhlIGxpbmUgc2VnbWVudC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2MSAtIFRoZSBlbmQgcG9pbnQgb2YgdGhlIGxpbmUgc2VnbWVudC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3B0aW9uYWxQb2ludE9uUmF5XSAtIFdoZW4gcHJvdmlkZWQsIGl0IHJlY2VpdmVzIHRoZSBwb2ludCBvbiB0aGlzIHJheSB0aGF0IGlzIGNsb3Nlc3QgdG8gdGhlIHNlZ21lbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbmFsUG9pbnRPblNlZ21lbnRdIC0gV2hlbiBwcm92aWRlZCwgaXQgcmVjZWl2ZXMgdGhlIHBvaW50IG9uIHRoZSBsaW5lIHNlZ21lbnQgdGhhdCBpcyBjbG9zZXN0IHRvIHRoaXMgcmF5LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzcXVhcmVkIGRpc3RhbmNlLlxuXHQgKi9cblx0ZGlzdGFuY2VTcVRvU2VnbWVudCggdjAsIHYxLCBvcHRpb25hbFBvaW50T25SYXksIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHQvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wbWpvbmlhay9HZW9tZXRyaWNUb29scy9ibG9iL21hc3Rlci9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50Lmhcblx0XHQvLyBJdCByZXR1cm5zIHRoZSBtaW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcmF5IGFuZCB0aGUgc2VnbWVudFxuXHRcdC8vIGRlZmluZWQgYnkgdjAgYW5kIHYxXG5cdFx0Ly8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDpcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXlcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzZWdtZW50XG5cblx0XHRfc2VnQ2VudGVyLmNvcHkoIHYwICkuYWRkKCB2MSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpO1xuXHRcdF9kaWZmLmNvcHkoIHRoaXMub3JpZ2luICkuc3ViKCBfc2VnQ2VudGVyICk7XG5cblx0XHRjb25zdCBzZWdFeHRlbnQgPSB2MC5kaXN0YW5jZVRvKCB2MSApICogMC41O1xuXHRcdGNvbnN0IGEwMSA9IC0gdGhpcy5kaXJlY3Rpb24uZG90KCBfc2VnRGlyICk7XG5cdFx0Y29uc3QgYjAgPSBfZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0Y29uc3QgYjEgPSAtIF9kaWZmLmRvdCggX3NlZ0RpciApO1xuXHRcdGNvbnN0IGMgPSBfZGlmZi5sZW5ndGhTcSgpO1xuXHRcdGNvbnN0IGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7XG5cdFx0bGV0IHMwLCBzMSwgc3FyRGlzdCwgZXh0RGV0O1xuXG5cdFx0aWYgKCBkZXQgPiAwICkge1xuXG5cdFx0XHQvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuXG5cblx0XHRcdHMwID0gYTAxICogYjEgLSBiMDtcblx0XHRcdHMxID0gYTAxICogYjAgLSBiMTtcblx0XHRcdGV4dERldCA9IHNlZ0V4dGVudCAqIGRldDtcblxuXHRcdFx0aWYgKCBzMCA+PSAwICkge1xuXG5cdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDBcblx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cblxuXHRcdFx0XHRcdFx0Y29uc3QgaW52RGV0ID0gMSAvIGRldDtcblx0XHRcdFx0XHRcdHMwICo9IGludkRldDtcblx0XHRcdFx0XHRcdHMxICo9IGludkRldDtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSBzMCAqICggczAgKyBhMDEgKiBzMSArIDIgKiBiMCApICsgczEgKiAoIGEwMSAqIHMwICsgczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMVxuXG5cdFx0XHRcdFx0XHRzMSA9IHNlZ0V4dGVudDtcblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHJlZ2lvbiA1XG5cblx0XHRcdFx0XHRzMSA9IC0gc2VnRXh0ZW50O1xuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzMSArIGIwICkgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHMxIDw9IC0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDRcblxuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCAtIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzMSA8PSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gM1xuXG5cdFx0XHRcdFx0czAgPSAwO1xuXHRcdFx0XHRcdHMxID0gTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gMlxuXG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHNlZ0V4dGVudCArIGIwICkgKTtcblx0XHRcdFx0XHRzMSA9ICggczAgPiAwICkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBSYXkgYW5kIHNlZ21lbnQgYXJlIHBhcmFsbGVsLlxuXG5cdFx0XHRzMSA9ICggYTAxID4gMCApID8gLSBzZWdFeHRlbnQgOiBzZWdFeHRlbnQ7XG5cdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25hbFBvaW50T25SYXkgKSB7XG5cblx0XHRcdG9wdGlvbmFsUG9pbnRPblJheS5jb3B5KCB0aGlzLm9yaWdpbiApLmFkZFNjYWxlZFZlY3RvciggdGhpcy5kaXJlY3Rpb24sIHMwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHRcdG9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggX3NlZ0NlbnRlciApLmFkZFNjYWxlZFZlY3RvciggX3NlZ0RpciwgczEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBzcXJEaXN0O1xuXG5cdH1cblxuXHQvKipcblx0ICogSW50ZXJzZWN0cyB0aGlzIHJheSB3aXRoIHRoZSBnaXZlbiBzcGhlcmUsIHJldHVybmluZyB0aGUgaW50ZXJzZWN0aW9uXG5cdCAqIHBvaW50IG9yIGBudWxsYCBpZiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIGludGVyc2VjdC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQuXG5cdCAqL1xuXHRpbnRlcnNlY3RTcGhlcmUoIHNwaGVyZSwgdGFyZ2V0ICkge1xuXG5cdFx0X3ZlY3RvciRhLnN1YlZlY3RvcnMoIHNwaGVyZS5jZW50ZXIsIHRoaXMub3JpZ2luICk7XG5cdFx0Y29uc3QgdGNhID0gX3ZlY3RvciRhLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHRjb25zdCBkMiA9IF92ZWN0b3IkYS5kb3QoIF92ZWN0b3IkYSApIC0gdGNhICogdGNhO1xuXHRcdGNvbnN0IHJhZGl1czIgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcblxuXHRcdGlmICggZDIgPiByYWRpdXMyICkgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApO1xuXG5cdFx0Ly8gdDAgPSBmaXJzdCBpbnRlcnNlY3QgcG9pbnQgLSBlbnRyYW5jZSBvbiBmcm9udCBvZiBzcGhlcmVcblx0XHRjb25zdCB0MCA9IHRjYSAtIHRoYztcblxuXHRcdC8vIHQxID0gc2Vjb25kIGludGVyc2VjdCBwb2ludCAtIGV4aXQgcG9pbnQgb24gYmFjayBvZiBzcGhlcmVcblx0XHRjb25zdCB0MSA9IHRjYSArIHRoYztcblxuXHRcdC8vIHRlc3QgdG8gc2VlIGlmIHQxIGlzIGJlaGluZCB0aGUgcmF5IC0gaWYgc28sIHJldHVybiBudWxsXG5cdFx0aWYgKCB0MSA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdC8vIHRlc3QgdG8gc2VlIGlmIHQwIGlzIGJlaGluZCB0aGUgcmF5OlxuXHRcdC8vIGlmIGl0IGlzLCB0aGUgcmF5IGlzIGluc2lkZSB0aGUgc3BoZXJlLCBzbyByZXR1cm4gdGhlIHNlY29uZCBleGl0IHBvaW50IHNjYWxlZCBieSB0MSxcblx0XHQvLyBpbiBvcmRlciB0byBhbHdheXMgcmV0dXJuIGFuIGludGVyc2VjdCBwb2ludCB0aGF0IGlzIGluIGZyb250IG9mIHRoZSByYXkuXG5cdFx0aWYgKCB0MCA8IDAgKSByZXR1cm4gdGhpcy5hdCggdDEsIHRhcmdldCApO1xuXG5cdFx0Ly8gZWxzZSB0MCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LCBzbyByZXR1cm4gdGhlIGZpcnN0IGNvbGxpc2lvbiBwb2ludCBzY2FsZWQgYnkgdDBcblx0XHRyZXR1cm4gdGhpcy5hdCggdDAsIHRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyByYXkgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBzcGhlcmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgc3BoZXJlIHRvIGludGVyc2VjdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHJheSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIHNwaGVyZSBvciBub3QuXG5cdCAqL1xuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVNxVG9Qb2ludCggc3BoZXJlLmNlbnRlciApIDw9ICggc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSByYXkncyBvcmlnaW4gdG8gdGhlIGdpdmVuIHBsYW5lLiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgcmF5XG5cdCAqIGRvZXMgbm90IGludGVyc2VjdCB3aXRoIHRoZSBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgdG8uXG5cdCAqIEByZXR1cm4gez9udW1iZXJ9IFdoZXRoZXIgdGhpcyByYXkgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBzcGhlcmUgb3Igbm90LlxuXHQgKi9cblx0ZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApIHtcblxuXHRcdGNvbnN0IGRlbm9taW5hdG9yID0gcGxhbmUubm9ybWFsLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblxuXHRcdGlmICggZGVub21pbmF0b3IgPT09IDAgKSB7XG5cblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cblx0XHRcdGlmICggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiAwO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIE51bGwgaXMgcHJlZmVyYWJsZSB0byB1bmRlZmluZWQgc2luY2UgdW5kZWZpbmVkIG1lYW5zLi4uLiBpdCBpcyB1bmRlZmluZWRcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ID0gLSAoIHRoaXMub3JpZ2luLmRvdCggcGxhbmUubm9ybWFsICkgKyBwbGFuZS5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBSZXR1cm4gaWYgdGhlIHJheSBuZXZlciBpbnRlcnNlY3RzIHRoZSBwbGFuZVxuXG5cdFx0cmV0dXJuIHQgPj0gMCA/IHQgOiBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW50ZXJzZWN0cyB0aGlzIHJheSB3aXRoIHRoZSBnaXZlbiBwbGFuZSwgcmV0dXJuaW5nIHRoZSBpbnRlcnNlY3Rpb25cblx0ICogcG9pbnQgb3IgYG51bGxgIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gaW50ZXJzZWN0LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGludGVyc2VjdGlvbiBwb2ludC5cblx0ICovXG5cdGludGVyc2VjdFBsYW5lKCBwbGFuZSwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdCA9IHRoaXMuZGlzdGFuY2VUb1BsYW5lKCBwbGFuZSApO1xuXG5cdFx0aWYgKCB0ID09PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmF0KCB0LCB0YXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gcGxhbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxhbmV9IHBsYW5lIC0gVGhlIHBsYW5lIHRvIGludGVyc2VjdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHJheSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIHBsYW5lIG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNQbGFuZSggcGxhbmUgKSB7XG5cblx0XHQvLyBjaGVjayBpZiB0aGUgcmF5IGxpZXMgb24gdGhlIHBsYW5lIGZpcnN0XG5cblx0XHRjb25zdCBkaXN0VG9Qb2ludCA9IHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdGlmICggZGlzdFRvUG9pbnQgPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciAqIGRpc3RUb1BvaW50IDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyByYXkgb3JpZ2luIGlzIGJlaGluZCB0aGUgcGxhbmUgKGFuZCBpcyBwb2ludGluZyBiZWhpbmQgaXQpXG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnRlcnNlY3RzIHRoaXMgcmF5IHdpdGggdGhlIGdpdmVuIGJvdW5kaW5nIGJveCwgcmV0dXJuaW5nIHRoZSBpbnRlcnNlY3Rpb25cblx0ICogcG9pbnQgb3IgYG51bGxgIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm94IHRvIGludGVyc2VjdC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQuXG5cdCAqL1xuXHRpbnRlcnNlY3RCb3goIGJveCwgdGFyZ2V0ICkge1xuXG5cdFx0bGV0IHRtaW4sIHRtYXgsIHR5bWluLCB0eW1heCwgdHptaW4sIHR6bWF4O1xuXG5cdFx0Y29uc3QgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxuXHRcdFx0aW52ZGlyeSA9IDEgLyB0aGlzLmRpcmVjdGlvbi55LFxuXHRcdFx0aW52ZGlyeiA9IDEgLyB0aGlzLmRpcmVjdGlvbi56O1xuXG5cdFx0Y29uc3Qgb3JpZ2luID0gdGhpcy5vcmlnaW47XG5cblx0XHRpZiAoIGludmRpcnggPj0gMCApIHtcblxuXHRcdFx0dG1pbiA9ICggYm94Lm1pbi54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cdFx0XHR0bWF4ID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRtaW4gPSAoIGJveC5tYXgueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXHRcdFx0dG1heCA9ICggYm94Lm1pbi54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cblx0XHR9XG5cblx0XHRpZiAoIGludmRpcnkgPj0gMCApIHtcblxuXHRcdFx0dHltaW4gPSAoIGJveC5taW4ueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXHRcdFx0dHltYXggPSAoIGJveC5tYXgueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dHltaW4gPSAoIGJveC5tYXgueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXHRcdFx0dHltYXggPSAoIGJveC5taW4ueSAtIG9yaWdpbi55ICkgKiBpbnZkaXJ5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRtaW4gPiB0eW1heCApIHx8ICggdHltaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdHltaW4gPiB0bWluIHx8IGlzTmFOKCB0bWluICkgKSB0bWluID0gdHltaW47XG5cblx0XHRpZiAoIHR5bWF4IDwgdG1heCB8fCBpc05hTiggdG1heCApICkgdG1heCA9IHR5bWF4O1xuXG5cdFx0aWYgKCBpbnZkaXJ6ID49IDAgKSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR6bWluID0gKCBib3gubWF4LnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblx0XHRcdHR6bWF4ID0gKCBib3gubWluLnogLSBvcmlnaW4ueiApICogaW52ZGlyejtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHptYXggKSB8fCAoIHR6bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHRpZiAoIHR6bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluICkgdG1pbiA9IHR6bWluO1xuXG5cdFx0aWYgKCB0em1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCApIHRtYXggPSB0em1heDtcblxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcblxuXHRcdGlmICggdG1heCA8IDAgKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiB0aGlzLmF0KCB0bWluID49IDAgPyB0bWluIDogdG1heCwgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHJheSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm94IHRvIGludGVyc2VjdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIHJheSBpbnRlcnNlY3RzIHdpdGggdGhlIGdpdmVuIGJveCBvciBub3QuXG5cdCAqL1xuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RCb3goIGJveCwgX3ZlY3RvciRhICkgIT09IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBJbnRlcnNlY3RzIHRoaXMgcmF5IHdpdGggdGhlIGdpdmVuIHRyaWFuZ2xlLCByZXR1cm5pbmcgdGhlIGludGVyc2VjdGlvblxuXHQgKiBwb2ludCBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gaW50ZXJzZWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGEgLSBUaGUgZmlyc3QgdmVydGV4IG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCB2ZXJ0ZXggb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGMgLSBUaGUgdGhpcmQgdmVydGV4IG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBiYWNrZmFjZUN1bGxpbmcgLSBXaGV0aGVyIHRvIHVzZSBiYWNrZmFjZSBjdWxsaW5nIG9yIG5vdC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQuXG5cdCAqL1xuXHRpbnRlcnNlY3RUcmlhbmdsZSggYSwgYiwgYywgYmFja2ZhY2VDdWxsaW5nLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC5cblxuXHRcdC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Btam9uaWFrL0dlb21ldHJpY1Rvb2xzL2Jsb2IvbWFzdGVyL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaFxuXG5cdFx0X2VkZ2UxLnN1YlZlY3RvcnMoIGIsIGEgKTtcblx0XHRfZWRnZTIuc3ViVmVjdG9ycyggYywgYSApO1xuXHRcdF9ub3JtYWwkMS5jcm9zc1ZlY3RvcnMoIF9lZGdlMSwgX2VkZ2UyICk7XG5cblx0XHQvLyBTb2x2ZSBRICsgdCpEID0gYjEqRTEgKyBiMipFMiAoUSA9IGtEaWZmLCBEID0gcmF5IGRpcmVjdGlvbixcblx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XG5cdFx0Ly8gICB8RG90KEQsTil8KmIxID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoUSxFMikpXG5cdFx0Ly8gICB8RG90KEQsTil8KmIyID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoRTEsUSkpXG5cdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcblx0XHRsZXQgRGROID0gdGhpcy5kaXJlY3Rpb24uZG90KCBfbm9ybWFsJDEgKTtcblx0XHRsZXQgc2lnbjtcblxuXHRcdGlmICggRGROID4gMCApIHtcblxuXHRcdFx0aWYgKCBiYWNrZmFjZUN1bGxpbmcgKSByZXR1cm4gbnVsbDtcblx0XHRcdHNpZ24gPSAxO1xuXG5cdFx0fSBlbHNlIGlmICggRGROIDwgMCApIHtcblxuXHRcdFx0c2lnbiA9IC0xO1xuXHRcdFx0RGROID0gLSBEZE47XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdF9kaWZmLnN1YlZlY3RvcnMoIHRoaXMub3JpZ2luLCBhICk7XG5cdFx0Y29uc3QgRGRReEUyID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggX2VkZ2UyLmNyb3NzVmVjdG9ycyggX2RpZmYsIF9lZGdlMiApICk7XG5cblx0XHQvLyBiMSA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggRGRReEUyIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBEZEUxeFEgPSBzaWduICogdGhpcy5kaXJlY3Rpb24uZG90KCBfZWRnZTEuY3Jvc3MoIF9kaWZmICkgKTtcblxuXHRcdC8vIGIyIDwgMCwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0aWYgKCBEZEUxeFEgPCAwICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdC8vIGIxK2IyID4gMSwgbm8gaW50ZXJzZWN0aW9uXG5cdFx0aWYgKCBEZFF4RTIgKyBEZEUxeFEgPiBEZE4gKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gTGluZSBpbnRlcnNlY3RzIHRyaWFuZ2xlLCBjaGVjayBpZiByYXkgZG9lcy5cblx0XHRjb25zdCBRZE4gPSAtIHNpZ24gKiBfZGlmZi5kb3QoIF9ub3JtYWwkMSApO1xuXG5cdFx0Ly8gdCA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggUWROIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS5cblx0XHRyZXR1cm4gdGhpcy5hdCggUWROIC8gRGROLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybXMgdGhpcyByYXkgd2l0aCB0aGUgZ2l2ZW4gNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXg0IC0gVGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cblx0ICogQHJldHVybiB7UmF5fSBBIHJlZmVyZW5jZSB0byB0aGlzIHJheS5cblx0ICovXG5cdGFwcGx5TWF0cml4NCggbWF0cml4NCApIHtcblxuXHRcdHRoaXMub3JpZ2luLmFwcGx5TWF0cml4NCggbWF0cml4NCApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4NCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHJheSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmF5fSByYXkgLSBUaGUgcmF5IHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcmF5IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggcmF5ICkge1xuXG5cdFx0cmV0dXJuIHJheS5vcmlnaW4uZXF1YWxzKCB0aGlzLm9yaWdpbiApICYmIHJheS5kaXJlY3Rpb24uZXF1YWxzKCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyByYXkgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7UmF5fSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgNHg0IG1hdHJpeC5cbiAqXG4gKiBUaGUgbW9zdCBjb21tb24gdXNlIG9mIGEgNHg0IG1hdHJpeCBpbiAzRCBjb21wdXRlciBncmFwaGljcyBpcyBhcyBhIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cbiAqIEZvciBhbiBpbnRyb2R1Y3Rpb24gdG8gdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgYXMgdXNlZCBpbiBXZWJHTCwgY2hlY2sgb3V0IFt0aGlzIHR1dG9yaWFsXXtAbGluayBodHRwczovL3d3dy5vcGVuZ2wtdHV0b3JpYWwub3JnL2JlZ2lubmVycy10dXRvcmlhbHMvdHV0b3JpYWwtMy1tYXRyaWNlc31cbiAqXG4gKiBUaGlzIGFsbG93cyBhIDNEIHZlY3RvciByZXByZXNlbnRpbmcgYSBwb2ludCBpbiAzRCBzcGFjZSB0byB1bmRlcmdvXG4gKiB0cmFuc2Zvcm1hdGlvbnMgc3VjaCBhcyB0cmFuc2xhdGlvbiwgcm90YXRpb24sIHNoZWFyLCBzY2FsZSwgcmVmbGVjdGlvbixcbiAqIG9ydGhvZ29uYWwgb3IgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBhbmQgc28gb24sIGJ5IGJlaW5nIG11bHRpcGxpZWQgYnkgdGhlXG4gKiBtYXRyaXguIFRoaXMgaXMga25vd24gYXMgYGFwcGx5aW5nYCB0aGUgbWF0cml4IHRvIHRoZSB2ZWN0b3IuXG4gKlxuICogQSBOb3RlIG9uIFJvdy1NYWpvciBhbmQgQ29sdW1uLU1ham9yIE9yZGVyaW5nOlxuICpcbiAqIFRoZSBjb25zdHJ1Y3RvciBhbmQge0BsaW5rIE1hdHJpeDMjc2V0fSBtZXRob2QgdGFrZSBhcmd1bWVudHMgaW5cbiAqIFtyb3ctbWFqb3Jde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Jvdy1fYW5kX2NvbHVtbi1tYWpvcl9vcmRlciNDb2x1bW4tbWFqb3Jfb3JkZXJ9XG4gKiBvcmRlciwgd2hpbGUgaW50ZXJuYWxseSB0aGV5IGFyZSBzdG9yZWQgaW4gdGhlIHtAbGluayBNYXRyaXgzI2VsZW1lbnRzfSBhcnJheSBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuXG4gKiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZzpcbiAqIGBgYGpzXG4gKiBjb25zdCBtID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAqIG0uc2V0KCAxMSwgMTIsIDEzLCAxNCxcbiAqICAgICAgICAyMSwgMjIsIDIzLCAyNCxcbiAqICAgICAgICAzMSwgMzIsIDMzLCAzNCxcbiAqICAgICAgICA0MSwgNDIsIDQzLCA0NCApO1xuICogYGBgXG4gKiB3aWxsIHJlc3VsdCBpbiB0aGUgZWxlbWVudHMgYXJyYXkgY29udGFpbmluZzpcbiAqIGBgYGpzXG4gKiBtLmVsZW1lbnRzID0gWyAxMSwgMjEsIDMxLCA0MSxcbiAqICAgICAgICAgICAgICAgIDEyLCAyMiwgMzIsIDQyLFxuICogICAgICAgICAgICAgICAgMTMsIDIzLCAzMywgNDMsXG4gKiAgICAgICAgICAgICAgICAxNCwgMjQsIDM0LCA0NCBdO1xuICogYGBgXG4gKiBhbmQgaW50ZXJuYWxseSBhbGwgY2FsY3VsYXRpb25zIGFyZSBwZXJmb3JtZWQgdXNpbmcgY29sdW1uLW1ham9yIG9yZGVyaW5nLlxuICogSG93ZXZlciwgYXMgdGhlIGFjdHVhbCBvcmRlcmluZyBtYWtlcyBubyBkaWZmZXJlbmNlIG1hdGhlbWF0aWNhbGx5IGFuZFxuICogbW9zdCBwZW9wbGUgYXJlIHVzZWQgdG8gdGhpbmtpbmcgYWJvdXQgbWF0cmljZXMgaW4gcm93LW1ham9yIG9yZGVyLCB0aGVcbiAqIHRocmVlLmpzIGRvY3VtZW50YXRpb24gc2hvd3MgbWF0cmljZXMgaW4gcm93LW1ham9yIG9yZGVyLiBKdXN0IGJlYXIgaW5cbiAqIG1pbmQgdGhhdCBpZiB5b3UgYXJlIHJlYWRpbmcgdGhlIHNvdXJjZSBjb2RlLCB5b3UnbGwgaGF2ZSB0byB0YWtlIHRoZVxuICogdHJhbnNwb3NlIG9mIGFueSBtYXRyaWNlcyBvdXRsaW5lZCBoZXJlIHRvIG1ha2Ugc2Vuc2Ugb2YgdGhlIGNhbGN1bGF0aW9ucy5cbiAqL1xuY2xhc3MgTWF0cml4NCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgNHg0IG1hdHJpeC4gVGhlIGFyZ3VtZW50cyBhcmUgc3VwcG9zZWQgdG8gYmVcblx0ICogaW4gcm93LW1ham9yIG9yZGVyLiBJZiBubyBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0b3Jcblx0ICogaW5pdGlhbGl6ZXMgdGhlIG1hdHJpeCBhcyBhbiBpZGVudGl0eSBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjExXSAtIDEtMSBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMTJdIC0gMS0yIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24xM10gLSAxLTMgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjE0XSAtIDEtNCBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMjFdIC0gMi0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24yMl0gLSAyLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjIzXSAtIDItMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMjRdIC0gMi00IG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24zMV0gLSAzLTEgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjMyXSAtIDMtMiBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMzNdIC0gMy0zIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24zNF0gLSAzLTQgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjQxXSAtIDQtMSBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuNDJdIC0gNC0yIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW240M10gLSA0LTMgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjQ0XSAtIDQtNCBtYXRyaXggZWxlbWVudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHRNYXRyaXg0LnByb3RvdHlwZS5pc01hdHJpeDQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBjb2x1bW4tbWFqb3IgbGlzdCBvZiBtYXRyaXggdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PG51bWJlcj59XG5cdFx0ICovXG5cdFx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIDEsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0XTtcblxuXHRcdGlmICggbjExICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0KCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGVsZW1lbnRzIG9mIHRoZSBtYXRyaXguVGhlIGFyZ3VtZW50cyBhcmUgc3VwcG9zZWQgdG8gYmVcblx0ICogaW4gcm93LW1ham9yIG9yZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24xMV0gLSAxLTEgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjEyXSAtIDEtMiBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMTNdIC0gMS0zIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24xNF0gLSAxLTQgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjIxXSAtIDItMSBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMjJdIC0gMi0yIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24yM10gLSAyLTMgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjI0XSAtIDItNCBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMzFdIC0gMy0xIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24zMl0gLSAzLTIgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjMzXSAtIDMtMyBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMzRdIC0gMy00IG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW240MV0gLSA0LTEgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjQyXSAtIDQtMiBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuNDNdIC0gNC0zIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW240NF0gLSA0LTQgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0c2V0KCBuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgNCBdID0gbjEyOyB0ZVsgOCBdID0gbjEzOyB0ZVsgMTIgXSA9IG4xNDtcblx0XHR0ZVsgMSBdID0gbjIxOyB0ZVsgNSBdID0gbjIyOyB0ZVsgOSBdID0gbjIzOyB0ZVsgMTMgXSA9IG4yNDtcblx0XHR0ZVsgMiBdID0gbjMxOyB0ZVsgNiBdID0gbjMyOyB0ZVsgMTAgXSA9IG4zMzsgdGVbIDE0IF0gPSBuMzQ7XG5cdFx0dGVbIDMgXSA9IG40MTsgdGVbIDcgXSA9IG40MjsgdGVbIDExIF0gPSBuNDM7IHRlWyAxNSBdID0gbjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgbWF0cml4IHRvIHRoZSA0eDQgaWRlbnRpdHkgbWF0cml4LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCAxLCAwLCAwLFxuXHRcdFx0MCwgMCwgMSwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBtYXRyaXggd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7TWF0cml4NH0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBtYXRyaXggdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeCB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGNvcHkoIG0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTsgdGVbIDMgXSA9IG1lWyAzIF07XG5cdFx0dGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdOyB0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07XG5cdFx0dGVbIDggXSA9IG1lWyA4IF07IHRlWyA5IF0gPSBtZVsgOSBdOyB0ZVsgMTAgXSA9IG1lWyAxMCBdOyB0ZVsgMTEgXSA9IG1lWyAxMSBdO1xuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07IHRlWyAxMyBdID0gbWVbIDEzIF07IHRlWyAxNCBdID0gbWVbIDE0IF07IHRlWyAxNSBdID0gbWVbIDE1IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdHJhbnNsYXRpb24gY29tcG9uZW50IG9mIHRoZSBnaXZlbiBtYXRyaXhcblx0ICogaW50byB0aGlzIG1hdHJpeCdzIHRyYW5zbGF0aW9uIGNvbXBvbmVudC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeCB0byBjb3B5IHRoZSB0cmFuc2xhdGlvbiBjb21wb25lbnQuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0Y29weVBvc2l0aW9uKCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLCBtZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0ZVsgMTIgXSA9IG1lWyAxMiBdO1xuXHRcdHRlWyAxMyBdID0gbWVbIDEzIF07XG5cdFx0dGVbIDE0IF0gPSBtZVsgMTQgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRoZSB1cHBlciAzeDMgZWxlbWVudHMgb2YgdGhpcyBtYXRyaXggdG8gdGhlIHZhbHVlcyBvZiBnaXZlbiAzeDMgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgM3gzIG1hdHJpeC5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRzZXRGcm9tTWF0cml4MyggbSApIHtcblxuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRtZVsgMCBdLCBtZVsgMyBdLCBtZVsgNiBdLCAwLFxuXHRcdFx0bWVbIDEgXSwgbWVbIDQgXSwgbWVbIDcgXSwgMCxcblx0XHRcdG1lWyAyIF0sIG1lWyA1IF0sIG1lWyA4IF0sIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHRyYWN0cyB0aGUgYmFzaXMgb2YgdGhpcyBtYXRyaXggaW50byB0aGUgdGhyZWUgYXhpcyB2ZWN0b3JzIHByb3ZpZGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHhBeGlzIC0gVGhlIGJhc2lzJ3MgeCBheGlzLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHlBeGlzIC0gVGhlIGJhc2lzJ3MgeSBheGlzLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHpBeGlzIC0gVGhlIGJhc2lzJ3MgeiBheGlzLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGV4dHJhY3RCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDAgKTtcblx0XHR5QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAxICk7XG5cdFx0ekF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBiYXNpcyB2ZWN0b3JzIHRvIHRoaXMgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHhBeGlzIC0gVGhlIGJhc2lzJ3MgeCBheGlzLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHlBeGlzIC0gVGhlIGJhc2lzJ3MgeSBheGlzLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHpBeGlzIC0gVGhlIGJhc2lzJ3MgeiBheGlzLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdG1ha2VCYXNpcyggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHRoaXMuc2V0KFxuXHRcdFx0eEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMCxcblx0XHRcdHhBeGlzLnksIHlBeGlzLnksIHpBeGlzLnksIDAsXG5cdFx0XHR4QXhpcy56LCB5QXhpcy56LCB6QXhpcy56LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSByb3RhdGlvbiBjb21wb25lbnQgb2YgdGhlIGdpdmVuIG1hdHJpeFxuXHQgKiBpbnRvIHRoaXMgbWF0cml4J3Mgcm90YXRpb24gY29tcG9uZW50LlxuXHQgKlxuXHQgKiBOb3RlOiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXguXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0ZXh0cmFjdFJvdGF0aW9uKCBtICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG1lID0gbS5lbGVtZW50cztcblxuXHRcdGNvbnN0IHNjYWxlWCA9IDEgLyBfdjEkNS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAwICkubGVuZ3RoKCk7XG5cdFx0Y29uc3Qgc2NhbGVZID0gMSAvIF92MSQ1LnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDEgKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzY2FsZVogPSAxIC8gX3YxJDUuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDEgXSA9IG1lWyAxIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDMgXSA9IDA7XG5cblx0XHR0ZVsgNCBdID0gbWVbIDQgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNyBdID0gMDtcblxuXHRcdHRlWyA4IF0gPSBtZVsgOCBdICogc2NhbGVaO1xuXHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xuXHRcdHRlWyAxMCBdID0gbWVbIDEwIF0gKiBzY2FsZVo7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSByb3RhdGlvbiBjb21wb25lbnQgKHRoZSB1cHBlciBsZWZ0IDN4MyBtYXRyaXgpIG9mIHRoaXMgbWF0cml4IHRvXG5cdCAqIHRoZSByb3RhdGlvbiBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuIEV1bGVyIGFuZ2xlcy4gVGhlIHJlc3Qgb2Zcblx0ICogdGhlIG1hdHJpeCBpcyBzZXQgdG8gdGhlIGlkZW50aXR5LiBEZXBlbmRpbmcgb24gdGhlIHtAbGluayBFdWxlciNvcmRlcn0sXG5cdCAqIHRoZXJlIGFyZSBzaXggcG9zc2libGUgb3V0Y29tZXMuIFNlZSBbdGhpcyBwYWdlXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FdWxlcl9hbmdsZXMjUm90YXRpb25fbWF0cml4fVxuXHQgKiBmb3IgYSBjb21wbGV0ZSBsaXN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBhbmdsZXMuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bWFrZVJvdGF0aW9uRnJvbUV1bGVyKCBldWxlciApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IHggPSBldWxlci54LCB5ID0gZXVsZXIueSwgeiA9IGV1bGVyLno7XG5cdFx0Y29uc3QgYSA9IE1hdGguY29zKCB4ICksIGIgPSBNYXRoLnNpbiggeCApO1xuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggeSApLCBkID0gTWF0aC5zaW4oIHkgKTtcblx0XHRjb25zdCBlID0gTWF0aC5jb3MoIHogKSwgZiA9IE1hdGguc2luKCB6ICk7XG5cblx0XHRpZiAoIGV1bGVyLm9yZGVyID09PSAnWFlaJyApIHtcblxuXHRcdFx0Y29uc3QgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IC0gYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZDtcblxuXHRcdFx0dGVbIDEgXSA9IGFmICsgYmUgKiBkO1xuXHRcdFx0dGVbIDUgXSA9IGFlIC0gYmYgKiBkO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGM7XG5cblx0XHRcdHRlWyAyIF0gPSBiZiAtIGFlICogZDtcblx0XHRcdHRlWyA2IF0gPSBiZSArIGFmICogZDtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdGNvbnN0IGNlID0gYyAqIGUsIGNmID0gYyAqIGYsIGRlID0gZCAqIGUsIGRmID0gZCAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjZSArIGRmICogYjtcblx0XHRcdHRlWyA0IF0gPSBkZSAqIGIgLSBjZjtcblx0XHRcdHRlWyA4IF0gPSBhICogZDtcblxuXHRcdFx0dGVbIDEgXSA9IGEgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IC0gYjtcblxuXHRcdFx0dGVbIDIgXSA9IGNmICogYiAtIGRlO1xuXHRcdFx0dGVbIDYgXSA9IGRmICsgY2UgKiBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWlhZJyApIHtcblxuXHRcdFx0Y29uc3QgY2UgPSBjICogZSwgY2YgPSBjICogZiwgZGUgPSBkICogZSwgZGYgPSBkICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGNlIC0gZGYgKiBiO1xuXHRcdFx0dGVbIDQgXSA9IC0gYSAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZGUgKyBjZiAqIGI7XG5cblx0XHRcdHRlWyAxIF0gPSBjZiArIGRlICogYjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBkZiAtIGNlICogYjtcblxuXHRcdFx0dGVbIDIgXSA9IC0gYSAqIGQ7XG5cdFx0XHR0ZVsgNiBdID0gYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pZWCcgKSB7XG5cblx0XHRcdGNvbnN0IGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZSAqIGQgLSBhZjtcblx0XHRcdHRlWyA4IF0gPSBhZSAqIGQgKyBiZjtcblxuXHRcdFx0dGVbIDEgXSA9IGMgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGJmICogZCArIGFlO1xuXHRcdFx0dGVbIDkgXSA9IGFmICogZCAtIGJlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBjO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0Y29uc3QgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IGJkIC0gYWMgKiBmO1xuXHRcdFx0dGVbIDggXSA9IGJjICogZiArIGFkO1xuXG5cdFx0XHR0ZVsgMSBdID0gZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGIgKiBlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkICogZTtcblx0XHRcdHRlWyA2IF0gPSBhZCAqIGYgKyBiYztcblx0XHRcdHRlWyAxMCBdID0gYWMgLSBiZCAqIGY7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1haWScgKSB7XG5cblx0XHRcdGNvbnN0IGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSAtIGY7XG5cdFx0XHR0ZVsgOCBdID0gZCAqIGU7XG5cblx0XHRcdHRlWyAxIF0gPSBhYyAqIGYgKyBiZDtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSBhZCAqIGYgLSBiYztcblxuXHRcdFx0dGVbIDIgXSA9IGJjICogZiAtIGFkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBlO1xuXHRcdFx0dGVbIDEwIF0gPSBiZCAqIGYgKyBhYztcblxuXHRcdH1cblxuXHRcdC8vIGJvdHRvbSByb3dcblx0XHR0ZVsgMyBdID0gMDtcblx0XHR0ZVsgNyBdID0gMDtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHQvLyBsYXN0IGNvbHVtblxuXHRcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMTMgXSA9IDA7XG5cdFx0dGVbIDE0IF0gPSAwO1xuXHRcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcm90YXRpb24gY29tcG9uZW50IG9mIHRoaXMgbWF0cml4IHRvIHRoZSByb3RhdGlvbiBzcGVjaWZpZWQgYnlcblx0ICogdGhlIGdpdmVuIFF1YXRlcm5pb24gYXMgb3V0bGluZWQgW2hlcmVde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JvdGF0aW9uX21hdHJpeCNRdWF0ZXJuaW9ufVxuXHQgKiBUaGUgcmVzdCBvZiB0aGUgbWF0cml4IGlzIHNldCB0byB0aGUgaWRlbnRpdHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBRdWF0ZXJuaW9uLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdG1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29tcG9zZSggX3plcm8sIHEsIF9vbmUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHJvdGF0aW9uIGNvbXBvbmVudCBvZiB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4LCBsb29raW5nIGZyb20gYGV5ZWAgdG93YXJkc1xuXHQgKiBgdGFyZ2V0YCwgYW5kIG9yaWVudGVkIGJ5IHRoZSB1cC1kaXJlY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gZXllIC0gVGhlIGV5ZSB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdXAgLSBUaGUgdXAgdmVjdG9yLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGxvb2tBdCggZXllLCB0YXJnZXQsIHVwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0X3ouc3ViVmVjdG9ycyggZXllLCB0YXJnZXQgKTtcblxuXHRcdGlmICggX3oubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXG5cblx0XHRcdF96LnogPSAxO1xuXG5cdFx0fVxuXG5cdFx0X3oubm9ybWFsaXplKCk7XG5cdFx0X3guY3Jvc3NWZWN0b3JzKCB1cCwgX3ogKTtcblxuXHRcdGlmICggX3gubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHVwLnogKSA9PT0gMSApIHtcblxuXHRcdFx0XHRfei54ICs9IDAuMDAwMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfei56ICs9IDAuMDAwMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfei5ub3JtYWxpemUoKTtcblx0XHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XG5cblx0XHR9XG5cblx0XHRfeC5ub3JtYWxpemUoKTtcblx0XHRfeS5jcm9zc1ZlY3RvcnMoIF96LCBfeCApO1xuXG5cdFx0dGVbIDAgXSA9IF94Lng7IHRlWyA0IF0gPSBfeS54OyB0ZVsgOCBdID0gX3oueDtcblx0XHR0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55O1xuXHRcdHRlWyAyIF0gPSBfeC56OyB0ZVsgNiBdID0gX3kuejsgdGVbIDEwIF0gPSBfei56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQb3N0LW11bHRpcGxpZXMgdGhpcyBtYXRyaXggYnkgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXggdG8gbXVsdGlwbHkgd2l0aC5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtdWx0aXBseSggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1tdWx0aXBsaWVzIHRoaXMgbWF0cml4IGJ5IHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgbWF0cml4IHRvIG11bHRpcGx5IHdpdGguXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0cHJlbXVsdGlwbHkoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsZXMgdGhlIGdpdmVuIDR4NCBtYXRyaWNlcyBhbmQgc3RvcmVzIHRoZSByZXN1bHRcblx0ICogaW4gdGhpcyBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gYSAtIFRoZSBmaXJzdCBtYXRyaXguXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gYiAtIFRoZSBzZWNvbmQgbWF0cml4LlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdG11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSB7XG5cblx0XHRjb25zdCBhZSA9IGEuZWxlbWVudHM7XG5cdFx0Y29uc3QgYmUgPSBiLmVsZW1lbnRzO1xuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGNvbnN0IGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyA0IF0sIGExMyA9IGFlWyA4IF0sIGExNCA9IGFlWyAxMiBdO1xuXHRcdGNvbnN0IGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA1IF0sIGEyMyA9IGFlWyA5IF0sIGEyNCA9IGFlWyAxMyBdO1xuXHRcdGNvbnN0IGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTtcblx0XHRjb25zdCBhNDEgPSBhZVsgMyBdLCBhNDIgPSBhZVsgNyBdLCBhNDMgPSBhZVsgMTEgXSwgYTQ0ID0gYWVbIDE1IF07XG5cblx0XHRjb25zdCBiMTEgPSBiZVsgMCBdLCBiMTIgPSBiZVsgNCBdLCBiMTMgPSBiZVsgOCBdLCBiMTQgPSBiZVsgMTIgXTtcblx0XHRjb25zdCBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTtcblx0XHRjb25zdCBiMzEgPSBiZVsgMiBdLCBiMzIgPSBiZVsgNiBdLCBiMzMgPSBiZVsgMTAgXSwgYjM0ID0gYmVbIDE0IF07XG5cdFx0Y29uc3QgYjQxID0gYmVbIDMgXSwgYjQyID0gYmVbIDcgXSwgYjQzID0gYmVbIDExIF0sIGI0NCA9IGJlWyAxNSBdO1xuXG5cdFx0dGVbIDAgXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMSArIGExNCAqIGI0MTtcblx0XHR0ZVsgNCBdID0gYTExICogYjEyICsgYTEyICogYjIyICsgYTEzICogYjMyICsgYTE0ICogYjQyO1xuXHRcdHRlWyA4IF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDM7XG5cdFx0dGVbIDEyIF0gPSBhMTEgKiBiMTQgKyBhMTIgKiBiMjQgKyBhMTMgKiBiMzQgKyBhMTQgKiBiNDQ7XG5cblx0XHR0ZVsgMSBdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxICsgYTI0ICogYjQxO1xuXHRcdHRlWyA1IF0gPSBhMjEgKiBiMTIgKyBhMjIgKiBiMjIgKyBhMjMgKiBiMzIgKyBhMjQgKiBiNDI7XG5cdFx0dGVbIDkgXSA9IGEyMSAqIGIxMyArIGEyMiAqIGIyMyArIGEyMyAqIGIzMyArIGEyNCAqIGI0Mztcblx0XHR0ZVsgMTMgXSA9IGEyMSAqIGIxNCArIGEyMiAqIGIyNCArIGEyMyAqIGIzNCArIGEyNCAqIGI0NDtcblxuXHRcdHRlWyAyIF0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XG5cdFx0dGVbIDYgXSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0Mjtcblx0XHR0ZVsgMTAgXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0Mztcblx0XHR0ZVsgMTQgXSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcblxuXHRcdHRlWyAzIF0gPSBhNDEgKiBiMTEgKyBhNDIgKiBiMjEgKyBhNDMgKiBiMzEgKyBhNDQgKiBiNDE7XG5cdFx0dGVbIDcgXSA9IGE0MSAqIGIxMiArIGE0MiAqIGIyMiArIGE0MyAqIGIzMiArIGE0NCAqIGI0Mjtcblx0XHR0ZVsgMTEgXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0Mztcblx0XHR0ZVsgMTUgXSA9IGE0MSAqIGIxNCArIGE0MiAqIGIyNCArIGE0MyAqIGIzNCArIGE0NCAqIGI0NDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTXVsdGlwbGllcyBldmVyeSBjb21wb25lbnQgb2YgdGhlIG1hdHJpeCBieSB0aGUgZ2l2ZW4gc2NhbGFyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bXVsdGlwbHlTY2FsYXIoIHMgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyA0IF0gKj0gczsgdGVbIDggXSAqPSBzOyB0ZVsgMTIgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDUgXSAqPSBzOyB0ZVsgOSBdICo9IHM7IHRlWyAxMyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNiBdICo9IHM7IHRlWyAxMCBdICo9IHM7IHRlWyAxNCBdICo9IHM7XG5cdFx0dGVbIDMgXSAqPSBzOyB0ZVsgNyBdICo9IHM7IHRlWyAxMSBdICo9IHM7IHRlWyAxNSBdICo9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIGFuZCByZXR1cm5zIHRoZSBkZXRlcm1pbmFudCBvZiB0aGlzIG1hdHJpeC5cblx0ICpcblx0ICogQmFzZWQgb24gdGhlIG1ldGhvZCBvdXRsaW5lZCBbaGVyZV17QGxpbmsgaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtbH0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRldGVybWluYW50LlxuXHQgKi9cblx0ZGV0ZXJtaW5hbnQoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBuMTEgPSB0ZVsgMCBdLCBuMTIgPSB0ZVsgNCBdLCBuMTMgPSB0ZVsgOCBdLCBuMTQgPSB0ZVsgMTIgXTtcblx0XHRjb25zdCBuMjEgPSB0ZVsgMSBdLCBuMjIgPSB0ZVsgNSBdLCBuMjMgPSB0ZVsgOSBdLCBuMjQgPSB0ZVsgMTMgXTtcblx0XHRjb25zdCBuMzEgPSB0ZVsgMiBdLCBuMzIgPSB0ZVsgNiBdLCBuMzMgPSB0ZVsgMTAgXSwgbjM0ID0gdGVbIDE0IF07XG5cdFx0Y29uc3QgbjQxID0gdGVbIDMgXSwgbjQyID0gdGVbIDcgXSwgbjQzID0gdGVbIDExIF0sIG40NCA9IHRlWyAxNSBdO1xuXG5cdFx0Ly9UT0RPOiBtYWtlIHRoaXMgbW9yZSBlZmZpY2llbnRcblxuXHRcdHJldHVybiAoXG5cdFx0XHRuNDEgKiAoXG5cdFx0XHRcdCsgbjE0ICogbjIzICogbjMyXG5cdFx0XHRcdCAtIG4xMyAqIG4yNCAqIG4zMlxuXHRcdFx0XHQgLSBuMTQgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTIgKiBuMjMgKiBuMzRcblx0XHRcdCkgK1xuXHRcdFx0bjQyICogKFxuXHRcdFx0XHQrIG4xMSAqIG4yMyAqIG4zNFxuXHRcdFx0XHQgLSBuMTEgKiBuMjQgKiBuMzNcblx0XHRcdFx0ICsgbjE0ICogbjIxICogbjMzXG5cdFx0XHRcdCAtIG4xMyAqIG4yMSAqIG4zNFxuXHRcdFx0XHQgKyBuMTMgKiBuMjQgKiBuMzFcblx0XHRcdFx0IC0gbjE0ICogbjIzICogbjMxXG5cdFx0XHQpICtcblx0XHRcdG40MyAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjExICogbjIyICogbjM0XG5cdFx0XHRcdCAtIG4xNCAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgKyBuMTIgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjE0ICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMiAqIG4yNCAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDQgKiAoXG5cdFx0XHRcdC0gbjEzICogbjIyICogbjMxXG5cdFx0XHRcdCAtIG4xMSAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgKyBuMTEgKiBuMjIgKiBuMzNcblx0XHRcdFx0ICsgbjEzICogbjIxICogbjMyXG5cdFx0XHRcdCAtIG4xMiAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgKyBuMTIgKiBuMjMgKiBuMzFcblx0XHRcdClcblxuXHRcdCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc3Bvc2VzIHRoaXMgbWF0cml4IGluIHBsYWNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdHRyYW5zcG9zZSgpIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRsZXQgdG1wO1xuXG5cdFx0dG1wID0gdGVbIDEgXTsgdGVbIDEgXSA9IHRlWyA0IF07IHRlWyA0IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDIgXTsgdGVbIDIgXSA9IHRlWyA4IF07IHRlWyA4IF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDYgXTsgdGVbIDYgXSA9IHRlWyA5IF07IHRlWyA5IF0gPSB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMyBdOyB0ZVsgMyBdID0gdGVbIDEyIF07IHRlWyAxMiBdID0gdG1wO1xuXHRcdHRtcCA9IHRlWyA3IF07IHRlWyA3IF0gPSB0ZVsgMTMgXTsgdGVbIDEzIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDExIF07IHRlWyAxMSBdID0gdGVbIDE0IF07IHRlWyAxNCBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwb3NpdGlvbiBjb21wb25lbnQgZm9yIHRoaXMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHZlY3Rvcixcblx0ICogd2l0aG91dCBhZmZlY3RpbmcgdGhlIHJlc3Qgb2YgdGhlIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ8VmVjdG9yM30geCAtIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIG9yIGFsdGVybmF0aXZlbHkgdGhlIHZlY3RvciBvYmplY3QuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0c2V0UG9zaXRpb24oIHgsIHksIHogKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHR0ZVsgMTIgXSA9IHgueDtcblx0XHRcdHRlWyAxMyBdID0geC55O1xuXHRcdFx0dGVbIDE0IF0gPSB4Lno7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0ZVsgMTIgXSA9IHg7XG5cdFx0XHR0ZVsgMTMgXSA9IHk7XG5cdFx0XHR0ZVsgMTQgXSA9IHo7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEludmVydHMgdGhpcyBtYXRyaXgsIHVzaW5nIHRoZSBbYW5hbHl0aWMgbWV0aG9kXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnZlcnRpYmxlX21hdHJpeCNBbmFseXRpY19zb2x1dGlvbn0uXG5cdCAqIFlvdSBjYW4gbm90IGludmVydCB3aXRoIGEgZGV0ZXJtaW5hbnQgb2YgemVyby4gSWYgeW91IGF0dGVtcHQgdGhpcywgdGhlIG1ldGhvZCBwcm9kdWNlc1xuXHQgKiBhIHplcm8gbWF0cml4IGluc3RlYWQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0aW52ZXJ0KCkge1xuXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxuXG5cdFx0XHRuMTEgPSB0ZVsgMCBdLCBuMjEgPSB0ZVsgMSBdLCBuMzEgPSB0ZVsgMiBdLCBuNDEgPSB0ZVsgMyBdLFxuXHRcdFx0bjEyID0gdGVbIDQgXSwgbjIyID0gdGVbIDUgXSwgbjMyID0gdGVbIDYgXSwgbjQyID0gdGVbIDcgXSxcblx0XHRcdG4xMyA9IHRlWyA4IF0sIG4yMyA9IHRlWyA5IF0sIG4zMyA9IHRlWyAxMCBdLCBuNDMgPSB0ZVsgMTEgXSxcblx0XHRcdG4xNCA9IHRlWyAxMiBdLCBuMjQgPSB0ZVsgMTMgXSwgbjM0ID0gdGVbIDE0IF0sIG40NCA9IHRlWyAxNSBdLFxuXG5cdFx0XHR0MTEgPSBuMjMgKiBuMzQgKiBuNDIgLSBuMjQgKiBuMzMgKiBuNDIgKyBuMjQgKiBuMzIgKiBuNDMgLSBuMjIgKiBuMzQgKiBuNDMgLSBuMjMgKiBuMzIgKiBuNDQgKyBuMjIgKiBuMzMgKiBuNDQsXG5cdFx0XHR0MTIgPSBuMTQgKiBuMzMgKiBuNDIgLSBuMTMgKiBuMzQgKiBuNDIgLSBuMTQgKiBuMzIgKiBuNDMgKyBuMTIgKiBuMzQgKiBuNDMgKyBuMTMgKiBuMzIgKiBuNDQgLSBuMTIgKiBuMzMgKiBuNDQsXG5cdFx0XHR0MTMgPSBuMTMgKiBuMjQgKiBuNDIgLSBuMTQgKiBuMjMgKiBuNDIgKyBuMTQgKiBuMjIgKiBuNDMgLSBuMTIgKiBuMjQgKiBuNDMgLSBuMTMgKiBuMjIgKiBuNDQgKyBuMTIgKiBuMjMgKiBuNDQsXG5cdFx0XHR0MTQgPSBuMTQgKiBuMjMgKiBuMzIgLSBuMTMgKiBuMjQgKiBuMzIgLSBuMTQgKiBuMjIgKiBuMzMgKyBuMTIgKiBuMjQgKiBuMzMgKyBuMTMgKiBuMjIgKiBuMzQgLSBuMTIgKiBuMjMgKiBuMzQ7XG5cblx0XHRjb25zdCBkZXQgPSBuMTEgKiB0MTEgKyBuMjEgKiB0MTIgKyBuMzEgKiB0MTMgKyBuNDEgKiB0MTQ7XG5cblx0XHRpZiAoIGRldCA9PT0gMCApIHJldHVybiB0aGlzLnNldCggMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCApO1xuXG5cdFx0Y29uc3QgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11bHRpcGxpZXMgdGhlIGNvbHVtbnMgb2YgdGhpcyBtYXRyaXggYnkgdGhlIGdpdmVuIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHNjYWxlIHZlY3Rvci5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRzY2FsZSggdiApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xuXG5cdFx0dGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejtcblx0XHR0ZVsgMSBdICo9IHg7IHRlWyA1IF0gKj0geTsgdGVbIDkgXSAqPSB6O1xuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xuXHRcdHRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBtYXhpbXVtIHNjYWxlIHZhbHVlIG9mIHRoZSB0aHJlZSBheGVzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBtYXhpbXVtIHNjYWxlLlxuXHQgKi9cblx0Z2V0TWF4U2NhbGVPbkF4aXMoKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRjb25zdCBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHRjb25zdCBzY2FsZVlTcSA9IHRlWyA0IF0gKiB0ZVsgNCBdICsgdGVbIDUgXSAqIHRlWyA1IF0gKyB0ZVsgNiBdICogdGVbIDYgXTtcblx0XHRjb25zdCBzY2FsZVpTcSA9IHRlWyA4IF0gKiB0ZVsgOCBdICsgdGVbIDkgXSAqIHRlWyA5IF0gKyB0ZVsgMTAgXSAqIHRlWyAxMCBdO1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggTWF0aC5tYXgoIHNjYWxlWFNxLCBzY2FsZVlTcSwgc2NhbGVaU3EgKSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHRyYW5zbGF0aW9uIHRyYW5zZm9ybSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfFZlY3RvcjN9IHggLSBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZSBpbiB0aGUgWCBheGlzIG9yIGFsdGVybmF0aXZlbHkgYSB0cmFuc2xhdGlvbiB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGFtb3VudCB0byB0cmFuc2xhdGUgaW4gdGhlIFkgYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgYW1vdW50IHRvIHRyYW5zbGF0ZSBpbiB0aGUgeiBheGlzLlxuXHQgKiBAcmV0dXJuIHtNYXRyaXg0fSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdG1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRcdDEsIDAsIDAsIHgueCxcblx0XHRcdFx0MCwgMSwgMCwgeC55LFxuXHRcdFx0XHQwLCAwLCAxLCB4LnosXG5cdFx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdFx0KTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRcdDEsIDAsIDAsIHgsXG5cdFx0XHRcdDAsIDEsIDAsIHksXG5cdFx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdFx0KTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHJvdGF0aW9uYWwgdHJhbnNmb3JtYXRpb24gYXJvdW5kIHRoZSBYIGF4aXMgYnlcblx0ICogdGhlIGdpdmVuIGFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGhldGEgLSBUaGUgcm90YXRpb24gaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtYWtlUm90YXRpb25YKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHJvdGF0aW9uYWwgdHJhbnNmb3JtYXRpb24gYXJvdW5kIHRoZSBZIGF4aXMgYnlcblx0ICogdGhlIGdpdmVuIGFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGhldGEgLSBUaGUgcm90YXRpb24gaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtYWtlUm90YXRpb25ZKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdCBjLCAwLCBzLCAwLFxuXHRcdFx0IDAsIDEsIDAsIDAsXG5cdFx0XHQtIHMsIDAsIGMsIDAsXG5cdFx0XHQgMCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHJvdGF0aW9uYWwgdHJhbnNmb3JtYXRpb24gYXJvdW5kIHRoZSBaIGF4aXMgYnlcblx0ICogdGhlIGdpdmVuIGFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGhldGEgLSBUaGUgcm90YXRpb24gaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtYWtlUm90YXRpb25aKCB0aGV0YSApIHtcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdGMsIC0gcywgMCwgMCxcblx0XHRcdHMsIGMsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCBhcyBhIHJvdGF0aW9uYWwgdHJhbnNmb3JtYXRpb24gYXJvdW5kIHRoZSBnaXZlbiBheGlzIGJ5XG5cdCAqIHRoZSBnaXZlbiBhbmdsZS5cblx0ICpcblx0ICogVGhpcyBpcyBhIHNvbWV3aGF0IGNvbnRyb3ZlcnNpYWwgYnV0IG1hdGhlbWF0aWNhbGx5IHNvdW5kIGFsdGVybmF0aXZlIHRvXG5cdCAqIHJvdGF0aW5nIHZpYSBRdWF0ZXJuaW9ucy4gU2VlIHRoZSBkaXNjdXNzaW9uIFtoZXJlXXtAbGluayBodHRwczovL3d3dy5nYW1lZGV2Lm5ldC9hcnRpY2xlcy9wcm9ncmFtbWluZy9tYXRoLWFuZC1waHlzaWNzL2RvLXdlLXJlYWxseS1uZWVkLXF1YXRlcm5pb25zLXIxMTk5fS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBheGlzIC0gVGhlIG5vcm1hbGl6ZWQgcm90YXRpb24gYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIHJvdGF0aW9uIGluIHJhZGlhbnMuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bWFrZVJvdGF0aW9uQXhpcyggYXhpcywgYW5nbGUgKSB7XG5cblx0XHQvLyBCYXNlZCBvbiBodHRwOi8vd3d3LmdhbWVkZXYubmV0L3JlZmVyZW5jZS9hcnRpY2xlcy9hcnRpY2xlMTE5OS5hc3BcblxuXHRcdGNvbnN0IGMgPSBNYXRoLmNvcyggYW5nbGUgKTtcblx0XHRjb25zdCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cdFx0Y29uc3QgdCA9IDEgLSBjO1xuXHRcdGNvbnN0IHggPSBheGlzLngsIHkgPSBheGlzLnksIHogPSBheGlzLno7XG5cdFx0Y29uc3QgdHggPSB0ICogeCwgdHkgPSB0ICogeTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXG5cdFx0XHR0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgbWF0cml4IGFzIGEgc2NhbGUgdHJhbnNmb3JtYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGFtb3VudCB0byBzY2FsZSBpbiB0aGUgWCBheGlzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBhbW91bnQgdG8gc2NhbGUgaW4gdGhlIFkgYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgYW1vdW50IHRvIHNjYWxlIGluIHRoZSBaIGF4aXMuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bWFrZVNjYWxlKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdHgsIDAsIDAsIDAsXG5cdFx0XHQwLCB5LCAwLCAwLFxuXHRcdFx0MCwgMCwgeiwgMCxcblx0XHRcdDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhpcyBtYXRyaXggYXMgYSBzaGVhciB0cmFuc2Zvcm1hdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHh5IC0gVGhlIGFtb3VudCB0byBzaGVhciBYIGJ5IFkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4eiAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWCBieSBaLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geXggLSBUaGUgYW1vdW50IHRvIHNoZWFyIFkgYnkgWC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHl6IC0gVGhlIGFtb3VudCB0byBzaGVhciBZIGJ5IFouXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6eCAtIFRoZSBhbW91bnQgdG8gc2hlYXIgWiBieSBYLlxuXHQgKiBAcGFyYW0ge251bWJlcn0genkgLSBUaGUgYW1vdW50IHRvIHNoZWFyIFogYnkgWS5cblx0ICogQHJldHVybiB7TWF0cml4NH0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRtYWtlU2hlYXIoIHh5LCB4eiwgeXgsIHl6LCB6eCwgenkgKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeXgsIHp4LCAwLFxuXHRcdFx0eHksIDEsIHp5LCAwLFxuXHRcdFx0eHosIHl6LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIG1hdHJpeCB0byB0aGUgdHJhbnNmb3JtYXRpb24gY29tcG9zZWQgb2YgdGhlIGdpdmVuIHBvc2l0aW9uLFxuXHQgKiByb3RhdGlvbiAoUXVhdGVybmlvbikgYW5kIHNjYWxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIHZlY3Rvci5cblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxdWF0ZXJuaW9uIC0gVGhlIHJvdGF0aW9uIGFzIGEgUXVhdGVybmlvbi5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBzY2FsZSAtIFRoZSBzY2FsZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0Y29tcG9zZSggcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0Y29uc3QgeCA9IHF1YXRlcm5pb24uX3gsIHkgPSBxdWF0ZXJuaW9uLl95LCB6ID0gcXVhdGVybmlvbi5feiwgdyA9IHF1YXRlcm5pb24uX3c7XG5cdFx0Y29uc3QgeDIgPSB4ICsgeCxcdHkyID0geSArIHksIHoyID0geiArIHo7XG5cdFx0Y29uc3QgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHRjb25zdCB5eSA9IHkgKiB5MiwgeXogPSB5ICogejIsIHp6ID0geiAqIHoyO1xuXHRcdGNvbnN0IHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejI7XG5cblx0XHRjb25zdCBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdFx0dGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0XHR0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0XHR0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHRcdHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdFx0dGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0XHR0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0XHR0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHR0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdFx0dGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHRcdHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlY29tcG9zZXMgdGhpcyBtYXRyaXggaW50byBpdHMgcG9zaXRpb24sIHJvdGF0aW9uIGFuZCBzY2FsZSBjb21wb25lbnRzXG5cdCAqIGFuZCBwcm92aWRlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiBvYmplY3RzLlxuXHQgKlxuXHQgKiBOb3RlOiBOb3QgYWxsIG1hdHJpY2VzIGFyZSBkZWNvbXBvc2FibGUgaW4gdGhpcyB3YXkuIEZvciBleGFtcGxlLCBpZiBhblxuXHQgKiBvYmplY3QgaGFzIGEgbm9uLXVuaWZvcm1seSBzY2FsZWQgcGFyZW50LCB0aGVuIHRoZSBvYmplY3QncyB3b3JsZCBtYXRyaXhcblx0ICogbWF5IG5vdCBiZSBkZWNvbXBvc2FibGUsIGFuZCB0aGlzIG1ldGhvZCBtYXkgbm90IGJlIGFwcHJvcHJpYXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIHZlY3Rvci5cblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxdWF0ZXJuaW9uIC0gVGhlIHJvdGF0aW9uIGFzIGEgUXVhdGVybmlvbi5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBzY2FsZSAtIFRoZSBzY2FsZSB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0ZGVjb21wb3NlKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRsZXQgc3ggPSBfdjEkNS5zZXQoIHRlWyAwIF0sIHRlWyAxIF0sIHRlWyAyIF0gKS5sZW5ndGgoKTtcblx0XHRjb25zdCBzeSA9IF92MSQ1LnNldCggdGVbIDQgXSwgdGVbIDUgXSwgdGVbIDYgXSApLmxlbmd0aCgpO1xuXHRcdGNvbnN0IHN6ID0gX3YxJDUuc2V0KCB0ZVsgOCBdLCB0ZVsgOSBdLCB0ZVsgMTAgXSApLmxlbmd0aCgpO1xuXG5cdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcblx0XHRjb25zdCBkZXQgPSB0aGlzLmRldGVybWluYW50KCk7XG5cdFx0aWYgKCBkZXQgPCAwICkgc3ggPSAtIHN4O1xuXG5cdFx0cG9zaXRpb24ueCA9IHRlWyAxMiBdO1xuXHRcdHBvc2l0aW9uLnkgPSB0ZVsgMTMgXTtcblx0XHRwb3NpdGlvbi56ID0gdGVbIDE0IF07XG5cblx0XHQvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxuXHRcdF9tMSQyLmNvcHkoIHRoaXMgKTtcblxuXHRcdGNvbnN0IGludlNYID0gMSAvIHN4O1xuXHRcdGNvbnN0IGludlNZID0gMSAvIHN5O1xuXHRcdGNvbnN0IGludlNaID0gMSAvIHN6O1xuXG5cdFx0X20xJDIuZWxlbWVudHNbIDAgXSAqPSBpbnZTWDtcblx0XHRfbTEkMi5lbGVtZW50c1sgMSBdICo9IGludlNYO1xuXHRcdF9tMSQyLmVsZW1lbnRzWyAyIF0gKj0gaW52U1g7XG5cblx0XHRfbTEkMi5lbGVtZW50c1sgNCBdICo9IGludlNZO1xuXHRcdF9tMSQyLmVsZW1lbnRzWyA1IF0gKj0gaW52U1k7XG5cdFx0X20xJDIuZWxlbWVudHNbIDYgXSAqPSBpbnZTWTtcblxuXHRcdF9tMSQyLmVsZW1lbnRzWyA4IF0gKj0gaW52U1o7XG5cdFx0X20xJDIuZWxlbWVudHNbIDkgXSAqPSBpbnZTWjtcblx0XHRfbTEkMi5lbGVtZW50c1sgMTAgXSAqPSBpbnZTWjtcblxuXHRcdHF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbTEkMiApO1xuXG5cdFx0c2NhbGUueCA9IHN4O1xuXHRcdHNjYWxlLnkgPSBzeTtcblx0XHRzY2FsZS56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeC4gVGhpcyBpcyB1c2VkIGludGVybmFsbHkgYnlcblx0ICoge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI3VwZGF0ZVByb2plY3Rpb25NYXRyaXh9LlxuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IC0gTGVmdCBib3VuZGFyeSBvZiB0aGUgdmlld2luZyBmcnVzdHVtIGF0IHRoZSBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgLSBSaWdodCBib3VuZGFyeSBvZiB0aGUgdmlld2luZyBmcnVzdHVtIGF0IHRoZSBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdG9wIC0gVG9wIGJvdW5kYXJ5IG9mIHRoZSB2aWV3aW5nIGZydXN0dW0gYXQgdGhlIG5lYXIgcGxhbmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBib3R0b20gLSBCb3R0b20gYm91bmRhcnkgb2YgdGhlIHZpZXdpbmcgZnJ1c3R1bSBhdCB0aGUgbmVhciBwbGFuZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmFyIC0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgZmFyIHBsYW5lLlxuXHQgKiBAcGFyYW0geyhXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSl9IFtjb29yZGluYXRlU3lzdGVtPVdlYkdMQ29vcmRpbmF0ZVN5c3RlbV0gLSBUaGUgY29vcmRpbmF0ZSBzeXN0ZW0uXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciwgY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCB4ID0gMiAqIG5lYXIgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdGNvbnN0IHkgPSAyICogbmVhciAvICggdG9wIC0gYm90dG9tICk7XG5cblx0XHRjb25zdCBhID0gKCByaWdodCArIGxlZnQgKSAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgYiA9ICggdG9wICsgYm90dG9tICkgLyAoIHRvcCAtIGJvdHRvbSApO1xuXG5cdFx0bGV0IGMsIGQ7XG5cblx0XHRpZiAoIGNvb3JkaW5hdGVTeXN0ZW0gPT09IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0YyA9IC0gKCBmYXIgKyBuZWFyICkgLyAoIGZhciAtIG5lYXIgKTtcblx0XHRcdGQgPSAoIC0yICogZmFyICogbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XG5cblx0XHR9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRjID0gLSBmYXIgLyAoIGZhciAtIG5lYXIgKTtcblx0XHRcdGQgPSAoIC0gZmFyICogbmVhciApIC8gKCBmYXIgLSBuZWFyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5NYXRyaXg0Lm1ha2VQZXJzcGVjdGl2ZSgpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0dGVbIDAgXSA9IHg7XHR0ZVsgNCBdID0gMDtcdHRlWyA4IF0gPSBhOyBcdHRlWyAxMiBdID0gMDtcblx0XHR0ZVsgMSBdID0gMDtcdHRlWyA1IF0gPSB5O1x0dGVbIDkgXSA9IGI7IFx0dGVbIDEzIF0gPSAwO1xuXHRcdHRlWyAyIF0gPSAwO1x0dGVbIDYgXSA9IDA7XHR0ZVsgMTAgXSA9IGM7IFx0dGVbIDE0IF0gPSBkO1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IC0xO1x0dGVbIDE1IF0gPSAwO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4LiBUaGlzIGlzIHVzZWQgaW50ZXJuYWxseSBieVxuXHQgKiB7QGxpbmsgT3J0aG9ncmFwaGljQ2FtZXJhI3VwZGF0ZVByb2plY3Rpb25NYXRyaXh9LlxuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IC0gTGVmdCBib3VuZGFyeSBvZiB0aGUgdmlld2luZyBmcnVzdHVtIGF0IHRoZSBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgLSBSaWdodCBib3VuZGFyeSBvZiB0aGUgdmlld2luZyBmcnVzdHVtIGF0IHRoZSBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdG9wIC0gVG9wIGJvdW5kYXJ5IG9mIHRoZSB2aWV3aW5nIGZydXN0dW0gYXQgdGhlIG5lYXIgcGxhbmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBib3R0b20gLSBCb3R0b20gYm91bmRhcnkgb2YgdGhlIHZpZXdpbmcgZnJ1c3R1bSBhdCB0aGUgbmVhciBwbGFuZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmFyIC0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgZmFyIHBsYW5lLlxuXHQgKiBAcGFyYW0geyhXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSl9IFtjb29yZGluYXRlU3lzdGVtPVdlYkdMQ29vcmRpbmF0ZVN5c3RlbV0gLSBUaGUgY29vcmRpbmF0ZSBzeXN0ZW0uXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0bWFrZU9ydGhvZ3JhcGhpYyggbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIsIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0Y29uc3QgdyA9IDEuMCAvICggcmlnaHQgLSBsZWZ0ICk7XG5cdFx0Y29uc3QgaCA9IDEuMCAvICggdG9wIC0gYm90dG9tICk7XG5cdFx0Y29uc3QgcCA9IDEuMCAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0Y29uc3QgeCA9ICggcmlnaHQgKyBsZWZ0ICkgKiB3O1xuXHRcdGNvbnN0IHkgPSAoIHRvcCArIGJvdHRvbSApICogaDtcblxuXHRcdGxldCB6LCB6SW52O1xuXG5cdFx0aWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdHogPSAoIGZhciArIG5lYXIgKSAqIHA7XG5cdFx0XHR6SW52ID0gLTIgKiBwO1xuXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0eiA9IG5lYXIgKiBwO1xuXHRcdFx0ekludiA9IC0xICogcDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLk1hdHJpeDQubWFrZU9ydGhvZ3JhcGhpYygpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0dGVbIDAgXSA9IDIgKiB3O1x0dGVbIDQgXSA9IDA7XHRcdHRlWyA4IF0gPSAwOyBcdFx0dGVbIDEyIF0gPSAtIHg7XG5cdFx0dGVbIDEgXSA9IDA7IFx0XHR0ZVsgNSBdID0gMiAqIGg7XHR0ZVsgOSBdID0gMDsgXHRcdHRlWyAxMyBdID0gLSB5O1xuXHRcdHRlWyAyIF0gPSAwOyBcdFx0dGVbIDYgXSA9IDA7XHRcdHRlWyAxMCBdID0gekludjtcdHRlWyAxNCBdID0gLSB6O1xuXHRcdHRlWyAzIF0gPSAwOyBcdFx0dGVbIDcgXSA9IDA7XHRcdHRlWyAxMSBdID0gMDtcdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIG1hdHJpeCBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4IC0gVGhlIG1hdHJpeCB0byB0ZXN0IGZvciBlcXVhbGl0eS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIG1hdHJpeCBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqL1xuXHRlcXVhbHMoIG1hdHJpeCApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblx0XHRjb25zdCBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRlWyBpIF0gIT09IG1lWyBpIF0gKSByZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGVsZW1lbnRzIG9mIHRoZSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYXJyYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYXJyYXkgLSBUaGUgbWF0cml4IGVsZW1lbnRzIGluIGNvbHVtbi1tYWpvciBvcmRlci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBJbmRleCBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXkuXG5cdCAqIEByZXR1cm4ge01hdHJpeDR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0cml4LlxuXHQgKi9cblx0ZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBXcml0ZXMgdGhlIGVsZW1lbnRzIG9mIHRoaXMgbWF0cml4IHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsXG5cdCAqIHRoZSBtZXRob2QgcmV0dXJucyBhIG5ldyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSBtYXRyaXggZWxlbWVudHMgaW4gY29sdW1uLW1ham9yIG9yZGVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuXG5cdCAqL1xuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0Y29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGVbIDMgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA2IF0gPSB0ZVsgNiBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA3IF0gPSB0ZVsgNyBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDkgXSA9IHRlWyA5IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEwIF0gPSB0ZVsgMTAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTEgXSA9IHRlWyAxMSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDEyIF0gPSB0ZVsgMTIgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTMgXSA9IHRlWyAxMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxNCBdID0gdGVbIDE0IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDE1IF0gPSB0ZVsgMTUgXTtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3YxJDUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbTEkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF96ZXJvID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xuY29uc3QgX29uZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDEsIDEsIDEgKTtcbmNvbnN0IF94ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3kgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfeiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX21hdHJpeCQyID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3F1YXRlcm5pb24kMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcblxuLyoqXG4gKiBBIGNsYXNzIHJlcHJlc2VudGluZyBFdWxlciBhbmdsZXMuXG4gKlxuICogRXVsZXIgYW5nbGVzIGRlc2NyaWJlIGEgcm90YXRpb25hbCB0cmFuc2Zvcm1hdGlvbiBieSByb3RhdGluZyBhbiBvYmplY3Qgb25cbiAqIGl0cyB2YXJpb3VzIGF4ZXMgaW4gc3BlY2lmaWVkIGFtb3VudHMgcGVyIGF4aXMsIGFuZCBhIHNwZWNpZmllZCBheGlzXG4gKiBvcmRlci5cbiAqXG4gKiBJdGVyYXRpbmcgdGhyb3VnaCBhbiBpbnN0YW5jZSB3aWxsIHlpZWxkIGl0cyBjb21wb25lbnRzICh4LCB5LCB6LFxuICogb3JkZXIpIGluIHRoZSBjb3JyZXNwb25kaW5nIG9yZGVyLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBhID0gbmV3IFRIUkVFLkV1bGVyKCAwLCAxLCAxLjU3LCAnWFlaJyApO1xuICogY29uc3QgYiA9IG5ldyBUSFJFRS5WZWN0b3IzKCAxLCAwLCAxICk7XG4gKiBiLmFwcGx5RXVsZXIoYSk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgRXVsZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGV1bGVyIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3g9MF0gLSBUaGUgYW5nbGUgb2YgdGhlIHggYXhpcyBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgYW5nbGUgb2YgdGhlIHkgYXhpcyBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3o9MF0gLSBUaGUgYW5nbGUgb2YgdGhlIHogYXhpcyBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29yZGVyPUV1bGVyLkRFRkFVTFRfT1JERVJdIC0gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcmRlciB0aGF0IHRoZSByb3RhdGlvbnMgYXJlIGFwcGxpZWQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggeCA9IDAsIHkgPSAwLCB6ID0gMCwgb3JkZXIgPSBFdWxlci5ERUZBVUxUX09SREVSICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0V1bGVyID0gdHJ1ZTtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX29yZGVyID0gb3JkZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYW5nbGUgb2YgdGhlIHggYXhpcyBpbiByYWRpYW5zLlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKiBAZGVmYXVsdCAwXG5cdCAqL1xuXHRnZXQgeCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl94O1xuXG5cdH1cblxuXHRzZXQgeCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLl94ID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGFuZ2xlIG9mIHRoZSB5IGF4aXMgaW4gcmFkaWFucy5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgMFxuXHQgKi9cblx0Z2V0IHkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feTtcblxuXHR9XG5cblx0c2V0IHkoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBhbmdsZSBvZiB0aGUgeiBheGlzIGluIHJhZGlhbnMuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCB6KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3o7XG5cblx0fVxuXG5cdHNldCB6KCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX3ogPSB2YWx1ZTtcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG9yZGVyIHRoYXQgdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC5cblx0ICpcblx0ICogQHR5cGUge3N0cmluZ31cblx0ICogQGRlZmF1bHQgJ1hZWidcblx0ICovXG5cdGdldCBvcmRlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9vcmRlcjtcblxuXHR9XG5cblx0c2V0IG9yZGVyKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX29yZGVyID0gdmFsdWU7XG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgRXVsZXIgY29tcG9uZW50cy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYW5nbGUgb2YgdGhlIHggYXhpcyBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBhbmdsZSBvZiB0aGUgeSBheGlzIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIGFuZ2xlIG9mIHRoZSB6IGF4aXMgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtvcmRlcl0gLSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG9yZGVyIHRoYXQgdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC5cblx0ICogQHJldHVybiB7RXVsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgRXVsZXIgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXQoIHgsIHksIHosIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7XG5cblx0XHR0aGlzLl94ID0geDtcblx0XHR0aGlzLl95ID0geTtcblx0XHR0aGlzLl96ID0gejtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IEV1bGVyIGluc3RhbmNlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0V1bGVyfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fb3JkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBFdWxlciBpbnN0YW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBpbnN0YW5jZSB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtFdWxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBFdWxlciBpbnN0YW5jZS5cblx0ICovXG5cdGNvcHkoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xuXHRcdHRoaXMuX3kgPSBldWxlci5feTtcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGFuZ2xlcyBvZiB0aGlzIEV1bGVyIGluc3RhbmNlIGZyb20gYSBwdXJlIHJvdGF0aW9uIG1hdHJpeC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gQSA0eDQgbWF0cml4IG9mIHdoaWNoIHRoZSB1cHBlciAzeDMgb2YgbWF0cml4IGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZS4gdW5zY2FsZWQpLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29yZGVyXSAtIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgb3JkZXIgdGhhdCB0aGUgcm90YXRpb25zIGFyZSBhcHBsaWVkLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGU9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBpbnRlcm5hbCBgb25DaGFuZ2VgIGNhbGxiYWNrIHNob3VsZCBiZSBleGVjdXRlZCBvciBub3QuXG5cdCAqIEByZXR1cm4ge0V1bGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIEV1bGVyIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0RnJvbVJvdGF0aW9uTWF0cml4KCBtLCBvcmRlciA9IHRoaXMuX29yZGVyLCB1cGRhdGUgPSB0cnVlICkge1xuXG5cdFx0Y29uc3QgdGUgPSBtLmVsZW1lbnRzO1xuXHRcdGNvbnN0IG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07XG5cdFx0Y29uc3QgbTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXTtcblx0XHRjb25zdCBtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXTtcblxuXHRcdHN3aXRjaCAoIG9yZGVyICkge1xuXG5cdFx0XHRjYXNlICdYWVonOlxuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmFzaW4oIGNsYW1wKCBtMTMsIC0xLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMTEgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWFonOlxuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0yMywgLTEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0yMyApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTIyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTExICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWFknOlxuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oIGNsYW1wKCBtMzIsIC0xLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCAtIG0zMSwgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feSA9IDA7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdaWVgnOlxuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0zMSwgLTEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIG0yMSwgbTExICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKCAtIG0xMiwgbTIyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdZWlgnOlxuXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIGNsYW1wKCBtMjEsIC0xLCAxICkgKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBtMjEgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTIyICk7XG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIC0gbTMxLCBtMTEgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IDA7XG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTMzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdYWlknOlxuXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oIC0gY2xhbXAoIG0xMiwgLTEsIDEgKSApO1xuXG5cdFx0XHRcdGlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoIG0zMiwgbTIyICk7XG5cdFx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIoIG0xMywgbTExICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCAtIG0yMywgbTMzICk7XG5cdFx0XHRcdFx0dGhpcy5feSA9IDA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZW5jb3VudGVyZWQgYW4gdW5rbm93biBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdFx0aWYgKCB1cGRhdGUgPT09IHRydWUgKSB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGFuZ2xlcyBvZiB0aGlzIEV1bGVyIGluc3RhbmNlIGZyb20gYSBub3JtYWxpemVkIHF1YXRlcm5pb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIEEgbm9ybWFsaXplZCBRdWF0ZXJuaW9uLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW29yZGVyXSAtIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgb3JkZXIgdGhhdCB0aGUgcm90YXRpb25zIGFyZSBhcHBsaWVkLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGU9dHJ1ZV0gLSBXaGV0aGVyIHRoZSBpbnRlcm5hbCBgb25DaGFuZ2VgIGNhbGxiYWNrIHNob3VsZCBiZSBleGVjdXRlZCBvciBub3QuXG5cdCAqIEByZXR1cm4ge0V1bGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIEV1bGVyIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0RnJvbVF1YXRlcm5pb24oIHEsIG9yZGVyLCB1cGRhdGUgKSB7XG5cblx0XHRfbWF0cml4JDIubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggX21hdHJpeCQyLCBvcmRlciwgdXBkYXRlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBhbmdsZXMgb2YgdGhpcyBFdWxlciBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbb3JkZXJdIC0gQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBvcmRlciB0aGF0IHRoZSByb3RhdGlvbnMgYXJlIGFwcGxpZWQuXG5cdCAqIEByZXR1cm4ge0V1bGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIEV1bGVyIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0RnJvbVZlY3RvcjMoIHYsIG9yZGVyID0gdGhpcy5fb3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXQoIHYueCwgdi55LCB2LnosIG9yZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIGV1bGVyIGFuZ2xlIHdpdGggYSBuZXcgb3JkZXIgYnkgY3JlYXRpbmcgYSBxdWF0ZXJuaW9uIGZyb20gdGhpc1xuXHQgKiBldWxlciBhbmdsZSBhbmQgdGhlbiBzZXR0aW5nIHRoaXMgZXVsZXIgYW5nbGUgd2l0aCB0aGUgcXVhdGVybmlvbiBhbmQgdGhlXG5cdCAqIG5ldyBvcmRlci5cblx0ICpcblx0ICogV2FybmluZzogVGhpcyBkaXNjYXJkcyByZXZvbHV0aW9uIGluZm9ybWF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW25ld09yZGVyXSAtIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbmV3IG9yZGVyIHRoYXQgdGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZC5cblx0ICogQHJldHVybiB7RXVsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgRXVsZXIgaW5zdGFuY2UuXG5cdCAqL1xuXHRyZW9yZGVyKCBuZXdPcmRlciApIHtcblxuXHRcdF9xdWF0ZXJuaW9uJDMuc2V0RnJvbUV1bGVyKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUXVhdGVybmlvbiggX3F1YXRlcm5pb24kMywgbmV3T3JkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgRXVsZXIgaW5zdGFuY2UgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBpbnN0YW5jZSB0byB0ZXN0IGZvciBlcXVhbGl0eS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIEV1bGVyIGluc3RhbmNlIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gKCBldWxlci5feCA9PT0gdGhpcy5feCApICYmICggZXVsZXIuX3kgPT09IHRoaXMuX3kgKSAmJiAoIGV1bGVyLl96ID09PSB0aGlzLl96ICkgJiYgKCBldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgRXVsZXIgaW5zdGFuY2UncyBjb21wb25lbnRzIHRvIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBhcnJheS4gVGhlIGZpcnN0IHRocmVlXG5cdCAqIGVudHJpZXMgb2YgdGhlIGFycmF5IGFyZSBhc3NpZ24gdG8gdGhlIHgseSBhbmQgeiBjb21wb25lbnRzLiBBbiBvcHRpb25hbCBmb3VydGggZW50cnlcblx0ICogZGVmaW5lcyB0aGUgRXVsZXIgb3JkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyLG51bWJlcixudW1iZXIsP3N0cmluZz59IGFycmF5IC0gQW4gYXJyYXkgaG9sZGluZyB0aGUgRXVsZXIgY29tcG9uZW50IHZhbHVlcy5cblx0ICogQHJldHVybiB7RXVsZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgRXVsZXIgaW5zdGFuY2UuXG5cdCAqL1xuXHRmcm9tQXJyYXkoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5feCA9IGFycmF5WyAwIF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyAyIF07XG5cdFx0aWYgKCBhcnJheVsgMyBdICE9PSB1bmRlZmluZWQgKSB0aGlzLl9vcmRlciA9IGFycmF5WyAzIF07XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFdyaXRlcyB0aGUgY29tcG9uZW50cyBvZiB0aGlzIEV1bGVyIGluc3RhbmNlIHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsXG5cdCAqIHRoZSBtZXRob2QgcmV0dXJucyBhIG5ldyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXIsbnVtYmVyLG51bWJlcixzdHJpbmc+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSBFdWxlciBjb21wb25lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyLG51bWJlcixudW1iZXIsc3RyaW5nPn0gVGhlIEV1bGVyIGNvbXBvbmVudHMuXG5cdCAqL1xuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5feDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy5feTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5fejtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMyBdID0gdGhpcy5fb3JkZXI7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG5cdF9vbkNoYW5nZSggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0X29uQ2hhbmdlQ2FsbGJhY2soKSB7fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy5feDtcblx0XHR5aWVsZCB0aGlzLl95O1xuXHRcdHlpZWxkIHRoaXMuX3o7XG5cdFx0eWllbGQgdGhpcy5fb3JkZXI7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgRXVsZXIgYW5nbGUgb3JkZXIuXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge3N0cmluZ31cbiAqIEBkZWZhdWx0ICdYWVonXG4gKi9cbkV1bGVyLkRFRkFVTFRfT1JERVIgPSAnWFlaJztcblxuLyoqXG4gKiBBIGxheWVycyBvYmplY3QgYXNzaWducyBhbiAzRCBvYmplY3QgdG8gMSBvciBtb3JlIG9mIDMyXG4gKiBsYXllcnMgbnVtYmVyZWQgYDBgIHRvIGAzMWAgLSBpbnRlcm5hbGx5IHRoZSBsYXllcnMgYXJlIHN0b3JlZCBhcyBhXG4gKiBiaXQgbWFza10sIGFuZCBieSBkZWZhdWx0IGFsbCAzRCBvYmplY3RzIGFyZSBhIG1lbWJlciBvZiBsYXllciBgMGAuXG4gKlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBjb250cm9sIHZpc2liaWxpdHkgLSBhbiBvYmplY3QgbXVzdCBzaGFyZSBhIGxheWVyIHdpdGhcbiAqIGEgY2FtZXJhIHRvIGJlIHZpc2libGUgd2hlbiB0aGF0IGNhbWVyYSdzIHZpZXcgaXNcbiAqIHJlbmRlcmVkLlxuICpcbiAqIEFsbCBjbGFzc2VzIHRoYXQgaW5oZXJpdCBmcm9tIHtAbGluayBPYmplY3QzRH0gaGF2ZSBhbiBgbGF5ZXJzYCBwcm9wZXJ0eSB3aGljaFxuICogaXMgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcy5cbiAqL1xuY2xhc3MgTGF5ZXJzIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsYXllcnMgaW5zdGFuY2UsIHdpdGggbWVtYmVyc2hpcFxuXHQgKiBpbml0aWFsbHkgc2V0IHRvIGxheWVyIGAwYC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0LyoqXG5cdFx0ICogQSBiaXQgbWFzayBzdG9yaW5nIHdoaWNoIG9mIHRoZSAzMiBsYXllcnMgdGhpcyBsYXllcnMgb2JqZWN0IGlzIGN1cnJlbnRseVxuXHRcdCAqIGEgbWVtYmVyIG9mLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLm1hc2sgPSAxIHwgMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgbWVtYmVyc2hpcCB0byB0aGUgZ2l2ZW4gbGF5ZXIsIGFuZCByZW1vdmUgbWVtYmVyc2hpcCBhbGwgb3RoZXIgbGF5ZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gc2V0LlxuXHQgKi9cblx0c2V0KCBsYXllciApIHtcblxuXHRcdHRoaXMubWFzayA9ICggMSA8PCBsYXllciB8IDAgKSA+Pj4gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgbWVtYmVyc2hpcCBvZiB0aGUgZ2l2ZW4gbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsYXllciAtIFRoZSBsYXllciB0byBlbmFibGUuXG5cdCAqL1xuXHRlbmFibGUoIGxheWVyICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgbGF5ZXIgfCAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBtZW1iZXJzaGlwIHRvIGFsbCBsYXllcnMuXG5cdCAqL1xuXHRlbmFibGVBbGwoKSB7XG5cblx0XHR0aGlzLm1hc2sgPSAweGZmZmZmZmZmIHwgMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRvZ2dsZXMgdGhlIG1lbWJlcnNoaXAgb2YgdGhlIGdpdmVuIGxheWVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbGF5ZXIgLSBUaGUgbGF5ZXIgdG8gdG9nZ2xlLlxuXHQgKi9cblx0dG9nZ2xlKCBsYXllciApIHtcblxuXHRcdHRoaXMubWFzayBePSAxIDw8IGxheWVyIHwgMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgbWVtYmVyc2hpcCBvZiB0aGUgZ2l2ZW4gbGF5ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsYXllciAtIFRoZSBsYXllciB0byBlbmFibGUuXG5cdCAqL1xuXHRkaXNhYmxlKCBsYXllciApIHtcblxuXHRcdHRoaXMubWFzayAmPSB+ICggMSA8PCBsYXllciB8IDAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIG1lbWJlcnNoaXAgZnJvbSBhbGwgbGF5ZXJzLlxuXHQgKi9cblx0ZGlzYWJsZUFsbCgpIHtcblxuXHRcdHRoaXMubWFzayA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGFuZCB0aGUgZ2l2ZW4gbGF5ZXJzIG9iamVjdCBoYXZlIGF0IGxlYXN0IG9uZVxuXHQgKiBsYXllciBpbiBjb21tb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGF5ZXJzfSBsYXllcnMgLSBUaGUgbGF5ZXJzIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW4gfSBXaGV0aGVyIHRoaXMgYW5kIHRoZSBnaXZlbiBsYXllcnMgb2JqZWN0IGhhdmUgYXQgbGVhc3Qgb25lIGxheWVyIGluIGNvbW1vbiBvciBub3QuXG5cdCAqL1xuXHR0ZXN0KCBsYXllcnMgKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLm1hc2sgJiBsYXllcnMubWFzayApICE9PSAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGxheWVyIGlzIGVuYWJsZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsYXllciAtIFRoZSBsYXllciB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFuIH0gV2hldGhlciB0aGUgZ2l2ZW4gbGF5ZXIgaXMgZW5hYmxlZCBvciBub3QuXG5cdCAqL1xuXHRpc0VuYWJsZWQoIGxheWVyICkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXNrICYgKCAxIDw8IGxheWVyIHwgMCApICkgIT09IDA7XG5cblx0fVxuXG59XG5cbmxldCBfb2JqZWN0M0RJZCA9IDA7XG5cbmNvbnN0IF92MSQ0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ExID0gLypAX19QVVJFX18qLyBuZXcgUXVhdGVybmlvbigpO1xuY29uc3QgX20xJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfdGFyZ2V0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfcG9zaXRpb24kMyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9zY2FsZSQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24kMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcblxuY29uc3QgX3hBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuY29uc3QgX3lBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuY29uc3QgX3pBeGlzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMCwgMCwgMSApO1xuXG4vKipcbiAqIEZpcmVzIHdoZW4gdGhlIG9iamVjdCBoYXMgYmVlbiBhZGRlZCB0byBpdHMgcGFyZW50IG9iamVjdC5cbiAqXG4gKiBAZXZlbnQgT2JqZWN0M0QjYWRkZWRcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNvbnN0IF9hZGRlZEV2ZW50ID0geyB0eXBlOiAnYWRkZWQnIH07XG5cbi8qKlxuICogRmlyZXMgd2hlbiB0aGUgb2JqZWN0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBpdHMgcGFyZW50IG9iamVjdC5cbiAqXG4gKiBAZXZlbnQgT2JqZWN0M0QjcmVtb3ZlZFxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgX3JlbW92ZWRFdmVudCA9IHsgdHlwZTogJ3JlbW92ZWQnIH07XG5cbi8qKlxuICogRmlyZXMgd2hlbiBhIG5ldyBjaGlsZCBvYmplY3QgaGFzIGJlZW4gYWRkZWQuXG4gKlxuICogQGV2ZW50IE9iamVjdDNEI2NoaWxkYWRkZWRcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNvbnN0IF9jaGlsZGFkZGVkRXZlbnQgPSB7IHR5cGU6ICdjaGlsZGFkZGVkJywgY2hpbGQ6IG51bGwgfTtcblxuLyoqXG4gKiBGaXJlcyB3aGVuIGEgbmV3IGNoaWxkIG9iamVjdCBoYXMgYmVlbiBhZGRlZC5cbiAqXG4gKiBAZXZlbnQgT2JqZWN0M0QjY2hpbGRyZW1vdmVkXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jb25zdCBfY2hpbGRyZW1vdmVkRXZlbnQgPSB7IHR5cGU6ICdjaGlsZHJlbW92ZWQnLCBjaGlsZDogbnVsbCB9O1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIG1vc3Qgb2JqZWN0cyBpbiB0aHJlZS5qcyBhbmQgcHJvdmlkZXMgYSBzZXQgb2ZcbiAqIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgZm9yIG1hbmlwdWxhdGluZyBvYmplY3RzIGluIDNEIHNwYWNlLlxuICpcbiAqIEBhdWdtZW50cyBFdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgT2JqZWN0M0QgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IDNEIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNPYmplY3QzRCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgSUQgb2YgdGhlIDNEIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEBuYW1lIE9iamVjdDNEI2lkXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9vYmplY3QzRElkICsrIH0gKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBVVUlEIG9mIHRoZSAzRCBvYmplY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIDNEIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdHlwZSBwcm9wZXJ0eSBpcyB1c2VkIGZvciBkZXRlY3RpbmcgdGhlIG9iamVjdCB0eXBlXG5cdFx0ICogaW4gY29udGV4dCBvZiBzZXJpYWxpemF0aW9uL2Rlc2VyaWFsaXphdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy50eXBlID0gJ09iamVjdDNEJztcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9PYmplY3QzRH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgaG9sZGluZyB0aGUgY2hpbGQgM0Qgb2JqZWN0cyBvZiB0aGlzIGluc3RhbmNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE9iamVjdDNEPn1cblx0XHQgKi9cblx0XHR0aGlzLmNoaWxkcmVuID0gW107XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBgdXBgIGRpcmVjdGlvbiBvZiB0aGUgM0Qgb2JqZWN0IHdoaWNoIGluZmx1ZW5jZXNcblx0XHQgKiB0aGUgb3JpZW50YXRpb24gdmlhIG1ldGhvZHMgbGlrZSB7QGxpbmsgT2JqZWN0M0QjbG9va0F0fS5cblx0XHQgKlxuXHRcdCAqIFRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIDNEIG9iamVjdHMgaXMgZGVmaW5lZCBieSBgT2JqZWN0M0QuREVGQVVMVF9VUGAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnVwID0gT2JqZWN0M0QuREVGQVVMVF9VUC5jbG9uZSgpO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHJvdGF0aW9uID0gbmV3IEV1bGVyKCk7XG5cdFx0Y29uc3QgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0Y29uc3Qgc2NhbGUgPSBuZXcgVmVjdG9yMyggMSwgMSwgMSApO1xuXG5cdFx0ZnVuY3Rpb24gb25Sb3RhdGlvbkNoYW5nZSgpIHtcblxuXHRcdFx0cXVhdGVybmlvbi5zZXRGcm9tRXVsZXIoIHJvdGF0aW9uLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25RdWF0ZXJuaW9uQ2hhbmdlKCkge1xuXG5cdFx0XHRyb3RhdGlvbi5zZXRGcm9tUXVhdGVybmlvbiggcXVhdGVybmlvbiwgdW5kZWZpbmVkLCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0cm90YXRpb24uX29uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XG5cdFx0cXVhdGVybmlvbi5fb25DaGFuZ2UoIG9uUXVhdGVybmlvbkNoYW5nZSApO1xuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMsIHtcblx0XHRcdC8qKlxuXHRcdFx0ICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgbG9jYWwgcG9zaXRpb24uXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgT2JqZWN0M0QjcG9zaXRpb25cblx0XHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdFx0ICovXG5cdFx0XHRwb3NpdGlvbjoge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBwb3NpdGlvblxuXHRcdFx0fSxcblx0XHRcdC8qKlxuXHRcdFx0ICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgbG9jYWwgcm90YXRpb24gYXMgRXVsZXIgYW5nbGVzLCBpbiByYWRpYW5zLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBuYW1lIE9iamVjdDNEI3JvdGF0aW9uXG5cdFx0XHQgKiBAdHlwZSB7RXVsZXJ9XG5cdFx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0XHQgKi9cblx0XHRcdHJvdGF0aW9uOiB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHJvdGF0aW9uXG5cdFx0XHR9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZXByZXNlbnRzIHRoZSBvYmplY3QncyBsb2NhbCByb3RhdGlvbiBhcyBRdWF0ZXJuaW9ucy5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBPYmplY3QzRCNxdWF0ZXJuaW9uXG5cdFx0XHQgKiBAdHlwZSB7UXVhdGVybmlvbn1cblx0XHRcdCAqL1xuXHRcdFx0cXVhdGVybmlvbjoge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdHZhbHVlOiBxdWF0ZXJuaW9uXG5cdFx0XHR9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZXByZXNlbnRzIHRoZSBvYmplY3QncyBsb2NhbCBzY2FsZS5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBPYmplY3QzRCNzY2FsZVxuXHRcdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0XHQgKiBAZGVmYXVsdCAoMSwxLDEpXG5cdFx0XHQgKi9cblx0XHRcdHNjYWxlOiB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0dmFsdWU6IHNjYWxlXG5cdFx0XHR9LFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBSZXByZXNlbnRzIHRoZSBvYmplY3QncyBtb2RlbC12aWV3IG1hdHJpeC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBPYmplY3QzRCNtb2RlbFZpZXdNYXRyaXhcblx0XHRcdCAqIEB0eXBlIHtNYXRyaXg0fVxuXHRcdFx0ICovXG5cdFx0XHRtb2RlbFZpZXdNYXRyaXg6IHtcblx0XHRcdFx0dmFsdWU6IG5ldyBNYXRyaXg0KClcblx0XHRcdH0sXG5cdFx0XHQvKipcblx0XHRcdCAqIFJlcHJlc2VudHMgdGhlIG9iamVjdCdzIG5vcm1hbCBtYXRyaXguXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgT2JqZWN0M0Qjbm9ybWFsTWF0cml4XG5cdFx0XHQgKiBAdHlwZSB7TWF0cml4M31cblx0XHRcdCAqL1xuXHRcdFx0bm9ybWFsTWF0cml4OiB7XG5cdFx0XHRcdHZhbHVlOiBuZXcgTWF0cml4MygpXG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgdHJhbnNmb3JtYXRpb24gbWF0cml4IGluIGxvY2FsIHNwYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hdHJpeDR9XG5cdFx0ICovXG5cdFx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgb2JqZWN0J3MgdHJhbnNmb3JtYXRpb24gbWF0cml4IGluIHdvcmxkIHNwYWNlLlxuXHRcdCAqIElmIHRoZSAzRCBvYmplY3QgaGFzIG5vIHBhcmVudCwgdGhlbiBpdCdzIGlkZW50aWNhbCB0byB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4XG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TWF0cml4NH1cblx0XHQgKi9cblx0XHR0aGlzLm1hdHJpeFdvcmxkID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIGVuZ2luZSBhdXRvbWF0aWNhbGx5IGNvbXB1dGVzIHRoZSBsb2NhbCBtYXRyaXggZnJvbSBwb3NpdGlvbixcblx0XHQgKiByb3RhdGlvbiBhbmQgc2NhbGUgZXZlcnkgZnJhbWUuXG5cdFx0ICpcblx0XHQgKiBUaGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCAzRCBvYmplY3RzIGlzIGRlZmluZWQgYnkgYE9iamVjdDNELkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5ERUZBVUxUX01BVFJJWF9BVVRPX1VQREFURTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIGVuZ2luZSBhdXRvbWF0aWNhbGx5IGNvbXB1dGVzIHRoZSB3b3JsZCBtYXRyaXggZnJvbSB0aGUgY3VycmVudCBsb2NhbFxuXHRcdCAqIG1hdHJpeCBhbmQgdGhlIG9iamVjdCdzIHRyYW5zZm9ybWF0aW9uIGhpZXJhcmNoeS5cblx0XHQgKlxuXHRcdCAqIFRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIDNEIG9iamVjdHMgaXMgZGVmaW5lZCBieSBgT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEVgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMubWF0cml4V29ybGRBdXRvVXBkYXRlID0gT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEU7IC8vIGNoZWNrZWQgYnkgdGhlIHJlbmRlcmVyXG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGl0IGNhbGN1bGF0ZXMgdGhlIHdvcmxkIG1hdHJpeCBpbiB0aGF0IGZyYW1lIGFuZCByZXNldHMgdGhpcyBwcm9wZXJ0eVxuXHRcdCAqIHRvIGBmYWxzZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxheWVyIG1lbWJlcnNoaXAgb2YgdGhlIDNEIG9iamVjdC4gVGhlIDNEIG9iamVjdCBpcyBvbmx5IHZpc2libGUgaWYgaXQgaGFzXG5cdFx0ICogYXQgbGVhc3Qgb25lIGxheWVyIGluIGNvbW1vbiB3aXRoIHRoZSBjYW1lcmEgaW4gdXNlLiBUaGlzIHByb3BlcnR5IGNhbiBhbHNvIGJlXG5cdFx0ICogdXNlZCB0byBmaWx0ZXIgb3V0IHVud2FudGVkIG9iamVjdHMgaW4gcmF5LWludGVyc2VjdGlvbiB0ZXN0cyB3aGVuIHVzaW5nIHtAbGluayBSYXljYXN0ZXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0xheWVyc31cblx0XHQgKi9cblx0XHR0aGlzLmxheWVycyA9IG5ldyBMYXllcnMoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIDNEIG9iamVjdCBnZXRzIHJlbmRlcmVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMudmlzaWJsZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSAzRCBvYmplY3QgZ2V0cyByZW5kZXJlZCBpbnRvIHNoYWRvdyBtYXBzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmNhc3RTaGFkb3cgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIDNEIG9iamVjdCBpcyBhZmZlY3RlZCBieSBzaGFkb3dzIGluIHRoZSBzY2VuZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIHRoZSAzRCBvYmplY3QgaXMgaG9ub3JlZCBieSB2aWV3IGZydXN0dW0gY3VsbGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyB2YWx1ZSBhbGxvd3MgdGhlIGRlZmF1bHQgcmVuZGVyaW5nIG9yZGVyIG9mIHNjZW5lIGdyYXBoIG9iamVjdHMgdG8gYmVcblx0XHQgKiBvdmVycmlkZGVuIGFsdGhvdWdoIG9wYXF1ZSBhbmQgdHJhbnNwYXJlbnQgb2JqZWN0cyByZW1haW4gc29ydGVkIGluZGVwZW5kZW50bHkuXG5cdFx0ICogV2hlbiB0aGlzIHByb3BlcnR5IGlzIHNldCBmb3IgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEdyb3VwfSxhbGwgZGVzY2VuZGFudHNcblx0XHQgKiBvYmplY3RzIHdpbGwgYmUgc29ydGVkIGFuZCByZW5kZXJlZCB0b2dldGhlci4gU29ydGluZyBpcyBmcm9tIGxvd2VzdCB0byBoaWdoZXN0XG5cdFx0ICogcmVuZGVyIG9yZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJPcmRlciA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBob2xkaW5nIHRoZSBhbmltYXRpb24gY2xpcHMgb2YgdGhlIDNEIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxBbmltYXRpb25DbGlwPn1cblx0XHQgKi9cblx0XHR0aGlzLmFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1c3RvbSBkZXB0aCBtYXRlcmlhbCB0byBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIHRvIHRoZSBkZXB0aCBtYXAuIENhbiBvbmx5IGJlIHVzZWRcblx0XHQgKiBpbiBjb250ZXh0IG9mIG1lc2hlcy4gV2hlbiBzaGFkb3ctY2FzdGluZyB3aXRoIGEge0BsaW5rIERpcmVjdGlvbmFsTGlnaHR9IG9yIHtAbGluayBTcG90TGlnaHR9LFxuXHRcdCAqIGlmIHlvdSBhcmUgbW9kaWZ5aW5nIHZlcnRleCBwb3NpdGlvbnMgaW4gdGhlIHZlcnRleCBzaGFkZXIgeW91IG11c3Qgc3BlY2lmeSBhIGN1c3RvbSBkZXB0aFxuXHRcdCAqIG1hdGVyaWFsIGZvciBwcm9wZXIgc2hhZG93cy5cblx0XHQgKlxuXHRcdCAqIE9ubHkgcmVsZXZhbnQgaW4gY29udGV4dCBvZiB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE1hdGVyaWFsfHVuZGVmaW5lZCl9XG5cdFx0ICogQGRlZmF1bHQgdW5kZWZpbmVkXG5cdFx0ICovXG5cdFx0dGhpcy5jdXN0b21EZXB0aE1hdGVyaWFsID0gdW5kZWZpbmVkO1xuXG5cdFx0LyoqXG5cdFx0ICogU2FtZSBhcyB7QGxpbmsgT2JqZWN0M0QjY3VzdG9tRGVwdGhNYXRlcmlhbH0sIGJ1dCB1c2VkIHdpdGgge0BsaW5rIFBvaW50TGlnaHR9LlxuXHRcdCAqXG5cdFx0ICogT25seSByZWxldmFudCBpbiBjb250ZXh0IG9mIHtAbGluayBXZWJHTFJlbmRlcmVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTWF0ZXJpYWx8dW5kZWZpbmVkKX1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLmN1c3RvbURpc3RhbmNlTWF0ZXJpYWwgPSB1bmRlZmluZWQ7XG5cblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBjdXN0b20gZGF0YSBhYm91dCB0aGUgM0Qgb2JqZWN0LiBJdFxuXHRcdCAqIHNob3VsZCBub3QgaG9sZCByZWZlcmVuY2VzIHRvIGZ1bmN0aW9ucyBhcyB0aGVzZSB3aWxsIG5vdCBiZSBjbG9uZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseSBiZWZvcmUgYSAzRCBvYmplY3QgaXMgcmVuZGVyZWQgdG8gYSBzaGFkb3cgbWFwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfFdlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtDYW1lcmF9IHNoYWRvd0NhbWVyYSAtIFRoZSBzaGFkb3cgY2FtZXJhLlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSAzRCBvYmplY3QncyBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbH0gZGVwdGhNYXRlcmlhbCAtIFRoZSBkZXB0aCBtYXRlcmlhbC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGdyb3VwIC0gVGhlIGdlb21ldHJ5IGdyb3VwIGRhdGEuXG5cdCAqL1xuXHRvbkJlZm9yZVNoYWRvdyggLyogcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0LyoqXG5cdCAqIEEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseSBhZnRlciBhIDNEIG9iamVjdCBpcyByZW5kZXJlZCB0byBhIHNoYWRvdyBtYXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmVuZGVyZXJ8V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRoYXQgaXMgdXNlZCB0byByZW5kZXIgdGhlIHNjZW5lLlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gc2hhZG93Q2FtZXJhIC0gVGhlIHNoYWRvdyBjYW1lcmEuXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIDNEIG9iamVjdCdzIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfSBkZXB0aE1hdGVyaWFsIC0gVGhlIGRlcHRoIG1hdGVyaWFsLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZ3JvdXAgLSBUaGUgZ2VvbWV0cnkgZ3JvdXAgZGF0YS5cblx0ICovXG5cdG9uQWZ0ZXJTaGFkb3coIC8qIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgZ3JvdXAgKi8gKSB7fVxuXG5cdC8qKlxuXHQgKiBBIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgaW1tZWRpYXRlbHkgYmVmb3JlIGEgM0Qgb2JqZWN0IGlzIHJlbmRlcmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JlbmRlcmVyfFdlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGF0IGlzIHVzZWQgdG8gcmVuZGVyIHRoZSBzY2VuZS5cblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gZ2VvbWV0cnkgLSBUaGUgM0Qgb2JqZWN0J3MgZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx9IG1hdGVyaWFsIC0gVGhlIDNEIG9iamVjdCdzIG1hdGVyaWFsLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZ3JvdXAgLSBUaGUgZ2VvbWV0cnkgZ3JvdXAgZGF0YS5cblx0ICovXG5cdG9uQmVmb3JlUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0LyoqXG5cdCAqIEEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseSBhZnRlciBhIDNEIG9iamVjdCBpcyByZW5kZXJlZC5cblx0ICpcblx0ICogQHBhcmFtIHtSZW5kZXJlcnxXZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdGhhdCBpcyB1c2VkIHRvIHJlbmRlciB0aGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIDNEIG9iamVjdCdzIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCAtIFRoZSAzRCBvYmplY3QncyBtYXRlcmlhbC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGdyb3VwIC0gVGhlIGdlb21ldHJ5IGdyb3VwIGRhdGEuXG5cdCAqL1xuXHRvbkFmdGVyUmVuZGVyKCAvKiByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCAqLyApIHt9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIGdpdmVuIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byB0aGUgb2JqZWN0IGFuZCB1cGRhdGVzIHRoZSBvYmplY3QncyBwb3NpdGlvbixcblx0ICogcm90YXRpb24gYW5kIHNjYWxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG5cdCAqL1xuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdHRoaXMubWF0cml4LnByZW11bHRpcGx5KCBtYXRyaXggKTtcblxuXHRcdHRoaXMubWF0cml4LmRlY29tcG9zZSggdGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIGEgcm90YXRpb24gcmVwcmVzZW50ZWQgYnkgZ2l2ZW4gdGhlIHF1YXRlcm5pb24gdG8gdGhlIDNEIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxIC0gVGhlIHF1YXRlcm5pb24uXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YXBwbHlRdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIHJvdGF0aW9uIHJlcHJlc2VudGVkIGFzIGFuIGF4aXMvYW5nbGUgY291cGxlIHRvIHRoZSAzRCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYXhpcyAtIFRoZSAobm9ybWFsaXplZCkgYXhpcyB2ZWN0b3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKi9cblx0c2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIHJvdGF0aW9uIHJlcHJlc2VudGVkIGFzIEV1bGVyIGFuZ2xlcyB0byB0aGUgM0Qgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V1bGVyfSBldWxlciAtIFRoZSBFdWxlciBhbmdsZXMuXG5cdCAqL1xuXHRzZXRSb3RhdGlvbkZyb21FdWxlciggZXVsZXIgKSB7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciwgdHJ1ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gcm90YXRpb24gcmVwcmVzZW50ZWQgYXMgcm90YXRpb24gbWF0cml4IHRvIHRoZSAzRCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIEFsdGhvdWdoIGEgNHg0IG1hdHJpeCBpcyBleHBlY3RlZCwgdGhlIHVwcGVyIDN4MyBwb3J0aW9uIG11c3QgYmVcblx0ICogYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZCkuXG5cdCAqL1xuXHRzZXRSb3RhdGlvbkZyb21NYXRyaXgoIG0gKSB7XG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21Sb3RhdGlvbk1hdHJpeCggbSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gcm90YXRpb24gcmVwcmVzZW50ZWQgYXMgYSBRdWF0ZXJuaW9uIHRvIHRoZSAzRCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBRdWF0ZXJuaW9uXG5cdCAqL1xuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCBxICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBxIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHRoaXMucXVhdGVybmlvbi5jb3B5KCBxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYWxvbmcgYW4gYXhpcyBpbiBsb2NhbCBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBheGlzIC0gVGhlIChub3JtYWxpemVkKSBheGlzIHZlY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0cm90YXRlT25BeGlzKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBvYmplY3Qgb24gYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0X3ExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24ubXVsdGlwbHkoIF9xMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYWxvbmcgYW4gYXhpcyBpbiB3b3JsZCBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBheGlzIC0gVGhlIChub3JtYWxpemVkKSBheGlzIHZlY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0cm90YXRlT25Xb3JsZEF4aXMoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIHdvcmxkIHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblx0XHQvLyBtZXRob2QgYXNzdW1lcyBubyByb3RhdGVkIHBhcmVudFxuXG5cdFx0X3ExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIF9xMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYXJvdW5kIGl0cyBYIGF4aXMgaW4gbG9jYWwgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHJvdGF0ZVgoIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfeEF4aXMsIGFuZ2xlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYXJvdW5kIGl0cyBZIGF4aXMgaW4gbG9jYWwgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHJvdGF0ZVkoIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfeUF4aXMsIGFuZ2xlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSAzRCBvYmplY3QgYXJvdW5kIGl0cyBaIGF4aXMgaW4gbG9jYWwgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHJvdGF0ZVooIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfekF4aXMsIGFuZ2xlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2xhdGUgdGhlIDNEIG9iamVjdCBieSBhIGRpc3RhbmNlIGFsb25nIHRoZSBnaXZlbiBheGlzIGluIGxvY2FsIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGF4aXMgLSBUaGUgKG5vcm1hbGl6ZWQpIGF4aXMgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgLSBUaGUgZGlzdGFuY2UgaW4gd29ybGQgdW5pdHMuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0dHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIHtcblxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2Vcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0X3YxJDQuY29weSggYXhpcyApLmFwcGx5UXVhdGVybmlvbiggdGhpcy5xdWF0ZXJuaW9uICk7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmFkZCggX3YxJDQubXVsdGlwbHlTY2FsYXIoIGRpc3RhbmNlICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNsYXRlIHRoZSAzRCBvYmplY3QgYnkgYSBkaXN0YW5jZSBhbG9uZyBpdHMgWC1heGlzIGluIGxvY2FsIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgLSBUaGUgZGlzdGFuY2UgaW4gd29ybGQgdW5pdHMuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0dHJhbnNsYXRlWCggZGlzdGFuY2UgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIF94QXhpcywgZGlzdGFuY2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zbGF0ZSB0aGUgM0Qgb2JqZWN0IGJ5IGEgZGlzdGFuY2UgYWxvbmcgaXRzIFktYXhpcyBpbiBsb2NhbCBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIC0gVGhlIGRpc3RhbmNlIGluIHdvcmxkIHVuaXRzLlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHRyYW5zbGF0ZVkoIGRpc3RhbmNlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKCBfeUF4aXMsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2xhdGUgdGhlIDNEIG9iamVjdCBieSBhIGRpc3RhbmNlIGFsb25nIGl0cyBaLWF4aXMgaW4gbG9jYWwgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBpbiB3b3JsZCB1bml0cy5cblx0ICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHR0cmFuc2xhdGVaKCBkaXN0YW5jZSApIHtcblxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggX3pBeGlzLCBkaXN0YW5jZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHZlY3RvciBmcm9tIHRoaXMgM0Qgb2JqZWN0J3MgbG9jYWwgc3BhY2UgdG8gd29ybGQgc3BhY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdmVjdG9yIC0gVGhlIHZlY3RvciB0byBjb252ZXJ0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgY29udmVydGVkIHZlY3Rvci5cblx0ICovXG5cdGxvY2FsVG9Xb3JsZCggdmVjdG9yICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhpcyAzRCBvYmplY3QncyB3b3JkIHNwYWNlIHRvIGxvY2FsIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHZlY3RvciAtIFRoZSB2ZWN0b3IgdG8gY29udmVydC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNvbnZlcnRlZCB2ZWN0b3IuXG5cdCAqL1xuXHR3b3JsZFRvTG9jYWwoIHZlY3RvciApIHtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggX20xJDEuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSBvYmplY3QgdG8gZmFjZSBhIHBvaW50IGluIHdvcmxkIHNwYWNlLlxuXHQgKlxuXHQgKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIHBhcmVudChzKS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ8VmVjdG9yM30geCAtIFRoZSB4IGNvb3JkaW5hdGUgaW4gd29ybGQgc3BhY2UuIEFsdGVybmF0aXZlbHksIGEgdmVjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIGluIHdvcmxkIHNwYWNlXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbeV0gLSBUaGUgeSBjb29yZGluYXRlIGluIHdvcmxkIHNwYWNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3pdIC0gVGhlIHogY29vcmRpbmF0ZSBpbiB3b3JsZCBzcGFjZS5cblx0ICovXG5cdGxvb2tBdCggeCwgeSwgeiApIHtcblxuXHRcdC8vIFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0cyBoYXZpbmcgbm9uLXVuaWZvcm1seS1zY2FsZWQgcGFyZW50KHMpXG5cblx0XHRpZiAoIHguaXNWZWN0b3IzICkge1xuXG5cdFx0XHRfdGFyZ2V0LmNvcHkoIHggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90YXJnZXQuc2V0KCB4LCB5LCB6ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRfcG9zaXRpb24kMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdGlmICggdGhpcy5pc0NhbWVyYSB8fCB0aGlzLmlzTGlnaHQgKSB7XG5cblx0XHRcdF9tMSQxLmxvb2tBdCggX3Bvc2l0aW9uJDMsIF90YXJnZXQsIHRoaXMudXAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9tMSQxLmxvb2tBdCggX3RhcmdldCwgX3Bvc2l0aW9uJDMsIHRoaXMudXAgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7XG5cblx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0X20xJDEuZXh0cmFjdFJvdGF0aW9uKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdF9xMS5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7XG5cdFx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIF9xMS5pbnZlcnQoKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gM0Qgb2JqZWN0IGFzIGEgY2hpbGQgdG8gdGhpcyAzRCBvYmplY3QuIEFuIGFyYml0cmFyeSBudW1iZXIgb2Zcblx0ICogb2JqZWN0cyBtYXkgYmUgYWRkZWQuIEFueSBjdXJyZW50IHBhcmVudCBvbiBhbiBvYmplY3QgcGFzc2VkIGluIGhlcmUgd2lsbCBiZVxuXHQgKiByZW1vdmVkLCBzaW5jZSBhbiBvYmplY3QgY2FuIGhhdmUgYXQgbW9zdCBvbmUgcGFyZW50LlxuXHQgKlxuXHQgKiBAZmlyZXMgT2JqZWN0M0QjYWRkZWRcblx0ICogQGZpcmVzIE9iamVjdDNEI2NoaWxkYWRkZWRcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byBhZGQuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YWRkKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYWRkKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QgPT09IHRoaXMgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBjYW5cXCd0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgaXRzZWxmLicsIG9iamVjdCApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdCAmJiBvYmplY3QuaXNPYmplY3QzRCApIHtcblxuXHRcdFx0b2JqZWN0LnJlbW92ZUZyb21QYXJlbnQoKTtcblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuXHRcdFx0dGhpcy5jaGlsZHJlbi5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIF9hZGRlZEV2ZW50ICk7XG5cblx0XHRcdF9jaGlsZGFkZGVkRXZlbnQuY2hpbGQgPSBvYmplY3Q7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGlsZGFkZGVkRXZlbnQgKTtcblx0XHRcdF9jaGlsZGFkZGVkRXZlbnQuY2hpbGQgPSBudWxsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC4nLCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgZ2l2ZW4gM0Qgb2JqZWN0IGFzIGNoaWxkIGZyb20gdGhpcyAzRCBvYmplY3QuXG5cdCAqIEFuIGFyYml0cmFyeSBudW1iZXIgb2Ygb2JqZWN0cyBtYXkgYmUgcmVtb3ZlZC5cblx0ICpcblx0ICogQGZpcmVzIE9iamVjdDNEI3JlbW92ZWRcblx0ICogQGZpcmVzIE9iamVjdDNEI2NoaWxkcmVtb3ZlZFxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0IHRvIHJlbW92ZS5cblx0ICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRyZW1vdmUoIG9iamVjdCApIHtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5yZW1vdmUoIGFyZ3VtZW50c1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZiggb2JqZWN0ICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtMSApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0b2JqZWN0LmRpc3BhdGNoRXZlbnQoIF9yZW1vdmVkRXZlbnQgKTtcblxuXHRcdFx0X2NoaWxkcmVtb3ZlZEV2ZW50LmNoaWxkID0gb2JqZWN0O1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hpbGRyZW1vdmVkRXZlbnQgKTtcblx0XHRcdF9jaGlsZHJlbW92ZWRFdmVudC5jaGlsZCA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhpcyAzRCBvYmplY3QgZnJvbSBpdHMgY3VycmVudCBwYXJlbnQuXG5cdCAqXG5cdCAqIEBmaXJlcyBPYmplY3QzRCNyZW1vdmVkXG5cdCAqIEBmaXJlcyBPYmplY3QzRCNjaGlsZHJlbW92ZWRcblx0ICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRyZW1vdmVGcm9tUGFyZW50KCkge1xuXG5cdFx0Y29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRpZiAoIHBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0cGFyZW50LnJlbW92ZSggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGFsbCBjaGlsZCBvYmplY3RzLlxuXHQgKlxuXHQgKiBAZmlyZXMgT2JqZWN0M0QjcmVtb3ZlZFxuXHQgKiBAZmlyZXMgT2JqZWN0M0QjY2hpbGRyZW1vdmVkXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xlYXIoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoIC4uLiB0aGlzLmNoaWxkcmVuICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiAzRCBvYmplY3QgYXMgYSBjaGlsZCBvZiB0aGlzIDNEIG9iamVjdCwgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIG9iamVjdCdzIHdvcmxkXG5cdCAqIHRyYW5zZm9ybS4gVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBzY2VuZSBncmFwaHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIG5vZGVzKHMpLlxuXHQgKlxuXHQgKiBAZmlyZXMgT2JqZWN0M0QjYWRkZWRcblx0ICogQGZpcmVzIE9iamVjdDNEI2NoaWxkYWRkZWRcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byBhdHRhY2guXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YXR0YWNoKCBvYmplY3QgKSB7XG5cblx0XHQvLyBhZGRzIG9iamVjdCBhcyBhIGNoaWxkIG9mIHRoaXMsIHdoaWxlIG1haW50YWluaW5nIHRoZSBvYmplY3QncyB3b3JsZCB0cmFuc2Zvcm1cblxuXHRcdC8vIE5vdGU6IFRoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgc2NlbmUgZ3JhcGhzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBub2RlcyhzKVxuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdF9tMSQxLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdGlmICggb2JqZWN0LnBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0b2JqZWN0LnBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdFx0X20xJDEubXVsdGlwbHkoIG9iamVjdC5wYXJlbnQubWF0cml4V29ybGQgKTtcblxuXHRcdH1cblxuXHRcdG9iamVjdC5hcHBseU1hdHJpeDQoIF9tMSQxICk7XG5cblx0XHRvYmplY3QucmVtb3ZlRnJvbVBhcmVudCgpO1xuXHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xuXHRcdHRoaXMuY2hpbGRyZW4ucHVzaCggb2JqZWN0ICk7XG5cblx0XHRvYmplY3QudXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7XG5cblx0XHRvYmplY3QuZGlzcGF0Y2hFdmVudCggX2FkZGVkRXZlbnQgKTtcblxuXHRcdF9jaGlsZGFkZGVkRXZlbnQuY2hpbGQgPSBvYmplY3Q7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hpbGRhZGRlZEV2ZW50ICk7XG5cdFx0X2NoaWxkYWRkZWRFdmVudC5jaGlsZCA9IG51bGw7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlYXJjaGVzIHRocm91Z2ggdGhlIDNEIG9iamVjdCBhbmQgaXRzIGNoaWxkcmVuLCBzdGFydGluZyB3aXRoIHRoZSAzRCBvYmplY3Rcblx0ICogaXRzZWxmLCBhbmQgcmV0dXJucyB0aGUgZmlyc3Qgd2l0aCBhIG1hdGNoaW5nIElELlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaWQgLSBUaGUgaWQuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfHVuZGVmaW5lZH0gVGhlIGZvdW5kIDNEIG9iamVjdC4gUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBubyAzRCBvYmplY3QgaGFzIGJlZW4gZm91bmQuXG5cdCAqL1xuXHRnZXRPYmplY3RCeUlkKCBpZCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoICdpZCcsIGlkICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2hlcyB0aHJvdWdoIHRoZSAzRCBvYmplY3QgYW5kIGl0cyBjaGlsZHJlbiwgc3RhcnRpbmcgd2l0aCB0aGUgM0Qgb2JqZWN0XG5cdCAqIGl0c2VsZiwgYW5kIHJldHVybnMgdGhlIGZpcnN0IHdpdGggYSBtYXRjaGluZyBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lLlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRHx1bmRlZmluZWR9IFRoZSBmb3VuZCAzRCBvYmplY3QuIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgbm8gM0Qgb2JqZWN0IGhhcyBiZWVuIGZvdW5kLlxuXHQgKi9cblx0Z2V0T2JqZWN0QnlOYW1lKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ25hbWUnLCBuYW1lICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2hlcyB0aHJvdWdoIHRoZSAzRCBvYmplY3QgYW5kIGl0cyBjaGlsZHJlbiwgc3RhcnRpbmcgd2l0aCB0aGUgM0Qgb2JqZWN0XG5cdCAqIGl0c2VsZiwgYW5kIHJldHVybnMgdGhlIGZpcnN0IHdpdGggYSBtYXRjaGluZyBwcm9wZXJ0eSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG5cdCAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIFRoZSB2YWx1ZS5cblx0ICogQHJldHVybiB7T2JqZWN0M0R8dW5kZWZpbmVkfSBUaGUgZm91bmQgM0Qgb2JqZWN0LiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vIDNEIG9iamVjdCBoYXMgYmVlbiBmb3VuZC5cblx0ICovXG5cdGdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzWyBuYW1lIF0gPT09IHZhbHVlICkgcmV0dXJuIHRoaXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlblsgaSBdO1xuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gY2hpbGQuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2VhcmNoZXMgdGhyb3VnaCB0aGUgM0Qgb2JqZWN0IGFuZCBpdHMgY2hpbGRyZW4sIHN0YXJ0aW5nIHdpdGggdGhlIDNEIG9iamVjdFxuXHQgKiBpdHNlbGYsIGFuZCByZXR1cm5zIGFsbCAzRCBvYmplY3RzIHdpdGggYSBtYXRjaGluZyBwcm9wZXJ0eSB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkuXG5cdCAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIFRoZSB2YWx1ZS5cblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3QzRD59IHJlc3VsdCAtIFRoZSBtZXRob2Qgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8T2JqZWN0M0Q+fSBUaGUgZm91bmQgM0Qgb2JqZWN0cy5cblx0ICovXG5cdGdldE9iamVjdHNCeVByb3BlcnR5KCBuYW1lLCB2YWx1ZSwgcmVzdWx0ID0gW10gKSB7XG5cblx0XHRpZiAoIHRoaXNbIG5hbWUgXSA9PT0gdmFsdWUgKSByZXN1bHQucHVzaCggdGhpcyApO1xuXG5cdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y2hpbGRyZW5bIGkgXS5nZXRPYmplY3RzQnlQcm9wZXJ0eSggbmFtZSwgdmFsdWUsIHJlc3VsdCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgM0Qgb2JqZWN0IGluIHdvcmxkIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgc3RvcmVkIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgM0Qgb2JqZWN0J3MgcG9zaXRpb24gaW4gd29ybGQgc3BhY2UuXG5cdCAqL1xuXHRnZXRXb3JsZFBvc2l0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBRdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIDNEIG9iamVjdCBpbiB3b3JsZCBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtRdWF0ZXJuaW9ufSB0YXJnZXQgLSBUaGUgdGFyZ2V0IFF1YXRlcm5pb24gdGhlIHJlc3VsdCBpcyBzdG9yZWQgdG8uXG5cdCAqIEByZXR1cm4ge1F1YXRlcm5pb259IFRoZSAzRCBvYmplY3QncyByb3RhdGlvbiBpbiB3b3JsZCBzcGFjZS5cblx0ICovXG5cdGdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMywgdGFyZ2V0LCBfc2NhbGUkMiApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBzY2FsZSBvZiB0aGUgM0Qgb2JqZWN0IGluIHdvcmxkIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgc3RvcmVkIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgM0Qgb2JqZWN0J3Mgc2NhbGUgaW4gd29ybGQgc3BhY2UuXG5cdCAqL1xuXHRnZXRXb3JsZFNjYWxlKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiQzLCBfcXVhdGVybmlvbiQyLCB0YXJnZXQgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgKFwibG9va1wiKSBkaXJlY3Rpb24gb2YgdGhlIDNEIG9iamVjdCBpbiB3b3JsZCBzcGFjZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHN0b3JlZCB0by5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIDNEIG9iamVjdCdzIGRpcmVjdGlvbiBpbiB3b3JsZCBzcGFjZS5cblx0ICovXG5cdGdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0Y29uc3QgZSA9IHRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggZVsgOCBdLCBlWyA5IF0sIGVbIDEwIF0gKS5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFic3RyYWN0IG1ldGhvZCB0byBnZXQgaW50ZXJzZWN0aW9ucyBiZXR3ZWVuIGEgY2FzdGVkIHJheSBhbmQgdGhpc1xuXHQgKiAzRCBvYmplY3QuIFJlbmRlcmFibGUgM0Qgb2JqZWN0cyBzdWNoIGFzIHtAbGluayBNZXNofSwge0BsaW5rIExpbmV9IG9yIHtAbGluayBQb2ludHN9XG5cdCAqIGltcGxlbWVudCB0aGlzIG1ldGhvZCBpbiBvcmRlciB0byB1c2UgcmF5Y2FzdGluZy5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7UmF5Y2FzdGVyfSByYXljYXN0ZXIgLSBUaGUgcmF5Y2FzdGVyLlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGludGVyc2VjdHMgLSBBbiBhcnJheSBob2xkaW5nIHRoZSByZXN1bHQgb2YgdGhlIG1ldGhvZC5cblx0ICovXG5cdHJheWNhc3QoIC8qIHJheWNhc3RlciwgaW50ZXJzZWN0cyAqLyApIHt9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGVzIHRoZSBjYWxsYmFjayBvbiB0aGlzIDNEIG9iamVjdCBhbmQgYWxsIGRlc2NlbmRhbnRzLlxuXHQgKlxuXHQgKiBOb3RlOiBNb2RpZnlpbmcgdGhlIHNjZW5lIGdyYXBoIGluc2lkZSB0aGUgY2FsbGJhY2sgaXMgZGlzY291cmFnZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGFsbG93cyB0byBwcm9jZXNzIHRoZSBjdXJyZW50IDNEIG9iamVjdC5cblx0ICovXG5cdHRyYXZlcnNlKCBjYWxsYmFjayApIHtcblxuXHRcdGNhbGxiYWNrKCB0aGlzICk7XG5cblx0XHRjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogTGlrZSB7QGxpbmsgT2JqZWN0M0QjdHJhdmVyc2V9LCBidXQgdGhlIGNhbGxiYWNrIHdpbGwgb25seSBiZSBleGVjdXRlZCBmb3IgdmlzaWJsZSAzRCBvYmplY3RzLlxuXHQgKiBEZXNjZW5kYW50cyBvZiBpbnZpc2libGUgM0Qgb2JqZWN0cyBhcmUgbm90IHRyYXZlcnNlZC5cblx0ICpcblx0ICogTm90ZTogTW9kaWZ5aW5nIHRoZSBzY2VuZSBncmFwaCBpbnNpZGUgdGhlIGNhbGxiYWNrIGlzIGRpc2NvdXJhZ2VkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdG8gcHJvY2VzcyB0aGUgY3VycmVudCAzRCBvYmplY3QuXG5cdCAqL1xuXHR0cmF2ZXJzZVZpc2libGUoIGNhbGxiYWNrICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNoaWxkcmVuWyBpIF0udHJhdmVyc2VWaXNpYmxlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogTGlrZSB7QGxpbmsgT2JqZWN0M0QjdHJhdmVyc2V9LCBidXQgdGhlIGNhbGxiYWNrIHdpbGwgb25seSBiZSBleGVjdXRlZCBmb3IgYWxsIGFuY2VzdG9ycy5cblx0ICpcblx0ICogTm90ZTogTW9kaWZ5aW5nIHRoZSBzY2VuZSBncmFwaCBpbnNpZGUgdGhlIGNhbGxiYWNrIGlzIGRpc2NvdXJhZ2VkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdG8gcHJvY2VzcyB0aGUgY3VycmVudCAzRCBvYmplY3QuXG5cdCAqL1xuXHR0cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKSB7XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdGlmICggcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRjYWxsYmFjayggcGFyZW50ICk7XG5cblx0XHRcdHBhcmVudC50cmF2ZXJzZUFuY2VzdG9ycyggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbiBsb2NhbCBzcGFjZSBieSBjb21wdXRpbmcgaXQgZnJvbSB0aGUgY3VycmVudFxuXHQgKiBwb3NpdGlvbiwgcm90YXRpb24gYW5kIHNjYWxlIHZhbHVlcy5cblx0ICovXG5cdHVwZGF0ZU1hdHJpeCgpIHtcblxuXHRcdHRoaXMubWF0cml4LmNvbXBvc2UoIHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgdGhpcy5zY2FsZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbiB3b3JsZCBzcGFjZSBvZiB0aGlzIDNEIG9iamVjdHMgYW5kIGl0cyBkZXNjZW5kYW50cy5cblx0ICpcblx0ICogVG8gZW5zdXJlIGNvcnJlY3QgcmVzdWx0cywgdGhpcyBtZXRob2QgYWxzbyByZWNvbXB1dGVzIHRoZSAzRCBvYmplY3QncyB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggaW5cblx0ICogbG9jYWwgc3BhY2UuIFRoZSBjb21wdXRhdGlvbiBvZiB0aGUgbG9jYWwgYW5kIHdvcmxkIG1hdHJpeCBjYW4gYmUgY29udHJvbGxlZCB3aXRoIHRoZVxuXHQgKiB7QGxpbmsgT2JqZWN0M0QjbWF0cml4QXV0b1VwZGF0ZX0gYW5kIHtAbGluayBPYmplY3QzRCNtYXRyaXhXb3JsZEF1dG9VcGRhdGV9IGZsYWdzIHdoaWNoIGFyZSBib3RoXG5cdCAqIGB0cnVlYCBieSBkZWZhdWx0LiAgU2V0IHRoZXNlIGZsYWdzIHRvIGBmYWxzZWAgaWYgeW91IG5lZWQgbW9yZSBjb250cm9sIG92ZXIgdGhlIHVwZGF0ZSBtYXRyaXggcHJvY2Vzcy5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBbZm9yY2U9ZmFsc2VdIC0gV2hlbiBzZXQgdG8gYHRydWVgLCBhIHJlY29tcHV0YXRpb24gb2Ygd29ybGQgbWF0cmljZXMgaXMgZm9yY2VkIGV2ZW5cblx0ICogd2hlbiB7QGxpbmsgT2JqZWN0M0QjbWF0cml4V29ybGRBdXRvVXBkYXRlfSBpcyBzZXQgdG8gYGZhbHNlYC5cblx0ICovXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyBtYWtlIHN1cmUgZGVzY2VuZGFudHMgYXJlIHVwZGF0ZWQgaWYgcmVxdWlyZWRcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bIGkgXTtcblxuXHRcdFx0Y2hpbGQudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbiBhbHRlcm5hdGl2ZSB2ZXJzaW9uIG9mIHtAbGluayBPYmplY3QzRCN1cGRhdGVNYXRyaXhXb3JsZH0gd2l0aCBtb3JlIGNvbnRyb2wgb3ZlciB0aGVcblx0ICogdXBkYXRlIG9mIGFuY2VzdG9yIGFuZCBkZXNjZW5kYW50IG5vZGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVQYXJlbnRzPWZhbHNlXSBXaGV0aGVyIGFuY2VzdG9yIG5vZGVzIHNob3VsZCBiZSB1cGRhdGVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbdXBkYXRlQ2hpbGRyZW49ZmFsc2VdIFdoZXRoZXIgZGVzY2VuZGFudCBub2RlcyBzaG91bGQgYmUgdXBkYXRlZCBvciBub3QuXG5cdCAqL1xuXHR1cGRhdGVXb3JsZE1hdHJpeCggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7XG5cblx0XHRjb25zdCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdGlmICggdXBkYXRlUGFyZW50cyA9PT0gdHJ1ZSAmJiBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggdGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG1ha2Ugc3VyZSBkZXNjZW5kYW50cyBhcmUgdXBkYXRlZFxuXG5cdFx0aWYgKCB1cGRhdGVDaGlsZHJlbiA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bIGkgXTtcblxuXHRcdFx0XHRjaGlsZC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIHRydWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGUgM0Qgb2JqZWN0IGludG8gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIDNEIG9iamVjdC5cblx0ICogQHNlZSB7QGxpbmsgT2JqZWN0TG9hZGVyI3BhcnNlfVxuXHQgKi9cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Ly8gbWV0YSBpcyBhIHN0cmluZyB3aGVuIGNhbGxlZCBmcm9tIEpTT04uc3RyaW5naWZ5XG5cdFx0Y29uc3QgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRjb25zdCBvdXRwdXQgPSB7fTtcblxuXHRcdC8vIG1ldGEgaXMgYSBoYXNoIHVzZWQgdG8gY29sbGVjdCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMuXG5cdFx0Ly8gbm90IHByb3ZpZGluZyBpdCBpbXBsaWVzIHRoYXQgdGhpcyBpcyB0aGUgcm9vdCBvYmplY3Rcblx0XHQvLyBiZWluZyBzZXJpYWxpemVkLlxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXplIG1ldGEgb2JqXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHRnZW9tZXRyaWVzOiB7fSxcblx0XHRcdFx0bWF0ZXJpYWxzOiB7fSxcblx0XHRcdFx0dGV4dHVyZXM6IHt9LFxuXHRcdFx0XHRpbWFnZXM6IHt9LFxuXHRcdFx0XHRzaGFwZXM6IHt9LFxuXHRcdFx0XHRza2VsZXRvbnM6IHt9LFxuXHRcdFx0XHRhbmltYXRpb25zOiB7fSxcblx0XHRcdFx0bm9kZXM6IHt9XG5cdFx0XHR9O1xuXG5cdFx0XHRvdXRwdXQubWV0YWRhdGEgPSB7XG5cdFx0XHRcdHZlcnNpb246IDQuNixcblx0XHRcdFx0dHlwZTogJ09iamVjdCcsXG5cdFx0XHRcdGdlbmVyYXRvcjogJ09iamVjdDNELnRvSlNPTidcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHQvLyBzdGFuZGFyZCBPYmplY3QzRCBzZXJpYWxpemF0aW9uXG5cblx0XHRjb25zdCBvYmplY3QgPSB7fTtcblxuXHRcdG9iamVjdC51dWlkID0gdGhpcy51dWlkO1xuXHRcdG9iamVjdC50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgb2JqZWN0Lm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCB0aGlzLmNhc3RTaGFkb3cgPT09IHRydWUgKSBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnJlY2VpdmVTaGFkb3cgPT09IHRydWUgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgb2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMuZnJ1c3R1bUN1bGxlZCA9PT0gZmFsc2UgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuXHRcdGlmICggdGhpcy5yZW5kZXJPcmRlciAhPT0gMCApIG9iamVjdC5yZW5kZXJPcmRlciA9IHRoaXMucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBPYmplY3Qua2V5cyggdGhpcy51c2VyRGF0YSApLmxlbmd0aCA+IDAgKSBvYmplY3QudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0b2JqZWN0LmxheWVycyA9IHRoaXMubGF5ZXJzLm1hc2s7XG5cdFx0b2JqZWN0Lm1hdHJpeCA9IHRoaXMubWF0cml4LnRvQXJyYXkoKTtcblx0XHRvYmplY3QudXAgPSB0aGlzLnVwLnRvQXJyYXkoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlID09PSBmYWxzZSApIG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHQvLyBvYmplY3Qgc3BlY2lmaWMgcHJvcGVydGllc1xuXG5cdFx0aWYgKCB0aGlzLmlzSW5zdGFuY2VkTWVzaCApIHtcblxuXHRcdFx0b2JqZWN0LnR5cGUgPSAnSW5zdGFuY2VkTWVzaCc7XG5cdFx0XHRvYmplY3QuY291bnQgPSB0aGlzLmNvdW50O1xuXHRcdFx0b2JqZWN0Lmluc3RhbmNlTWF0cml4ID0gdGhpcy5pbnN0YW5jZU1hdHJpeC50b0pTT04oKTtcblx0XHRcdGlmICggdGhpcy5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkgb2JqZWN0Lmluc3RhbmNlQ29sb3IgPSB0aGlzLmluc3RhbmNlQ29sb3IudG9KU09OKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaXNCYXRjaGVkTWVzaCApIHtcblxuXHRcdFx0b2JqZWN0LnR5cGUgPSAnQmF0Y2hlZE1lc2gnO1xuXHRcdFx0b2JqZWN0LnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSB0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQ7XG5cdFx0XHRvYmplY3Quc29ydE9iamVjdHMgPSB0aGlzLnNvcnRPYmplY3RzO1xuXG5cdFx0XHRvYmplY3QuZHJhd1JhbmdlcyA9IHRoaXMuX2RyYXdSYW5nZXM7XG5cdFx0XHRvYmplY3QucmVzZXJ2ZWRSYW5nZXMgPSB0aGlzLl9yZXNlcnZlZFJhbmdlcztcblxuXHRcdFx0b2JqZWN0LnZpc2liaWxpdHkgPSB0aGlzLl92aXNpYmlsaXR5O1xuXHRcdFx0b2JqZWN0LmFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcblx0XHRcdG9iamVjdC5ib3VuZHMgPSB0aGlzLl9ib3VuZHMubWFwKCBib3VuZCA9PiAoIHtcblx0XHRcdFx0Ym94SW5pdGlhbGl6ZWQ6IGJvdW5kLmJveEluaXRpYWxpemVkLFxuXHRcdFx0XHRib3hNaW46IGJvdW5kLmJveC5taW4udG9BcnJheSgpLFxuXHRcdFx0XHRib3hNYXg6IGJvdW5kLmJveC5tYXgudG9BcnJheSgpLFxuXG5cdFx0XHRcdHNwaGVyZUluaXRpYWxpemVkOiBib3VuZC5zcGhlcmVJbml0aWFsaXplZCxcblx0XHRcdFx0c3BoZXJlUmFkaXVzOiBib3VuZC5zcGhlcmUucmFkaXVzLFxuXHRcdFx0XHRzcGhlcmVDZW50ZXI6IGJvdW5kLnNwaGVyZS5jZW50ZXIudG9BcnJheSgpXG5cdFx0XHR9ICkgKTtcblxuXHRcdFx0b2JqZWN0Lm1heEluc3RhbmNlQ291bnQgPSB0aGlzLl9tYXhJbnN0YW5jZUNvdW50O1xuXHRcdFx0b2JqZWN0Lm1heFZlcnRleENvdW50ID0gdGhpcy5fbWF4VmVydGV4Q291bnQ7XG5cdFx0XHRvYmplY3QubWF4SW5kZXhDb3VudCA9IHRoaXMuX21heEluZGV4Q291bnQ7XG5cblx0XHRcdG9iamVjdC5nZW9tZXRyeUluaXRpYWxpemVkID0gdGhpcy5fZ2VvbWV0cnlJbml0aWFsaXplZDtcblx0XHRcdG9iamVjdC5nZW9tZXRyeUNvdW50ID0gdGhpcy5fZ2VvbWV0cnlDb3VudDtcblxuXHRcdFx0b2JqZWN0Lm1hdHJpY2VzVGV4dHVyZSA9IHRoaXMuX21hdHJpY2VzVGV4dHVyZS50b0pTT04oIG1ldGEgKTtcblxuXHRcdFx0aWYgKCB0aGlzLl9jb2xvcnNUZXh0dXJlICE9PSBudWxsICkgb2JqZWN0LmNvbG9yc1RleHR1cmUgPSB0aGlzLl9jb2xvcnNUZXh0dXJlLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmJvdW5kaW5nU3BoZXJlID0ge1xuXHRcdFx0XHRcdGNlbnRlcjogb2JqZWN0LmJvdW5kaW5nU3BoZXJlLmNlbnRlci50b0FycmF5KCksXG5cdFx0XHRcdFx0cmFkaXVzOiBvYmplY3QuYm91bmRpbmdTcGhlcmUucmFkaXVzXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdG9iamVjdC5ib3VuZGluZ0JveCA9IHtcblx0XHRcdFx0XHRtaW46IG9iamVjdC5ib3VuZGluZ0JveC5taW4udG9BcnJheSgpLFxuXHRcdFx0XHRcdG1heDogb2JqZWN0LmJvdW5kaW5nQm94Lm1heC50b0FycmF5KClcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIHNlcmlhbGl6ZSggbGlicmFyeSwgZWxlbWVudCApIHtcblxuXHRcdFx0aWYgKCBsaWJyYXJ5WyBlbGVtZW50LnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID0gZWxlbWVudC50b0pTT04oIG1ldGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbWVudC51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzU2NlbmUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZC50b0pTT04oKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB0aGlzLmJhY2tncm91bmQuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LmJhY2tncm91bmQgPSB0aGlzLmJhY2tncm91bmQudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aGlzLmVudmlyb25tZW50ICYmIHRoaXMuZW52aXJvbm1lbnQuaXNUZXh0dXJlICYmIHRoaXMuZW52aXJvbm1lbnQuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IHRoaXMuZW52aXJvbm1lbnQudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5pc01lc2ggfHwgdGhpcy5pc0xpbmUgfHwgdGhpcy5pc1BvaW50cyApIHtcblxuXHRcdFx0b2JqZWN0Lmdlb21ldHJ5ID0gc2VyaWFsaXplKCBtZXRhLmdlb21ldHJpZXMsIHRoaXMuZ2VvbWV0cnkgKTtcblxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHRoaXMuZ2VvbWV0cnkucGFyYW1ldGVycztcblxuXHRcdFx0aWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgJiYgcGFyYW1ldGVycy5zaGFwZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZXMgPSBwYXJhbWV0ZXJzLnNoYXBlcztcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5zaGFwZXMsIHNoYXBlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdG9iamVjdC5iaW5kTW9kZSA9IHRoaXMuYmluZE1vZGU7XG5cdFx0XHRvYmplY3QuYmluZE1hdHJpeCA9IHRoaXMuYmluZE1hdHJpeC50b0FycmF5KCk7XG5cblx0XHRcdGlmICggdGhpcy5za2VsZXRvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNlcmlhbGl6ZSggbWV0YS5za2VsZXRvbnMsIHRoaXMuc2tlbGV0b24gKTtcblxuXHRcdFx0XHRvYmplY3Quc2tlbGV0b24gPSB0aGlzLnNrZWxldG9uLnV1aWQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHRoaXMubWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRjb25zdCB1dWlkcyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMubWF0ZXJpYWwubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHV1aWRzLnB1c2goIHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWxbIGkgXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHV1aWRzO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG9iamVjdC5tYXRlcmlhbCA9IHNlcmlhbGl6ZSggbWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRvYmplY3QuY2hpbGRyZW4gPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmNoaWxkcmVuLnB1c2goIHRoaXMuY2hpbGRyZW5bIGkgXS50b0pTT04oIG1ldGEgKS5vYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGlmICggdGhpcy5hbmltYXRpb25zLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdG9iamVjdC5hbmltYXRpb25zID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuYW5pbWF0aW9ucy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYW5pbWF0aW9uID0gdGhpcy5hbmltYXRpb25zWyBpIF07XG5cblx0XHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMucHVzaCggc2VyaWFsaXplKCBtZXRhLmFuaW1hdGlvbnMsIGFuaW1hdGlvbiApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5nZW9tZXRyaWVzICk7XG5cdFx0XHRjb25zdCBtYXRlcmlhbHMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLm1hdGVyaWFscyApO1xuXHRcdFx0Y29uc3QgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7XG5cdFx0XHRjb25zdCBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLmltYWdlcyApO1xuXHRcdFx0Y29uc3Qgc2hhcGVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5zaGFwZXMgKTtcblx0XHRcdGNvbnN0IHNrZWxldG9ucyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuc2tlbGV0b25zICk7XG5cdFx0XHRjb25zdCBhbmltYXRpb25zID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5hbmltYXRpb25zICk7XG5cdFx0XHRjb25zdCBub2RlcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEubm9kZXMgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyaWVzLmxlbmd0aCA+IDAgKSBvdXRwdXQuZ2VvbWV0cmllcyA9IGdlb21ldHJpZXM7XG5cdFx0XHRpZiAoIG1hdGVyaWFscy5sZW5ndGggPiAwICkgb3V0cHV0Lm1hdGVyaWFscyA9IG1hdGVyaWFscztcblx0XHRcdGlmICggdGV4dHVyZXMubGVuZ3RoID4gMCApIG91dHB1dC50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIG91dHB1dC5pbWFnZXMgPSBpbWFnZXM7XG5cdFx0XHRpZiAoIHNoYXBlcy5sZW5ndGggPiAwICkgb3V0cHV0LnNoYXBlcyA9IHNoYXBlcztcblx0XHRcdGlmICggc2tlbGV0b25zLmxlbmd0aCA+IDAgKSBvdXRwdXQuc2tlbGV0b25zID0gc2tlbGV0b25zO1xuXHRcdFx0aWYgKCBhbmltYXRpb25zLmxlbmd0aCA+IDAgKSBvdXRwdXQuYW5pbWF0aW9ucyA9IGFuaW1hdGlvbnM7XG5cdFx0XHRpZiAoIG5vZGVzLmxlbmd0aCA+IDAgKSBvdXRwdXQubm9kZXMgPSBub2RlcztcblxuXHRcdH1cblxuXHRcdG91dHB1dC5vYmplY3QgPSBvYmplY3Q7XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdFx0Ly8gZXh0cmFjdCBkYXRhIGZyb20gdGhlIGNhY2hlIGhhc2hcblx0XHQvLyByZW1vdmUgbWV0YWRhdGEgb24gZWFjaCBpdGVtXG5cdFx0Ly8gYW5kIHJldHVybiBhcyBhcnJheVxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoIGNhY2hlICkge1xuXG5cdFx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyAzRCBvYmplY3Qgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSBbcmVjdXJzaXZlPXRydWVdIC0gV2hlbiBzZXQgdG8gYHRydWVgLCBkZXNjZW5kYW50cyBvZiB0aGUgM0Qgb2JqZWN0IGFyZSBhbHNvIGNsb25lZC5cblx0ICogQHJldHVybiB7T2JqZWN0M0R9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCByZWN1cnNpdmUgKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzLCByZWN1cnNpdmUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiAzRCBvYmplY3QgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gc291cmNlIC0gVGhlIDNEIG9iamVjdCB0byBjb3B5LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWN1cnNpdmU9dHJ1ZV0gLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGRlc2NlbmRhbnRzIG9mIHRoZSAzRCBvYmplY3QgYXJlIGNsb25lZC5cblx0ICogQHJldHVybiB7T2JqZWN0M0R9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSA9IHRydWUgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMudXAuY29weSggc291cmNlLnVwICk7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIHNvdXJjZS5wb3NpdGlvbiApO1xuXHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSBzb3VyY2Uucm90YXRpb24ub3JkZXI7XG5cdFx0dGhpcy5xdWF0ZXJuaW9uLmNvcHkoIHNvdXJjZS5xdWF0ZXJuaW9uICk7XG5cdFx0dGhpcy5zY2FsZS5jb3B5KCBzb3VyY2Uuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4LmNvcHkoIHNvdXJjZS5tYXRyaXggKTtcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHNvdXJjZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhXb3JsZEF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gc291cmNlLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR0aGlzLmxheWVycy5tYXNrID0gc291cmNlLmxheWVycy5tYXNrO1xuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy5jYXN0U2hhZG93ID0gc291cmNlLmNhc3RTaGFkb3c7XG5cdFx0dGhpcy5yZWNlaXZlU2hhZG93ID0gc291cmNlLnJlY2VpdmVTaGFkb3c7XG5cblx0XHR0aGlzLmZydXN0dW1DdWxsZWQgPSBzb3VyY2UuZnJ1c3R1bUN1bGxlZDtcblx0XHR0aGlzLnJlbmRlck9yZGVyID0gc291cmNlLnJlbmRlck9yZGVyO1xuXG5cdFx0dGhpcy5hbmltYXRpb25zID0gc291cmNlLmFuaW1hdGlvbnMuc2xpY2UoKTtcblxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdGlmICggcmVjdXJzaXZlID09PSB0cnVlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBzb3VyY2UuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGNoaWxkID0gc291cmNlLmNoaWxkcmVuWyBpIF07XG5cdFx0XHRcdHRoaXMuYWRkKCBjaGlsZC5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHVwIGRpcmVjdGlvbiBmb3Igb2JqZWN0cywgYWxzbyB1c2VkIGFzIHRoZSBkZWZhdWx0XG4gKiBwb3NpdGlvbiBmb3Ige0BsaW5rIERpcmVjdGlvbmFsTGlnaHR9IGFuZCB7QGxpbmsgSGVtaXNwaGVyZUxpZ2h0fS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7VmVjdG9yM31cbiAqIEBkZWZhdWx0ICgwLDEsMClcbiAqL1xuT2JqZWN0M0QuREVGQVVMVF9VUCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBzZXR0aW5nIGZvciB7QGxpbmsgT2JqZWN0M0QjbWF0cml4QXV0b1VwZGF0ZX0gZm9yXG4gKiBuZXdseSBjcmVhdGVkIDNEIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAZGVmYXVsdCB0cnVlXG4gKi9cbk9iamVjdDNELkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFID0gdHJ1ZTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBzZXR0aW5nIGZvciB7QGxpbmsgT2JqZWN0M0QjbWF0cml4V29ybGRBdXRvVXBkYXRlfSBmb3JcbiAqIG5ld2x5IGNyZWF0ZWQgM0Qgb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBkZWZhdWx0IHRydWVcbiAqL1xuT2JqZWN0M0QuREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEUgPSB0cnVlO1xuXG5jb25zdCBfdjAkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MSQzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YyJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjMkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX3ZhYiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YWMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmJjID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZhcCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92YnAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmNwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfdjQwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xuY29uc3QgX3Y0MSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjQoKTtcbmNvbnN0IF92NDIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5cbi8qKlxuICogQSBnZW9tZXRyaWMgdHJpYW5nbGUgYXMgZGVmaW5lZCBieSB0aHJlZSB2ZWN0b3JzIHJlcHJlc2VudGluZyBpdHMgdGhyZWUgY29ybmVycy5cbiAqL1xuY2xhc3MgVHJpYW5nbGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHRyaWFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFthPSgwLDAsMCldIC0gVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW2I9KDAsMCwwKV0gLSBUaGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW2M9KDAsMCwwKV0gLSBUaGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhID0gbmV3IFZlY3RvcjMoKSwgYiA9IG5ldyBWZWN0b3IzKCksIGMgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLmEgPSBhO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNlY29uZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy5iID0gYjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0aGlyZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy5jID0gYztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBub3JtYWwgdmVjdG9yIG9mIGEgdHJpYW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYSAtIFRoZSBmaXJzdCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGIgLSBUaGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYyAtIFRoZSB0aGlyZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgdHJpYW5nbGUncyBub3JtYWwuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0Tm9ybWFsKCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHR0YXJnZXQuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdF92MCQxLnN1YlZlY3RvcnMoIGEsIGIgKTtcblx0XHR0YXJnZXQuY3Jvc3MoIF92MCQxICk7XG5cblx0XHRjb25zdCB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xuXHRcdGlmICggdGFyZ2V0TGVuZ3RoU3EgPiAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0Lm11bHRpcGx5U2NhbGFyKCAxIC8gTWF0aC5zcXJ0KCB0YXJnZXRMZW5ndGhTcSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggMCwgMCwgMCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgYSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBmcm9tIHRoZSBnaXZlbiB2ZWN0b3IuXG5cdCAqIFJldHVybnMgYG51bGxgIGlmIHRoZSB0cmlhbmdsZSBpcyBkZWdlbmVyYXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gQSBwb2ludCBpbiAzRCBzcGFjZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYiAtIFRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBjIC0gVGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4gez9WZWN0b3IzfSBUaGUgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgZm9yIHRoZSBnaXZlbiBwb2ludFxuXHQgKi9cblx0c3RhdGljIGdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdC8vIGJhc2VkIG9uOiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcG9pbnRpbnBvbHkvZGVmYXVsdC5odG1sXG5cblx0XHRfdjAkMS5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X3YxJDMuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdF92MiQyLnN1YlZlY3RvcnMoIHBvaW50LCBhICk7XG5cblx0XHRjb25zdCBkb3QwMCA9IF92MCQxLmRvdCggX3YwJDEgKTtcblx0XHRjb25zdCBkb3QwMSA9IF92MCQxLmRvdCggX3YxJDMgKTtcblx0XHRjb25zdCBkb3QwMiA9IF92MCQxLmRvdCggX3YyJDIgKTtcblx0XHRjb25zdCBkb3QxMSA9IF92MSQzLmRvdCggX3YxJDMgKTtcblx0XHRjb25zdCBkb3QxMiA9IF92MSQzLmRvdCggX3YyJDIgKTtcblxuXHRcdGNvbnN0IGRlbm9tID0gKCBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMSApO1xuXG5cdFx0Ly8gY29sbGluZWFyIG9yIHNpbmd1bGFyIHRyaWFuZ2xlXG5cdFx0aWYgKCBkZW5vbSA9PT0gMCApIHtcblxuXHRcdFx0dGFyZ2V0LnNldCggMCwgMCwgMCApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbnZEZW5vbSA9IDEgLyBkZW5vbTtcblx0XHRjb25zdCB1ID0gKCBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMiApICogaW52RGVub207XG5cdFx0Y29uc3QgdiA9ICggZG90MDAgKiBkb3QxMiAtIGRvdDAxICogZG90MDIgKSAqIGludkRlbm9tO1xuXG5cdFx0Ly8gYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgbXVzdCBhbHdheXMgc3VtIHRvIDFcblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggMSAtIHUgLSB2LCB2LCB1ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gcG9pbnQsIHdoZW4gcHJvamVjdGVkIG9udG8gdGhlIHBsYW5lIG9mIHRoZVxuXHQgKiB0cmlhbmdsZSwgbGllcyB3aXRoaW4gdGhlIHRyaWFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IGluIDNEIHNwYWNlIHRvIHRlc3QuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYSAtIFRoZSBmaXJzdCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGIgLSBUaGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYyAtIFRoZSB0aGlyZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBwb2ludCwgd2hlbiBwcm9qZWN0ZWQgb250byB0aGUgcGxhbmUgb2YgdGhlXG5cdCAqIHRyaWFuZ2xlLCBsaWVzIHdpdGhpbiB0aGUgdHJpYW5nbGUgb3Igbm90LlxuXHQgKi9cblx0c3RhdGljIGNvbnRhaW5zUG9pbnQoIHBvaW50LCBhLCBiLCBjICkge1xuXG5cdFx0Ly8gaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUgdGhlbiB3ZSBjYW4ndCBjb250YWluIGEgcG9pbnRcblx0XHRpZiAoIHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgYSwgYiwgYywgX3YzJDIgKSA9PT0gbnVsbCApIHtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuICggX3YzJDIueCA+PSAwICkgJiYgKCBfdjMkMi55ID49IDAgKSAmJiAoICggX3YzJDIueCArIF92MyQyLnkgKSA8PSAxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgdmFsdWUgYmFyeWNlbnRyaWNhbGx5IGludGVycG9sYXRlZCBmb3IgdGhlIGdpdmVuIHBvaW50IG9uIHRoZVxuXHQgKiB0cmlhbmdsZS4gUmV0dXJucyBgbnVsbGAgaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBQb3NpdGlvbiBvZiBpbnRlcnBvbGF0ZWQgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcDEgLSBUaGUgZmlyc3QgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwMiAtIFRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwMyAtIFRoZSB0aGlyZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYxIC0gVmFsdWUgdG8gaW50ZXJwb2xhdGUgb2YgZmlyc3QgdmVydGV4LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYyIC0gVmFsdWUgdG8gaW50ZXJwb2xhdGUgb2Ygc2Vjb25kIHZlcnRleC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2MyAtIFZhbHVlIHRvIGludGVycG9sYXRlIG9mIHRoaXJkIHZlcnRleC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0SW50ZXJwb2xhdGlvbiggcG9pbnQsIHAxLCBwMiwgcDMsIHYxLCB2MiwgdjMsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGhpcy5nZXRCYXJ5Y29vcmQoIHBvaW50LCBwMSwgcDIsIHAzLCBfdjMkMiApID09PSBudWxsICkge1xuXG5cdFx0XHR0YXJnZXQueCA9IDA7XG5cdFx0XHR0YXJnZXQueSA9IDA7XG5cdFx0XHRpZiAoICd6JyBpbiB0YXJnZXQgKSB0YXJnZXQueiA9IDA7XG5cdFx0XHRpZiAoICd3JyBpbiB0YXJnZXQgKSB0YXJnZXQudyA9IDA7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5zZXRTY2FsYXIoIDAgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB2MSwgX3YzJDIueCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHYyLCBfdjMkMi55ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdjMsIF92MyQyLnogKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgdmFsdWUgYmFyeWNlbnRyaWNhbGx5IGludGVycG9sYXRlZCBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSBhbmQgaW5kaWNlcy5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IGF0dHIgLSBUaGUgYXR0cmlidXRlIHRvIGludGVycG9sYXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaTEgLSBJbmRleCBvZiBmaXJzdCB2ZXJ0ZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpMiAtIEluZGV4IG9mIHNlY29uZCB2ZXJ0ZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpMyAtIEluZGV4IG9mIHRoaXJkIHZlcnRleC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBiYXJ5Y29vcmQgLSBUaGUgYmFyeWNvb3JkaW5hdGUgdmFsdWUgdG8gdXNlIHRvIGludGVycG9sYXRlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZSB2YWx1ZS5cblx0ICovXG5cdHN0YXRpYyBnZXRJbnRlcnBvbGF0ZWRBdHRyaWJ1dGUoIGF0dHIsIGkxLCBpMiwgaTMsIGJhcnljb29yZCwgdGFyZ2V0ICkge1xuXG5cdFx0X3Y0MC5zZXRTY2FsYXIoIDAgKTtcblx0XHRfdjQxLnNldFNjYWxhciggMCApO1xuXHRcdF92NDIuc2V0U2NhbGFyKCAwICk7XG5cblx0XHRfdjQwLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHIsIGkxICk7XG5cdFx0X3Y0MS5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyLCBpMiApO1xuXHRcdF92NDIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0ciwgaTMgKTtcblxuXHRcdHRhcmdldC5zZXRTY2FsYXIoIDAgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBfdjQwLCBiYXJ5Y29vcmQueCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIF92NDEsIGJhcnljb29yZC55ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggX3Y0MiwgYmFyeWNvb3JkLnogKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdHJpYW5nbGUgaXMgb3JpZW50ZWQgdG93YXJkcyB0aGUgZ2l2ZW4gZGlyZWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGEgLSBUaGUgZmlyc3QgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBiIC0gVGhlIHNlY29uZCBjb3JuZXIgb2YgdGhlIHRyaWFuZ2xlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGMgLSBUaGUgdGhpcmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBkaXJlY3Rpb24gLSBUaGUgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRyaWFuZ2xlIGlzIG9yaWVudGVkIHRvd2FyZHMgdGhlIGdpdmVuIGRpcmVjdGlvbiBvciBub3QuXG5cdCAqL1xuXHRzdGF0aWMgaXNGcm9udEZhY2luZyggYSwgYiwgYywgZGlyZWN0aW9uICkge1xuXG5cdFx0X3YwJDEuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdF92MSQzLnN1YlZlY3RvcnMoIGEsIGIgKTtcblxuXHRcdC8vIHN0cmljdGx5IGZyb250IGZhY2luZ1xuXHRcdHJldHVybiAoIF92MCQxLmNyb3NzKCBfdjEkMyApLmRvdCggZGlyZWN0aW9uICkgPCAwICkgPyB0cnVlIDogZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB0cmlhbmdsZSdzIHZlcnRpY2VzIGJ5IGNvcHlpbmcgdGhlIGdpdmVuIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBhIC0gVGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYiAtIFRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBjIC0gVGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEByZXR1cm4ge1RyaWFuZ2xlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHRyaWFuZ2xlLlxuXHQgKi9cblx0c2V0KCBhLCBiLCBjICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIGEgKTtcblx0XHR0aGlzLmIuY29weSggYiApO1xuXHRcdHRoaXMuYy5jb3B5KCBjICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHRyaWFuZ2xlJ3MgdmVydGljZXMgYnkgY29weWluZyB0aGUgZ2l2ZW4gYXJyYXkgdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PFZlY3RvcjM+fSBwb2ludHMgLSBBbiBhcnJheSB3aXRoIDNEIHBvaW50cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGkwIC0gVGhlIGFycmF5IGluZGV4IHJlcHJlc2VudGluZyB0aGUgZmlyc3QgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGkxIC0gVGhlIGFycmF5IGluZGV4IHJlcHJlc2VudGluZyB0aGUgc2Vjb25kIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpMiAtIFRoZSBhcnJheSBpbmRleCByZXByZXNlbnRpbmcgdGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEByZXR1cm4ge1RyaWFuZ2xlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHRyaWFuZ2xlLlxuXHQgKi9cblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXMoIHBvaW50cywgaTAsIGkxLCBpMiApIHtcblxuXHRcdHRoaXMuYS5jb3B5KCBwb2ludHNbIGkwIF0gKTtcblx0XHR0aGlzLmIuY29weSggcG9pbnRzWyBpMSBdICk7XG5cdFx0dGhpcy5jLmNvcHkoIHBvaW50c1sgaTIgXSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB0cmlhbmdsZSdzIHZlcnRpY2VzIGJ5IGNvcHlpbmcgdGhlIGdpdmVuIGF0dHJpYnV0ZSB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyQXR0cmlidXRlfSBhdHRyaWJ1dGUgLSBBIGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aCAzRCBwb2ludHMgZGF0YS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGkwIC0gVGhlIGF0dHJpYnV0ZSBpbmRleCByZXByZXNlbnRpbmcgdGhlIGZpcnN0IGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpMSAtIFRoZSBhdHRyaWJ1dGUgaW5kZXggcmVwcmVzZW50aW5nIHRoZSBzZWNvbmQgY29ybmVyIG9mIHRoZSB0cmlhbmdsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGkyIC0gVGhlIGF0dHJpYnV0ZSBpbmRleCByZXByZXNlbnRpbmcgdGhlIHRoaXJkIGNvcm5lciBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqIEByZXR1cm4ge1RyaWFuZ2xlfSBBIHJlZmVyZW5jZSB0byB0aGlzIHRyaWFuZ2xlLlxuXHQgKi9cblx0c2V0RnJvbUF0dHJpYnV0ZUFuZEluZGljZXMoIGF0dHJpYnV0ZSwgaTAsIGkxLCBpMiApIHtcblxuXHRcdHRoaXMuYS5mcm9tQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGkwICk7XG5cdFx0dGhpcy5iLmZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaTEgKTtcblx0XHR0aGlzLmMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IHRyaWFuZ2xlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1RyaWFuZ2xlfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiB0cmlhbmdsZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1RyaWFuZ2xlfSB0cmlhbmdsZSAtIFRoZSB0cmlhbmdsZSB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtUcmlhbmdsZX0gQSByZWZlcmVuY2UgdG8gdGhpcyB0cmlhbmdsZS5cblx0ICovXG5cdGNvcHkoIHRyaWFuZ2xlICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTtcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xuXHRcdHRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBhcmVhIG9mIHRoZSB0cmlhbmdsZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgdHJpYW5nbGUncyBhcmVhLlxuXHQgKi9cblx0Z2V0QXJlYSgpIHtcblxuXHRcdF92MCQxLnN1YlZlY3RvcnMoIHRoaXMuYywgdGhpcy5iICk7XG5cdFx0X3YxJDMuc3ViVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKTtcblxuXHRcdHJldHVybiBfdjAkMS5jcm9zcyggX3YxJDMgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBtaWRwb2ludCBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSB0cmlhbmdsZSdzIG1pZHBvaW50LlxuXHQgKi9cblx0Z2V0TWlkcG9pbnQoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIG5vcm1hbCBvZiB0aGUgdHJpYW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSB0cmlhbmdsZSdzIG5vcm1hbC5cblx0ICovXG5cdGdldE5vcm1hbCggdGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBhIHBsYW5lIHRoZSB0cmlhbmdsZSBsaWVzIHdpdGhpbi5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1BsYW5lfSBUaGUgcGxhbmUgdGhlIHRyaWFuZ2xlIGxpZXMgd2l0aGluLlxuXHQgKi9cblx0Z2V0UGxhbmUoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBhIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIGZyb20gdGhlIGdpdmVuIHZlY3Rvci5cblx0ICogUmV0dXJucyBgbnVsbGAgaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBBIHBvaW50IGluIDNEIHNwYWNlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHs/VmVjdG9yM30gVGhlIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIGZvciB0aGUgZ2l2ZW4gcG9pbnRcblx0ICovXG5cdGdldEJhcnljb29yZCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSB2YWx1ZSBiYXJ5Y2VudHJpY2FsbHkgaW50ZXJwb2xhdGVkIGZvciB0aGUgZ2l2ZW4gcG9pbnQgb24gdGhlXG5cdCAqIHRyaWFuZ2xlLiBSZXR1cm5zIGBudWxsYCBpZiB0aGUgdHJpYW5nbGUgaXMgZGVnZW5lcmF0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFBvc2l0aW9uIG9mIGludGVycG9sYXRlZCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2MSAtIFZhbHVlIHRvIGludGVycG9sYXRlIG9mIGZpcnN0IHZlcnRleC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2MiAtIFZhbHVlIHRvIGludGVycG9sYXRlIG9mIHNlY29uZCB2ZXJ0ZXguXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdjMgLSBWYWx1ZSB0byBpbnRlcnBvbGF0ZSBvZiB0aGlyZCB2ZXJ0ZXguXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4gez9WZWN0b3IzfSBUaGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuXHQgKi9cblx0Z2V0SW50ZXJwb2xhdGlvbiggcG9pbnQsIHYxLCB2MiwgdjMsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRJbnRlcnBvbGF0aW9uKCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdjEsIHYyLCB2MywgdGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gcG9pbnQsIHdoZW4gcHJvamVjdGVkIG9udG8gdGhlIHBsYW5lIG9mIHRoZVxuXHQgKiB0cmlhbmdsZSwgbGllcyB3aXRoaW4gdGhlIHRyaWFuZ2xlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IGluIDNEIHNwYWNlIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIHBvaW50LCB3aGVuIHByb2plY3RlZCBvbnRvIHRoZSBwbGFuZSBvZiB0aGVcblx0ICogdHJpYW5nbGUsIGxpZXMgd2l0aGluIHRoZSB0cmlhbmdsZSBvciBub3QuXG5cdCAqL1xuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5jb250YWluc1BvaW50KCBwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRyaWFuZ2xlIGlzIG9yaWVudGVkIHRvd2FyZHMgdGhlIGdpdmVuIGRpcmVjdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBkaXJlY3Rpb24gLSBUaGUgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHRyaWFuZ2xlIGlzIG9yaWVudGVkIHRvd2FyZHMgdGhlIGdpdmVuIGRpcmVjdGlvbiBvciBub3QuXG5cdCAqL1xuXHRpc0Zyb250RmFjaW5nKCBkaXJlY3Rpb24gKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuaXNGcm9udEZhY2luZyggdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgZGlyZWN0aW9uICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHRyaWFuZ2xlIGludGVyc2VjdHMgd2l0aCB0aGUgZ2l2ZW4gYm94LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3ggdG8gaW50ZXJzZWN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgdHJpYW5nbGUgaW50ZXJzZWN0cyB3aXRoIHRoZSBnaXZlbiBib3ggb3Igbm90LlxuXHQgKi9cblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzVHJpYW5nbGUoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHRyaWFuZ2xlIHRvIHRoZSBnaXZlbiBwb2ludC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwIC0gVGhlIHBvaW50IHRvIGNvbXB1dGUgdGhlIGNsb3Nlc3QgcG9pbnQgZm9yLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgdHJpYW5nbGUuXG5cdCAqL1xuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBhID0gdGhpcy5hLCBiID0gdGhpcy5iLCBjID0gdGhpcy5jO1xuXHRcdGxldCB2LCB3O1xuXG5cdFx0Ly8gYWxnb3JpdGhtIHRoYW5rcyB0byBSZWFsLVRpbWUgQ29sbGlzaW9uIERldGVjdGlvbiBieSBDaHJpc3RlciBFcmljc29uLFxuXHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcblx0XHQvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi5cblx0XHQvLyBiYXNpY2FsbHksIHdlJ3JlIGRpc3Rpbmd1aXNoaW5nIHdoaWNoIG9mIHRoZSB2b3Jvbm9pIHJlZ2lvbnMgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxuXG5cdFx0X3ZhYi5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X3ZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X3ZhcC5zdWJWZWN0b3JzKCBwLCBhICk7XG5cdFx0Y29uc3QgZDEgPSBfdmFiLmRvdCggX3ZhcCApO1xuXHRcdGNvbnN0IGQyID0gX3ZhYy5kb3QoIF92YXAgKTtcblx0XHRpZiAoIGQxIDw9IDAgJiYgZDIgPD0gMCApIHtcblxuXHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBBOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEsIDAsIDApXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKTtcblxuXHRcdH1cblxuXHRcdF92YnAuc3ViVmVjdG9ycyggcCwgYiApO1xuXHRcdGNvbnN0IGQzID0gX3ZhYi5kb3QoIF92YnAgKTtcblx0XHRjb25zdCBkNCA9IF92YWMuZG90KCBfdmJwICk7XG5cdFx0aWYgKCBkMyA+PSAwICYmIGQ0IDw9IGQzICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEI7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMSwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdmMgPSBkMSAqIGQ0IC0gZDMgKiBkMjtcblx0XHRpZiAoIHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwICkge1xuXG5cdFx0XHR2ID0gZDEgLyAoIGQxIC0gZDMgKTtcblx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEFCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdiwgdiwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYiwgdiApO1xuXG5cdFx0fVxuXG5cdFx0X3ZjcC5zdWJWZWN0b3JzKCBwLCBjICk7XG5cdFx0Y29uc3QgZDUgPSBfdmFiLmRvdCggX3ZjcCApO1xuXHRcdGNvbnN0IGQ2ID0gX3ZhYy5kb3QoIF92Y3AgKTtcblx0XHRpZiAoIGQ2ID49IDAgJiYgZDUgPD0gZDYgKSB7XG5cblx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAwLCAxKVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBjICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YiA9IGQ1ICogZDIgLSBkMSAqIGQ2O1xuXHRcdGlmICggdmIgPD0gMCAmJiBkMiA+PSAwICYmIGQ2IDw9IDAgKSB7XG5cblx0XHRcdHcgPSBkMiAvICggZDIgLSBkNiApO1xuXHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUM7IGJhcnljZW50cmljIGNvb3JkcyAoMS13LCAwLCB3KVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xuXHRcdGlmICggdmEgPD0gMCAmJiAoIGQ0IC0gZDMgKSA+PSAwICYmICggZDUgLSBkNiApID49IDAgKSB7XG5cblx0XHRcdF92YmMuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0dyA9ICggZDQgLSBkMyApIC8gKCAoIGQ0IC0gZDMgKSArICggZDUgLSBkNiApICk7XG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIF92YmMsIHcgKTsgLy8gZWRnZSByZWdpb24gb2YgQkNcblxuXHRcdH1cblxuXHRcdC8vIGZhY2UgcmVnaW9uXG5cdFx0Y29uc3QgZGVub20gPSAxIC8gKCB2YSArIHZiICsgdmMgKTtcblx0XHQvLyB1ID0gdmEgKiBkZW5vbVxuXHRcdHYgPSB2YiAqIGRlbm9tO1xuXHRcdHcgPSB2YyAqIGRlbm9tO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFiLCB2ICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFjLCB3ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHRyaWFuZ2xlIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtUcmlhbmdsZX0gdHJpYW5nbGUgLSBUaGUgdHJpYW5nbGUgdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyB0cmlhbmdsZSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqL1xuXHRlcXVhbHMoIHRyaWFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfY29sb3JLZXl3b3JkcyA9IHsgJ2FsaWNlYmx1ZSc6IDB4RjBGOEZGLCAnYW50aXF1ZXdoaXRlJzogMHhGQUVCRDcsICdhcXVhJzogMHgwMEZGRkYsICdhcXVhbWFyaW5lJzogMHg3RkZGRDQsICdhenVyZSc6IDB4RjBGRkZGLFxuXHQnYmVpZ2UnOiAweEY1RjVEQywgJ2Jpc3F1ZSc6IDB4RkZFNEM0LCAnYmxhY2snOiAweDAwMDAwMCwgJ2JsYW5jaGVkYWxtb25kJzogMHhGRkVCQ0QsICdibHVlJzogMHgwMDAwRkYsICdibHVldmlvbGV0JzogMHg4QTJCRTIsXG5cdCdicm93bic6IDB4QTUyQTJBLCAnYnVybHl3b29kJzogMHhERUI4ODcsICdjYWRldGJsdWUnOiAweDVGOUVBMCwgJ2NoYXJ0cmV1c2UnOiAweDdGRkYwMCwgJ2Nob2NvbGF0ZSc6IDB4RDI2OTFFLCAnY29yYWwnOiAweEZGN0Y1MCxcblx0J2Nvcm5mbG93ZXJibHVlJzogMHg2NDk1RUQsICdjb3Juc2lsayc6IDB4RkZGOERDLCAnY3JpbXNvbic6IDB4REMxNDNDLCAnY3lhbic6IDB4MDBGRkZGLCAnZGFya2JsdWUnOiAweDAwMDA4QiwgJ2RhcmtjeWFuJzogMHgwMDhCOEIsXG5cdCdkYXJrZ29sZGVucm9kJzogMHhCODg2MEIsICdkYXJrZ3JheSc6IDB4QTlBOUE5LCAnZGFya2dyZWVuJzogMHgwMDY0MDAsICdkYXJrZ3JleSc6IDB4QTlBOUE5LCAnZGFya2toYWtpJzogMHhCREI3NkIsICdkYXJrbWFnZW50YSc6IDB4OEIwMDhCLFxuXHQnZGFya29saXZlZ3JlZW4nOiAweDU1NkIyRiwgJ2RhcmtvcmFuZ2UnOiAweEZGOEMwMCwgJ2RhcmtvcmNoaWQnOiAweDk5MzJDQywgJ2RhcmtyZWQnOiAweDhCMDAwMCwgJ2RhcmtzYWxtb24nOiAweEU5OTY3QSwgJ2RhcmtzZWFncmVlbic6IDB4OEZCQzhGLFxuXHQnZGFya3NsYXRlYmx1ZSc6IDB4NDgzRDhCLCAnZGFya3NsYXRlZ3JheSc6IDB4MkY0RjRGLCAnZGFya3NsYXRlZ3JleSc6IDB4MkY0RjRGLCAnZGFya3R1cnF1b2lzZSc6IDB4MDBDRUQxLCAnZGFya3Zpb2xldCc6IDB4OTQwMEQzLFxuXHQnZGVlcHBpbmsnOiAweEZGMTQ5MywgJ2RlZXBza3libHVlJzogMHgwMEJGRkYsICdkaW1ncmF5JzogMHg2OTY5NjksICdkaW1ncmV5JzogMHg2OTY5NjksICdkb2RnZXJibHVlJzogMHgxRTkwRkYsICdmaXJlYnJpY2snOiAweEIyMjIyMixcblx0J2Zsb3JhbHdoaXRlJzogMHhGRkZBRjAsICdmb3Jlc3RncmVlbic6IDB4MjI4QjIyLCAnZnVjaHNpYSc6IDB4RkYwMEZGLCAnZ2FpbnNib3JvJzogMHhEQ0RDREMsICdnaG9zdHdoaXRlJzogMHhGOEY4RkYsICdnb2xkJzogMHhGRkQ3MDAsXG5cdCdnb2xkZW5yb2QnOiAweERBQTUyMCwgJ2dyYXknOiAweDgwODA4MCwgJ2dyZWVuJzogMHgwMDgwMDAsICdncmVlbnllbGxvdyc6IDB4QURGRjJGLCAnZ3JleSc6IDB4ODA4MDgwLCAnaG9uZXlkZXcnOiAweEYwRkZGMCwgJ2hvdHBpbmsnOiAweEZGNjlCNCxcblx0J2luZGlhbnJlZCc6IDB4Q0Q1QzVDLCAnaW5kaWdvJzogMHg0QjAwODIsICdpdm9yeSc6IDB4RkZGRkYwLCAna2hha2knOiAweEYwRTY4QywgJ2xhdmVuZGVyJzogMHhFNkU2RkEsICdsYXZlbmRlcmJsdXNoJzogMHhGRkYwRjUsICdsYXduZ3JlZW4nOiAweDdDRkMwMCxcblx0J2xlbW9uY2hpZmZvbic6IDB4RkZGQUNELCAnbGlnaHRibHVlJzogMHhBREQ4RTYsICdsaWdodGNvcmFsJzogMHhGMDgwODAsICdsaWdodGN5YW4nOiAweEUwRkZGRiwgJ2xpZ2h0Z29sZGVucm9keWVsbG93JzogMHhGQUZBRDIsICdsaWdodGdyYXknOiAweEQzRDNEMyxcblx0J2xpZ2h0Z3JlZW4nOiAweDkwRUU5MCwgJ2xpZ2h0Z3JleSc6IDB4RDNEM0QzLCAnbGlnaHRwaW5rJzogMHhGRkI2QzEsICdsaWdodHNhbG1vbic6IDB4RkZBMDdBLCAnbGlnaHRzZWFncmVlbic6IDB4MjBCMkFBLCAnbGlnaHRza3libHVlJzogMHg4N0NFRkEsXG5cdCdsaWdodHNsYXRlZ3JheSc6IDB4Nzc4ODk5LCAnbGlnaHRzbGF0ZWdyZXknOiAweDc3ODg5OSwgJ2xpZ2h0c3RlZWxibHVlJzogMHhCMEM0REUsICdsaWdodHllbGxvdyc6IDB4RkZGRkUwLCAnbGltZSc6IDB4MDBGRjAwLCAnbGltZWdyZWVuJzogMHgzMkNEMzIsXG5cdCdsaW5lbic6IDB4RkFGMEU2LCAnbWFnZW50YSc6IDB4RkYwMEZGLCAnbWFyb29uJzogMHg4MDAwMDAsICdtZWRpdW1hcXVhbWFyaW5lJzogMHg2NkNEQUEsICdtZWRpdW1ibHVlJzogMHgwMDAwQ0QsICdtZWRpdW1vcmNoaWQnOiAweEJBNTVEMyxcblx0J21lZGl1bXB1cnBsZSc6IDB4OTM3MERCLCAnbWVkaXVtc2VhZ3JlZW4nOiAweDNDQjM3MSwgJ21lZGl1bXNsYXRlYmx1ZSc6IDB4N0I2OEVFLCAnbWVkaXVtc3ByaW5nZ3JlZW4nOiAweDAwRkE5QSwgJ21lZGl1bXR1cnF1b2lzZSc6IDB4NDhEMUNDLFxuXHQnbWVkaXVtdmlvbGV0cmVkJzogMHhDNzE1ODUsICdtaWRuaWdodGJsdWUnOiAweDE5MTk3MCwgJ21pbnRjcmVhbSc6IDB4RjVGRkZBLCAnbWlzdHlyb3NlJzogMHhGRkU0RTEsICdtb2NjYXNpbic6IDB4RkZFNEI1LCAnbmF2YWpvd2hpdGUnOiAweEZGREVBRCxcblx0J25hdnknOiAweDAwMDA4MCwgJ29sZGxhY2UnOiAweEZERjVFNiwgJ29saXZlJzogMHg4MDgwMDAsICdvbGl2ZWRyYWInOiAweDZCOEUyMywgJ29yYW5nZSc6IDB4RkZBNTAwLCAnb3JhbmdlcmVkJzogMHhGRjQ1MDAsICdvcmNoaWQnOiAweERBNzBENixcblx0J3BhbGVnb2xkZW5yb2QnOiAweEVFRThBQSwgJ3BhbGVncmVlbic6IDB4OThGQjk4LCAncGFsZXR1cnF1b2lzZSc6IDB4QUZFRUVFLCAncGFsZXZpb2xldHJlZCc6IDB4REI3MDkzLCAncGFwYXlhd2hpcCc6IDB4RkZFRkQ1LCAncGVhY2hwdWZmJzogMHhGRkRBQjksXG5cdCdwZXJ1JzogMHhDRDg1M0YsICdwaW5rJzogMHhGRkMwQ0IsICdwbHVtJzogMHhEREEwREQsICdwb3dkZXJibHVlJzogMHhCMEUwRTYsICdwdXJwbGUnOiAweDgwMDA4MCwgJ3JlYmVjY2FwdXJwbGUnOiAweDY2MzM5OSwgJ3JlZCc6IDB4RkYwMDAwLCAncm9zeWJyb3duJzogMHhCQzhGOEYsXG5cdCdyb3lhbGJsdWUnOiAweDQxNjlFMSwgJ3NhZGRsZWJyb3duJzogMHg4QjQ1MTMsICdzYWxtb24nOiAweEZBODA3MiwgJ3NhbmR5YnJvd24nOiAweEY0QTQ2MCwgJ3NlYWdyZWVuJzogMHgyRThCNTcsICdzZWFzaGVsbCc6IDB4RkZGNUVFLFxuXHQnc2llbm5hJzogMHhBMDUyMkQsICdzaWx2ZXInOiAweEMwQzBDMCwgJ3NreWJsdWUnOiAweDg3Q0VFQiwgJ3NsYXRlYmx1ZSc6IDB4NkE1QUNELCAnc2xhdGVncmF5JzogMHg3MDgwOTAsICdzbGF0ZWdyZXknOiAweDcwODA5MCwgJ3Nub3cnOiAweEZGRkFGQSxcblx0J3NwcmluZ2dyZWVuJzogMHgwMEZGN0YsICdzdGVlbGJsdWUnOiAweDQ2ODJCNCwgJ3Rhbic6IDB4RDJCNDhDLCAndGVhbCc6IDB4MDA4MDgwLCAndGhpc3RsZSc6IDB4RDhCRkQ4LCAndG9tYXRvJzogMHhGRjYzNDcsICd0dXJxdW9pc2UnOiAweDQwRTBEMCxcblx0J3Zpb2xldCc6IDB4RUU4MkVFLCAnd2hlYXQnOiAweEY1REVCMywgJ3doaXRlJzogMHhGRkZGRkYsICd3aGl0ZXNtb2tlJzogMHhGNUY1RjUsICd5ZWxsb3cnOiAweEZGRkYwMCwgJ3llbGxvd2dyZWVuJzogMHg5QUNEMzIgfTtcblxuY29uc3QgX2hzbEEgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTtcbmNvbnN0IF9oc2xCID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XG5cbmZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIHQgKSB7XG5cblx0aWYgKCB0IDwgMCApIHQgKz0gMTtcblx0aWYgKCB0ID4gMSApIHQgLT0gMTtcblx0aWYgKCB0IDwgMSAvIDYgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiB0O1xuXHRpZiAoIHQgPCAxIC8gMiApIHJldHVybiBxO1xuXHRpZiAoIHQgPCAyIC8gMyApIHJldHVybiBwICsgKCBxIC0gcCApICogNiAqICggMiAvIDMgLSB0ICk7XG5cdHJldHVybiBwO1xuXG59XG5cbi8qKlxuICogQSBDb2xvciBpbnN0YW5jZSBpcyByZXByZXNlbnRlZCBieSBSR0IgY29tcG9uZW50cyBpbiB0aGUgbGluZWFyIDxpPndvcmtpbmdcbiAqIGNvbG9yIHNwYWNlPC9pPiwgd2hpY2ggZGVmYXVsdHMgdG8gYExpbmVhclNSR0JDb2xvclNwYWNlYC4gSW5wdXRzXG4gKiBjb252ZW50aW9uYWxseSB1c2luZyBgU1JHQkNvbG9yU3BhY2VgIChzdWNoIGFzIGhleGFkZWNpbWFscyBhbmQgQ1NTXG4gKiBzdHJpbmdzKSBhcmUgY29udmVydGVkIHRvIHRoZSB3b3JraW5nIGNvbG9yIHNwYWNlIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogYGBganNcbiAqIC8vIGNvbnZlcnRlZCBhdXRvbWF0aWNhbGx5IGZyb20gU1JHQkNvbG9yU3BhY2UgdG8gTGluZWFyU1JHQkNvbG9yU3BhY2VcbiAqIGNvbnN0IGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuc2V0SGV4KCAweDExMjIzMyApO1xuICogYGBgXG4gKiBTb3VyY2UgY29sb3Igc3BhY2VzIG1heSBiZSBzcGVjaWZpZWQgZXhwbGljaXRseSwgdG8gZW5zdXJlIGNvcnJlY3QgY29udmVyc2lvbnMuXG4gKiBgYGBqc1xuICogLy8gYXNzdW1lZCBhbHJlYWR5IExpbmVhclNSR0JDb2xvclNwYWNlOyBubyBjb252ZXJzaW9uXG4gKiBjb25zdCBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLnNldFJHQiggMC41LCAwLjUsIDAuNSApO1xuICpcbiAqIC8vIGNvbnZlcnRlZCBleHBsaWNpdGx5IGZyb20gU1JHQkNvbG9yU3BhY2UgdG8gTGluZWFyU1JHQkNvbG9yU3BhY2VcbiAqIGNvbnN0IGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuc2V0UkdCKCAwLjUsIDAuNSwgMC41LCBTUkdCQ29sb3JTcGFjZSApO1xuICogYGBgXG4gKiBJZiBUSFJFRS5Db2xvck1hbmFnZW1lbnQgaXMgZGlzYWJsZWQsIG5vIGNvbnZlcnNpb25zIG9jY3VyLiBGb3IgZGV0YWlscyxcbiAqIHNlZSA8aT5Db2xvciBtYW5hZ2VtZW50PC9pPi4gSXRlcmF0aW5nIHRocm91Z2ggYSBDb2xvciBpbnN0YW5jZSB3aWxsIHlpZWxkXG4gKiBpdHMgY29tcG9uZW50cyAociwgZywgYikgaW4gdGhlIGNvcnJlc3BvbmRpbmcgb3JkZXIuIEEgQ29sb3IgY2FuIGJlIGluaXRpYWxpc2VkXG4gKiBpbiBhbnkgb2YgdGhlIGZvbGxvd2luZyB3YXlzOlxuICogYGBganNcbiAqIC8vZW1wdHkgY29uc3RydWN0b3IgLSB3aWxsIGRlZmF1bHQgd2hpdGVcbiAqIGNvbnN0IGNvbG9yMSA9IG5ldyBUSFJFRS5Db2xvcigpO1xuICpcbiAqIC8vSGV4YWRlY2ltYWwgY29sb3IgKHJlY29tbWVuZGVkKVxuICogY29uc3QgY29sb3IyID0gbmV3IFRIUkVFLkNvbG9yKCAweGZmMDAwMCApO1xuICpcbiAqIC8vUkdCIHN0cmluZ1xuICogY29uc3QgY29sb3IzID0gbmV3IFRIUkVFLkNvbG9yKFwicmdiKDI1NSwgMCwgMClcIik7XG4gKiBjb25zdCBjb2xvcjQgPSBuZXcgVEhSRUUuQ29sb3IoXCJyZ2IoMTAwJSwgMCUsIDAlKVwiKTtcbiAqXG4gKiAvL1gxMSBjb2xvciBuYW1lIC0gYWxsIDE0MCBjb2xvciBuYW1lcyBhcmUgc3VwcG9ydGVkLlxuICogLy9Ob3RlIHRoZSBsYWNrIG9mIENhbWVsQ2FzZSBpbiB0aGUgbmFtZVxuICogY29uc3QgY29sb3I1ID0gbmV3IFRIUkVFLkNvbG9yKCAnc2t5Ymx1ZScgKTtcbiAqIC8vSFNMIHN0cmluZ1xuICogY29uc3QgY29sb3I2ID0gbmV3IFRIUkVFLkNvbG9yKFwiaHNsKDAsIDEwMCUsIDUwJSlcIik7XG4gKlxuICogLy9TZXBhcmF0ZSBSR0IgdmFsdWVzIGJldHdlZW4gMCBhbmQgMVxuICogY29uc3QgY29sb3I3ID0gbmV3IFRIUkVFLkNvbG9yKCAxLCAwLCAwICk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgQ29sb3Ige1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNvbG9yLlxuXHQgKlxuXHQgKiBOb3RlIHRoYXQgc3RhbmRhcmQgbWV0aG9kIG9mIHNwZWNpZnlpbmcgY29sb3IgaW4gdGhyZWUuanMgaXMgd2l0aCBhIGhleGFkZWNpbWFsIHRyaXBsZXQsXG5cdCAqIGFuZCB0aGF0IG1ldGhvZCBpcyB1c2VkIHRocm91Z2hvdXQgdGhlIHJlc3Qgb2YgdGhlIGRvY3VtZW50YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8Q29sb3IpfSBbcl0gLSBUaGUgcmVkIGNvbXBvbmVudCBvZiB0aGUgY29sb3IuIElmIGBnYCBhbmQgYGJgIGFyZVxuXHQgKiBub3QgcHJvdmlkZWQsIGl0IGNhbiBiZSBoZXhhZGVjaW1hbCB0cmlwbGV0LCBhIENTUy1zdHlsZSBzdHJpbmcgb3IgYW5vdGhlciBgQ29sb3JgIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2ddIC0gVGhlIGdyZWVuIGNvbXBvbmVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtiXSAtIFRoZSBibHVlIGNvbXBvbmVudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByLCBnLCBiICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0NvbG9yID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZWQgY29tcG9uZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5yID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBncmVlbiBjb21wb25lbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmcgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJsdWUgY29tcG9uZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5iID0gMTtcblxuXHRcdHJldHVybiB0aGlzLnNldCggciwgZywgYiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29sb3JzJ3MgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8Q29sb3IpfSBbcl0gLSBUaGUgcmVkIGNvbXBvbmVudCBvZiB0aGUgY29sb3IuIElmIGBnYCBhbmQgYGJgIGFyZVxuXHQgKiBub3QgcHJvdmlkZWQsIGl0IGNhbiBiZSBoZXhhZGVjaW1hbCB0cmlwbGV0LCBhIENTUy1zdHlsZSBzdHJpbmcgb3IgYW5vdGhlciBgQ29sb3JgIGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2ddIC0gVGhlIGdyZWVuIGNvbXBvbmVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtiXSAtIFRoZSBibHVlIGNvbXBvbmVudC5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRzZXQoIHIsIGcsIGIgKSB7XG5cblx0XHRpZiAoIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIHIgaXMgVEhSRUUuQ29sb3IsIGhleCBvciBzdHJpbmdcblxuXHRcdFx0Y29uc3QgdmFsdWUgPSByO1xuXG5cdFx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdFx0dGhpcy5jb3B5KCB2YWx1ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRcdHRoaXMuc2V0SGV4KCB2YWx1ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICkge1xuXG5cdFx0XHRcdHRoaXMuc2V0U3R5bGUoIHZhbHVlICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc2V0UkdCKCByLCBnLCBiICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvbG9ycydzIGNvbXBvbmVudHMgdG8gdGhlIGdpdmVuIHNjYWxhciB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0c2V0U2NhbGFyKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnIgPSBzY2FsYXI7XG5cdFx0dGhpcy5nID0gc2NhbGFyO1xuXHRcdHRoaXMuYiA9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIGNvbG9yIGZyb20gYSBoZXhhZGVjaW1hbCB2YWx1ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGhleCAtIFRoZSBoZXhhZGVjaW1hbCB2YWx1ZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPVNSR0JDb2xvclNwYWNlXSAtIFRoZSBjb2xvciBzcGFjZS5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRzZXRIZXgoIGhleCwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0Q29sb3JNYW5hZ2VtZW50LnRvV29ya2luZ0NvbG9yU3BhY2UoIHRoaXMsIGNvbG9yU3BhY2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIGNvbG9yIGZyb20gUkdCIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHIgLSBSZWQgY2hhbm5lbCB2YWx1ZSBiZXR3ZWVuIGAwLjBgIGFuZCBgMS4wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGcgLSBHcmVlbiBjaGFubmVsIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYiAtIEJsdWUgY2hhbm5lbCB2YWx1ZSBiZXR3ZWVuIGAwLjBgIGFuZCBgMS4wYC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPUNvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0c2V0UkdCKCByLCBnLCBiLCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkge1xuXG5cdFx0dGhpcy5yID0gcjtcblx0XHR0aGlzLmcgPSBnO1xuXHRcdHRoaXMuYiA9IGI7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQudG9Xb3JraW5nQ29sb3JTcGFjZSggdGhpcywgY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgY29sb3IgZnJvbSBSR0IgdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaCAtIEh1ZSB2YWx1ZSBiZXR3ZWVuIGAwLjBgIGFuZCBgMS4wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHMgLSBTYXR1cmF0aW9uIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbCAtIExpZ2h0bmVzcyB2YWx1ZSBiZXR3ZWVuIGAwLjBgIGFuZCBgMS4wYC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPUNvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0c2V0SFNMKCBoLCBzLCBsLCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkge1xuXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblx0XHRoID0gZXVjbGlkZWFuTW9kdWxvKCBoLCAxICk7XG5cdFx0cyA9IGNsYW1wKCBzLCAwLCAxICk7XG5cdFx0bCA9IGNsYW1wKCBsLCAwLCAxICk7XG5cblx0XHRpZiAoIHMgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMuciA9IHRoaXMuZyA9IHRoaXMuYiA9IGw7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwID0gbCA8PSAwLjUgPyBsICogKCAxICsgcyApIDogbCArIHMgLSAoIGwgKiBzICk7XG5cdFx0XHRjb25zdCBxID0gKCAyICogbCApIC0gcDtcblxuXHRcdFx0dGhpcy5yID0gaHVlMnJnYiggcSwgcCwgaCArIDEgLyAzICk7XG5cdFx0XHR0aGlzLmcgPSBodWUycmdiKCBxLCBwLCBoICk7XG5cdFx0XHR0aGlzLmIgPSBodWUycmdiKCBxLCBwLCBoIC0gMSAvIDMgKTtcblxuXHRcdH1cblxuXHRcdENvbG9yTWFuYWdlbWVudC50b1dvcmtpbmdDb2xvclNwYWNlKCB0aGlzLCBjb2xvclNwYWNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhpcyBjb2xvciBmcm9tIGEgQ1NTLXN0eWxlIHN0cmluZy4gRm9yIGV4YW1wbGUsIGByZ2IoMjUwLCAwLDApYCxcblx0ICogYHJnYigxMDAlLCAwJSwgMCUpYCwgYGhzbCgwLCAxMDAlLCA1MCUpYCwgYCNmZjAwMDBgLCBgI2YwMGAsIG9yIGByZWRgICggb3Jcblx0ICogYW55IFtYMTEgY29sb3IgbmFtZV17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWDExX2NvbG9yX25hbWVzI0NvbG9yX25hbWVfY2hhcnR9IC1cblx0ICogYWxsIDE0MCBjb2xvciBuYW1lcyBhcmUgc3VwcG9ydGVkKS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIC0gQ29sb3IgYXMgYSBDU1Mtc3R5bGUgc3RyaW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9U1JHQkNvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdHNldFN0eWxlKCBzdHlsZSwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoIHN0cmluZyApIHtcblxuXHRcdFx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBwYXJzZUZsb2F0KCBzdHJpbmcgKSA8IDEgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IEFscGhhIGNvbXBvbmVudCBvZiAnICsgc3R5bGUgKyAnIHdpbGwgYmUgaWdub3JlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0bGV0IG07XG5cblx0XHRpZiAoIG0gPSAvXihcXHcrKVxcKChbXlxcKV0qKVxcKS8uZXhlYyggc3R5bGUgKSApIHtcblxuXHRcdFx0Ly8gcmdiIC8gaHNsXG5cblx0XHRcdGxldCBjb2xvcjtcblx0XHRcdGNvbnN0IG5hbWUgPSBtWyAxIF07XG5cdFx0XHRjb25zdCBjb21wb25lbnRzID0gbVsgMiBdO1xuXG5cdFx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRcdGNhc2UgJ3JnYic6XG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMjU1LDAsMCkgcmdiYSgyNTUsMCwwLDAuNSlcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UkdCKFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMjU1LFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1LFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMjU1LFxuXHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBjb2xvciA9IC9eXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyooPzosXFxzKihcXGQqXFwuP1xcZCspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMTAwJSwwJSwwJSkgcmdiYSgxMDAlLDAlLDAlLDAuNSlcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA0IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0UkdCKFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDEgXSwgMTAgKSApIC8gMTAwLFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMTAwLFxuXHRcdFx0XHRcdFx0XHRNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDMgXSwgMTAgKSApIC8gMTAwLFxuXHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnaHNsJzpcblx0XHRcdFx0Y2FzZSAnaHNsYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL15cXHMqKFxcZCpcXC4/XFxkKylcXHMqLFxccyooXFxkKlxcLj9cXGQrKVxcJVxccyosXFxzKihcXGQqXFwuP1xcZCspXFwlXFxzKig/OixcXHMqKFxcZCpcXC4/XFxkKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpXG5cblx0XHRcdFx0XHRcdGhhbmRsZUFscGhhKCBjb2xvclsgNCBdICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnNldEhTTChcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggY29sb3JbIDEgXSApIC8gMzYwLFxuXHRcdFx0XHRcdFx0XHRwYXJzZUZsb2F0KCBjb2xvclsgMiBdICkgLyAxMDAsXG5cdFx0XHRcdFx0XHRcdHBhcnNlRmxvYXQoIGNvbG9yWyAzIF0gKSAvIDEwMCxcblx0XHRcdFx0XHRcdFx0Y29sb3JTcGFjZVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciBtb2RlbCAnICsgc3R5bGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbSA9IC9eXFwjKFtBLUZhLWZcXGRdKykkLy5leGVjKCBzdHlsZSApICkge1xuXG5cdFx0XHQvLyBoZXggY29sb3JcblxuXHRcdFx0Y29uc3QgaGV4ID0gbVsgMSBdO1xuXHRcdFx0Y29uc3Qgc2l6ZSA9IGhleC5sZW5ndGg7XG5cblx0XHRcdGlmICggc2l6ZSA9PT0gMyApIHtcblxuXHRcdFx0XHQvLyAjZmYwXG5cdFx0XHRcdHJldHVybiB0aGlzLnNldFJHQihcblx0XHRcdFx0XHRwYXJzZUludCggaGV4LmNoYXJBdCggMCApLCAxNiApIC8gMTUsXG5cdFx0XHRcdFx0cGFyc2VJbnQoIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDE1LFxuXHRcdFx0XHRcdHBhcnNlSW50KCBoZXguY2hhckF0KCAyICksIDE2ICkgLyAxNSxcblx0XHRcdFx0XHRjb2xvclNwYWNlXG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHNpemUgPT09IDYgKSB7XG5cblx0XHRcdFx0Ly8gI2ZmMDAwMFxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIZXgoIHBhcnNlSW50KCBoZXgsIDE2ICksIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogSW52YWxpZCBoZXggY29sb3IgJyArIHN0eWxlICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHN0eWxlICYmIHN0eWxlLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNldENvbG9yTmFtZSggc3R5bGUsIGNvbG9yU3BhY2UgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGlzIGNvbG9yIGZyb20gYSBjb2xvciBuYW1lLiBGYXN0ZXIgdGhhbiB7QGxpbmsgQ29sb3Ijc2V0U3R5bGV9IGlmXG5cdCAqIHlvdSBkb24ndCBuZWVkIHRoZSBvdGhlciBDU1Mtc3R5bGUgZm9ybWF0cy5cblx0ICpcblx0ICogRm9yIGNvbnZlbmllbmNlLCB0aGUgbGlzdCBvZiBuYW1lcyBpcyBleHBvc2VkIGluIGBDb2xvci5OQU1FU2AgYXMgYSBoYXNoLlxuXHQgKiBgYGBqc1xuXHQgKiBDb2xvci5OQU1FUy5hbGljZWJsdWUgLy8gcmV0dXJucyAweEYwRjhGRlxuXHQgKiBgYGBcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIC0gVGhlIGNvbG9yIG5hbWUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1TUkdCQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0c2V0Q29sb3JOYW1lKCBzdHlsZSwgY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0Ly8gY29sb3Iga2V5d29yZHNcblx0XHRjb25zdCBoZXggPSBfY29sb3JLZXl3b3Jkc1sgc3R5bGUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0aWYgKCBoZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gcmVkXG5cdFx0XHR0aGlzLnNldEhleCggaGV4LCBjb2xvclNwYWNlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyB1bmtub3duIGNvbG9yXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBjb2xvciB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuciwgdGhpcy5nLCB0aGlzLmIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBjb2xvciB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSBjb2xvciB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdGNvcHkoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3Iucjtcblx0XHR0aGlzLmcgPSBjb2xvci5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgZ2l2ZW4gY29sb3IgaW50byB0aGlzIGNvbG9yLCBhbmQgdGhlbiBjb252ZXJ0cyB0aGlzIGNvbG9yIGZyb21cblx0ICogYFNSR0JDb2xvclNwYWNlYCB0byBgTGluZWFyU1JHQkNvbG9yU3BhY2VgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSBjb2xvciB0byBjb3B5L2NvbnZlcnQuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0Y29weVNSR0JUb0xpbmVhciggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSBnaXZlbiBjb2xvciBpbnRvIHRoaXMgY29sb3IsIGFuZCB0aGVuIGNvbnZlcnRzIHRoaXMgY29sb3IgZnJvbVxuXHQgKiBgTGluZWFyU1JHQkNvbG9yU3BhY2VgIHRvIGBTUkdCQ29sb3JTcGFjZWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGNvcHkvY29udmVydC5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRjb3B5TGluZWFyVG9TUkdCKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IExpbmVhclRvU1JHQiggY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGlzIGNvbG9yIGZyb20gYFNSR0JDb2xvclNwYWNlYCB0byBgTGluZWFyU1JHQkNvbG9yU3BhY2VgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdGNvbnZlcnRTUkdCVG9MaW5lYXIoKSB7XG5cblx0XHR0aGlzLmNvcHlTUkdCVG9MaW5lYXIoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhpcyBjb2xvciBmcm9tIGBMaW5lYXJTUkdCQ29sb3JTcGFjZWAgdG8gYFNSR0JDb2xvclNwYWNlYC5cblx0ICpcblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRjb252ZXJ0TGluZWFyVG9TUkdCKCkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9TUkdCKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGhleGFkZWNpbWFsIHZhbHVlIG9mIHRoaXMgY29sb3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBbY29sb3JTcGFjZT1TUkdCQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGhleGFkZWNpbWFsIHZhbHVlLlxuXHQgKi9cblx0Z2V0SGV4KCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggY2xhbXAoIF9jb2xvci5yICogMjU1LCAwLCAyNTUgKSApICogNjU1MzYgKyBNYXRoLnJvdW5kKCBjbGFtcCggX2NvbG9yLmcgKiAyNTUsIDAsIDI1NSApICkgKiAyNTYgKyBNYXRoLnJvdW5kKCBjbGFtcCggX2NvbG9yLmIgKiAyNTUsIDAsIDI1NSApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBoZXhhZGVjaW1hbCB2YWx1ZSBvZiB0aGlzIGNvbG9yIGFzIGEgc3RyaW5nIChmb3IgZXhhbXBsZSwgJ0ZGRkZGRicpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9U1JHQkNvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXhhZGVjaW1hbCB2YWx1ZSBhcyBhIHN0cmluZy5cblx0ICovXG5cdGdldEhleFN0cmluZyggY29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlICkge1xuXG5cdFx0cmV0dXJuICggJzAwMDAwMCcgKyB0aGlzLmdldEhleCggY29sb3JTcGFjZSApLnRvU3RyaW5nKCAxNiApICkuc2xpY2UoIC02ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGUgY29sb3JzIFJHQiB2YWx1ZXMgaW50byB0aGUgSFNMIGZvcm1hdCBhbmQgc3RvcmVzIHRoZW0gaW50byB0aGVcblx0ICogZ2l2ZW4gdGFyZ2V0IG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHt7aDpudW1iZXIsczpudW1iZXIsbDpudW1iZXJ9fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPUNvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuXG5cdCAqIEByZXR1cm4ge3toOm51bWJlcixzOm51bWJlcixsOm51bWJlcn19IFRoZSBIU0wgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb2xvci5cblx0ICovXG5cdGdldEhTTCggdGFyZ2V0LCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkge1xuXG5cdFx0Ly8gaCxzLGwgcmFuZ2VzIGFyZSBpbiAwLjAgLSAxLjBcblxuXHRcdENvbG9yTWFuYWdlbWVudC5mcm9tV29ya2luZ0NvbG9yU3BhY2UoIF9jb2xvci5jb3B5KCB0aGlzICksIGNvbG9yU3BhY2UgKTtcblxuXHRcdGNvbnN0IHIgPSBfY29sb3IuciwgZyA9IF9jb2xvci5nLCBiID0gX2NvbG9yLmI7XG5cblx0XHRjb25zdCBtYXggPSBNYXRoLm1heCggciwgZywgYiApO1xuXHRcdGNvbnN0IG1pbiA9IE1hdGgubWluKCByLCBnLCBiICk7XG5cblx0XHRsZXQgaHVlLCBzYXR1cmF0aW9uO1xuXHRcdGNvbnN0IGxpZ2h0bmVzcyA9ICggbWluICsgbWF4ICkgLyAyLjA7XG5cblx0XHRpZiAoIG1pbiA9PT0gbWF4ICkge1xuXG5cdFx0XHRodWUgPSAwO1xuXHRcdFx0c2F0dXJhdGlvbiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcblxuXHRcdFx0c2F0dXJhdGlvbiA9IGxpZ2h0bmVzcyA8PSAwLjUgPyBkZWx0YSAvICggbWF4ICsgbWluICkgOiBkZWx0YSAvICggMiAtIG1heCAtIG1pbiApO1xuXG5cdFx0XHRzd2l0Y2ggKCBtYXggKSB7XG5cblx0XHRcdFx0Y2FzZSByOiBodWUgPSAoIGcgLSBiICkgLyBkZWx0YSArICggZyA8IGIgPyA2IDogMCApOyBicmVhaztcblx0XHRcdFx0Y2FzZSBnOiBodWUgPSAoIGIgLSByICkgLyBkZWx0YSArIDI7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIGI6IGh1ZSA9ICggciAtIGcgKSAvIGRlbHRhICsgNDsgYnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aHVlIC89IDY7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuaCA9IGh1ZTtcblx0XHR0YXJnZXQucyA9IHNhdHVyYXRpb247XG5cdFx0dGFyZ2V0LmwgPSBsaWdodG5lc3M7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgUkdCIHZhbHVlcyBvZiB0aGlzIGNvbG9yIGFuZCBzdG9yZXMgdGhlbSBpbnRvIHRoZSBnaXZlbiB0YXJnZXQgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbG9yfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9Q29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlXSAtIFRoZSBjb2xvciBzcGFjZS5cblx0ICogQHJldHVybiB7Q29sb3J9IFRoZSBSR0IgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb2xvci5cblx0ICovXG5cdGdldFJHQiggdGFyZ2V0LCBjb2xvclNwYWNlID0gQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICkge1xuXG5cdFx0Q29sb3JNYW5hZ2VtZW50LmZyb21Xb3JraW5nQ29sb3JTcGFjZSggX2NvbG9yLmNvcHkoIHRoaXMgKSwgY29sb3JTcGFjZSApO1xuXG5cdFx0dGFyZ2V0LnIgPSBfY29sb3Iucjtcblx0XHR0YXJnZXQuZyA9IF9jb2xvci5nO1xuXHRcdHRhcmdldC5iID0gX2NvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhpcyBjb2xvciBhcyBhIENTUyBzdHlsZSBzdHJpbmcuIEV4YW1wbGU6IGByZ2IoMjU1LDAsMClgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9U1JHQkNvbG9yU3BhY2VdIC0gVGhlIGNvbG9yIHNwYWNlLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBDU1MgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb2xvci5cblx0ICovXG5cdGdldFN0eWxlKCBjb2xvclNwYWNlID0gU1JHQkNvbG9yU3BhY2UgKSB7XG5cblx0XHRDb2xvck1hbmFnZW1lbnQuZnJvbVdvcmtpbmdDb2xvclNwYWNlKCBfY29sb3IuY29weSggdGhpcyApLCBjb2xvclNwYWNlICk7XG5cblx0XHRjb25zdCByID0gX2NvbG9yLnIsIGcgPSBfY29sb3IuZywgYiA9IF9jb2xvci5iO1xuXG5cdFx0aWYgKCBjb2xvclNwYWNlICE9PSBTUkdCQ29sb3JTcGFjZSApIHtcblxuXHRcdFx0Ly8gUmVxdWlyZXMgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCA0IChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLWNvbG9yLTQvKS5cblx0XHRcdHJldHVybiBgY29sb3IoJHsgY29sb3JTcGFjZSB9ICR7IHIudG9GaXhlZCggMyApIH0gJHsgZy50b0ZpeGVkKCAzICkgfSAkeyBiLnRvRml4ZWQoIDMgKSB9KWA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYHJnYigkeyBNYXRoLnJvdW5kKCByICogMjU1ICkgfSwkeyBNYXRoLnJvdW5kKCBnICogMjU1ICkgfSwkeyBNYXRoLnJvdW5kKCBiICogMjU1ICkgfSlgO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gSFNMIHZhbHVlcyB0byB0aGlzIGNvbG9yJ3MgdmFsdWVzLlxuXHQgKiBJbnRlcm5hbGx5LCB0aGlzIGNvbnZlcnRzIHRoZSBjb2xvcidzIFJHQiB2YWx1ZXMgdG8gSFNMLCBhZGRzIEhTTFxuXHQgKiBhbmQgdGhlbiBjb252ZXJ0cyB0aGUgY29sb3IgYmFjayB0byBSR0IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoIC0gSHVlIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFNhdHVyYXRpb24gdmFsdWUgYmV0d2VlbiBgMC4wYCBhbmQgYDEuMGAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsIC0gTGlnaHRuZXNzIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgLlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdG9mZnNldEhTTCggaCwgcywgbCApIHtcblxuXHRcdHRoaXMuZ2V0SFNMKCBfaHNsQSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0SFNMKCBfaHNsQS5oICsgaCwgX2hzbEEucyArIHMsIF9oc2xBLmwgKyBsICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBSR0IgdmFsdWVzIG9mIHRoZSBnaXZlbiBjb2xvciB0byB0aGUgUkdCIHZhbHVlcyBvZiB0aGlzIGNvbG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSBjb2xvciB0byBhZGQuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0YWRkKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciArPSBjb2xvci5yO1xuXHRcdHRoaXMuZyArPSBjb2xvci5nO1xuXHRcdHRoaXMuYiArPSBjb2xvci5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBSR0IgdmFsdWVzIG9mIHRoZSBnaXZlbiBjb2xvcnMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yMSAtIFRoZSBmaXJzdCBjb2xvci5cblx0ICogQHBhcmFtIHtDb2xvcn0gY29sb3IyIC0gVGhlIHNlY29uZCBjb2xvci5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRhZGRDb2xvcnMoIGNvbG9yMSwgY29sb3IyICkge1xuXG5cdFx0dGhpcy5yID0gY29sb3IxLnIgKyBjb2xvcjIucjtcblx0XHR0aGlzLmcgPSBjb2xvcjEuZyArIGNvbG9yMi5nO1xuXHRcdHRoaXMuYiA9IGNvbG9yMS5iICsgY29sb3IyLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIHNjYWxhciB2YWx1ZSB0byB0aGUgUkdCIHZhbHVlcyBvZiB0aGlzIGNvbG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gYWRkLlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdGFkZFNjYWxhciggcyApIHtcblxuXHRcdHRoaXMuciArPSBzO1xuXHRcdHRoaXMuZyArPSBzO1xuXHRcdHRoaXMuYiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdWJ0cmFjdHMgdGhlIFJHQiB2YWx1ZXMgb2YgdGhlIGdpdmVuIGNvbG9yIGZyb20gdGhlIFJHQiB2YWx1ZXMgb2YgdGhpcyBjb2xvci5cblx0ICpcblx0ICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY29sb3IgdG8gc3VidHJhY3QuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0c3ViKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IE1hdGgubWF4KCAwLCB0aGlzLnIgLSBjb2xvci5yICk7XG5cdFx0dGhpcy5nID0gTWF0aC5tYXgoIDAsIHRoaXMuZyAtIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBNYXRoLm1heCggMCwgdGhpcy5iIC0gY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoZSBSR0IgdmFsdWVzIG9mIHRoZSBnaXZlbiBjb2xvciB3aXRoIHRoZSBSR0IgdmFsdWVzIG9mIHRoaXMgY29sb3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIG11bHRpcGx5LlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdG11bHRpcGx5KCBjb2xvciApIHtcblxuXHRcdHRoaXMuciAqPSBjb2xvci5yO1xuXHRcdHRoaXMuZyAqPSBjb2xvci5nO1xuXHRcdHRoaXMuYiAqPSBjb2xvci5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNdWx0aXBsaWVzIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUgd2l0aCB0aGUgUkdCIHZhbHVlcyBvZiB0aGlzIGNvbG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcyAtIFRoZSBzY2FsYXIgdG8gbXVsdGlwbHkuXG5cdCAqIEByZXR1cm4ge0NvbG9yfSBBIHJlZmVyZW5jZSB0byB0aGlzIGNvbG9yLlxuXHQgKi9cblx0bXVsdGlwbHlTY2FsYXIoIHMgKSB7XG5cblx0XHR0aGlzLnIgKj0gcztcblx0XHR0aGlzLmcgKj0gcztcblx0XHR0aGlzLmIgKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTGluZWFybHkgaW50ZXJwb2xhdGVzIHRoaXMgY29sb3IncyBSR0IgdmFsdWVzIHRvd2FyZCB0aGUgUkdCIHZhbHVlcyBvZiB0aGVcblx0ICogZ2l2ZW4gY29sb3IuIFRoZSBhbHBoYSBhcmd1bWVudCBjYW4gYmUgdGhvdWdodCBvZiBhcyB0aGUgcmF0aW8gYmV0d2VlblxuXHQgKiB0aGUgdHdvIGNvbG9ycywgd2hlcmUgYDAuMGAgaXMgdGhpcyBjb2xvciBhbmQgYDEuMGAgaXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSBjb2xvciB0byBjb252ZXJnZSBvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLDFdYC5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRsZXJwKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnIgKz0gKCBjb2xvci5yIC0gdGhpcy5yICkgKiBhbHBoYTtcblx0XHR0aGlzLmcgKz0gKCBjb2xvci5nIC0gdGhpcy5nICkgKiBhbHBoYTtcblx0XHR0aGlzLmIgKz0gKCBjb2xvci5iIC0gdGhpcy5iICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdGhlIGdpdmVuIGNvbG9ycyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhpcyBpbnN0YW5jZS5cblx0ICogVGhlIGFscGhhIGFyZ3VtZW50IGNhbiBiZSB0aG91Z2h0IG9mIGFzIHRoZSByYXRpbyBiZXR3ZWVuIHRoZSB0d28gY29sb3JzLCB3aGVyZSBgMC4wYFxuXHQgKiBpcyB0aGUgZmlyc3QgYW5kIGAxLjBgIGlzIHRoZSBzZWNvbmQgY29sb3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yMSAtIFRoZSBmaXJzdCBjb2xvci5cblx0ICogQHBhcmFtIHtDb2xvcn0gY29sb3IyIC0gVGhlIHNlY29uZCBjb2xvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBjbG9zZWQgaW50ZXJ2YWwgYFswLDFdYC5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRsZXJwQ29sb3JzKCBjb2xvcjEsIGNvbG9yMiwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnIgPSBjb2xvcjEuciArICggY29sb3IyLnIgLSBjb2xvcjEuciApICogYWxwaGE7XG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyAoIGNvbG9yMi5nIC0gY29sb3IxLmcgKSAqIGFscGhhO1xuXHRcdHRoaXMuYiA9IGNvbG9yMS5iICsgKCBjb2xvcjIuYiAtIGNvbG9yMS5iICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTGluZWFybHkgaW50ZXJwb2xhdGVzIHRoaXMgY29sb3IncyBIU0wgdmFsdWVzIHRvd2FyZCB0aGUgSFNMIHZhbHVlcyBvZiB0aGVcblx0ICogZ2l2ZW4gY29sb3IuIEl0IGRpZmZlcnMgZnJvbSB7QGxpbmsgQ29sb3IjbGVycH0gYnkgbm90IGludGVycG9sYXRpbmcgc3RyYWlnaHRcblx0ICogZnJvbSBvbmUgY29sb3IgdG8gdGhlIG90aGVyLCBidXQgaW5zdGVhZCBnb2luZyB0aHJvdWdoIGFsbCB0aGUgaHVlcyBpbiBiZXR3ZWVuXG5cdCAqIHRob3NlIHR3byBjb2xvcnMuIFRoZSBhbHBoYSBhcmd1bWVudCBjYW4gYmUgdGhvdWdodCBvZiBhcyB0aGUgcmF0aW8gYmV0d2VlblxuXHQgKiB0aGUgdHdvIGNvbG9ycywgd2hlcmUgMC4wIGlzIHRoaXMgY29sb3IgYW5kIDEuMCBpcyB0aGUgZmlyc3QgYXJndW1lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gVGhlIGNvbG9yIHRvIGNvbnZlcmdlIG9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgaW50ZXJwb2xhdGlvbiBmYWN0b3IgaW4gdGhlIGNsb3NlZCBpbnRlcnZhbCBgWzAsMV1gLlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdGxlcnBIU0woIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHRoaXMuZ2V0SFNMKCBfaHNsQSApO1xuXHRcdGNvbG9yLmdldEhTTCggX2hzbEIgKTtcblxuXHRcdGNvbnN0IGggPSBsZXJwKCBfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSApO1xuXHRcdGNvbnN0IHMgPSBsZXJwKCBfaHNsQS5zLCBfaHNsQi5zLCBhbHBoYSApO1xuXHRcdGNvbnN0IGwgPSBsZXJwKCBfaHNsQS5sLCBfaHNsQi5sLCBhbHBoYSApO1xuXG5cdFx0dGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgY29sb3IncyBSR0IgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiAzRCB2ZWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdiAtIFRoZSB2ZWN0b3IgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdHNldEZyb21WZWN0b3IzKCB2ICkge1xuXG5cdFx0dGhpcy5yID0gdi54O1xuXHRcdHRoaXMuZyA9IHYueTtcblx0XHR0aGlzLmIgPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRyYW5zZm9ybXMgdGhpcyBjb2xvciB3aXRoIHRoZSBnaXZlbiAzeDMgbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDN9IG0gLSBUaGUgbWF0cml4LlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdGFwcGx5TWF0cml4MyggbSApIHtcblxuXHRcdGNvbnN0IHIgPSB0aGlzLnIsIGcgPSB0aGlzLmcsIGIgPSB0aGlzLmI7XG5cdFx0Y29uc3QgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnIgPSBlWyAwIF0gKiByICsgZVsgMyBdICogZyArIGVbIDYgXSAqIGI7XG5cdFx0dGhpcy5nID0gZVsgMSBdICogciArIGVbIDQgXSAqIGcgKyBlWyA3IF0gKiBiO1xuXHRcdHRoaXMuYiA9IGVbIDIgXSAqIHIgKyBlWyA1IF0gKiBnICsgZVsgOCBdICogYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBjb2xvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q29sb3J9IGMgLSBUaGUgY29sb3IgdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBib3VuZGluZyBjb2xvciBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqL1xuXHRlcXVhbHMoIGMgKSB7XG5cblx0XHRyZXR1cm4gKCBjLnIgPT09IHRoaXMuciApICYmICggYy5nID09PSB0aGlzLmcgKSAmJiAoIGMuYiA9PT0gdGhpcy5iICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgY29sb3IncyBSR0IgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiBhcnJheS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIFJHQiB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIG9mZnNldCBpbnRvIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7Q29sb3J9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY29sb3IuXG5cdCAqL1xuXHRmcm9tQXJyYXkoIGFycmF5LCBvZmZzZXQgPSAwICkge1xuXG5cdFx0dGhpcy5yID0gYXJyYXlbIG9mZnNldCBdO1xuXHRcdHRoaXMuZyA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy5iID0gYXJyYXlbIG9mZnNldCArIDIgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogV3JpdGVzIHRoZSBSR0IgY29tcG9uZW50cyBvZiB0aGlzIGNvbG9yIHRvIHRoZSBnaXZlbiBhcnJheS4gSWYgbm8gYXJyYXkgaXMgcHJvdmlkZWQsXG5cdCAqIHRoZSBtZXRob2QgcmV0dXJucyBhIG5ldyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbYXJyYXk9W11dIC0gVGhlIHRhcmdldCBhcnJheSBob2xkaW5nIHRoZSBjb2xvciBjb21wb25lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIEluZGV4IG9mIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIGNvbG9yIGNvbXBvbmVudHMuXG5cdCAqL1xuXHR0b0FycmF5KCBhcnJheSA9IFtdLCBvZmZzZXQgPSAwICkge1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy5yO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLmc7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuYjtcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyBjb2xvciBmcm9tIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaG9sZGluZyBjb2xvciBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBjb2xvci5cblx0ICovXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKSB7XG5cblx0XHR0aGlzLnIgPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLmcgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLmIgPSBhdHRyaWJ1dGUuZ2V0WiggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2RzIGRlZmluZXMgdGhlIHNlcmlhbGl6YXRpb24gcmVzdWx0IG9mIHRoaXMgY2xhc3MuIFJldHVybnMgdGhlIGNvbG9yXG5cdCAqIGFzIGEgaGV4YWRlY2ltYWwgdmFsdWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGhleGFkZWNpbWFsIHZhbHVlLlxuXHQgKi9cblx0dG9KU09OKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0SGV4KCk7XG5cblx0fVxuXG5cdCpbIFN5bWJvbC5pdGVyYXRvciBdKCkge1xuXG5cdFx0eWllbGQgdGhpcy5yO1xuXHRcdHlpZWxkIHRoaXMuZztcblx0XHR5aWVsZCB0aGlzLmI7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9jb2xvciA9IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCk7XG5cbi8qKlxuICogQSBkaWN0aW9uYXJ5IHdpdGggWDExIGNvbG9yIG5hbWVzLlxuICpcbiAqIE5vdGUgdGhhdCBtdWx0aXBsZSB3b3JkcyBzdWNoIGFzIERhcmsgT3JhbmdlIGJlY29tZSB0aGUgc3RyaW5nICdkYXJrb3JhbmdlJy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5Db2xvci5OQU1FUyA9IF9jb2xvcktleXdvcmRzO1xuXG5sZXQgX21hdGVyaWFsSWQgPSAwO1xuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIG1hdGVyaWFscy5cbiAqXG4gKiBNYXRlcmlhbHMgZGVmaW5lIHRoZSBhcHBlYXJhbmNlIG9mIHJlbmRlcmFibGUgM0Qgb2JqZWN0cy5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBhdWdtZW50cyBFdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgTWF0ZXJpYWwgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1hdGVyaWFsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBJRCBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAbmFtZSBNYXRlcmlhbCNpZFxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfbWF0ZXJpYWxJZCArKyB9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgVVVJRCBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0eXBlIHByb3BlcnR5IGlzIHVzZWQgZm9yIGRldGVjdGluZyB0aGUgb2JqZWN0IHR5cGVcblx0XHQgKiBpbiBjb250ZXh0IG9mIHNlcmlhbGl6YXRpb24vZGVzZXJpYWxpemF0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSAnTWF0ZXJpYWwnO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgYmxlbmRpbmcgdHlwZSBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBJdCBtdXN0IGJlIHNldCB0byBgQ3VzdG9tQmxlbmRpbmdgIGlmIGN1c3RvbSBibGVuZGluZyBwcm9wZXJ0aWVzIGxpa2Vcblx0XHQgKiB7QGxpbmsgTWF0ZXJpYWwjYmxlbmRTcmN9LCB7QGxpbmsgTWF0ZXJpYWwjYmxlbmREc3R9IG9yIHtAbGluayBNYXRlcmlhbCNibGVuZEVxdWF0aW9ufVxuXHRcdCAqIHNob3VsZCBoYXZlIGFueSBlZmZlY3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE5vQmxlbmRpbmd8Tm9ybWFsQmxlbmRpbmd8QWRkaXRpdmVCbGVuZGluZ3xTdWJ0cmFjdGl2ZUJsZW5kaW5nfE11bHRpcGx5QmxlbmRpbmd8Q3VzdG9tQmxlbmRpbmcpfVxuXHRcdCAqIEBkZWZhdWx0IE5vcm1hbEJsZW5kaW5nXG5cdFx0ICovXG5cdFx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB3aGljaCBzaWRlIG9mIGZhY2VzIHdpbGwgYmUgcmVuZGVyZWQgLSBmcm9udCwgYmFjayBvciBib3RoLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhGcm9udFNpZGV8QmFja1NpZGV8RG91YmxlU2lkZSl9XG5cdFx0ICogQGRlZmF1bHQgRnJvbnRTaWRlXG5cdFx0ICovXG5cdFx0dGhpcy5zaWRlID0gRnJvbnRTaWRlO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0IHRvIGB0cnVlYCwgdmVydGV4IGNvbG9ycyBzaG91bGQgYmUgdXNlZC5cblx0XHQgKlxuXHRcdCAqIFRoZSBlbmdpbmUgc3VwcG9ydHMgUkdCIGFuZCBSR0JBIHZlcnRleCBjb2xvcnMgZGVwZW5kaW5nIG9uIHdoZXRoZXIgYSB0aHJlZSAoUkdCKSBvclxuXHRcdCAqIGZvdXIgKFJHQkEpIGNvbXBvbmVudCBjb2xvciBidWZmZXIgYXR0cmlidXRlIGlzIHVzZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIGhvdyB0cmFuc3BhcmVudCB0aGUgbWF0ZXJpYWwgaXMuXG5cdFx0ICogQSB2YWx1ZSBvZiBgMC4wYCBpbmRpY2F0ZXMgZnVsbHkgdHJhbnNwYXJlbnQsIGAxLjBgIGlzIGZ1bGx5IG9wYXF1ZS5cblx0XHQgKlxuXHRcdCAqIElmIHRoZSB7QGxpbmsgTWF0ZXJpYWwjdHJhbnNwYXJlbnR9IGlzIG5vdCBzZXQgdG8gYHRydWVgLFxuXHRcdCAqIHRoZSBtYXRlcmlhbCB3aWxsIHJlbWFpbiBmdWxseSBvcGFxdWUgYW5kIHRoaXMgdmFsdWUgd2lsbCBvbmx5IGFmZmVjdCBpdHMgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLm9wYWNpdHkgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB3aGV0aGVyIHRoaXMgbWF0ZXJpYWwgaXMgdHJhbnNwYXJlbnQuIFRoaXMgaGFzIGFuIGVmZmVjdCBvblxuXHRcdCAqIHJlbmRlcmluZyBhcyB0cmFuc3BhcmVudCBvYmplY3RzIG5lZWQgc3BlY2lhbCB0cmVhdG1lbnQgYW5kIGFyZSByZW5kZXJlZFxuXHRcdCAqIGFmdGVyIG5vbi10cmFuc3BhcmVudCBvYmplY3RzLlxuXHRcdCAqXG5cdFx0ICogV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIGV4dGVudCB0byB3aGljaCB0aGUgbWF0ZXJpYWwgaXMgdHJhbnNwYXJlbnQgaXNcblx0XHQgKiBjb250cm9sbGVkIGJ5IHtAbGluayBNYXRlcmlhbCNvcGFjaXR5fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlcyBhbHBoYSBoYXNoZWQgdHJhbnNwYXJlbmN5LCBhbiBhbHRlcm5hdGl2ZSB0byB7QGxpbmsgTWF0ZXJpYWwjdHJhbnNwYXJlbnR9IG9yXG5cdFx0ICoge0BsaW5rIE1hdGVyaWFsI2FscGhhVGVzdH0uIFRoZSBtYXRlcmlhbCB3aWxsIG5vdCBiZSByZW5kZXJlZCBpZiBvcGFjaXR5IGlzIGxvd2VyIHRoYW5cblx0XHQgKiBhIHJhbmRvbSB0aHJlc2hvbGQuIFJhbmRvbWl6YXRpb24gaW50cm9kdWNlcyBzb21lIGdyYWluIG9yIG5vaXNlLCBidXQgYXBwcm94aW1hdGVzIGFscGhhXG5cdFx0ICogYmxlbmRpbmcgd2l0aG91dCB0aGUgYXNzb2NpYXRlZCBwcm9ibGVtcyBvZiBzb3J0aW5nLiBVc2luZyBUQUEgY2FuIHJlZHVjZSB0aGUgcmVzdWx0aW5nIG5vaXNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmFscGhhSGFzaCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgYmxlbmRpbmcgc291cmNlIGZhY3Rvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoWmVyb0ZhY3RvcnxPbmVGYWN0b3J8U3JjQ29sb3JGYWN0b3J8T25lTWludXNTcmNDb2xvckZhY3RvcnxTcmNBbHBoYUZhY3RvcnxPbmVNaW51c1NyY0FscGhhRmFjdG9yfERzdEFscGhhRmFjdG9yfE9uZU1pbnVzRHN0QWxwaGFGYWN0b3J8RHN0Q29sb3JGYWN0b3J8T25lTWludXNEc3RDb2xvckZhY3RvcnxTcmNBbHBoYVNhdHVyYXRlRmFjdG9yfENvbnN0YW50Q29sb3JGYWN0b3J8T25lTWludXNDb25zdGFudENvbG9yRmFjdG9yfENvbnN0YW50QWxwaGFGYWN0b3J8T25lTWludXNDb25zdGFudEFscGhhRmFjdG9yKX1cblx0XHQgKiBAZGVmYXVsdCBTcmNBbHBoYUZhY3RvclxuXHRcdCAqL1xuXHRcdHRoaXMuYmxlbmRTcmMgPSBTcmNBbHBoYUZhY3RvcjtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIGJsZW5kaW5nIGRlc3RpbmF0aW9uIGZhY3Rvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoWmVyb0ZhY3RvcnxPbmVGYWN0b3J8U3JjQ29sb3JGYWN0b3J8T25lTWludXNTcmNDb2xvckZhY3RvcnxTcmNBbHBoYUZhY3RvcnxPbmVNaW51c1NyY0FscGhhRmFjdG9yfERzdEFscGhhRmFjdG9yfE9uZU1pbnVzRHN0QWxwaGFGYWN0b3J8RHN0Q29sb3JGYWN0b3J8T25lTWludXNEc3RDb2xvckZhY3RvcnxTcmNBbHBoYVNhdHVyYXRlRmFjdG9yfENvbnN0YW50Q29sb3JGYWN0b3J8T25lTWludXNDb25zdGFudENvbG9yRmFjdG9yfENvbnN0YW50QWxwaGFGYWN0b3J8T25lTWludXNDb25zdGFudEFscGhhRmFjdG9yKX1cblx0XHQgKiBAZGVmYXVsdCBPbmVNaW51c1NyY0FscGhhRmFjdG9yXG5cdFx0ICovXG5cdFx0dGhpcy5ibGVuZERzdCA9IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3I7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBibGVuZGluZyBlcXVhdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoQWRkRXF1YXRpb258U3VidHJhY3RFcXVhdGlvbnxSZXZlcnNlU3VidHJhY3RFcXVhdGlvbnxNaW5FcXVhdGlvbnxNYXhFcXVhdGlvbil9XG5cdFx0ICogQGRlZmF1bHQgQWRkRXF1YXRpb25cblx0XHQgKi9cblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIGJsZW5kaW5nIHNvdXJjZSBhbHBoYSBmYWN0b3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhaZXJvRmFjdG9yfE9uZUZhY3RvcnxTcmNDb2xvckZhY3RvcnxPbmVNaW51c1NyY0NvbG9yRmFjdG9yfFNyY0FscGhhRmFjdG9yfE9uZU1pbnVzU3JjQWxwaGFGYWN0b3J8RHN0QWxwaGFGYWN0b3J8T25lTWludXNEc3RBbHBoYUZhY3RvcnxEc3RDb2xvckZhY3RvcnxPbmVNaW51c0RzdENvbG9yRmFjdG9yfFNyY0FscGhhU2F0dXJhdGVGYWN0b3J8Q29uc3RhbnRDb2xvckZhY3RvcnxPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3J8Q29uc3RhbnRBbHBoYUZhY3RvcnxPbmVNaW51c0NvbnN0YW50QWxwaGFGYWN0b3IpfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgYmxlbmRpbmcgZGVzdGluYXRpb24gYWxwaGEgZmFjdG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez8oWmVyb0ZhY3RvcnxPbmVGYWN0b3J8U3JjQ29sb3JGYWN0b3J8T25lTWludXNTcmNDb2xvckZhY3RvcnxTcmNBbHBoYUZhY3RvcnxPbmVNaW51c1NyY0FscGhhRmFjdG9yfERzdEFscGhhRmFjdG9yfE9uZU1pbnVzRHN0QWxwaGFGYWN0b3J8RHN0Q29sb3JGYWN0b3J8T25lTWludXNEc3RDb2xvckZhY3RvcnxTcmNBbHBoYVNhdHVyYXRlRmFjdG9yfENvbnN0YW50Q29sb3JGYWN0b3J8T25lTWludXNDb25zdGFudENvbG9yRmFjdG9yfENvbnN0YW50QWxwaGFGYWN0b3J8T25lTWludXNDb25zdGFudEFscGhhRmFjdG9yKX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIGJsZW5kaW5nIGVxdWF0aW9uIG9mIHRoZSBhbHBoYSBjaGFubmVsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez8oQWRkRXF1YXRpb258U3VidHJhY3RFcXVhdGlvbnxSZXZlcnNlU3VidHJhY3RFcXVhdGlvbnxNaW5FcXVhdGlvbnxNYXhFcXVhdGlvbil9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIFJHQiB2YWx1ZXMgb2YgdGhlIGNvbnN0YW50IGJsZW5kIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBwcm9wZXJ0eSBoYXMgb25seSBhbiBlZmZlY3Qgd2hlbiB1c2luZyBjdXN0b20gYmxlbmRpbmcgd2l0aCBgQ29uc3RhbnRDb2xvcmAgb3IgYE9uZU1pbnVzQ29uc3RhbnRDb2xvcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuYmxlbmRDb2xvciA9IG5ldyBDb2xvciggMCwgMCwgMCApO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgYWxwaGEgdmFsdWUgb2YgdGhlIGNvbnN0YW50IGJsZW5kIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBwcm9wZXJ0eSBoYXMgb25seSBhbiBlZmZlY3Qgd2hlbiB1c2luZyBjdXN0b20gYmxlbmRpbmcgd2l0aCBgQ29uc3RhbnRBbHBoYWAgb3IgYE9uZU1pbnVzQ29uc3RhbnRBbHBoYWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmJsZW5kQWxwaGEgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgZGVwdGggZnVuY3Rpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE5ldmVyRGVwdGh8QWx3YXlzRGVwdGh8TGVzc0RlcHRofExlc3NFcXVhbERlcHRofEVxdWFsRGVwdGh8R3JlYXRlckVxdWFsRGVwdGh8R3JlYXRlckRlcHRofE5vdEVxdWFsRGVwdGgpfVxuXHRcdCAqIEBkZWZhdWx0IExlc3NFcXVhbERlcHRoXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBMZXNzRXF1YWxEZXB0aDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gaGF2ZSBkZXB0aCB0ZXN0IGVuYWJsZWQgd2hlbiByZW5kZXJpbmcgdGhpcyBtYXRlcmlhbC5cblx0XHQgKiBXaGVuIHRoZSBkZXB0aCB0ZXN0IGlzIGRpc2FibGVkLCB0aGUgZGVwdGggd3JpdGUgd2lsbCBhbHNvIGJlIGltcGxpY2l0bHkgZGlzYWJsZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aFRlc3QgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciByZW5kZXJpbmcgdGhpcyBtYXRlcmlhbCBoYXMgYW55IGVmZmVjdCBvbiB0aGUgZGVwdGggYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogV2hlbiBkcmF3aW5nIDJEIG92ZXJsYXlzIGl0IGNhbiBiZSB1c2VmdWwgdG8gZGlzYWJsZSB0aGUgZGVwdGggd3JpdGluZyBpblxuXHRcdCAqIG9yZGVyIHRvIGxheWVyIHNldmVyYWwgdGhpbmdzIHRvZ2V0aGVyIHdpdGhvdXQgY3JlYXRpbmcgei1pbmRleCBhcnRpZmFjdHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aFdyaXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBiaXQgbWFzayB0byB1c2Ugd2hlbiB3cml0aW5nIHRvIHRoZSBzdGVuY2lsIGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMHhmZlxuXHRcdCAqL1xuXHRcdHRoaXMuc3RlbmNpbFdyaXRlTWFzayA9IDB4ZmY7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3RlbmNpbCBjb21wYXJpc29uIGZ1bmN0aW9uIHRvIHVzZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtOZXZlclN0ZW5jaWxGdW5jfExlc3NTdGVuY2lsRnVuY3xFcXVhbFN0ZW5jaWxGdW5jfExlc3NFcXVhbFN0ZW5jaWxGdW5jfEdyZWF0ZXJTdGVuY2lsRnVuY3xOb3RFcXVhbFN0ZW5jaWxGdW5jfEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jfEFsd2F5c1N0ZW5jaWxGdW5jfVxuXHRcdCAqIEBkZWZhdWx0IEFsd2F5c1N0ZW5jaWxGdW5jXG5cdFx0ICovXG5cdFx0dGhpcy5zdGVuY2lsRnVuYyA9IEFsd2F5c1N0ZW5jaWxGdW5jO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHZhbHVlIHRvIHVzZSB3aGVuIHBlcmZvcm1pbmcgc3RlbmNpbCBjb21wYXJpc29ucyBvciBzdGVuY2lsIG9wZXJhdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJpdCBtYXNrIHRvIHVzZSB3aGVuIGNvbXBhcmluZyBhZ2FpbnN0IHRoZSBzdGVuY2lsIGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMHhmZlxuXHRcdCAqL1xuXHRcdHRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gMHhmZjtcblxuXHRcdC8qKlxuXHRcdCAqIFdoaWNoIHN0ZW5jaWwgb3BlcmF0aW9uIHRvIHBlcmZvcm0gd2hlbiB0aGUgY29tcGFyaXNvbiBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7WmVyb1N0ZW5jaWxPcHxLZWVwU3RlbmNpbE9wfFJlcGxhY2VTdGVuY2lsT3B8SW5jcmVtZW50U3RlbmNpbE9wfERlY3JlbWVudFN0ZW5jaWxPcHxJbmNyZW1lbnRXcmFwU3RlbmNpbE9wfERlY3JlbWVudFdyYXBTdGVuY2lsT3B8SW52ZXJ0U3RlbmNpbE9wfVxuXHRcdCAqIEBkZWZhdWx0IEtlZXBTdGVuY2lsT3Bcblx0XHQgKi9cblx0XHR0aGlzLnN0ZW5jaWxGYWlsID0gS2VlcFN0ZW5jaWxPcDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoaWNoIHN0ZW5jaWwgb3BlcmF0aW9uIHRvIHBlcmZvcm0gd2hlbiB0aGUgY29tcGFyaXNvbiBmdW5jdGlvbiByZXR1cm5zXG5cdFx0ICogYHRydWVgIGJ1dCB0aGUgZGVwdGggdGVzdCBmYWlscy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtaZXJvU3RlbmNpbE9wfEtlZXBTdGVuY2lsT3B8UmVwbGFjZVN0ZW5jaWxPcHxJbmNyZW1lbnRTdGVuY2lsT3B8RGVjcmVtZW50U3RlbmNpbE9wfEluY3JlbWVudFdyYXBTdGVuY2lsT3B8RGVjcmVtZW50V3JhcFN0ZW5jaWxPcHxJbnZlcnRTdGVuY2lsT3B9XG5cdFx0ICogQGRlZmF1bHQgS2VlcFN0ZW5jaWxPcFxuXHRcdCAqL1xuXHRcdHRoaXMuc3RlbmNpbFpGYWlsID0gS2VlcFN0ZW5jaWxPcDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoaWNoIHN0ZW5jaWwgb3BlcmF0aW9uIHRvIHBlcmZvcm0gd2hlbiB0aGUgY29tcGFyaXNvbiBmdW5jdGlvbiByZXR1cm5zXG5cdFx0ICogYHRydWVgIGFuZCB0aGUgZGVwdGggdGVzdCBwYXNzZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7WmVyb1N0ZW5jaWxPcHxLZWVwU3RlbmNpbE9wfFJlcGxhY2VTdGVuY2lsT3B8SW5jcmVtZW50U3RlbmNpbE9wfERlY3JlbWVudFN0ZW5jaWxPcHxJbmNyZW1lbnRXcmFwU3RlbmNpbE9wfERlY3JlbWVudFdyYXBTdGVuY2lsT3B8SW52ZXJ0U3RlbmNpbE9wfVxuXHRcdCAqIEBkZWZhdWx0IEtlZXBTdGVuY2lsT3Bcblx0XHQgKi9cblx0XHR0aGlzLnN0ZW5jaWxaUGFzcyA9IEtlZXBTdGVuY2lsT3A7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHN0ZW5jaWwgb3BlcmF0aW9ucyBhcmUgcGVyZm9ybWVkIGFnYWluc3QgdGhlIHN0ZW5jaWwgYnVmZmVyLiBJblxuXHRcdCAqIG9yZGVyIHRvIHBlcmZvcm0gd3JpdGVzIG9yIGNvbXBhcmlzb25zIGFnYWluc3QgdGhlIHN0ZW5jaWwgYnVmZmVyIHRoaXNcblx0XHQgKiB2YWx1ZSBtdXN0IGJlIGB0cnVlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZXItZGVmaW5lZCBjbGlwcGluZyBwbGFuZXMgc3BlY2lmaWVkIGFzIFRIUkVFLlBsYW5lIG9iamVjdHMgaW4gd29ybGRcblx0XHQgKiBzcGFjZS4gVGhlc2UgcGxhbmVzIGFwcGx5IHRvIHRoZSBvYmplY3RzIHRoaXMgbWF0ZXJpYWwgaXMgYXR0YWNoZWQgdG8uXG5cdFx0ICogUG9pbnRzIGluIHNwYWNlIHdob3NlIHNpZ25lZCBkaXN0YW5jZSB0byB0aGUgcGxhbmUgaXMgbmVnYXRpdmUgYXJlIGNsaXBwZWRcblx0XHQgKiAobm90IHJlbmRlcmVkKS4gVGhpcyByZXF1aXJlcyB7QGxpbmsgV2ViR0xSZW5kZXJlciNsb2NhbENsaXBwaW5nRW5hYmxlZH0gdG9cblx0XHQgKiBiZSBgdHJ1ZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0FycmF5PFBsYW5lPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBDaGFuZ2VzIHRoZSBiZWhhdmlvciBvZiBjbGlwcGluZyBwbGFuZXMgc28gdGhhdCBvbmx5IHRoZWlyIGludGVyc2VjdGlvbiBpc1xuXHRcdCAqIGNsaXBwZWQsIHJhdGhlciB0aGFuIHRoZWlyIHVuaW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgd2hldGhlciB0byBjbGlwIHNoYWRvd3MgYWNjb3JkaW5nIHRvIHRoZSBjbGlwcGluZyBwbGFuZXMgc3BlY2lmaWVkXG5cdFx0ICogb24gdGhpcyBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5jbGlwU2hhZG93cyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB3aGljaCBzaWRlIG9mIGZhY2VzIGNhc3Qgc2hhZG93cy4gSWYgYG51bGxgLCB0aGUgc2lkZSBjYXN0aW5nIHNoYWRvd3Ncblx0XHQgKiBpcyBkZXRlcm1pbmVkIGFzIGZvbGxvd3M6XG5cdFx0ICpcblx0XHQgKiAtIFdoZW4ge0BsaW5rIE1hdGVyaWFsI3NpZGV9IGlzIHNldCB0byBgRnJvbnRTaWRlYCwgdGhlIGJhY2sgc2lkZSBjYXN0IHNoYWRvd3MuXG5cdFx0ICogLSBXaGVuIHtAbGluayBNYXRlcmlhbCNzaWRlfSBpcyBzZXQgdG8gYEJhY2tTaWRlYCwgdGhlIGZyb250IHNpZGUgY2FzdCBzaGFkb3dzLlxuXHRcdCAqIC0gV2hlbiB7QGxpbmsgTWF0ZXJpYWwjc2lkZX0gaXMgc2V0IHRvIGBEb3VibGVTaWRlYCwgYm90aCBzaWRlcyBjYXN0IHNoYWRvd3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhGcm9udFNpZGV8QmFja1NpZGV8RG91YmxlU2lkZSl9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93U2lkZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIHJlbmRlciB0aGUgbWF0ZXJpYWwncyBjb2xvci5cblx0XHQgKlxuXHRcdCAqIFRoaXMgY2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB7QGxpbmsgT2JqZWN0M0QjcmVuZGVyT2Rlcn0gdG8gY3JlYXRlIGludmlzaWJsZVxuXHRcdCAqIG9iamVjdHMgdGhhdCBvY2NsdWRlIG90aGVyIG9iamVjdHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvcldyaXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJyaWRlIHRoZSByZW5kZXJlcidzIGRlZmF1bHQgcHJlY2lzaW9uIGZvciB0aGlzIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez8oJ2hpZ2hwJ3wnbWVkaXVtcCd8J2xvd3AnKX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byB1c2UgcG9seWdvbiBvZmZzZXQgb3Igbm90LiBXaGVuIGVuYWJsZWQsIGVhY2ggZnJhZ21lbnQncyBkZXB0aCB2YWx1ZSB3aWxsXG5cdFx0ICogYmUgb2Zmc2V0IGFmdGVyIGl0IGlzIGludGVycG9sYXRlZCBmcm9tIHRoZSBkZXB0aCB2YWx1ZXMgb2YgdGhlIGFwcHJvcHJpYXRlIHZlcnRpY2VzLlxuXHRcdCAqIFRoZSBvZmZzZXQgaXMgYWRkZWQgYmVmb3JlIHRoZSBkZXB0aCB0ZXN0IGlzIHBlcmZvcm1lZCBhbmQgYmVmb3JlIHRoZSB2YWx1ZSBpcyB3cml0dGVuXG5cdFx0ICogaW50byB0aGUgZGVwdGggYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQ2FuIGJlIHVzZWZ1bCBmb3IgcmVuZGVyaW5nIGhpZGRlbi1saW5lIGltYWdlcywgZm9yIGFwcGx5aW5nIGRlY2FscyB0byBzdXJmYWNlcywgYW5kIGZvclxuXHRcdCAqIHJlbmRlcmluZyBzb2xpZHMgd2l0aCBoaWdobGlnaHRlZCBlZGdlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBTcGVjaWZpZXMgYSBzY2FsZSBmYWN0b3IgdGhhdCBpcyB1c2VkIHRvIGNyZWF0ZSBhIHZhcmlhYmxlIGRlcHRoIG9mZnNldCBmb3IgZWFjaCBwb2x5Z29uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIElzIG11bHRpcGxpZWQgYnkgYW4gaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgdmFsdWUgdG8gY3JlYXRlIGEgY29uc3RhbnQgZGVwdGggb2Zmc2V0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byBhcHBseSBkaXRoZXJpbmcgdG8gdGhlIGNvbG9yIHRvIHJlbW92ZSB0aGUgYXBwZWFyYW5jZSBvZiBiYW5kaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmRpdGhlcmluZyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBhbHBoYSB0byBjb3ZlcmFnZSBzaG91bGQgYmUgZW5hYmxlZCBvciBub3QuIENhbiBvbmx5IGJlIHVzZWQgd2l0aCBNU0FBLWVuYWJsZWQgY29udGV4dHNcblx0XHQgKiAobWVhbmluZyB3aGVuIHRoZSByZW5kZXJlciB3YXMgY3JlYXRlZCB3aXRoICphbnRpYWxpYXMqIHBhcmFtZXRlciBzZXQgdG8gYHRydWVgKS4gRW5hYmxpbmcgdGhpc1xuXHRcdCAqIHdpbGwgc21vb3RoIGFsaWFzaW5nIG9uIGNsaXAgcGxhbmUgZWRnZXMgYW5kIGFscGhhVGVzdC1jbGlwcGVkIGVkZ2VzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmFscGhhVG9Db3ZlcmFnZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byBwcmVtdWx0aXBseSB0aGUgYWxwaGEgKHRyYW5zcGFyZW5jeSkgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIGRvdWJsZS1zaWRlZCwgdHJhbnNwYXJlbnQgb2JqZWN0cyBzaG91bGQgYmUgcmVuZGVyZWQgd2l0aCBhIHNpbmdsZSBwYXNzIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIFRoZSBlbmdpbmUgcmVuZGVycyBkb3VibGUtc2lkZWQsIHRyYW5zcGFyZW50IG9iamVjdHMgd2l0aCB0d28gZHJhdyBjYWxscyAoYmFjayBmYWNlcyBmaXJzdCxcblx0XHQgKiB0aGVuIGZyb250IGZhY2VzKSB0byBtaXRpZ2F0ZSB0cmFuc3BhcmVuY3kgYXJ0aWZhY3RzLiBUaGVyZSBhcmUgc2NlbmFyaW9zIGhvd2V2ZXIgd2hlcmUgdGhpc1xuXHRcdCAqIGFwcHJvYWNoIHByb2R1Y2VzIG5vIHF1YWxpdHkgZ2FpbnMgYnV0IHN0aWxsIGRvdWJsZXMgZHJhdyBjYWxscyBlLmcuIHdoZW4gcmVuZGVyaW5nIGZsYXRcblx0XHQgKiB2ZWdldGF0aW9uIGxpa2UgZ3Jhc3Mgc3ByaXRlcy4gSW4gdGhlc2UgY2FzZXMsIHNldCB0aGUgYGZvcmNlU2luZ2xlUGFzc2AgZmxhZyB0byBgdHJ1ZWAgdG9cblx0XHQgKiBkaXNhYmxlIHRoZSB0d28gcGFzcyByZW5kZXJpbmcgdG8gYXZvaWQgcGVyZm9ybWFuY2UgaXNzdWVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmZvcmNlU2luZ2xlUGFzcyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBpdCdzIHBvc3NpYmxlIHRvIG92ZXJyaWRlIHRoZSBtYXRlcmlhbCB3aXRoIHtAbGluayBTY2VuZSNvdmVycmlkZU1hdGVyaWFsfSBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5hbGxvd092ZXJyaWRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgd2hldGhlciAzRCBvYmplY3RzIHVzaW5nIHRoaXMgbWF0ZXJpYWwgYXJlIHZpc2libGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgd2hldGhlciB0aGlzIG1hdGVyaWFsIGlzIHRvbmUgbWFwcGVkIGFjY29yZGluZyB0byB0aGUgcmVuZGVyZXIncyB0b25lIG1hcHBpbmcgc2V0dGluZy5cblx0XHQgKlxuXHRcdCAqIEl0IGlzIGlnbm9yZWQgd2hlbiByZW5kZXJpbmcgdG8gYSByZW5kZXIgdGFyZ2V0IG9yIHVzaW5nIHBvc3QgcHJvY2Vzc2luZyBvciB3aGVuIHVzaW5nXG5cdFx0ICogYFdlYkdQVVJlbmRlcmVyYC4gSW4gYWxsIHRoZXNlIGNhc2VzLCBhbGwgbWF0ZXJpYWxzIGFyZSBob25vcmVkIGJ5IHRvbmUgbWFwcGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnRvbmVNYXBwZWQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgY3VzdG9tIGRhdGEgYWJvdXQgdGhlIE1hdGVyaWFsLiBJdFxuXHRcdCAqIHNob3VsZCBub3QgaG9sZCByZWZlcmVuY2VzIHRvIGZ1bmN0aW9ucyBhcyB0aGVzZSB3aWxsIG5vdCBiZSBjbG9uZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgc3RhcnRzIGF0IGAwYCBhbmQgY291bnRzIGhvdyBtYW55IHRpbWVzIHtAbGluayBNYXRlcmlhbCNuZWVkc1VwZGF0ZX0gaXMgc2V0IHRvIGB0cnVlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0XHR0aGlzLl9hbHBoYVRlc3QgPSAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgYWxwaGEgdmFsdWUgdG8gYmUgdXNlZCB3aGVuIHJ1bm5pbmcgYW4gYWxwaGEgdGVzdC4gVGhlIG1hdGVyaWFsXG5cdCAqIHdpbGwgbm90IGJlIHJlbmRlcmVkIGlmIHRoZSBvcGFjaXR5IGlzIGxvd2VyIHRoYW4gdGhpcyB2YWx1ZS5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHJlYWRvbmx5XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCBhbHBoYVRlc3QoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fYWxwaGFUZXN0O1xuXG5cdH1cblxuXHRzZXQgYWxwaGFUZXN0KCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fYWxwaGFUZXN0ID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9hbHBoYVRlc3QgPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHRoYXQgaXMgZXhlY3V0ZWQgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBtYXRlcmlhbCBpcyB1c2VkIHRvIHJlbmRlciBhIDNEIG9iamVjdC5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCB3aGVuIHJlbmRlcmluZyB3aXRoIHtAbGluayBXZWJHTFJlbmRlcmVyfS5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfSByZW5kZXJlciAtIFRoZSByZW5kZXJlci5cblx0ICogQHBhcmFtIHtTY2VuZX0gc2NlbmUgLSBUaGUgc2NlbmUuXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRoYXQgaXMgdXNlZCB0byByZW5kZXIgdGhlIHNjZW5lLlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeSAtIFRoZSAzRCBvYmplY3QncyBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGdyb3VwIC0gVGhlIGdlb21ldHJ5IGdyb3VwIGRhdGEuXG5cdCAqL1xuXHRvbkJlZm9yZVJlbmRlciggLyogcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICovICkge31cblxuXHQvKipcblx0ICogQW4gb3B0aW9uYWwgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIHNoYWRlclxuXHQgKiBwcm9ncmFtIGlzIGNvbXBpbGVkLiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBzaGFkZXIgc291cmNlIGNvZGVcblx0ICogYXMgYSBwYXJhbWV0ZXIuIFVzZWZ1bCBmb3IgdGhlIG1vZGlmaWNhdGlvbiBvZiBidWlsdC1pbiBtYXRlcmlhbHMuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgd2l0aCB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uIFRoZVxuXHQgKiByZWNvbW1lbmRlZCBhcHByb2FjaCB3aGVuIGN1c3RvbWl6aW5nIG1hdGVyaWFscyBpcyB0byB1c2UgYFdlYkdQVVJlbmRlcmVyYCB3aXRoIHRoZSBuZXdcblx0ICogTm9kZSBNYXRlcmlhbCBzeXN0ZW0gYW5kIFtUU0xde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvd2lraS9UaHJlZS5qcy1TaGFkaW5nLUxhbmd1YWdlfS5cblx0ICpcblx0ICogQHBhcmFtIHt7dmVydGV4U2hhZGVyOnN0cmluZyxmcmFnbWVudFNoYWRlcjpzdHJpbmcsdW5pZm9ybXM6T2JqZWN0fX0gc2hhZGVyb2JqZWN0IC0gVGhlIG9iamVjdCBob2xkcyB0aGUgdW5pZm9ybXMgYW5kIHRoZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlciBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBBIHJlZmVyZW5jZSB0byB0aGUgcmVuZGVyZXIuXG5cdCAqL1xuXHRvbkJlZm9yZUNvbXBpbGUoIC8qIHNoYWRlcm9iamVjdCwgcmVuZGVyZXIgKi8gKSB7fVxuXG5cdC8qKlxuXHQgKiBJbiBjYXNlIHtAbGluayBNYXRlcmlhbCNvbkJlZm9yZUNvbXBpbGV9IGlzIHVzZWQsIHRoaXMgY2FsbGJhY2sgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnlcblx0ICogdmFsdWVzIG9mIHNldHRpbmdzIHVzZWQgaW4gYG9uQmVmb3JlQ29tcGlsZSgpYCwgc28gdGhyZWUuanMgY2FuIHJldXNlIGEgY2FjaGVkXG5cdCAqIHNoYWRlciBvciByZWNvbXBpbGUgdGhlIHNoYWRlciBmb3IgdGhpcyBtYXRlcmlhbCBhcyBuZWVkZWQuXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgd2l0aCB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGN1c3RvbSBwcm9ncmFtIGNhY2hlIGtleS5cblx0ICovXG5cdGN1c3RvbVByb2dyYW1DYWNoZUtleSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm9uQmVmb3JlQ29tcGlsZS50b1N0cmluZygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgY2FuIGJlIHVzZWQgdG8gc2V0IGRlZmF1bHQgdmFsdWVzIGZyb20gcGFyYW1ldGVyIG9iamVjdHMuXG5cdCAqIEl0IGlzIGEgZ2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBzbyBpdCBjYW4gYmUgdXNlZCB3aXRoIGRpZmZlcmVudCB0eXBlc1xuXHQgKiBvZiBtYXRlcmlhbHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbdmFsdWVzXSAtIFRoZSBtYXRlcmlhbCB2YWx1ZXMgdG8gc2V0LlxuXHQgKi9cblx0c2V0VmFsdWVzKCB2YWx1ZXMgKSB7XG5cblx0XHRpZiAoIHZhbHVlcyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIHZhbHVlcyApIHtcblxuXHRcdFx0Y29uc3QgbmV3VmFsdWUgPSB2YWx1ZXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBgVEhSRUUuTWF0ZXJpYWw6IHBhcmFtZXRlciAnJHsga2V5IH0nIGhhcyB2YWx1ZSBvZiB1bmRlZmluZWQuYCApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzWyBrZXkgXTtcblxuXHRcdFx0aWYgKCBjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIGBUSFJFRS5NYXRlcmlhbDogJyR7IGtleSB9JyBpcyBub3QgYSBwcm9wZXJ0eSBvZiBUSFJFRS4keyB0aGlzLnR5cGUgfS5gICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5zZXQoIG5ld1ZhbHVlICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoICggY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pc1ZlY3RvcjMgKSAmJiAoIG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMyApICkge1xuXG5cdFx0XHRcdGN1cnJlbnRWYWx1ZS5jb3B5KCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXNbIGtleSBdID0gbmV3VmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIG1hdGVyaWFsIGludG8gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHs/KE9iamVjdHxzdHJpbmcpfSBtZXRhIC0gQW4gb3B0aW9uYWwgdmFsdWUgaG9sZGluZyBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZXJpYWxpemF0aW9uLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIG1hdGVyaWFsLlxuXHQgKiBAc2VlIHtAbGluayBPYmplY3RMb2FkZXIjcGFyc2V9XG5cdCAqL1xuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBpc1Jvb3RPYmplY3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge31cblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC42LFxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdNYXRlcmlhbC50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIHN0YW5kYXJkIE1hdGVyaWFsIHNlcmlhbGl6YXRpb25cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgZGF0YS5uYW1lID0gdGhpcy5uYW1lO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICYmIHRoaXMuY29sb3IuaXNDb2xvciApIGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzcztcblx0XHRpZiAoIHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLm1ldGFsbmVzcyA9IHRoaXMubWV0YWxuZXNzO1xuXG5cdFx0aWYgKCB0aGlzLnNoZWVuICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbjtcblx0XHRpZiAoIHRoaXMuc2hlZW5Db2xvciAmJiB0aGlzLnNoZWVuQ29sb3IuaXNDb2xvciApIGRhdGEuc2hlZW5Db2xvciA9IHRoaXMuc2hlZW5Db2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hlZW5Sb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEuc2hlZW5Sb3VnaG5lc3MgPSB0aGlzLnNoZWVuUm91Z2huZXNzO1xuXHRcdGlmICggdGhpcy5lbWlzc2l2ZSAmJiB0aGlzLmVtaXNzaXZlLmlzQ29sb3IgKSBkYXRhLmVtaXNzaXZlID0gdGhpcy5lbWlzc2l2ZS5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxICkgZGF0YS5lbWlzc2l2ZUludGVuc2l0eSA9IHRoaXMuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuc3BlY3VsYXIgJiYgdGhpcy5zcGVjdWxhci5pc0NvbG9yICkgZGF0YS5zcGVjdWxhciA9IHRoaXMuc3BlY3VsYXIuZ2V0SGV4KCk7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLnNwZWN1bGFySW50ZW5zaXR5ID0gdGhpcy5zcGVjdWxhckludGVuc2l0eTtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJDb2xvciAmJiB0aGlzLnNwZWN1bGFyQ29sb3IuaXNDb2xvciApIGRhdGEuc3BlY3VsYXJDb2xvciA9IHRoaXMuc3BlY3VsYXJDb2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzO1xuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJjb2F0ID0gdGhpcy5jbGVhcmNvYXQ7XG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3MgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzcztcblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRNYXAgJiYgdGhpcy5jbGVhcmNvYXRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmNsZWFyY29hdE1hcCA9IHRoaXMuY2xlYXJjb2F0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwICYmIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCAmJiB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSB0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLnRvQXJyYXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5kaXNwZXJzaW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLmRpc3BlcnNpb24gPSB0aGlzLmRpc3BlcnNpb247XG5cblx0XHRpZiAoIHRoaXMuaXJpZGVzY2VuY2UgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2UgPSB0aGlzLmlyaWRlc2NlbmNlO1xuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZUlPUiAhPT0gdW5kZWZpbmVkICkgZGF0YS5pcmlkZXNjZW5jZUlPUiA9IHRoaXMuaXJpZGVzY2VuY2VJT1I7XG5cdFx0aWYgKCB0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgIT09IHVuZGVmaW5lZCApIGRhdGEuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZSA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NSYW5nZTtcblxuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZU1hcCAmJiB0aGlzLmlyaWRlc2NlbmNlTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5pcmlkZXNjZW5jZU1hcCA9IHRoaXMuaXJpZGVzY2VuY2VNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCAmJiB0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IHRoaXMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSBkYXRhLmFuaXNvdHJvcHkgPSB0aGlzLmFuaXNvdHJvcHk7XG5cdFx0aWYgKCB0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgZGF0YS5hbmlzb3Ryb3B5Um90YXRpb24gPSB0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbjtcblxuXHRcdGlmICggdGhpcy5hbmlzb3Ryb3B5TWFwICYmIHRoaXMuYW5pc290cm9weU1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuYW5pc290cm9weU1hcCA9IHRoaXMuYW5pc290cm9weU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm1hcCAmJiB0aGlzLm1hcC5pc1RleHR1cmUgKSBkYXRhLm1hcCA9IHRoaXMubWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1hdGNhcCAmJiB0aGlzLm1hdGNhcC5pc1RleHR1cmUgKSBkYXRhLm1hdGNhcCA9IHRoaXMubWF0Y2FwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmFscGhhTWFwICYmIHRoaXMuYWxwaGFNYXAuaXNUZXh0dXJlICkgZGF0YS5hbHBoYU1hcCA9IHRoaXMuYWxwaGFNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5saWdodE1hcCAmJiB0aGlzLmxpZ2h0TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5saWdodE1hcCA9IHRoaXMubGlnaHRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEubGlnaHRNYXBJbnRlbnNpdHkgPSB0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmFvTWFwICYmIHRoaXMuYW9NYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmFvTWFwID0gdGhpcy5hb01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5hb01hcEludGVuc2l0eSA9IHRoaXMuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsTWFwICYmIHRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5ub3JtYWxNYXAgPSB0aGlzLm5vcm1hbE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdFx0ZGF0YS5ub3JtYWxNYXBUeXBlID0gdGhpcy5ub3JtYWxNYXBUeXBlO1xuXHRcdFx0ZGF0YS5ub3JtYWxTY2FsZSA9IHRoaXMubm9ybWFsU2NhbGUudG9BcnJheSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmRpc3BsYWNlbWVudE1hcCAmJiB0aGlzLmRpc3BsYWNlbWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50TWFwID0gdGhpcy5kaXNwbGFjZW1lbnRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50U2NhbGUgPSB0aGlzLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJvdWdobmVzc01hcCAmJiB0aGlzLnJvdWdobmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnJvdWdobmVzc01hcCA9IHRoaXMucm91Z2huZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLm1ldGFsbmVzc01hcCA9IHRoaXMubWV0YWxuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW1pc3NpdmVNYXAgJiYgdGhpcy5lbWlzc2l2ZU1hcC5pc1RleHR1cmUgKSBkYXRhLmVtaXNzaXZlTWFwID0gdGhpcy5lbWlzc2l2ZU1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSApIGRhdGEuc3BlY3VsYXJNYXAgPSB0aGlzLnNwZWN1bGFyTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwICYmIHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhckludGVuc2l0eU1hcCA9IHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJDb2xvck1hcCAmJiB0aGlzLnNwZWN1bGFyQ29sb3JNYXAuaXNUZXh0dXJlICkgZGF0YS5zcGVjdWxhckNvbG9yTWFwID0gdGhpcy5zcGVjdWxhckNvbG9yTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHRpZiAoIHRoaXMuZW52TWFwICYmIHRoaXMuZW52TWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5lbnZNYXAgPSB0aGlzLmVudk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0XHRpZiAoIHRoaXMuY29tYmluZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5jb21iaW5lID0gdGhpcy5jb21iaW5lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmVudk1hcFJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLmVudk1hcFJvdGF0aW9uID0gdGhpcy5lbnZNYXBSb3RhdGlvbi50b0FycmF5KCk7XG5cdFx0aWYgKCB0aGlzLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTtcblx0XHRpZiAoIHRoaXMucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLnJlZmxlY3Rpdml0eSA9IHRoaXMucmVmbGVjdGl2aXR5O1xuXHRcdGlmICggdGhpcy5yZWZyYWN0aW9uUmF0aW8gIT09IHVuZGVmaW5lZCApIGRhdGEucmVmcmFjdGlvblJhdGlvID0gdGhpcy5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHRpZiAoIHRoaXMuZ3JhZGllbnRNYXAgJiYgdGhpcy5ncmFkaWVudE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZ3JhZGllbnRNYXAgPSB0aGlzLmdyYWRpZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMudHJhbnNtaXNzaW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLnRyYW5zbWlzc2lvbiA9IHRoaXMudHJhbnNtaXNzaW9uO1xuXHRcdGlmICggdGhpcy50cmFuc21pc3Npb25NYXAgJiYgdGhpcy50cmFuc21pc3Npb25NYXAuaXNUZXh0dXJlICkgZGF0YS50cmFuc21pc3Npb25NYXAgPSB0aGlzLnRyYW5zbWlzc2lvbk1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy50aGlja25lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEudGhpY2tuZXNzID0gdGhpcy50aGlja25lc3M7XG5cdFx0aWYgKCB0aGlzLnRoaWNrbmVzc01hcCAmJiB0aGlzLnRoaWNrbmVzc01hcC5pc1RleHR1cmUgKSBkYXRhLnRoaWNrbmVzc01hcCA9IHRoaXMudGhpY2tuZXNzTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2UgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmF0dGVudWF0aW9uRGlzdGFuY2UgIT09IEluZmluaXR5ICkgZGF0YS5hdHRlbnVhdGlvbkRpc3RhbmNlID0gdGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgKSBkYXRhLmF0dGVudWF0aW9uQ29sb3IgPSB0aGlzLmF0dGVudWF0aW9uQ29sb3IuZ2V0SGV4KCk7XG5cblx0XHRpZiAoIHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5zaXplID0gdGhpcy5zaXplO1xuXHRcdGlmICggdGhpcy5zaGFkb3dTaWRlICE9PSBudWxsICkgZGF0YS5zaGFkb3dTaWRlID0gdGhpcy5zaGFkb3dTaWRlO1xuXHRcdGlmICggdGhpcy5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIGRhdGEuc2l6ZUF0dGVudWF0aW9uID0gdGhpcy5zaXplQXR0ZW51YXRpb247XG5cblx0XHRpZiAoIHRoaXMuYmxlbmRpbmcgIT09IE5vcm1hbEJsZW5kaW5nICkgZGF0YS5ibGVuZGluZyA9IHRoaXMuYmxlbmRpbmc7XG5cdFx0aWYgKCB0aGlzLnNpZGUgIT09IEZyb250U2lkZSApIGRhdGEuc2lkZSA9IHRoaXMuc2lkZTtcblx0XHRpZiAoIHRoaXMudmVydGV4Q29sb3JzID09PSB0cnVlICkgZGF0YS52ZXJ0ZXhDb2xvcnMgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLm9wYWNpdHkgPCAxICkgZGF0YS5vcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuXHRcdGlmICggdGhpcy50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIGRhdGEudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLmJsZW5kU3JjICE9PSBTcmNBbHBoYUZhY3RvciApIGRhdGEuYmxlbmRTcmMgPSB0aGlzLmJsZW5kU3JjO1xuXHRcdGlmICggdGhpcy5ibGVuZERzdCAhPT0gT25lTWludXNTcmNBbHBoYUZhY3RvciApIGRhdGEuYmxlbmREc3QgPSB0aGlzLmJsZW5kRHN0O1xuXHRcdGlmICggdGhpcy5ibGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiApIGRhdGEuYmxlbmRFcXVhdGlvbiA9IHRoaXMuYmxlbmRFcXVhdGlvbjtcblx0XHRpZiAoIHRoaXMuYmxlbmRTcmNBbHBoYSAhPT0gbnVsbCApIGRhdGEuYmxlbmRTcmNBbHBoYSA9IHRoaXMuYmxlbmRTcmNBbHBoYTtcblx0XHRpZiAoIHRoaXMuYmxlbmREc3RBbHBoYSAhPT0gbnVsbCApIGRhdGEuYmxlbmREc3RBbHBoYSA9IHRoaXMuYmxlbmREc3RBbHBoYTtcblx0XHRpZiAoIHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhICE9PSBudWxsICkgZGF0YS5ibGVuZEVxdWF0aW9uQWxwaGEgPSB0aGlzLmJsZW5kRXF1YXRpb25BbHBoYTtcblx0XHRpZiAoIHRoaXMuYmxlbmRDb2xvciAmJiB0aGlzLmJsZW5kQ29sb3IuaXNDb2xvciApIGRhdGEuYmxlbmRDb2xvciA9IHRoaXMuYmxlbmRDb2xvci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuYmxlbmRBbHBoYSAhPT0gMCApIGRhdGEuYmxlbmRBbHBoYSA9IHRoaXMuYmxlbmRBbHBoYTtcblxuXHRcdGlmICggdGhpcy5kZXB0aEZ1bmMgIT09IExlc3NFcXVhbERlcHRoICkgZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYztcblx0XHRpZiAoIHRoaXMuZGVwdGhUZXN0ID09PSBmYWxzZSApIGRhdGEuZGVwdGhUZXN0ID0gdGhpcy5kZXB0aFRlc3Q7XG5cdFx0aWYgKCB0aGlzLmRlcHRoV3JpdGUgPT09IGZhbHNlICkgZGF0YS5kZXB0aFdyaXRlID0gdGhpcy5kZXB0aFdyaXRlO1xuXHRcdGlmICggdGhpcy5jb2xvcldyaXRlID09PSBmYWxzZSApIGRhdGEuY29sb3JXcml0ZSA9IHRoaXMuY29sb3JXcml0ZTtcblxuXHRcdGlmICggdGhpcy5zdGVuY2lsV3JpdGVNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsV3JpdGVNYXNrID0gdGhpcy5zdGVuY2lsV3JpdGVNYXNrO1xuXHRcdGlmICggdGhpcy5zdGVuY2lsRnVuYyAhPT0gQWx3YXlzU3RlbmNpbEZ1bmMgKSBkYXRhLnN0ZW5jaWxGdW5jID0gdGhpcy5zdGVuY2lsRnVuYztcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFJlZiAhPT0gMCApIGRhdGEuc3RlbmNpbFJlZiA9IHRoaXMuc3RlbmNpbFJlZjtcblx0XHRpZiAoIHRoaXMuc3RlbmNpbEZ1bmNNYXNrICE9PSAweGZmICkgZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRpZiAoIHRoaXMuc3RlbmNpbEZhaWwgIT09IEtlZXBTdGVuY2lsT3AgKSBkYXRhLnN0ZW5jaWxGYWlsID0gdGhpcy5zdGVuY2lsRmFpbDtcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFpGYWlsICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsWkZhaWwgPSB0aGlzLnN0ZW5jaWxaRmFpbDtcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFpQYXNzICE9PSBLZWVwU3RlbmNpbE9wICkgZGF0YS5zdGVuY2lsWlBhc3MgPSB0aGlzLnN0ZW5jaWxaUGFzcztcblx0XHRpZiAoIHRoaXMuc3RlbmNpbFdyaXRlID09PSB0cnVlICkgZGF0YS5zdGVuY2lsV3JpdGUgPSB0aGlzLnN0ZW5jaWxXcml0ZTtcblxuXHRcdC8vIHJvdGF0aW9uIChTcHJpdGVNYXRlcmlhbClcblx0XHRpZiAoIHRoaXMucm90YXRpb24gIT09IHVuZGVmaW5lZCAmJiB0aGlzLnJvdGF0aW9uICE9PSAwICkgZGF0YS5yb3RhdGlvbiA9IHRoaXMucm90YXRpb247XG5cblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldCA9PT0gdHJ1ZSApIGRhdGEucG9seWdvbk9mZnNldCA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IDAgKSBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCB0aGlzLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldFVuaXRzID0gdGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIHRoaXMubGluZXdpZHRoICE9PSB1bmRlZmluZWQgJiYgdGhpcy5saW5ld2lkdGggIT09IDEgKSBkYXRhLmxpbmV3aWR0aCA9IHRoaXMubGluZXdpZHRoO1xuXHRcdGlmICggdGhpcy5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7XG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcblx0XHRpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5hbHBoYVRlc3QgPiAwICkgZGF0YS5hbHBoYVRlc3QgPSB0aGlzLmFscGhhVGVzdDtcblx0XHRpZiAoIHRoaXMuYWxwaGFIYXNoID09PSB0cnVlICkgZGF0YS5hbHBoYUhhc2ggPSB0cnVlO1xuXHRcdGlmICggdGhpcy5hbHBoYVRvQ292ZXJhZ2UgPT09IHRydWUgKSBkYXRhLmFscGhhVG9Db3ZlcmFnZSA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9PT0gdHJ1ZSApIGRhdGEucHJlbXVsdGlwbGllZEFscGhhID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMuZm9yY2VTaW5nbGVQYXNzID09PSB0cnVlICkgZGF0YS5mb3JjZVNpbmdsZVBhc3MgPSB0cnVlO1xuXG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZSA9PT0gdHJ1ZSApIGRhdGEud2lyZWZyYW1lID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID4gMSApIGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVjYXAgIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVjYXAgPSB0aGlzLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCB0aGlzLndpcmVmcmFtZUxpbmVqb2luICE9PSAncm91bmQnICkgZGF0YS53aXJlZnJhbWVMaW5lam9pbiA9IHRoaXMud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIHRoaXMuZmxhdFNoYWRpbmcgPT09IHRydWUgKSBkYXRhLmZsYXRTaGFkaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIGRhdGEudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0aGlzLnRvbmVNYXBwZWQgPT09IGZhbHNlICkgZGF0YS50b25lTWFwcGVkID0gZmFsc2U7XG5cblx0XHRpZiAoIHRoaXMuZm9nID09PSBmYWxzZSApIGRhdGEuZm9nID0gZmFsc2U7XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0Ly8gVE9ETzogQ29waWVkIGZyb20gT2JqZWN0M0QudG9KU09OXG5cblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKCBjYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgdmFsdWVzID0gW107XG5cblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0gY2FjaGVbIGtleSBdO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5tZXRhZGF0YTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmVzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS50ZXh0dXJlcyApO1xuXHRcdFx0Y29uc3QgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIGRhdGEuaW1hZ2VzID0gaW1hZ2VzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IG1hdGVyaWFsIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge01hdGVyaWFsfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBtYXRlcmlhbCB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfSBzb3VyY2UgLSBUaGUgbWF0ZXJpYWwgdG8gY29weS5cblx0ICogQHJldHVybiB7TWF0ZXJpYWx9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMuYmxlbmRpbmcgPSBzb3VyY2UuYmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gc291cmNlLnNpZGU7XG5cdFx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBzb3VyY2UudmVydGV4Q29sb3JzO1xuXG5cdFx0dGhpcy5vcGFjaXR5ID0gc291cmNlLm9wYWNpdHk7XG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHNvdXJjZS50cmFuc3BhcmVudDtcblxuXHRcdHRoaXMuYmxlbmRTcmMgPSBzb3VyY2UuYmxlbmRTcmM7XG5cdFx0dGhpcy5ibGVuZERzdCA9IHNvdXJjZS5ibGVuZERzdDtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBzb3VyY2UuYmxlbmRFcXVhdGlvbjtcblx0XHR0aGlzLmJsZW5kU3JjQWxwaGEgPSBzb3VyY2UuYmxlbmRTcmNBbHBoYTtcblx0XHR0aGlzLmJsZW5kRHN0QWxwaGEgPSBzb3VyY2UuYmxlbmREc3RBbHBoYTtcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uQWxwaGE7XG5cdFx0dGhpcy5ibGVuZENvbG9yLmNvcHkoIHNvdXJjZS5ibGVuZENvbG9yICk7XG5cdFx0dGhpcy5ibGVuZEFscGhhID0gc291cmNlLmJsZW5kQWxwaGE7XG5cblx0XHR0aGlzLmRlcHRoRnVuYyA9IHNvdXJjZS5kZXB0aEZ1bmM7XG5cdFx0dGhpcy5kZXB0aFRlc3QgPSBzb3VyY2UuZGVwdGhUZXN0O1xuXHRcdHRoaXMuZGVwdGhXcml0ZSA9IHNvdXJjZS5kZXB0aFdyaXRlO1xuXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gc291cmNlLnN0ZW5jaWxXcml0ZU1hc2s7XG5cdFx0dGhpcy5zdGVuY2lsRnVuYyA9IHNvdXJjZS5zdGVuY2lsRnVuYztcblx0XHR0aGlzLnN0ZW5jaWxSZWYgPSBzb3VyY2Uuc3RlbmNpbFJlZjtcblx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IHNvdXJjZS5zdGVuY2lsRnVuY01hc2s7XG5cdFx0dGhpcy5zdGVuY2lsRmFpbCA9IHNvdXJjZS5zdGVuY2lsRmFpbDtcblx0XHR0aGlzLnN0ZW5jaWxaRmFpbCA9IHNvdXJjZS5zdGVuY2lsWkZhaWw7XG5cdFx0dGhpcy5zdGVuY2lsWlBhc3MgPSBzb3VyY2Uuc3RlbmNpbFpQYXNzO1xuXHRcdHRoaXMuc3RlbmNpbFdyaXRlID0gc291cmNlLnN0ZW5jaWxXcml0ZTtcblxuXHRcdGNvbnN0IHNyY1BsYW5lcyA9IHNvdXJjZS5jbGlwcGluZ1BsYW5lcztcblx0XHRsZXQgZHN0UGxhbmVzID0gbnVsbDtcblxuXHRcdGlmICggc3JjUGxhbmVzICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBuID0gc3JjUGxhbmVzLmxlbmd0aDtcblx0XHRcdGRzdFBsYW5lcyA9IG5ldyBBcnJheSggbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0ZHN0UGxhbmVzWyBpIF0gPSBzcmNQbGFuZXNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gZHN0UGxhbmVzO1xuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IHNvdXJjZS5jbGlwSW50ZXJzZWN0aW9uO1xuXHRcdHRoaXMuY2xpcFNoYWRvd3MgPSBzb3VyY2UuY2xpcFNoYWRvd3M7XG5cblx0XHR0aGlzLnNoYWRvd1NpZGUgPSBzb3VyY2Uuc2hhZG93U2lkZTtcblxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xuXG5cdFx0dGhpcy5wcmVjaXNpb24gPSBzb3VyY2UucHJlY2lzaW9uO1xuXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gc291cmNlLnBvbHlnb25PZmZzZXQ7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gc291cmNlLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xuXG5cdFx0dGhpcy5kaXRoZXJpbmcgPSBzb3VyY2UuZGl0aGVyaW5nO1xuXG5cdFx0dGhpcy5hbHBoYVRlc3QgPSBzb3VyY2UuYWxwaGFUZXN0O1xuXHRcdHRoaXMuYWxwaGFIYXNoID0gc291cmNlLmFscGhhSGFzaDtcblx0XHR0aGlzLmFscGhhVG9Db3ZlcmFnZSA9IHNvdXJjZS5hbHBoYVRvQ292ZXJhZ2U7XG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbGllZEFscGhhO1xuXHRcdHRoaXMuZm9yY2VTaW5nbGVQYXNzID0gc291cmNlLmZvcmNlU2luZ2xlUGFzcztcblxuXHRcdHRoaXMudmlzaWJsZSA9IHNvdXJjZS52aXNpYmxlO1xuXG5cdFx0dGhpcy50b25lTWFwcGVkID0gc291cmNlLnRvbmVNYXBwZWQ7XG5cblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHNvdXJjZS51c2VyRGF0YSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0ICpcblx0ICogQGZpcmVzIE1hdGVyaWFsI2Rpc3Bvc2Vcblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHQvKipcblx0XHQgKiBGaXJlcyB3aGVuIHRoZSBtYXRlcmlhbCBoYXMgYmVlbiBkaXNwb3NlZCBvZi5cblx0XHQgKlxuXHRcdCAqIEBldmVudCBNYXRlcmlhbCNkaXNwb3NlXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHRpbmcgdGhpcyBwcm9wZXJ0eSB0byBgdHJ1ZWAgaW5kaWNhdGVzIHRoZSBlbmdpbmUgdGhlIG1hdGVyaWFsXG5cdCAqIG5lZWRzIHRvIGJlIHJlY29tcGlsZWQuXG5cdCAqXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG5cdCAqL1xuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0b25CdWlsZCggLyogc2hhZGVyb2JqZWN0LCByZW5kZXJlciAqLyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ01hdGVyaWFsOiBvbkJ1aWxkKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7IC8vIEBkZXByZWNhdGVkLCByMTY2XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBtYXRlcmlhbCBmb3IgZHJhd2luZyBnZW9tZXRyaWVzIGluIGEgc2ltcGxlIHNoYWRlZCAoZmxhdCBvciB3aXJlZnJhbWUpIHdheS5cbiAqXG4gKiBUaGlzIG1hdGVyaWFsIGlzIG5vdCBhZmZlY3RlZCBieSBsaWdodHMuXG4gKlxuICogQGF1Z21lbnRzIE1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hCYXNpY01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggYmFzaWMgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoQmFzaWNNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBDb2xvciBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSwxKVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGVtaXNzaXZlXG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgbWFwLiBNYXkgb3B0aW9uYWxseSBpbmNsdWRlIGFuIGFscGhhIGNoYW5uZWwsIHR5cGljYWxseSBjb21iaW5lZFxuXHRcdCAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4gVGhlIHRleHR1cmUgbWFwXG5cdFx0ICogY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZSBkaWZmdXNlIGBjb2xvcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaWdodCBtYXAuIFJlcXVpcmVzIGEgc2Vjb25kIHNldCBvZiBVVnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSW50ZW5zaXR5IG9mIHRoZSBiYWtlZCBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVkIGNoYW5uZWwgb2YgdGhpcyB0ZXh0dXJlIGlzIHVzZWQgYXMgdGhlIGFtYmllbnQgb2NjbHVzaW9uIG1hcC5cblx0XHQgKiBSZXF1aXJlcyBhIHNlY29uZCBzZXQgb2YgVVZzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgYW1iaWVudCBvY2NsdXNpb24gZWZmZWN0LiBSYW5nZSBpcyBgWzAsMV1gLCB3aGVyZSBgMGBcblx0XHQgKiBkaXNhYmxlcyBhbWJpZW50IG9jY2x1c2lvbi4gV2hlcmUgaW50ZW5zaXR5IGlzIGAxYCBhbmQgdGhlIEFPIG1hcCdzXG5cdFx0ICogcmVkIGNoYW5uZWwgaXMgYWxzbyBgMWAsIGFtYmllbnQgbGlnaHQgaXMgZnVsbHkgb2NjbHVkZWQgb24gYSBzdXJmYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIFNwZWN1bGFyIG1hcCB1c2VkIGJ5IHRoZSBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWxwaGEgbWFwIGlzIGEgZ3JheXNjYWxlIHRleHR1cmUgdGhhdCBjb250cm9scyB0aGUgb3BhY2l0eSBhY3Jvc3MgdGhlXG5cdFx0ICogc3VyZmFjZSAoYmxhY2s6IGZ1bGx5IHRyYW5zcGFyZW50OyB3aGl0ZTogZnVsbHkgb3BhcXVlKS5cblx0XHQgKlxuXHRcdCAqIE9ubHkgdGhlIGNvbG9yIG9mIHRoZSB0ZXh0dXJlIGlzIHVzZWQsIGlnbm9yaW5nIHRoZSBhbHBoYSBjaGFubmVsIGlmIG9uZVxuXHRcdCAqIGV4aXN0cy4gRm9yIFJHQiBhbmQgUkdCQSB0ZXh0dXJlcywgdGhlIHJlbmRlcmVyIHdpbGwgdXNlIHRoZSBncmVlbiBjaGFubmVsXG5cdFx0ICogd2hlbiBzYW1wbGluZyB0aGlzIHRleHR1cmUgZHVlIHRvIHRoZSBleHRyYSBiaXQgb2YgcHJlY2lzaW9uIHByb3ZpZGVkIGZvclxuXHRcdCAqIGdyZWVuIGluIERYVC1jb21wcmVzc2VkIGFuZCB1bmNvbXByZXNzZWQgUkdCIDU2NSBmb3JtYXRzLiBMdW1pbmFuY2Utb25seSBhbmRcblx0XHQgKiBsdW1pbmFuY2UvYWxwaGEgdGV4dHVyZXMgd2lsbCBhbHNvIHN0aWxsIHdvcmsgYXMgZXhwZWN0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGVudmlyb25tZW50IG1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJvdGF0aW9uIG9mIHRoZSBlbnZpcm9ubWVudCBtYXAgaW4gcmFkaWFucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtFdWxlcn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IHRvIGNvbWJpbmUgdGhlIHJlc3VsdCBvZiB0aGUgc3VyZmFjZSdzIGNvbG9yIHdpdGggdGhlIGVudmlyb25tZW50IG1hcCwgaWYgYW55LlxuXHRcdCAqXG5cdFx0ICogV2hlbiBzZXQgdG8gYE1peE9wZXJhdGlvbmAsIHRoZSB7QGxpbmsgTWVzaEJhc2ljTWF0ZXJpYWwjcmVmbGVjdGl2aXR5fSBpcyB1c2VkIHRvXG5cdFx0ICogYmxlbmQgYmV0d2VlbiB0aGUgdHdvIGNvbG9ycy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTXVsdGlwbHlPcGVyYXRpb258TWl4T3BlcmF0aW9ufEFkZE9wZXJhdGlvbil9XG5cdFx0ICogQGRlZmF1bHQgTXVsdGlwbHlPcGVyYXRpb25cblx0XHQgKi9cblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSBlbnZpcm9ubWVudCBtYXAgYWZmZWN0cyB0aGUgc3VyZmFjZS5cblx0XHQgKiBUaGUgdmFsaWQgcmFuZ2UgaXMgYmV0d2VlbiBgMGAgKG5vIHJlZmxlY3Rpb25zKSBhbmQgYDFgIChmdWxsIHJlZmxlY3Rpb25zKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbmRleCBvZiByZWZyYWN0aW9uIChJT1IpIG9mIGFpciAoYXBwcm94aW1hdGVseSAxKSBkaXZpZGVkIGJ5IHRoZVxuXHRcdCAqIGluZGV4IG9mIHJlZnJhY3Rpb24gb2YgdGhlIG1hdGVyaWFsLiBJdCBpcyB1c2VkIHdpdGggZW52aXJvbm1lbnQgbWFwcGluZ1xuXHRcdCAqIG1vZGVzIHtAbGluayBDdWJlUmVmcmFjdGlvbk1hcHBpbmd9IGFuZCB7QGxpbmsgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmd9LlxuXHRcdCAqIFRoZSByZWZyYWN0aW9uIHJhdGlvIHNob3VsZCBub3QgZXhjZWVkIGAxYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMC45OFxuXHRcdCAqL1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcnMgdGhlIGdlb21ldHJ5IGFzIGEgd2lyZWZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29udHJvbHMgdGhlIHRoaWNrbmVzcyBvZiB0aGUgd2lyZWZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIGFwcGVhcmFuY2Ugb2Ygd2lyZWZyYW1lIGVuZHMuXG5cdFx0ICpcblx0XHQgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFNWR1JlbmRlcmVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ3JvdW5kJ3wnYmV2ZWwnfCdtaXRlcicpfVxuXHRcdCAqIEBkZWZhdWx0ICdyb3VuZCdcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBhcHBlYXJhbmNlIG9mIHdpcmVmcmFtZSBqb2ludHMuXG5cdFx0ICpcblx0XHQgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFNWR1JlbmRlcmVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ3JvdW5kJ3wnYmV2ZWwnfCdtaXRlcicpfVxuXHRcdCAqIEBkZWZhdWx0ICdyb3VuZCdcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbi5jb3B5KCBzb3VyY2UuZW52TWFwUm90YXRpb24gKTtcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8vIEZhc3QgSGFsZiBGbG9hdCBDb252ZXJzaW9ucywgaHR0cDovL3d3dy5mb3gtdG9vbGtpdC5vcmcvZnRwL2Zhc3RoYWxmZmxvYXRjb252ZXJzaW9uLnBkZlxuXG5jb25zdCBfdGFibGVzID0gLypAX19QVVJFX18qLyBfZ2VuZXJhdGVUYWJsZXMoKTtcblxuZnVuY3Rpb24gX2dlbmVyYXRlVGFibGVzKCkge1xuXG5cdC8vIGZsb2F0MzIgdG8gZmxvYXQxNiBoZWxwZXJzXG5cblx0Y29uc3QgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKCA0ICk7XG5cdGNvbnN0IGZsb2F0VmlldyA9IG5ldyBGbG9hdDMyQXJyYXkoIGJ1ZmZlciApO1xuXHRjb25zdCB1aW50MzJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KCBidWZmZXIgKTtcblxuXHRjb25zdCBiYXNlVGFibGUgPSBuZXcgVWludDMyQXJyYXkoIDUxMiApO1xuXHRjb25zdCBzaGlmdFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KCA1MTIgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCAyNTY7ICsrIGkgKSB7XG5cblx0XHRjb25zdCBlID0gaSAtIDEyNztcblxuXHRcdC8vIHZlcnkgc21hbGwgbnVtYmVyICgwLCAtMClcblxuXHRcdGlmICggZSA8IC0yNyApIHtcblxuXHRcdFx0YmFzZVRhYmxlWyBpIF0gPSAweDAwMDA7XG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gMHg4MDAwO1xuXHRcdFx0c2hpZnRUYWJsZVsgaSBdID0gMjQ7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDI0O1xuXG5cdFx0XHQvLyBzbWFsbCBudW1iZXIgKGRlbm9ybSlcblxuXHRcdH0gZWxzZSBpZiAoIGUgPCAtMTQgKSB7XG5cblx0XHRcdGJhc2VUYWJsZVsgaSBdID0gMHgwNDAwID4+ICggLSBlIC0gMTQgKTtcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAoIDB4MDQwMCA+PiAoIC0gZSAtIDE0ICkgKSB8IDB4ODAwMDtcblx0XHRcdHNoaWZ0VGFibGVbIGkgXSA9IC0gZSAtIDE7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IC0gZSAtIDE7XG5cblx0XHRcdC8vIG5vcm1hbCBudW1iZXJcblxuXHRcdH0gZWxzZSBpZiAoIGUgPD0gMTUgKSB7XG5cblx0XHRcdGJhc2VUYWJsZVsgaSBdID0gKCBlICsgMTUgKSA8PCAxMDtcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAoICggZSArIDE1ICkgPDwgMTAgKSB8IDB4ODAwMDtcblx0XHRcdHNoaWZ0VGFibGVbIGkgXSA9IDEzO1xuXHRcdFx0c2hpZnRUYWJsZVsgaSB8IDB4MTAwIF0gPSAxMztcblxuXHRcdFx0Ly8gbGFyZ2UgbnVtYmVyIChJbmZpbml0eSwgLUluZmluaXR5KVxuXG5cdFx0fSBlbHNlIGlmICggZSA8IDEyOCApIHtcblxuXHRcdFx0YmFzZVRhYmxlWyBpIF0gPSAweDdjMDA7XG5cdFx0XHRiYXNlVGFibGVbIGkgfCAweDEwMCBdID0gMHhmYzAwO1xuXHRcdFx0c2hpZnRUYWJsZVsgaSBdID0gMjQ7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIHwgMHgxMDAgXSA9IDI0O1xuXG5cdFx0XHQvLyBzdGF5IChOYU4sIEluZmluaXR5LCAtSW5maW5pdHkpXG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRiYXNlVGFibGVbIGkgXSA9IDB4N2MwMDtcblx0XHRcdGJhc2VUYWJsZVsgaSB8IDB4MTAwIF0gPSAweGZjMDA7XG5cdFx0XHRzaGlmdFRhYmxlWyBpIF0gPSAxMztcblx0XHRcdHNoaWZ0VGFibGVbIGkgfCAweDEwMCBdID0gMTM7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGZsb2F0MTYgdG8gZmxvYXQzMiBoZWxwZXJzXG5cblx0Y29uc3QgbWFudGlzc2FUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggMjA0OCApO1xuXHRjb25zdCBleHBvbmVudFRhYmxlID0gbmV3IFVpbnQzMkFycmF5KCA2NCApO1xuXHRjb25zdCBvZmZzZXRUYWJsZSA9IG5ldyBVaW50MzJBcnJheSggNjQgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDE7IGkgPCAxMDI0OyArKyBpICkge1xuXG5cdFx0bGV0IG0gPSBpIDw8IDEzOyAvLyB6ZXJvIHBhZCBtYW50aXNzYSBiaXRzXG5cdFx0bGV0IGUgPSAwOyAvLyB6ZXJvIGV4cG9uZW50XG5cblx0XHQvLyBub3JtYWxpemVkXG5cdFx0d2hpbGUgKCAoIG0gJiAweDAwODAwMDAwICkgPT09IDAgKSB7XG5cblx0XHRcdG0gPDw9IDE7XG5cdFx0XHRlIC09IDB4MDA4MDAwMDA7IC8vIGRlY3JlbWVudCBleHBvbmVudFxuXG5cdFx0fVxuXG5cdFx0bSAmPSAtODM4ODYwOTsgLy8gY2xlYXIgbGVhZGluZyAxIGJpdFxuXHRcdGUgKz0gMHgzODgwMDAwMDsgLy8gYWRqdXN0IGJpYXNcblxuXHRcdG1hbnRpc3NhVGFibGVbIGkgXSA9IG0gfCBlO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDEwMjQ7IGkgPCAyMDQ4OyArKyBpICkge1xuXG5cdFx0bWFudGlzc2FUYWJsZVsgaSBdID0gMHgzODAwMDAwMCArICggKCBpIC0gMTAyNCApIDw8IDEzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMTsgaSA8IDMxOyArKyBpICkge1xuXG5cdFx0ZXhwb25lbnRUYWJsZVsgaSBdID0gaSA8PCAyMztcblxuXHR9XG5cblx0ZXhwb25lbnRUYWJsZVsgMzEgXSA9IDB4NDc4MDAwMDA7XG5cdGV4cG9uZW50VGFibGVbIDMyIF0gPSAweDgwMDAwMDAwO1xuXG5cdGZvciAoIGxldCBpID0gMzM7IGkgPCA2MzsgKysgaSApIHtcblxuXHRcdGV4cG9uZW50VGFibGVbIGkgXSA9IDB4ODAwMDAwMDAgKyAoICggaSAtIDMyICkgPDwgMjMgKTtcblxuXHR9XG5cblx0ZXhwb25lbnRUYWJsZVsgNjMgXSA9IDB4Yzc4MDAwMDA7XG5cblx0Zm9yICggbGV0IGkgPSAxOyBpIDwgNjQ7ICsrIGkgKSB7XG5cblx0XHRpZiAoIGkgIT09IDMyICkge1xuXG5cdFx0XHRvZmZzZXRUYWJsZVsgaSBdID0gMTAyNDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRmbG9hdFZpZXc6IGZsb2F0Vmlldyxcblx0XHR1aW50MzJWaWV3OiB1aW50MzJWaWV3LFxuXHRcdGJhc2VUYWJsZTogYmFzZVRhYmxlLFxuXHRcdHNoaWZ0VGFibGU6IHNoaWZ0VGFibGUsXG5cdFx0bWFudGlzc2FUYWJsZTogbWFudGlzc2FUYWJsZSxcblx0XHRleHBvbmVudFRhYmxlOiBleHBvbmVudFRhYmxlLFxuXHRcdG9mZnNldFRhYmxlOiBvZmZzZXRUYWJsZVxuXHR9O1xuXG59XG5cbi8qKlxuICogUmV0dXJucyBhIGhhbGYgcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IHZhbHVlIChGUDE2KSBmcm9tIHRoZSBnaXZlbiBzaW5nbGVcbiAqIHByZWNpc2lvbiBmbG9hdGluZyBwb2ludCB2YWx1ZSAoRlAzMikuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIEEgc2luZ2xlIHByZWNpc2lvbiBmbG9hdGluZyBwb2ludCB2YWx1ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIEZQMTYgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHRvSGFsZkZsb2F0KCB2YWwgKSB7XG5cblx0aWYgKCBNYXRoLmFicyggdmFsICkgPiA2NTUwNCApIGNvbnNvbGUud2FybiggJ1RIUkVFLkRhdGFVdGlscy50b0hhbGZGbG9hdCgpOiBWYWx1ZSBvdXQgb2YgcmFuZ2UuJyApO1xuXG5cdHZhbCA9IGNsYW1wKCB2YWwsIC02NTUwNCwgNjU1MDQgKTtcblxuXHRfdGFibGVzLmZsb2F0Vmlld1sgMCBdID0gdmFsO1xuXHRjb25zdCBmID0gX3RhYmxlcy51aW50MzJWaWV3WyAwIF07XG5cdGNvbnN0IGUgPSAoIGYgPj4gMjMgKSAmIDB4MWZmO1xuXHRyZXR1cm4gX3RhYmxlcy5iYXNlVGFibGVbIGUgXSArICggKCBmICYgMHgwMDdmZmZmZiApID4+IF90YWJsZXMuc2hpZnRUYWJsZVsgZSBdICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2luZ2xlIHByZWNpc2lvbiBmbG9hdGluZyBwb2ludCB2YWx1ZSAoRlAzMikgZnJvbSB0aGUgZ2l2ZW4gaGFsZlxuICogcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IHZhbHVlIChGUDE2KS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gQSBoYWxmIHByZWNpc2lvbiBmbG9hdGluZyBwb2ludCB2YWx1ZS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIEZQMzIgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGZyb21IYWxmRmxvYXQoIHZhbCApIHtcblxuXHRjb25zdCBtID0gdmFsID4+IDEwO1xuXHRfdGFibGVzLnVpbnQzMlZpZXdbIDAgXSA9IF90YWJsZXMubWFudGlzc2FUYWJsZVsgX3RhYmxlcy5vZmZzZXRUYWJsZVsgbSBdICsgKCB2YWwgJiAweDNmZiApIF0gKyBfdGFibGVzLmV4cG9uZW50VGFibGVbIG0gXTtcblx0cmV0dXJuIF90YWJsZXMuZmxvYXRWaWV3WyAwIF07XG5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIGNvbnRhaW5pbmcgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIGRhdGEuXG4gKlxuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBEYXRhVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgaGFsZiBwcmVjaXNpb24gZmxvYXRpbmcgcG9pbnQgdmFsdWUgKEZQMTYpIGZyb20gdGhlIGdpdmVuIHNpbmdsZVxuXHQgKiBwcmVjaXNpb24gZmxvYXRpbmcgcG9pbnQgdmFsdWUgKEZQMzIpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsIC0gQSBzaW5nbGUgcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBGUDE2IHZhbHVlLlxuXHQgKi9cblx0c3RhdGljIHRvSGFsZkZsb2F0KCB2YWwgKSB7XG5cblx0XHRyZXR1cm4gdG9IYWxmRmxvYXQoIHZhbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHNpbmdsZSBwcmVjaXNpb24gZmxvYXRpbmcgcG9pbnQgdmFsdWUgKEZQMzIpIGZyb20gdGhlIGdpdmVuIGhhbGZcblx0ICogcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IHZhbHVlIChGUDE2KS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbCAtIEEgaGFsZiBwcmVjaXNpb24gZmxvYXRpbmcgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIEZQMzIgdmFsdWUuXG5cdCAqL1xuXHRzdGF0aWMgZnJvbUhhbGZGbG9hdCggdmFsICkge1xuXG5cdFx0cmV0dXJuIGZyb21IYWxmRmxvYXQoIHZhbCApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJDkgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdmVjdG9yMiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG5sZXQgX2lkJDIgPSAwO1xuXG4vKipcbiAqIFRoaXMgY2xhc3Mgc3RvcmVzIGRhdGEgZm9yIGFuIGF0dHJpYnV0ZSAoc3VjaCBhcyB2ZXJ0ZXggcG9zaXRpb25zLCBmYWNlXG4gKiBpbmRpY2VzLCBub3JtYWxzLCBjb2xvcnMsIFVWcywgYW5kIGFueSBjdXN0b20gYXR0cmlidXRlcyApIGFzc29jaWF0ZWQgd2l0aFxuICogYSBnZW9tZXRyeSwgd2hpY2ggYWxsb3dzIGZvciBtb3JlIGVmZmljaWVudCBwYXNzaW5nIG9mIGRhdGEgdG8gdGhlIEdQVS5cbiAqXG4gKiBXaGVuIHdvcmtpbmcgd2l0aCB2ZWN0b3ItbGlrZSBkYXRhLCB0aGUgYGZyb21CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kZXggKWBcbiAqIGhlbHBlciBtZXRob2RzIG9uIHZlY3RvciBhbmQgY29sb3IgY2xhc3MgbWlnaHQgYmUgaGVscGZ1bC4gRS5nLiB7QGxpbmsgVmVjdG9yMyNmcm9tQnVmZmVyQXR0cmlidXRlfS5cbiAqL1xuY2xhc3MgQnVmZmVyQXR0cmlidXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCA9IGZhbHNlICkge1xuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiBhcnJheSBzaG91bGQgYmUgYSBUeXBlZCBBcnJheS4nICk7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBJRCBvZiB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0XHQgKlxuXHRcdCAqIEBuYW1lIEJ1ZmZlckF0dHJpYnV0ZSNpZFxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfaWQkMiArKyB9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmFtZSBvZiB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXJyYXkgaG9sZGluZyB0aGUgYXR0cmlidXRlIGRhdGEuIEl0IHNob3VsZCBoYXZlIGBpdGVtU2l6ZSAqIG51bVZlcnRpY2VzYFxuXHRcdCAqIGVsZW1lbnRzLCB3aGVyZSBgbnVtVmVydGljZXNgIGlzIHRoZSBudW1iZXIgb2YgdmVydGljZXMgaW4gdGhlIGFzc29jaWF0ZWQgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VHlwZWRBcnJheX1cblx0XHQgKi9cblx0XHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbnVtYmVyIG9mIHZhbHVlcyBvZiB0aGUgYXJyYXkgdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIGEgcGFydGljdWxhciB2ZXJ0ZXguXG5cdFx0ICogRm9yIGluc3RhbmNlLCBpZiB0aGlzIGF0dHJpYnV0ZSBpcyBzdG9yaW5nIGEgMy1jb21wb25lbnQgdmVjdG9yIChzdWNoIGFzIGEgcG9zaXRpb24sXG5cdFx0ICogbm9ybWFsLCBvciBjb2xvciksIHRoZW4gdGhlIHZhbHVlIHNob3VsZCBiZSBgM2AuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIG51bWJlciBvZiBpdGVtcyB0aGlzIGJ1ZmZlciBhdHRyaWJ1dGUgc3RvcmVzLiBJdCBpcyBpbnRlcm5hbGx5IGNvbXB1dGVkXG5cdFx0ICogYnkgZGl2aWRpbmcgdGhlIGBhcnJheWAgbGVuZ3RoIGJ5IHRoZSBgaXRlbVNpemVgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIGl0ZW1TaXplIDogMDtcblxuXHRcdC8qKlxuXHRcdCAqIEFwcGxpZXMgdG8gaW50ZWdlciBkYXRhIG9ubHkuIEluZGljYXRlcyBob3cgdGhlIHVuZGVybHlpbmcgZGF0YSBpbiB0aGUgYnVmZmVyIG1hcHMgdG9cblx0XHQgKiB0aGUgdmFsdWVzIGluIHRoZSBHTFNMIGNvZGUuIEZvciBpbnN0YW5jZSwgaWYgYGFycmF5YCBpcyBhbiBpbnN0YW5jZSBvZiBgVUludDE2QXJyYXlgLFxuXHRcdCAqIGFuZCBgbm9ybWFsaXplZGAgaXMgYHRydWVgLCB0aGUgdmFsdWVzIGAwIC0rNjU1MzVgIGluIHRoZSBhcnJheSBkYXRhIHdpbGwgYmUgbWFwcGVkIHRvXG5cdFx0ICogYDAuMGYgLSArMS4wZmAgaW4gdGhlIEdMU0wgYXR0cmlidXRlLiBJZiBgbm9ybWFsaXplZGAgaXMgYGZhbHNlYCwgdGhlIHZhbHVlcyB3aWxsIGJlIGNvbnZlcnRlZFxuXHRcdCAqIHRvIGZsb2F0cyB1bm1vZGlmaWVkLCBpLmUuIGA2NTUzNWAgYmVjb21lcyBgNjU1MzUuMGZgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIGludGVuZGVkIHVzYWdlIHBhdHRlcm4gb2YgdGhlIGRhdGEgc3RvcmUgZm9yIG9wdGltaXphdGlvbiBwdXJwb3Nlcy5cblx0XHQgKlxuXHRcdCAqIE5vdGU6IEFmdGVyIHRoZSBpbml0aWFsIHVzZSBvZiBhIGJ1ZmZlciwgaXRzIHVzYWdlIGNhbm5vdCBiZSBjaGFuZ2VkLiBJbnN0ZWFkLFxuXHRcdCAqIGluc3RhbnRpYXRlIGEgbmV3IG9uZSBhbmQgc2V0IHRoZSBkZXNpcmVkIHVzYWdlIGJlZm9yZSB0aGUgbmV4dCByZW5kZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFN0YXRpY0RyYXdVc2FnZXxEeW5hbWljRHJhd1VzYWdlfFN0cmVhbURyYXdVc2FnZXxTdGF0aWNSZWFkVXNhZ2V8RHluYW1pY1JlYWRVc2FnZXxTdHJlYW1SZWFkVXNhZ2V8U3RhdGljQ29weVVzYWdlfER5bmFtaWNDb3B5VXNhZ2V8U3RyZWFtQ29weVVzYWdlKX1cblx0XHQgKiBAZGVmYXVsdCBTdGF0aWNEcmF3VXNhZ2Vcblx0XHQgKi9cblx0XHR0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBjYW4gYmUgdXNlZCB0byBvbmx5IHVwZGF0ZSBzb21lIGNvbXBvbmVudHMgb2Ygc3RvcmVkIHZlY3RvcnMgKGZvciBleGFtcGxlLCBqdXN0IHRoZVxuXHRcdCAqIGNvbXBvbmVudCByZWxhdGVkIHRvIGNvbG9yKS4gVXNlIHRoZSBgYWRkVXBkYXRlUmFuZ2UoKWAgZnVuY3Rpb24gdG8gYWRkIHJhbmdlcyB0byB0aGlzIGFycmF5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVSYW5nZXMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbmZpZ3VyZXMgdGhlIGJvdW5kIEdQVSB0eXBlIGZvciB1c2UgaW4gc2hhZGVycy5cblx0XHQgKlxuXHRcdCAqIE5vdGU6IHRoaXMgb25seSBoYXMgYW4gZWZmZWN0IGZvciBpbnRlZ2VyIGFycmF5cyBhbmQgaXMgbm90IGNvbmZpZ3VyYWJsZSBmb3IgZmxvYXQgYXJyYXlzLlxuXHRcdCAqIEZvciBsb3dlciBwcmVjaXNpb24gZmxvYXQgdHlwZXMsIHVzZSBgRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KEZsb2F0VHlwZXxJbnRUeXBlKX1cblx0XHQgKiBAZGVmYXVsdCBGbG9hdFR5cGVcblx0XHQgKi9cblx0XHR0aGlzLmdwdVR5cGUgPSBGbG9hdFR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBBIHZlcnNpb24gbnVtYmVyLCBpbmNyZW1lbnRlZCBldmVyeSB0aW1lIHRoZSBgbmVlZHNVcGRhdGVgIGlzIHNldCB0byBgdHJ1ZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgdGhlIHJlbmRlcmVyIGhhcyB0cmFuc2ZlcnJlZCB0aGUgYXR0cmlidXRlXG5cdCAqIGFycmF5IGRhdGEgdG8gdGhlIEdQVS5cblx0ICovXG5cdG9uVXBsb2FkQ2FsbGJhY2soKSB7fVxuXG5cdC8qKlxuXHQgKiBGbGFnIHRvIGluZGljYXRlIHRoYXQgdGhpcyBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgYW5kIHNob3VsZCBiZSByZS1zZW50IHRvXG5cdCAqIHRoZSBHUFUuIFNldCB0aGlzIHRvIGB0cnVlYCB3aGVuIHlvdSBtb2RpZnkgdGhlIHZhbHVlIG9mIHRoZSBhcnJheS5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgZmFsc2Vcblx0ICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuXHQgKi9cblx0c2V0IG5lZWRzVXBkYXRlKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdmFsdWUgPT09IHRydWUgKSB0aGlzLnZlcnNpb24gKys7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB1c2FnZSBvZiB0aGlzIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KFN0YXRpY0RyYXdVc2FnZXxEeW5hbWljRHJhd1VzYWdlfFN0cmVhbURyYXdVc2FnZXxTdGF0aWNSZWFkVXNhZ2V8RHluYW1pY1JlYWRVc2FnZXxTdHJlYW1SZWFkVXNhZ2V8U3RhdGljQ29weVVzYWdlfER5bmFtaWNDb3B5VXNhZ2V8U3RyZWFtQ29weVVzYWdlKX0gdmFsdWUgLSBUaGUgdXNhZ2UgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICovXG5cdHNldFVzYWdlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudXNhZ2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIHJhbmdlIG9mIGRhdGEgaW4gdGhlIGRhdGEgYXJyYXkgdG8gYmUgdXBkYXRlZCBvbiB0aGUgR1BVLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBQb3NpdGlvbiBhdCB3aGljaCB0byBzdGFydCB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBudW1iZXIgb2YgY29tcG9uZW50cyB0byB1cGRhdGUuXG5cdCAqL1xuXHRhZGRVcGRhdGVSYW5nZSggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0dGhpcy51cGRhdGVSYW5nZXMucHVzaCggeyBzdGFydCwgY291bnQgfSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIHRoZSB1cGRhdGUgcmFuZ2VzLlxuXHQgKi9cblx0Y2xlYXJVcGRhdGVSYW5nZXMoKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVJhbmdlcy5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGJ1ZmZlciBhdHRyaWJ1dGUgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV9IHNvdXJjZSAtIFRoZSBidWZmZXIgYXR0cmlidXRlIHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXHRcdHRoaXMuYXJyYXkgPSBuZXcgc291cmNlLmFycmF5LmNvbnN0cnVjdG9yKCBzb3VyY2UuYXJyYXkgKTtcblx0XHR0aGlzLml0ZW1TaXplID0gc291cmNlLml0ZW1TaXplO1xuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XG5cdFx0dGhpcy5ub3JtYWxpemVkID0gc291cmNlLm5vcm1hbGl6ZWQ7XG5cblx0XHR0aGlzLnVzYWdlID0gc291cmNlLnVzYWdlO1xuXHRcdHRoaXMuZ3B1VHlwZSA9IHNvdXJjZS5ncHVUeXBlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgYSB2ZWN0b3IgZnJvbSB0aGUgZ2l2ZW4gYnVmZmVyIGF0dHJpYnV0ZSB0byB0aGlzIG9uZS4gVGhlIHN0YXJ0XG5cdCAqIGFuZCBkZXN0aW5hdGlvbiBwb3NpdGlvbiBpbiB0aGUgYXR0cmlidXRlIGJ1ZmZlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IHRoZVxuXHQgKiBnaXZlbiBpbmRpY2VzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgxIC0gVGhlIGRlc3RpbmF0aW9uIGluZGV4IGludG8gdGhpcyBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gYXR0cmlidXRlIC0gVGhlIGJ1ZmZlciBhdHRyaWJ1dGUgdG8gY29weSBmcm9tLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgyIC0gVGhlIHNvdXJjZSBpbmRleCBpbnRvIHRoZSBnaXZlbiBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5QXQoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7XG5cblx0XHRpbmRleDEgKj0gdGhpcy5pdGVtU2l6ZTtcblx0XHRpbmRleDIgKj0gYXR0cmlidXRlLml0ZW1TaXplO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5pdGVtU2l6ZTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIGdpdmVuIGFycmF5IGRhdGEgaW50byB0aGlzIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KFR5cGVkQXJyYXl8QXJyYXkpfSBhcnJheSAtIFRoZSBhcnJheSB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5QXJyYXkoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIGFycmF5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIGdpdmVuIDN4MyBtYXRyaXggdG8gdGhlIGdpdmVuIGF0dHJpYnV0ZS4gV29ya3Mgd2l0aFxuXHQgKiBpdGVtIHNpemUgYDJgIGFuZCBgM2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBtYXRyaXggdG8gYXBwbHkuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGFwcGx5TWF0cml4MyggbSApIHtcblxuXHRcdGlmICggdGhpcy5pdGVtU2l6ZSA9PT0gMiApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0X3ZlY3RvcjIkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cdFx0XHRcdF92ZWN0b3IyJDEuYXBwbHlNYXRyaXgzKCBtICk7XG5cblx0XHRcdFx0dGhpcy5zZXRYWSggaSwgX3ZlY3RvcjIkMS54LCBfdmVjdG9yMiQxLnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5pdGVtU2l6ZSA9PT0gMyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0X3ZlY3RvciQ5LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblx0XHRcdFx0X3ZlY3RvciQ5LmFwcGx5TWF0cml4MyggbSApO1xuXG5cdFx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDkueCwgX3ZlY3RvciQ5LnksIF92ZWN0b3IkOS56ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQXBwbGllcyB0aGUgZ2l2ZW4gNHg0IG1hdHJpeCB0byB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBPbmx5IHdvcmtzIHdpdGhcblx0ICogaXRlbSBzaXplIGAzYC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeCB0byBhcHBseS5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkOS5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IkOS5hcHBseU1hdHJpeDQoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQXBwbGllcyB0aGUgZ2l2ZW4gM3gzIG5vcm1hbCBtYXRyaXggdG8gdGhlIGdpdmVuIGF0dHJpYnV0ZS4gT25seSB3b3JrcyB3aXRoXG5cdCAqIGl0ZW0gc2l6ZSBgM2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4M30gbSAtIFRoZSBub3JtYWwgbWF0cml4IHRvIGFwcGx5LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRhcHBseU5vcm1hbE1hdHJpeCggbSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yJDkuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdGhpcywgaSApO1xuXG5cdFx0XHRfdmVjdG9yJDkuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQXBwbGllcyB0aGUgZ2l2ZW4gNHg0IG1hdHJpeCB0byB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBPbmx5IHdvcmtzIHdpdGhcblx0ICogaXRlbSBzaXplIGAzYCBhbmQgd2l0aCBkaXJlY3Rpb24gdmVjdG9ycy5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtIC0gVGhlIG1hdHJpeCB0byBhcHBseS5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0dHJhbnNmb3JtRGlyZWN0aW9uKCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkOS5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IkOS50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkOS54LCBfdmVjdG9yJDkueSwgX3ZlY3RvciQ5LnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gYXJyYXkgZGF0YSBpbiB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHsoVHlwZWRBcnJheXxBcnJheSl9IHZhbHVlIC0gVGhlIGFycmF5IGRhdGEgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSAtIFRoZSBvZmZzZXQgaW4gdGhpcyBidWZmZXIgYXR0cmlidXRlJ3MgYXJyYXkuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldCggdmFsdWUsIG9mZnNldCA9IDAgKSB7XG5cblx0XHQvLyBNYXRjaGluZyBCdWZmZXJBdHRyaWJ1dGUgY29uc3RydWN0b3IsIGRvIG5vdCBub3JtYWxpemUgdGhlIGFycmF5LlxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGdpdmVuIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb21wb25lbnQgLSBUaGUgY29tcG9uZW50IGluZGV4LlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByZXR1cm5lZCB2YWx1ZS5cblx0ICovXG5cdGdldENvbXBvbmVudCggaW5kZXgsIGNvbXBvbmVudCApIHtcblxuXHRcdGxldCB2YWx1ZSA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIGNvbXBvbmVudCBdO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB2YWx1ZSA9IGRlbm9ybWFsaXplKCB2YWx1ZSwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gdmFsdWUgdG8gdGhlIGdpdmVuIGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb21wb25lbnQgLSBUaGUgY29tcG9uZW50IGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRDb21wb25lbnQoIGluZGV4LCBjb21wb25lbnQsIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB2YWx1ZSA9IG5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIGNvbXBvbmVudCBdID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgeCBjb21wb25lbnQuXG5cdCAqL1xuXHRnZXRYKCBpbmRleCApIHtcblxuXHRcdGxldCB4ID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBkZW5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHg7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0WCggaW5kZXgsIHggKSB7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB5IGNvbXBvbmVudC5cblx0ICovXG5cdGdldFkoIGluZGV4ICkge1xuXG5cdFx0bGV0IHkgPSB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBkZW5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0WSggaW5kZXgsIHkgKSB7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHogY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgeiBjb21wb25lbnQuXG5cdCAqL1xuXHRnZXRaKCBpbmRleCApIHtcblxuXHRcdGxldCB6ID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gZGVub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB6O1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgeiBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldFooIGluZGV4LCB6ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB3IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHcgY29tcG9uZW50LlxuXHQgKi9cblx0Z2V0VyggaW5kZXggKSB7XG5cblx0XHRsZXQgdyA9IHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdyA9IGRlbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHRyZXR1cm4gdztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHcgLSBUaGUgdmFsdWUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRXKCBpbmRleCwgdyApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdyA9IG5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgeCBhbmQgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBmb3IgdGhlIHggY29tcG9uZW50IHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgZm9yIHRoZSB5IGNvbXBvbmVudCB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldFhZKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcblxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgeCwgeSBhbmQgeiBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBmb3IgdGhlIHggY29tcG9uZW50IHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgZm9yIHRoZSB5IGNvbXBvbmVudCB0byBzZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIGZvciB0aGUgeiBjb21wb25lbnQgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRYWVooIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xuXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgeCwgeSwgeiBhbmQgdyBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBmb3IgdGhlIHggY29tcG9uZW50IHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmFsdWUgZm9yIHRoZSB5IGNvbXBvbmVudCB0byBzZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIGZvciB0aGUgeiBjb21wb25lbnQgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSB2YWx1ZSBmb3IgdGhlIHcgY29tcG9uZW50IHRvIHNldC5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0WFlaVyggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblx0XHRcdHcgPSBub3JtYWxpemUoIHcsIHRoaXMuYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBhZnRlciB0aGUgUmVuZGVyZXIgaGFzIHRyYW5zZmVycmVkXG5cdCAqIHRoZSBhdHRyaWJ1dGUgYXJyYXkgZGF0YSB0byB0aGUgR1BVLiBDYW4gYmUgdXNlZCB0byBwZXJmb3JtIGNsZWFuLXVwIG9wZXJhdGlvbnMgYWZ0ZXJcblx0ICogdGhlIHVwbG9hZCB3aGVuIGF0dHJpYnV0ZSBkYXRhIGFyZSBub3QgbmVlZGVkIGFueW1vcmUgb24gdGhlIENQVSBzaWRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBgb25VcGxvYWQoKWAgY2FsbGJhY2suXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdG9uVXBsb2FkKCBjYWxsYmFjayApIHtcblxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5hcnJheSwgdGhpcy5pdGVtU2l6ZSApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIGJ1ZmZlciBhdHRyaWJ1dGUgaW50byBKU09OLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqL1xuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0aXRlbVNpemU6IHRoaXMuaXRlbVNpemUsXG5cdFx0XHR0eXBlOiB0aGlzLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXG5cdFx0XHRhcnJheTogQXJyYXkuZnJvbSggdGhpcy5hcnJheSApLFxuXHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0fTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIHRoaXMudXNhZ2UgIT09IFN0YXRpY0RyYXdVc2FnZSApIGRhdGEudXNhZ2UgPSB0aGlzLnVzYWdlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ29udmVuaWVudCBjbGFzcyB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBgSW50OGAgYnVmZmVyIGF0dHJpYnV0ZSB3aXRoXG4gKiBhIHBsYWluIGBBcnJheWAgaW5zdGFuY2UuXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckF0dHJpYnV0ZVxuICovXG5jbGFzcyBJbnQ4QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhBcnJheTxudW1iZXI+fEludDhBcnJheSl9IGFycmF5IC0gVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgSW50OEFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENvbnZlbmllbnQgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgYFVJbnQ4YCBidWZmZXIgYXR0cmlidXRlIHdpdGhcbiAqIGEgcGxhaW4gYEFycmF5YCBpbnN0YW5jZS5cbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyQXR0cmlidXRlXG4gKi9cbmNsYXNzIFVpbnQ4QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhBcnJheTxudW1iZXI+fFVpbnQ4QXJyYXkpfSBhcnJheSAtIFRoZSBhcnJheSBob2xkaW5nIHRoZSBhdHRyaWJ1dGUgZGF0YS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGl0ZW1TaXplIC0gVGhlIGl0ZW0gc2l6ZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBbbm9ybWFsaXplZD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBkYXRhIGFyZSBub3JtYWxpemVkIG9yIG5vdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ29udmVuaWVudCBjbGFzcyB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBgVUludDhDbGFtcGVkYCBidWZmZXIgYXR0cmlidXRlIHdpdGhcbiAqIGEgcGxhaW4gYEFycmF5YCBpbnN0YW5jZS5cbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyQXR0cmlidXRlXG4gKi9cbmNsYXNzIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHsoQXJyYXk8bnVtYmVyPnxVaW50OENsYW1wZWRBcnJheSl9IGFycmF5IC0gVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgVWludDhDbGFtcGVkQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ29udmVuaWVudCBjbGFzcyB0aGF0IGNhbiBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBgSW50MTZgIGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aFxuICogYSBwbGFpbiBgQXJyYXlgIGluc3RhbmNlLlxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJBdHRyaWJ1dGVcbiAqL1xuY2xhc3MgSW50MTZCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KEFycmF5PG51bWJlcj58SW50MTZBcnJheSl9IGFycmF5IC0gVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRcdHN1cGVyKCBuZXcgSW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDb252ZW5pZW50IGNsYXNzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIGBVSW50MTZgIGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aFxuICogYSBwbGFpbiBgQXJyYXlgIGluc3RhbmNlLlxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJBdHRyaWJ1dGVcbiAqL1xuY2xhc3MgVWludDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhBcnJheTxudW1iZXI+fFVpbnQxNkFycmF5KX0gYXJyYXkgLSBUaGUgYXJyYXkgaG9sZGluZyB0aGUgYXR0cmlidXRlIGRhdGEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpdGVtU2l6ZSAtIFRoZSBpdGVtIHNpemUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vcm1hbGl6ZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBVaW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDb252ZW5pZW50IGNsYXNzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIGBJbnQzMmAgYnVmZmVyIGF0dHJpYnV0ZSB3aXRoXG4gKiBhIHBsYWluIGBBcnJheWAgaW5zdGFuY2UuXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckF0dHJpYnV0ZVxuICovXG5jbGFzcyBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSBleHRlbmRzIEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHsoQXJyYXk8bnVtYmVyPnxJbnQzMkFycmF5KX0gYXJyYXkgLSBUaGUgYXJyYXkgaG9sZGluZyB0aGUgYXR0cmlidXRlIGRhdGEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpdGVtU2l6ZSAtIFRoZSBpdGVtIHNpemUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vcm1hbGl6ZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBJbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENvbnZlbmllbnQgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgYFVJbnQzMmAgYnVmZmVyIGF0dHJpYnV0ZSB3aXRoXG4gKiBhIHBsYWluIGBBcnJheWAgaW5zdGFuY2UuXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckF0dHJpYnV0ZVxuICovXG5jbGFzcyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KEFycmF5PG51bWJlcj58VWludDMyQXJyYXkpfSBhcnJheSAtIFRoZSBhcnJheSBob2xkaW5nIHRoZSBhdHRyaWJ1dGUgZGF0YS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGl0ZW1TaXplIC0gVGhlIGl0ZW0gc2l6ZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBbbm9ybWFsaXplZD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBkYXRhIGFyZSBub3JtYWxpemVkIG9yIG5vdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0XHRzdXBlciggbmV3IFVpbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENvbnZlbmllbnQgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIGNyZWF0aW5nIGEgYEZsb2F0MTZgIGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aFxuICogYSBwbGFpbiBgQXJyYXlgIGluc3RhbmNlLlxuICpcbiAqIFRoaXMgY2xhc3MgYXV0b21hdGljYWxseSBjb252ZXJ0cyB0byB0byBhbmQgZnJvbSBGUDE2IHNpbmNlIGBGbG9hdDE2QXJyYXlgIGlzIG5vdFxuICogbmF0aXZlbHkgc3VwcG9ydGVkIGluIEphdmFTY3JpcHQuXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckF0dHJpYnV0ZVxuICovXG5jbGFzcyBGbG9hdDE2QnVmZmVyQXR0cmlidXRlIGV4dGVuZHMgQnVmZmVyQXR0cmlidXRlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhBcnJheTxudW1iZXI+fFVpbnQxNkFycmF5KX0gYXJyYXkgLSBUaGUgYXJyYXkgaG9sZGluZyB0aGUgYXR0cmlidXRlIGRhdGEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpdGVtU2l6ZSAtIFRoZSBpdGVtIHNpemUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vcm1hbGl6ZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBVaW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdHRoaXMuaXNGbG9hdDE2QnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Z2V0WCggaW5kZXggKSB7XG5cblx0XHRsZXQgeCA9IGZyb21IYWxmRmxvYXQoIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdICk7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBkZW5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHg7XG5cblx0fVxuXG5cdHNldFgoIGluZGV4LCB4ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgXSA9IHRvSGFsZkZsb2F0KCB4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Z2V0WSggaW5kZXggKSB7XG5cblx0XHRsZXQgeSA9IGZyb21IYWxmRmxvYXQoIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDEgXSApO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB5ID0gZGVub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB5O1xuXG5cdH1cblxuXHRzZXRZKCBpbmRleCwgeSApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdID0gdG9IYWxmRmxvYXQoIHkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRaKCBpbmRleCApIHtcblxuXHRcdGxldCB6ID0gZnJvbUhhbGZGbG9hdCggdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdICk7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBkZW5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHo7XG5cblx0fVxuXG5cdHNldFooIGluZGV4LCB6ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF0gPSB0b0hhbGZGbG9hdCggeiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldFcoIGluZGV4ICkge1xuXG5cdFx0bGV0IHcgPSBmcm9tSGFsZkZsb2F0KCB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF0gKTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdyA9IGRlbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHRyZXR1cm4gdztcblxuXHR9XG5cblx0c2V0VyggaW5kZXgsIHcgKSB7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHcgPSBub3JtYWxpemUoIHcsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSArIDMgXSA9IHRvSGFsZkZsb2F0KCB3ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0c2V0WFkoIGluZGV4LCB4LCB5ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xuXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHRvSGFsZkZsb2F0KCB4ICk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB0b0hhbGZGbG9hdCggeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWiggaW5kZXgsIHgsIHksIHogKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0gdG9IYWxmRmxvYXQoIHggKTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHRvSGFsZkZsb2F0KCB5ICk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB0b0hhbGZGbG9hdCggeiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHNldFhZWlcoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkge1xuXG5cdFx0XHR4ID0gbm9ybWFsaXplKCB4LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR5ID0gbm9ybWFsaXplKCB5LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR6ID0gbm9ybWFsaXplKCB6LCB0aGlzLmFycmF5ICk7XG5cdFx0XHR3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDAgXSA9IHRvSGFsZkZsb2F0KCB4ICk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAxIF0gPSB0b0hhbGZGbG9hdCggeSApO1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMiBdID0gdG9IYWxmRmxvYXQoIHogKTtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDMgXSA9IHRvSGFsZkZsb2F0KCB3ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDb252ZW5pZW50IGNsYXNzIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBjcmVhdGluZyBhIGBGbG9hdDMyYCBidWZmZXIgYXR0cmlidXRlIHdpdGhcbiAqIGEgcGxhaW4gYEFycmF5YCBpbnN0YW5jZS5cbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyQXR0cmlidXRlXG4gKi9cbmNsYXNzIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KEFycmF5PG51bWJlcj58RmxvYXQzMkFycmF5KX0gYXJyYXkgLSBUaGUgYXJyYXkgaG9sZGluZyB0aGUgYXR0cmlidXRlIGRhdGEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpdGVtU2l6ZSAtIFRoZSBpdGVtIHNpemUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW25vcm1hbGl6ZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdFx0c3VwZXIoIG5ldyBGbG9hdDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0fVxuXG59XG5cbmxldCBfaWQkMSA9IDA7XG5cbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9vYmogPSAvKkBfX1BVUkVfXyovIG5ldyBPYmplY3QzRCgpO1xuY29uc3QgX29mZnNldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9ib3gkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcbmNvbnN0IF9ib3hNb3JwaFRhcmdldHMgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfdmVjdG9yJDggPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBtZXNoLCBsaW5lLCBvciBwb2ludCBnZW9tZXRyeS4gSW5jbHVkZXMgdmVydGV4XG4gKiBwb3NpdGlvbnMsIGZhY2UgaW5kaWNlcywgbm9ybWFscywgY29sb3JzLCBVVnMsIGFuZCBjdXN0b20gYXR0cmlidXRlc1xuICogd2l0aGluIGJ1ZmZlcnMsIHJlZHVjaW5nIHRoZSBjb3N0IG9mIHBhc3NpbmcgYWxsIHRoaXMgZGF0YSB0byB0aGUgR1BVLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICogLy8gY3JlYXRlIGEgc2ltcGxlIHNxdWFyZSBzaGFwZS4gV2UgZHVwbGljYXRlIHRoZSB0b3AgbGVmdCBhbmQgYm90dG9tIHJpZ2h0XG4gKiAvLyB2ZXJ0aWNlcyBiZWNhdXNlIGVhY2ggdmVydGV4IG5lZWRzIHRvIGFwcGVhciBvbmNlIHBlciB0cmlhbmdsZS5cbiAqIGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSggW1xuICogXHQtMS4wLCAtMS4wLCAgMS4wLCAvLyB2MFxuICogXHQgMS4wLCAtMS4wLCAgMS4wLCAvLyB2MVxuICogXHQgMS4wLCAgMS4wLCAgMS4wLCAvLyB2MlxuICpcbiAqIFx0IDEuMCwgIDEuMCwgIDEuMCwgLy8gdjNcbiAqIFx0LTEuMCwgIDEuMCwgIDEuMCwgLy8gdjRcbiAqIFx0LTEuMCwgLTEuMCwgIDEuMCAgLy8gdjVcbiAqIF0gKTtcbiAqIC8vIGl0ZW1TaXplID0gMyBiZWNhdXNlIHRoZXJlIGFyZSAzIHZhbHVlcyAoY29tcG9uZW50cykgcGVyIHZlcnRleFxuICogZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZjAwMDAgfSApO1xuICogY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBFdmVudERpc3BhdGNoZXJcbiAqL1xuY2xhc3MgQnVmZmVyR2VvbWV0cnkgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGdlb21ldHJ5LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0J1ZmZlckdlb21ldHJ5ID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBJRCBvZiB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAbmFtZSBCdWZmZXJHZW9tZXRyeSNpZFxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfaWQkMSArKyB9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgVVVJRCBvZiB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSAnJztcblx0XHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsb3dzIGZvciB2ZXJ0aWNlcyB0byBiZSByZS11c2VkIGFjcm9zcyBtdWx0aXBsZSB0cmlhbmdsZXM7IHRoaXMgaXNcblx0XHQgKiBjYWxsZWQgdXNpbmcgXCJpbmRleGVkIHRyaWFuZ2xlc1wiLiBFYWNoIHRyaWFuZ2xlIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGVcblx0XHQgKiBpbmRpY2VzIG9mIHRocmVlIHZlcnRpY2VzLiBUaGlzIGF0dHJpYnV0ZSB0aGVyZWZvcmUgc3RvcmVzIHRoZSBpbmRleCBvZlxuXHRcdCAqIGVhY2ggdmVydGV4IGZvciBlYWNoIHRyaWFuZ3VsYXIgZmFjZS4gSWYgdGhpcyBhdHRyaWJ1dGUgaXMgbm90IHNldCwgdGhlXG5cdFx0ICogcmVuZGVyZXIgYXNzdW1lcyB0aGF0IGVhY2ggdGhyZWUgY29udGlndW91cyBwb3NpdGlvbnMgcmVwcmVzZW50IGEgc2luZ2xlIHRyaWFuZ2xlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9CdWZmZXJBdHRyaWJ1dGV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSAoc3RvcmFnZSkgYnVmZmVyIGF0dHJpYnV0ZSB3aGljaCB3YXMgZ2VuZXJhdGVkIHdpdGggYSBjb21wdXRlIHNoYWRlciBhbmRcblx0XHQgKiBub3cgZGVmaW5lcyBpbmRpcmVjdCBkcmF3IGNhbGxzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBXZWJHUFVSZW5kZXJlcn0gYW5kIGEgV2ViR1BVIGJhY2tlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0J1ZmZlckF0dHJpYnV0ZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pbmRpcmVjdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGRpY3Rpb25hcnkgaGFzIGFzIGlkIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gYmUgc2V0IGFuZCBhcyB2YWx1ZVxuXHRcdCAqIHRoZSBidWZmZXIgYXR0cmlidXRlIHRvIHNldCBpdCB0by4gUmF0aGVyIHRoYW4gYWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgZGlyZWN0bHksXG5cdFx0ICogdXNlIGBzZXRBdHRyaWJ1dGUoKWAgYW5kIGBnZXRBdHRyaWJ1dGUoKWAgdG8gYWNjZXNzIGF0dHJpYnV0ZXMgb2YgdGhpcyBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLChCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpPn1cblx0XHQgKi9cblx0XHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGljdGlvbmFyeSBob2xkcyB0aGUgbW9ycGggdGFyZ2V0cyBvZiB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBOb3RlOiBPbmNlIHRoZSBnZW9tZXRyeSBoYXMgYmVlbiByZW5kZXJlZCwgdGhlIG1vcnBoIGF0dHJpYnV0ZSBkYXRhIGNhbm5vdFxuXHRcdCAqIGJlIGNoYW5nZWQuIFlvdSB3aWxsIGhhdmUgdG8gY2FsbCBgZGlzcG9zZSgpPywgYW5kIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeSBpbnN0YW5jZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gY29udHJvbCB0aGUgbW9ycGggdGFyZ2V0IGJlaGF2aW9yOyB3aGVuIHNldCB0byBgdHJ1ZWAsIHRoZSBtb3JwaFxuXHRcdCAqIHRhcmdldCBkYXRhIGlzIHRyZWF0ZWQgYXMgcmVsYXRpdmUgb2Zmc2V0cywgcmF0aGVyIHRoYW4gYXMgYWJzb2x1dGVcblx0XHQgKiBwb3NpdGlvbnMvbm9ybWFscy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogU3BsaXQgdGhlIGdlb21ldHJ5IGludG8gZ3JvdXBzLCBlYWNoIG9mIHdoaWNoIHdpbGwgYmUgcmVuZGVyZWQgaW4gYVxuXHRcdCAqIHNlcGFyYXRlIGRyYXcgY2FsbC4gVGhpcyBhbGxvd3MgYW4gYXJyYXkgb2YgbWF0ZXJpYWxzIHRvIGJlIHVzZWQgd2l0aCB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBVc2UgYGFkZEdyb3VwKClgIGFuZCBgY2xlYXJHcm91cHMoKWAgdG8gZWRpdCBncm91cHMsIHJhdGhlciB0aGFuIG1vZGlmeWluZyB0aGlzIGFycmF5IGRpcmVjdGx5LlxuXHRcdCAqXG5cdFx0ICogRXZlcnkgdmVydGV4IGFuZCBpbmRleCBtdXN0IGJlbG9uZyB0byBleGFjdGx5IG9uZSBncm91cCDigJQgZ3JvdXBzIG11c3Qgbm90IHNoYXJlIHZlcnRpY2VzIG9yXG5cdFx0ICogaW5kaWNlcywgYW5kIG11c3Qgbm90IGxlYXZlIHZlcnRpY2VzIG9yIGluZGljZXMgdW51c2VkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PE9iamVjdD59XG5cdFx0ICovXG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEJvdW5kaW5nIGJveCBmb3IgdGhlIGdlb21ldHJ5IHdoaWNoIGNhbiBiZSBjYWxjdWxhdGVkIHdpdGggYGNvbXB1dGVCb3VuZGluZ0JveCgpYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtCb3gzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEJvdW5kaW5nIHNwaGVyZSBmb3IgdGhlIGdlb21ldHJ5IHdoaWNoIGNhbiBiZSBjYWxjdWxhdGVkIHdpdGggYGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtTcGhlcmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lcyB0aGUgcGFydCBvZiB0aGUgZ2VvbWV0cnkgdG8gcmVuZGVyLiBUaGlzIHNob3VsZCBub3QgYmUgc2V0IGRpcmVjdGx5LFxuXHRcdCAqIGluc3RlYWQgdXNlIGBzZXREcmF3UmFuZ2UoKWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7e3N0YXJ0Om51bWJlcixjb3VudDpudW1iZXJ9fVxuXHRcdCAqL1xuXHRcdHRoaXMuZHJhd1JhbmdlID0geyBzdGFydDogMCwgY291bnQ6IEluZmluaXR5IH07XG5cblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBjdXN0b20gZGF0YSBhYm91dCB0aGUgZ2VvbWV0cnkuXG5cdFx0ICogSXQgc2hvdWxkIG5vdCBob2xkIHJlZmVyZW5jZXMgdG8gZnVuY3Rpb25zIGFzIHRoZXNlIHdpbGwgbm90IGJlIGNsb25lZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy51c2VyRGF0YSA9IHt9O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhpcyBnZW9tZXRyeS5cblx0ICpcblx0ICogQHJldHVybiB7P0J1ZmZlckF0dHJpYnV0ZX0gVGhlIGluZGV4LiBSZXR1cm5zIGBudWxsYCBpZiBubyBpbmRleCBpcyBkZWZpbmVkLlxuXHQgKi9cblx0Z2V0SW5kZXgoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbmRleDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIGluZGV4IHRvIHRoaXMgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxCdWZmZXJBdHRyaWJ1dGV9IGluZGV4IC0gVGhlIGluZGV4IHRvIHNldC5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRJbmRleCggaW5kZXggKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGluZGV4ICkgKSB7XG5cblx0XHRcdHRoaXMuaW5kZXggPSBuZXcgKCBhcnJheU5lZWRzVWludDMyKCBpbmRleCApID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGV4LCAxICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gaW5kZXg7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIGluZGlyZWN0IGF0dHJpYnV0ZSB0byB0aGlzIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckF0dHJpYnV0ZX0gaW5kaXJlY3QgLSBUaGUgYXR0cmlidXRlIGhvbGRpbmcgaW5kaXJlY3QgZHJhdyBjYWxscy5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRJbmRpcmVjdCggaW5kaXJlY3QgKSB7XG5cblx0XHR0aGlzLmluZGlyZWN0ID0gaW5kaXJlY3Q7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGluZGlyZWN0IGF0dHJpYnV0ZSBvZiB0aGlzIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHs/QnVmZmVyQXR0cmlidXRlfSBUaGUgaW5kaXJlY3QgYXR0cmlidXRlLiBSZXR1cm5zIGBudWxsYCBpZiBubyBpbmRpcmVjdCBhdHRyaWJ1dGUgaXMgZGVmaW5lZC5cblx0ICovXG5cdGdldEluZGlyZWN0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5kaXJlY3Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBidWZmZXIgYXR0cmlidXRlIGZvciB0aGUgZ2l2ZW4gbmFtZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgYXR0cmlidXRlIG5hbWUuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZXxJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZXx1bmRlZmluZWR9IFRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vdCBhdHRyaWJ1dGUgaGFzIGJlZW4gZm91bmQuXG5cdCAqL1xuXHRnZXRBdHRyaWJ1dGUoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBhdHRyaWJ1dGUgZm9yIHRoZSBnaXZlbiBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBhdHRyaWJ1dGUgbmFtZS5cblx0ICogQHBhcmFtIHtCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBhdHRyaWJ1dGUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlICkge1xuXG5cdFx0dGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF0gPSBhdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlbGV0ZXMgdGhlIGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGF0dHJpYnV0ZSBuYW1lIHRvIGRlbGV0ZS5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRkZWxldGVBdHRyaWJ1dGUoIG5hbWUgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoaXMgZ2VvbWV0cnkgaGFzIGFuIGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGF0dHJpYnV0ZSBuYW1lLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgZ2VvbWV0cnkgaGFzIGFuIGF0dHJpYnV0ZSBmb3IgdGhlIGdpdmVuIG5hbWUgb3Igbm90LlxuXHQgKi9cblx0aGFzQXR0cmlidXRlKCBuYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXR0cmlidXRlc1sgbmFtZSBdICE9PSB1bmRlZmluZWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgZ3JvdXAgdG8gdGhpcyBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gVGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBkcmF3IGNhbGwuIFRoYXQgaXMgdGhlIGZpcnN0XG5cdCAqIHZlcnRleCBmb3Igbm9uLWluZGV4ZWQgZ2VvbWV0cnksIG90aGVyd2lzZSB0aGUgZmlyc3QgdHJpYW5nbGUgaW5kZXguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFNwZWNpZmllcyBob3cgbWFueSB2ZXJ0aWNlcyAob3IgaW5kaWNlcykgYXJlIHBhcnQgb2YgdGhpcyBncm91cC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttYXRlcmlhbEluZGV4PTBdIC0gVGhlIG1hdGVyaWFsIGFycmF5IGluZGV4IHRvIHVzZS5cblx0ICovXG5cdGFkZEdyb3VwKCBzdGFydCwgY291bnQsIG1hdGVyaWFsSW5kZXggPSAwICkge1xuXG5cdFx0dGhpcy5ncm91cHMucHVzaCgge1xuXG5cdFx0XHRzdGFydDogc3RhcnQsXG5cdFx0XHRjb3VudDogY291bnQsXG5cdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhcnMgYWxsIGdyb3Vwcy5cblx0ICovXG5cdGNsZWFyR3JvdXBzKCkge1xuXG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGRyYXcgcmFuZ2UgZm9yIHRoaXMgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFRoZSBmaXJzdCB2ZXJ0ZXggZm9yIG5vbi1pbmRleGVkIGdlb21ldHJ5LCBvdGhlcndpc2UgdGhlIGZpcnN0IHRyaWFuZ2xlIGluZGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBGb3Igbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnksIGBjb3VudGAgaXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcyB0byByZW5kZXIuXG5cdCAqIEZvciBpbmRleGVkIEJ1ZmZlckdlb21ldHJ5LCBgY291bnRgIGlzIHRoZSBudW1iZXIgb2YgaW5kaWNlcyB0byByZW5kZXIuXG5cdCAqL1xuXHRzZXREcmF3UmFuZ2UoIHN0YXJ0LCBjb3VudCApIHtcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7XG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBjb3VudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIGdpdmVuIDR4NCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gdGhlIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSBtYXRyaXggdG8gYXBwbHkuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YXBwbHlNYXRyaXg0KCBtYXRyaXggKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cG9zaXRpb24uYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgbm9ybWFsID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdGlmICggbm9ybWFsICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsLmFwcGx5Tm9ybWFsTWF0cml4KCBub3JtYWxNYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRhbmdlbnQgPSB0aGlzLmF0dHJpYnV0ZXMudGFuZ2VudDtcblxuXHRcdGlmICggdGFuZ2VudCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0YW5nZW50LnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICk7XG5cblx0XHRcdHRhbmdlbnQubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSByb3RhdGlvbiByZXByZXNlbnRlZCBieSB0aGUgUXVhdGVybmlvbiB0byB0aGUgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcSAtIFRoZSBRdWF0ZXJuaW9uIHRvIGFwcGx5LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGFwcGx5UXVhdGVybmlvbiggcSApIHtcblxuXHRcdF9tMS5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSb3RhdGVzIHRoZSBnZW9tZXRyeSBhYm91dCB0aGUgWCBheGlzLiBUaGlzIGlzIHR5cGljYWxseSBkb25lIGFzIGEgb25lIHRpbWVcblx0ICogb3BlcmF0aW9uLCBhbmQgbm90IGR1cmluZyBhIGxvb3AuIFVzZSB7QGxpbmsgT2JqZWN0M0Qjcm90YXRpb259IGZvciB0eXBpY2FsXG5cdCAqIHJlYWwtdGltZSBtZXNoIHJvdGF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgLSBUaGUgYW5nbGUgaW4gcmFkaWFucy5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRyb3RhdGVYKCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzXG5cblx0XHRfbTEubWFrZVJvdGF0aW9uWCggYW5nbGUgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUm90YXRlcyB0aGUgZ2VvbWV0cnkgYWJvdXQgdGhlIFkgYXhpcy4gVGhpcyBpcyB0eXBpY2FsbHkgZG9uZSBhcyBhIG9uZSB0aW1lXG5cdCAqIG9wZXJhdGlvbiwgYW5kIG5vdCBkdXJpbmcgYSBsb29wLiBVc2Uge0BsaW5rIE9iamVjdDNEI3JvdGF0aW9ufSBmb3IgdHlwaWNhbFxuXHQgKiByZWFsLXRpbWUgbWVzaCByb3RhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gVGhlIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0cm90YXRlWSggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0X20xLm1ha2VSb3RhdGlvblkoIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJvdGF0ZXMgdGhlIGdlb21ldHJ5IGFib3V0IHRoZSBaIGF4aXMuIFRoaXMgaXMgdHlwaWNhbGx5IGRvbmUgYXMgYSBvbmUgdGltZVxuXHQgKiBvcGVyYXRpb24sIGFuZCBub3QgZHVyaW5nIGEgbG9vcC4gVXNlIHtAbGluayBPYmplY3QzRCNyb3RhdGlvbn0gZm9yIHR5cGljYWxcblx0ICogcmVhbC10aW1lIG1lc2ggcm90YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIFRoZSBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHJvdGF0ZVooIGFuZ2xlICkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB6LWF4aXNcblxuXHRcdF9tMS5tYWtlUm90YXRpb25aKCBhbmdsZSApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2xhdGVzIHRoZSBnZW9tZXRyeS4gVGhpcyBpcyB0eXBpY2FsbHkgZG9uZSBhcyBhIG9uZSB0aW1lXG5cdCAqIG9wZXJhdGlvbiwgYW5kIG5vdCBkdXJpbmcgYSBsb29wLiBVc2Uge0BsaW5rIE9iamVjdDNEI3Bvc2l0aW9ufSBmb3IgdHlwaWNhbFxuXHQgKiByZWFsLXRpbWUgbWVzaCByb3RhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBvZmZzZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgb2Zmc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB6IG9mZnNldC5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHR0cmFuc2xhdGUoIHgsIHksIHogKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdF9tMS5tYWtlVHJhbnNsYXRpb24oIHgsIHksIHogKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2NhbGVzIHRoZSBnZW9tZXRyeS4gVGhpcyBpcyB0eXBpY2FsbHkgZG9uZSBhcyBhIG9uZSB0aW1lXG5cdCAqIG9wZXJhdGlvbiwgYW5kIG5vdCBkdXJpbmcgYSBsb29wLiBVc2Uge0BsaW5rIE9iamVjdDNEI3NjYWxlfSBmb3IgdHlwaWNhbFxuXHQgKiByZWFsLXRpbWUgbWVzaCByb3RhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBzY2FsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBzY2FsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgeiBzY2FsZS5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzY2FsZSggeCwgeSwgeiApIHtcblxuXHRcdC8vIHNjYWxlIGdlb21ldHJ5XG5cblx0XHRfbTEubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJvdGF0ZXMgdGhlIGdlb21ldHJ5IHRvIGZhY2UgYSBwb2ludCBpbiAzRCBzcGFjZS4gVGhpcyBpcyB0eXBpY2FsbHkgZG9uZSBhcyBhIG9uZSB0aW1lXG5cdCAqIG9wZXJhdGlvbiwgYW5kIG5vdCBkdXJpbmcgYSBsb29wLiBVc2Uge0BsaW5rIE9iamVjdDNEI2xvb2tBdH0gZm9yIHR5cGljYWxcblx0ICogcmVhbC10aW1lIG1lc2ggcm90YXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gdmVjdG9yIC0gVGhlIHRhcmdldCBwb2ludC5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRsb29rQXQoIHZlY3RvciApIHtcblxuXHRcdF9vYmoubG9va0F0KCB2ZWN0b3IgKTtcblxuXHRcdF9vYmoudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX29iai5tYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2VudGVyIHRoZSBnZW9tZXRyeSBiYXNlZCBvbiBpdHMgYm91bmRpbmcgYm94LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNlbnRlcigpIHtcblxuXHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlciggX29mZnNldCApLm5lZ2F0ZSgpO1xuXG5cdFx0dGhpcy50cmFuc2xhdGUoIF9vZmZzZXQueCwgX29mZnNldC55LCBfb2Zmc2V0LnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyBhIGdlb21ldHJ5IGJ5IGNyZWF0aW5nIGEgYHBvc2l0aW9uYCBhdHRyaWJ1dGUgYmFzZWQgb24gdGhlIGdpdmVuIGFycmF5IG9mIHBvaW50cy4gVGhlIGFycmF5XG5cdCAqIGNhbiBob2xkIDJEIG9yIDNEIHZlY3RvcnMuIFdoZW4gdXNpbmcgdHdvLWRpbWVuc2lvbmFsIGRhdGEsIHRoZSBgemAgY29vcmRpbmF0ZSBmb3IgYWxsIHZlcnRpY2VzIGlzXG5cdCAqIHNldCB0byBgMGAuXG5cdCAqXG5cdCAqIElmIHRoZSBtZXRob2QgaXMgdXNlZCB3aXRoIGFuIGV4aXN0aW5nIGBwb3NpdGlvbmAgYXR0cmlidXRlLCB0aGUgdmVydGV4IGRhdGEgYXJlIG92ZXJ3cml0dGVuIHdpdGggdGhlXG5cdCAqIGRhdGEgZnJvbSB0aGUgYXJyYXkuIFRoZSBsZW5ndGggb2YgdGhlIGFycmF5IG11c3QgbWF0Y2ggdGhlIHZlcnRleCBjb3VudC5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3IyPnxBcnJheTxWZWN0b3IzPn0gcG9pbnRzIC0gVGhlIHBvaW50cy5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRpZiAoIHBvc2l0aW9uQXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHRcdHBvc2l0aW9uLnB1c2goIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIDMgKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgbCA9IE1hdGgubWluKCBwb2ludHMubGVuZ3RoLCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCApOyAvLyBtYWtlIHN1cmUgZGF0YSBkbyBub3QgZXhjZWVkIGJ1ZmZlciBzaXplXG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgcG9pbnQgPSBwb2ludHNbIGkgXTtcblx0XHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKCBpLCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHBvaW50cy5sZW5ndGggPiBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogQnVmZmVyIHNpemUgdG9vIHNtYWxsIGZvciBwb2ludHMgZGF0YS4gVXNlIC5kaXNwb3NlKCkgYW5kIGNyZWF0ZSBhIG5ldyBnZW9tZXRyeS4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBnZW9tZXRyeSwgYW5kIHVwZGF0ZXMgdGhlIGBib3VuZGluZ0JveGAgbWVtYmVyLlxuXHQgKiBUaGUgYm91bmRpbmcgYm94IGlzIG5vdCBjb21wdXRlZCBieSB0aGUgZW5naW5lOyBpdCBtdXN0IGJlIGNvbXB1dGVkIGJ5IHlvdXIgYXBwLlxuXHQgKiBZb3UgbWF5IG5lZWQgdG8gcmVjb21wdXRlIHRoZSBib3VuZGluZyBib3ggaWYgdGhlIGdlb21ldHJ5IHZlcnRpY2VzIGFyZSBtb2RpZmllZC5cblx0ICovXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAmJiBwb3NpdGlvbi5pc0dMQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IEdMQnVmZmVyQXR0cmlidXRlIHJlcXVpcmVzIGEgbWFudWFsIGJvdW5kaW5nIGJveC4nLCB0aGlzICk7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0KFxuXHRcdFx0XHRuZXcgVmVjdG9yMyggLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMyggKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSApXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cdFx0XHRcdFx0X2JveCQyLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkOC5hZGRWZWN0b3JzKCB0aGlzLmJvdW5kaW5nQm94Lm1pbiwgX2JveCQyLm1pbiApO1xuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDggKTtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ4LmFkZFZlY3RvcnMoIHRoaXMuYm91bmRpbmdCb3gubWF4LCBfYm94JDIubWF4ICk7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkOCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfYm94JDIubWluICk7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF9ib3gkMi5tYXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3gubWFrZUVtcHR5KCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi54ICkgfHwgaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnkgKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueiApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBib3VuZGluZyBzcGhlcmUgb2YgdGhlIGdlb21ldHJ5LCBhbmQgdXBkYXRlcyB0aGUgYGJvdW5kaW5nU3BoZXJlYCBtZW1iZXIuXG5cdCAqIFRoZSBlbmdpbmUgYXV0b21hdGljYWxseSBjb21wdXRlcyB0aGUgYm91bmRpbmcgc3BoZXJlIHdoZW4gaXQgaXMgbmVlZGVkLCBlLmcuLCBmb3IgcmF5IGNhc3Rpbmcgb3IgdmlldyBmcnVzdHVtIGN1bGxpbmcuXG5cdCAqIFlvdSBtYXkgbmVlZCB0byByZWNvbXB1dGUgdGhlIGJvdW5kaW5nIHNwaGVyZSBpZiB0aGUgZ2VvbWV0cnkgdmVydGljZXMgYXJlIG1vZGlmaWVkLlxuXHQgKi9cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gPSB0aGlzLm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdGlmICggcG9zaXRpb24gJiYgcG9zaXRpb24uaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBHTEJ1ZmZlckF0dHJpYnV0ZSByZXF1aXJlcyBhIG1hbnVhbCBib3VuZGluZyBzcGhlcmUuJywgdGhpcyApO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnNldCggbmV3IFZlY3RvcjMoKSwgSW5maW5pdHkgKTtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0Ly8gZmlyc3QsIGZpbmQgdGhlIGNlbnRlciBvZiB0aGUgYm91bmRpbmcgc3BoZXJlXG5cblx0XHRcdGNvbnN0IGNlbnRlciA9IHRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyO1xuXG5cdFx0XHRfYm94JDIuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24gKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uWyBpIF07XG5cdFx0XHRcdFx0X2JveE1vcnBoVGFyZ2V0cy5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yJDguYWRkVmVjdG9ycyggX2JveCQyLm1pbiwgX2JveE1vcnBoVGFyZ2V0cy5taW4gKTtcblx0XHRcdFx0XHRcdF9ib3gkMi5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDggKTtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ4LmFkZFZlY3RvcnMoIF9ib3gkMi5tYXgsIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7XG5cdFx0XHRcdFx0XHRfYm94JDIuZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ4ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRfYm94JDIuZXhwYW5kQnlQb2ludCggX2JveE1vcnBoVGFyZ2V0cy5taW4gKTtcblx0XHRcdFx0XHRcdF9ib3gkMi5leHBhbmRCeVBvaW50KCBfYm94TW9ycGhUYXJnZXRzLm1heCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRfYm94JDIuZ2V0Q2VudGVyKCBjZW50ZXIgKTtcblxuXHRcdFx0Ly8gc2Vjb25kLCB0cnkgdG8gZmluZCBhIGJvdW5kaW5nU3BoZXJlIHdpdGggYSByYWRpdXMgc21hbGxlciB0aGFuIHRoZVxuXHRcdFx0Ly8gYm91bmRpbmdTcGhlcmUgb2YgdGhlIGJvdW5kaW5nQm94OiBzcXJ0KDMpIHNtYWxsZXIgaW4gdGhlIGJlc3QgY2FzZVxuXG5cdFx0XHRsZXQgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gcG9zaXRpb24uY291bnQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRfdmVjdG9yJDguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGkgKTtcblxuXHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBfdmVjdG9yJDggKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSBtb3JwaEF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yJDguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGogKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRfb2Zmc2V0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBqICk7XG5cdFx0XHRcdFx0XHRcdF92ZWN0b3IkOC5hZGQoIF9vZmZzZXQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KCBtYXhSYWRpdXNTcSwgY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKCBfdmVjdG9yJDggKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTtcblxuXHRcdFx0aWYgKCBpc05hTiggdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IENvbXB1dGVkIHJhZGl1cyBpcyBOYU4uIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJywgdGhpcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIGFuZCBhZGRzIGEgdGFuZ2VudCBhdHRyaWJ1dGUgdG8gdGhpcyBnZW9tZXRyeS5cblx0ICpcblx0ICogVGhlIGNvbXB1dGF0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBpbmRleGVkIGdlb21ldHJpZXMgYW5kIGlmIHBvc2l0aW9uLCBub3JtYWwsIGFuZCB1diBhdHRyaWJ1dGVzXG5cdCAqIGFyZSBkZWZpbmVkLiBXaGVuIHVzaW5nIGEgdGFuZ2VudCBzcGFjZSBub3JtYWwgbWFwLCBwcmVmZXIgdGhlIE1pa2tUU3BhY2UgYWxnb3JpdGhtIHByb3ZpZGVkIGJ5XG5cdCAqIHtAbGluayBCdWZmZXJHZW9tZXRyeVV0aWxzI2NvbXB1dGVNaWtrVFNwYWNlVGFuZ2VudHN9IGluc3RlYWQuXG5cdCAqL1xuXHRjb21wdXRlVGFuZ2VudHMoKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMuaW5kZXg7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cudGVyYXRob24uY29tL2NvZGUvdGFuZ2VudC5odG1sXG5cdFx0Ly8gKHBlciB2ZXJ0ZXggdGFuZ2VudHMpXG5cblx0XHRpZiAoIGluZGV4ID09PSBudWxsIHx8XG5cdFx0XHQgYXR0cmlidXRlcy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHQgYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0IGF0dHJpYnV0ZXMudXYgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgZmFpbGVkLiBNaXNzaW5nIHJlcXVpcmVkIGF0dHJpYnV0ZXMgKGluZGV4LCBwb3NpdGlvbiwgbm9ybWFsIG9yIHV2KScgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBub3JtYWxBdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLm5vcm1hbDtcblx0XHRjb25zdCB1dkF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMudXY7XG5cblx0XHRpZiAoIHRoaXMuaGFzQXR0cmlidXRlKCAndGFuZ2VudCcgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndGFuZ2VudCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIDQgKiBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCApLCA0ICkgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRhbmdlbnRBdHRyaWJ1dGUgPSB0aGlzLmdldEF0dHJpYnV0ZSggJ3RhbmdlbnQnICk7XG5cblx0XHRjb25zdCB0YW4xID0gW10sIHRhbjIgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpICsrICkge1xuXG5cdFx0XHR0YW4xWyBpIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dGFuMlsgaSBdID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHZBID0gbmV3IFZlY3RvcjMoKSxcblx0XHRcdHZCID0gbmV3IFZlY3RvcjMoKSxcblx0XHRcdHZDID0gbmV3IFZlY3RvcjMoKSxcblxuXHRcdFx0dXZBID0gbmV3IFZlY3RvcjIoKSxcblx0XHRcdHV2QiA9IG5ldyBWZWN0b3IyKCksXG5cdFx0XHR1dkMgPSBuZXcgVmVjdG9yMigpLFxuXG5cdFx0XHRzZGlyID0gbmV3IFZlY3RvcjMoKSxcblx0XHRcdHRkaXIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVHJpYW5nbGUoIGEsIGIsIGMgKSB7XG5cblx0XHRcdHZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBhICk7XG5cdFx0XHR2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYiApO1xuXHRcdFx0dkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGMgKTtcblxuXHRcdFx0dXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2QXR0cmlidXRlLCBhICk7XG5cdFx0XHR1dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXZBdHRyaWJ1dGUsIGIgKTtcblx0XHRcdHV2Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCB1dkF0dHJpYnV0ZSwgYyApO1xuXG5cdFx0XHR2Qi5zdWIoIHZBICk7XG5cdFx0XHR2Qy5zdWIoIHZBICk7XG5cblx0XHRcdHV2Qi5zdWIoIHV2QSApO1xuXHRcdFx0dXZDLnN1YiggdXZBICk7XG5cblx0XHRcdGNvbnN0IHIgPSAxLjAgLyAoIHV2Qi54ICogdXZDLnkgLSB1dkMueCAqIHV2Qi55ICk7XG5cblx0XHRcdC8vIHNpbGVudGx5IGlnbm9yZSBkZWdlbmVyYXRlIHV2IHRyaWFuZ2xlcyBoYXZpbmcgY29pbmNpZGVudCBvciBjb2xpbmVhciB2ZXJ0aWNlc1xuXG5cdFx0XHRpZiAoICEgaXNGaW5pdGUoIHIgKSApIHJldHVybjtcblxuXHRcdFx0c2Rpci5jb3B5KCB2QiApLm11bHRpcGx5U2NhbGFyKCB1dkMueSApLmFkZFNjYWxlZFZlY3RvciggdkMsIC0gdXZCLnkgKS5tdWx0aXBseVNjYWxhciggciApO1xuXHRcdFx0dGRpci5jb3B5KCB2QyApLm11bHRpcGx5U2NhbGFyKCB1dkIueCApLmFkZFNjYWxlZFZlY3RvciggdkIsIC0gdXZDLnggKS5tdWx0aXBseVNjYWxhciggciApO1xuXG5cdFx0XHR0YW4xWyBhIF0uYWRkKCBzZGlyICk7XG5cdFx0XHR0YW4xWyBiIF0uYWRkKCBzZGlyICk7XG5cdFx0XHR0YW4xWyBjIF0uYWRkKCBzZGlyICk7XG5cblx0XHRcdHRhbjJbIGEgXS5hZGQoIHRkaXIgKTtcblx0XHRcdHRhbjJbIGIgXS5hZGQoIHRkaXIgKTtcblx0XHRcdHRhbjJbIGMgXS5hZGQoIHRkaXIgKTtcblxuXHRcdH1cblxuXHRcdGxldCBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGlmICggZ3JvdXBzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Z3JvdXBzID0gWyB7XG5cdFx0XHRcdHN0YXJ0OiAwLFxuXHRcdFx0XHRjb3VudDogaW5kZXguY291bnRcblx0XHRcdH0gXTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdGNvbnN0IHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRjb25zdCBjb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdGhhbmRsZVRyaWFuZ2xlKFxuXHRcdFx0XHRcdGluZGV4LmdldFgoIGogKyAwICksXG5cdFx0XHRcdFx0aW5kZXguZ2V0WCggaiArIDEgKSxcblx0XHRcdFx0XHRpbmRleC5nZXRYKCBqICsgMiApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IHRtcCA9IG5ldyBWZWN0b3IzKCksIHRtcDIgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG4gPSBuZXcgVmVjdG9yMygpLCBuMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVWZXJ0ZXgoIHYgKSB7XG5cblx0XHRcdG4uZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2ICk7XG5cdFx0XHRuMi5jb3B5KCBuICk7XG5cblx0XHRcdGNvbnN0IHQgPSB0YW4xWyB2IF07XG5cblx0XHRcdC8vIEdyYW0tU2NobWlkdCBvcnRob2dvbmFsaXplXG5cblx0XHRcdHRtcC5jb3B5KCB0ICk7XG5cdFx0XHR0bXAuc3ViKCBuLm11bHRpcGx5U2NhbGFyKCBuLmRvdCggdCApICkgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIGhhbmRlZG5lc3NcblxuXHRcdFx0dG1wMi5jcm9zc1ZlY3RvcnMoIG4yLCB0ICk7XG5cdFx0XHRjb25zdCB0ZXN0ID0gdG1wMi5kb3QoIHRhbjJbIHYgXSApO1xuXHRcdFx0Y29uc3QgdyA9ICggdGVzdCA8IDAuMCApID8gLTEgOiAxLjA7XG5cblx0XHRcdHRhbmdlbnRBdHRyaWJ1dGUuc2V0WFlaVyggdiwgdG1wLngsIHRtcC55LCB0bXAueiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBncm91cC5zdGFydDtcblx0XHRcdGNvbnN0IGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdGZvciAoIGxldCBqID0gc3RhcnQsIGpsID0gc3RhcnQgKyBjb3VudDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0aGFuZGxlVmVydGV4KCBpbmRleC5nZXRYKCBqICsgMCApICk7XG5cdFx0XHRcdGhhbmRsZVZlcnRleCggaW5kZXguZ2V0WCggaiArIDEgKSApO1xuXHRcdFx0XHRoYW5kbGVWZXJ0ZXgoIGluZGV4LmdldFgoIGogKyAyICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdmVydGV4IG5vcm1hbHMgZm9yIHRoZSBnaXZlbiB2ZXJ0ZXggZGF0YS4gRm9yIGluZGV4ZWQgZ2VvbWV0cmllcywgdGhlIG1ldGhvZCBzZXRzXG5cdCAqIGVhY2ggdmVydGV4IG5vcm1hbCB0byBiZSB0aGUgYXZlcmFnZSBvZiB0aGUgZmFjZSBub3JtYWxzIG9mIHRoZSBmYWNlcyB0aGF0IHNoYXJlIHRoYXQgdmVydGV4LlxuXHQgKiBGb3Igbm9uLWluZGV4ZWQgZ2VvbWV0cmllcywgdmVydGljZXMgYXJlIG5vdCBzaGFyZWQsIGFuZCB0aGUgbWV0aG9kIHNldHMgZWFjaCB2ZXJ0ZXggbm9ybWFsXG5cdCAqIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBmYWNlIG5vcm1hbC5cblx0ICovXG5cdGNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCkge1xuXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gdGhpcy5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdGlmICggcG9zaXRpb25BdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGV0IG5vcm1hbEF0dHJpYnV0ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCAnbm9ybWFsJyApO1xuXG5cdFx0XHRpZiAoIG5vcm1hbEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZSA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uQXR0cmlidXRlLmNvdW50ICogMyApLCAzICk7XG5cdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbm9ybWFsQXR0cmlidXRlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVzZXQgZXhpc3Rpbmcgbm9ybWFscyB0byB6ZXJvXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG5vcm1hbEF0dHJpYnV0ZS5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSwgMCwgMCwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBwQSA9IG5ldyBWZWN0b3IzKCksIHBCID0gbmV3IFZlY3RvcjMoKSwgcEMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0Y29uc3QgbkEgPSBuZXcgVmVjdG9yMygpLCBuQiA9IG5ldyBWZWN0b3IzKCksIG5DID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpbmRleGVkIGVsZW1lbnRzXG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGluZGV4LmNvdW50OyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZBID0gaW5kZXguZ2V0WCggaSArIDAgKTtcblx0XHRcdFx0XHRjb25zdCB2QiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgdkMgPSBpbmRleC5nZXRYKCBpICsgMiApO1xuXG5cdFx0XHRcdFx0cEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZBICk7XG5cdFx0XHRcdFx0cEIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZCICk7XG5cdFx0XHRcdFx0cEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIHZDICk7XG5cblx0XHRcdFx0XHRjYi5zdWJWZWN0b3JzKCBwQywgcEIgKTtcblx0XHRcdFx0XHRhYi5zdWJWZWN0b3JzKCBwQSwgcEIgKTtcblx0XHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHRcdG5BLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSwgdkEgKTtcblx0XHRcdFx0XHRuQi5mcm9tQnVmZmVyQXR0cmlidXRlKCBub3JtYWxBdHRyaWJ1dGUsIHZCICk7XG5cdFx0XHRcdFx0bkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFsQXR0cmlidXRlLCB2QyApO1xuXG5cdFx0XHRcdFx0bkEuYWRkKCBjYiApO1xuXHRcdFx0XHRcdG5CLmFkZCggY2IgKTtcblx0XHRcdFx0XHRuQy5hZGQoIGNiICk7XG5cblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCB2QSwgbkEueCwgbkEueSwgbkEueiApO1xuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIHZCLCBuQi54LCBuQi55LCBuQi56ICk7XG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggdkMsIG5DLngsIG5DLnksIG5DLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgZWxlbWVudHMgKHVuY29ubmVjdGVkIHRyaWFuZ2xlIHNvdXApXG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdHBBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMCApO1xuXHRcdFx0XHRcdHBCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXHRcdFx0XHRcdHBDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMiApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKCBpICsgMCwgY2IueCwgY2IueSwgY2IueiApO1xuXHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooIGkgKyAxLCBjYi54LCBjYi55LCBjYi56ICk7XG5cdFx0XHRcdFx0bm9ybWFsQXR0cmlidXRlLnNldFhZWiggaSArIDIsIGNiLngsIGNiLnksIGNiLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7XG5cblx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFbnN1cmVzIGV2ZXJ5IG5vcm1hbCB2ZWN0b3IgaW4gYSBnZW9tZXRyeSB3aWxsIGhhdmUgYSBtYWduaXR1ZGUgb2YgYDFgLiBUaGlzIHdpbGxcblx0ICogY29ycmVjdCBsaWdodGluZyBvbiB0aGUgZ2VvbWV0cnkgc3VyZmFjZXMuXG5cdCAqL1xuXHRub3JtYWxpemVOb3JtYWxzKCkge1xuXG5cdFx0Y29uc3Qgbm9ybWFscyA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbm9ybWFscy5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yJDguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgaSApO1xuXG5cdFx0XHRfdmVjdG9yJDgubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMuc2V0WFlaKCBpLCBfdmVjdG9yJDgueCwgX3ZlY3RvciQ4LnksIF92ZWN0b3IkOC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gYSBuZXcgbm9uLWluZGV4IHZlcnNpb24gb2YgdGhpcyBpbmRleGVkIGdlb21ldHJ5LiBJZiB0aGUgZ2VvbWV0cnlcblx0ICogaXMgYWxyZWFkeSBub24taW5kZXhlZCwgdGhlIG1ldGhvZCBpcyBhIE5PT1AuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBUaGUgbm9uLWluZGV4ZWQgdmVyc2lvbiBvZiB0aGlzIGluZGV4ZWQgZ2VvbWV0cnkuXG5cdCAqL1xuXHR0b05vbkluZGV4ZWQoKSB7XG5cblx0XHRmdW5jdGlvbiBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKSB7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdFx0Y29uc3QgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cdFx0XHRjb25zdCBub3JtYWxpemVkID0gYXR0cmlidXRlLm5vcm1hbGl6ZWQ7XG5cblx0XHRcdGNvbnN0IGFycmF5MiA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvciggaW5kaWNlcy5sZW5ndGggKiBpdGVtU2l6ZSApO1xuXG5cdFx0XHRsZXQgaW5kZXggPSAwLCBpbmRleDIgPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdGluZGV4ID0gaW5kaWNlc1sgaSBdICogYXR0cmlidXRlLmRhdGEuc3RyaWRlICsgYXR0cmlidXRlLm9mZnNldDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aW5kZXggPSBpbmRpY2VzWyBpIF0gKiBpdGVtU2l6ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheTJbIGluZGV4MiArKyBdID0gYXJyYXlbIGluZGV4ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheTIsIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeS50b05vbkluZGV4ZWQoKTogQnVmZmVyR2VvbWV0cnkgaXMgYWxyZWFkeSBub24taW5kZXhlZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGdlb21ldHJ5MiA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRjb25zdCBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKTtcblxuXHRcdFx0Z2VvbWV0cnkyLnNldEF0dHJpYnV0ZSggbmFtZSwgbmV3QXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCBhdHRyaWJ1dGVzXG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSB0aGlzLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEFycmF5ID0gW107XG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sgbmFtZSBdOyAvLyBtb3JwaEF0dHJpYnV0ZTogYXJyYXkgb2YgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlWyBpIF07XG5cblx0XHRcdFx0Y29uc3QgbmV3QXR0cmlidXRlID0gY29udmVydEJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRpY2VzICk7XG5cblx0XHRcdFx0bW9ycGhBcnJheS5wdXNoKCBuZXdBdHRyaWJ1dGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeTIubW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF0gPSBtb3JwaEFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkyLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdC8vIGdyb3Vwc1xuXG5cdFx0Y29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cHM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdGdlb21ldHJ5Mi5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnkyO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGUgZ2VvbWV0cnkgaW50byBKU09OLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKi9cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNixcblx0XHRcdFx0dHlwZTogJ0J1ZmZlckdlb21ldHJ5Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQnVmZmVyR2VvbWV0cnkudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBCdWZmZXJHZW9tZXRyeSBzZXJpYWxpemF0aW9uXG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0aWYgKCB0aGlzLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcblxuXHRcdFx0Zm9yICggY29uc3Qga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdFx0aWYgKCBwYXJhbWV0ZXJzWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH1cblxuXHRcdC8vIGZvciBzaW1wbGljaXR5IHRoZSBjb2RlIGFzc3VtZXMgYXR0cmlidXRlcyBhcmUgbm90IHNoYXJlZCBhY3Jvc3MgZ2VvbWV0cmllcywgc2VlICMxNTgxMVxuXG5cdFx0ZGF0YS5kYXRhID0geyBhdHRyaWJ1dGVzOiB7fSB9O1xuXG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4O1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmluZGV4ID0ge1xuXHRcdFx0XHR0eXBlOiBpbmRleC5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGluZGV4LmFycmF5IClcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHRkYXRhLmRhdGEuYXR0cmlidXRlc1sga2V5IF0gPSBhdHRyaWJ1dGUudG9KU09OKCBkYXRhLmRhdGEgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXHRcdGxldCBoYXNNb3JwaEF0dHJpYnV0ZXMgPSBmYWxzZTtcblxuXHRcdGZvciAoIGNvbnN0IGtleSBpbiB0aGlzLm1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgYXR0cmlidXRlQXJyYXkgPSB0aGlzLm1vcnBoQXR0cmlidXRlc1sga2V5IF07XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhdHRyaWJ1dGVBcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdO1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIGF0dHJpYnV0ZS50b0pTT04oIGRhdGEuZGF0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBhcnJheS5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdG1vcnBoQXR0cmlidXRlc1sga2V5IF0gPSBhcnJheTtcblxuXHRcdFx0XHRoYXNNb3JwaEF0dHJpYnV0ZXMgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGhhc01vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLm1vcnBoQXR0cmlidXRlcyA9IG1vcnBoQXR0cmlidXRlcztcblx0XHRcdGRhdGEuZGF0YS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGlmICggZ3JvdXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ncm91cHMgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggZ3JvdXBzICkgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRyYWRpdXM6IGJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBnZW9tZXRyeSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJHZW9tZXRyeX0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gZ2VvbWV0cnkgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gc291cmNlIC0gVGhlIGdlb21ldHJ5IHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckdlb21ldHJ5fSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIHVzZWQgZm9yIHN0b3JpbmcgY2xvbmVkLCBzaGFyZWQgZGF0YVxuXG5cdFx0Y29uc3QgZGF0YSA9IHt9O1xuXG5cdFx0Ly8gbmFtZVxuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cblx0XHQvLyBpbmRleFxuXG5cdFx0Y29uc3QgaW5kZXggPSBzb3VyY2UuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnNldEluZGV4KCBpbmRleC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHQvLyBhdHRyaWJ1dGVzXG5cblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIG5hbWUgXTtcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBuYW1lLCBhdHRyaWJ1dGUuY2xvbmUoIGRhdGEgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggYXR0cmlidXRlc1xuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGVzID0gc291cmNlLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSggZGF0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHNvdXJjZS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdC8vIGdyb3Vwc1xuXG5cdFx0Y29uc3QgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBib3hcblxuXHRcdGNvbnN0IGJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94O1xuXG5cdFx0aWYgKCBib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBzcGhlcmVcblxuXHRcdGNvbnN0IGJvdW5kaW5nU3BoZXJlID0gc291cmNlLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBkcmF3IHJhbmdlXG5cblx0XHR0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHNvdXJjZS5kcmF3UmFuZ2Uuc3RhcnQ7XG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBzb3VyY2UuZHJhd1JhbmdlLmNvdW50O1xuXG5cdFx0Ly8gdXNlciBkYXRhXG5cblx0XHR0aGlzLnVzZXJEYXRhID0gc291cmNlLnVzZXJEYXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqXG5cdCAqIEBmaXJlcyBCdWZmZXJHZW9tZXRyeSNkaXNwb3NlXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9pbnZlcnNlTWF0cml4JDMgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcmF5JDMgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcbmNvbnN0IF9zcGhlcmUkNiA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuY29uc3QgX3NwaGVyZUhpdEF0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfdkEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZDJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF90ZW1wQSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9tb3JwaEEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyB0cmlhbmd1bGFyIHBvbHlnb24gbWVzaCBiYXNlZCBvYmplY3RzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSggMSwgMSwgMSApO1xuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZjAwIH0gKTtcbiAqIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIG1lc2ggKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBNZXNoIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2guXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IFtnZW9tZXRyeV0gLSBUaGUgbWVzaCBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbHxBcnJheTxNYXRlcmlhbD59IFttYXRlcmlhbF0gLSBUaGUgbWVzaCBtYXRlcmlhbC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNZXNoID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtZXNoIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0J1ZmZlckdlb21ldHJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtZXNoIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hdGVyaWFsfEFycmF5PE1hdGVyaWFsPn1cblx0XHQgKiBAZGVmYXVsdCBNZXNoQmFzaWNNYXRlcmlhbFxuXHRcdCAqL1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSByZXByZXNlbnRpbmcgdGhlIG1vcnBoIHRhcmdldHMgaW4gdGhlIGdlb21ldHJ5LiBUaGUga2V5IGlzIHRoZVxuXHRcdCAqIG1vcnBoIHRhcmdldHMgbmFtZSwgdGhlIHZhbHVlIGl0cyBhdHRyaWJ1dGUgaW5kZXguIFRoaXMgbWVtYmVyIGlzIGB1bmRlZmluZWRgXG5cdFx0ICogYnkgZGVmYXVsdCBhbmQgb25seSBzZXQgd2hlbiBtb3JwaCB0YXJnZXRzIGFyZSBkZXRlY3RlZCBpbiB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PFN0cmluZyxudW1iZXI+fHVuZGVmaW5lZH1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHVuZGVmaW5lZDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIHdlaWdodHMgdHlwaWNhbGx5IGluIHRoZSByYW5nZSBgWzAsMV1gIHRoYXQgc3BlY2lmeSBob3cgbXVjaCBvZiB0aGUgbW9ycGhcblx0XHQgKiBpcyBhcHBsaWVkLiBUaGlzIG1lbWJlciBpcyBgdW5kZWZpbmVkYCBieSBkZWZhdWx0IGFuZCBvbmx5IHNldCB3aGVuIG1vcnBoIHRhcmdldHMgYXJlXG5cdFx0ICogZGV0ZWN0ZWQgaW4gdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PG51bWJlcj58dW5kZWZpbmVkfVxuXHRcdCAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuXHRcdCAqL1xuXHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gdW5kZWZpbmVkO1xuXG5cdFx0dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBBcnJheS5pc0FycmF5KCBzb3VyY2UubWF0ZXJpYWwgKSA/IHNvdXJjZS5tYXRlcmlhbC5zbGljZSgpIDogc291cmNlLm1hdGVyaWFsO1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBzb3VyY2UuZ2VvbWV0cnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHZhbHVlcyBvZiB7QGxpbmsgTWVzaCNtb3JwaFRhcmdldERpY3Rpb25hcnl9IGFuZCB7QGxpbmsgTWVzaCNtb3JwaFRhcmdldEluZmx1ZW5jZXN9XG5cdCAqIHRvIG1ha2Ugc3VyZSBleGlzdGluZyBtb3JwaCB0YXJnZXRzIGNhbiBpbmZsdWVuY2UgdGhpcyAzRCBvYmplY3QuXG5cdCAqL1xuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sga2V5c1sgMCBdIF07XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsb2NhbC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgdmVydGV4IGF0IHRoZSBnaXZlbiBpbmRleCwgdGFraW5nIGludG9cblx0ICogYWNjb3VudCB0aGUgY3VycmVudCBhbmltYXRpb24gc3RhdGUgb2YgYm90aCBtb3JwaCB0YXJnZXRzIGFuZCBza2lubmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIHZlcnRleCBpbmRleC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIHZlcnRleCBwb3NpdGlvbiBpbiBsb2NhbCBzcGFjZS5cblx0ICovXG5cdGdldFZlcnRleFBvc2l0aW9uKCBpbmRleCwgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBtb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHR0YXJnZXQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4ICk7XG5cblx0XHRjb25zdCBtb3JwaEluZmx1ZW5jZXMgPSB0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdGlmICggbW9ycGhQb3NpdGlvbiAmJiBtb3JwaEluZmx1ZW5jZXMgKSB7XG5cblx0XHRcdF9tb3JwaEEuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBtb3JwaFBvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoUG9zaXRpb25bIGkgXTtcblxuXHRcdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdF90ZW1wQS5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgaW5kZXggKTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRcdFx0X21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQSwgaW5mbHVlbmNlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdF9tb3JwaEEuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEEuc3ViKCB0YXJnZXQgKSwgaW5mbHVlbmNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRhcmdldC5hZGQoIF9tb3JwaEEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBpbnRlcnNlY3Rpb24gcG9pbnRzIGJldHdlZW4gYSBjYXN0ZWQgcmF5IGFuZCB0aGlzIGxpbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmF5Y2FzdGVyfSByYXljYXN0ZXIgLSBUaGUgcmF5Y2FzdGVyLlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGludGVyc2VjdHMgLSBUaGUgdGFyZ2V0IGFycmF5IHRoYXQgaG9sZHMgdGhlIGludGVyc2VjdGlvbiBwb2ludHMuXG5cdCAqL1xuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXHRcdGNvbnN0IG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblxuXHRcdGlmICggbWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdC8vIHRlc3Qgd2l0aCBib3VuZGluZyBzcGhlcmUgaW4gd29ybGQgc3BhY2VcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUkNi5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdF9zcGhlcmUkNi5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHQvLyBjaGVjayBkaXN0YW5jZSBmcm9tIHJheSBvcmlnaW4gdG8gYm91bmRpbmcgc3BoZXJlXG5cblx0XHRfcmF5JDMuY29weSggcmF5Y2FzdGVyLnJheSApLnJlY2FzdCggcmF5Y2FzdGVyLm5lYXIgKTtcblxuXHRcdGlmICggX3NwaGVyZSQ2LmNvbnRhaW5zUG9pbnQoIF9yYXkkMy5vcmlnaW4gKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggX3JheSQzLmludGVyc2VjdFNwaGVyZSggX3NwaGVyZSQ2LCBfc3BoZXJlSGl0QXQgKSA9PT0gbnVsbCApIHJldHVybjtcblxuXHRcdFx0aWYgKCBfcmF5JDMub3JpZ2luLmRpc3RhbmNlVG9TcXVhcmVkKCBfc3BoZXJlSGl0QXQgKSA+ICggcmF5Y2FzdGVyLmZhciAtIHJheWNhc3Rlci5uZWFyICkgKiogMiApIHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgcmF5IHRvIGxvY2FsIHNwYWNlIG9mIG1lc2hcblxuXHRcdF9pbnZlcnNlTWF0cml4JDMuY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRfcmF5JDMuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXgkMyApO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIGJveCBpbiBsb2NhbCBzcGFjZVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCBfcmF5JDMuaW50ZXJzZWN0c0JveCggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyB0ZXN0IGZvciBpbnRlcnNlY3Rpb25zIHdpdGggZ2VvbWV0cnlcblxuXHRcdHRoaXMuX2NvbXB1dGVJbnRlcnNlY3Rpb25zKCByYXljYXN0ZXIsIGludGVyc2VjdHMsIF9yYXkkMyApO1xuXG5cdH1cblxuXHRfY29tcHV0ZUludGVyc2VjdGlvbnMoIHJheWNhc3RlciwgaW50ZXJzZWN0cywgcmF5TG9jYWxTcGFjZSApIHtcblxuXHRcdGxldCBpbnRlcnNlY3Rpb247XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0Y29uc3QgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2O1xuXHRcdGNvbnN0IHV2MSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYxO1xuXHRcdGNvbnN0IG5vcm1hbCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xuXHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3Vwcztcblx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cblx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBpbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIGluZGV4LmNvdW50LCBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaiApO1xuXHRcdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGogKyAxICk7XG5cdFx0XHRcdFx0XHRjb25zdCBjID0gaW5kZXguZ2V0WCggaiArIDIgKTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UubWF0ZXJpYWxJbmRleCA9IGdyb3VwLm1hdGVyaWFsSW5kZXg7XG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBpbmRleC5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleC5nZXRYKCBpICk7XG5cdFx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgYyA9IGluZGV4LmdldFgoIGkgKyAyICk7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0dlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vciggaSAvIDMgKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3Rpb24gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vbi1pbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCBncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRcdFx0Y29uc3QgZW5kID0gTWF0aC5taW4oIHBvc2l0aW9uLmNvdW50LCBNYXRoLm1pbiggKCBncm91cC5zdGFydCArIGdyb3VwLmNvdW50ICksICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBhID0gajtcblx0XHRcdFx0XHRcdGNvbnN0IGIgPSBqICsgMTtcblx0XHRcdFx0XHRcdGNvbnN0IGMgPSBqICsgMjtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXlMb2NhbFNwYWNlLCB1diwgdXYxLCBub3JtYWwsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggcG9zaXRpb24uY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhID0gaTtcblx0XHRcdFx0XHRjb25zdCBiID0gaSArIDE7XG5cdFx0XHRcdFx0Y29uc3QgYyA9IGkgKyAyO1xuXG5cdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5TG9jYWxTcGFjZSwgdXYsIHV2MSwgbm9ybWFsLCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBjaGVja0ludGVyc2VjdGlvbiQxKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcEEsIHBCLCBwQywgcG9pbnQgKSB7XG5cblx0bGV0IGludGVyc2VjdDtcblxuXHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKCBwQywgcEIsIHBBLCB0cnVlLCBwb2ludCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBBLCBwQiwgcEMsICggbWF0ZXJpYWwuc2lkZSA9PT0gRnJvbnRTaWRlICksIHBvaW50ICk7XG5cblx0fVxuXG5cdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuY29weSggcG9pbnQgKTtcblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRjb25zdCBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkICk7XG5cblx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybiBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdHBvaW50OiBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLFxuXHRcdG9iamVjdDogb2JqZWN0XG5cdH07XG5cbn1cblxuZnVuY3Rpb24gY2hlY2tHZW9tZXRyeUludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHV2LCB1djEsIG5vcm1hbCwgYSwgYiwgYyApIHtcblxuXHRvYmplY3QuZ2V0VmVydGV4UG9zaXRpb24oIGEsIF92QSQxICk7XG5cdG9iamVjdC5nZXRWZXJ0ZXhQb3NpdGlvbiggYiwgX3ZCJDEgKTtcblx0b2JqZWN0LmdldFZlcnRleFBvc2l0aW9uKCBjLCBfdkMkMSApO1xuXG5cdGNvbnN0IGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uJDEoIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBfaW50ZXJzZWN0aW9uUG9pbnQgKTtcblxuXHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdGNvbnN0IGJhcnljb29yZCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0VHJpYW5nbGUuZ2V0QmFyeWNvb3JkKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSQxLCBfdkIkMSwgX3ZDJDEsIGJhcnljb29yZCApO1xuXG5cdFx0aWYgKCB1diApIHtcblxuXHRcdFx0aW50ZXJzZWN0aW9uLnV2ID0gVHJpYW5nbGUuZ2V0SW50ZXJwb2xhdGVkQXR0cmlidXRlKCB1diwgYSwgYiwgYywgYmFyeWNvb3JkLCBuZXcgVmVjdG9yMigpICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2MSApIHtcblxuXHRcdFx0aW50ZXJzZWN0aW9uLnV2MSA9IFRyaWFuZ2xlLmdldEludGVycG9sYXRlZEF0dHJpYnV0ZSggdXYxLCBhLCBiLCBjLCBiYXJ5Y29vcmQsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbm9ybWFsICkge1xuXG5cdFx0XHRpbnRlcnNlY3Rpb24ubm9ybWFsID0gVHJpYW5nbGUuZ2V0SW50ZXJwb2xhdGVkQXR0cmlidXRlKCBub3JtYWwsIGEsIGIsIGMsIGJhcnljb29yZCwgbmV3IFZlY3RvcjMoKSApO1xuXG5cdFx0XHRpZiAoIGludGVyc2VjdGlvbi5ub3JtYWwuZG90KCByYXkuZGlyZWN0aW9uICkgPiAwICkge1xuXG5cdFx0XHRcdGludGVyc2VjdGlvbi5ub3JtYWwubXVsdGlwbHlTY2FsYXIoIC0xICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGZhY2UgPSB7XG5cdFx0XHRhOiBhLFxuXHRcdFx0YjogYixcblx0XHRcdGM6IGMsXG5cdFx0XHRub3JtYWw6IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRtYXRlcmlhbEluZGV4OiAwXG5cdFx0fTtcblxuXHRcdFRyaWFuZ2xlLmdldE5vcm1hbCggX3ZBJDEsIF92QiQxLCBfdkMkMSwgZmFjZS5ub3JtYWwgKTtcblxuXHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblx0XHRpbnRlcnNlY3Rpb24uYmFyeWNvb3JkID0gYmFyeWNvb3JkO1xuXG5cdH1cblxuXHRyZXR1cm4gaW50ZXJzZWN0aW9uO1xuXG59XG5cbi8qKlxuICogQSBnZW9tZXRyeSBjbGFzcyBmb3IgYSByZWN0YW5ndWxhciBjdWJvaWQgd2l0aCBhIGdpdmVuIHdpZHRoLCBoZWlnaHQsIGFuZCBkZXB0aC5cbiAqIE9uIGNyZWF0aW9uLCB0aGUgY3Vib2lkIGlzIGNlbnRyZWQgb24gdGhlIG9yaWdpbiwgd2l0aCBlYWNoIGVkZ2UgcGFyYWxsZWwgdG8gb25lXG4gKiBvZiB0aGUgYXhlcy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoIDEsIDEsIDEgKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweDAwZmYwMCB9ICk7XG4gKiBjb25zdCBjdWJlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogc2NlbmUuYWRkKCBjdWJlICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgQm94R2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYm94IGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTFdIC0gVGhlIHdpZHRoLiBUaGF0IGlzLCB0aGUgbGVuZ3RoIG9mIHRoZSBlZGdlcyBwYXJhbGxlbCB0byB0aGUgWCBheGlzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQuIFRoYXQgaXMsIHRoZSBsZW5ndGggb2YgdGhlIGVkZ2VzIHBhcmFsbGVsIHRvIHRoZSBZIGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgZGVwdGguIFRoYXQgaXMsIHRoZSBsZW5ndGggb2YgdGhlIGVkZ2VzIHBhcmFsbGVsIHRvIHRoZSBaIGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGhTZWdtZW50cz0xXSAtIE51bWJlciBvZiBzZWdtZW50ZWQgcmVjdGFuZ3VsYXIgZmFjZXMgYWxvbmcgdGhlIHdpZHRoIG9mIHRoZSBzaWRlcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRTZWdtZW50cz0xXSAtIE51bWJlciBvZiBzZWdtZW50ZWQgcmVjdGFuZ3VsYXIgZmFjZXMgYWxvbmcgdGhlIGhlaWdodCBvZiB0aGUgc2lkZXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGhTZWdtZW50cz0xXSAtIE51bWJlciBvZiBzZWdtZW50ZWQgcmVjdGFuZ3VsYXIgZmFjZXMgYWxvbmcgdGhlIGRlcHRoIG9mIHRoZSBzaWRlcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB3aWR0aCA9IDEsIGhlaWdodCA9IDEsIGRlcHRoID0gMSwgd2lkdGhTZWdtZW50cyA9IDEsIGhlaWdodFNlZ21lbnRzID0gMSwgZGVwdGhTZWdtZW50cyA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0JveEdlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0ZGVwdGg6IGRlcHRoLFxuXHRcdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRcdGRlcHRoU2VnbWVudHM6IGRlcHRoU2VnbWVudHNcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Ly8gc2VnbWVudHNcblxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICk7XG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApO1xuXHRcdGRlcHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCBkZXB0aFNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRsZXQgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XG5cdFx0bGV0IGdyb3VwU3RhcnQgPSAwO1xuXG5cdFx0Ly8gYnVpbGQgZWFjaCBzaWRlIG9mIHRoZSBib3ggZ2VvbWV0cnlcblxuXHRcdGJ1aWxkUGxhbmUoICd6JywgJ3knLCAneCcsIC0xLCAtMSwgZGVwdGgsIGhlaWdodCwgd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAwICk7IC8vIHB4XG5cdFx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLTEsIGRlcHRoLCBoZWlnaHQsIC0gd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAxICk7IC8vIG54XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgMSwgd2lkdGgsIGRlcHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDIgKTsgLy8gcHlcblx0XHRidWlsZFBsYW5lKCAneCcsICd6JywgJ3knLCAxLCAtMSwgd2lkdGgsIGRlcHRoLCAtIGhlaWdodCwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cywgMyApOyAvLyBueVxuXHRcdGJ1aWxkUGxhbmUoICd4JywgJ3knLCAneicsIDEsIC0xLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0XHRidWlsZFBsYW5lKCAneCcsICd5JywgJ3onLCAtMSwgLTEsIHdpZHRoLCBoZWlnaHQsIC0gZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCA1ICk7IC8vIG56XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRcdGZ1bmN0aW9uIGJ1aWxkUGxhbmUoIHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHRcdGNvbnN0IHNlZ21lbnRXaWR0aCA9IHdpZHRoIC8gZ3JpZFg7XG5cdFx0XHRjb25zdCBzZWdtZW50SGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7XG5cblx0XHRcdGNvbnN0IHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcblx0XHRcdGNvbnN0IGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyO1xuXHRcdFx0Y29uc3QgZGVwdGhIYWxmID0gZGVwdGggLyAyO1xuXG5cdFx0XHRjb25zdCBncmlkWDEgPSBncmlkWCArIDE7XG5cdFx0XHRjb25zdCBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0XHRcdGxldCB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdFx0Y29uc3QgdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudEhlaWdodCAtIGhlaWdodEhhbGY7XG5cblx0XHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDE7IGl4ICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgeCA9IGl4ICogc2VnbWVudFdpZHRoIC0gd2lkdGhIYWxmO1xuXG5cdFx0XHRcdFx0Ly8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcblxuXHRcdFx0XHRcdHZlY3RvclsgdSBdID0geCAqIHVkaXI7XG5cdFx0XHRcdFx0dmVjdG9yWyB2IF0gPSB5ICogdmRpcjtcblx0XHRcdFx0XHR2ZWN0b3JbIHcgXSA9IGRlcHRoSGFsZjtcblxuXHRcdFx0XHRcdC8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gdmVydGV4IGJ1ZmZlclxuXG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdFx0Ly8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcblxuXHRcdFx0XHRcdHZlY3RvclsgdSBdID0gMDtcblx0XHRcdFx0XHR2ZWN0b3JbIHYgXSA9IDA7XG5cdFx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aCA+IDAgPyAxIDogLTE7XG5cblx0XHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuXHRcdFx0XHRcdG5vcm1hbHMucHVzaCggdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiApO1xuXG5cdFx0XHRcdFx0Ly8gdXZzXG5cblx0XHRcdFx0XHR1dnMucHVzaCggaXggLyBncmlkWCApO1xuXHRcdFx0XHRcdHV2cy5wdXNoKCAxIC0gKCBpeSAvIGdyaWRZICkgKTtcblxuXHRcdFx0XHRcdC8vIGNvdW50ZXJzXG5cblx0XHRcdFx0XHR2ZXJ0ZXhDb3VudGVyICs9IDE7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0Ly8gMS4geW91IG5lZWQgdGhyZWUgaW5kaWNlcyB0byBkcmF3IGEgc2luZ2xlIGZhY2Vcblx0XHRcdC8vIDIuIGEgc2luZ2xlIHNlZ21lbnQgY29uc2lzdHMgb2YgdHdvIGZhY2VzXG5cdFx0XHQvLyAzLiBzbyB3ZSBuZWVkIHRvIGdlbmVyYXRlIHNpeCAoMiozKSBpbmRpY2VzIHBlciBzZWdtZW50XG5cblx0XHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYSA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0XHRcdGNvbnN0IGIgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRcdGNvbnN0IGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdFx0Y29uc3QgZCA9IG51bWJlck9mVmVydGljZXMgKyAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdFx0XHQvLyBpbmNyZWFzZSBjb3VudGVyXG5cblx0XHRcdFx0XHRncm91cENvdW50ICs9IDY7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCBtYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0XHRcdC8vIHVwZGF0ZSB0b3RhbCBudW1iZXIgb2YgdmVydGljZXNcblxuXHRcdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBKU09OIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS5cblx0ICogQHJldHVybiB7Qm94R2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBCb3hHZW9tZXRyeSggZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQsIGRhdGEuZGVwdGgsIGRhdGEud2lkdGhTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5kZXB0aFNlZ21lbnRzICk7XG5cblx0fVxuXG59XG5cbi8vIFVuaWZvcm0gVXRpbGl0aWVzXG5cbmZ1bmN0aW9uIGNsb25lVW5pZm9ybXMoIHNyYyApIHtcblxuXHRjb25zdCBkc3QgPSB7fTtcblxuXHRmb3IgKCBjb25zdCB1IGluIHNyYyApIHtcblxuXHRcdGRzdFsgdSBdID0ge307XG5cblx0XHRmb3IgKCBjb25zdCBwIGluIHNyY1sgdSBdICkge1xuXG5cdFx0XHRjb25zdCBwcm9wZXJ0eSA9IHNyY1sgdSBdWyBwIF07XG5cblx0XHRcdGlmICggcHJvcGVydHkgJiYgKCBwcm9wZXJ0eS5pc0NvbG9yIHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNWZWN0b3IyIHx8IHByb3BlcnR5LmlzVmVjdG9yMyB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjQgfHxcblx0XHRcdFx0cHJvcGVydHkuaXNUZXh0dXJlIHx8IHByb3BlcnR5LmlzUXVhdGVybmlvbiApICkge1xuXG5cdFx0XHRcdGlmICggcHJvcGVydHkuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVW5pZm9ybXNVdGlsczogVGV4dHVyZXMgb2YgcmVuZGVyIHRhcmdldHMgY2Fubm90IGJlIGNsb25lZCB2aWEgY2xvbmVVbmlmb3JtcygpIG9yIG1lcmdlVW5pZm9ybXMoKS4nICk7XG5cdFx0XHRcdFx0ZHN0WyB1IF1bIHAgXSA9IG51bGw7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5jbG9uZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggcHJvcGVydHkgKSApIHtcblxuXHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHkuc2xpY2UoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkc3RbIHUgXVsgcCBdID0gcHJvcGVydHk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGRzdDtcblxufVxuXG5mdW5jdGlvbiBtZXJnZVVuaWZvcm1zKCB1bmlmb3JtcyApIHtcblxuXHRjb25zdCBtZXJnZWQgPSB7fTtcblxuXHRmb3IgKCBsZXQgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7XG5cblx0XHRjb25zdCB0bXAgPSBjbG9uZVVuaWZvcm1zKCB1bmlmb3Jtc1sgdSBdICk7XG5cblx0XHRmb3IgKCBjb25zdCBwIGluIHRtcCApIHtcblxuXHRcdFx0bWVyZ2VkWyBwIF0gPSB0bXBbIHAgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIG1lcmdlZDtcblxufVxuXG5mdW5jdGlvbiBjbG9uZVVuaWZvcm1zR3JvdXBzKCBzcmMgKSB7XG5cblx0Y29uc3QgZHN0ID0gW107XG5cblx0Zm9yICggbGV0IHUgPSAwOyB1IDwgc3JjLmxlbmd0aDsgdSArKyApIHtcblxuXHRcdGRzdC5wdXNoKCBzcmNbIHUgXS5jbG9uZSgpICk7XG5cblx0fVxuXG5cdHJldHVybiBkc3Q7XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSggcmVuZGVyZXIgKSB7XG5cblx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdGlmICggY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApIHtcblxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yMzkzNyNpc3N1ZWNvbW1lbnQtMTExMTA2NzM5OFxuXHRcdHJldHVybiByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlO1xuXG5cdH1cblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8yNzg2OFxuXHRpZiAoIGN1cnJlbnRSZW5kZXJUYXJnZXQuaXNYUlJlbmRlclRhcmdldCA9PT0gdHJ1ZSApIHtcblxuXHRcdHJldHVybiBjdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuY29sb3JTcGFjZTtcblxuXHR9XG5cblx0cmV0dXJuIENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZTtcblxufVxuXG4vLyBMZWdhY3lcblxuY29uc3QgVW5pZm9ybXNVdGlscyA9IHsgY2xvbmU6IGNsb25lVW5pZm9ybXMsIG1lcmdlOiBtZXJnZVVuaWZvcm1zIH07XG5cbnZhciBkZWZhdWx0X3ZlcnRleCA9IFwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG59XCI7XG5cbnZhciBkZWZhdWx0X2ZyYWdtZW50ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XFxufVwiO1xuXG4vKipcbiAqIEEgbWF0ZXJpYWwgcmVuZGVyZWQgd2l0aCBjdXN0b20gc2hhZGVycy4gQSBzaGFkZXIgaXMgYSBzbWFsbCBwcm9ncmFtIHdyaXR0ZW4gaW4gR0xTTC5cbiAqIHRoYXQgcnVucyBvbiB0aGUgR1BVLiBZb3UgbWF5IHdhbnQgdG8gdXNlIGEgY3VzdG9tIHNoYWRlciBpZiB5b3UgbmVlZCB0byBpbXBsZW1lbnQgYW5cbiAqIGVmZmVjdCBub3QgaW5jbHVkZWQgd2l0aCBhbnkgb2YgdGhlIGJ1aWx0LWluIG1hdGVyaWFscy5cbiAqXG4gKiBUaGVyZSBhcmUgdGhlIGZvbGxvd2luZyBub3RlcyB0byBiZWFyIGluIG1pbmQgd2hlbiB1c2luZyBhIGBTaGFkZXJNYXRlcmlhbGA6XG4gKlxuICogLSBgU2hhZGVyTWF0ZXJpYWxgIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG4gKiAtIEJ1aWx0IGluIGF0dHJpYnV0ZXMgYW5kIHVuaWZvcm1zIGFyZSBwYXNzZWQgdG8gdGhlIHNoYWRlcnMgYWxvbmcgd2l0aCB5b3VyIGNvZGUuIElmXG4gKiB5b3UgZG9uJ3Qgd2FudCB0aGF0LCB1c2Uge0BsaW5rIFJhd1NoYWRlck1hdGVyaWFsfSBpbnN0ZWFkLlxuICogLSBZb3UgY2FuIHVzZSB0aGUgZGlyZWN0aXZlIGAjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0YCBhbmQgYCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kYFxuICogaW4gb3JkZXIgdG8gdW5yb2xsIGEgYGZvcmAgbG9vcCBpbiBHTFNMIGJ5IHRoZSBzaGFkZXIgcHJlcHJvY2Vzc29yLiBUaGUgZGlyZWN0aXZlIGhhc1xuICogdG8gYmUgcGxhY2VkIHJpZ2h0IGFib3ZlIHRoZSBsb29wLiBUaGUgbG9vcCBmb3JtYXR0aW5nIGhhcyB0byBjb3JyZXNwb25kIHRvIGEgZGVmaW5lZCBzdGFuZGFyZC5cbiAqICAgLSBUaGUgbG9vcCBoYXMgdG8gYmUgW25vcm1hbGl6ZWRde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05vcm1hbGl6ZWRfbG9vcH0uXG4gKiAgIC0gVGhlIGxvb3AgdmFyaWFibGUgaGFzIHRvIGJlICppKi5cbiAqICAgLSBUaGUgdmFsdWUgYFVOUk9MTEVEX0xPT1BfSU5ERVhgIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgZXhwbGljaXRseVxuICogdmFsdWUgb2YgKmkqIGZvciB0aGUgZ2l2ZW4gaXRlcmF0aW9uIGFuZCBjYW4gYmUgdXNlZCBpbiBwcmVwcm9jZXNzb3JcbiAqIHN0YXRlbWVudHMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRlck1hdGVyaWFsKCB7XG4gKiBcdHVuaWZvcm1zOiB7XG4gKiBcdFx0dGltZTogeyB2YWx1ZTogMS4wIH0sXG4gKiBcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFRIUkVFLlZlY3RvcjIoKSB9XG4gKiBcdH0sXG4gKiBcdHZlcnRleFNoYWRlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICd2ZXJ0ZXhTaGFkZXInICkudGV4dENvbnRlbnQsXG4gKiBcdGZyYWdtZW50U2hhZGVyOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ2ZyYWdtZW50U2hhZGVyJyApLnRleHRDb250ZW50XG4gKiB9ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTWF0ZXJpYWxcbiAqL1xuY2xhc3MgU2hhZGVyTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2hhZGVyIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gQW4gb2JqZWN0IHdpdGggb25lIG9yIG1vcmUgcHJvcGVydGllc1xuXHQgKiBkZWZpbmluZyB0aGUgbWF0ZXJpYWwncyBhcHBlYXJhbmNlLiBBbnkgcHJvcGVydHkgb2YgdGhlIG1hdGVyaWFsXG5cdCAqIChpbmNsdWRpbmcgYW55IHByb3BlcnR5IGZyb20gaW5oZXJpdGVkIG1hdGVyaWFscykgY2FuIGJlIHBhc3NlZFxuXHQgKiBpbiBoZXJlLiBDb2xvciB2YWx1ZXMgY2FuIGJlIHBhc3NlZCBhbnkgdHlwZSBvZiB2YWx1ZSBhY2NlcHRlZFxuXHQgKiBieSB7QGxpbmsgQ29sb3Ijc2V0fS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTaGFkZXJNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2hhZGVyTWF0ZXJpYWwnO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBjdXN0b20gY29uc3RhbnRzIHVzaW5nIGAjZGVmaW5lYCBkaXJlY3RpdmVzIHdpdGhpbiB0aGUgR0xTTCBjb2RlXG5cdFx0ICogZm9yIGJvdGggdGhlIHZlcnRleCBzaGFkZXIgYW5kIHRoZSBmcmFnbWVudCBzaGFkZXI7IGVhY2gga2V5L3ZhbHVlIHBhaXJcblx0XHQgKiB5aWVsZHMgYW5vdGhlciBkaXJlY3RpdmUuXG5cdFx0ICogYGBganNcblx0XHQgKiBkZWZpbmVzOiB7XG5cdFx0ICogXHRGT086IDE1LFxuXHRcdCAqIFx0QkFSOiB0cnVlXG5cdFx0ICogfVxuXHRcdCAqIGBgYFxuXHRcdCAqIFlpZWxkcyB0aGUgbGluZXM6XG5cdFx0ICogYGBgXG5cdFx0ICogI2RlZmluZSBGT08gMTVcblx0XHQgKiAjZGVmaW5lIEJBUiB0cnVlXG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVmaW5lcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIHRoZSBmb3JtOlxuXHRcdCAqIGBgYGpzXG5cdFx0ICoge1xuXHRcdCAqIFx0XCJ1bmlmb3JtMVwiOiB7IHZhbHVlOiAxLjAgfSxcblx0XHQgKiBcdFwidW5pZm9ybTJcIjogeyB2YWx1ZTogMiB9XG5cdFx0ICogfVxuXHRcdCAqIGBgYFxuXHRcdCAqIHNwZWNpZnlpbmcgdGhlIHVuaWZvcm1zIHRvIGJlIHBhc3NlZCB0byB0aGUgc2hhZGVyIGNvZGU7IGtleXMgYXJlIHVuaWZvcm1cblx0XHQgKiBuYW1lcywgdmFsdWVzIGFyZSBkZWZpbml0aW9ucyBvZiB0aGUgZm9ybVxuXHRcdCAqIGBgYFxuXHRcdCAqIHtcblx0XHQgKiBcdHZhbHVlOiAxLjBcblx0XHQgKiB9XG5cdFx0ICogYGBgXG5cdFx0ICogd2hlcmUgYHZhbHVlYCBpcyB0aGUgdmFsdWUgb2YgdGhlIHVuaWZvcm0uIE5hbWVzIG11c3QgbWF0Y2ggdGhlIG5hbWUgb2Zcblx0XHQgKiB0aGUgdW5pZm9ybSwgYXMgZGVmaW5lZCBpbiB0aGUgR0xTTCBjb2RlLiBOb3RlIHRoYXQgdW5pZm9ybXMgYXJlIHJlZnJlc2hlZFxuXHRcdCAqIG9uIGV2ZXJ5IGZyYW1lLCBzbyB1cGRhdGluZyB0aGUgdmFsdWUgb2YgdGhlIHVuaWZvcm0gd2lsbCBpbW1lZGlhdGVseVxuXHRcdCAqIHVwZGF0ZSB0aGUgdmFsdWUgYXZhaWxhYmxlIHRvIHRoZSBHTFNMIGNvZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMudW5pZm9ybXMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IGhvbGRpbmcgdW5pZm9ybXMgZ3JvdXBzIGZvciBjb25maWd1cmluZyBVQk9zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PFVuaWZvcm1zR3JvdXA+fVxuXHRcdCAqL1xuXHRcdHRoaXMudW5pZm9ybXNHcm91cHMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFZlcnRleCBzaGFkZXIgR0xTTCBjb2RlLiBUaGlzIGlzIHRoZSBhY3R1YWwgY29kZSBmb3IgdGhlIHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBkZWZhdWx0X3ZlcnRleDtcblxuXHRcdC8qKlxuXHRcdCAqIEZyYWdtZW50IHNoYWRlciBHTFNMIGNvZGUuIFRoaXMgaXMgdGhlIGFjdHVhbCBjb2RlIGZvciB0aGUgc2hhZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmZyYWdtZW50U2hhZGVyID0gZGVmYXVsdF9mcmFnbWVudDtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIGxpbmUgdGhpY2tuZXNzIG9yIGxpbmVzLlxuXHRcdCAqXG5cdFx0ICogV2ViR0wgYW5kIFdlYkdQVSBpZ25vcmUgdGhpcyBzZXR0aW5nIGFuZCBhbHdheXMgcmVuZGVyIGxpbmUgcHJpbWl0aXZlcyB3aXRoIGFcblx0XHQgKiB3aWR0aCBvZiBvbmUgcGl4ZWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJzIHRoZSBnZW9tZXRyeSBhcyBhIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIFdlYkdMIGFuZCBXZWJHUFUgaWdub3JlIHRoaXMgcHJvcGVydHkgYW5kIGFsd2F5cyByZW5kZXJcblx0XHQgKiAxIHBpeGVsIHdpZGUgbGluZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmUgd2hldGhlciB0aGUgbWF0ZXJpYWwgY29sb3IgaXMgYWZmZWN0ZWQgYnkgZ2xvYmFsIGZvZyBzZXR0aW5nczsgYHRydWVgXG5cdFx0ICogdG8gcGFzcyBmb2cgdW5pZm9ybXMgdG8gdGhlIHNoYWRlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgd2hldGhlciB0aGlzIG1hdGVyaWFsIHVzZXMgbGlnaHRpbmc7IGB0cnVlYCB0byBwYXNzIHVuaWZvcm0gZGF0YVxuXHRcdCAqIHJlbGF0ZWQgdG8gbGlnaHRpbmcgdG8gdGhpcyBzaGFkZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRzID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHdoZXRoZXIgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBjbGlwcGluZzsgYHRydWVgIHRvIGxldCB0aGUgcmVuZGVyZXJcblx0XHQgKiBwYXNzIHRoZSBjbGlwcGluZ1BsYW5lcyB1bmlmb3JtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmNsaXBwaW5nID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBPdmVyd3JpdHRlbiBhbmQgc2V0IHRvIGB0cnVlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZm9yY2VTaW5nbGVQYXNzID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgb2JqZWN0IGFsbG93cyB0byBlbmFibGUgY2VydGFpbiBXZWJHTCAyIGV4dGVuc2lvbnMuXG5cdFx0ICpcblx0XHQgKiAtIGNsaXBDdWxsRGlzdGFuY2U6IHNldCB0byBgdHJ1ZWAgdG8gdXNlIHZlcnRleCBzaGFkZXIgY2xpcHBpbmdcblx0XHQgKiAtIG11bHRpRHJhdzogc2V0IHRvIGB0cnVlYCB0byB1c2UgdmVydGV4IHNoYWRlciBtdWx0aV9kcmF3IC8gZW5hYmxlIGdsX0RyYXdJRFxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3tjbGlwQ3VsbERpc3RhbmNlOmZhbHNlLG11bHRpRHJhdzpmYWxzZX19XG5cdFx0ICovXG5cdFx0dGhpcy5leHRlbnNpb25zID0ge1xuXHRcdFx0Y2xpcEN1bGxEaXN0YW5jZTogZmFsc2UsIC8vIHNldCB0byB1c2UgdmVydGV4IHNoYWRlciBjbGlwcGluZ1xuXHRcdFx0bXVsdGlEcmF3OiBmYWxzZSAvLyBzZXQgdG8gdXNlIHZlcnRleCBzaGFkZXIgbXVsdGlfZHJhdyAvIGVuYWJsZSBnbF9EcmF3SURcblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiB0aGUgcmVuZGVyZWQgZ2VvbWV0cnkgZG9lc24ndCBpbmNsdWRlIHRoZXNlIGF0dHJpYnV0ZXMgYnV0IHRoZVxuXHRcdCAqIG1hdGVyaWFsIGRvZXMsIHRoZXNlIGRlZmF1bHQgdmFsdWVzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBzaGFkZXJzLiBUaGlzXG5cdFx0ICogYXZvaWRzIGVycm9ycyB3aGVuIGJ1ZmZlciBkYXRhIGlzIG1pc3NpbmcuXG5cdFx0ICpcblx0XHQgKiAtIGNvbG9yOiBbIDEsIDEsIDEgXVxuXHRcdCAqIC0gdXY6IFsgMCwgMCBdXG5cdFx0ICogLSB1djE6IFsgMCwgMCBdXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IHtcblx0XHRcdCdjb2xvcic6IFsgMSwgMSwgMSBdLFxuXHRcdFx0J3V2JzogWyAwLCAwIF0sXG5cdFx0XHQndXYxJzogWyAwLCAwIF1cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0LCB0aGlzIGNhbGxzIFtnbC5iaW5kQXR0cmliTG9jYXRpb25de0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XZWJHTFJlbmRlcmluZ0NvbnRleHQvYmluZEF0dHJpYkxvY2F0aW9ufVxuXHRcdCAqIHRvIGJpbmQgYSBnZW5lcmljIHZlcnRleCBpbmRleCB0byBhbiBhdHRyaWJ1dGUgdmFyaWFibGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfHVuZGVmaW5lZH1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLmluZGV4MEF0dHJpYnV0ZU5hbWUgPSB1bmRlZmluZWQ7XG5cblx0XHQvKipcblx0XHQgKiBDYW4gYmUgdXNlZCB0byBmb3JjZSBhIHVuaWZvcm0gdXBkYXRlIHdoaWxlIGNoYW5naW5nIHVuaWZvcm1zIGluXG5cdFx0ICoge0BsaW5rIE9iamVjdDNEI29uQmVmb3JlUmVuZGVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIEdMU0wgdmVyc2lvbiBvZiBjdXN0b20gc2hhZGVyIGNvZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhHTFNMMXxHTFNMMyl9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2xzbFZlcnNpb24gPSBudWxsO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5mcmFnbWVudFNoYWRlciA9IHNvdXJjZS5mcmFnbWVudFNoYWRlcjtcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IHNvdXJjZS52ZXJ0ZXhTaGFkZXI7XG5cblx0XHR0aGlzLnVuaWZvcm1zID0gY2xvbmVVbmlmb3Jtcyggc291cmNlLnVuaWZvcm1zICk7XG5cdFx0dGhpcy51bmlmb3Jtc0dyb3VwcyA9IGNsb25lVW5pZm9ybXNHcm91cHMoIHNvdXJjZS51bmlmb3Jtc0dyb3VwcyApO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5kZWZpbmVzICk7XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXHRcdHRoaXMubGlnaHRzID0gc291cmNlLmxpZ2h0cztcblx0XHR0aGlzLmNsaXBwaW5nID0gc291cmNlLmNsaXBwaW5nO1xuXG5cdFx0dGhpcy5leHRlbnNpb25zID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5leHRlbnNpb25zICk7XG5cblx0XHR0aGlzLmdsc2xWZXJzaW9uID0gc291cmNlLmdsc2xWZXJzaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEuZ2xzbFZlcnNpb24gPSB0aGlzLmdsc2xWZXJzaW9uO1xuXHRcdGRhdGEudW5pZm9ybXMgPSB7fTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gdGhpcy51bmlmb3JtcyApIHtcblxuXHRcdFx0Y29uc3QgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbIG5hbWUgXTtcblx0XHRcdGNvbnN0IHZhbHVlID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0aWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1RleHR1cmUgKSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHR5cGU6ICd0Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9KU09OKCBtZXRhICkudXVpZFxuXHRcdFx0XHR9O1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0XHR0eXBlOiAnYycsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlLmdldEhleCgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMiApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3YyJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMyApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3YzJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yNCApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ3Y0Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4MyApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ20zJyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4NCApIHtcblxuXHRcdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogJ200Jyxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHRcdH07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIG5vdGU6IHRoZSBhcnJheSB2YXJpYW50cyB2MnYsIHYzdiwgdjR2LCBtNHYgYW5kIHR2IGFyZSBub3Qgc3VwcG9ydGVkIHNvIGZhclxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLmRlZmluZXMgKS5sZW5ndGggPiAwICkgZGF0YS5kZWZpbmVzID0gdGhpcy5kZWZpbmVzO1xuXG5cdFx0ZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjtcblx0XHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcblxuXHRcdGRhdGEubGlnaHRzID0gdGhpcy5saWdodHM7XG5cdFx0ZGF0YS5jbGlwcGluZyA9IHRoaXMuY2xpcHBpbmc7XG5cblx0XHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gdGhpcy5leHRlbnNpb25zICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuZXh0ZW5zaW9uc1sga2V5IF0gPT09IHRydWUgKSBleHRlbnNpb25zWyBrZXkgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIE9iamVjdC5rZXlzKCBleHRlbnNpb25zICkubGVuZ3RoID4gMCApIGRhdGEuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBjYW1lcmFzLiBUaGlzIGNsYXNzIHNob3VsZCBhbHdheXMgYmUgaW5oZXJpdGVkXG4gKiB3aGVuIHlvdSBidWlsZCBhIG5ldyBjYW1lcmEuXG4gKlxuICogQGFic3RyYWN0XG4gKiBAYXVnbWVudHMgT2JqZWN0M0RcbiAqL1xuY2xhc3MgQ2FtZXJhIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNhbWVyYS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDYW1lcmEgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NhbWVyYSc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW52ZXJzZSBvZiB0aGUgY2FtZXJhJ3Mgd29ybGQgbWF0cml4LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hdHJpeDR9XG5cdFx0ICovXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbWVyYSdzIHByb2plY3Rpb24gbWF0cml4LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hdHJpeDR9XG5cdFx0ICovXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbnZlcnNlIG9mIHRoZSBjYW1lcmEncyBwcm9qZWN0aW9uIG1hdHJpeC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXRyaXg0fVxuXHRcdCAqL1xuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvb3JkaW5hdGUgc3lzdGVtIGluIHdoaWNoIHRoZSBjYW1lcmEgaXMgdXNlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoV2ViR0xDb29yZGluYXRlU3lzdGVtfFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0pfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29vcmRpbmF0ZVN5c3RlbSA9IFdlYkdMQ29vcmRpbmF0ZVN5c3RlbTtcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggc291cmNlLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRcdHRoaXMuY29vcmRpbmF0ZVN5c3RlbSA9IHNvdXJjZS5jb29yZGluYXRlU3lzdGVtO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgKFwibG9va1wiKSBkaXJlY3Rpb24gb2YgdGhlIDNEIG9iamVjdCBpbiB3b3JsZCBzcGFjZS5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgaXMgb3ZlcndyaXR0ZW4gc2luY2UgY2FtZXJhcyBoYXZlIGEgZGlmZmVyZW50IGZvcndhcmQgdmVjdG9yIGNvbXBhcmVkIHRvIG90aGVyXG5cdCAqIDNEIG9iamVjdHMuIEEgY2FtZXJhIGxvb2tzIGRvd24gaXRzIGxvY2FsLCBuZWdhdGl2ZSB6LWF4aXMgYnkgZGVmYXVsdC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHN0b3JlZCB0by5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIDNEIG9iamVjdCdzIGRpcmVjdGlvbiBpbiB3b3JsZCBzcGFjZS5cblx0ICovXG5cdGdldFdvcmxkRGlyZWN0aW9uKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gc3VwZXIuZ2V0V29ybGREaXJlY3Rpb24oIHRhcmdldCApLm5lZ2F0ZSgpO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dXBkYXRlV29ybGRNYXRyaXgoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkge1xuXG5cdFx0c3VwZXIudXBkYXRlV29ybGRNYXRyaXgoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCB0aGlzLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0fVxuXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdjMkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9taW5UYXJnZXQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfbWF4VGFyZ2V0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuXG4vKipcbiAqIENhbWVyYSB0aGF0IHVzZXMgW3BlcnNwZWN0aXZlIHByb2plY3Rpb25de0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BlcnNwZWN0aXZlXyhncmFwaGljYWwpfS5cbiAqXG4gKiBUaGlzIHByb2plY3Rpb24gbW9kZSBpcyBkZXNpZ25lZCB0byBtaW1pYyB0aGUgd2F5IHRoZSBodW1hbiBleWUgc2Vlcy4gSXRcbiAqIGlzIHRoZSBtb3N0IGNvbW1vbiBwcm9qZWN0aW9uIG1vZGUgdXNlZCBmb3IgcmVuZGVyaW5nIGEgM0Qgc2NlbmUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNDUsIHdpZHRoIC8gaGVpZ2h0LCAxLCAxMDAwICk7XG4gKiBzY2VuZS5hZGQoIGNhbWVyYSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIENhbWVyYVxuICovXG5jbGFzcyBQZXJzcGVjdGl2ZUNhbWVyYSBleHRlbmRzIENhbWVyYSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcGVyc3BlY3RpdmUgY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zvdj01MF0gLSBUaGUgdmVydGljYWwgZmllbGQgb2Ygdmlldy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthc3BlY3Q9MV0gLSBUaGUgYXNwZWN0IHJhdGlvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW25lYXI9MC4xXSAtIFRoZSBjYW1lcmEncyBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zhcj0yMDAwXSAtIFRoZSBjYW1lcmEncyBmYXIgcGxhbmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZm92ID0gNTAsIGFzcGVjdCA9IDEsIG5lYXIgPSAwLjEsIGZhciA9IDIwMDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1BlcnNwZWN0aXZlQ2FtZXJhID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdQZXJzcGVjdGl2ZUNhbWVyYSc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdmVydGljYWwgZmllbGQgb2YgdmlldywgZnJvbSBib3R0b20gdG8gdG9wIG9mIHZpZXcsXG5cdFx0ICogaW4gZGVncmVlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgNTBcblx0XHQgKi9cblx0XHR0aGlzLmZvdiA9IGZvdjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB6b29tIGZhY3RvciBvZiB0aGUgY2FtZXJhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy56b29tID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjYW1lcmEncyBuZWFyIHBsYW5lLiBUaGUgdmFsaWQgcmFuZ2UgaXMgZ3JlYXRlciB0aGFuIGAwYFxuXHRcdCAqIGFuZCBsZXNzIHRoYW4gdGhlIGN1cnJlbnQgdmFsdWUgb2Yge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2Zhcn0uXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQsIHVubGlrZSBmb3IgdGhlIHtAbGluayBPcnRob2dyYXBoaWNDYW1lcmF9LCBgMGAgaXMgPGVtPm5vdDwvZW0+IGFcblx0XHQgKiB2YWxpZCB2YWx1ZSBmb3IgYSBwZXJzcGVjdGl2ZSBjYW1lcmEncyBuZWFyIHBsYW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwLjFcblx0XHQgKi9cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbWVyYSdzIGZhciBwbGFuZS4gTXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlXG5cdFx0ICogY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjbmVhcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDIwMDBcblx0XHQgKi9cblx0XHR0aGlzLmZhciA9IGZhcjtcblxuXHRcdC8qKlxuXHRcdCAqIE9iamVjdCBkaXN0YW5jZSB1c2VkIGZvciBzdGVyZW9zY29weSBhbmQgZGVwdGgtb2YtZmllbGQgZWZmZWN0cy4gVGhpc1xuXHRcdCAqIHBhcmFtZXRlciBkb2VzIG5vdCBpbmZsdWVuY2UgdGhlIHByb2plY3Rpb24gbWF0cml4IHVubGVzcyBhXG5cdFx0ICoge0BsaW5rIFN0ZXJlb0NhbWVyYX0gaXMgYmVpbmcgdXNlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMTBcblx0XHQgKi9cblx0XHR0aGlzLmZvY3VzID0gMTA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXNwZWN0IHJhdGlvLCB1c3VhbGx5IHRoZSBjYW52YXMgd2lkdGggLyBjYW52YXMgaGVpZ2h0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5hc3BlY3QgPSBhc3BlY3Q7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSBmcnVzdHVtIHdpbmRvdyBzcGVjaWZpY2F0aW9uLiBUaGlzIHByb3BlcnR5IHNob3VsZCBub3QgYmUgZWRpdGVkXG5cdFx0ICogZGlyZWN0bHkgYnV0IHZpYSB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjc2V0Vmlld09mZnNldH0gYW5kIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNjbGVhclZpZXdPZmZzZXR9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudmlldyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBGaWxtIHNpemUgdXNlZCBmb3IgdGhlIGxhcmdlciBheGlzLiBEZWZhdWx0IGlzIGAzNWAgKG1pbGxpbWV0ZXJzKS4gVGhpc1xuXHRcdCAqIHBhcmFtZXRlciBkb2VzIG5vdCBpbmZsdWVuY2UgdGhlIHByb2plY3Rpb24gbWF0cml4IHVubGVzcyB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjZmlsbU9mZnNldH1cblx0XHQgKiBpcyBzZXQgdG8gYSBub256ZXJvIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAzNVxuXHRcdCAqL1xuXHRcdHRoaXMuZmlsbUdhdWdlID0gMzU7XG5cblx0XHQvKipcblx0XHQgKiBIb3Jpem9udGFsIG9mZi1jZW50ZXIgb2Zmc2V0IGluIHRoZSBzYW1lIHVuaXQgYXMge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1HYXVnZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmZpbG1PZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZm92ID0gc291cmNlLmZvdjtcblx0XHR0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTtcblxuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSBzb3VyY2UuYXNwZWN0O1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0dGhpcy5maWxtR2F1Z2UgPSBzb3VyY2UuZmlsbUdhdWdlO1xuXHRcdHRoaXMuZmlsbU9mZnNldCA9IHNvdXJjZS5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBGT1YgYnkgZm9jYWwgbGVuZ3RoIGluIHJlc3BlY3QgdG8gdGhlIGN1cnJlbnQge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1HYXVnZX0uXG5cdCAqXG5cdCAqIFRoZSBkZWZhdWx0IGZpbG0gZ2F1Z2UgaXMgMzUsIHNvIHRoYXQgdGhlIGZvY2FsIGxlbmd0aCBjYW4gYmUgc3BlY2lmaWVkIGZvclxuXHQgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGZvY2FsTGVuZ3RoIC0gVmFsdWVzIGZvciBmb2NhbCBsZW5ndGggYW5kIGZpbG0gZ2F1Z2UgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXQuXG5cdCAqL1xuXHRzZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKSB7XG5cblx0XHQvKiogc2VlIHtAbGluayBodHRwOi8vd3d3LmJvYmF0a2lucy5jb20vcGhvdG9ncmFwaHkvdGVjaG5pY2FsL2ZpZWxkX29mX3ZpZXcuaHRtbH0gKi9cblx0XHRjb25zdCB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xuXG5cdFx0dGhpcy5mb3YgPSBSQUQyREVHICogMiAqIE1hdGguYXRhbiggdkV4dGVudFNsb3BlICk7XG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmb2NhbCBsZW5ndGggZnJvbSB0aGUgY3VycmVudCB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjZm92fSBhbmRcblx0ICoge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1HYXVnZX0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNvbXB1dGVkIGZvY2FsIGxlbmd0aC5cblx0ICovXG5cdGdldEZvY2FsTGVuZ3RoKCkge1xuXG5cdFx0Y29uc3QgdkV4dGVudFNsb3BlID0gTWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApO1xuXG5cdFx0cmV0dXJuIDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gdkV4dGVudFNsb3BlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCB2ZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGFuZ2xlIGluIGRlZ3JlZXMgY29uc2lkZXJpbmcge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI3pvb219LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlZmZlY3RpdmUgRk9WLlxuXHQgKi9cblx0Z2V0RWZmZWN0aXZlRk9WKCkge1xuXG5cdFx0cmV0dXJuIFJBRDJERUcgKiAyICogTWF0aC5hdGFuKFxuXHRcdFx0TWF0aC50YW4oIERFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgaW1hZ2Ugb24gdGhlIGZpbG0uIElmIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNhc3BlY3R9IGlzIGdyZWF0ZXIgdGhhbiBvclxuXHQgKiBlcXVhbCB0byBvbmUgKGxhbmRzY2FwZSBmb3JtYXQpLCB0aGUgcmVzdWx0IGVxdWFscyB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjZmlsbUdhdWdlfS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgZmlsbSB3aWR0aC5cblx0ICovXG5cdGdldEZpbG1XaWR0aCgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBwb3J0cmFpdCBmb3JtYXQgKGFzcGVjdCA8IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBoZWlnaHQgb2YgdGhlIGltYWdlIG9uIHRoZSBmaWxtLiBJZiB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjYXNwZWN0fSBpcyBncmVhdGVyIHRoYW4gb3Jcblx0ICogZXF1YWwgdG8gb25lIChsYW5kc2NhcGUgZm9ybWF0KSwgdGhlIHJlc3VsdCBlcXVhbHMge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2ZpbG1HYXVnZX0uXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGZpbG0gd2lkdGguXG5cdCAqL1xuXHRnZXRGaWxtSGVpZ2h0KCkge1xuXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIGxhbmRzY2FwZSBmb3JtYXQgKGFzcGVjdCA+IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlIC8gTWF0aC5tYXgoIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgMkQgYm91bmRzIG9mIHRoZSBjYW1lcmEncyB2aWV3YWJsZSByZWN0YW5nbGUgYXQgYSBnaXZlbiBkaXN0YW5jZSBhbG9uZyB0aGUgdmlld2luZyBkaXJlY3Rpb24uXG5cdCAqIFNldHMgYG1pblRhcmdldGAgYW5kIGBtYXhUYXJnZXRgIHRvIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgbG93ZXItbGVmdCBhbmQgdXBwZXItcmlnaHQgY29ybmVycyBvZiB0aGUgdmlldyByZWN0YW5nbGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSB2aWV3aW5nIGRpc3RhbmNlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1pblRhcmdldCAtIFRoZSBsb3dlci1sZWZ0IGNvcm5lciBvZiB0aGUgdmlldyByZWN0YW5nbGUgaXMgd3JpdHRlbiBpbnRvIHRoaXMgdmVjdG9yLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IG1heFRhcmdldCAtIFRoZSB1cHBlci1yaWdodCBjb3JuZXIgb2YgdGhlIHZpZXcgcmVjdGFuZ2xlIGlzIHdyaXR0ZW4gaW50byB0aGlzIHZlY3Rvci5cblx0ICovXG5cdGdldFZpZXdCb3VuZHMoIGRpc3RhbmNlLCBtaW5UYXJnZXQsIG1heFRhcmdldCApIHtcblxuXHRcdF92MyQxLnNldCggLTEsIC0xLCAwLjUgKS5hcHBseU1hdHJpeDQoIHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRcdG1pblRhcmdldC5zZXQoIF92MyQxLngsIF92MyQxLnkgKS5tdWx0aXBseVNjYWxhciggLSBkaXN0YW5jZSAvIF92MyQxLnogKTtcblxuXHRcdF92MyQxLnNldCggMSwgMSwgMC41ICkuYXBwbHlNYXRyaXg0KCB0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHRtYXhUYXJnZXQuc2V0KCBfdjMkMS54LCBfdjMkMS55ICkubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgLyBfdjMkMS56ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgY2FtZXJhJ3Mgdmlld2FibGUgcmVjdGFuZ2xlIGF0IGEgZ2l2ZW4gZGlzdGFuY2UgYWxvbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2UgLSBUaGUgdmlld2luZyBkaXN0YW5jZS5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgcmVzdWx0IHdoZXJlIHggaXMgd2lkdGggYW5kIHkgaXMgaGVpZ2h0LlxuXHQgKiBAcmV0dXJucyB7VmVjdG9yMn0gVGhlIHZpZXcgc2l6ZS5cblx0ICovXG5cdGdldFZpZXdTaXplKCBkaXN0YW5jZSwgdGFyZ2V0ICkge1xuXG5cdFx0dGhpcy5nZXRWaWV3Qm91bmRzKCBkaXN0YW5jZSwgX21pblRhcmdldCwgX21heFRhcmdldCApO1xuXG5cdFx0cmV0dXJuIHRhcmdldC5zdWJWZWN0b3JzKCBfbWF4VGFyZ2V0LCBfbWluVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSAzeDIgbW9uaXRvcnMgYW5kIGVhY2ggbW9uaXRvciBpcyAxOTIweDEwODAgYW5kXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcblx0ICpgYGBcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEQgfCBFIHwgRiB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKmBgYFxuXHQgKiB0aGVuIGZvciBlYWNoIG1vbml0b3IgeW91IHdvdWxkIGNhbGwgaXQgbGlrZSB0aGlzOlxuXHQgKmBgYGpzXG5cdCAqIGNvbnN0IHcgPSAxOTIwO1xuXHQgKiBjb25zdCBoID0gMTA4MDtcblx0ICogY29uc3QgZnVsbFdpZHRoID0gdyAqIDM7XG5cdCAqIGNvbnN0IGZ1bGxIZWlnaHQgPSBoICogMjtcblx0ICpcblx0ICogLy8gLS1BLS1cblx0ICogY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAwLCB3LCBoICk7XG5cdCAqIC8vIC0tQi0tXG5cdCAqIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMCwgdywgaCApO1xuXHQgKiAvLyAtLUMtLVxuXHQgKiBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDAsIHcsIGggKTtcblx0ICogLy8gLS1ELS1cblx0ICogY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDAsIGggKiAxLCB3LCBoICk7XG5cdCAqIC8vIC0tRS0tXG5cdCAqIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMSwgdywgaCApO1xuXHQgKiAvLyAtLUYtLVxuXHQgKiBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDEsIHcsIGggKTtcblx0ICogYGBgXG5cdCAqXG5cdCAqIE5vdGUgdGhlcmUgaXMgbm8gcmVhc29uIG1vbml0b3JzIGhhdmUgdG8gYmUgdGhlIHNhbWUgc2l6ZSBvciBpbiBhIGdyaWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmdWxsV2lkdGggLSBUaGUgZnVsbCB3aWR0aCBvZiBtdWx0aXZpZXcgc2V0dXAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmdWxsSGVpZ2h0IC0gVGhlIGZ1bGwgaGVpZ2h0IG9mIG11bHRpdmlldyBzZXR1cC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgaG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIHN1YmNhbWVyYS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgb2Zmc2V0IG9mIHRoZSBzdWJjYW1lcmEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiBzdWJjYW1lcmEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHN1YmNhbWVyYS5cblx0ICovXG5cdHNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdHRoaXMuYXNwZWN0ID0gZnVsbFdpZHRoIC8gZnVsbEhlaWdodDtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIHZpZXcgb2Zmc2V0IGZyb20gdGhlIHByb2plY3Rpb24gbWF0cml4LlxuXHQgKi9cblx0Y2xlYXJWaWV3T2Zmc2V0KCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNhbWVyYSdzIHByb2plY3Rpb24gbWF0cml4LiBNdXN0IGJlIGNhbGxlZCBhZnRlciBhbnkgY2hhbmdlIG9mXG5cdCAqIGNhbWVyYSBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcblxuXHRcdGNvbnN0IG5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0bGV0IHRvcCA9IG5lYXIgKiBNYXRoLnRhbiggREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICkgLyB0aGlzLnpvb207XG5cdFx0bGV0IGhlaWdodCA9IDIgKiB0b3A7XG5cdFx0bGV0IHdpZHRoID0gdGhpcy5hc3BlY3QgKiBoZWlnaHQ7XG5cdFx0bGV0IGxlZnQgPSAtMC41ICogd2lkdGg7XG5cdFx0Y29uc3QgdmlldyA9IHRoaXMudmlldztcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHRjb25zdCBmdWxsV2lkdGggPSB2aWV3LmZ1bGxXaWR0aCxcblx0XHRcdFx0ZnVsbEhlaWdodCA9IHZpZXcuZnVsbEhlaWdodDtcblxuXHRcdFx0bGVmdCArPSB2aWV3Lm9mZnNldFggKiB3aWR0aCAvIGZ1bGxXaWR0aDtcblx0XHRcdHRvcCAtPSB2aWV3Lm9mZnNldFkgKiBoZWlnaHQgLyBmdWxsSGVpZ2h0O1xuXHRcdFx0d2lkdGggKj0gdmlldy53aWR0aCAvIGZ1bGxXaWR0aDtcblx0XHRcdGhlaWdodCAqPSB2aWV3LmhlaWdodCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHR9XG5cblx0XHRjb25zdCBza2V3ID0gdGhpcy5maWxtT2Zmc2V0O1xuXHRcdGlmICggc2tldyAhPT0gMCApIGxlZnQgKz0gbmVhciAqIHNrZXcgLyB0aGlzLmdldEZpbG1XaWR0aCgpO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgbGVmdCArIHdpZHRoLCB0b3AsIHRvcCAtIGhlaWdodCwgbmVhciwgdGhpcy5mYXIsIHRoaXMuY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3QuZm92ID0gdGhpcy5mb3Y7XG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblxuXHRcdGRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0ZGF0YS5vYmplY3QuZmFyID0gdGhpcy5mYXI7XG5cdFx0ZGF0YS5vYmplY3QuZm9jdXMgPSB0aGlzLmZvY3VzO1xuXG5cdFx0ZGF0YS5vYmplY3QuYXNwZWN0ID0gdGhpcy5hc3BlY3Q7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy52aWV3ICk7XG5cblx0XHRkYXRhLm9iamVjdC5maWxtR2F1Z2UgPSB0aGlzLmZpbG1HYXVnZTtcblx0XHRkYXRhLm9iamVjdC5maWxtT2Zmc2V0ID0gdGhpcy5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbmNvbnN0IGZvdiA9IC05MDsgLy8gbmVnYXRpdmUgZm92IGlzIG5vdCBhbiBlcnJvclxuY29uc3QgYXNwZWN0ID0gMTtcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiBjYW1lcmEgdGhhdCBpcyBwb3NpdGlvbmVkIGluIDNEIHNwYWNlIHRvIHJlbmRlciBpdHMgc3Vycm91bmRpbmdzIGludG8gYVxuICogY3ViZSByZW5kZXIgdGFyZ2V0LiBUaGUgcmVuZGVyIHRhcmdldCBjYW4gdGhlbiBiZSB1c2VkIGFzIGFuIGVudmlyb25tZW50IG1hcCBmb3IgcmVuZGVyaW5nXG4gKiByZWFsdGltZSByZWZsZWN0aW9ucyBpbiB5b3VyIHNjZW5lLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBDcmVhdGUgY3ViZSByZW5kZXIgdGFyZ2V0XG4gKiBjb25zdCBjdWJlUmVuZGVyVGFyZ2V0ID0gbmV3IFRIUkVFLldlYkdMQ3ViZVJlbmRlclRhcmdldCggMjU2LCB7IGdlbmVyYXRlTWlwbWFwczogdHJ1ZSwgbWluRmlsdGVyOiBUSFJFRS5MaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgfSApO1xuICpcbiAqIC8vIENyZWF0ZSBjdWJlIGNhbWVyYVxuICogY29uc3QgY3ViZUNhbWVyYSA9IG5ldyBUSFJFRS5DdWJlQ2FtZXJhKCAxLCAxMDAwMDAsIGN1YmVSZW5kZXJUYXJnZXQgKTtcbiAqIHNjZW5lLmFkZCggY3ViZUNhbWVyYSApO1xuICpcbiAqIC8vIENyZWF0ZSBjYXJcbiAqIGNvbnN0IGNocm9tZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZmZmLCBlbnZNYXA6IGN1YmVSZW5kZXJUYXJnZXQudGV4dHVyZSB9ICk7XG4gKiBjb25zdCBjYXIgPSBuZXcgVEhSRUUuTWVzaCggY2FyR2VvbWV0cnksIGNocm9tZU1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIGNhciApO1xuICpcbiAqIC8vIFVwZGF0ZSB0aGUgcmVuZGVyIHRhcmdldCBjdWJlXG4gKiBjYXIudmlzaWJsZSA9IGZhbHNlO1xuICogY3ViZUNhbWVyYS5wb3NpdGlvbi5jb3B5KCBjYXIucG9zaXRpb24gKTtcbiAqIGN1YmVDYW1lcmEudXBkYXRlKCByZW5kZXJlciwgc2NlbmUgKTtcbiAqXG4gKiAvLyBSZW5kZXIgdGhlIHNjZW5lXG4gKiBjYXIudmlzaWJsZSA9IHRydWU7XG4gKiByZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmEgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBDdWJlQ2FtZXJhIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGN1YmUgY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbmVhciAtIFRoZSBjYW1lcmEncyBuZWFyIHBsYW5lLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZmFyIC0gVGhlIGNhbWVyYSdzIGZhciBwbGFuZS5cblx0ICogQHBhcmFtIHtXZWJHTEN1YmVSZW5kZXJUYXJnZXR9IHJlbmRlclRhcmdldCAtIFRoZSBjdWJlIHJlbmRlciB0YXJnZXQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmVhciwgZmFyLCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1YmVDYW1lcmEnO1xuXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIGN1YmUgcmVuZGVyIHRhcmdldC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTEN1YmVSZW5kZXJUYXJnZXR9XG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBhY3RpdmUgY29vcmRpbmF0ZSBzeXN0ZW0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSl9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY29vcmRpbmF0ZVN5c3RlbSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBhY3RpdmUgbWlwbWFwIGxldmVsXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmFjdGl2ZU1pcG1hcExldmVsID0gMDtcblxuXHRcdGNvbnN0IGNhbWVyYVBYID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhUFgubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYVBYICk7XG5cblx0XHRjb25zdCBjYW1lcmFOWCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYU5YLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFOWCApO1xuXG5cdFx0Y29uc3QgY2FtZXJhUFkgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFQWS5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHR0aGlzLmFkZCggY2FtZXJhUFkgKTtcblxuXHRcdGNvbnN0IGNhbWVyYU5ZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y2FtZXJhTlkubGF5ZXJzID0gdGhpcy5sYXllcnM7XG5cdFx0dGhpcy5hZGQoIGNhbWVyYU5ZICk7XG5cblx0XHRjb25zdCBjYW1lcmFQWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRcdGNhbWVyYVBaLmxheWVycyA9IHRoaXMubGF5ZXJzO1xuXHRcdHRoaXMuYWRkKCBjYW1lcmFQWiApO1xuXG5cdFx0Y29uc3QgY2FtZXJhTlogPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0XHRjYW1lcmFOWi5sYXllcnMgPSB0aGlzLmxheWVycztcblx0XHR0aGlzLmFkZCggY2FtZXJhTlogKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE11c3QgYmUgY2FsbGVkIHdoZW4gdGhlIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoZSBjdWJlIGNhbWVyYSBpcyBjaGFuZ2VkLlxuXHQgKi9cblx0dXBkYXRlQ29vcmRpbmF0ZVN5c3RlbSgpIHtcblxuXHRcdGNvbnN0IGNvb3JkaW5hdGVTeXN0ZW0gPSB0aGlzLmNvb3JkaW5hdGVTeXN0ZW07XG5cblx0XHRjb25zdCBjYW1lcmFzID0gdGhpcy5jaGlsZHJlbi5jb25jYXQoKTtcblxuXHRcdGNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gY2FtZXJhcztcblxuXHRcdGZvciAoIGNvbnN0IGNhbWVyYSBvZiBjYW1lcmFzICkgdGhpcy5yZW1vdmUoIGNhbWVyYSApO1xuXG5cdFx0aWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRcdGNhbWVyYVBYLnVwLnNldCggMCwgMSwgMCApO1xuXHRcdFx0Y2FtZXJhUFgubG9va0F0KCAxLCAwLCAwICk7XG5cblx0XHRcdGNhbWVyYU5YLnVwLnNldCggMCwgMSwgMCApO1xuXHRcdFx0Y2FtZXJhTlgubG9va0F0KCAtMSwgMCwgMCApO1xuXG5cdFx0XHRjYW1lcmFQWS51cC5zZXQoIDAsIDAsIC0xICk7XG5cdFx0XHRjYW1lcmFQWS5sb29rQXQoIDAsIDEsIDAgKTtcblxuXHRcdFx0Y2FtZXJhTlkudXAuc2V0KCAwLCAwLCAxICk7XG5cdFx0XHRjYW1lcmFOWS5sb29rQXQoIDAsIC0xLCAwICk7XG5cblx0XHRcdGNhbWVyYVBaLnVwLnNldCggMCwgMSwgMCApO1xuXHRcdFx0Y2FtZXJhUFoubG9va0F0KCAwLCAwLCAxICk7XG5cblx0XHRcdGNhbWVyYU5aLnVwLnNldCggMCwgMSwgMCApO1xuXHRcdFx0Y2FtZXJhTloubG9va0F0KCAwLCAwLCAtMSApO1xuXG5cdFx0fSBlbHNlIGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR1BVQ29vcmRpbmF0ZVN5c3RlbSApIHtcblxuXHRcdFx0Y2FtZXJhUFgudXAuc2V0KCAwLCAtMSwgMCApO1xuXHRcdFx0Y2FtZXJhUFgubG9va0F0KCAtMSwgMCwgMCApO1xuXG5cdFx0XHRjYW1lcmFOWC51cC5zZXQoIDAsIC0xLCAwICk7XG5cdFx0XHRjYW1lcmFOWC5sb29rQXQoIDEsIDAsIDAgKTtcblxuXHRcdFx0Y2FtZXJhUFkudXAuc2V0KCAwLCAwLCAxICk7XG5cdFx0XHRjYW1lcmFQWS5sb29rQXQoIDAsIDEsIDAgKTtcblxuXHRcdFx0Y2FtZXJhTlkudXAuc2V0KCAwLCAwLCAtMSApO1xuXHRcdFx0Y2FtZXJhTlkubG9va0F0KCAwLCAtMSwgMCApO1xuXG5cdFx0XHRjYW1lcmFQWi51cC5zZXQoIDAsIC0xLCAwICk7XG5cdFx0XHRjYW1lcmFQWi5sb29rQXQoIDAsIDAsIDEgKTtcblxuXHRcdFx0Y2FtZXJhTloudXAuc2V0KCAwLCAtMSwgMCApO1xuXHRcdFx0Y2FtZXJhTloubG9va0F0KCAwLCAwLCAtMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuQ3ViZUNhbWVyYS51cGRhdGVDb29yZGluYXRlU3lzdGVtKCk6IEludmFsaWQgY29vcmRpbmF0ZSBzeXN0ZW06ICcgKyBjb29yZGluYXRlU3lzdGVtICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBjb25zdCBjYW1lcmEgb2YgY2FtZXJhcyApIHtcblxuXHRcdFx0dGhpcy5hZGQoIGNhbWVyYSApO1xuXG5cdFx0XHRjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxpbmcgdGhpcyBtZXRob2Qgd2lsbCByZW5kZXIgdGhlIGdpdmVuIHNjZW5lIHdpdGggdGhlIGdpdmVuIHJlbmRlcmVyXG5cdCAqIGludG8gdGhlIGN1YmUgcmVuZGVyIHRhcmdldCBvZiB0aGUgY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhSZW5kZXJlcnxXZWJHTFJlbmRlcmVyKX0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7U2NlbmV9IHNjZW5lIC0gVGhlIHNjZW5lIHRvIHJlbmRlci5cblx0ICovXG5cdHVwZGF0ZSggcmVuZGVyZXIsIHNjZW5lICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhcmVudCA9PT0gbnVsbCApIHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGNvbnN0IHsgcmVuZGVyVGFyZ2V0LCBhY3RpdmVNaXBtYXBMZXZlbCB9ID0gdGhpcztcblxuXHRcdGlmICggdGhpcy5jb29yZGluYXRlU3lzdGVtICE9PSByZW5kZXJlci5jb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHR0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSByZW5kZXJlci5jb29yZGluYXRlU3lzdGVtO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0oKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IFsgY2FtZXJhUFgsIGNhbWVyYU5YLCBjYW1lcmFQWSwgY2FtZXJhTlksIGNhbWVyYVBaLCBjYW1lcmFOWiBdID0gdGhpcy5jaGlsZHJlbjtcblxuXHRcdGNvbnN0IGN1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHRjb25zdCBjdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdGNvbnN0IGN1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IHJlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cblx0XHRjb25zdCBjdXJyZW50WHJFbmFibGVkID0gcmVuZGVyZXIueHIuZW5hYmxlZDtcblxuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGdlbmVyYXRlTWlwbWFwcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDAsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFggKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAxLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYU5YICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgMiwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmFQWSApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDMsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlkgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA0LCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYVBaICk7XG5cblx0XHQvLyBtaXBtYXBzIGFyZSBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBsYXN0IGNhbGwgb2YgcmVuZGVyKClcblx0XHQvLyBhdCB0aGlzIHBvaW50LCBhbGwgc2lkZXMgb2YgdGhlIGN1YmUgcmVuZGVyIHRhcmdldCBhcmUgZGVmaW5lZFxuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQsIDUsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlogKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgY3VycmVudEFjdGl2ZUN1YmVGYWNlLCBjdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHRcdHJlbmRlcmVyLnhyLmVuYWJsZWQgPSBjdXJyZW50WHJFbmFibGVkO1xuXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUubmVlZHNQTVJFTVVwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGN1YmUgdGV4dHVyZSBtYWRlIHVwIG9mIHNpeCBpbWFnZXMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGxvYWRlciA9IG5ldyBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcigpO1xuICogbG9hZGVyLnNldFBhdGgoICd0ZXh0dXJlcy9jdWJlL3Bpc2EvJyApO1xuICpcbiAqIGNvbnN0IHRleHR1cmVDdWJlID0gbG9hZGVyLmxvYWQoIFtcbiAqIFx0J3B4LnBuZycsICdueC5wbmcnLCAncHkucG5nJywgJ255LnBuZycsICdwei5wbmcnLCAnbnoucG5nJ1xuICogXSApO1xuICpcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmZmZiwgZW52TWFwOiB0ZXh0dXJlQ3ViZSB9ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVGV4dHVyZVxuICovXG5jbGFzcyBDdWJlVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGN1YmUgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxJbWFnZT59IFtpbWFnZXM9W11dIC0gQW4gYXJyYXkgaG9sZGluZyBhIGltYWdlIGZvciBlYWNoIHNpZGUgb2YgYSBjdWJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21hcHBpbmc9Q3ViZVJlZmxlY3Rpb25NYXBwaW5nXSAtIFRoZSB0ZXh0dXJlIG1hcHBpbmcuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFMgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFQ9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFQgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWFnRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWFnIGZpbHRlciB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttaW5GaWx0ZXI9TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXSAtIFRoZSBtaW4gZmlsdGVyIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zvcm1hdD1SR0JBRm9ybWF0XSAtIFRoZSB0ZXh0dXJlIGZvcm1hdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9Tm9Db2xvclNwYWNlXSAtIFRoZSBjb2xvciBzcGFjZSB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBpbWFnZXMgPSBbXSwgbWFwcGluZyA9IEN1YmVSZWZsZWN0aW9uTWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICkge1xuXG5cdFx0c3VwZXIoIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQ3ViZVRleHR1cmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHRleHR1cmUgaXMgZmxpcHBlZCBhbG9uZyB0aGUgdmVydGljYWwgYXhpcyB3aGVuXG5cdFx0ICogdXBsb2FkZWQgdG8gdGhlIEdQVS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBbGlhcyBmb3Ige0BsaW5rIEN1YmVUZXh0dXJlI2ltYWdlfS5cblx0ICpcblx0ICogQHR5cGUge0FycmF5PEltYWdlPn1cblx0ICovXG5cdGdldCBpbWFnZXMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pbWFnZTtcblxuXHR9XG5cblx0c2V0IGltYWdlcyggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmltYWdlID0gdmFsdWU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBjdWJlIHJlbmRlciB0YXJnZXQgdXNlZCBpbiBjb250ZXh0IG9mIHtAbGluayBXZWJHTFJlbmRlcmVyfS5cbiAqXG4gKiBAYXVnbWVudHMgV2ViR0xSZW5kZXJUYXJnZXRcbiAqL1xuY2xhc3MgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IGV4dGVuZHMgV2ViR0xSZW5kZXJUYXJnZXQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGN1YmUgcmVuZGVyIHRhcmdldC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIC0gVGhlIHNpemUgb2YgdGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7UmVuZGVyVGFyZ2V0fk9wdGlvbnN9IFtvcHRpb25zXSAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzaXplID0gMSwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0c3VwZXIoIHNpemUsIHNpemUsIG9wdGlvbnMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5cdFx0Y29uc3QgaW1hZ2UgPSB7IHdpZHRoOiBzaXplLCBoZWlnaHQ6IHNpemUsIGRlcHRoOiAxIH07XG5cdFx0Y29uc3QgaW1hZ2VzID0gWyBpbWFnZSwgaW1hZ2UsIGltYWdlLCBpbWFnZSwgaW1hZ2UsIGltYWdlIF07XG5cblx0XHQvKipcblx0XHQgKiBPdmVyd3JpdHRlbiB3aXRoIGEgZGlmZmVyZW50IHRleHR1cmUgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtEYXRhQXJyYXlUZXh0dXJlfVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSggaW1hZ2VzLCBvcHRpb25zLm1hcHBpbmcsIG9wdGlvbnMud3JhcFMsIG9wdGlvbnMud3JhcFQsIG9wdGlvbnMubWFnRmlsdGVyLCBvcHRpb25zLm1pbkZpbHRlciwgb3B0aW9ucy5mb3JtYXQsIG9wdGlvbnMudHlwZSwgb3B0aW9ucy5hbmlzb3Ryb3B5LCBvcHRpb25zLmNvbG9yU3BhY2UgKTtcblxuXHRcdC8vIEJ5IGNvbnZlbnRpb24gLS0gbGlrZWx5IGJhc2VkIG9uIHRoZSBSZW5kZXJNYW4gc3BlYyBmcm9tIHRoZSAxOTkwJ3MgLS0gY3ViZSBtYXBzIGFyZSBzcGVjaWZpZWQgYnkgV2ViR0wgKGFuZCB0aHJlZS5qcylcblx0XHQvLyBpbiBhIGNvb3JkaW5hdGUgc3lzdGVtIGluIHdoaWNoIHBvc2l0aXZlLXggaXMgdG8gdGhlIHJpZ2h0IHdoZW4gbG9va2luZyB1cCB0aGUgcG9zaXRpdmUteiBheGlzIC0tIGluIG90aGVyIHdvcmRzLFxuXHRcdC8vIGluIGEgbGVmdC1oYW5kZWQgY29vcmRpbmF0ZSBzeXN0ZW0uIEJ5IGNvbnRpbnVpbmcgdGhpcyBjb252ZW50aW9uLCBwcmVleGlzdGluZyBjdWJlIG1hcHMgY29udGludWVkIHRvIHJlbmRlciBjb3JyZWN0bHkuXG5cblx0XHQvLyB0aHJlZS5qcyB1c2VzIGEgcmlnaHQtaGFuZGVkIGNvb3JkaW5hdGUgc3lzdGVtLiBTbyBlbnZpcm9ubWVudCBtYXBzIHVzZWQgaW4gdGhyZWUuanMgYXBwZWFyIHRvIGhhdmUgcHggYW5kIG54IHN3YXBwZWRcblx0XHQvLyBhbmQgdGhlIGZsYWcgaXNSZW5kZXJUYXJnZXRUZXh0dXJlIGNvbnRyb2xzIHRoaXMgY29udmVyc2lvbi4gVGhlIGZsaXAgaXMgbm90IHJlcXVpcmVkIHdoZW4gdXNpbmcgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0LnRleHR1cmVcblx0XHQvLyBhcyBhIGN1YmUgdGV4dHVyZSAodGhpcyBpcyBkZXRlY3RlZCB3aGVuIGlzUmVuZGVyVGFyZ2V0VGV4dHVyZSBpcyBzZXQgdG8gdHJ1ZSBmb3IgY3ViZSB0ZXh0dXJlcykuXG5cblx0XHR0aGlzLnRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgOiBmYWxzZTtcblx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gb3B0aW9ucy5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlIHRvIGEgY3ViZSBtYXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSBlcXVpcmVjdGFuZ3VsYXIgdGV4dHVyZS5cblx0ICogQHJldHVybiB7V2ViR0xDdWJlUmVuZGVyVGFyZ2V0fSBBIHJlZmVyZW5jZSB0byB0aGlzIGN1YmUgcmVuZGVyIHRhcmdldC5cblx0ICovXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlKCByZW5kZXJlciwgdGV4dHVyZSApIHtcblxuXHRcdHRoaXMudGV4dHVyZS50eXBlID0gdGV4dHVyZS50eXBlO1xuXHRcdHRoaXMudGV4dHVyZS5jb2xvclNwYWNlID0gdGV4dHVyZS5jb2xvclNwYWNlO1xuXG5cdFx0dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO1xuXHRcdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSB0ZXh0dXJlLm1pbkZpbHRlcjtcblx0XHR0aGlzLnRleHR1cmUubWFnRmlsdGVyID0gdGV4dHVyZS5tYWdGaWx0ZXI7XG5cblx0XHRjb25zdCBzaGFkZXIgPSB7XG5cblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdHRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0fSxcblxuXHRcdFx0dmVydGV4U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XG5cblx0XHRcdFx0dmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcblxuXHRcdFx0XHRcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggZGlyLCAwLjAgKSApLnh5eiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0XHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xuXG5cdFx0XHRcdFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cblx0XHRcdFx0XHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cblx0XHRcdFx0fVxuXHRcdFx0YCxcblxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xuXG5cdFx0XHRcdHZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XG5cblx0XHRcdFx0I2luY2x1ZGUgPGNvbW1vbj5cblxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0XHR2ZWMzIGRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggdldvcmxkRGlyZWN0aW9uICk7XG5cblx0XHRcdFx0XHR2ZWMyIHNhbXBsZVVWID0gZXF1aXJlY3RVdiggZGlyZWN0aW9uICk7XG5cblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcblxuXHRcdFx0XHR9XG5cdFx0XHRgXG5cdFx0fTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJveEdlb21ldHJ5KCA1LCA1LCA1ICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0XHRuYW1lOiAnQ3ViZW1hcEZyb21FcXVpcmVjdCcsXG5cblx0XHRcdHVuaWZvcm1zOiBjbG9uZVVuaWZvcm1zKCBzaGFkZXIudW5pZm9ybXMgKSxcblx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBzaGFkZXIuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRzaWRlOiBCYWNrU2lkZSxcblx0XHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nXG5cblx0XHR9ICk7XG5cblx0XHRtYXRlcmlhbC51bmlmb3Jtcy50RXF1aXJlY3QudmFsdWUgPSB0ZXh0dXJlO1xuXG5cdFx0Y29uc3QgbWVzaCA9IG5ldyBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IGN1cnJlbnRNaW5GaWx0ZXIgPSB0ZXh0dXJlLm1pbkZpbHRlcjtcblxuXHRcdC8vIEF2b2lkIGJsdXJyZWQgcG9sZXNcblx0XHRpZiAoIHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgKSB0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdGNvbnN0IGNhbWVyYSA9IG5ldyBDdWJlQ2FtZXJhKCAxLCAxMCwgdGhpcyApO1xuXHRcdGNhbWVyYS51cGRhdGUoIHJlbmRlcmVyLCBtZXNoICk7XG5cblx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IGN1cnJlbnRNaW5GaWx0ZXI7XG5cblx0XHRtZXNoLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHRtZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXJzIHRoaXMgY3ViZSByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb2xvcj10cnVlXSAtIFdoZXRoZXIgdGhlIGNvbG9yIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlcHRoPXRydWVdIC0gV2hldGhlciB0aGUgZGVwdGggYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICogQHBhcmFtIHtib29sZWFufSBbc3RlbmNpbD10cnVlXSAtIFdoZXRoZXIgdGhlIHN0ZW5jaWwgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0ICovXG5cdGNsZWFyKCByZW5kZXJlciwgY29sb3IgPSB0cnVlLCBkZXB0aCA9IHRydWUsIHN0ZW5jaWwgPSB0cnVlICkge1xuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLCBpICk7XG5cblx0XHRcdHJlbmRlcmVyLmNsZWFyKCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwgKTtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgaXMgYWxtb3N0IGlkZW50aWNhbCB0byBhbiB7QGxpbmsgT2JqZWN0M0R9LiBJdHMgcHVycG9zZSBpcyB0b1xuICogbWFrZSB3b3JraW5nIHdpdGggZ3JvdXBzIG9mIG9iamVjdHMgc3ludGFjdGljYWxseSBjbGVhcmVyLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBDcmVhdGUgYSBncm91cCBhbmQgYWRkIHRoZSB0d28gY3ViZXMuXG4gKiAvLyBUaGVzZSBjdWJlcyBjYW4gbm93IGJlIHJvdGF0ZWQgLyBzY2FsZWQgZXRjIGFzIGEgZ3JvdXAuXG4gKiBjb25zdCBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICpcbiAqIGdyb3VwLmFkZCggbWVzaEEgKTtcbiAqIGdyb3VwLmFkZCggbWVzaEIgKTtcbiAqXG4gKiBzY2VuZS5hZGQoIGdyb3VwICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgT2JqZWN0M0RcbiAqL1xuY2xhc3MgR3JvdXAgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0dyb3VwID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdHcm91cCc7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9tb3ZlRXZlbnQgPSB7IHR5cGU6ICdtb3ZlJyB9O1xuXG4vKipcbiAqIENsYXNzIGZvciByZXByZXNlbnRpbmcgYSBYUiBjb250cm9sbGVyIHdpdGggaXRzXG4gKiBkaWZmZXJlbnQgY29vcmRpbmF0ZSBzeXN0ZW1zLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFdlYlhSQ29udHJvbGxlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgWFIgY29udHJvbGxlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0LyoqXG5cdFx0ICogQSBncm91cCByZXByZXNlbnRpbmcgdGhlIHRhcmdldCByYXkgc3BhY2Vcblx0XHQgKiBvZiB0aGUgWFIgY29udHJvbGxlci5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9Hcm91cH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5fdGFyZ2V0UmF5ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBncmlwIHNwYWNlXG5cdFx0ICogb2YgdGhlIFhSIGNvbnRyb2xsZXIuXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHs/R3JvdXB9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuX2dyaXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGhhbmQgc3BhY2Vcblx0XHQgKiBvZiB0aGUgWFIgY29udHJvbGxlci5cblx0XHQgKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHR5cGUgez9Hcm91cH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZCA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBoYW5kIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGhhbmQgc3BhY2Ugb2YgdGhlIFhSIGNvbnRyb2xsZXIuXG5cdCAqL1xuXHRnZXRIYW5kU3BhY2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2hhbmQgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2hhbmQgPSBuZXcgR3JvdXAoKTtcblx0XHRcdHRoaXMuX2hhbmQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5faGFuZC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdHRoaXMuX2hhbmQuam9pbnRzID0ge307XG5cdFx0XHR0aGlzLl9oYW5kLmlucHV0U3RhdGUgPSB7IHBpbmNoaW5nOiBmYWxzZSB9O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2hhbmQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSB0YXJnZXQgcmF5IHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCByZXByZXNlbnRpbmcgdGhlIHRhcmdldCByYXkgc3BhY2Ugb2YgdGhlIFhSIGNvbnRyb2xsZXIuXG5cdCAqL1xuXHRnZXRUYXJnZXRSYXlTcGFjZSgpIHtcblxuXHRcdGlmICggdGhpcy5fdGFyZ2V0UmF5ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl90YXJnZXRSYXkgPSBuZXcgR3JvdXAoKTtcblx0XHRcdHRoaXMuX3RhcmdldFJheS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHR0aGlzLl90YXJnZXRSYXkudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5Lmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl90YXJnZXRSYXkubGluZWFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5Lmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fdGFyZ2V0UmF5LmFuZ3VsYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fdGFyZ2V0UmF5O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgZ3JpcCBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci5cblx0ICpcblx0ICogQHJldHVybiB7R3JvdXB9IEEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBncmlwIHNwYWNlIG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHQgKi9cblx0Z2V0R3JpcFNwYWNlKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9ncmlwID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwID0gbmV3IEdyb3VwKCk7XG5cdFx0XHR0aGlzLl9ncmlwLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2dyaXAudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5saW5lYXJWZWxvY2l0eSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHR0aGlzLl9ncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fZ3JpcC5hbmd1bGFyVmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX2dyaXA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEaXNwYXRjaGVzIHRoZSBnaXZlbiBldmVudCB0byB0aGUgZ3JvdXBzIHJlcHJlc2VudGluZ1xuXHQgKiB0aGUgZGlmZmVyZW50IGNvb3JkaW5hdGUgc3BhY2VzIG9mIHRoZSBYUiBjb250cm9sbGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gZGlzcGF0Y2guXG5cdCAqIEByZXR1cm4ge1dlYlhSQ29udHJvbGxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGRpc3BhdGNoRXZlbnQoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl90YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3RhcmdldFJheS5kaXNwYXRjaEV2ZW50KCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9ncmlwICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwLmRpc3BhdGNoRXZlbnQoIGV2ZW50ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuX2hhbmQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2hhbmQuZGlzcGF0Y2hFdmVudCggZXZlbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29ubmVjdHMgdGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgZ2l2ZW4gWFIgaW5wdXQgc291cmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IGlucHV0U291cmNlIC0gVGhlIGlucHV0IHNvdXJjZS5cblx0ICogQHJldHVybiB7V2ViWFJDb250cm9sbGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y29ubmVjdCggaW5wdXRTb3VyY2UgKSB7XG5cblx0XHRpZiAoIGlucHV0U291cmNlICYmIGlucHV0U291cmNlLmhhbmQgKSB7XG5cblx0XHRcdGNvbnN0IGhhbmQgPSB0aGlzLl9oYW5kO1xuXG5cdFx0XHRpZiAoIGhhbmQgKSB7XG5cblx0XHRcdFx0Zm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkge1xuXG5cdFx0XHRcdFx0Ly8gSW5pdGlhbGl6ZSBoYW5kIHdpdGggam9pbnRzIHdoZW4gY29ubmVjdGVkXG5cdFx0XHRcdFx0dGhpcy5fZ2V0SGFuZEpvaW50KCBoYW5kLCBpbnB1dGpvaW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Nvbm5lY3RlZCcsIGRhdGE6IGlucHV0U291cmNlIH0gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGlzY29ubmVjdHMgdGhlIGNvbnRyb2xsZXIgZnJvbSB0aGUgZ2l2ZW4gWFIgaW5wdXQgc291cmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IGlucHV0U291cmNlIC0gVGhlIGlucHV0IHNvdXJjZS5cblx0ICogQHJldHVybiB7V2ViWFJDb250cm9sbGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0ZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc2Nvbm5lY3RlZCcsIGRhdGE6IGlucHV0U291cmNlIH0gKTtcblxuXHRcdGlmICggdGhpcy5fdGFyZ2V0UmF5ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl90YXJnZXRSYXkudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLl9ncmlwICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9ncmlwLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5faGFuZCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5faGFuZC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgc291cmNlLCBYUiBmcmFtZSBhbmQgcmVmZXJlbmNlIHNwYWNlLlxuXHQgKiBUaGlzIHVwZGF0ZXMgdGhlIHRyYW5zZm9ybWF0aW9ucyBvZiB0aGUgZ3JvdXBzIHRoYXQgcmVwcmVzZW50IHRoZSBkaWZmZXJlbnRcblx0ICogY29vcmRpbmF0ZSBzeXN0ZW1zIG9mIHRoZSBjb250cm9sbGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1hSSW5wdXRTb3VyY2V9IGlucHV0U291cmNlIC0gVGhlIGlucHV0IHNvdXJjZS5cblx0ICogQHBhcmFtIHtYUkZyYW1lfSBmcmFtZSAtIFRoZSBYUiBmcmFtZS5cblx0ICogQHBhcmFtIHtYUlJlZmVyZW5jZVNwYWNlfSByZWZlcmVuY2VTcGFjZSAtIFRoZSByZWZlcmVuY2Ugc3BhY2UuXG5cdCAqIEByZXR1cm4ge1dlYlhSQ29udHJvbGxlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHVwZGF0ZSggaW5wdXRTb3VyY2UsIGZyYW1lLCByZWZlcmVuY2VTcGFjZSApIHtcblxuXHRcdGxldCBpbnB1dFBvc2UgPSBudWxsO1xuXHRcdGxldCBncmlwUG9zZSA9IG51bGw7XG5cdFx0bGV0IGhhbmRQb3NlID0gbnVsbDtcblxuXHRcdGNvbnN0IHRhcmdldFJheSA9IHRoaXMuX3RhcmdldFJheTtcblx0XHRjb25zdCBncmlwID0gdGhpcy5fZ3JpcDtcblx0XHRjb25zdCBoYW5kID0gdGhpcy5faGFuZDtcblxuXHRcdGlmICggaW5wdXRTb3VyY2UgJiYgZnJhbWUuc2Vzc2lvbi52aXNpYmlsaXR5U3RhdGUgIT09ICd2aXNpYmxlLWJsdXJyZWQnICkge1xuXG5cdFx0XHRpZiAoIGhhbmQgJiYgaW5wdXRTb3VyY2UuaGFuZCApIHtcblxuXHRcdFx0XHRoYW5kUG9zZSA9IHRydWU7XG5cblx0XHRcdFx0Zm9yICggY29uc3QgaW5wdXRqb2ludCBvZiBpbnB1dFNvdXJjZS5oYW5kLnZhbHVlcygpICkge1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBqb2ludHMgZ3JvdXBzIHdpdGggdGhlIFhSSm9pbnQgcG9zZXNcblx0XHRcdFx0XHRjb25zdCBqb2ludFBvc2UgPSBmcmFtZS5nZXRKb2ludFBvc2UoIGlucHV0am9pbnQsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0XHQvLyBUaGUgdHJhbnNmb3JtIG9mIHRoaXMgam9pbnQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIGpvaW50IHBvc2Ugb24gZWFjaCBmcmFtZVxuXHRcdFx0XHRcdGNvbnN0IGpvaW50ID0gdGhpcy5fZ2V0SGFuZEpvaW50KCBoYW5kLCBpbnB1dGpvaW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGpvaW50UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0am9pbnQubWF0cml4LmZyb21BcnJheSggam9pbnRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeC5kZWNvbXBvc2UoIGpvaW50LnBvc2l0aW9uLCBqb2ludC5yb3RhdGlvbiwgam9pbnQuc2NhbGUgKTtcblx0XHRcdFx0XHRcdGpvaW50Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0am9pbnQuam9pbnRSYWRpdXMgPSBqb2ludFBvc2UucmFkaXVzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0am9pbnQudmlzaWJsZSA9IGpvaW50UG9zZSAhPT0gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3VzdG9tIGV2ZW50c1xuXG5cdFx0XHRcdC8vIENoZWNrIHBpbmNoelxuXHRcdFx0XHRjb25zdCBpbmRleFRpcCA9IGhhbmQuam9pbnRzWyAnaW5kZXgtZmluZ2VyLXRpcCcgXTtcblx0XHRcdFx0Y29uc3QgdGh1bWJUaXAgPSBoYW5kLmpvaW50c1sgJ3RodW1iLXRpcCcgXTtcblx0XHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBpbmRleFRpcC5wb3NpdGlvbi5kaXN0YW5jZVRvKCB0aHVtYlRpcC5wb3NpdGlvbiApO1xuXG5cdFx0XHRcdGNvbnN0IGRpc3RhbmNlVG9QaW5jaCA9IDAuMDI7XG5cdFx0XHRcdGNvbnN0IHRocmVzaG9sZCA9IDAuMDA1O1xuXG5cdFx0XHRcdGlmICggaGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nICYmIGRpc3RhbmNlID4gZGlzdGFuY2VUb1BpbmNoICsgdGhyZXNob2xkICkge1xuXG5cdFx0XHRcdFx0aGFuZC5pbnB1dFN0YXRlLnBpbmNoaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAncGluY2hlbmQnLFxuXHRcdFx0XHRcdFx0aGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyxcblx0XHRcdFx0XHRcdHRhcmdldDogdGhpc1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhIGhhbmQuaW5wdXRTdGF0ZS5waW5jaGluZyAmJiBkaXN0YW5jZSA8PSBkaXN0YW5jZVRvUGluY2ggLSB0aHJlc2hvbGQgKSB7XG5cblx0XHRcdFx0XHRoYW5kLmlucHV0U3RhdGUucGluY2hpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ3BpbmNoc3RhcnQnLFxuXHRcdFx0XHRcdFx0aGFuZGVkbmVzczogaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyxcblx0XHRcdFx0XHRcdHRhcmdldDogdGhpc1xuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBncmlwICE9PSBudWxsICYmIGlucHV0U291cmNlLmdyaXBTcGFjZSApIHtcblxuXHRcdFx0XHRcdGdyaXBQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UuZ3JpcFNwYWNlLCByZWZlcmVuY2VTcGFjZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBncmlwUG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Z3JpcC5tYXRyaXguZnJvbUFycmF5KCBncmlwUG9zZS50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0XHRncmlwLm1hdHJpeC5kZWNvbXBvc2UoIGdyaXAucG9zaXRpb24sIGdyaXAucm90YXRpb24sIGdyaXAuc2NhbGUgKTtcblx0XHRcdFx0XHRcdGdyaXAubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdGlmICggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNMaW5lYXJWZWxvY2l0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGdyaXAubGluZWFyVmVsb2NpdHkuY29weSggZ3JpcFBvc2UubGluZWFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z3JpcC5oYXNBbmd1bGFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRncmlwLmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBncmlwUG9zZS5hbmd1bGFyVmVsb2NpdHkgKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRncmlwLmhhc0FuZ3VsYXJWZWxvY2l0eSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGFyZ2V0UmF5ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlucHV0UG9zZSA9IGZyYW1lLmdldFBvc2UoIGlucHV0U291cmNlLnRhcmdldFJheVNwYWNlLCByZWZlcmVuY2VTcGFjZSApO1xuXG5cdFx0XHRcdC8vIFNvbWUgcnVudGltZXMgKG5hbWVseSBWaXZlIENvc21vcyB3aXRoIFZpdmUgT3BlblhSIFJ1bnRpbWUpIGhhdmUgb25seSBncmlwIHNwYWNlIGFuZCByYXkgc3BhY2UgaXMgZXF1YWwgdG8gaXRcblx0XHRcdFx0aWYgKCBpbnB1dFBvc2UgPT09IG51bGwgJiYgZ3JpcFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpbnB1dFBvc2UgPSBncmlwUG9zZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBpbnB1dFBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmZyb21BcnJheSggaW5wdXRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHR0YXJnZXRSYXkubWF0cml4LmRlY29tcG9zZSggdGFyZ2V0UmF5LnBvc2l0aW9uLCB0YXJnZXRSYXkucm90YXRpb24sIHRhcmdldFJheS5zY2FsZSApO1xuXHRcdFx0XHRcdHRhcmdldFJheS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggaW5wdXRQb3NlLmxpbmVhclZlbG9jaXR5ICkge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzTGluZWFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5LmxpbmVhclZlbG9jaXR5LmNvcHkoIGlucHV0UG9zZS5saW5lYXJWZWxvY2l0eSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5Lmhhc0xpbmVhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGlucHV0UG9zZS5hbmd1bGFyVmVsb2NpdHkgKSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldFJheS5oYXNBbmd1bGFyVmVsb2NpdHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0dGFyZ2V0UmF5LmFuZ3VsYXJWZWxvY2l0eS5jb3B5KCBpbnB1dFBvc2UuYW5ndWxhclZlbG9jaXR5ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0YXJnZXRSYXkuaGFzQW5ndWxhclZlbG9jaXR5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9tb3ZlRXZlbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0YXJnZXRSYXkgIT09IG51bGwgKSB7XG5cblx0XHRcdHRhcmdldFJheS52aXNpYmxlID0gKCBpbnB1dFBvc2UgIT09IG51bGwgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ3JpcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Z3JpcC52aXNpYmxlID0gKCBncmlwUG9zZSAhPT0gbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBoYW5kICE9PSBudWxsICkge1xuXG5cdFx0XHRoYW5kLnZpc2libGUgPSAoIGhhbmRQb3NlICE9PSBudWxsICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBncm91cCByZXByZXNlbnRpbmcgdGhlIGhhbmQgam9pbnQgZm9yIHRoZSBnaXZlbiBpbnB1dCBqb2ludC5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtHcm91cH0gaGFuZCAtIFRoZSBncm91cCByZXByZXNlbnRpbmcgdGhlIGhhbmQgc3BhY2UuXG5cdCAqIEBwYXJhbSB7WFJIYW5kSm9pbnR9IGlucHV0am9pbnQgLSBUaGUgWFIgZnJhbWUuXG5cdCAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgaGFuZCBqb2ludCBmb3IgdGhlIGdpdmVuIGlucHV0IGpvaW50LlxuXHQgKi9cblx0X2dldEhhbmRKb2ludCggaGFuZCwgaW5wdXRqb2ludCApIHtcblxuXHRcdGlmICggaGFuZC5qb2ludHNbIGlucHV0am9pbnQuam9pbnROYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3Qgam9pbnQgPSBuZXcgR3JvdXAoKTtcblx0XHRcdGpvaW50Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblx0XHRcdGpvaW50LnZpc2libGUgPSBmYWxzZTtcblx0XHRcdGhhbmQuam9pbnRzWyBpbnB1dGpvaW50LmpvaW50TmFtZSBdID0gam9pbnQ7XG5cblx0XHRcdGhhbmQuYWRkKCBqb2ludCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmQuam9pbnRzWyBpbnB1dGpvaW50LmpvaW50TmFtZSBdO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIGFuIGV4cG9uZW50aWFsIHNxdWFyZWQgZm9nLFxuICogd2hpY2ggZ2l2ZXMgYSBjbGVhciB2aWV3IG5lYXIgdGhlIGNhbWVyYSBhbmQgYSBmYXN0ZXIgdGhhbiBleHBvbmVudGlhbGx5XG4gKiBkZW5zZW5pbmcgZm9nIGZhcnRoZXIgZnJvbSB0aGUgY2FtZXJhLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICogc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZ0V4cDIoIDB4Y2NjY2NjLCAwLjAwMiApO1xuICogYGBgXG4gKi9cbmNsYXNzIEZvZ0V4cDIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZvZy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ8Q29sb3J9IGNvbG9yIC0gVGhlIGZvZydzIGNvbG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RlbnNpdHk9MC4wMDAyNV0gLSBEZWZpbmVzIGhvdyBmYXN0IHRoZSBmb2cgd2lsbCBncm93IGRlbnNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBkZW5zaXR5ID0gMC4wMDAyNSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNGb2dFeHAyID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYW1lIG9mIHRoZSBmb2cuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZvZydzIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NvbG9yfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cblx0XHQvKipcblx0XHQgKiAgRGVmaW5lcyBob3cgZmFzdCB0aGUgZm9nIHdpbGwgZ3JvdyBkZW5zZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMC4wMDAyNVxuXHRcdCAqL1xuXHRcdHRoaXMuZGVuc2l0eSA9IGRlbnNpdHk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGZvZyB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtGb2dFeHAyfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgRm9nRXhwMiggdGhpcy5jb2xvciwgdGhpcy5kZW5zaXR5ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXJpYWxpemVzIHRoZSBmb2cgaW50byBKU09OLlxuXHQgKlxuXHQgKiBAcGFyYW0gez8oT2JqZWN0fHN0cmluZyl9IG1ldGEgLSBBbiBvcHRpb25hbCB2YWx1ZSBob2xkaW5nIG1ldGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlcmlhbGl6YXRpb24uXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZm9nXG5cdCAqL1xuXHR0b0pTT04oIC8qIG1ldGEgKi8gKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogJ0ZvZ0V4cDInLFxuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXG5cdFx0XHRkZW5zaXR5OiB0aGlzLmRlbnNpdHlcblx0XHR9O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgY2FuIGJlIHVzZWQgdG8gZGVmaW5lIGEgbGluZWFyIGZvZyB0aGF0IGdyb3dzIGxpbmVhcmx5IGRlbnNlclxuICogd2l0aCB0aGUgZGlzdGFuY2UuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gKiBzY2VuZS5mb2cgPSBuZXcgVEhSRUUuRm9nKCAweGNjY2NjYywgMTAsIDE1ICk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgRm9nIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBmb2cuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfSBjb2xvciAtIFRoZSBmb2cncyBjb2xvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZWFyPTFdIC0gVGhlIG1pbmltdW0gZGlzdGFuY2UgdG8gc3RhcnQgYXBwbHlpbmcgZm9nLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zhcj0xMDAwXSAtIFRoZSBtYXhpbXVtIGRpc3RhbmNlIGF0IHdoaWNoIGZvZyBzdG9wcyBiZWluZyBjYWxjdWxhdGVkIGFuZCBhcHBsaWVkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBuZWFyID0gMSwgZmFyID0gMTAwMCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNGb2cgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIGZvZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZm9nJ3MgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtaW5pbXVtIGRpc3RhbmNlIHRvIHN0YXJ0IGFwcGx5aW5nIGZvZy4gT2JqZWN0cyB0aGF0IGFyZSBsZXNzIHRoYW5cblx0XHQgKiBgbmVhcmAgdW5pdHMgZnJvbSB0aGUgYWN0aXZlIGNhbWVyYSB3b24ndCBiZSBhZmZlY3RlZCBieSBmb2cuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG1heGltdW0gZGlzdGFuY2UgYXQgd2hpY2ggZm9nIHN0b3BzIGJlaW5nIGNhbGN1bGF0ZWQgYW5kIGFwcGxpZWQuXG5cdFx0ICogT2JqZWN0cyB0aGF0IGFyZSBtb3JlIHRoYW4gYGZhcmAgdW5pdHMgYXdheSBmcm9tIHRoZSBhY3RpdmUgY2FtZXJhIHdvbid0XG5cdFx0ICogYmUgYWZmZWN0ZWQgYnkgZm9nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxMDAwXG5cdFx0ICovXG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGZvZyB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtGb2d9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBGb2coIHRoaXMuY29sb3IsIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIGZvZyBpbnRvIEpTT04uXG5cdCAqXG5cdCAqIEBwYXJhbSB7PyhPYmplY3R8c3RyaW5nKX0gbWV0YSAtIEFuIG9wdGlvbmFsIHZhbHVlIGhvbGRpbmcgbWV0YSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2VyaWFsaXphdGlvbi5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBmb2dcblx0ICovXG5cdHRvSlNPTiggLyogbWV0YSAqLyApIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiAnRm9nJyxcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblx0XHRcdGNvbG9yOiB0aGlzLmNvbG9yLmdldEhleCgpLFxuXHRcdFx0bmVhcjogdGhpcy5uZWFyLFxuXHRcdFx0ZmFyOiB0aGlzLmZhclxuXHRcdH07XG5cblx0fVxuXG59XG5cbi8qKlxuICogU2NlbmVzIGFsbG93IHlvdSB0byBzZXQgdXAgd2hhdCBpcyB0byBiZSByZW5kZXJlZCBhbmQgd2hlcmUgYnkgdGhyZWUuanMuXG4gKiBUaGlzIGlzIHdoZXJlIHlvdSBwbGFjZSAzRCBvYmplY3RzIGxpa2UgbWVzaGVzLCBsaW5lcyBvciBsaWdodHMuXG4gKlxuICogQGF1Z21lbnRzIE9iamVjdDNEXG4gKi9cbmNsYXNzIFNjZW5lIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNjZW5lLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NjZW5lID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTY2VuZSc7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBiYWNrZ3JvdW5kIG9mIHRoZSBzY2VuZS4gVmFsaWQgaW5wdXRzIGFyZTpcblx0XHQgKlxuXHRcdCAqIC0gQSBjb2xvciBmb3IgZGVmaW5pbmcgYSB1bmlmb3JtIGNvbG9yZWQgYmFja2dyb3VuZC5cblx0XHQgKiAtIEEgdGV4dHVyZSBmb3IgZGVmaW5pbmcgYSAoZmxhdCkgdGV4dHVyZWQgYmFja2dyb3VuZC5cblx0XHQgKiAtIEN1YmUgdGV4dHVyZXMgb3IgZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmVzIGZvciBkZWZpbmluZyBhIHNreWJveC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/KENvbG9yfFRleHR1cmUpfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJhY2tncm91bmQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgZW52aXJvbm1lbnQgbWFwIGZvciBhbGwgcGh5c2ljYWwgbWF0ZXJpYWxzIGluIHRoZSBzY2VuZS4gSG93ZXZlcixcblx0XHQgKiBpdCdzIG5vdCBwb3NzaWJsZSB0byBvdmVyd3JpdGUgYW4gZXhpc3RpbmcgdGV4dHVyZSBhc3NpZ25lZCB0byB0aGUgYGVudk1hcGBcblx0XHQgKiBtYXRlcmlhbCBwcm9wZXJ0eS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZpcm9ubWVudCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIGZvZyBpbnN0YW5jZSBkZWZpbmluZyB0aGUgdHlwZSBvZiBmb2cgdGhhdCBhZmZlY3RzIGV2ZXJ5dGhpbmdcblx0XHQgKiByZW5kZXJlZCBpbiB0aGUgc2NlbmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7PyhGb2d8Rm9nRXhwMil9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZm9nID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGJsdXJyaW5lc3Mgb2YgdGhlIGJhY2tncm91bmQuIE9ubHkgaW5mbHVlbmNlcyBlbnZpcm9ubWVudCBtYXBzXG5cdFx0ICogYXNzaWduZWQgdG8ge0BsaW5rIFNjZW5lI2JhY2tncm91bmR9LiBWYWxpZCBpbnB1dCBpcyBhIGZsb2F0IGJldHdlZW4gYDBgXG5cdFx0ICogYW5kIGAxYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQXR0ZW51YXRlcyB0aGUgY29sb3Igb2YgdGhlIGJhY2tncm91bmQuIE9ubHkgYXBwbGllcyB0byBiYWNrZ3JvdW5kIHRleHR1cmVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByb3RhdGlvbiBvZiB0aGUgYmFja2dyb3VuZCBpbiByYWRpYW5zLiBPbmx5IGluZmx1ZW5jZXMgZW52aXJvbm1lbnQgbWFwc1xuXHRcdCAqIGFzc2lnbmVkIHRvIHtAbGluayBTY2VuZSNiYWNrZ3JvdW5kfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtFdWxlcn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5iYWNrZ3JvdW5kUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEF0dGVudWF0ZXMgdGhlIGNvbG9yIG9mIHRoZSBlbnZpcm9ubWVudC4gT25seSBpbmZsdWVuY2VzIGVudmlyb25tZW50IG1hcHNcblx0XHQgKiBhc3NpZ25lZCB0byB7QGxpbmsgU2NlbmUjZW52aXJvbm1lbnR9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZpcm9ubWVudEludGVuc2l0eSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcm90YXRpb24gb2YgdGhlIGVudmlyb25tZW50IG1hcCBpbiByYWRpYW5zLiBPbmx5IGluZmx1ZW5jZXMgcGh5c2ljYWwgbWF0ZXJpYWxzXG5cdFx0ICogaW4gdGhlIHNjZW5lIHdoZW4ge0BsaW5rIFNjZW5lI2Vudmlyb25tZW50fSBpcyB1c2VkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0V1bGVyfVxuXHRcdCAqIEBkZWZhdWx0ICgwLDAsMClcblx0XHQgKi9cblx0XHR0aGlzLmVudmlyb25tZW50Um90YXRpb24gPSBuZXcgRXVsZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEZvcmNlcyBldmVyeXRoaW5nIGluIHRoZSBzY2VuZSB0byBiZSByZW5kZXJlZCB3aXRoIHRoZSBkZWZpbmVkIG1hdGVyaWFsLiBJdCBpcyBwb3NzaWJsZVxuXHRcdCAqIHRvIGV4Y2x1ZGUgbWF0ZXJpYWxzIGZyb20gb3ZlcnJpZGUgYnkgc2V0dGluZyB7QGxpbmsgTWF0ZXJpYWwjYWxsb3dPdmVycmlkZX0gdG8gYGZhbHNlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/TWF0ZXJpYWx9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IG51bGw7XG5cblx0XHRpZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAnb2JzZXJ2ZScsIHsgZGV0YWlsOiB0aGlzIH0gKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5iYWNrZ3JvdW5kICE9PSBudWxsICkgdGhpcy5iYWNrZ3JvdW5kID0gc291cmNlLmJhY2tncm91bmQuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5lbnZpcm9ubWVudCAhPT0gbnVsbCApIHRoaXMuZW52aXJvbm1lbnQgPSBzb3VyY2UuZW52aXJvbm1lbnQuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5mb2cgIT09IG51bGwgKSB0aGlzLmZvZyA9IHNvdXJjZS5mb2cuY2xvbmUoKTtcblxuXHRcdHRoaXMuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSBzb3VyY2UuYmFja2dyb3VuZEJsdXJyaW5lc3M7XG5cdFx0dGhpcy5iYWNrZ3JvdW5kSW50ZW5zaXR5ID0gc291cmNlLmJhY2tncm91bmRJbnRlbnNpdHk7XG5cdFx0dGhpcy5iYWNrZ3JvdW5kUm90YXRpb24uY29weSggc291cmNlLmJhY2tncm91bmRSb3RhdGlvbiApO1xuXG5cdFx0dGhpcy5lbnZpcm9ubWVudEludGVuc2l0eSA9IHNvdXJjZS5lbnZpcm9ubWVudEludGVuc2l0eTtcblx0XHR0aGlzLmVudmlyb25tZW50Um90YXRpb24uY29weSggc291cmNlLmVudmlyb25tZW50Um90YXRpb24gKTtcblxuXHRcdGlmICggc291cmNlLm92ZXJyaWRlTWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbC5jbG9uZSgpO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0aWYgKCB0aGlzLmZvZyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LmZvZyA9IHRoaXMuZm9nLnRvSlNPTigpO1xuXG5cdFx0aWYgKCB0aGlzLmJhY2tncm91bmRCbHVycmluZXNzID4gMCApIGRhdGEub2JqZWN0LmJhY2tncm91bmRCbHVycmluZXNzID0gdGhpcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcztcblx0XHRpZiAoIHRoaXMuYmFja2dyb3VuZEludGVuc2l0eSAhPT0gMSApIGRhdGEub2JqZWN0LmJhY2tncm91bmRJbnRlbnNpdHkgPSB0aGlzLmJhY2tncm91bmRJbnRlbnNpdHk7XG5cdFx0ZGF0YS5vYmplY3QuYmFja2dyb3VuZFJvdGF0aW9uID0gdGhpcy5iYWNrZ3JvdW5kUm90YXRpb24udG9BcnJheSgpO1xuXG5cdFx0aWYgKCB0aGlzLmVudmlyb25tZW50SW50ZW5zaXR5ICE9PSAxICkgZGF0YS5vYmplY3QuZW52aXJvbm1lbnRJbnRlbnNpdHkgPSB0aGlzLmVudmlyb25tZW50SW50ZW5zaXR5O1xuXHRcdGRhdGEub2JqZWN0LmVudmlyb25tZW50Um90YXRpb24gPSB0aGlzLmVudmlyb25tZW50Um90YXRpb24udG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbi8qKlxuICogXCJJbnRlcmxlYXZlZFwiIG1lYW5zIHRoYXQgbXVsdGlwbGUgYXR0cmlidXRlcywgcG9zc2libHkgb2YgZGlmZmVyZW50IHR5cGVzLFxuICogKGUuZy4sIHBvc2l0aW9uLCBub3JtYWwsIHV2LCBjb2xvcikgYXJlIHBhY2tlZCBpbnRvIGEgc2luZ2xlIGFycmF5IGJ1ZmZlci5cbiAqXG4gKiBBbiBpbnRyb2R1Y3Rpb24gaW50byBpbnRlcmxlYXZlZCBhcnJheXMgY2FuIGJlIGZvdW5kIGhlcmU6IFtJbnRlcmxlYXZlZCBhcnJheSBiYXNpY3Nde0BsaW5rIGh0dHBzOi8vYmxvZy50b2ppY29kZS5jb20vMjAxMS8wNS9pbnRlcmxlYXZlZC1hcnJheS1iYXNpY3MuaHRtbH1cbiAqL1xuY2xhc3MgSW50ZXJsZWF2ZWRCdWZmZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGludGVybGVhdmVkIGJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBhcnJheSAtIEEgdHlwZWQgYXJyYXkgd2l0aCBhIHNoYXJlZCBidWZmZXIgc3RvcmluZyBhdHRyaWJ1dGUgZGF0YS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHN0cmlkZSAtIFRoZSBudW1iZXIgb2YgdHlwZWQtYXJyYXkgZWxlbWVudHMgcGVyIHZlcnRleC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgc3RyaWRlICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0ludGVybGVhdmVkQnVmZmVyID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgdHlwZWQgYXJyYXkgd2l0aCBhIHNoYXJlZCBidWZmZXIgc3RvcmluZyBhdHRyaWJ1dGUgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtUeXBlZEFycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2YgdHlwZWQtYXJyYXkgZWxlbWVudHMgcGVyIHZlcnRleC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5zdHJpZGUgPSBzdHJpZGU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdG90YWwgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheVxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHN0cmlkZSA6IDA7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSBpbnRlbmRlZCB1c2FnZSBwYXR0ZXJuIG9mIHRoZSBkYXRhIHN0b3JlIGZvciBvcHRpbWl6YXRpb24gcHVycG9zZXMuXG5cdFx0ICpcblx0XHQgKiBOb3RlOiBBZnRlciB0aGUgaW5pdGlhbCB1c2Ugb2YgYSBidWZmZXIsIGl0cyB1c2FnZSBjYW5ub3QgYmUgY2hhbmdlZC4gSW5zdGVhZCxcblx0XHQgKiBpbnN0YW50aWF0ZSBhIG5ldyBvbmUgYW5kIHNldCB0aGUgZGVzaXJlZCB1c2FnZSBiZWZvcmUgdGhlIG5leHQgcmVuZGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhTdGF0aWNEcmF3VXNhZ2V8RHluYW1pY0RyYXdVc2FnZXxTdHJlYW1EcmF3VXNhZ2V8U3RhdGljUmVhZFVzYWdlfER5bmFtaWNSZWFkVXNhZ2V8U3RyZWFtUmVhZFVzYWdlfFN0YXRpY0NvcHlVc2FnZXxEeW5hbWljQ29weVVzYWdlfFN0cmVhbUNvcHlVc2FnZSl9XG5cdFx0ICogQGRlZmF1bHQgU3RhdGljRHJhd1VzYWdlXG5cdFx0ICovXG5cdFx0dGhpcy51c2FnZSA9IFN0YXRpY0RyYXdVc2FnZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gb25seSB1cGRhdGUgc29tZSBjb21wb25lbnRzIG9mIHN0b3JlZCB2ZWN0b3JzIChmb3IgZXhhbXBsZSwganVzdCB0aGVcblx0XHQgKiBjb21wb25lbnQgcmVsYXRlZCB0byBjb2xvcikuIFVzZSB0aGUgYGFkZFVwZGF0ZVJhbmdlKClgIGZ1bmN0aW9uIHRvIGFkZCByYW5nZXMgdG8gdGhpcyBhcnJheS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxPYmplY3Q+fVxuXHRcdCAqL1xuXHRcdHRoaXMudXBkYXRlUmFuZ2VzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBBIHZlcnNpb24gbnVtYmVyLCBpbmNyZW1lbnRlZCBldmVyeSB0aW1lIHRoZSBgbmVlZHNVcGRhdGVgIGlzIHNldCB0byBgdHJ1ZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMudmVyc2lvbiA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgVVVJRCBvZiB0aGUgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBhZnRlciB0aGUgcmVuZGVyZXIgaGFzIHRyYW5zZmVycmVkIHRoZSBhdHRyaWJ1dGUgYXJyYXlcblx0ICogZGF0YSB0byB0aGUgR1BVLlxuXHQgKi9cblx0b25VcGxvYWRDYWxsYmFjaygpIHt9XG5cblx0LyoqXG5cdCAqIEZsYWcgdG8gaW5kaWNhdGUgdGhhdCB0aGlzIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZCBhbmQgc2hvdWxkIGJlIHJlLXNlbnQgdG9cblx0ICogdGhlIEdQVS4gU2V0IHRoaXMgdG8gYHRydWVgIHdoZW4geW91IG1vZGlmeSB0aGUgdmFsdWUgb2YgdGhlIGFycmF5LlxuXHQgKlxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG5cdCAqL1xuXHRzZXQgbmVlZHNVcGRhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHVzYWdlIG9mIHRoaXMgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhTdGF0aWNEcmF3VXNhZ2V8RHluYW1pY0RyYXdVc2FnZXxTdHJlYW1EcmF3VXNhZ2V8U3RhdGljUmVhZFVzYWdlfER5bmFtaWNSZWFkVXNhZ2V8U3RyZWFtUmVhZFVzYWdlfFN0YXRpY0NvcHlVc2FnZXxEeW5hbWljQ29weVVzYWdlfFN0cmVhbUNvcHlVc2FnZSl9IHZhbHVlIC0gVGhlIHVzYWdlIHRvIHNldC5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuXHQgKi9cblx0c2V0VXNhZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgcmFuZ2Ugb2YgZGF0YSBpbiB0aGUgZGF0YSBhcnJheSB0byBiZSB1cGRhdGVkIG9uIHRoZSBHUFUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCAtIFBvc2l0aW9uIGF0IHdoaWNoIHRvIHN0YXJ0IHVwZGF0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gVGhlIG51bWJlciBvZiBjb21wb25lbnRzIHRvIHVwZGF0ZS5cblx0ICovXG5cdGFkZFVwZGF0ZVJhbmdlKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHR0aGlzLnVwZGF0ZVJhbmdlcy5wdXNoKCB7IHN0YXJ0LCBjb3VudCB9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhcnMgdGhlIHVwZGF0ZSByYW5nZXMuXG5cdCAqL1xuXHRjbGVhclVwZGF0ZVJhbmdlcygpIHtcblxuXHRcdHRoaXMudXBkYXRlUmFuZ2VzLmxlbmd0aCA9IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gaW50ZXJsZWF2ZWQgYnVmZmVyIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SW50ZXJsZWF2ZWRCdWZmZXJ9IHNvdXJjZSAtIFRoZSBpbnRlcmxlYXZlZCBidWZmZXIgdG8gY29weS5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFycmF5ID0gbmV3IHNvdXJjZS5hcnJheS5jb25zdHJ1Y3Rvciggc291cmNlLmFycmF5ICk7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XG5cdFx0dGhpcy51c2FnZSA9IHNvdXJjZS51c2FnZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIGEgdmVjdG9yIGZyb20gdGhlIGdpdmVuIGludGVybGVhdmVkIGJ1ZmZlciB0byB0aGlzIG9uZS4gVGhlIHN0YXJ0XG5cdCAqIGFuZCBkZXN0aW5hdGlvbiBwb3NpdGlvbiBpbiB0aGUgYXR0cmlidXRlIGJ1ZmZlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IHRoZVxuXHQgKiBnaXZlbiBpbmRpY2VzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXgxIC0gVGhlIGRlc3RpbmF0aW9uIGluZGV4IGludG8gdGhpcyBpbnRlcmxlYXZlZCBidWZmZXIuXG5cdCAqIEBwYXJhbSB7SW50ZXJsZWF2ZWRCdWZmZXJ9IGludGVybGVhdmVkQnVmZmVyIC0gVGhlIGludGVybGVhdmVkIGJ1ZmZlciB0byBjb3B5IGZyb20uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleDIgLSBUaGUgc291cmNlIGluZGV4IGludG8gdGhlIGdpdmVuIGludGVybGVhdmVkIGJ1ZmZlci5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb3B5QXQoIGluZGV4MSwgaW50ZXJsZWF2ZWRCdWZmZXIsIGluZGV4MiApIHtcblxuXHRcdGluZGV4MSAqPSB0aGlzLnN0cmlkZTtcblx0XHRpbmRleDIgKj0gaW50ZXJsZWF2ZWRCdWZmZXIuc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5zdHJpZGU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBpbnRlcmxlYXZlZEJ1ZmZlci5hcnJheVsgaW5kZXgyICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBhcnJheSBkYXRhIGluIHRoZSBpbnRlcmxlYXZlZCBidWZmZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KFR5cGVkQXJyYXl8QXJyYXkpfSB2YWx1ZSAtIFRoZSBhcnJheSBkYXRhIHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBUaGUgb2Zmc2V0IGluIHRoaXMgaW50ZXJsZWF2ZWQgYnVmZmVyJ3MgYXJyYXkuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0KCB2YWx1ZSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdHRoaXMuYXJyYXkuc2V0KCB2YWx1ZSwgb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgaW50ZXJsZWF2ZWQgYnVmZmVyIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV0gLSBBbiBvYmplY3Qgd2l0aCBzaGFyZWQgYXJyYXkgYnVmZmVycyB0aGF0IGFsbG93cyB0byByZXRhaW4gc2hhcmVkIHN0cnVjdHVyZXMuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSggZGF0YSApIHtcblxuXHRcdGlmICggZGF0YS5hcnJheUJ1ZmZlcnMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZGF0YS5hcnJheUJ1ZmZlcnMgPSB7fTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5hcnJheS5idWZmZXIuX3V1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5hcnJheUJ1ZmZlcnNbIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZGF0YS5hcnJheUJ1ZmZlcnNbIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkIF0gPSB0aGlzLmFycmF5LnNsaWNlKCAwICkuYnVmZmVyO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXJyYXkgPSBuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3RvciggZGF0YS5hcnJheUJ1ZmZlcnNbIHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkIF0gKTtcblxuXHRcdGNvbnN0IGliID0gbmV3IHRoaXMuY29uc3RydWN0b3IoIGFycmF5LCB0aGlzLnN0cmlkZSApO1xuXHRcdGliLnNldFVzYWdlKCB0aGlzLnVzYWdlICk7XG5cblx0XHRyZXR1cm4gaWI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIHRoZSBSZW5kZXJlciBoYXMgdHJhbnNmZXJyZWRcblx0ICogdGhlIGFycmF5IGRhdGEgdG8gdGhlIEdQVS4gQ2FuIGJlIHVzZWQgdG8gcGVyZm9ybSBjbGVhbi11cCBvcGVyYXRpb25zIGFmdGVyXG5cdCAqIHRoZSB1cGxvYWQgd2hlbiBkYXRhIGFyZSBub3QgbmVlZGVkIGFueW1vcmUgb24gdGhlIENQVSBzaWRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBgb25VcGxvYWQoKWAgY2FsbGJhY2suXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0b25VcGxvYWQoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIGludGVybGVhdmVkIGJ1ZmZlciBpbnRvIEpTT04uXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV0gLSBBbiBvcHRpb25hbCB2YWx1ZSBob2xkaW5nIG1ldGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlcmlhbGl6YXRpb24uXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuXHQgKi9cblx0dG9KU09OKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVycyA9IHt9O1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgVVVJRCBmb3IgYXJyYXkgYnVmZmVyIGlmIG5lY2Vzc2FyeVxuXG5cdFx0aWYgKCB0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmFycmF5LmJ1ZmZlci5fdXVpZCA9IGdlbmVyYXRlVVVJRCgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkYXRhLmFycmF5QnVmZmVyc1sgdGhpcy5hcnJheS5idWZmZXIuX3V1aWQgXSA9IEFycmF5LmZyb20oIG5ldyBVaW50MzJBcnJheSggdGhpcy5hcnJheS5idWZmZXIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdHJldHVybiB7XG5cdFx0XHR1dWlkOiB0aGlzLnV1aWQsXG5cdFx0XHRidWZmZXI6IHRoaXMuYXJyYXkuYnVmZmVyLl91dWlkLFxuXHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0c3RyaWRlOiB0aGlzLnN0cmlkZVxuXHRcdH07XG5cblx0fVxuXG59XG5cbmNvbnN0IF92ZWN0b3IkNyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB2ZXJzaW9uIG9mIGEgYnVmZmVyIGF0dHJpYnV0ZSB3aXRoIGludGVybGVhdmVkIGRhdGEuIEludGVybGVhdmVkXG4gKiBhdHRyaWJ1dGVzIHNoYXJlIGEgY29tbW9uIGludGVybGVhdmVkIGRhdGEgc3RvcmFnZSAoe0BsaW5rIEludGVybGVhdmVkQnVmZmVyfSkgYW5kIHJlZmVyIHdpdGhcbiAqIGRpZmZlcmVudCBvZmZzZXRzIGludG8gdGhlIGJ1ZmZlci5cbiAqL1xuY2xhc3MgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGludGVybGVhdmVkIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SW50ZXJsZWF2ZWRCdWZmZXJ9IGludGVybGVhdmVkQnVmZmVyIC0gVGhlIGJ1ZmZlciBob2xkaW5nIHRoZSBpbnRlcmxlYXZlZCBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IC0gVGhlIGF0dHJpYnV0ZSBvZmZzZXQgaW50byB0aGUgYnVmZmVyLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGludGVybGVhdmVkQnVmZmVyLCBpdGVtU2l6ZSwgb2Zmc2V0LCBub3JtYWxpemVkID0gZmFsc2UgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMubmFtZSA9ICcnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJ1ZmZlciBob2xkaW5nIHRoZSBpbnRlcmxlYXZlZCBkYXRhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0ludGVybGVhdmVkQnVmZmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGl0ZW0gc2l6ZSwgc2VlIHtAbGluayBCdWZmZXJBdHRyaWJ1dGUjaXRlbVNpemV9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXR0cmlidXRlIG9mZnNldCBpbnRvIHRoZSBidWZmZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgZGF0YSBhcmUgbm9ybWFsaXplZCBvciBub3QsIHNlZSB7QGxpbmsgQnVmZmVyQXR0cmlidXRlI25vcm1hbGl6ZWR9XG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7SW50ZXJsZWF2ZWRCdWZmZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBpdGVtIGNvdW50IG9mIHRoaXMgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHJlYWRvbmx5XG5cdCAqL1xuXHRnZXQgY291bnQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmNvdW50O1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGFycmF5IGhvbGRpbmcgdGhlIGludGVybGVhdmVkIGJ1ZmZlciBhdHRyaWJ1dGUgZGF0YS5cblx0ICpcblx0ICogQHR5cGUge1R5cGVkQXJyYXl9XG5cdCAqL1xuXHRnZXQgYXJyYXkoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5O1xuXG5cdH1cblxuXHQvKipcblx0ICogRmxhZyB0byBpbmRpY2F0ZSB0aGF0IHRoaXMgYXR0cmlidXRlIGhhcyBjaGFuZ2VkIGFuZCBzaG91bGQgYmUgcmUtc2VudCB0b1xuXHQgKiB0aGUgR1BVLiBTZXQgdGhpcyB0byBgdHJ1ZWAgd2hlbiB5b3UgbW9kaWZ5IHRoZSB2YWx1ZSBvZiB0aGUgYXJyYXkuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcblx0ICovXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRhdGEubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIGdpdmVuIDR4NCBtYXRyaXggdG8gdGhlIGdpdmVuIGF0dHJpYnV0ZS4gT25seSB3b3JrcyB3aXRoXG5cdCAqIGl0ZW0gc2l6ZSBgM2AuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXggdG8gYXBwbHkuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YXBwbHlNYXRyaXg0KCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5kYXRhLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ3LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ3LmFwcGx5TWF0cml4NCggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ3LngsIF92ZWN0b3IkNy55LCBfdmVjdG9yJDcueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSBnaXZlbiAzeDMgbm9ybWFsIG1hdHJpeCB0byB0aGUgZ2l2ZW4gYXR0cmlidXRlLiBPbmx5IHdvcmtzIHdpdGhcblx0ICogaXRlbSBzaXplIGAzYC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXgzfSBtIC0gVGhlIG5vcm1hbCBtYXRyaXggdG8gYXBwbHkuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0YXBwbHlOb3JtYWxNYXRyaXgoIG0gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQ3LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHRoaXMsIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ3LmFwcGx5Tm9ybWFsTWF0cml4KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDcueCwgX3ZlY3RvciQ3LnksIF92ZWN0b3IkNy56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIGdpdmVuIDR4NCBtYXRyaXggdG8gdGhlIGdpdmVuIGF0dHJpYnV0ZS4gT25seSB3b3JrcyB3aXRoXG5cdCAqIGl0ZW0gc2l6ZSBgM2AgYW5kIHdpdGggZGlyZWN0aW9uIHZlY3RvcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbSAtIFRoZSBtYXRyaXggdG8gYXBwbHkuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0dHJhbnNmb3JtRGlyZWN0aW9uKCBtICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNy5mcm9tQnVmZmVyQXR0cmlidXRlKCB0aGlzLCBpICk7XG5cblx0XHRcdF92ZWN0b3IkNy50cmFuc2Zvcm1EaXJlY3Rpb24oIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkNy54LCBfdmVjdG9yJDcueSwgX3ZlY3RvciQ3LnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZ2l2ZW4gY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGNvbXBvbmVudCAtIFRoZSBjb21wb25lbnQgaW5kZXguXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHJldHVybmVkIHZhbHVlLlxuXHQgKi9cblx0Z2V0Q29tcG9uZW50KCBpbmRleCwgY29tcG9uZW50ICkge1xuXG5cdFx0bGV0IHZhbHVlID0gdGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyBjb21wb25lbnQgXTtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgdmFsdWUgPSBkZW5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHJldHVybiB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIHZhbHVlIHRvIHRoZSBnaXZlbiBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY29tcG9uZW50IC0gVGhlIGNvbXBvbmVudCBpbmRleC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRDb21wb25lbnQoIGluZGV4LCBjb21wb25lbnQsIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB2YWx1ZSA9IG5vcm1hbGl6ZSggdmFsdWUsIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyBjb21wb25lbnQgXSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRYKCBpbmRleCwgeCApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgeSBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0WSggaW5kZXgsIHkgKSB7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB6IC0gVGhlIHZhbHVlIHRvIHNldC5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRaKCBpbmRleCwgeiApIHtcblxuXHRcdGlmICggdGhpcy5ub3JtYWxpemVkICkgeiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHcgLSBUaGUgdmFsdWUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldFcoIGluZGV4LCB3ICkge1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB3ID0gbm9ybWFsaXplKCB3LCB0aGlzLmFycmF5ICk7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgeCBjb21wb25lbnQgb2YgdGhlIHZlY3RvciBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBpbnRvIHRoZSBidWZmZXIgYXR0cmlidXRlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB4IGNvbXBvbmVudC5cblx0ICovXG5cdGdldFgoIGluZGV4ICkge1xuXG5cdFx0bGV0IHggPSB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHggPSBkZW5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHg7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHkgY29tcG9uZW50LlxuXHQgKi9cblx0Z2V0WSggaW5kZXggKSB7XG5cblx0XHRsZXQgeSA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHkgPSBkZW5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHogY29tcG9uZW50LlxuXHQgKi9cblx0Z2V0WiggaW5kZXggKSB7XG5cblx0XHRsZXQgeiA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHogPSBkZW5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHo7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB3IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHcgY29tcG9uZW50LlxuXHQgKi9cblx0Z2V0VyggaW5kZXggKSB7XG5cblx0XHRsZXQgdyA9IHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF07XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHcgPSBkZW5vcm1hbGl6ZSggdywgdGhpcy5hcnJheSApO1xuXG5cdFx0cmV0dXJuIHc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB4IGFuZCB5IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIGZvciB0aGUgeCBjb21wb25lbnQgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSBmb3IgdGhlIHkgY29tcG9uZW50IHRvIHNldC5cblx0ICogQHJldHVybiB7SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRYWSggaW5kZXgsIHgsIHkgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSB4LCB5IGFuZCB6IGNvbXBvbmVudCBvZiB0aGUgdmVjdG9yIGF0IHRoZSBnaXZlbiBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IGludG8gdGhlIGJ1ZmZlciBhdHRyaWJ1dGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHZhbHVlIGZvciB0aGUgeCBjb21wb25lbnQgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSBmb3IgdGhlIHkgY29tcG9uZW50IHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgdmFsdWUgZm9yIHRoZSB6IGNvbXBvbmVudCB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0WFlaKCBpbmRleCwgeCwgeSwgeiApIHtcblxuXHRcdGluZGV4ID0gaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHRpZiAoIHRoaXMubm9ybWFsaXplZCApIHtcblxuXHRcdFx0eCA9IG5vcm1hbGl6ZSggeCwgdGhpcy5hcnJheSApO1xuXHRcdFx0eSA9IG5vcm1hbGl6ZSggeSwgdGhpcy5hcnJheSApO1xuXHRcdFx0eiA9IG5vcm1hbGl6ZSggeiwgdGhpcy5hcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDAgXSA9IHg7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHgsIHksIHogYW5kIHcgY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgYXQgdGhlIGdpdmVuIGluZGV4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW50byB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgdmFsdWUgZm9yIHRoZSB4IGNvbXBvbmVudCB0byBzZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHZhbHVlIGZvciB0aGUgeSBjb21wb25lbnQgdG8gc2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB2YWx1ZSBmb3IgdGhlIHogY29tcG9uZW50IHRvIHNldC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHcgLSBUaGUgdmFsdWUgZm9yIHRoZSB3IGNvbXBvbmVudCB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0WFlaVyggaW5kZXgsIHgsIHksIHosIHcgKSB7XG5cblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdHggPSBub3JtYWxpemUoIHgsIHRoaXMuYXJyYXkgKTtcblx0XHRcdHkgPSBub3JtYWxpemUoIHksIHRoaXMuYXJyYXkgKTtcblx0XHRcdHogPSBub3JtYWxpemUoIHosIHRoaXMuYXJyYXkgKTtcblx0XHRcdHcgPSBub3JtYWxpemUoIHcsIHRoaXMuYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogSWYgbm8gcGFyYW1ldGVyIGlzIHByb3ZpZGVkLCBjbG9uaW5nIGFuIGludGVybGVhdmVkIGJ1ZmZlciBhdHRyaWJ1dGUgd2lsbCBkZS1pbnRlcmxlYXZlIGJ1ZmZlciBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW2RhdGFdIC0gQW4gb2JqZWN0IHdpdGggaW50ZXJsZWF2ZWQgYnVmZmVycyB0aGF0IGFsbG93cyB0byByZXRhaW4gdGhlIGludGVybGVhdmVkIHByb3BlcnR5LlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV8SW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUuY2xvbmUoKTogQ2xvbmluZyBhbiBpbnRlcmxlYXZlZCBidWZmZXIgYXR0cmlidXRlIHdpbGwgZGUtaW50ZXJsZWF2ZSBidWZmZXIgZGF0YS4nICk7XG5cblx0XHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXggPSBpICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHRoaXMuaXRlbVNpemU7IGogKysgKSB7XG5cblx0XHRcdFx0XHRhcnJheS5wdXNoKCB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgaiBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgdGhpcy5hcnJheS5jb25zdHJ1Y3RvciggYXJyYXkgKSwgdGhpcy5pdGVtU2l6ZSwgdGhpcy5ub3JtYWxpemVkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnMgPSB7fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGF0YS5pbnRlcmxlYXZlZEJ1ZmZlcnNbIHRoaXMuZGF0YS51dWlkIF0gPSB0aGlzLmRhdGEuY2xvbmUoIGRhdGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSwgdGhpcy5pdGVtU2l6ZSwgdGhpcy5vZmZzZXQsIHRoaXMubm9ybWFsaXplZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGUgYnVmZmVyIGF0dHJpYnV0ZSBpbnRvIEpTT04uXG5cdCAqXG5cdCAqIElmIG5vIHBhcmFtZXRlciBpcyBwcm92aWRlZCwgY2xvbmluZyBhbiBpbnRlcmxlYXZlZCBidWZmZXIgYXR0cmlidXRlIHdpbGwgZGUtaW50ZXJsZWF2ZSBidWZmZXIgZGF0YS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IFtkYXRhXSAtIEFuIG9wdGlvbmFsIHZhbHVlIGhvbGRpbmcgbWV0YSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc2VyaWFsaXphdGlvbi5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKi9cblx0dG9KU09OKCBkYXRhICkge1xuXG5cdFx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUudG9KU09OKCk6IFNlcmlhbGl6aW5nIGFuIGludGVybGVhdmVkIGJ1ZmZlciBhdHRyaWJ1dGUgd2lsbCBkZS1pbnRlcmxlYXZlIGJ1ZmZlciBkYXRhLicgKTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbmRleCA9IGkgKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgdGhpcy5pdGVtU2l6ZTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5LnB1c2goIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyBqIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZGUtaW50ZXJsZWF2ZSBkYXRhIGFuZCBzYXZlIGl0IGFzIGFuIG9yZGluYXJ5IGJ1ZmZlciBhdHRyaWJ1dGUgZm9yIG5vd1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcblx0XHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0XHRhcnJheTogYXJyYXksXG5cdFx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHNhdmUgYXMgdHJ1ZSBpbnRlcmxlYXZlZCBhdHRyaWJ1dGVcblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVycyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzID0ge307XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBkYXRhLmludGVybGVhdmVkQnVmZmVyc1sgdGhpcy5kYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRhdGEuaW50ZXJsZWF2ZWRCdWZmZXJzWyB0aGlzLmRhdGEudXVpZCBdID0gdGhpcy5kYXRhLnRvSlNPTiggZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cdFx0XHRcdGl0ZW1TaXplOiB0aGlzLml0ZW1TaXplLFxuXHRcdFx0XHRkYXRhOiB0aGlzLmRhdGEudXVpZCxcblx0XHRcdFx0b2Zmc2V0OiB0aGlzLm9mZnNldCxcblx0XHRcdFx0bm9ybWFsaXplZDogdGhpcy5ub3JtYWxpemVkXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgbWF0ZXJpYWwgZm9yIHJlbmRlcmluZyBpbnN0YW5jZXMgb2Yge0BsaW5rIFNwcml0ZX0uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1hcCA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCggJ3RleHR1cmVzL3Nwcml0ZS5wbmcnICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TcHJpdGVNYXRlcmlhbCggeyBtYXA6IG1hcCwgY29sb3I6IDB4ZmZmZmZmIH0gKTtcbiAqXG4gKiBjb25zdCBzcHJpdGUgPSBuZXcgVEhSRUUuU3ByaXRlKCBtYXRlcmlhbCApO1xuICogc3ByaXRlLnNjYWxlLnNldCgyMDAsIDIwMCwgMSlcbiAqIHNjZW5lLmFkZCggc3ByaXRlICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTWF0ZXJpYWxcbiAqL1xuY2xhc3MgU3ByaXRlTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3ByaXRlIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gQW4gb2JqZWN0IHdpdGggb25lIG9yIG1vcmUgcHJvcGVydGllc1xuXHQgKiBkZWZpbmluZyB0aGUgbWF0ZXJpYWwncyBhcHBlYXJhbmNlLiBBbnkgcHJvcGVydHkgb2YgdGhlIG1hdGVyaWFsXG5cdCAqIChpbmNsdWRpbmcgYW55IHByb3BlcnR5IGZyb20gaW5oZXJpdGVkIG1hdGVyaWFscykgY2FuIGJlIHBhc3NlZFxuXHQgKiBpbiBoZXJlLiBDb2xvciB2YWx1ZXMgY2FuIGJlIHBhc3NlZCBhbnkgdHlwZSBvZiB2YWx1ZSBhY2NlcHRlZFxuXHQgKiBieSB7QGxpbmsgQ29sb3Ijc2V0fS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTcHJpdGVNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3ByaXRlTWF0ZXJpYWwnO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29sb3Igb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NvbG9yfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbG9yIG1hcC4gTWF5IG9wdGlvbmFsbHkgaW5jbHVkZSBhbiBhbHBoYSBjaGFubmVsLCB0eXBpY2FsbHkgY29tYmluZWRcblx0XHQgKiB3aXRoIHtAbGluayBNYXRlcmlhbCN0cmFuc3BhcmVudH0gb3Ige0BsaW5rIE1hdGVyaWFsI2FscGhhVGVzdH0uIFRoZSB0ZXh0dXJlIG1hcFxuXHRcdCAqIGNvbG9yIGlzIG1vZHVsYXRlZCBieSB0aGUgZGlmZnVzZSBgY29sb3JgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWxwaGEgbWFwIGlzIGEgZ3JheXNjYWxlIHRleHR1cmUgdGhhdCBjb250cm9scyB0aGUgb3BhY2l0eSBhY3Jvc3MgdGhlXG5cdFx0ICogc3VyZmFjZSAoYmxhY2s6IGZ1bGx5IHRyYW5zcGFyZW50OyB3aGl0ZTogZnVsbHkgb3BhcXVlKS5cblx0XHQgKlxuXHRcdCAqIE9ubHkgdGhlIGNvbG9yIG9mIHRoZSB0ZXh0dXJlIGlzIHVzZWQsIGlnbm9yaW5nIHRoZSBhbHBoYSBjaGFubmVsIGlmIG9uZVxuXHRcdCAqIGV4aXN0cy4gRm9yIFJHQiBhbmQgUkdCQSB0ZXh0dXJlcywgdGhlIHJlbmRlcmVyIHdpbGwgdXNlIHRoZSBncmVlbiBjaGFubmVsXG5cdFx0ICogd2hlbiBzYW1wbGluZyB0aGlzIHRleHR1cmUgZHVlIHRvIHRoZSBleHRyYSBiaXQgb2YgcHJlY2lzaW9uIHByb3ZpZGVkIGZvclxuXHRcdCAqIGdyZWVuIGluIERYVC1jb21wcmVzc2VkIGFuZCB1bmNvbXByZXNzZWQgUkdCIDU2NSBmb3JtYXRzLiBMdW1pbmFuY2Utb25seSBhbmRcblx0XHQgKiBsdW1pbmFuY2UvYWxwaGEgdGV4dHVyZXMgd2lsbCBhbHNvIHN0aWxsIHdvcmsgYXMgZXhwZWN0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJvdGF0aW9uIG9mIHRoZSBzcHJpdGUgaW4gcmFkaWFucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMucm90YXRpb24gPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogU3BlY2lmaWVzIHdoZXRoZXIgc2l6ZSBvZiB0aGUgc3ByaXRlIGlzIGF0dGVudWF0ZWQgYnkgdGhlIGNhbWVyYSBkZXB0aCAocGVyc3BlY3RpdmUgY2FtZXJhIG9ubHkpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJ3cml0dGVuIHNpbmNlIHNwcml0ZSBtYXRlcmlhbHMgYXJlIHRyYW5zcGFyZW50XG5cdFx0ICogYnkgZGVmYXVsdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0XHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XG5cblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxubGV0IF9nZW9tZXRyeTtcblxuY29uc3QgX2ludGVyc2VjdFBvaW50ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3dvcmxkU2NhbGUgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbXZQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuY29uc3QgX2FsaWduZWRQb3NpdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcbmNvbnN0IF9yb3RhdGVkUG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdmlld1dvcmxkTWF0cml4ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuXG5jb25zdCBfdkEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdkMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF91dkEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5jb25zdCBfdXZCID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMigpO1xuY29uc3QgX3V2QyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoKTtcblxuLyoqXG4gKiBBIHNwcml0ZSBpcyBhIHBsYW5lIHRoYXQgYWx3YXlzIGZhY2VzIHRvd2FyZHMgdGhlIGNhbWVyYSwgZ2VuZXJhbGx5IHdpdGggYVxuICogcGFydGlhbGx5IHRyYW5zcGFyZW50IHRleHR1cmUgYXBwbGllZC5cbiAqXG4gKiBTcHJpdGVzIGRvIG5vdCBjYXN0IHNoYWRvd3MsIHNldHRpbmcge0BsaW5rIE9iamVjdDNEI2Nhc3RTaGFkb3d9IHRvIGB0cnVlYCB3aWxsXG4gKiBoYXZlIG5vIGVmZmVjdC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbWFwID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCAnc3ByaXRlLnBuZycgKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlNwcml0ZU1hdGVyaWFsKCB7IG1hcDogbWFwIH0gKTtcbiAqXG4gKiBjb25zdCBzcHJpdGUgPSBuZXcgVEhSRUUuU3ByaXRlKCBtYXRlcmlhbCApO1xuICogc2NlbmUuYWRkKCBzcHJpdGUgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBTcHJpdGUgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3ByaXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1Nwcml0ZU1hdGVyaWFsfSBbbWF0ZXJpYWxdIC0gVGhlIHNwcml0ZSBtYXRlcmlhbC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtYXRlcmlhbCA9IG5ldyBTcHJpdGVNYXRlcmlhbCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNTcHJpdGUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1Nwcml0ZSc7XG5cblx0XHRpZiAoIF9nZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRfZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdFx0Y29uc3QgZmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggW1xuXHRcdFx0XHQtMC41LCAtMC41LCAwLCAwLCAwLFxuXHRcdFx0XHQwLjUsIC0wLjUsIDAsIDEsIDAsXG5cdFx0XHRcdDAuNSwgMC41LCAwLCAxLCAxLFxuXHRcdFx0XHQtMC41LCAwLjUsIDAsIDAsIDFcblx0XHRcdF0gKTtcblxuXHRcdFx0Y29uc3QgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGZsb2F0MzJBcnJheSwgNSApO1xuXG5cdFx0XHRfZ2VvbWV0cnkuc2V0SW5kZXgoIFsgMCwgMSwgMixcdDAsIDIsIDMgXSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMywgMCwgZmFsc2UgKSApO1xuXHRcdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xuXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNwcml0ZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtCdWZmZXJHZW9tZXRyeX1cblx0XHQgKi9cblx0XHR0aGlzLmdlb21ldHJ5ID0gX2dlb21ldHJ5O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHNwcml0ZSBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtTcHJpdGVNYXRlcmlhbH1cblx0XHQgKi9cblx0XHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3ByaXRlJ3MgYW5jaG9yIHBvaW50LCBhbmQgdGhlIHBvaW50IGFyb3VuZCB3aGljaCB0aGUgc3ByaXRlIHJvdGF0ZXMuXG5cdFx0ICogQSB2YWx1ZSBvZiBgKDAuNSwgMC41KWAgY29ycmVzcG9uZHMgdG8gdGhlIG1pZHBvaW50IG9mIHRoZSBzcHJpdGUuIEEgdmFsdWVcblx0XHQgKiBvZiBgKDAsIDApYCBjb3JyZXNwb25kcyB0byB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHNwcml0ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqIEBkZWZhdWx0ICgwLjUsMC41KVxuXHRcdCAqL1xuXHRcdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBpbnRlcnNlY3Rpb24gcG9pbnRzIGJldHdlZW4gYSBjYXN0ZWQgcmF5IGFuZCB0aGlzIHNwcml0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtSYXljYXN0ZXJ9IHJheWNhc3RlciAtIFRoZSByYXljYXN0ZXIuXG5cdCAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gaW50ZXJzZWN0cyAtIFRoZSB0YXJnZXQgYXJyYXkgdGhhdCBob2xkcyB0aGUgaW50ZXJzZWN0aW9uIHBvaW50cy5cblx0ICovXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGlmICggcmF5Y2FzdGVyLmNhbWVyYSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwcml0ZTogXCJSYXljYXN0ZXIuY2FtZXJhXCIgbmVlZHMgdG8gYmUgc2V0IGluIG9yZGVyIHRvIHJheWNhc3QgYWdhaW5zdCBzcHJpdGVzLicgKTtcblxuXHRcdH1cblxuXHRcdF93b3JsZFNjYWxlLnNldEZyb21NYXRyaXhTY2FsZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0X3ZpZXdXb3JsZE1hdHJpeC5jb3B5KCByYXljYXN0ZXIuY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0dGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggcmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdF9tdlBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tb2RlbFZpZXdNYXRyaXggKTtcblxuXHRcdGlmICggcmF5Y2FzdGVyLmNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICYmIHRoaXMubWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID09PSBmYWxzZSApIHtcblxuXHRcdFx0X3dvcmxkU2NhbGUubXVsdGlwbHlTY2FsYXIoIC0gX212UG9zaXRpb24ueiApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3Qgcm90YXRpb24gPSB0aGlzLm1hdGVyaWFsLnJvdGF0aW9uO1xuXHRcdGxldCBzaW4sIGNvcztcblxuXHRcdGlmICggcm90YXRpb24gIT09IDAgKSB7XG5cblx0XHRcdGNvcyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdFx0c2luID0gTWF0aC5zaW4oIHJvdGF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcblxuXHRcdHRyYW5zZm9ybVZlcnRleCggX3ZBLnNldCggLTAuNSwgLTAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qi5zZXQoIDAuNSwgLTAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qy5zZXQoIDAuNSwgMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXG5cdFx0X3V2QS5zZXQoIDAsIDAgKTtcblx0XHRfdXZCLnNldCggMSwgMCApO1xuXHRcdF91dkMuc2V0KCAxLCAxICk7XG5cblx0XHQvLyBjaGVjayBmaXJzdCB0cmlhbmdsZVxuXHRcdGxldCBpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKCBfdkEsIF92QiwgX3ZDLCBmYWxzZSwgX2ludGVyc2VjdFBvaW50ICk7XG5cblx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgc2Vjb25kIHRyaWFuZ2xlXG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92Qi5zZXQoIC0wLjUsIDAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdF91dkIuc2V0KCAwLCAxICk7XG5cblx0XHRcdGludGVyc2VjdCA9IHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0VHJpYW5nbGUoIF92QSwgX3ZDLCBfdkIsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRcdGlmICggaW50ZXJzZWN0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0dXY6IFRyaWFuZ2xlLmdldEludGVycG9sYXRpb24oIF9pbnRlcnNlY3RQb2ludCwgX3ZBLCBfdkIsIF92QywgX3V2QSwgX3V2QiwgX3V2QywgbmV3IFZlY3RvcjIoKSApLFxuXHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRoaXMuY2VudGVyLmNvcHkoIHNvdXJjZS5jZW50ZXIgKTtcblxuXHRcdHRoaXMubWF0ZXJpYWwgPSBzb3VyY2UubWF0ZXJpYWw7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtVmVydGV4KCB2ZXJ0ZXhQb3NpdGlvbiwgbXZQb3NpdGlvbiwgY2VudGVyLCBzY2FsZSwgc2luLCBjb3MgKSB7XG5cblx0Ly8gY29tcHV0ZSBwb3NpdGlvbiBpbiBjYW1lcmEgc3BhY2Vcblx0X2FsaWduZWRQb3NpdGlvbi5zdWJWZWN0b3JzKCB2ZXJ0ZXhQb3NpdGlvbiwgY2VudGVyICkuYWRkU2NhbGFyKCAwLjUgKS5tdWx0aXBseSggc2NhbGUgKTtcblxuXHQvLyB0byBjaGVjayBpZiByb3RhdGlvbiBpcyBub3QgemVyb1xuXHRpZiAoIHNpbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0X3JvdGF0ZWRQb3NpdGlvbi54ID0gKCBjb3MgKiBfYWxpZ25lZFBvc2l0aW9uLnggKSAtICggc2luICogX2FsaWduZWRQb3NpdGlvbi55ICk7XG5cdFx0X3JvdGF0ZWRQb3NpdGlvbi55ID0gKCBzaW4gKiBfYWxpZ25lZFBvc2l0aW9uLnggKSArICggY29zICogX2FsaWduZWRQb3NpdGlvbi55ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdF9yb3RhdGVkUG9zaXRpb24uY29weSggX2FsaWduZWRQb3NpdGlvbiApO1xuXG5cdH1cblxuXG5cdHZlcnRleFBvc2l0aW9uLmNvcHkoIG12UG9zaXRpb24gKTtcblx0dmVydGV4UG9zaXRpb24ueCArPSBfcm90YXRlZFBvc2l0aW9uLng7XG5cdHZlcnRleFBvc2l0aW9uLnkgKz0gX3JvdGF0ZWRQb3NpdGlvbi55O1xuXG5cdC8vIHRyYW5zZm9ybSB0byB3b3JsZCBzcGFjZVxuXHR2ZXJ0ZXhQb3NpdGlvbi5hcHBseU1hdHJpeDQoIF92aWV3V29ybGRNYXRyaXggKTtcblxufVxuXG5jb25zdCBfdjEkMiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92MiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IGZvciBwcm92aWRpbmcgYSBiYXNpYyBMZXZlbCBvZiBEZXRhaWwgKExPRCkgbWVjaGFuaXNtLlxuICpcbiAqIEV2ZXJ5IExPRCBsZXZlbCBpcyBhc3NvY2lhdGVkIHdpdGggYW4gb2JqZWN0LCBhbmQgcmVuZGVyaW5nIGNhbiBiZSBzd2l0Y2hlZFxuICogYmV0d2VlbiB0aGVtIGF0IHRoZSBkaXN0YW5jZXMgc3BlY2lmaWVkLiBUeXBpY2FsbHkgeW91IHdvdWxkIGNyZWF0ZSwgc2F5LFxuICogdGhyZWUgbWVzaGVzLCBvbmUgZm9yIGZhciBhd2F5IChsb3cgZGV0YWlsKSwgb25lIGZvciBtaWQgcmFuZ2UgKG1lZGl1bVxuICogZGV0YWlsKSBhbmQgb25lIGZvciBjbG9zZSB1cCAoaGlnaCBkZXRhaWwpLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2QgPSBuZXcgVEhSRUUuTE9EKCk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuICpcbiAqIC8vQ3JlYXRlIHNwaGVyZXMgd2l0aCAzIGxldmVscyBvZiBkZXRhaWwgYW5kIGNyZWF0ZSBuZXcgTE9EIGxldmVscyBmb3IgdGhlbVxuICogZm9yKCBsZXQgaSA9IDA7IGkgPCAzOyBpKysgKSB7XG4gKlxuICogXHRjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KCAxMCwgMyAtIGkgKTtcbiAqIFx0Y29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIFx0bG9kLmFkZExldmVsKCBtZXNoLCBpICogNzUgKTtcbiAqXG4gKiB9XG4gKlxuICogc2NlbmUuYWRkKCBsb2QgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBMT0QgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgTE9ELlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0xPRCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VycmVudCBMT0QgaW5kZXguXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuX2N1cnJlbnRMZXZlbCA9IDA7XG5cblx0XHR0aGlzLnR5cGUgPSAnTE9EJztcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCB0aGlzLCB7XG5cdFx0XHQvKipcblx0XHRcdCAqIFRoaXMgYXJyYXkgaG9sZHMgdGhlIExPRCBsZXZlbHMuXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgTE9EI2xldmVsc1xuXHRcdFx0ICogQHR5cGUge0FycmF5PHtvYmplY3Q6T2JqZWN0M0QsZGlzdGFuY2U6bnVtYmVyLGh5c3RlcmVzaXM6bnVtYmVyfT59XG5cdFx0XHQgKi9cblx0XHRcdGxldmVsczoge1xuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHR2YWx1ZTogW11cblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBMT0Qgb2JqZWN0IGlzIHVwZGF0ZWQgYXV0b21hdGljYWxseSBieSB0aGUgcmVuZGVyZXIgcGVyIGZyYW1lXG5cdFx0ICogb3Igbm90LiBJZiBzZXQgdG8gYGZhbHNlYCwgeW91IGhhdmUgdG8gY2FsbCB7QGxpbmsgTE9EI3VwZGF0ZX0gaW4gdGhlXG5cdFx0ICogcmVuZGVyIGxvb3AgYnkgeW91cnNlbGYuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCBmYWxzZSApO1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gc291cmNlLmxldmVscztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmFkZExldmVsKCBsZXZlbC5vYmplY3QuY2xvbmUoKSwgbGV2ZWwuZGlzdGFuY2UsIGxldmVsLmh5c3RlcmVzaXMgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHNvdXJjZS5hdXRvVXBkYXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbWVzaCB0aGF0IHdpbGwgZGlzcGxheSBhdCBhIGNlcnRhaW4gZGlzdGFuY2UgYW5kIGdyZWF0ZXIuIFR5cGljYWxseVxuXHQgKiB0aGUgZnVydGhlciBhd2F5IHRoZSBkaXN0YW5jZSwgdGhlIGxvd2VyIHRoZSBkZXRhaWwgb24gdGhlIG1lc2guXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QgdG8gZGlzcGxheSBhdCB0aGlzIGxldmVsLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Rpc3RhbmNlPTBdIC0gVGhlIGRpc3RhbmNlIGF0IHdoaWNoIHRvIGRpc3BsYXkgdGhpcyBsZXZlbCBvZiBkZXRhaWwuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaHlzdGVyZXNpcz0wXSAtIFRocmVzaG9sZCB1c2VkIHRvIGF2b2lkIGZsaWNrZXJpbmcgYXQgTE9EIGJvdW5kYXJpZXMsIGFzIGEgZnJhY3Rpb24gb2YgZGlzdGFuY2UuXG5cdCAqIEByZXR1cm4ge0xPRH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGFkZExldmVsKCBvYmplY3QsIGRpc3RhbmNlID0gMCwgaHlzdGVyZXNpcyA9IDAgKSB7XG5cblx0XHRkaXN0YW5jZSA9IE1hdGguYWJzKCBkaXN0YW5jZSApO1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRsZXQgbDtcblxuXHRcdGZvciAoIGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IGxldmVsc1sgbCBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXZlbHMuc3BsaWNlKCBsLCAwLCB7IGRpc3RhbmNlOiBkaXN0YW5jZSwgaHlzdGVyZXNpczogaHlzdGVyZXNpcywgb2JqZWN0OiBvYmplY3QgfSApO1xuXG5cdFx0dGhpcy5hZGQoIG9iamVjdCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGFuIGV4aXN0aW5nIGxldmVsLCBiYXNlZCBvbiB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhLlxuXHQgKiBSZXR1cm5zIGB0cnVlYCB3aGVuIHRoZSBsZXZlbCBoYXMgYmVlbiByZW1vdmVkLiBPdGhlcndpc2UgYGZhbHNlYC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlIC0gRGlzdGFuY2Ugb2YgdGhlIGxldmVsIHRvIHJlbW92ZS5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgbGV2ZWwgaGFzIGJlZW4gcmVtb3ZlZCBvciBub3QuXG5cdCAqL1xuXHRyZW1vdmVMZXZlbCggZGlzdGFuY2UgKSB7XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggbGV2ZWxzWyBpIF0uZGlzdGFuY2UgPT09IGRpc3RhbmNlICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlbW92ZWRFbGVtZW50cyA9IGxldmVscy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0dGhpcy5yZW1vdmUoIHJlbW92ZWRFbGVtZW50c1sgMCBdLm9iamVjdCApO1xuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgYWN0aXZlIExPRCBsZXZlbCBpbmRleC5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCBhY3RpdmUgTE9EIGxldmVsIGluZGV4LlxuXHQgKi9cblx0Z2V0Q3VycmVudExldmVsKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRMZXZlbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIGZpcnN0IDNEIG9iamVjdCB0aGF0IGlzIGdyZWF0ZXIgdGhhblxuXHQgKiB0aGUgZ2l2ZW4gZGlzdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBMT0QgZGlzdGFuY2UuXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfG51bGx9IFRoZSBmb3VuZCAzRCBvYmplY3QuIGBudWxsYCBpZiBubyAzRCBvYmplY3QgaGFzIGJlZW4gZm91bmQuXG5cdCAqL1xuXHRnZXRPYmplY3RGb3JEaXN0YW5jZSggZGlzdGFuY2UgKSB7XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGxldCBpLCBsO1xuXG5cdFx0XHRmb3IgKCBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBsZXZlbERpc3RhbmNlID0gbGV2ZWxzWyBpIF0uZGlzdGFuY2U7XG5cblx0XHRcdFx0aWYgKCBsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdGxldmVsRGlzdGFuY2UgLT0gbGV2ZWxEaXN0YW5jZSAqIGxldmVsc1sgaSBdLmh5c3RlcmVzaXM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGlzdGFuY2UgPCBsZXZlbERpc3RhbmNlICkge1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsZXZlbHNbIGkgLSAxIF0ub2JqZWN0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBpbnRlcnNlY3Rpb24gcG9pbnRzIGJldHdlZW4gYSBjYXN0ZWQgcmF5IGFuZCB0aGlzIExPRC5cblx0ICpcblx0ICogQHBhcmFtIHtSYXljYXN0ZXJ9IHJheWNhc3RlciAtIFRoZSByYXljYXN0ZXIuXG5cdCAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gaW50ZXJzZWN0cyAtIFRoZSB0YXJnZXQgYXJyYXkgdGhhdCBob2xkcyB0aGUgaW50ZXJzZWN0aW9uIHBvaW50cy5cblx0ICovXG5cdHJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGNvbnN0IGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0aWYgKCBsZXZlbHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0X3YxJDIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggX3YxJDIgKTtcblxuXHRcdFx0dGhpcy5nZXRPYmplY3RGb3JEaXN0YW5jZSggZGlzdGFuY2UgKS5yYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIExPRCBieSBjb21wdXRpbmcgd2hpY2ggTE9EIGxldmVsIHNob3VsZCBiZSB2aXNpYmxlIGFjY29yZGluZ1xuXHQgKiB0byB0aGUgY3VycmVudCBkaXN0YW5jZSBvZiB0aGUgZ2l2ZW4gY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NhbWVyYX0gY2FtZXJhIC0gVGhlIGNhbWVyYSB0aGUgc2NlbmUgaXMgcmVuZGVyZWQgd2l0aC5cblx0ICovXG5cdHVwZGF0ZSggY2FtZXJhICkge1xuXG5cdFx0Y29uc3QgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRpZiAoIGxldmVscy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRfdjEkMi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0X3YyJDEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gX3YxJDIuZGlzdGFuY2VUbyggX3YyJDEgKSAvIGNhbWVyYS56b29tO1xuXG5cdFx0XHRsZXZlbHNbIDAgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdGxldCBpLCBsO1xuXG5cdFx0XHRmb3IgKCBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBsZXZlbERpc3RhbmNlID0gbGV2ZWxzWyBpIF0uZGlzdGFuY2U7XG5cblx0XHRcdFx0aWYgKCBsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdGxldmVsRGlzdGFuY2UgLT0gbGV2ZWxEaXN0YW5jZSAqIGxldmVsc1sgaSBdLmh5c3RlcmVzaXM7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGlzdGFuY2UgPj0gbGV2ZWxEaXN0YW5jZSApIHtcblxuXHRcdFx0XHRcdGxldmVsc1sgaSAtIDEgXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2N1cnJlbnRMZXZlbCA9IGkgLSAxO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldmVsc1sgaSBdLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9VcGRhdGUgPT09IGZhbHNlICkgZGF0YS5vYmplY3QuYXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0ZGF0YS5vYmplY3QubGV2ZWxzID0gW107XG5cblx0XHRjb25zdCBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgaSBdO1xuXG5cdFx0XHRkYXRhLm9iamVjdC5sZXZlbHMucHVzaCgge1xuXHRcdFx0XHRvYmplY3Q6IGxldmVsLm9iamVjdC51dWlkLFxuXHRcdFx0XHRkaXN0YW5jZTogbGV2ZWwuZGlzdGFuY2UsXG5cdFx0XHRcdGh5c3RlcmVzaXM6IGxldmVsLmh5c3RlcmVzaXNcblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG5jb25zdCBfYmFzZVBvc2l0aW9uID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfc2tpbkluZGV4ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yNCgpO1xuY29uc3QgX3NraW5XZWlnaHQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3I0KCk7XG5cbmNvbnN0IF92ZWN0b3IzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX21hdHJpeDQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfdmVydGV4ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG5jb25zdCBfc3BoZXJlJDUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcbmNvbnN0IF9pbnZlcnNlTWF0cml4JDIgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcmF5JDIgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcblxuLyoqXG4gKiBBIG1lc2ggdGhhdCBoYXMgYSB7QGxpbmsgU2tlbGV0b259IHRoYXQgY2FuIHRoZW4gYmUgdXNlZCB0byBhbmltYXRlIHRoZVxuICogdmVydGljZXMgb2YgdGhlIGdlb21ldHJ5IHdpdGggc2tpbm5pbmcvc2tlbGV0b24gYW5pbWF0aW9uLlxuICpcbiAqIE5leHQgdG8gYSB2YWxpZCBza2VsZXRvbiwgdGhlIHNraW5uZWQgbWVzaCByZXF1aXJlcyBza2luIGluZGljZXMgYW5kIHdlaWdodHNcbiAqIGFzIGJ1ZmZlciBhdHRyaWJ1dGVzIGluIGl0cyBnZW9tZXRyeS4gVGhlc2UgYXR0cmlidXRlIGRlZmluZSB3aGljaCBib25lcyBhZmZlY3QgYSBzaW5nbGVcbiAqIHZlcnRleCB0byBhIGNlcnRhaW4gZXh0ZW5kLlxuICpcbiAqIFR5cGljYWxseSBza2lubmVkIG1lc2hlcyBhcmUgbm90IGNyZWF0ZWQgbWFudWFsbHkgYnV0IGxvYWRlcnMgbGlrZSB7QGxpbmsgR0xURkxvYWRlcn1cbiAqIG9yIHtAbGluayBGQlhMb2FkZXIgfSBpbXBvcnQgcmVzcGVjdGl2ZSBtb2RlbHMuXG4gKlxuICogQGF1Z21lbnRzIE1lc2hcbiAqL1xuY2xhc3MgU2tpbm5lZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBza2lubmVkIG1lc2guXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IFtnZW9tZXRyeV0gLSBUaGUgbWVzaCBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbHxBcnJheTxNYXRlcmlhbD59IFttYXRlcmlhbF0gLSBUaGUgbWVzaCBtYXRlcmlhbC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU2tpbm5lZE1lc2ggPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJztcblxuXHRcdC8qKlxuXHRcdCAqIGBBdHRhY2hlZEJpbmRNb2RlYCBtZWFucyB0aGUgc2tpbm5lZCBtZXNoIHNoYXJlcyB0aGUgc2FtZSB3b3JsZCBzcGFjZSBhcyB0aGUgc2tlbGV0b24uXG5cdFx0ICogVGhpcyBpcyBub3QgdHJ1ZSB3aGVuIHVzaW5nIGBEZXRhY2hlZEJpbmRNb2RlYCB3aGljaCBpcyB1c2VmdWwgd2hlbiBzaGFyaW5nIGEgc2tlbGV0b25cblx0XHQgKiBhY3Jvc3MgbXVsdGlwbGUgc2tpbm5lZCBtZXNoZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KEF0dGFjaGVkQmluZE1vZGV8RGV0YWNoZWRCaW5kTW9kZSl9XG5cdFx0ICogQGRlZmF1bHQgQXR0YWNoZWRCaW5kTW9kZVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZE1vZGUgPSBBdHRhY2hlZEJpbmRNb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJhc2UgbWF0cml4IHRoYXQgaXMgdXNlZCBmb3IgdGhlIGJvdW5kIGJvbmUgdHJhbnNmb3Jtcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXRyaXg0fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYmFzZSBtYXRyaXggdGhhdCBpcyB1c2VkIGZvciByZXNldHRpbmcgdGhlIGJvdW5kIGJvbmUgdHJhbnNmb3Jtcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXRyaXg0fVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgc2tpbm5lZCBtZXNoLiBDYW4gYmUgY29tcHV0ZWQgdmlhIHtAbGluayBTa2lubmVkTWVzaCNjb21wdXRlQm91bmRpbmdCb3h9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Cb3gzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBib3VuZGluZyBzcGhlcmUgb2YgdGhlIHNraW5uZWQgbWVzaC4gQ2FuIGJlIGNvbXB1dGVkIHZpYSB7QGxpbmsgU2tpbm5lZE1lc2gjY29tcHV0ZUJvdW5kaW5nU3BoZXJlfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/U3BoZXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIHNraW5uZWQgbWVzaCwgYW5kIHVwZGF0ZXMge0BsaW5rIFNraW5uZWRNZXNoI2JvdW5kaW5nQm94fS5cblx0ICogVGhlIGJvdW5kaW5nIGJveCBpcyBub3QgYXV0b21hdGljYWxseSBjb21wdXRlZCBieSB0aGUgZW5naW5lOyB0aGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBieSB5b3VyIGFwcC5cblx0ICogSWYgdGhlIHNraW5uZWQgbWVzaCBpcyBhbmltYXRlZCwgdGhlIGJvdW5kaW5nIGJveCBzaG91bGQgYmUgcmVjb21wdXRlZCBwZXIgZnJhbWUgaW4gb3JkZXIgdG8gcmVmbGVjdFxuXHQgKiB0aGUgY3VycmVudCBhbmltYXRpb24gc3RhdGUuXG5cdCAqL1xuXHRjb21wdXRlQm91bmRpbmdCb3goKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5nZXRWZXJ0ZXhQb3NpdGlvbiggaSwgX3ZlcnRleCApO1xuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5leHBhbmRCeVBvaW50KCBfdmVydGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgYm91bmRpbmcgc3BoZXJlIG9mIHRoZSBza2lubmVkIG1lc2gsIGFuZCB1cGRhdGVzIHtAbGluayBTa2lubmVkTWVzaCNib3VuZGluZ1NwaGVyZX0uXG5cdCAqIFRoZSBib3VuZGluZyBzcGhlcmUgaXMgYXV0b21hdGljYWxseSBjb21wdXRlZCBieSB0aGUgZW5naW5lIG9uY2Ugd2hlbiBpdCBpcyBuZWVkZWQsIGUuZy4sIGZvciByYXkgY2FzdGluZ1xuXHQgKiBhbmQgdmlldyBmcnVzdHVtIGN1bGxpbmcuIElmIHRoZSBza2lubmVkIG1lc2ggaXMgYW5pbWF0ZWQsIHRoZSBib3VuZGluZyBzcGhlcmUgc2hvdWxkIGJlIHJlY29tcHV0ZWRcblx0ICogcGVyIGZyYW1lIGluIG9yZGVyIHRvIHJlZmxlY3QgdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlLlxuXHQgKi9cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5tYWtlRW1wdHkoKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5nZXRWZXJ0ZXhQb3NpdGlvbiggaSwgX3ZlcnRleCApO1xuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5leHBhbmRCeVBvaW50KCBfdmVydGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuYmluZE1vZGUgPSBzb3VyY2UuYmluZE1vZGU7XG5cdFx0dGhpcy5iaW5kTWF0cml4LmNvcHkoIHNvdXJjZS5iaW5kTWF0cml4ICk7XG5cdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5jb3B5KCBzb3VyY2UuYmluZE1hdHJpeEludmVyc2UgKTtcblxuXHRcdHRoaXMuc2tlbGV0b24gPSBzb3VyY2Uuc2tlbGV0b247XG5cblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3guY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHRoaXMuYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0aWYgKCBtYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIHNwaGVyZSBpbiB3b3JsZCBzcGFjZVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUkNS5jb3B5KCB0aGlzLmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZSQ1LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDUgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb252ZXJ0IHJheSB0byBsb2NhbCBzcGFjZSBvZiBza2lubmVkIG1lc2hcblxuXHRcdF9pbnZlcnNlTWF0cml4JDIuY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRfcmF5JDIuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXgkMiApO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIGJveCBpbiBsb2NhbCBzcGFjZVxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9yYXkkMi5pbnRlcnNlY3RzQm94KCB0aGlzLmJvdW5kaW5nQm94ICkgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdGVzdCBmb3IgaW50ZXJzZWN0aW9ucyB3aXRoIGdlb21ldHJ5XG5cblx0XHR0aGlzLl9jb21wdXRlSW50ZXJzZWN0aW9ucyggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCBfcmF5JDIgKTtcblxuXHR9XG5cblx0Z2V0VmVydGV4UG9zaXRpb24oIGluZGV4LCB0YXJnZXQgKSB7XG5cblx0XHRzdXBlci5nZXRWZXJ0ZXhQb3NpdGlvbiggaW5kZXgsIHRhcmdldCApO1xuXG5cdFx0dGhpcy5hcHBseUJvbmVUcmFuc2Zvcm0oIGluZGV4LCB0YXJnZXQgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBCaW5kcyB0aGUgZ2l2ZW4gc2tlbGV0b24gdG8gdGhlIHNraW5uZWQgbWVzaC5cblx0ICpcblx0ICogQHBhcmFtIHtTa2VsZXRvbn0gc2tlbGV0b24gLSBUaGUgc2tlbGV0b24gdG8gYmluZC5cblx0ICogQHBhcmFtIHtNYXRyaXg0fSBbYmluZE1hdHJpeF0gLSBUaGUgYmluZCBtYXRyaXguIElmIG5vIGJpbmQgbWF0cml4IGlzIHByb3ZpZGVkLFxuXHQgKiB0aGUgc2tpbm5lZCBtZXNoJ3Mgd29ybGQgbWF0cml4IHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuXHQgKi9cblx0YmluZCggc2tlbGV0b24sIGJpbmRNYXRyaXggKSB7XG5cblx0XHR0aGlzLnNrZWxldG9uID0gc2tlbGV0b247XG5cblx0XHRpZiAoIGJpbmRNYXRyaXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCggdHJ1ZSApO1xuXG5cdFx0XHR0aGlzLnNrZWxldG9uLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0XHRcdGJpbmRNYXRyaXggPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5iaW5kTWF0cml4LmNvcHkoIGJpbmRNYXRyaXggKTtcblx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmNvcHkoIGJpbmRNYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHNldHMgdGhlIHNraW5uZWQgbWVzaCBpbiB0aGUgcmVzdCBwb3NlKS5cblx0ICovXG5cdHBvc2UoKSB7XG5cblx0XHR0aGlzLnNrZWxldG9uLnBvc2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE5vcm1hbGl6ZXMgdGhlIHNraW4gd2VpZ2h0cyB3aGljaCBhcmUgZGVmaW5lZCBhcyBhIGJ1ZmZlciBhdHRyaWJ1dGVcblx0ICogaW4gdGhlIHNraW5uZWQgbWVzaCdzIGdlb21ldHJ5LlxuXHQgKi9cblx0bm9ybWFsaXplU2tpbldlaWdodHMoKSB7XG5cblx0XHRjb25zdCB2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3Qgc2tpbldlaWdodCA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2tpbldlaWdodC5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZlY3Rvci5mcm9tQnVmZmVyQXR0cmlidXRlKCBza2luV2VpZ2h0LCBpICk7XG5cblx0XHRcdGNvbnN0IHNjYWxlID0gMS4wIC8gdmVjdG9yLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdFx0XHRpZiAoIHNjYWxlICE9PSBJbmZpbml0eSApIHtcblxuXHRcdFx0XHR2ZWN0b3IubXVsdGlwbHlTY2FsYXIoIHNjYWxlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmVjdG9yLnNldCggMSwgMCwgMCwgMCApOyAvLyBkbyBzb21ldGhpbmcgcmVhc29uYWJsZVxuXG5cdFx0XHR9XG5cblx0XHRcdHNraW5XZWlnaHQuc2V0WFlaVyggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdmVjdG9yLncgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0XHRpZiAoIHRoaXMuYmluZE1vZGUgPT09IEF0dGFjaGVkQmluZE1vZGUgKSB7XG5cblx0XHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuY29weSggdGhpcy5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5iaW5kTW9kZSA9PT0gRGV0YWNoZWRCaW5kTW9kZSApIHtcblxuXHRcdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLmJpbmRNYXRyaXggKS5pbnZlcnQoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNraW5uZWRNZXNoOiBVbnJlY29nbml6ZWQgYmluZE1vZGU6ICcgKyB0aGlzLmJpbmRNb2RlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSBib25lIHRyYW5zZm9ybSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGluZGV4IHRvIHRoZSBnaXZlblxuXHQgKiB2ZXJ0ZXggcG9zaXRpb24uIFJldHVybnMgdGhlIHVwZGF0ZWQgdmVjdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgdmVydGV4IGluZGV4LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiB0aGUgc2tpbm5lZCBtZXNoJ3Mgd29ybGQgbWF0cml4IHdpbGwgYmUgdXNlZCBpbnN0ZWFkLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgdXBkYXRlZCB2ZXJ0ZXggcG9zaXRpb24uXG5cdCAqL1xuXHRhcHBseUJvbmVUcmFuc2Zvcm0oIGluZGV4LCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBza2VsZXRvbiA9IHRoaXMuc2tlbGV0b247XG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0X3NraW5JbmRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5JbmRleCwgaW5kZXggKTtcblx0XHRfc2tpbldlaWdodC5mcm9tQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5XZWlnaHQsIGluZGV4ICk7XG5cblx0XHRfYmFzZVBvc2l0aW9uLmNvcHkoIHRhcmdldCApLmFwcGx5TWF0cml4NCggdGhpcy5iaW5kTWF0cml4ICk7XG5cblx0XHR0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA0OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCB3ZWlnaHQgPSBfc2tpbldlaWdodC5nZXRDb21wb25lbnQoIGkgKTtcblxuXHRcdFx0aWYgKCB3ZWlnaHQgIT09IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgYm9uZUluZGV4ID0gX3NraW5JbmRleC5nZXRDb21wb25lbnQoIGkgKTtcblxuXHRcdFx0XHRfbWF0cml4NC5tdWx0aXBseU1hdHJpY2VzKCBza2VsZXRvbi5ib25lc1sgYm9uZUluZGV4IF0ubWF0cml4V29ybGQsIHNrZWxldG9uLmJvbmVJbnZlcnNlc1sgYm9uZUluZGV4IF0gKTtcblxuXHRcdFx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBfdmVjdG9yMy5jb3B5KCBfYmFzZVBvc2l0aW9uICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4NCApLCB3ZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hcHBseU1hdHJpeDQoIHRoaXMuYmluZE1hdHJpeEludmVyc2UgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGJvbmUgd2hpY2ggaXMgcGFydCBvZiBhIHtAbGluayBTa2VsZXRvbn0uIFRoZSBza2VsZXRvbiBpbiB0dXJuIGlzIHVzZWQgYnlcbiAqIHRoZSB7QGxpbmsgU2tpbm5lZE1lc2h9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCByb290ID0gbmV3IFRIUkVFLkJvbmUoKTtcbiAqIGNvbnN0IGNoaWxkID0gbmV3IFRIUkVFLkJvbmUoKTtcbiAqXG4gKiByb290LmFkZCggY2hpbGQgKTtcbiAqIGNoaWxkLnBvc2l0aW9uLnkgPSA1O1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIE9iamVjdDNEXG4gKi9cbmNsYXNzIEJvbmUgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYm9uZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNCb25lID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdCb25lJztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGV4dHVyZSBkaXJlY3RseSBmcm9tIHJhdyBidWZmZXIgZGF0YS5cbiAqXG4gKiBUaGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIGRhdGEgZGVwZW5kcyBvbiB0eXBlIGFuZCBmb3JtYXQ6IElmIHRoZSB0eXBlIGlzXG4gKiBgVW5zaWduZWRCeXRlVHlwZWAsIGEgYFVpbnQ4QXJyYXlgIHdpbGwgYmUgdXNlZnVsIGZvciBhZGRyZXNzaW5nIHRoZVxuICogdGV4ZWwgZGF0YS4gSWYgdGhlIGZvcm1hdCBpcyBgUkdCQUZvcm1hdGAsIGRhdGEgbmVlZHMgZm91ciB2YWx1ZXMgZm9yXG4gKiBvbmUgdGV4ZWw7IFJlZCwgR3JlZW4sIEJsdWUgYW5kIEFscGhhICh0eXBpY2FsbHkgdGhlIG9wYWNpdHkpLlxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlXG4gKi9cbmNsYXNzIERhdGFUZXh0dXJlIGV4dGVuZHMgVGV4dHVyZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZGF0YSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0gez9UeXBlZEFycmF5fSBbZGF0YT1udWxsXSAtIFRoZSBidWZmZXIgZGF0YS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zvcm1hdD1SR0JBRm9ybWF0XSAtIFRoZSB0ZXh0dXJlIGZvcm1hdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttYXBwaW5nPVRleHR1cmUuREVGQVVMVF9NQVBQSU5HXSAtIFRoZSB0ZXh0dXJlIG1hcHBpbmcuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFMgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFQ9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFQgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWFnRmlsdGVyPU5lYXJlc3RGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWluRmlsdGVyPU5lYXJlc3RGaWx0ZXJdIC0gVGhlIG1pbiBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYW5pc290cm9weT1UZXh0dXJlLkRFRkFVTFRfQU5JU09UUk9QWV0gLSBUaGUgYW5pc290cm9weSB2YWx1ZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IFtjb2xvclNwYWNlPU5vQ29sb3JTcGFjZV0gLSBUaGUgY29sb3Igc3BhY2UuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZGF0YSA9IG51bGwsIHdpZHRoID0gMSwgaGVpZ2h0ID0gMSwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIG1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXIsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKSB7XG5cblx0XHRzdXBlciggbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzRGF0YVRleHR1cmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGltYWdlIGRlZmluaXRpb24gb2YgYSBkYXRhIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7e2RhdGE6VHlwZWRBcnJheSx3aWR0aDpudW1iZXIsaGVpZ2h0Om51bWJlcn19XG5cdFx0ICovXG5cdFx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byBnZW5lcmF0ZSBtaXBtYXBzIChpZiBwb3NzaWJsZSkgZm9yIGEgdGV4dHVyZS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHRleHR1cmUgaXMgZmxpcHBlZCBhbG9uZyB0aGUgdmVydGljYWwgYXhpcyB3aGVuXG5cdFx0ICogdXBsb2FkZWQgdG8gdGhlIEdQVS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBTcGVjaWZpZXMgdGhlIGFsaWdubWVudCByZXF1aXJlbWVudHMgZm9yIHRoZSBzdGFydCBvZiBlYWNoIHBpeGVsIHJvdyBpbiBtZW1vcnkuXG5cdFx0ICpcblx0XHQgKiBPdmVyd3JpdHRlbiBhbmQgc2V0IHRvIGAxYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcblxuXHR9XG5cbn1cblxuY29uc3QgX29mZnNldE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9pZGVudGl0eU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuLyoqXG4gKiBDbGFzcyBmb3IgcmVwcmVzZW50aW5nIHRoZSBhcm1hdHVyZXMgaW4gYHRocmVlLmpzYC4gVGhlIHNrZWxldG9uXG4gKiBpcyBkZWZpbmVkIGJ5IGEgaGllcmFyY2h5IG9mIGJvbmVzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBib25lcyA9IFtdO1xuICpcbiAqIGNvbnN0IHNob3VsZGVyID0gbmV3IFRIUkVFLkJvbmUoKTtcbiAqIGNvbnN0IGVsYm93ID0gbmV3IFRIUkVFLkJvbmUoKTtcbiAqIGNvbnN0IGhhbmQgPSBuZXcgVEhSRUUuQm9uZSgpO1xuICpcbiAqIHNob3VsZGVyLmFkZCggZWxib3cgKTtcbiAqIGVsYm93LmFkZCggaGFuZCApO1xuICpcbiAqIGJvbmVzLnB1c2goIHNob3VsZGVyICwgZWxib3csIGhhbmQpO1xuICpcbiAqIHNob3VsZGVyLnBvc2l0aW9uLnkgPSAtNTtcbiAqIGVsYm93LnBvc2l0aW9uLnkgPSAwO1xuICogaGFuZC5wb3NpdGlvbi55ID0gNTtcbiAqXG4gKiBjb25zdCBhcm1Ta2VsZXRvbiA9IG5ldyBUSFJFRS5Ta2VsZXRvbiggYm9uZXMgKTtcbiAqIGBgYFxuICovXG5jbGFzcyBTa2VsZXRvbiB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2tlbGV0b24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8Qm9uZT59IFtib25lc10gLSBBbiBhcnJheSBvZiBib25lcy5cblx0ICogQHBhcmFtIHtBcnJheTxNYXRyaXg0Pn0gW2JvbmVJbnZlcnNlc10gLSBBbiBhcnJheSBvZiBib25lIGludmVyc2UgbWF0cmljZXMuXG5cdCAqIElmIG5vdCBwcm92aWRlZCwgdGhlc2UgbWF0cmljZXMgd2lsbCBiZSBjb21wdXRlZCBhdXRvbWF0aWNhbGx5IHZpYSB7QGxpbmsgU2tlbGV0b24jY2FsY3VsYXRlSW52ZXJzZXN9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJvbmVzID0gW10sIGJvbmVJbnZlcnNlcyA9IFtdICkge1xuXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiBib25lcyBkZWZpbmluZyB0aGUgc2tlbGV0b24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Qm9uZT59XG5cdFx0ICovXG5cdFx0dGhpcy5ib25lcyA9IGJvbmVzLnNsaWNlKCAwICk7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiBib25lIGludmVyc2UgbWF0cmljZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8TWF0cml4ND59XG5cdFx0ICovXG5cdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBib25lSW52ZXJzZXM7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBidWZmZXIgaG9sZGluZyB0aGUgYm9uZSBkYXRhLlxuXHRcdCAqIElucHV0IGRhdGEgZm9yIHtAbGluayBTa2VsZXRvbiNib25lVGV4dHVyZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0Zsb2F0MzJBcnJheX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ib25lTWF0cmljZXMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB0ZXh0dXJlIGhvbGRpbmcgdGhlIGJvbmUgZGF0YSBmb3IgdXNlXG5cdFx0ICogaW4gdGhlIHZlcnRleCBzaGFkZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0RhdGFUZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJvbmVUZXh0dXJlID0gbnVsbDtcblxuXHRcdHRoaXMuaW5pdCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIHNrZWxldG9uLiBUaGlzIG1ldGhvZCBnZXRzIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGJ5IHRoZSBjb25zdHJ1Y3RvclxuXHQgKiBidXQgZGVwZW5kaW5nIG9uIGhvdyB0aGUgc2tlbGV0b24gaXMgY3JlYXRlZCBpdCBtaWdodCBiZSBuZWNlc3NhcnkgdG8gY2FsbCB0aGlzIG1ldGhvZFxuXHQgKiBtYW51YWxseS5cblx0ICovXG5cdGluaXQoKSB7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0Y29uc3QgYm9uZUludmVyc2VzID0gdGhpcy5ib25lSW52ZXJzZXM7XG5cblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIGJvbmVzLmxlbmd0aCAqIDE2ICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgaW52ZXJzZSBib25lIG1hdHJpY2VzIGlmIG5lY2Vzc2FyeVxuXG5cdFx0aWYgKCBib25lSW52ZXJzZXMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHR0aGlzLmNhbGN1bGF0ZUludmVyc2VzKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBoYW5kbGUgc3BlY2lhbCBjYXNlXG5cblx0XHRcdGlmICggYm9uZXMubGVuZ3RoICE9PSBib25lSW52ZXJzZXMubGVuZ3RoICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uOiBOdW1iZXIgb2YgaW52ZXJzZSBib25lIG1hdHJpY2VzIGRvZXMgbm90IG1hdGNoIGFtb3VudCBvZiBib25lcy4nICk7XG5cblx0XHRcdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHRoaXMuYm9uZUludmVyc2VzLnB1c2goIG5ldyBNYXRyaXg0KCkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBib25lIGludmVyc2UgbWF0cmljZXMuIFRoaXMgbWV0aG9kIHJlc2V0cyB7QGxpbmsgU2tlbGV0b24jYm9uZUludmVyc2VzfVxuXHQgKiBhbmQgZmlsbHMgaXQgd2l0aCBuZXcgbWF0cmljZXMuXG5cdCAqL1xuXHRjYWxjdWxhdGVJbnZlcnNlcygpIHtcblxuXHRcdHRoaXMuYm9uZUludmVyc2VzLmxlbmd0aCA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHRcdGlmICggdGhpcy5ib25lc1sgaSBdICkge1xuXG5cdFx0XHRcdGludmVyc2UuY29weSggdGhpcy5ib25lc1sgaSBdLm1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggaW52ZXJzZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmVzZXRzIHRoZSBza2VsZXRvbiB0byB0aGUgYmFzZSBwb3NlLlxuXHQgKi9cblx0cG9zZSgpIHtcblxuXHRcdC8vIHJlY292ZXIgdGhlIGJpbmQtdGltZSB3b3JsZCBtYXRyaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZSApIHtcblxuXHRcdFx0XHRib25lLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMuYm9uZUludmVyc2VzWyBpIF0gKS5pbnZlcnQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXNcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUgKSB7XG5cblx0XHRcdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdFx0XHRib25lLm1hdHJpeC5jb3B5KCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApLmludmVydCgpO1xuXHRcdFx0XHRcdGJvbmUubWF0cml4Lm11bHRpcGx5KCBib25lLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmNvcHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ym9uZS5tYXRyaXguZGVjb21wb3NlKCBib25lLnBvc2l0aW9uLCBib25lLnF1YXRlcm5pb24sIGJvbmUuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmVzZXRzIHRoZSBza2VsZXRvbiB0byB0aGUgYmFzZSBwb3NlLlxuXHQgKi9cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXHRcdGNvbnN0IGJvbmVJbnZlcnNlcyA9IHRoaXMuYm9uZUludmVyc2VzO1xuXHRcdGNvbnN0IGJvbmVNYXRyaWNlcyA9IHRoaXMuYm9uZU1hdHJpY2VzO1xuXHRcdGNvbnN0IGJvbmVUZXh0dXJlID0gdGhpcy5ib25lVGV4dHVyZTtcblxuXHRcdC8vIGZsYXR0ZW4gYm9uZSBtYXRyaWNlcyB0byBhcnJheVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHQvLyBjb21wdXRlIHRoZSBvZmZzZXQgYmV0d2VlbiB0aGUgY3VycmVudCBhbmQgdGhlIG9yaWdpbmFsIHRyYW5zZm9ybVxuXG5cdFx0XHRjb25zdCBtYXRyaXggPSBib25lc1sgaSBdID8gYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCA6IF9pZGVudGl0eU1hdHJpeDtcblxuXHRcdFx0X29mZnNldE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXgsIGJvbmVJbnZlcnNlc1sgaSBdICk7XG5cdFx0XHRfb2Zmc2V0TWF0cml4LnRvQXJyYXkoIGJvbmVNYXRyaWNlcywgaSAqIDE2ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJvbmVUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRib25lVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IHNrZWxldG9uIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1NrZWxldG9ufSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgU2tlbGV0b24oIHRoaXMuYm9uZXMsIHRoaXMuYm9uZUludmVyc2VzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBhIGRhdGEgdGV4dHVyZSBmb3IgcGFzc2luZyBib25lIGRhdGEgdG8gdGhlIHZlcnRleCBzaGFkZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge1NrZWxldG9ufSBBIHJlZmVyZW5jZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y29tcHV0ZUJvbmVUZXh0dXJlKCkge1xuXG5cdFx0Ly8gbGF5b3V0ICgxIG1hdHJpeCA9IDQgcGl4ZWxzKVxuXHRcdC8vICAgICAgUkdCQSBSR0JBIFJHQkEgUkdCQSAoPT4gY29sdW1uMSwgY29sdW1uMiwgY29sdW1uMywgY29sdW1uNClcblx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IGJvbmVzICogNCBwaXhlbHMgPSAgKDggKiA4KVxuXHRcdC8vICAgICAgIDE2eDE2IHBpeGVsIHRleHR1cmUgbWF4ICAgNjQgYm9uZXMgKiA0IHBpeGVscyA9ICgxNiAqIDE2KVxuXHRcdC8vICAgICAgIDMyeDMyIHBpeGVsIHRleHR1cmUgbWF4ICAyNTYgYm9uZXMgKiA0IHBpeGVscyA9ICgzMiAqIDMyKVxuXHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgYm9uZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxuXG5cdFx0bGV0IHNpemUgPSBNYXRoLnNxcnQoIHRoaXMuYm9uZXMubGVuZ3RoICogNCApOyAvLyA0IHBpeGVscyBuZWVkZWQgZm9yIDEgbWF0cml4XG5cdFx0c2l6ZSA9IE1hdGguY2VpbCggc2l6ZSAvIDQgKSAqIDQ7XG5cdFx0c2l6ZSA9IE1hdGgubWF4KCBzaXplLCA0ICk7XG5cblx0XHRjb25zdCBib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcblx0XHRib25lTWF0cmljZXMuc2V0KCB0aGlzLmJvbmVNYXRyaWNlcyApOyAvLyBjb3B5IGN1cnJlbnQgdmFsdWVzXG5cblx0XHRjb25zdCBib25lVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggYm9uZU1hdHJpY2VzLCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUgKTtcblx0XHRib25lVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR0aGlzLmJvbmVNYXRyaWNlcyA9IGJvbmVNYXRyaWNlcztcblx0XHR0aGlzLmJvbmVUZXh0dXJlID0gYm9uZVRleHR1cmU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlYXJjaGVzIHRocm91Z2ggdGhlIHNrZWxldG9uJ3MgYm9uZSBhcnJheSBhbmQgcmV0dXJucyB0aGUgZmlyc3Qgd2l0aCBhXG5cdCAqIG1hdGNoaW5nIG5hbWUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGJvbmUuXG5cdCAqIEByZXR1cm4ge0JvbmV8dW5kZWZpbmVkfSBUaGUgZm91bmQgYm9uZS4gYHVuZGVmaW5lZGAgaWYgbm8gYm9uZSBoYXMgYmVlbiBmb3VuZC5cblx0ICovXG5cdGdldEJvbmVCeU5hbWUoIG5hbWUgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IHRoaXMuYm9uZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBib25lLm5hbWUgPT09IG5hbWUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqL1xuXHRkaXNwb3NlKCApIHtcblxuXHRcdGlmICggdGhpcy5ib25lVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib25lVGV4dHVyZS5kaXNwb3NlKCk7XG5cblx0XHRcdHRoaXMuYm9uZVRleHR1cmUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2V0dXBzIHRoZSBza2VsZXRvbiBieSB0aGUgZ2l2ZW4gSlNPTiBhbmQgYm9uZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIHNrZWxldG9uIGFzIHNlcmlhbGl6ZWQgSlNPTi5cblx0ICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBCb25lPn0gYm9uZXMgLSBBbiBhcnJheSBvZiBib25lcy5cblx0ICogQHJldHVybiB7U2tlbGV0b259IEEgcmVmZXJlbmNlIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRmcm9tSlNPTigganNvbiwgYm9uZXMgKSB7XG5cblx0XHR0aGlzLnV1aWQgPSBqc29uLnV1aWQ7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLmJvbmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHV1aWQgPSBqc29uLmJvbmVzWyBpIF07XG5cdFx0XHRsZXQgYm9uZSA9IGJvbmVzWyB1dWlkIF07XG5cblx0XHRcdGlmICggYm9uZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uOiBObyBib25lIGZvdW5kIHdpdGggVVVJRDonLCB1dWlkICk7XG5cdFx0XHRcdGJvbmUgPSBuZXcgQm9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuYm9uZXMucHVzaCggYm9uZSApO1xuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIGpzb24uYm9uZUludmVyc2VzWyBpIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5pbml0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIHNrZWxldG9uIGludG8gSlNPTi5cblx0ICpcblx0ICogQHJldHVybiB7T2JqZWN0fSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBza2VsZXRvbi5cblx0ICogQHNlZSB7QGxpbmsgT2JqZWN0TG9hZGVyI3BhcnNlfVxuXHQgKi9cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNixcblx0XHRcdFx0dHlwZTogJ1NrZWxldG9uJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnU2tlbGV0b24udG9KU09OJ1xuXHRcdFx0fSxcblx0XHRcdGJvbmVzOiBbXSxcblx0XHRcdGJvbmVJbnZlcnNlczogW11cblx0XHR9O1xuXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXG5cdFx0Y29uc3QgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXHRcdGNvbnN0IGJvbmVJbnZlcnNlcyA9IHRoaXMuYm9uZUludmVyc2VzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gYm9uZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IGJvbmVzWyBpIF07XG5cdFx0XHRkYXRhLmJvbmVzLnB1c2goIGJvbmUudXVpZCApO1xuXG5cdFx0XHRjb25zdCBib25lSW52ZXJzZSA9IGJvbmVJbnZlcnNlc1sgaSBdO1xuXHRcdFx0ZGF0YS5ib25lSW52ZXJzZXMucHVzaCggYm9uZUludmVyc2UudG9BcnJheSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBbiBpbnN0YW5jZWQgdmVyc2lvbiBvZiBhIGJ1ZmZlciBhdHRyaWJ1dGUuXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckF0dHJpYnV0ZVxuICovXG5jbGFzcyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgZXh0ZW5kcyBCdWZmZXJBdHRyaWJ1dGUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlZCBidWZmZXIgYXR0cmlidXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGFycmF5IC0gVGhlIGFycmF5IGhvbGRpbmcgdGhlIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtub3JtYWxpemVkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGRhdGEgYXJlIG5vcm1hbGl6ZWQgb3Igbm90LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21lc2hQZXJBdHRyaWJ1dGU9MV0gLSBIb3cgb2Z0ZW4gYSB2YWx1ZSBvZiB0aGlzIGJ1ZmZlciBhdHRyaWJ1dGUgc2hvdWxkIGJlIHJlcGVhdGVkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCwgbWVzaFBlckF0dHJpYnV0ZSA9IDEgKSB7XG5cblx0XHRzdXBlciggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgaG93IG9mdGVuIGEgdmFsdWUgb2YgdGhpcyBidWZmZXIgYXR0cmlidXRlIHNob3VsZCBiZSByZXBlYXRlZC4gQVxuXHRcdCAqIHZhbHVlIG9mIG9uZSBtZWFucyB0aGF0IGVhY2ggdmFsdWUgb2YgdGhlIGluc3RhbmNlZCBhdHRyaWJ1dGUgaXMgdXNlZCBmb3Jcblx0XHQgKiBhIHNpbmdsZSBpbnN0YW5jZS4gQSB2YWx1ZSBvZiB0d28gbWVhbnMgdGhhdCBlYWNoIHZhbHVlIGlzIHVzZWQgZm9yIHR3b1xuXHRcdCAqIGNvbnNlY3V0aXZlIGluc3RhbmNlcyAoYW5kIHNvIG9uKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0ZGF0YS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuY29uc3QgX2luc3RhbmNlTG9jYWxNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfaW5zdGFuY2VXb3JsZE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuY29uc3QgX2luc3RhbmNlSW50ZXJzZWN0cyA9IFtdO1xuXG5jb25zdCBfYm94MyA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcbmNvbnN0IF9pZGVudGl0eSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9tZXNoJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNZXNoKCk7XG5jb25zdCBfc3BoZXJlJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcblxuLyoqXG4gKiBBIHNwZWNpYWwgdmVyc2lvbiBvZiBhIG1lc2ggd2l0aCBpbnN0YW5jZWQgcmVuZGVyaW5nIHN1cHBvcnQuIFVzZVxuICogdGhpcyBjbGFzcyBpZiB5b3UgaGF2ZSB0byByZW5kZXIgYSBsYXJnZSBudW1iZXIgb2Ygb2JqZWN0cyB3aXRoIHRoZSBzYW1lXG4gKiBnZW9tZXRyeSBhbmQgbWF0ZXJpYWwocykgYnV0IHdpdGggZGlmZmVyZW50IHdvcmxkIHRyYW5zZm9ybWF0aW9ucy4gVGhlIHVzYWdlXG4gKiBvZiAnSW5zdGFuY2VkTWVzaCcgd2lsbCBoZWxwIHlvdSB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBkcmF3IGNhbGxzIGFuZCB0aHVzXG4gKiBpbXByb3ZlIHRoZSBvdmVyYWxsIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBhdWdtZW50cyBNZXNoXG4gKi9cbmNsYXNzIEluc3RhbmNlZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZWQgbWVzaC5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gW2dlb21ldHJ5XSAtIFRoZSBtZXNoIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfEFycmF5PE1hdGVyaWFsPn0gW21hdGVyaWFsXSAtIFRoZSBtZXNoIG1hdGVyaWFsLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gY291bnQgLSBUaGUgbnVtYmVyIG9mIGluc3RhbmNlcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGNvdW50ICkge1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0luc3RhbmNlZE1lc2ggPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gb2YgYWxsIGluc3RhbmNlcy4gWW91IGhhdmUgdG8gc2V0IGl0c1xuXHRcdCAqIHtAbGluayBCdWZmZXJBdHRyaWJ1dGUjbmVlZHNVcGRhdGV9IGZsYWcgdG8gdHJ1ZSBpZiB5b3UgbW9kaWZ5IGluc3RhbmNlZCBkYXRhXG5cdFx0ICogdmlhIHtAbGluayBJbnN0YW5jZWRNZXNoI3NldE1hdHJpeEF0fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGV9XG5cdFx0ICovXG5cdFx0dGhpcy5pbnN0YW5jZU1hdHJpeCA9IG5ldyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGNvdW50ICogMTYgKSwgMTYgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIGNvbG9yIG9mIGFsbCBpbnN0YW5jZXMuIFlvdSBoYXZlIHRvIHNldCBpdHNcblx0XHQgKiB7QGxpbmsgQnVmZmVyQXR0cmlidXRlI25lZWRzVXBkYXRlfSBmbGFnIHRvIHRydWUgaWYgeW91IG1vZGlmeSBpbnN0YW5jZWQgZGF0YVxuXHRcdCAqIHZpYSB7QGxpbmsgSW5zdGFuY2VkTWVzaCNzZXRDb2xvckF0fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/SW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmluc3RhbmNlQ29sb3IgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVwcmVzZW50cyB0aGUgbW9ycGggdGFyZ2V0IHdlaWdodHMgb2YgYWxsIGluc3RhbmNlcy4gWW91IGhhdmUgdG8gc2V0IGl0c1xuXHRcdCAqIHtAbGluayBUZXh0dXJlI25lZWRzVXBkYXRlfSBmbGFnIHRvIHRydWUgaWYgeW91IG1vZGlmeSBpbnN0YW5jZWQgZGF0YVxuXHRcdCAqIHZpYSB7QGxpbmsgSW5zdGFuY2VkTWVzaCNzZXRNb3JwaEF0fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/RGF0YVRleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubW9ycGhUZXh0dXJlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2YgaW5zdGFuY2VzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmNvdW50ID0gY291bnQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYm91bmRpbmcgYm94IG9mIHRoZSBpbnN0YW5jZWQgbWVzaC4gQ2FuIGJlIGNvbXB1dGVkIHZpYSB7QGxpbmsgSW5zdGFuY2VkTWVzaCNjb21wdXRlQm91bmRpbmdCb3h9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9Cb3gzfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBib3VuZGluZyBzcGhlcmUgb2YgdGhlIGluc3RhbmNlZCBtZXNoLiBDYW4gYmUgY29tcHV0ZWQgdmlhIHtAbGluayBJbnN0YW5jZWRNZXNoI2NvbXB1dGVCb3VuZGluZ1NwaGVyZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1NwaGVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5zZXRNYXRyaXhBdCggaSwgX2lkZW50aXR5ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBpbnN0YW5jZWQgbWVzaCwgYW5kIHVwZGF0ZXMge0BsaW5rIEluc3RhbmNlZE1lc2gjYm91bmRpbmdCb3h9LlxuXHQgKiBUaGUgYm91bmRpbmcgYm94IGlzIG5vdCBhdXRvbWF0aWNhbGx5IGNvbXB1dGVkIGJ5IHRoZSBlbmdpbmU7IHRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGJ5IHlvdXIgYXBwLlxuXHQgKiBZb3UgbWF5IG5lZWQgdG8gcmVjb21wdXRlIHRoZSBib3VuZGluZyBib3ggaWYgYW4gaW5zdGFuY2UgaXMgdHJhbnNmb3JtZWQgdmlhIHtAbGluayBJbnN0YW5jZWRNZXNoI3NldE1hdHJpeEF0fS5cblx0ICovXG5cdGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBjb3VudCA9IHRoaXMuY291bnQ7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY291bnQ7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9pbnN0YW5jZUxvY2FsTWF0cml4ICk7XG5cblx0XHRcdF9ib3gzLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICkuYXBwbHlNYXRyaXg0KCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnVuaW9uKCBfYm94MyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIGJvdW5kaW5nIHNwaGVyZSBvZiB0aGUgaW5zdGFuY2VkIG1lc2gsIGFuZCB1cGRhdGVzIHtAbGluayBJbnN0YW5jZWRNZXNoI2JvdW5kaW5nU3BoZXJlfVxuXHQgKiBUaGUgZW5naW5lIGF1dG9tYXRpY2FsbHkgY29tcHV0ZXMgdGhlIGJvdW5kaW5nIHNwaGVyZSB3aGVuIGl0IGlzIG5lZWRlZCwgZS5nLiwgZm9yIHJheSBjYXN0aW5nIG9yIHZpZXcgZnJ1c3R1bSBjdWxsaW5nLlxuXHQgKiBZb3UgbWF5IG5lZWQgdG8gcmVjb21wdXRlIHRoZSBib3VuZGluZyBzcGhlcmUgaWYgYW4gaW5zdGFuY2UgaXMgdHJhbnNmb3JtZWQgdmlhIHtAbGluayBJbnN0YW5jZWRNZXNoI3NldE1hdHJpeEF0fS5cblx0ICovXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBjb3VudCA9IHRoaXMuY291bnQ7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5nZXRNYXRyaXhBdCggaSwgX2luc3RhbmNlTG9jYWxNYXRyaXggKTtcblxuXHRcdFx0X3NwaGVyZSQ0LmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICkuYXBwbHlNYXRyaXg0KCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlLnVuaW9uKCBfc3BoZXJlJDQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5pbnN0YW5jZU1hdHJpeC5jb3B5KCBzb3VyY2UuaW5zdGFuY2VNYXRyaXggKTtcblxuXHRcdGlmICggc291cmNlLm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHRoaXMubW9ycGhUZXh0dXJlID0gc291cmNlLm1vcnBoVGV4dHVyZS5jbG9uZSgpO1xuXHRcdGlmICggc291cmNlLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSB0aGlzLmluc3RhbmNlQ29sb3IgPSBzb3VyY2UuaW5zdGFuY2VDb2xvci5jbG9uZSgpO1xuXG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblxuXHRcdGlmICggc291cmNlLmJvdW5kaW5nQm94ICE9PSBudWxsICkgdGhpcy5ib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveC5jbG9uZSgpO1xuXHRcdGlmICggc291cmNlLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkgdGhpcy5ib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjb2xvciBvZiB0aGUgZGVmaW5lZCBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluc3RhbmNlIGluZGV4LlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSB0YXJnZXQgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKi9cblx0Z2V0Q29sb3JBdCggaW5kZXgsIGNvbG9yICkge1xuXG5cdFx0Y29sb3IuZnJvbUFycmF5KCB0aGlzLmluc3RhbmNlQ29sb3IuYXJyYXksIGluZGV4ICogMyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IG9mIHRoZSBkZWZpbmVkIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5zdGFuY2UgaW5kZXguXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4IC0gVGhlIHRhcmdldCBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqL1xuXHRnZXRNYXRyaXhBdCggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdG1hdHJpeC5mcm9tQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIG1vcnBoIHRhcmdldCB3ZWlnaHRzIG9mIHRoZSBkZWZpbmVkIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5zdGFuY2UgaW5kZXguXG5cdCAqIEBwYXJhbSB7TWVzaH0gb2JqZWN0IC0gVGhlIHRhcmdldCBvYmplY3QgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqL1xuXHRnZXRNb3JwaEF0KCBpbmRleCwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMubW9ycGhUZXh0dXJlLnNvdXJjZS5kYXRhLmRhdGE7XG5cblx0XHRjb25zdCBsZW4gPSBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aCArIDE7IC8vIEFsbCBpbmZsdWVuY2VzICsgdGhlIGJhc2VJbmZsdWVuY2VTdW1cblxuXHRcdGNvbnN0IGRhdGFJbmRleCA9IGluZGV4ICogbGVuICsgMTsgLy8gU2tpcCB0aGUgYmFzZUluZmx1ZW5jZVN1bSBhdCB0aGUgYmVnaW5uaW5nXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0b2JqZWN0SW5mbHVlbmNlc1sgaSBdID0gYXJyYXlbIGRhdGFJbmRleCArIGkgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdGNvbnN0IHJheWNhc3RUaW1lcyA9IHRoaXMuY291bnQ7XG5cblx0XHRfbWVzaCQxLmdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRfbWVzaCQxLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblxuXHRcdGlmICggX21lc2gkMS5tYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gdGVzdCB3aXRoIGJvdW5kaW5nIHNwaGVyZSBmaXJzdFxuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUkNC5jb3B5KCB0aGlzLmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZSQ0LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDQgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBub3cgdGVzdCBlYWNoIGluc3RhbmNlXG5cblx0XHRmb3IgKCBsZXQgaW5zdGFuY2VJZCA9IDA7IGluc3RhbmNlSWQgPCByYXljYXN0VGltZXM7IGluc3RhbmNlSWQgKysgKSB7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgd29ybGQgbWF0cml4IGZvciBlYWNoIGluc3RhbmNlXG5cblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGluc3RhbmNlSWQsIF9pbnN0YW5jZUxvY2FsTWF0cml4ICk7XG5cblx0XHRcdF9pbnN0YW5jZVdvcmxkTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeFdvcmxkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHQvLyB0aGUgbWVzaCByZXByZXNlbnRzIHRoaXMgc2luZ2xlIGluc3RhbmNlXG5cblx0XHRcdF9tZXNoJDEubWF0cml4V29ybGQgPSBfaW5zdGFuY2VXb3JsZE1hdHJpeDtcblxuXHRcdFx0X21lc2gkMS5yYXljYXN0KCByYXljYXN0ZXIsIF9pbnN0YW5jZUludGVyc2VjdHMgKTtcblxuXHRcdFx0Ly8gcHJvY2VzcyB0aGUgcmVzdWx0IG9mIHJheWNhc3RcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gX2luc3RhbmNlSW50ZXJzZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IF9pbnN0YW5jZUludGVyc2VjdHNbIGkgXTtcblx0XHRcdFx0aW50ZXJzZWN0Lmluc3RhbmNlSWQgPSBpbnN0YW5jZUlkO1xuXHRcdFx0XHRpbnRlcnNlY3Qub2JqZWN0ID0gdGhpcztcblx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfaW5zdGFuY2VJbnRlcnNlY3RzLmxlbmd0aCA9IDA7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBjb2xvciB0byB0aGUgZGVmaW5lZCBpbnN0YW5jZS4gTWFrZSBzdXJlIHlvdSBzZXQgdGhlIGBuZWVkc1VwZGF0ZWAgZmxhZyBvZlxuXHQgKiB7QGxpbmsgSW5zdGFuY2VkTWVzaCNpbnN0YW5jZUNvbG9yfSB0byBgdHJ1ZWAgYWZ0ZXIgdXBkYXRpbmcgYWxsIHRoZSBjb2xvcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbnN0YW5jZSBpbmRleC5cblx0ICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgaW5zdGFuY2UgY29sb3IuXG5cdCAqL1xuXHRzZXRDb2xvckF0KCBpbmRleCwgY29sb3IgKSB7XG5cblx0XHRpZiAoIHRoaXMuaW5zdGFuY2VDb2xvciA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5pbnN0YW5jZUNvbG9yID0gbmV3IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggdGhpcy5pbnN0YW5jZU1hdHJpeC5jb3VudCAqIDMgKS5maWxsKCAxICksIDMgKTtcblxuXHRcdH1cblxuXHRcdGNvbG9yLnRvQXJyYXkoIHRoaXMuaW5zdGFuY2VDb2xvci5hcnJheSwgaW5kZXggKiAzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gdGhlIGRlZmluZWQgaW5zdGFuY2UuIE1ha2Ugc3VyZSB5b3Ugc2V0IHRoZSBgbmVlZHNVcGRhdGVgIGZsYWcgb2Zcblx0ICoge0BsaW5rIEluc3RhbmNlZE1lc2gjaW5zdGFuY2VNYXRyaXh9IHRvIGB0cnVlYCBhZnRlciB1cGRhdGluZyBhbGwgdGhlIGNvbG9ycy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluc3RhbmNlIGluZGV4LlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG1hdHJpeCAtIFRoZSBsb2NhbCB0cmFuc2Zvcm1hdGlvbi5cblx0ICovXG5cdHNldE1hdHJpeEF0KCBpbmRleCwgbWF0cml4ICkge1xuXG5cdFx0bWF0cml4LnRvQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIG1vcnBoIHRhcmdldCB3ZWlnaHRzIHRvIHRoZSBkZWZpbmVkIGluc3RhbmNlLiBNYWtlIHN1cmUgeW91IHNldCB0aGUgYG5lZWRzVXBkYXRlYCBmbGFnIG9mXG5cdCAqIHtAbGluayBJbnN0YW5jZWRNZXNoI21vcnBoVGV4dHVyZX0gdG8gYHRydWVgIGFmdGVyIHVwZGF0aW5nIGFsbCB0aGUgaW5mbHVlbmNlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluc3RhbmNlIGluZGV4LlxuXHQgKiBAcGFyYW0ge01lc2h9IG9iamVjdCAtICBBIG1lc2ggd2hpY2ggYG1vcnBoVGFyZ2V0SW5mbHVlbmNlc2AgcHJvcGVydHkgY29udGFpbmluZyB0aGUgbW9ycGggdGFyZ2V0IHdlaWdodHNcblx0ICogb2YgYSBzaW5nbGUgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRNb3JwaEF0KCBpbmRleCwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHRjb25zdCBsZW4gPSBvYmplY3RJbmZsdWVuY2VzLmxlbmd0aCArIDE7IC8vIG1vcnBoQmFzZUluZmx1ZW5jZSArIGFsbCBpbmZsdWVuY2VzXG5cblx0XHRpZiAoIHRoaXMubW9ycGhUZXh0dXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLm1vcnBoVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggbmV3IEZsb2F0MzJBcnJheSggbGVuICogdGhpcy5jb3VudCApLCBsZW4sIHRoaXMuY291bnQsIFJlZEZvcm1hdCwgRmxvYXRUeXBlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhcnJheSA9IHRoaXMubW9ycGhUZXh0dXJlLnNvdXJjZS5kYXRhLmRhdGE7XG5cblx0XHRsZXQgbW9ycGhJbmZsdWVuY2VzU3VtID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRtb3JwaEluZmx1ZW5jZXNTdW0gKz0gb2JqZWN0SW5mbHVlbmNlc1sgaSBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbW9ycGhCYXNlSW5mbHVlbmNlID0gdGhpcy5nZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA/IDEgOiAxIC0gbW9ycGhJbmZsdWVuY2VzU3VtO1xuXG5cdFx0Y29uc3QgZGF0YUluZGV4ID0gbGVuICogaW5kZXg7XG5cblx0XHRhcnJheVsgZGF0YUluZGV4IF0gPSBtb3JwaEJhc2VJbmZsdWVuY2U7XG5cblx0XHRhcnJheS5zZXQoIG9iamVjdEluZmx1ZW5jZXMsIGRhdGFJbmRleCArIDEgKTtcblxuXHR9XG5cblx0dXBkYXRlTW9ycGhUYXJnZXRzKCkge1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApO1xuXG5cdFx0aWYgKCB0aGlzLm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5tb3JwaFRleHR1cmUuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5tb3JwaFRleHR1cmUgPSBudWxsO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92ZWN0b3IyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX25vcm1hbE1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKTtcblxuLyoqXG4gKiBBIHR3byBkaW1lbnNpb25hbCBzdXJmYWNlIHRoYXQgZXh0ZW5kcyBpbmZpbml0ZWx5IGluIDNEIHNwYWNlLCByZXByZXNlbnRlZFxuICogaW4gW0hlc3NpYW4gbm9ybWFsIGZvcm1de0BsaW5rIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vSGVzc2lhbk5vcm1hbEZvcm0uaHRtbH1cbiAqIGJ5IGEgdW5pdCBsZW5ndGggbm9ybWFsIHZlY3RvciBhbmQgYSBjb25zdGFudC5cbiAqL1xuY2xhc3MgUGxhbmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBsYW5lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFtub3JtYWw9KDEsMCwwKV0gLSBBIHVuaXQgbGVuZ3RoIHZlY3RvciBkZWZpbmluZyB0aGUgbm9ybWFsIG9mIHRoZSBwbGFuZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtjb25zdGFudD0wXSAtIFRoZSBzaWduZWQgZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luIHRvIHRoZSBwbGFuZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBub3JtYWwgPSBuZXcgVmVjdG9yMyggMSwgMCwgMCApLCBjb25zdGFudCA9IDAgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUGxhbmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSB1bml0IGxlbmd0aCB2ZWN0b3IgZGVmaW5pbmcgdGhlIG5vcm1hbCBvZiB0aGUgcGxhbmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbCA9IG5vcm1hbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzaWduZWQgZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luIHRvIHRoZSBwbGFuZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBsYW5lIGNvbXBvbmVudHMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IG5vcm1hbCAtIFRoZSBub3JtYWwuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb25zdGFudCAtIFRoZSBjb25zdGFudC5cblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHRzZXQoIG5vcm1hbCwgY29uc3RhbnQgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gY29uc3RhbnQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBsYW5lIGNvbXBvbmVudHMgYnkgZGVmaW5pbmcgYHhgLCBgeWAsIGB6YCBhcyB0aGVcblx0ICogcGxhbmUgbm9ybWFsIGFuZCBgd2AgYXMgdGhlIGNvbnN0YW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB2YWx1ZSBmb3IgdGhlIG5vcm1hbCdzIHggY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2YWx1ZSBmb3IgdGhlIG5vcm1hbCdzIHkgY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB2YWx1ZSBmb3IgdGhlIG5vcm1hbCdzIHogY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdyAtIFRoZSBjb25zdGFudCB2YWx1ZS5cblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHRzZXRDb21wb25lbnRzKCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuc2V0KCB4LCB5LCB6ICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBsYW5lIGZyb20gdGhlIGdpdmVuIG5vcm1hbCBhbmQgY29wbGFuYXIgcG9pbnQgKHRoYXQgaXMgYSBwb2ludFxuXHQgKiB0aGF0IGxpZXMgb250byB0aGUgcGxhbmUpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IG5vcm1hbCAtIFRoZSBub3JtYWwuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBBIGNvcGxhbmFyIHBvaW50LlxuXHQgKiBAcmV0dXJuIHtQbGFuZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBwbGFuZS5cblx0ICovXG5cdHNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KCBub3JtYWwsIHBvaW50ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggbm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcG9pbnQuZG90KCB0aGlzLm5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwbGFuZSBmcm9tIHRocmVlIGNvcGxhbmFyIHBvaW50cy4gVGhlIHdpbmRpbmcgb3JkZXIgaXNcblx0ICogYXNzdW1lZCB0byBiZSBjb3VudGVyLWNsb2Nrd2lzZSwgYW5kIGRldGVybWluZXMgdGhlIGRpcmVjdGlvbiBvZlxuXHQgKiB0aGUgcGxhbmUgbm9ybWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGEgLSBUaGUgZmlyc3QgY29wbGFuYXIgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYiAtIFRoZSBzZWNvbmQgY29wbGFuYXIgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gYyAtIFRoZSB0aGlyZCBjb3BsYW5hciBwb2ludC5cblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHRzZXRGcm9tQ29wbGFuYXJQb2ludHMoIGEsIGIsIGMgKSB7XG5cblx0XHRjb25zdCBub3JtYWwgPSBfdmVjdG9yMS5zdWJWZWN0b3JzKCBjLCBiICkuY3Jvc3MoIF92ZWN0b3IyLnN1YlZlY3RvcnMoIGEsIGIgKSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0Ly8gUTogc2hvdWxkIGFuIGVycm9yIGJlIHRocm93biBpZiBub3JtYWwgaXMgemVybyAoZS5nLiBkZWdlbmVyYXRlIHBsYW5lKT9cblxuXHRcdHRoaXMuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIG5vcm1hbCwgYSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gcGxhbmUgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gcGxhbmUgLSBUaGUgcGxhbmUgdG8gY29weS5cblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHRjb3B5KCBwbGFuZSApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIHBsYW5lLm5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBwbGFuZS5jb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTm9ybWFsaXplcyB0aGUgcGxhbmUgbm9ybWFsIGFuZCBhZGp1c3RzIHRoZSBjb25zdGFudCBhY2NvcmRpbmdseS5cblx0ICpcblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHRub3JtYWxpemUoKSB7XG5cblx0XHQvLyBOb3RlOiB3aWxsIGxlYWQgdG8gYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgcGxhbmUgaXMgaW52YWxpZC5cblxuXHRcdGNvbnN0IGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcblx0XHR0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhciggaW52ZXJzZU5vcm1hbExlbmd0aCApO1xuXHRcdHRoaXMuY29uc3RhbnQgKj0gaW52ZXJzZU5vcm1hbExlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogTmVnYXRlcyBib3RoIHRoZSBwbGFuZSBub3JtYWwgYW5kIHRoZSBjb25zdGFudC5cblx0ICpcblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHRuZWdhdGUoKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50ICo9IC0xO1xuXHRcdHRoaXMubm9ybWFsLm5lZ2F0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzaWduZWQgZGlzdGFuY2UgZnJvbSB0aGUgZ2l2ZW4gcG9pbnQgdG8gdGhpcyBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byBjb21wdXRlIHRoZSBkaXN0YW5jZSBmb3IuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNpZ25lZCBkaXN0YW5jZS5cblx0ICovXG5cdGRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWwuZG90KCBwb2ludCApICsgdGhpcy5jb25zdGFudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNpZ25lZCBkaXN0YW5jZSBmcm9tIHRoZSBnaXZlbiBzcGhlcmUgdG8gdGhpcyBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZSAtIFRoZSBzcGhlcmUgdG8gY29tcHV0ZSB0aGUgZGlzdGFuY2UgZm9yLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzaWduZWQgZGlzdGFuY2UuXG5cdCAqL1xuXHRkaXN0YW5jZVRvU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSAtIHNwaGVyZS5yYWRpdXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQcm9qZWN0cyBhIHRoZSBnaXZlbiBwb2ludCBvbnRvIHRoZSBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBwb2ludCAtIFRoZSBwb2ludCB0byBwcm9qZWN0LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgcHJvamVjdGVkIHBvaW50IG9uIHRoZSBwbGFuZS5cblx0ICovXG5cdHByb2plY3RQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5hZGRTY2FsZWRWZWN0b3IoIHRoaXMubm9ybWFsLCAtIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBwb2ludCApICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgb2YgdGhlIHBhc3NlZCBsaW5lIGFuZCB0aGUgcGxhbmUuIFJldHVybnNcblx0ICogYG51bGxgIGlmIHRoZSBsaW5lIGRvZXMgbm90IGludGVyc2VjdC4gUmV0dXJucyB0aGUgbGluZSdzIHN0YXJ0aW5nIHBvaW50IGlmXG5cdCAqIHRoZSBsaW5lIGlzIGNvcGxhbmFyIHdpdGggdGhlIHBsYW5lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xpbmUzfSBsaW5lIC0gVGhlIGxpbmUgdG8gY29tcHV0ZSB0aGUgaW50ZXJzZWN0aW9uIGZvci5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7P1ZlY3RvcjN9IFRoZSBpbnRlcnNlY3Rpb24gcG9pbnQuXG5cdCAqL1xuXHRpbnRlcnNlY3RMaW5lKCBsaW5lLCB0YXJnZXQgKSB7XG5cblx0XHRjb25zdCBkaXJlY3Rpb24gPSBsaW5lLmRlbHRhKCBfdmVjdG9yMSApO1xuXG5cdFx0Y29uc3QgZGVub21pbmF0b3IgPSB0aGlzLm5vcm1hbC5kb3QoIGRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxuXHRcdFx0aWYgKCB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5zdGFydCApID09PSAwICkge1xuXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFVuc3VyZSBpZiB0aGlzIGlzIHRoZSBjb3JyZWN0IG1ldGhvZCB0byBoYW5kbGUgdGhpcyBjYXNlLlxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ID0gLSAoIGxpbmUuc3RhcnQuZG90KCB0aGlzLm5vcm1hbCApICsgdGhpcy5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHRpZiAoIHQgPCAwIHx8IHQgPiAxICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggbGluZS5zdGFydCApLmFkZFNjYWxlZFZlY3RvciggZGlyZWN0aW9uLCB0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gbGluZSBzZWdtZW50IGludGVyc2VjdHMgd2l0aCAocGFzc2VzIHRocm91Z2gpIHRoZSBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtMaW5lM30gbGluZSAtIFRoZSBsaW5lIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGxpbmUgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggdGhlIHBsYW5lIG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNMaW5lKCBsaW5lICkge1xuXG5cdFx0Ly8gTm90ZTogdGhpcyB0ZXN0cyBpZiBhIGxpbmUgaW50ZXJzZWN0cyB0aGUgcGxhbmUsIG5vdCB3aGV0aGVyIGl0IChvciBpdHMgZW5kLXBvaW50cykgYXJlIGNvcGxhbmFyIHdpdGggaXQuXG5cblx0XHRjb25zdCBzdGFydFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5zdGFydCApO1xuXHRcdGNvbnN0IGVuZFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggbGluZS5lbmQgKTtcblxuXHRcdHJldHVybiAoIHN0YXJ0U2lnbiA8IDAgJiYgZW5kU2lnbiA+IDAgKSB8fCAoIGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBib3VuZGluZyBib3ggaW50ZXJzZWN0cyB3aXRoIHRoZSBwbGFuZS5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gzfSBib3ggLSBUaGUgYm91bmRpbmcgYm94IHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJvdW5kaW5nIGJveCBpbnRlcnNlY3RzIHdpdGggdGhlIHBsYW5lIG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNCb3goIGJveCApIHtcblxuXHRcdHJldHVybiBib3guaW50ZXJzZWN0c1BsYW5lKCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYm91bmRpbmcgc3BoZXJlIGludGVyc2VjdHMgd2l0aCB0aGUgcGxhbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmUgLSBUaGUgYm91bmRpbmcgc3BoZXJlIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJvdW5kaW5nIHNwaGVyZSBpbnRlcnNlY3RzIHdpdGggdGhlIHBsYW5lIG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiBzcGhlcmUuaW50ZXJzZWN0c1BsYW5lKCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgY29wbGFuYXIgdmVjdG9yIHRvIHRoZSBwbGFuZSwgYnkgY2FsY3VsYXRpbmcgdGhlXG5cdCAqIHByb2plY3Rpb24gb2YgdGhlIG5vcm1hbCBhdCB0aGUgb3JpZ2luIG9udG8gdGhlIHBsYW5lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgY29wbGFuYXIgcG9pbnQuXG5cdCAqL1xuXHRjb3BsYW5hclBvaW50KCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHRoaXMubm9ybWFsICkubXVsdGlwbHlTY2FsYXIoIC0gdGhpcy5jb25zdGFudCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQXBwbHkgYSA0eDQgbWF0cml4IHRvIHRoZSBwbGFuZS4gVGhlIG1hdHJpeCBtdXN0IGJlIGFuIGFmZmluZSwgaG9tb2dlbmVvdXMgdHJhbnNmb3JtLlxuXHQgKlxuXHQgKiBUaGUgb3B0aW9uYWwgbm9ybWFsIG1hdHJpeCBjYW4gYmUgcHJlLWNvbXB1dGVkIGxpa2Ugc286XG5cdCAqIGBgYGpzXG5cdCAqIGNvbnN0IG9wdGlvbmFsTm9ybWFsTWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgoIG1hdHJpeCApO1xuXHQgKiBgYGBcblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IFtvcHRpb25hbE5vcm1hbE1hdHJpeF0gLSBBIHByZS1jb21wdXRlZCBub3JtYWwgbWF0cml4LlxuXHQgKiBAcmV0dXJuIHtQbGFuZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBwbGFuZS5cblx0ICovXG5cdGFwcGx5TWF0cml4NCggbWF0cml4LCBvcHRpb25hbE5vcm1hbE1hdHJpeCApIHtcblxuXHRcdGNvbnN0IG5vcm1hbE1hdHJpeCA9IG9wdGlvbmFsTm9ybWFsTWF0cml4IHx8IF9ub3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdGNvbnN0IHJlZmVyZW5jZVBvaW50ID0gdGhpcy5jb3BsYW5hclBvaW50KCBfdmVjdG9yMSApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRjb25zdCBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcmVmZXJlbmNlUG9pbnQuZG90KCBub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJhbnNsYXRlcyB0aGUgcGxhbmUgYnkgdGhlIGRpc3RhbmNlIGRlZmluZWQgYnkgdGhlIGdpdmVuIG9mZnNldCB2ZWN0b3IuXG5cdCAqIE5vdGUgdGhhdCB0aGlzIG9ubHkgYWZmZWN0cyB0aGUgcGxhbmUgY29uc3RhbnQgYW5kIHdpbGwgbm90IGFmZmVjdCB0aGUgbm9ybWFsIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBvZmZzZXQgLSBUaGUgb2Zmc2V0IHZlY3Rvci5cblx0ICogQHJldHVybiB7UGxhbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGxhbmUuXG5cdCAqL1xuXHR0cmFuc2xhdGUoIG9mZnNldCApIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgLT0gb2Zmc2V0LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBwbGFuZSBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxhbmV9IHBsYW5lIC0gVGhlIHBsYW5lIHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgcGxhbmUgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKi9cblx0ZXF1YWxzKCBwbGFuZSApIHtcblxuXHRcdHJldHVybiBwbGFuZS5ub3JtYWwuZXF1YWxzKCB0aGlzLm5vcm1hbCApICYmICggcGxhbmUuY29uc3RhbnQgPT09IHRoaXMuY29uc3RhbnQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgcGxhbmUgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7UGxhbmV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfc3BoZXJlJDMgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcbmNvbnN0IF92ZWN0b3IkNiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBGcnVzdHVtcyBhcmUgdXNlZCB0byBkZXRlcm1pbmUgd2hhdCBpcyBpbnNpZGUgdGhlIGNhbWVyYSdzIGZpZWxkIG9mIHZpZXcuXG4gKiBUaGV5IGhlbHAgc3BlZWQgdXAgdGhlIHJlbmRlcmluZyBwcm9jZXNzIC0gb2JqZWN0cyB3aGljaCBsaWUgb3V0c2lkZSBhIGNhbWVyYSdzXG4gKiBmcnVzdHVtIGNhbiBzYWZlbHkgYmUgZXhjbHVkZWQgZnJvbSByZW5kZXJpbmcuXG4gKlxuICogVGhpcyBjbGFzcyBpcyBtYWlubHkgaW50ZW5kZWQgZm9yIHVzZSBpbnRlcm5hbGx5IGJ5IGEgcmVuZGVyZXIuXG4gKi9cbmNsYXNzIEZydXN0dW0ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZydXN0dW0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGxhbmV9IFtwMF0gLSBUaGUgZmlyc3QgcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS5cblx0ICogQHBhcmFtIHtQbGFuZX0gW3AxXSAtIFRoZSBzZWNvbmQgcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS5cblx0ICogQHBhcmFtIHtQbGFuZX0gW3AyXSAtIFRoZSB0aGlyZCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLlxuXHQgKiBAcGFyYW0ge1BsYW5lfSBbcDNdIC0gVGhlIGZvdXJ0aCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLlxuXHQgKiBAcGFyYW0ge1BsYW5lfSBbcDRdIC0gVGhlIGZpZnRoIHBsYW5lIHRoYXQgZW5jbG9zZXMgdGhlIGZydXN0dW0uXG5cdCAqIEBwYXJhbSB7UGxhbmV9IFtwNV0gLSBUaGUgc2l4dGggcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwMCA9IG5ldyBQbGFuZSgpLCBwMSA9IG5ldyBQbGFuZSgpLCBwMiA9IG5ldyBQbGFuZSgpLCBwMyA9IG5ldyBQbGFuZSgpLCBwNCA9IG5ldyBQbGFuZSgpLCBwNSA9IG5ldyBQbGFuZSgpICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBhcnJheSBob2xkcyB0aGUgcGxhbmVzIHRoYXQgZW5jbG9zZSB0aGUgZnJ1c3R1bS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxQbGFuZT59XG5cdFx0ICovXG5cdFx0dGhpcy5wbGFuZXMgPSBbIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGZydXN0dW0gcGxhbmVzIGJ5IGNvcHlpbmcgdGhlIGdpdmVuIHBsYW5lcy5cblx0ICpcblx0ICogQHBhcmFtIHtQbGFuZX0gW3AwXSAtIFRoZSBmaXJzdCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLlxuXHQgKiBAcGFyYW0ge1BsYW5lfSBbcDFdIC0gVGhlIHNlY29uZCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLlxuXHQgKiBAcGFyYW0ge1BsYW5lfSBbcDJdIC0gVGhlIHRoaXJkIHBsYW5lIHRoYXQgZW5jbG9zZXMgdGhlIGZydXN0dW0uXG5cdCAqIEBwYXJhbSB7UGxhbmV9IFtwM10gLSBUaGUgZm91cnRoIHBsYW5lIHRoYXQgZW5jbG9zZXMgdGhlIGZydXN0dW0uXG5cdCAqIEBwYXJhbSB7UGxhbmV9IFtwNF0gLSBUaGUgZmlmdGggcGxhbmUgdGhhdCBlbmNsb3NlcyB0aGUgZnJ1c3R1bS5cblx0ICogQHBhcmFtIHtQbGFuZX0gW3A1XSAtIFRoZSBzaXh0aCBwbGFuZSB0aGF0IGVuY2xvc2VzIHRoZSBmcnVzdHVtLlxuXHQgKiBAcmV0dXJuIHtGcnVzdHVtfSBBIHJlZmVyZW5jZSB0byB0aGlzIGZydXN0dW0uXG5cdCAqL1xuXHRzZXQoIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdHBsYW5lc1sgMCBdLmNvcHkoIHAwICk7XG5cdFx0cGxhbmVzWyAxIF0uY29weSggcDEgKTtcblx0XHRwbGFuZXNbIDIgXS5jb3B5KCBwMiApO1xuXHRcdHBsYW5lc1sgMyBdLmNvcHkoIHAzICk7XG5cdFx0cGxhbmVzWyA0IF0uY29weSggcDQgKTtcblx0XHRwbGFuZXNbIDUgXS5jb3B5KCBwNSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gZnJ1c3R1bSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0ZydXN0dW19IGZydXN0dW0gLSBUaGUgZnJ1c3R1bSB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtGcnVzdHVtfSBBIHJlZmVyZW5jZSB0byB0aGlzIGZydXN0dW0uXG5cdCAqL1xuXHRjb3B5KCBmcnVzdHVtICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRwbGFuZXNbIGkgXS5jb3B5KCBmcnVzdHVtLnBsYW5lc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGZydXN0dW0gcGxhbmVzIGZyb20gdGhlIGdpdmVuIHByb2plY3Rpb24gbWF0cml4LlxuXHQgKlxuXHQgKiBAcGFyYW0ge01hdHJpeDR9IG0gLSBUaGUgcHJvamVjdGlvbiBtYXRyaXguXG5cdCAqIEBwYXJhbSB7KFdlYkdMQ29vcmRpbmF0ZVN5c3RlbXxXZWJHUFVDb29yZGluYXRlU3lzdGVtKX0gY29vcmRpbmF0ZVN5c3RlbSAtIFRoZSBjb29yZGluYXRlIHN5c3RlbS5cblx0ICogQHJldHVybiB7RnJ1c3R1bX0gQSByZWZlcmVuY2UgdG8gdGhpcyBmcnVzdHVtLlxuXHQgKi9cblx0c2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIG0sIGNvb3JkaW5hdGVTeXN0ZW0gPSBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHRjb25zdCBtZSA9IG0uZWxlbWVudHM7XG5cdFx0Y29uc3QgbWUwID0gbWVbIDAgXSwgbWUxID0gbWVbIDEgXSwgbWUyID0gbWVbIDIgXSwgbWUzID0gbWVbIDMgXTtcblx0XHRjb25zdCBtZTQgPSBtZVsgNCBdLCBtZTUgPSBtZVsgNSBdLCBtZTYgPSBtZVsgNiBdLCBtZTcgPSBtZVsgNyBdO1xuXHRcdGNvbnN0IG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdGNvbnN0IG1lMTIgPSBtZVsgMTIgXSwgbWUxMyA9IG1lWyAxMyBdLCBtZTE0ID0gbWVbIDE0IF0sIG1lMTUgPSBtZVsgMTUgXTtcblxuXHRcdHBsYW5lc1sgMCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMCwgbWU3IC0gbWU0LCBtZTExIC0gbWU4LCBtZTE1IC0gbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMSBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4LCBtZTE1ICsgbWUxMiApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMiBdLnNldENvbXBvbmVudHMoIG1lMyArIG1lMSwgbWU3ICsgbWU1LCBtZTExICsgbWU5LCBtZTE1ICsgbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgMyBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMSwgbWU3IC0gbWU1LCBtZTExIC0gbWU5LCBtZTE1IC0gbWUxMyApLm5vcm1hbGl6ZSgpO1xuXHRcdHBsYW5lc1sgNCBdLnNldENvbXBvbmVudHMoIG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCwgbWUxNSAtIG1lMTQgKS5ub3JtYWxpemUoKTtcblxuXHRcdGlmICggY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTIsIG1lNyArIG1lNiwgbWUxMSArIG1lMTAsIG1lMTUgKyBtZTE0ICkubm9ybWFsaXplKCk7XG5cblx0XHR9IGVsc2UgaWYgKCBjb29yZGluYXRlU3lzdGVtID09PSBXZWJHUFVDb29yZGluYXRlU3lzdGVtICkge1xuXG5cdFx0XHRwbGFuZXNbIDUgXS5zZXRDb21wb25lbnRzKCBtZTIsIG1lNiwgbWUxMCwgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuRnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCgpOiBJbnZhbGlkIGNvb3JkaW5hdGUgc3lzdGVtOiAnICsgY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgM0Qgb2JqZWN0J3MgYm91bmRpbmcgc3BoZXJlIGlzIGludGVyc2VjdGluZyB0aGlzIGZydXN0dW0uXG5cdCAqXG5cdCAqIE5vdGUgdGhhdCB0aGUgM0Qgb2JqZWN0IG11c3QgaGF2ZSBhIGdlb21ldHJ5IHNvIHRoYXQgdGhlIGJvdW5kaW5nIHNwaGVyZSBjYW4gYmUgY2FsY3VsYXRlZC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gVGhlIDNEIG9iamVjdCB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSAzRCBvYmplY3QncyBib3VuZGluZyBzcGhlcmUgaXMgaW50ZXJzZWN0aW5nIHRoaXMgZnJ1c3R1bSBvciBub3QuXG5cdCAqL1xuXHRpbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIG9iamVjdC5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdFx0X3NwaGVyZSQzLmNvcHkoIG9iamVjdC5ib3VuZGluZ1NwaGVyZSApLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0XHRfc3BoZXJlJDMuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKS5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gc3ByaXRlIGlzIGludGVyc2VjdGluZyB0aGlzIGZydXN0dW0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3ByaXRlfSBzcHJpdGUgLSBUaGUgc3ByaXRlIHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHNwcml0ZSBpcyBpbnRlcnNlY3RpbmcgdGhpcyBmcnVzdHVtIG9yIG5vdC5cblx0ICovXG5cdGludGVyc2VjdHNTcHJpdGUoIHNwcml0ZSApIHtcblxuXHRcdF9zcGhlcmUkMy5jZW50ZXIuc2V0KCAwLCAwLCAwICk7XG5cdFx0X3NwaGVyZSQzLnJhZGl1cyA9IDAuNzA3MTA2NzgxMTg2NTQ3Njtcblx0XHRfc3BoZXJlJDMuYXBwbHlNYXRyaXg0KCBzcHJpdGUubWF0cml4V29ybGQgKTtcblxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUkMyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGJvdW5kaW5nIHNwaGVyZSBpcyBpbnRlcnNlY3RpbmcgdGhpcyBmcnVzdHVtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlIC0gVGhlIGJvdW5kaW5nIHNwaGVyZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBib3VuZGluZyBzcGhlcmUgaXMgaW50ZXJzZWN0aW5nIHRoaXMgZnJ1c3R1bSBvciBub3QuXG5cdCAqL1xuXHRpbnRlcnNlY3RzU3BoZXJlKCBzcGhlcmUgKSB7XG5cblx0XHRjb25zdCBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHRjb25zdCBjZW50ZXIgPSBzcGhlcmUuY2VudGVyO1xuXHRcdGNvbnN0IG5lZ1JhZGl1cyA9IC0gc3BoZXJlLnJhZGl1cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGRpc3RhbmNlID0gcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBjZW50ZXIgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IG5lZ1JhZGl1cyApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIGJvdW5kaW5nIGJveCBpcyBpbnRlcnNlY3RpbmcgdGhpcyBmcnVzdHVtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDN9IGJveCAtIFRoZSBib3VuZGluZyBib3ggdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYm91bmRpbmcgYm94IGlzIGludGVyc2VjdGluZyB0aGlzIGZydXN0dW0gb3Igbm90LlxuXHQgKi9cblx0aW50ZXJzZWN0c0JveCggYm94ICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwbGFuZSA9IHBsYW5lc1sgaSBdO1xuXG5cdFx0XHQvLyBjb3JuZXIgYXQgbWF4IGRpc3RhbmNlXG5cblx0XHRcdF92ZWN0b3IkNi54ID0gcGxhbmUubm9ybWFsLnggPiAwID8gYm94Lm1heC54IDogYm94Lm1pbi54O1xuXHRcdFx0X3ZlY3RvciQ2LnkgPSBwbGFuZS5ub3JtYWwueSA+IDAgPyBib3gubWF4LnkgOiBib3gubWluLnk7XG5cdFx0XHRfdmVjdG9yJDYueiA9IHBsYW5lLm5vcm1hbC56ID4gMCA/IGJveC5tYXgueiA6IGJveC5taW4uejtcblxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIF92ZWN0b3IkNiApIDwgMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHBvaW50IGxpZXMgd2l0aGluIHRoZSBmcnVzdHVtLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHBvaW50IC0gVGhlIHBvaW50IHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHBvaW50IGxpZXMgd2l0aGluIHRoaXMgZnJ1c3R1bSBvciBub3QuXG5cdCAqL1xuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdGNvbnN0IHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBwbGFuZXNbIGkgXS5kaXN0YW5jZVRvUG9pbnQoIHBvaW50ICkgPCAwICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGZydXN0dW0gd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7RnJ1c3R1bX0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGFzY0lkU29ydCggYSwgYiApIHtcblxuXHRyZXR1cm4gYSAtIGI7XG5cbn1cblxuZnVuY3Rpb24gc29ydE9wYXF1ZSggYSwgYiApIHtcblxuXHRyZXR1cm4gYS56IC0gYi56O1xuXG59XG5cbmZ1bmN0aW9uIHNvcnRUcmFuc3BhcmVudCggYSwgYiApIHtcblxuXHRyZXR1cm4gYi56IC0gYS56O1xuXG59XG5cbmNsYXNzIE11bHRpRHJhd1JlbmRlckxpc3Qge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cdFx0dGhpcy5wb29sID0gW107XG5cdFx0dGhpcy5saXN0ID0gW107XG5cblx0fVxuXG5cdHB1c2goIHN0YXJ0LCBjb3VudCwgeiwgaW5kZXggKSB7XG5cblx0XHRjb25zdCBwb29sID0gdGhpcy5wb29sO1xuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLmxpc3Q7XG5cdFx0aWYgKCB0aGlzLmluZGV4ID49IHBvb2wubGVuZ3RoICkge1xuXG5cdFx0XHRwb29sLnB1c2goIHtcblxuXHRcdFx0XHRzdGFydDogLTEsXG5cdFx0XHRcdGNvdW50OiAtMSxcblx0XHRcdFx0ejogLTEsXG5cdFx0XHRcdGluZGV4OiAtMSxcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaXRlbSA9IHBvb2xbIHRoaXMuaW5kZXggXTtcblx0XHRsaXN0LnB1c2goIGl0ZW0gKTtcblx0XHR0aGlzLmluZGV4ICsrO1xuXG5cdFx0aXRlbS5zdGFydCA9IHN0YXJ0O1xuXHRcdGl0ZW0uY291bnQgPSBjb3VudDtcblx0XHRpdGVtLnogPSB6O1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblxuXHR9XG5cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLmxpc3QubGVuZ3RoID0gMDtcblx0XHR0aGlzLmluZGV4ID0gMDtcblxuXHR9XG5cbn1cblxuY29uc3QgX21hdHJpeCQxID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX3doaXRlQ29sb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMSwgMSwgMSApO1xuY29uc3QgX2ZydXN0dW0gPSAvKkBfX1BVUkVfXyovIG5ldyBGcnVzdHVtKCk7XG5jb25zdCBfYm94JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBCb3gzKCk7XG5jb25zdCBfc3BoZXJlJDIgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcbmNvbnN0IF92ZWN0b3IkNSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9mb3J3YXJkID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3RlbXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcmVuZGVyTGlzdCA9IC8qQF9fUFVSRV9fKi8gbmV3IE11bHRpRHJhd1JlbmRlckxpc3QoKTtcbmNvbnN0IF9tZXNoID0gLypAX19QVVJFX18qLyBuZXcgTWVzaCgpO1xuY29uc3QgX2JhdGNoSW50ZXJzZWN0cyA9IFtdO1xuXG4vLyBjb3BpZXMgZGF0YSBmcm9tIGF0dHJpYnV0ZSBcInNyY1wiIGludG8gXCJ0YXJnZXRcIiBzdGFydGluZyBhdCBcInRhcmdldE9mZnNldFwiXG5mdW5jdGlvbiBjb3B5QXR0cmlidXRlRGF0YSggc3JjLCB0YXJnZXQsIHRhcmdldE9mZnNldCA9IDAgKSB7XG5cblx0Y29uc3QgaXRlbVNpemUgPSB0YXJnZXQuaXRlbVNpemU7XG5cdGlmICggc3JjLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgfHwgc3JjLmFycmF5LmNvbnN0cnVjdG9yICE9PSB0YXJnZXQuYXJyYXkuY29uc3RydWN0b3IgKSB7XG5cblx0XHQvLyB1c2UgdGhlIGNvbXBvbmVudCBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGlmIHRoZSBhcnJheSBkYXRhIGNhbm5vdFxuXHRcdC8vIGJlIGNvcGllZCBkaXJlY3RseVxuXHRcdGNvbnN0IHZlcnRleENvdW50ID0gc3JjLmNvdW50O1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZlcnRleENvdW50OyBpICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgYyA9IDA7IGMgPCBpdGVtU2l6ZTsgYyArKyApIHtcblxuXHRcdFx0XHR0YXJnZXQuc2V0Q29tcG9uZW50KCBpICsgdGFyZ2V0T2Zmc2V0LCBjLCBzcmMuZ2V0Q29tcG9uZW50KCBpLCBjICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBmYXN0ZXIgY29weSBhcHByb2FjaCB1c2luZyB0eXBlZCBhcnJheSBzZXQgZnVuY3Rpb25cblx0XHR0YXJnZXQuYXJyYXkuc2V0KCBzcmMuYXJyYXksIHRhcmdldE9mZnNldCAqIGl0ZW1TaXplICk7XG5cblx0fVxuXG5cdHRhcmdldC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuLy8gc2FmZWx5IGNvcGllcyBhcnJheSBjb250ZW50cyB0byBhIHBvdGVudGlhbGx5IHNtYWxsZXIgYXJyYXlcbmZ1bmN0aW9uIGNvcHlBcnJheUNvbnRlbnRzKCBzcmMsIHRhcmdldCApIHtcblxuXHRpZiAoIHNyYy5jb25zdHJ1Y3RvciAhPT0gdGFyZ2V0LmNvbnN0cnVjdG9yICkge1xuXG5cdFx0Ly8gaWYgYXJyYXlzIGFyZSBvZiBhIGRpZmZlcmVudCB0eXBlIChlZyBkdWUgdG8gaW5kZXggc2l6ZSBpbmNyZWFzaW5nKSB0aGVuIGRhdGEgbXVzdCBiZSBwZXItZWxlbWVudCBjb3BpZWRcblx0XHRjb25zdCBsZW4gPSBNYXRoLm1pbiggc3JjLmxlbmd0aCwgdGFyZ2V0Lmxlbmd0aCApO1xuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbjsgaSArKyApIHtcblxuXHRcdFx0dGFyZ2V0WyBpIF0gPSBzcmNbIGkgXTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gaWYgdGhlIGFycmF5cyB1c2UgdGhlIHNhbWUgZGF0YSBsYXlvdXQgd2UgY2FuIHVzZSBhIGZhc3QgYmxvY2sgY29weVxuXHRcdGNvbnN0IGxlbiA9IE1hdGgubWluKCBzcmMubGVuZ3RoLCB0YXJnZXQubGVuZ3RoICk7XG5cdFx0dGFyZ2V0LnNldCggbmV3IHNyYy5jb25zdHJ1Y3Rvciggc3JjLmJ1ZmZlciwgMCwgbGVuICkgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIHNwZWNpYWwgdmVyc2lvbiBvZiBhIG1lc2ggd2l0aCBtdWx0aSBkcmF3IGJhdGNoIHJlbmRlcmluZyBzdXBwb3J0LiBVc2VcbiAqIHRoaXMgY2xhc3MgaWYgeW91IGhhdmUgdG8gcmVuZGVyIGEgbGFyZ2UgbnVtYmVyIG9mIG9iamVjdHMgd2l0aCB0aGUgc2FtZVxuICogbWF0ZXJpYWwgYnV0IHdpdGggZGlmZmVyZW50IGdlb21ldHJpZXMgb3Igd29ybGQgdHJhbnNmb3JtYXRpb25zLiBUaGUgdXNhZ2Ugb2ZcbiAqIGBCYXRjaGVkTWVzaGAgd2lsbCBoZWxwIHlvdSB0byByZWR1Y2UgdGhlIG51bWJlciBvZiBkcmF3IGNhbGxzIGFuZCB0aHVzIGltcHJvdmUgdGhlIG92ZXJhbGxcbiAqIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBib3ggPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoIDEsIDEsIDEgKTtcbiAqIGNvbnN0IHNwaGVyZSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSggMSwgMTIsIDEyICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgwMGZmMDAgfSApO1xuICpcbiAqIC8vIGluaXRpYWxpemUgYW5kIGFkZCBnZW9tZXRyaWVzIGludG8gdGhlIGJhdGNoZWQgbWVzaFxuICogY29uc3QgYmF0Y2hlZE1lc2ggPSBuZXcgQmF0Y2hlZE1lc2goIDEwLCA1MDAwLCAxMDAwMCwgbWF0ZXJpYWwgKTtcbiAqIGNvbnN0IGJveEdlb21ldHJ5SWQgPSBiYXRjaGVkTWVzaC5hZGRHZW9tZXRyeSggYm94ICk7XG4gKiBjb25zdCBzcGhlcmVHZW9tZXRyeUlkID0gYmF0Y2hlZE1lc2guYWRkR2VvbWV0cnkoIHNwaGVyZSApO1xuICpcbiAqIC8vIGNyZWF0ZSBpbnN0YW5jZXMgb2YgdGhvc2UgZ2VvbWV0cmllc1xuICogY29uc3QgYm94SW5zdGFuY2VkSWQxID0gYmF0Y2hlZE1lc2guYWRkSW5zdGFuY2UoIGJveEdlb21ldHJ5SWQgKTtcbiAqIGNvbnN0IGJveEluc3RhbmNlZElkMiA9IGJhdGNoZWRNZXNoLmFkZEluc3RhbmNlKCBib3hHZW9tZXRyeUlkICk7XG4gKlxuICogY29uc3Qgc3BoZXJlSW5zdGFuY2VkSWQxID0gYmF0Y2hlZE1lc2guYWRkSW5zdGFuY2UoIHNwaGVyZUdlb21ldHJ5SWQgKTtcbiAqIGNvbnN0IHNwaGVyZUluc3RhbmNlZElkMiA9IGJhdGNoZWRNZXNoLmFkZEluc3RhbmNlKCBzcGhlcmVHZW9tZXRyeUlkICk7XG4gKlxuICogLy8gcG9zaXRpb24gdGhlIGdlb21ldHJpZXNcbiAqIGJhdGNoZWRNZXNoLnNldE1hdHJpeEF0KCBib3hJbnN0YW5jZWRJZDEsIGJveE1hdHJpeDEgKTtcbiAqIGJhdGNoZWRNZXNoLnNldE1hdHJpeEF0KCBib3hJbnN0YW5jZWRJZDIsIGJveE1hdHJpeDIgKTtcbiAqXG4gKiBiYXRjaGVkTWVzaC5zZXRNYXRyaXhBdCggc3BoZXJlSW5zdGFuY2VkSWQxLCBzcGhlcmVNYXRyaXgxICk7XG4gKiBiYXRjaGVkTWVzaC5zZXRNYXRyaXhBdCggc3BoZXJlSW5zdGFuY2VkSWQyLCBzcGhlcmVNYXRyaXgyICk7XG4gKlxuICogc2NlbmUuYWRkKCBiYXRjaGVkTWVzaCApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIE1lc2hcbiAqL1xuY2xhc3MgQmF0Y2hlZE1lc2ggZXh0ZW5kcyBNZXNoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBiYXRjaGVkIG1lc2guXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtYXhJbnN0YW5jZUNvdW50IC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGluZGl2aWR1YWwgaW5zdGFuY2VzIHBsYW5uZWQgdG8gYmUgYWRkZWQgYW5kIHJlbmRlcmVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4VmVydGV4Q291bnQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgdmVydGljZXMgdG8gYmUgdXNlZCBieSBhbGwgdW5pcXVlIGdlb21ldHJpZXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4SW5kZXhDb3VudD1tYXhWZXJ0ZXhDb3VudCoyXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpbmRpY2VzIHRvIGJlIHVzZWQgYnkgYWxsIHVuaXF1ZSBnZW9tZXRyaWVzXG5cdCAqIEBwYXJhbSB7TWF0ZXJpYWx8QXJyYXk8TWF0ZXJpYWw+fSBbbWF0ZXJpYWxdIC0gVGhlIG1lc2ggbWF0ZXJpYWwuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWF4SW5zdGFuY2VDb3VudCwgbWF4VmVydGV4Q291bnQsIG1heEluZGV4Q291bnQgPSBtYXhWZXJ0ZXhDb3VudCAqIDIsIG1hdGVyaWFsICkge1xuXG5cdFx0c3VwZXIoIG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0JhdGNoZWRNZXNoID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gc2V0IG90IGB0cnVlYCwgdGhlIGluZGl2aWR1YWwgb2JqZWN0cyBvZiBhIGJhdGNoIGFyZSBmcnVzdHVtIGN1bGxlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hlbiBzZXQgdG8gYHRydWVgLCB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG9mIGEgYmF0Y2ggYXJlIHNvcnRlZCB0byBpbXByb3ZlIG92ZXJkcmF3LXJlbGF0ZWQgYXJ0aWZhY3RzLlxuXHRcdCAqIElmIHRoZSBtYXRlcmlhbCBpcyBtYXJrZWQgYXMgXCJ0cmFuc3BhcmVudFwiIG9iamVjdHMgYXJlIHJlbmRlcmVkIGJhY2sgdG8gZnJvbnQgYW5kIGlmIG5vdCB0aGVuIHRoZXkgYXJlXG5cdFx0ICogcmVuZGVyZWQgZnJvbnQgdG8gYmFjay5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnNvcnRPYmplY3RzID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBib3VuZGluZyBib3ggb2YgdGhlIGJhdGNoZWQgbWVzaC4gQ2FuIGJlIGNvbXB1dGVkIHZpYSB7QGxpbmsgQmF0Y2hlZE1lc2gjY29tcHV0ZUJvdW5kaW5nQm94fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Qm94M31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYm91bmRpbmcgc3BoZXJlIG9mIHRoZSBiYXRjaGVkIG1lc2guIENhbiBiZSBjb21wdXRlZCB2aWEge0BsaW5rIEJhdGNoZWRNZXNoI2NvbXB1dGVCb3VuZGluZ1NwaGVyZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1NwaGVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUYWtlcyBhIHNvcnQgYSBmdW5jdGlvbiB0aGF0IGlzIHJ1biBiZWZvcmUgcmVuZGVyLiBUaGUgZnVuY3Rpb24gdGFrZXMgYSBsaXN0IG9mIGluc3RhbmNlcyB0b1xuXHRcdCAqIHNvcnQgYW5kIGEgY2FtZXJhLiBUaGUgb2JqZWN0cyBpbiB0aGUgbGlzdCBpbmNsdWRlIGEgXCJ6XCIgZmllbGQgdG8gcGVyZm9ybSBhIGRlcHRoLW9yZGVyZWRcblx0XHQgKiBzb3J0IHdpdGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P0Z1bmN0aW9ufVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmN1c3RvbVNvcnQgPSBudWxsO1xuXG5cdFx0Ly8gc3RvcmVzIHZpc2libGUsIGFjdGl2ZSwgYW5kIGdlb21ldHJ5IGlkIHBlciBpbnN0YW5jZSBhbmQgcmVzZXJ2ZWQgYnVmZmVyIHJhbmdlcyBmb3IgZ2VvbWV0cmllc1xuXHRcdHRoaXMuX2luc3RhbmNlSW5mbyA9IFtdO1xuXHRcdHRoaXMuX2dlb21ldHJ5SW5mbyA9IFtdO1xuXG5cdFx0Ly8gaW5zdGFuY2UsIGdlb21ldHJ5IGlkcyB0aGF0IGhhdmUgYmVlbiBzZXQgYXMgaW5hY3RpdmUsIGFuZCBhcmUgYXZhaWxhYmxlIHRvIGJlIG92ZXJ3cml0dGVuXG5cdFx0dGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHMgPSBbXTtcblx0XHR0aGlzLl9hdmFpbGFibGVHZW9tZXRyeUlkcyA9IFtdO1xuXG5cdFx0Ly8gdXNlZCB0byB0cmFjayB3aGVyZSB0aGUgbmV4dCBwb2ludCBpcyB0aGF0IGdlb21ldHJ5IHNob3VsZCBiZSBpbnNlcnRlZFxuXHRcdHRoaXMuX25leHRJbmRleFN0YXJ0ID0gMDtcblx0XHR0aGlzLl9uZXh0VmVydGV4U3RhcnQgPSAwO1xuXHRcdHRoaXMuX2dlb21ldHJ5Q291bnQgPSAwO1xuXG5cdFx0Ly8gZmxhZ3Ncblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XG5cdFx0dGhpcy5fZ2VvbWV0cnlJbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0Ly8gY2FjaGVkIHVzZXIgb3B0aW9uc1xuXHRcdHRoaXMuX21heEluc3RhbmNlQ291bnQgPSBtYXhJbnN0YW5jZUNvdW50O1xuXHRcdHRoaXMuX21heFZlcnRleENvdW50ID0gbWF4VmVydGV4Q291bnQ7XG5cdFx0dGhpcy5fbWF4SW5kZXhDb3VudCA9IG1heEluZGV4Q291bnQ7XG5cblx0XHQvLyBidWZmZXJzIGZvciBtdWx0aSBkcmF3XG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gbmV3IEludDMyQXJyYXkoIG1heEluc3RhbmNlQ291bnQgKTtcblx0XHR0aGlzLl9tdWx0aURyYXdTdGFydHMgPSBuZXcgSW50MzJBcnJheSggbWF4SW5zdGFuY2VDb3VudCApO1xuXHRcdHRoaXMuX211bHRpRHJhd0NvdW50ID0gMDtcblx0XHR0aGlzLl9tdWx0aURyYXdJbnN0YW5jZXMgPSBudWxsO1xuXG5cdFx0Ly8gTG9jYWwgbWF0cml4IHBlciBnZW9tZXRyeSBieSB1c2luZyBkYXRhIHRleHR1cmVcblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUgPSBudWxsO1xuXHRcdHRoaXMuX2luZGlyZWN0VGV4dHVyZSA9IG51bGw7XG5cdFx0dGhpcy5fY29sb3JzVGV4dHVyZSA9IG51bGw7XG5cblx0XHR0aGlzLl9pbml0TWF0cmljZXNUZXh0dXJlKCk7XG5cdFx0dGhpcy5faW5pdEluZGlyZWN0VGV4dHVyZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGluZGl2aWR1YWwgaW5zdGFuY2VzIHRoYXQgY2FuIGJlIHN0b3JlZCBpbiB0aGUgYmF0Y2guXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IG1heEluc3RhbmNlQ291bnQoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbWF4SW5zdGFuY2VDb3VudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBpbnN0YW5jZSBjb3VudC5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHJlYWRvbmx5XG5cdCAqL1xuXHRnZXQgaW5zdGFuY2VDb3VudCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9pbnN0YW5jZUluZm8ubGVuZ3RoIC0gdGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHMubGVuZ3RoO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiB1bnVzZWQgdmVydGljZXMuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IHVudXNlZFZlcnRleENvdW50KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21heFZlcnRleENvdW50IC0gdGhpcy5fbmV4dFZlcnRleFN0YXJ0O1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIG51bWJlciBvZiB1bnVzZWQgaW5kaWNlcy5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHJlYWRvbmx5XG5cdCAqL1xuXHRnZXQgdW51c2VkSW5kZXhDb3VudCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9tYXhJbmRleENvdW50IC0gdGhpcy5fbmV4dEluZGV4U3RhcnQ7XG5cblx0fVxuXG5cdF9pbml0TWF0cmljZXNUZXh0dXJlKCkge1xuXG5cdFx0Ly8gbGF5b3V0ICgxIG1hdHJpeCA9IDQgcGl4ZWxzKVxuXHRcdC8vICAgICAgUkdCQSBSR0JBIFJHQkEgUkdCQSAoPT4gY29sdW1uMSwgY29sdW1uMiwgY29sdW1uMywgY29sdW1uNClcblx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IG1hdHJpY2VzICogNCBwaXhlbHMgPSAgKDggKiA4KVxuXHRcdC8vICAgICAgIDE2eDE2IHBpeGVsIHRleHR1cmUgbWF4ICAgNjQgbWF0cmljZXMgKiA0IHBpeGVscyA9ICgxNiAqIDE2KVxuXHRcdC8vICAgICAgIDMyeDMyIHBpeGVsIHRleHR1cmUgbWF4ICAyNTYgbWF0cmljZXMgKiA0IHBpeGVscyA9ICgzMiAqIDMyKVxuXHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgbWF0cmljZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxuXG5cdFx0bGV0IHNpemUgPSBNYXRoLnNxcnQoIHRoaXMuX21heEluc3RhbmNlQ291bnQgKiA0ICk7IC8vIDQgcGl4ZWxzIG5lZWRlZCBmb3IgMSBtYXRyaXhcblx0XHRzaXplID0gTWF0aC5jZWlsKCBzaXplIC8gNCApICogNDtcblx0XHRzaXplID0gTWF0aC5tYXgoIHNpemUsIDQgKTtcblxuXHRcdGNvbnN0IG1hdHJpY2VzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcblx0XHRjb25zdCBtYXRyaWNlc1RleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIG1hdHJpY2VzQXJyYXksIHNpemUsIHNpemUsIFJHQkFGb3JtYXQsIEZsb2F0VHlwZSApO1xuXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gbWF0cmljZXNUZXh0dXJlO1xuXG5cdH1cblxuXHRfaW5pdEluZGlyZWN0VGV4dHVyZSgpIHtcblxuXHRcdGxldCBzaXplID0gTWF0aC5zcXJ0KCB0aGlzLl9tYXhJbnN0YW5jZUNvdW50ICk7XG5cdFx0c2l6ZSA9IE1hdGguY2VpbCggc2l6ZSApO1xuXG5cdFx0Y29uc3QgaW5kaXJlY3RBcnJheSA9IG5ldyBVaW50MzJBcnJheSggc2l6ZSAqIHNpemUgKTtcblx0XHRjb25zdCBpbmRpcmVjdFRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoIGluZGlyZWN0QXJyYXksIHNpemUsIHNpemUsIFJlZEludGVnZXJGb3JtYXQsIFVuc2lnbmVkSW50VHlwZSApO1xuXG5cdFx0dGhpcy5faW5kaXJlY3RUZXh0dXJlID0gaW5kaXJlY3RUZXh0dXJlO1xuXG5cdH1cblxuXHRfaW5pdENvbG9yc1RleHR1cmUoKSB7XG5cblx0XHRsZXQgc2l6ZSA9IE1hdGguc3FydCggdGhpcy5fbWF4SW5zdGFuY2VDb3VudCApO1xuXHRcdHNpemUgPSBNYXRoLmNlaWwoIHNpemUgKTtcblxuXHRcdC8vIDQgZmxvYXRzIHBlciBSR0JBIHBpeGVsIGluaXRpYWxpemVkIHRvIHdoaXRlXG5cdFx0Y29uc3QgY29sb3JzQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKS5maWxsKCAxICk7XG5cdFx0Y29uc3QgY29sb3JzVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggY29sb3JzQXJyYXksIHNpemUsIHNpemUsIFJHQkFGb3JtYXQsIEZsb2F0VHlwZSApO1xuXHRcdGNvbG9yc1RleHR1cmUuY29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZTtcblxuXHRcdHRoaXMuX2NvbG9yc1RleHR1cmUgPSBjb2xvcnNUZXh0dXJlO1xuXG5cdH1cblxuXHRfaW5pdGlhbGl6ZUdlb21ldHJ5KCByZWZlcmVuY2UgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF4VmVydGV4Q291bnQgPSB0aGlzLl9tYXhWZXJ0ZXhDb3VudDtcblx0XHRjb25zdCBtYXhJbmRleENvdW50ID0gdGhpcy5fbWF4SW5kZXhDb3VudDtcblx0XHRpZiAoIHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGVOYW1lIGluIHJlZmVyZW5jZS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdGNvbnN0IHNyY0F0dHJpYnV0ZSA9IHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUgKTtcblx0XHRcdFx0Y29uc3QgeyBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgfSA9IHNyY0F0dHJpYnV0ZTtcblxuXHRcdFx0XHRjb25zdCBkc3RBcnJheSA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvciggbWF4VmVydGV4Q291bnQgKiBpdGVtU2l6ZSApO1xuXHRcdFx0XHRjb25zdCBkc3RBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKCBkc3RBcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZU5hbWUsIGRzdEF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVmZXJlbmNlLmdldEluZGV4KCkgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gUmVzZXJ2ZSBsYXN0IHUxNiBpbmRleCBmb3IgcHJpbWl0aXZlIHJlc3RhcnQuXG5cdFx0XHRcdGNvbnN0IGluZGV4QXJyYXkgPSBtYXhWZXJ0ZXhDb3VudCA+IDY1NTM1XG5cdFx0XHRcdFx0PyBuZXcgVWludDMyQXJyYXkoIG1heEluZGV4Q291bnQgKVxuXHRcdFx0XHRcdDogbmV3IFVpbnQxNkFycmF5KCBtYXhJbmRleENvdW50ICk7XG5cblx0XHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGluZGV4QXJyYXksIDEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhlIGdlb21ldHJ5IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgZXhpc3RpbmcgY29tYmluZWQgZ2VvbWV0cnkgYXR0cmlidXRlc1xuXHRfdmFsaWRhdGVHZW9tZXRyeSggZ2VvbWV0cnkgKSB7XG5cblx0XHQvLyBjaGVjayB0byBlbnN1cmUgdGhlIGdlb21ldHJpZXMgYXJlIHVzaW5nIGNvbnNpc3RlbnQgYXR0cmlidXRlcyBhbmQgaW5kaWNlc1xuXHRcdGNvbnN0IGJhdGNoR2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGlmICggQm9vbGVhbiggZ2VvbWV0cnkuZ2V0SW5kZXgoKSApICE9PSBCb29sZWFuKCBiYXRjaEdlb21ldHJ5LmdldEluZGV4KCkgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuQmF0Y2hlZE1lc2g6IEFsbCBnZW9tZXRyaWVzIG11c3QgY29uc2lzdGVudGx5IGhhdmUgXCJpbmRleFwiLicgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGNvbnN0IGF0dHJpYnV0ZU5hbWUgaW4gYmF0Y2hHZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRpZiAoICEgZ2VvbWV0cnkuaGFzQXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICkgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgVEhSRUUuQmF0Y2hlZE1lc2g6IEFkZGVkIGdlb21ldHJ5IG1pc3NpbmcgXCIkeyBhdHRyaWJ1dGVOYW1lIH1cIi4gQWxsIGdlb21ldHJpZXMgbXVzdCBoYXZlIGNvbnNpc3RlbnQgYXR0cmlidXRlcy5gICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc3JjQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XG5cdFx0XHRjb25zdCBkc3RBdHRyaWJ1dGUgPSBiYXRjaEdlb21ldHJ5LmdldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApO1xuXHRcdFx0aWYgKCBzcmNBdHRyaWJ1dGUuaXRlbVNpemUgIT09IGRzdEF0dHJpYnV0ZS5pdGVtU2l6ZSB8fCBzcmNBdHRyaWJ1dGUubm9ybWFsaXplZCAhPT0gZHN0QXR0cmlidXRlLm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuQmF0Y2hlZE1lc2g6IEFsbCBhdHRyaWJ1dGVzIG11c3QgaGF2ZSBhIGNvbnNpc3RlbnQgaXRlbVNpemUgYW5kIG5vcm1hbGl6ZWQgdmFsdWUuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBWYWxpZGF0ZXMgdGhlIGluc3RhbmNlIGRlZmluZWQgYnkgdGhlIGdpdmVuIElELlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VJZCAtIFRoZSBpbnN0YW5jZSB0byB2YWxpZGF0ZS5cblx0ICovXG5cdHZhbGlkYXRlSW5zdGFuY2VJZCggaW5zdGFuY2VJZCApIHtcblxuXHRcdGNvbnN0IGluc3RhbmNlSW5mbyA9IHRoaXMuX2luc3RhbmNlSW5mbztcblx0XHRpZiAoIGluc3RhbmNlSWQgPCAwIHx8IGluc3RhbmNlSWQgPj0gaW5zdGFuY2VJbmZvLmxlbmd0aCB8fCBpbnN0YW5jZUluZm9bIGluc3RhbmNlSWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBUSFJFRS5CYXRjaGVkTWVzaDogSW52YWxpZCBpbnN0YW5jZUlkICR7aW5zdGFuY2VJZH0uIEluc3RhbmNlIGlzIGVpdGhlciBvdXQgb2YgcmFuZ2Ugb3IgaGFzIGJlZW4gZGVsZXRlZC5gICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBWYWxpZGF0ZXMgdGhlIGdlb21ldHJ5IGRlZmluZWQgYnkgdGhlIGdpdmVuIElELlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZ2VvbWV0cnlJZCAtIFRoZSBnZW9tZXRyeSB0byB2YWxpZGF0ZS5cblx0ICovXG5cdHZhbGlkYXRlR2VvbWV0cnlJZCggZ2VvbWV0cnlJZCApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mb0xpc3QgPSB0aGlzLl9nZW9tZXRyeUluZm87XG5cdFx0aWYgKCBnZW9tZXRyeUlkIDwgMCB8fCBnZW9tZXRyeUlkID49IGdlb21ldHJ5SW5mb0xpc3QubGVuZ3RoIHx8IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGBUSFJFRS5CYXRjaGVkTWVzaDogSW52YWxpZCBnZW9tZXRyeUlkICR7Z2VvbWV0cnlJZH0uIEdlb21ldHJ5IGlzIGVpdGhlciBvdXQgb2YgcmFuZ2Ugb3IgaGFzIGJlZW4gZGVsZXRlZC5gICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUYWtlcyBhIHNvcnQgYSBmdW5jdGlvbiB0aGF0IGlzIHJ1biBiZWZvcmUgcmVuZGVyLiBUaGUgZnVuY3Rpb24gdGFrZXMgYSBsaXN0IG9mIGluc3RhbmNlcyB0b1xuXHQgKiBzb3J0IGFuZCBhIGNhbWVyYS4gVGhlIG9iamVjdHMgaW4gdGhlIGxpc3QgaW5jbHVkZSBhIFwielwiIGZpZWxkIHRvIHBlcmZvcm0gYSBkZXB0aC1vcmRlcmVkIHNvcnQgd2l0aC5cblx0ICpcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIFRoZSBjdXN0b20gc29ydCBmdW5jdGlvbi5cblx0ICogQHJldHVybiB7QmF0Y2hlZE1lc2h9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYmF0Y2hlZCBtZXNoLlxuXHQgKi9cblx0c2V0Q3VzdG9tU29ydCggZnVuYyApIHtcblxuXHRcdHRoaXMuY3VzdG9tU29ydCA9IGZ1bmM7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgYm91bmRpbmcgYm94LCB1cGRhdGluZyB7QGxpbmsgQmF0Y2hlZE1lc2gjYm91bmRpbmdCb3h9LlxuXHQgKiBCb3VuZGluZyBib3hlcyBhcmVuJ3QgY29tcHV0ZWQgYnkgZGVmYXVsdC4gVGhleSBuZWVkIHRvIGJlIGV4cGxpY2l0bHkgY29tcHV0ZWQsXG5cdCAqIG90aGVyd2lzZSB0aGV5IGFyZSBgbnVsbGAuXG5cdCAqL1xuXHRjb21wdXRlQm91bmRpbmdCb3goKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYm91bmRpbmdCb3ggPSB0aGlzLmJvdW5kaW5nQm94O1xuXHRcdGNvbnN0IGluc3RhbmNlSW5mbyA9IHRoaXMuX2luc3RhbmNlSW5mbztcblxuXHRcdGJvdW5kaW5nQm94Lm1ha2VFbXB0eSgpO1xuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGluc3RhbmNlSW5mb1sgaSBdLmFjdGl2ZSA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWF0cml4JDEgKTtcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdCb3hBdCggZ2VvbWV0cnlJZCwgX2JveCQxICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4JDEgKTtcblx0XHRcdGJvdW5kaW5nQm94LnVuaW9uKCBfYm94JDEgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSBib3VuZGluZyBzcGhlcmUsIHVwZGF0aW5nIHtAbGluayBCYXRjaGVkTWVzaCNib3VuZGluZ1NwaGVyZX0uXG5cdCAqIEJvdW5kaW5nIHNwaGVyZXMgYXJlbid0IGNvbXB1dGVkIGJ5IGRlZmF1bHQuIFRoZXkgbmVlZCB0byBiZSBleHBsaWNpdGx5IGNvbXB1dGVkLFxuXHQgKiBvdGhlcndpc2UgdGhleSBhcmUgYG51bGxgLlxuXHQgKi9cblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYm91bmRpbmdTcGhlcmUgPSB0aGlzLmJvdW5kaW5nU3BoZXJlO1xuXHRcdGNvbnN0IGluc3RhbmNlSW5mbyA9IHRoaXMuX2luc3RhbmNlSW5mbztcblxuXHRcdGJvdW5kaW5nU3BoZXJlLm1ha2VFbXB0eSgpO1xuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGluc3RhbmNlSW5mb1sgaSBdLmFjdGl2ZSA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWF0cml4JDEgKTtcblx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdTcGhlcmVBdCggZ2VvbWV0cnlJZCwgX3NwaGVyZSQyICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4JDEgKTtcblx0XHRcdGJvdW5kaW5nU3BoZXJlLnVuaW9uKCBfc3BoZXJlJDIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBuZXcgaW5zdGFuY2UgdG8gdGhlIGJhdGNoIHVzaW5nIHRoZSBnZW9tZXRyeSBvZiB0aGUgZ2l2ZW4gSUQgYW5kIHJldHVybnNcblx0ICogYSBuZXcgaWQgcmVmZXJyaW5nIHRvIHRoZSBuZXcgaW5zdGFuY2UgdG8gYmUgdXNlZCBieSBvdGhlciBmdW5jdGlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBnZW9tZXRyeUlkIC0gVGhlIElEIG9mIGEgcHJldmlvdXNseSBhZGRlZCBnZW9tZXRyeSB2aWEge0BsaW5rIEJhdGNoZWRNZXNoI2FkZEdlb21ldHJ5fS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgaW5zdGFuY2UgSUQuXG5cdCAqL1xuXHRhZGRJbnN0YW5jZSggZ2VvbWV0cnlJZCApIHtcblxuXHRcdGNvbnN0IGF0Q2FwYWNpdHkgPSB0aGlzLl9pbnN0YW5jZUluZm8ubGVuZ3RoID49IHRoaXMubWF4SW5zdGFuY2VDb3VudDtcblxuXHRcdC8vIGVuc3VyZSB3ZSdyZSBub3Qgb3ZlciBnZW9tZXRyeVxuXHRcdGlmICggYXRDYXBhY2l0eSAmJiB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkJhdGNoZWRNZXNoOiBNYXhpbXVtIGl0ZW0gY291bnQgcmVhY2hlZC4nICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB7XG5cdFx0XHR2aXNpYmxlOiB0cnVlLFxuXHRcdFx0YWN0aXZlOiB0cnVlLFxuXHRcdFx0Z2VvbWV0cnlJbmRleDogZ2VvbWV0cnlJZCxcblx0XHR9O1xuXG5cdFx0bGV0IGRyYXdJZCA9IG51bGw7XG5cblx0XHQvLyBQcmlvcml0aXplIHVzaW5nIHByZXZpb3VzbHkgZnJlZWQgaW5zdGFuY2UgaWRzXG5cdFx0aWYgKCB0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5zb3J0KCBhc2NJZFNvcnQgKTtcblxuXHRcdFx0ZHJhd0lkID0gdGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHMuc2hpZnQoKTtcblx0XHRcdHRoaXMuX2luc3RhbmNlSW5mb1sgZHJhd0lkIF0gPSBpbnN0YW5jZUluZm87XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkcmF3SWQgPSB0aGlzLl9pbnN0YW5jZUluZm8ubGVuZ3RoO1xuXHRcdFx0dGhpcy5faW5zdGFuY2VJbmZvLnB1c2goIGluc3RhbmNlSW5mbyApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0cmljZXNUZXh0dXJlID0gdGhpcy5fbWF0cmljZXNUZXh0dXJlO1xuXHRcdF9tYXRyaXgkMS5pZGVudGl0eSgpLnRvQXJyYXkoIG1hdHJpY2VzVGV4dHVyZS5pbWFnZS5kYXRhLCBkcmF3SWQgKiAxNiApO1xuXHRcdG1hdHJpY2VzVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRjb25zdCBjb2xvcnNUZXh0dXJlID0gdGhpcy5fY29sb3JzVGV4dHVyZTtcblx0XHRpZiAoIGNvbG9yc1RleHR1cmUgKSB7XG5cblx0XHRcdF93aGl0ZUNvbG9yLnRvQXJyYXkoIGNvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YSwgZHJhd0lkICogNCApO1xuXHRcdFx0Y29sb3JzVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XG5cdFx0cmV0dXJuIGRyYXdJZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIGdpdmVuIGdlb21ldHJ5IHRvIHRoZSBiYXRjaCBhbmQgcmV0dXJucyB0aGUgYXNzb2NpYXRlZFxuXHQgKiBnZW9tZXRyeSBpZCByZWZlcnJpbmcgdG8gaXQgdG8gYmUgdXNlZCBpbiBvdGhlciBmdW5jdGlvbnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIGdlb21ldHJ5IHRvIGFkZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyZXNlcnZlZFZlcnRleENvdW50PS0xXSAtIE9wdGlvbmFsIHBhcmFtZXRlciBzcGVjaWZ5aW5nIHRoZSBhbW91bnQgb2Zcblx0ICogdmVydGV4IGJ1ZmZlciBzcGFjZSB0byByZXNlcnZlIGZvciB0aGUgYWRkZWQgZ2VvbWV0cnkuIFRoaXMgaXMgbmVjZXNzYXJ5IGlmIGl0IGlzIHBsYW5uZWRcblx0ICogdG8gc2V0IGEgbmV3IGdlb21ldHJ5IGF0IHRoaXMgaW5kZXggYXQgYSBsYXRlciB0aW1lIHRoYXQgaXMgbGFyZ2VyIHRoYW4gdGhlIG9yaWdpbmFsIGdlb21ldHJ5LlxuXHQgKiBEZWZhdWx0cyB0byB0aGUgbGVuZ3RoIG9mIHRoZSBnaXZlbiBnZW9tZXRyeSB2ZXJ0ZXggYnVmZmVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3Jlc2VydmVkSW5kZXhDb3VudD0tMV0gLSBPcHRpb25hbCBwYXJhbWV0ZXIgc3BlY2lmeWluZyB0aGUgYW1vdW50IG9mIGluZGV4XG5cdCAqIGJ1ZmZlciBzcGFjZSB0byByZXNlcnZlIGZvciB0aGUgYWRkZWQgZ2VvbWV0cnkuIFRoaXMgaXMgbmVjZXNzYXJ5IGlmIGl0IGlzIHBsYW5uZWQgdG8gc2V0IGFcblx0ICogbmV3IGdlb21ldHJ5IGF0IHRoaXMgaW5kZXggYXQgYSBsYXRlciB0aW1lIHRoYXQgaXMgbGFyZ2VyIHRoYW4gdGhlIG9yaWdpbmFsIGdlb21ldHJ5LiBEZWZhdWx0cyB0b1xuXHQgKiB0aGUgbGVuZ3RoIG9mIHRoZSBnaXZlbiBnZW9tZXRyeSBpbmRleCBidWZmZXIuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGdlb21ldHJ5IElELlxuXHQgKi9cblx0YWRkR2VvbWV0cnkoIGdlb21ldHJ5LCByZXNlcnZlZFZlcnRleENvdW50ID0gLTEsIHJlc2VydmVkSW5kZXhDb3VudCA9IC0xICkge1xuXG5cdFx0dGhpcy5faW5pdGlhbGl6ZUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0dGhpcy5fdmFsaWRhdGVHZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IHtcblx0XHRcdC8vIGdlb21ldHJ5IGluZm9ybWF0aW9uXG5cdFx0XHR2ZXJ0ZXhTdGFydDogLTEsXG5cdFx0XHR2ZXJ0ZXhDb3VudDogLTEsXG5cdFx0XHRyZXNlcnZlZFZlcnRleENvdW50OiAtMSxcblxuXHRcdFx0aW5kZXhTdGFydDogLTEsXG5cdFx0XHRpbmRleENvdW50OiAtMSxcblx0XHRcdHJlc2VydmVkSW5kZXhDb3VudDogLTEsXG5cblx0XHRcdC8vIGRyYXcgcmFuZ2UgaW5mb3JtYXRpb25cblx0XHRcdHN0YXJ0OiAtMSxcblx0XHRcdGNvdW50OiAtMSxcblxuXHRcdFx0Ly8gc3RhdGVcblx0XHRcdGJvdW5kaW5nQm94OiBudWxsLFxuXHRcdFx0Ym91bmRpbmdTcGhlcmU6IG51bGwsXG5cdFx0XHRhY3RpdmU6IHRydWUsXG5cdFx0fTtcblxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mb0xpc3QgPSB0aGlzLl9nZW9tZXRyeUluZm87XG5cdFx0Z2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0ID0gdGhpcy5fbmV4dFZlcnRleFN0YXJ0O1xuXHRcdGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50ID0gcmVzZXJ2ZWRWZXJ0ZXhDb3VudCA9PT0gLTEgPyBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5jb3VudCA6IHJlc2VydmVkVmVydGV4Q291bnQ7XG5cblx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG5cdFx0Y29uc3QgaGFzSW5kZXggPSBpbmRleCAhPT0gbnVsbDtcblx0XHRpZiAoIGhhc0luZGV4ICkge1xuXG5cdFx0XHRnZW9tZXRyeUluZm8uaW5kZXhTdGFydCA9IHRoaXMuX25leHRJbmRleFN0YXJ0O1xuXHRcdFx0Z2VvbWV0cnlJbmZvLnJlc2VydmVkSW5kZXhDb3VudCA9IHJlc2VydmVkSW5kZXhDb3VudCA9PT0gLTEgPyBpbmRleC5jb3VudCA6IHJlc2VydmVkSW5kZXhDb3VudDtcblxuXHRcdH1cblxuXHRcdGlmIChcblx0XHRcdGdlb21ldHJ5SW5mby5pbmRleFN0YXJ0ICE9PSAtMSAmJlxuXHRcdFx0Z2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgKyBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50ID4gdGhpcy5fbWF4SW5kZXhDb3VudCB8fFxuXHRcdFx0Z2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0ICsgZ2VvbWV0cnlJbmZvLnJlc2VydmVkVmVydGV4Q291bnQgPiB0aGlzLl9tYXhWZXJ0ZXhDb3VudFxuXHRcdCkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5CYXRjaGVkTWVzaDogUmVzZXJ2ZWQgc3BhY2UgcmVxdWVzdCBleGNlZWRzIHRoZSBtYXhpbXVtIGJ1ZmZlciBzaXplLicgKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBpZFxuXHRcdGxldCBnZW9tZXRyeUlkO1xuXHRcdGlmICggdGhpcy5fYXZhaWxhYmxlR2VvbWV0cnlJZHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5fYXZhaWxhYmxlR2VvbWV0cnlJZHMuc29ydCggYXNjSWRTb3J0ICk7XG5cblx0XHRcdGdlb21ldHJ5SWQgPSB0aGlzLl9hdmFpbGFibGVHZW9tZXRyeUlkcy5zaGlmdCgpO1xuXHRcdFx0Z2VvbWV0cnlJbmZvTGlzdFsgZ2VvbWV0cnlJZCBdID0gZ2VvbWV0cnlJbmZvO1xuXG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRnZW9tZXRyeUlkID0gdGhpcy5fZ2VvbWV0cnlDb3VudDtcblx0XHRcdHRoaXMuX2dlb21ldHJ5Q291bnQgKys7XG5cdFx0XHRnZW9tZXRyeUluZm9MaXN0LnB1c2goIGdlb21ldHJ5SW5mbyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIHRoZSBnZW9tZXRyeVxuXHRcdHRoaXMuc2V0R2VvbWV0cnlBdCggZ2VvbWV0cnlJZCwgZ2VvbWV0cnkgKTtcblxuXHRcdC8vIGluY3JlbWVudCB0aGUgbmV4dCBnZW9tZXRyeSBwb3NpdGlvblxuXHRcdHRoaXMuX25leHRJbmRleFN0YXJ0ID0gZ2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgKyBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50O1xuXHRcdHRoaXMuX25leHRWZXJ0ZXhTdGFydCA9IGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydCArIGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50O1xuXG5cdFx0cmV0dXJuIGdlb21ldHJ5SWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyB0aGUgZ2VvbWV0cnkgYXQgdGhlIGdpdmVuIElEIHdpdGggdGhlIHByb3ZpZGVkIGdlb21ldHJ5LiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlcmVcblx0ICogaXMgbm90IGVub3VnaCBzcGFjZSByZXNlcnZlZCBmb3IgZ2VvbWV0cnkuIENhbGxpbmcgdGhpcyB3aWxsIGNoYW5nZSBhbGwgaW5zdGFuY2VzIHRoYXQgYXJlXG5cdCAqIHJlbmRlcmluZyB0aGF0IGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZ2VvbWV0cnlJZCAtIFRoZSBJRCBvZiB0aGUgZ2VvbWV0cnkgdGhhdCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgZ2l2ZW4gZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5IC0gVGhlIG5ldyBnZW9tZXRyeS5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgZ2VvbWV0cnkgSUQuXG5cdCAqL1xuXHRzZXRHZW9tZXRyeUF0KCBnZW9tZXRyeUlkLCBnZW9tZXRyeSApIHtcblxuXHRcdGlmICggZ2VvbWV0cnlJZCA+PSB0aGlzLl9nZW9tZXRyeUNvdW50ICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5CYXRjaGVkTWVzaDogTWF4aW11bSBnZW9tZXRyeSBjb3VudCByZWFjaGVkLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3ZhbGlkYXRlR2VvbWV0cnkoIGdlb21ldHJ5ICk7XG5cblx0XHRjb25zdCBiYXRjaEdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBoYXNJbmRleCA9IGJhdGNoR2VvbWV0cnkuZ2V0SW5kZXgoKSAhPT0gbnVsbDtcblx0XHRjb25zdCBkc3RJbmRleCA9IGJhdGNoR2VvbWV0cnkuZ2V0SW5kZXgoKTtcblx0XHRjb25zdCBzcmNJbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmZvID0gdGhpcy5fZ2VvbWV0cnlJbmZvWyBnZW9tZXRyeUlkIF07XG5cdFx0aWYgKFxuXHRcdFx0aGFzSW5kZXggJiZcblx0XHRcdHNyY0luZGV4LmNvdW50ID4gZ2VvbWV0cnlJbmZvLnJlc2VydmVkSW5kZXhDb3VudCB8fFxuXHRcdFx0Z2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudCA+IGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50XG5cdFx0KSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkJhdGNoZWRNZXNoOiBSZXNlcnZlZCBzcGFjZSBub3QgbGFyZ2UgZW5vdWdoIGZvciBwcm92aWRlZCBnZW9tZXRyeS4nICk7XG5cblx0XHR9XG5cblx0XHQvLyBjb3B5IGdlb21ldHJ5IGJ1ZmZlciBkYXRhIG92ZXJcblx0XHRjb25zdCB2ZXJ0ZXhTdGFydCA9IGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydDtcblx0XHRjb25zdCByZXNlcnZlZFZlcnRleENvdW50ID0gZ2VvbWV0cnlJbmZvLnJlc2VydmVkVmVydGV4Q291bnQ7XG5cdFx0Z2VvbWV0cnlJbmZvLnZlcnRleENvdW50ID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkuY291bnQ7XG5cblx0XHRmb3IgKCBjb25zdCBhdHRyaWJ1dGVOYW1lIGluIGJhdGNoR2VvbWV0cnkuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Ly8gY29weSBhdHRyaWJ1dGUgZGF0YVxuXHRcdFx0Y29uc3Qgc3JjQXR0cmlidXRlID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICk7XG5cdFx0XHRjb25zdCBkc3RBdHRyaWJ1dGUgPSBiYXRjaEdlb21ldHJ5LmdldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApO1xuXHRcdFx0Y29weUF0dHJpYnV0ZURhdGEoIHNyY0F0dHJpYnV0ZSwgZHN0QXR0cmlidXRlLCB2ZXJ0ZXhTdGFydCApO1xuXG5cdFx0XHQvLyBmaWxsIHRoZSByZXN0IGluIHdpdGggemVyb2VzXG5cdFx0XHRjb25zdCBpdGVtU2l6ZSA9IHNyY0F0dHJpYnV0ZS5pdGVtU2l6ZTtcblx0XHRcdGZvciAoIGxldCBpID0gc3JjQXR0cmlidXRlLmNvdW50LCBsID0gcmVzZXJ2ZWRWZXJ0ZXhDb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXggPSB2ZXJ0ZXhTdGFydCArIGk7XG5cdFx0XHRcdGZvciAoIGxldCBjID0gMDsgYyA8IGl0ZW1TaXplOyBjICsrICkge1xuXG5cdFx0XHRcdFx0ZHN0QXR0cmlidXRlLnNldENvbXBvbmVudCggaW5kZXgsIGMsIDAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZHN0QXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdGRzdEF0dHJpYnV0ZS5hZGRVcGRhdGVSYW5nZSggdmVydGV4U3RhcnQgKiBpdGVtU2l6ZSwgcmVzZXJ2ZWRWZXJ0ZXhDb3VudCAqIGl0ZW1TaXplICk7XG5cblx0XHR9XG5cblx0XHQvLyBjb3B5IGluZGV4XG5cdFx0aWYgKCBoYXNJbmRleCApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXhTdGFydCA9IGdlb21ldHJ5SW5mby5pbmRleFN0YXJ0O1xuXHRcdFx0Y29uc3QgcmVzZXJ2ZWRJbmRleENvdW50ID0gZ2VvbWV0cnlJbmZvLnJlc2VydmVkSW5kZXhDb3VudDtcblx0XHRcdGdlb21ldHJ5SW5mby5pbmRleENvdW50ID0gZ2VvbWV0cnkuZ2V0SW5kZXgoKS5jb3VudDtcblxuXHRcdFx0Ly8gY29weSBpbmRleCBkYXRhIG92ZXJcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHNyY0luZGV4LmNvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdGRzdEluZGV4LnNldFgoIGluZGV4U3RhcnQgKyBpLCB2ZXJ0ZXhTdGFydCArIHNyY0luZGV4LmdldFgoIGkgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZpbGwgdGhlIHJlc3QgaW4gd2l0aCB6ZXJvZXNcblx0XHRcdGZvciAoIGxldCBpID0gc3JjSW5kZXguY291bnQsIGwgPSByZXNlcnZlZEluZGV4Q291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGRzdEluZGV4LnNldFgoIGluZGV4U3RhcnQgKyBpLCB2ZXJ0ZXhTdGFydCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRzdEluZGV4Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdGRzdEluZGV4LmFkZFVwZGF0ZVJhbmdlKCBpbmRleFN0YXJ0LCBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50ICk7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgdGhlIGRyYXcgcmFuZ2Vcblx0XHRnZW9tZXRyeUluZm8uc3RhcnQgPSBoYXNJbmRleCA/IGdlb21ldHJ5SW5mby5pbmRleFN0YXJ0IDogZ2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0O1xuXHRcdGdlb21ldHJ5SW5mby5jb3VudCA9IGhhc0luZGV4ID8gZ2VvbWV0cnlJbmZvLmluZGV4Q291bnQgOiBnZW9tZXRyeUluZm8udmVydGV4Q291bnQ7XG5cblx0XHQvLyBzdG9yZSB0aGUgYm91bmRpbmcgYm94ZXNcblx0XHRnZW9tZXRyeUluZm8uYm91bmRpbmdCb3ggPSBudWxsO1xuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdGdlb21ldHJ5SW5mby5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeUluZm8uYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGdlb21ldHJ5SW5mby5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XG5cdFx0cmV0dXJuIGdlb21ldHJ5SWQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWxldGVzIHRoZSBnZW9tZXRyeSBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBJRCBmcm9tIHRoaXMgYmF0Y2guIEFueSBpbnN0YW5jZXMgcmVmZXJlbmNpbmdcblx0ICogdGhpcyBnZW9tZXRyeSB3aWxsIGFsc28gYmUgcmVtb3ZlZCBhcyBhIHNpZGUgZWZmZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZ2VvbWV0cnlJZCAtIFRoZSBJRCBvZiB0aGUgZ2VvbWV0cnkgdG8gcmVtb3ZlIGZyb20gdGhlIGJhdGNoLlxuXHQgKiBAcmV0dXJuIHtCYXRjaGVkTWVzaH0gQSByZWZlcmVuY2UgdG8gdGhpcyBiYXRjaGVkIG1lc2guXG5cdCAqL1xuXHRkZWxldGVHZW9tZXRyeSggZ2VvbWV0cnlJZCApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5SW5mb0xpc3QgPSB0aGlzLl9nZW9tZXRyeUluZm87XG5cdFx0aWYgKCBnZW9tZXRyeUlkID49IGdlb21ldHJ5SW5mb0xpc3QubGVuZ3RoIHx8IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXS5hY3RpdmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdC8vIGRlbGV0ZSBhbnkgaW5zdGFuY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGdlb21ldHJ5XG5cdFx0Y29uc3QgaW5zdGFuY2VJbmZvID0gdGhpcy5faW5zdGFuY2VJbmZvO1xuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIGluc3RhbmNlSW5mb1sgaSBdLmFjdGl2ZSAmJiBpbnN0YW5jZUluZm9bIGkgXS5nZW9tZXRyeUluZGV4ID09PSBnZW9tZXRyeUlkICkge1xuXG5cdFx0XHRcdHRoaXMuZGVsZXRlSW5zdGFuY2UoIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnlJbmZvTGlzdFsgZ2VvbWV0cnlJZCBdLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdHRoaXMuX2F2YWlsYWJsZUdlb21ldHJ5SWRzLnB1c2goIGdlb21ldHJ5SWQgKTtcblx0XHR0aGlzLl92aXNpYmlsaXR5Q2hhbmdlZCA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlbGV0ZXMgYW4gZXhpc3RpbmcgaW5zdGFuY2UgZnJvbSB0aGUgYmF0Y2ggdXNpbmcgdGhlIGdpdmVuIElELlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VJZCAtIFRoZSBJRCBvZiB0aGUgaW5zdGFuY2UgdG8gcmVtb3ZlIGZyb20gdGhlIGJhdGNoLlxuXHQgKiBAcmV0dXJuIHtCYXRjaGVkTWVzaH0gQSByZWZlcmVuY2UgdG8gdGhpcyBiYXRjaGVkIG1lc2guXG5cdCAqL1xuXHRkZWxldGVJbnN0YW5jZSggaW5zdGFuY2VJZCApIHtcblxuXHRcdHRoaXMudmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICk7XG5cblx0XHR0aGlzLl9pbnN0YW5jZUluZm9bIGluc3RhbmNlSWQgXS5hY3RpdmUgPSBmYWxzZTtcblx0XHR0aGlzLl9hdmFpbGFibGVJbnN0YW5jZUlkcy5wdXNoKCBpbnN0YW5jZUlkICk7XG5cdFx0dGhpcy5fdmlzaWJpbGl0eUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXBhY2tzIHRoZSBzdWIgZ2VvbWV0cmllcyBpbiBbbmFtZV0gdG8gcmVtb3ZlIGFueSB1bnVzZWQgc3BhY2UgcmVtYWluaW5nIGZyb21cblx0ICogcHJldmlvdXNseSBkZWxldGVkIGdlb21ldHJ5LCBmcmVlaW5nIHVwIHNwYWNlIHRvIGFkZCBuZXcgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbnN0YW5jZUlkIC0gVGhlIElEIG9mIHRoZSBpbnN0YW5jZSB0byByZW1vdmUgZnJvbSB0aGUgYmF0Y2guXG5cdCAqIEByZXR1cm4ge0JhdGNoZWRNZXNofSBBIHJlZmVyZW5jZSB0byB0aGlzIGJhdGNoZWQgbWVzaC5cblx0ICovXG5cdG9wdGltaXplKCkge1xuXG5cdFx0Ly8gdHJhY2sgdGhlIG5leHQgaW5kaWNlcyB0byBjb3B5IGRhdGEgdG9cblx0XHRsZXQgbmV4dFZlcnRleFN0YXJ0ID0gMDtcblx0XHRsZXQgbmV4dEluZGV4U3RhcnQgPSAwO1xuXG5cdFx0Ly8gSXRlcmF0ZSBvdmVyIGFsbCBnZW9tZXRyeSByYW5nZXMgaW4gb3JkZXIgc29ydGVkIGZyb20gZWFybGllc3QgaW4gdGhlIGdlb21ldHJ5IGJ1ZmZlciB0byBsYXRlc3Rcblx0XHQvLyBpbiB0aGUgZ2VvbWV0cnkgYnVmZmVyLiBCZWNhdXNlIGRyYXcgcmFuZ2Ugb2JqZWN0cyBjYW4gYmUgcmV1c2VkIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSBvZiB0aGVpciBvcmRlci5cblx0XHRjb25zdCBnZW9tZXRyeUluZm9MaXN0ID0gdGhpcy5fZ2VvbWV0cnlJbmZvO1xuXHRcdGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeUluZm9MaXN0XG5cdFx0XHQubWFwKCAoIGUsIGkgKSA9PiBpIClcblx0XHRcdC5zb3J0KCAoIGEsIGIgKSA9PiB7XG5cblx0XHRcdFx0cmV0dXJuIGdlb21ldHJ5SW5mb0xpc3RbIGEgXS52ZXJ0ZXhTdGFydCAtIGdlb21ldHJ5SW5mb0xpc3RbIGIgXS52ZXJ0ZXhTdGFydDtcblxuXHRcdFx0fSApO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdlb21ldHJ5SW5mb0xpc3QubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gaWYgYSBnZW9tZXRyeSByYW5nZSBpcyBpbmFjdGl2ZSB0aGVuIGRvbid0IGNvcHkgYW55dGhpbmdcblx0XHRcdGNvbnN0IGluZGV4ID0gaW5kaWNlc1sgaSBdO1xuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJbmZvID0gZ2VvbWV0cnlJbmZvTGlzdFsgaW5kZXggXTtcblx0XHRcdGlmICggZ2VvbWV0cnlJbmZvLmFjdGl2ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgYSBnZW9tZXRyeSBjb250YWlucyBhbiBpbmRleCBidWZmZXIgdGhlbiBzaGlmdCBpdCwgYXMgd2VsbFxuXHRcdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5SW5mby5pbmRleFN0YXJ0ICE9PSBuZXh0SW5kZXhTdGFydCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHsgaW5kZXhTdGFydCwgdmVydGV4U3RhcnQsIHJlc2VydmVkSW5kZXhDb3VudCB9ID0gZ2VvbWV0cnlJbmZvO1xuXHRcdFx0XHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRcdFx0Y29uc3QgYXJyYXkgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRcdC8vIHNoaWZ0IHRoZSBpbmRleCBwb2ludGVycyBiYXNlZCBvbiBob3cgdGhlIHZlcnRleCBkYXRhIHdpbGwgc2hpZnRcblx0XHRcdFx0XHQvLyBhZGp1c3RpbmcgdGhlIGluZGV4IG11c3QgaGFwcGVuIGZpcnN0IHNvIHRoZSBvcmlnaW5hbCB2ZXJ0ZXggc3RhcnQgdmFsdWUgaXMgYXZhaWxhYmxlXG5cdFx0XHRcdFx0Y29uc3QgZWxlbWVudERlbHRhID0gbmV4dFZlcnRleFN0YXJ0IC0gdmVydGV4U3RhcnQ7XG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSBpbmRleFN0YXJ0OyBqIDwgaW5kZXhTdGFydCArIHJlc2VydmVkSW5kZXhDb3VudDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0YXJyYXlbIGogXSA9IGFycmF5WyBqIF0gKyBlbGVtZW50RGVsdGE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpbmRleC5hcnJheS5jb3B5V2l0aGluKCBuZXh0SW5kZXhTdGFydCwgaW5kZXhTdGFydCwgaW5kZXhTdGFydCArIHJlc2VydmVkSW5kZXhDb3VudCApO1xuXHRcdFx0XHRcdGluZGV4LmFkZFVwZGF0ZVJhbmdlKCBuZXh0SW5kZXhTdGFydCwgcmVzZXJ2ZWRJbmRleENvdW50ICk7XG5cblx0XHRcdFx0XHRnZW9tZXRyeUluZm8uaW5kZXhTdGFydCA9IG5leHRJbmRleFN0YXJ0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRuZXh0SW5kZXhTdGFydCArPSBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50O1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGEgZ2VvbWV0cnkgbmVlZHMgdG8gYmUgbW92ZWQgdGhlbiBjb3B5IGF0dHJpYnV0ZSBkYXRhIHRvIG92ZXJ3cml0ZSB1bnVzZWQgc3BhY2Vcblx0XHRcdGlmICggZ2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0ICE9PSBuZXh0VmVydGV4U3RhcnQgKSB7XG5cblx0XHRcdFx0Y29uc3QgeyB2ZXJ0ZXhTdGFydCwgcmVzZXJ2ZWRWZXJ0ZXhDb3VudCB9ID0gZ2VvbWV0cnlJbmZvO1xuXHRcdFx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRcdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblx0XHRcdFx0XHRjb25zdCB7IGFycmF5LCBpdGVtU2l6ZSB9ID0gYXR0cmlidXRlO1xuXHRcdFx0XHRcdGFycmF5LmNvcHlXaXRoaW4oIG5leHRWZXJ0ZXhTdGFydCAqIGl0ZW1TaXplLCB2ZXJ0ZXhTdGFydCAqIGl0ZW1TaXplLCAoIHZlcnRleFN0YXJ0ICsgcmVzZXJ2ZWRWZXJ0ZXhDb3VudCApICogaXRlbVNpemUgKTtcblx0XHRcdFx0XHRhdHRyaWJ1dGUuYWRkVXBkYXRlUmFuZ2UoIG5leHRWZXJ0ZXhTdGFydCAqIGl0ZW1TaXplLCByZXNlcnZlZFZlcnRleENvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0ID0gbmV4dFZlcnRleFN0YXJ0O1xuXG5cdFx0XHR9XG5cblx0XHRcdG5leHRWZXJ0ZXhTdGFydCArPSBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRWZXJ0ZXhDb3VudDtcblx0XHRcdGdlb21ldHJ5SW5mby5zdGFydCA9IGdlb21ldHJ5LmluZGV4ID8gZ2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgOiBnZW9tZXRyeUluZm8udmVydGV4U3RhcnQ7XG5cblx0XHRcdC8vIHN0ZXAgdGhlIG5leHQgZ2VvbWV0cnkgcG9pbnRzIHRvIHRoZSBzaGlmdGVkIHBvc2l0aW9uXG5cdFx0XHR0aGlzLl9uZXh0SW5kZXhTdGFydCA9IGdlb21ldHJ5LmluZGV4ID8gZ2VvbWV0cnlJbmZvLmluZGV4U3RhcnQgKyBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50IDogMDtcblx0XHRcdHRoaXMuX25leHRWZXJ0ZXhTdGFydCA9IGdlb21ldHJ5SW5mby52ZXJ0ZXhTdGFydCArIGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBib3VuZGluZyBib3ggZm9yIHRoZSBnaXZlbiBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGdlb21ldHJ5SWQgLSBUaGUgSUQgb2YgdGhlIGdlb21ldHJ5IHRvIHJldHVybiB0aGUgYm91bmRpbmcgYm94IGZvci5cblx0ICogQHBhcmFtIHtCb3gzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7Qm94M3xudWxsfSBUaGUgZ2VvbWV0cnkncyBib3VuZGluZyBib3guIFJldHVybnMgYG51bGxgIGlmIG5vIGdlb21ldHJ5IGhhcyBiZWVuIGZvdW5kIGZvciB0aGUgZ2l2ZW4gSUQuXG5cdCAqL1xuXHRnZXRCb3VuZGluZ0JveEF0KCBnZW9tZXRyeUlkLCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIGdlb21ldHJ5SWQgPj0gdGhpcy5fZ2VvbWV0cnlDb3VudCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIGJvdW5kaW5nIGJveFxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRjb25zdCBnZW9tZXRyeUluZm8gPSB0aGlzLl9nZW9tZXRyeUluZm9bIGdlb21ldHJ5SWQgXTtcblx0XHRpZiAoIGdlb21ldHJ5SW5mby5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3QgYm94ID0gbmV3IEJveDMoKTtcblx0XHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRmb3IgKCBsZXQgaSA9IGdlb21ldHJ5SW5mby5zdGFydCwgbCA9IGdlb21ldHJ5SW5mby5zdGFydCArIGdlb21ldHJ5SW5mby5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0bGV0IGl2ID0gaTtcblx0XHRcdFx0aWYgKCBpbmRleCApIHtcblxuXHRcdFx0XHRcdGl2ID0gaW5kZXguZ2V0WCggaXYgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ym94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkNS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaXYgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5SW5mby5ib3VuZGluZ0JveCA9IGJveDtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5jb3B5KCBnZW9tZXRyeUluZm8uYm91bmRpbmdCb3ggKTtcblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYm91bmRpbmcgc3BoZXJlIGZvciB0aGUgZ2l2ZW4gZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBnZW9tZXRyeUlkIC0gVGhlIElEIG9mIHRoZSBnZW9tZXRyeSB0byByZXR1cm4gdGhlIGJvdW5kaW5nIHNwaGVyZSBmb3IuXG5cdCAqIEBwYXJhbSB7U3BoZXJlfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7U3BoZXJlfG51bGx9IFRoZSBnZW9tZXRyeSdzIGJvdW5kaW5nIHNwaGVyZS4gUmV0dXJucyBgbnVsbGAgaWYgbm8gZ2VvbWV0cnkgaGFzIGJlZW4gZm91bmQgZm9yIHRoZSBnaXZlbiBJRC5cblx0ICovXG5cdGdldEJvdW5kaW5nU3BoZXJlQXQoIGdlb21ldHJ5SWQsIHRhcmdldCApIHtcblxuXHRcdGlmICggZ2VvbWV0cnlJZCA+PSB0aGlzLl9nZW9tZXRyeUNvdW50ICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdC8vIGNvbXB1dGUgYm91bmRpbmcgc3BoZXJlXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IHRoaXMuX2dlb21ldHJ5SW5mb1sgZ2VvbWV0cnlJZCBdO1xuXHRcdGlmICggZ2VvbWV0cnlJbmZvLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cdFx0XHR0aGlzLmdldEJvdW5kaW5nQm94QXQoIGdlb21ldHJ5SWQsIF9ib3gkMSApO1xuXHRcdFx0X2JveCQxLmdldENlbnRlciggc3BoZXJlLmNlbnRlciApO1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRsZXQgbWF4UmFkaXVzU3EgPSAwO1xuXHRcdFx0Zm9yICggbGV0IGkgPSBnZW9tZXRyeUluZm8uc3RhcnQsIGwgPSBnZW9tZXRyeUluZm8uc3RhcnQgKyBnZW9tZXRyeUluZm8uY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBpdiA9IGk7XG5cdFx0XHRcdGlmICggaW5kZXggKSB7XG5cblx0XHRcdFx0XHRpdiA9IGluZGV4LmdldFgoIGl2ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdF92ZWN0b3IkNS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaXYgKTtcblx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IkNSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3BoZXJlLnJhZGl1cyA9IE1hdGguc3FydCggbWF4UmFkaXVzU3EgKTtcblx0XHRcdGdlb21ldHJ5SW5mby5ib3VuZGluZ1NwaGVyZSA9IHNwaGVyZTtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5jb3B5KCBnZW9tZXRyeUluZm8uYm91bmRpbmdTcGhlcmUgKTtcblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIHRoZSBkZWZpbmVkIGluc3RhbmNlLlxuXHQgKiBOZWdhdGl2ZWx5IHNjYWxlZCBtYXRyaWNlcyBhcmUgbm90IHN1cHBvcnRlZC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluc3RhbmNlSWQgLSBUaGUgSUQgb2YgYW4gaW5zdGFuY2UgdG8gc2V0IHRoZSBtYXRyaXggb2YuXG5cdCAqIEBwYXJhbSB7TWF0cml4NH0gbWF0cml4IC0gQSA0eDQgbWF0cml4IHJlcHJlc2VudGluZyB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gb2YgYSBzaW5nbGUgaW5zdGFuY2UuXG5cdCAqIEByZXR1cm4ge0JhdGNoZWRNZXNofSBBIHJlZmVyZW5jZSB0byB0aGlzIGJhdGNoZWQgbWVzaC5cblx0ICovXG5cdHNldE1hdHJpeEF0KCBpbnN0YW5jZUlkLCBtYXRyaXggKSB7XG5cblx0XHR0aGlzLnZhbGlkYXRlSW5zdGFuY2VJZCggaW5zdGFuY2VJZCApO1xuXG5cdFx0Y29uc3QgbWF0cmljZXNUZXh0dXJlID0gdGhpcy5fbWF0cmljZXNUZXh0dXJlO1xuXHRcdGNvbnN0IG1hdHJpY2VzQXJyYXkgPSB0aGlzLl9tYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YTtcblx0XHRtYXRyaXgudG9BcnJheSggbWF0cmljZXNBcnJheSwgaW5zdGFuY2VJZCAqIDE2ICk7XG5cdFx0bWF0cmljZXNUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IG9mIHRoZSBkZWZpbmVkIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VJZCAtIFRoZSBJRCBvZiBhbiBpbnN0YW5jZSB0byBnZXQgdGhlIG1hdHJpeCBvZi5cblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXggLSBUaGUgdGFyZ2V0IG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7TWF0cml4NH0gVGhlIGluc3RhbmNlJ3MgbG9jYWwgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKi9cblx0Z2V0TWF0cml4QXQoIGluc3RhbmNlSWQsIG1hdHJpeCApIHtcblxuXHRcdHRoaXMudmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICk7XG5cdFx0cmV0dXJuIG1hdHJpeC5mcm9tQXJyYXkoIHRoaXMuX21hdHJpY2VzVGV4dHVyZS5pbWFnZS5kYXRhLCBpbnN0YW5jZUlkICogMTYgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIGNvbG9yIHRvIHRoZSBkZWZpbmVkIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VJZCAtIFRoZSBJRCBvZiBhbiBpbnN0YW5jZSB0byBzZXQgdGhlIGNvbG9yIG9mLlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSBjb2xvciB0byBzZXQgdGhlIGluc3RhbmNlIHRvLlxuXHQgKiBAcmV0dXJuIHtCYXRjaGVkTWVzaH0gQSByZWZlcmVuY2UgdG8gdGhpcyBiYXRjaGVkIG1lc2guXG5cdCAqL1xuXHRzZXRDb2xvckF0KCBpbnN0YW5jZUlkLCBjb2xvciApIHtcblxuXHRcdHRoaXMudmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICk7XG5cblx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2luaXRDb2xvcnNUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHRjb2xvci50b0FycmF5KCB0aGlzLl9jb2xvcnNUZXh0dXJlLmltYWdlLmRhdGEsIGluc3RhbmNlSWQgKiA0ICk7XG5cdFx0dGhpcy5fY29sb3JzVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNvbG9yIG9mIHRoZSBkZWZpbmVkIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VJZCAtIFRoZSBJRCBvZiBhbiBpbnN0YW5jZSB0byBnZXQgdGhlIGNvbG9yIG9mLlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciAtIFRoZSB0YXJnZXQgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtDb2xvcn0gVGhlIGluc3RhbmNlJ3MgY29sb3IuXG5cdCAqL1xuXHRnZXRDb2xvckF0KCBpbnN0YW5jZUlkLCBjb2xvciApIHtcblxuXHRcdHRoaXMudmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICk7XG5cdFx0cmV0dXJuIGNvbG9yLmZyb21BcnJheSggdGhpcy5fY29sb3JzVGV4dHVyZS5pbWFnZS5kYXRhLCBpbnN0YW5jZUlkICogNCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbnN0YW5jZUlkIC0gVGhlIGlkIG9mIHRoZSBpbnN0YW5jZSB0byBzZXQgdGhlIHZpc2liaWxpdHkgb2YuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmlzaWJsZSAtIFdoZXRoZXIgdGhlIGluc3RhbmNlIGlzIHZpc2libGUgb3Igbm90LlxuXHQgKiBAcmV0dXJuIHtCYXRjaGVkTWVzaH0gQSByZWZlcmVuY2UgdG8gdGhpcyBiYXRjaGVkIG1lc2guXG5cdCAqL1xuXHRzZXRWaXNpYmxlQXQoIGluc3RhbmNlSWQsIHZpc2libGUgKSB7XG5cblx0XHR0aGlzLnZhbGlkYXRlSW5zdGFuY2VJZCggaW5zdGFuY2VJZCApO1xuXG5cdFx0aWYgKCB0aGlzLl9pbnN0YW5jZUluZm9bIGluc3RhbmNlSWQgXS52aXNpYmxlID09PSB2aXNpYmxlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2luc3RhbmNlSW5mb1sgaW5zdGFuY2VJZCBdLnZpc2libGUgPSB2aXNpYmxlO1xuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmlzaWJpbGl0eSBzdGF0ZSBvZiB0aGUgZGVmaW5lZCBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGluc3RhbmNlSWQgLSBUaGUgSUQgb2YgYW4gaW5zdGFuY2UgdG8gZ2V0IHRoZSB2aXNpYmlsaXR5IHN0YXRlIG9mLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBpbnN0YW5jZSBpcyB2aXNpYmxlIG9yIG5vdC5cblx0ICovXG5cdGdldFZpc2libGVBdCggaW5zdGFuY2VJZCApIHtcblxuXHRcdHRoaXMudmFsaWRhdGVJbnN0YW5jZUlkKCBpbnN0YW5jZUlkICk7XG5cblx0XHRyZXR1cm4gdGhpcy5faW5zdGFuY2VJbmZvWyBpbnN0YW5jZUlkIF0udmlzaWJsZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdlb21ldHJ5IElEIG9mIHRoZSBpbnN0YW5jZSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbnN0YW5jZUlkIC0gVGhlIElEIG9mIHRoZSBpbnN0YW5jZSB0byBzZXQgdGhlIGdlb21ldHJ5IElEIG9mLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZ2VvbWV0cnlJZCAtIFRoZSBnZW9tZXRyeSBJRCB0byBiZSB1c2UgYnkgdGhlIGluc3RhbmNlLlxuXHQgKiBAcmV0dXJuIHtCYXRjaGVkTWVzaH0gQSByZWZlcmVuY2UgdG8gdGhpcyBiYXRjaGVkIG1lc2guXG5cdCAqL1xuXHRzZXRHZW9tZXRyeUlkQXQoIGluc3RhbmNlSWQsIGdlb21ldHJ5SWQgKSB7XG5cblx0XHR0aGlzLnZhbGlkYXRlSW5zdGFuY2VJZCggaW5zdGFuY2VJZCApO1xuXHRcdHRoaXMudmFsaWRhdGVHZW9tZXRyeUlkKCBnZW9tZXRyeUlkICk7XG5cblx0XHR0aGlzLl9pbnN0YW5jZUluZm9bIGluc3RhbmNlSWQgXS5nZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnlJZDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZ2VvbWV0cnkgSUQgb2YgdGhlIGRlZmluZWQgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbnN0YW5jZUlkIC0gVGhlIElEIG9mIGFuIGluc3RhbmNlIHRvIGdldCB0aGUgZ2VvbWV0cnkgSUQgb2YuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGluc3RhbmNlJ3MgZ2VvbWV0cnkgSUQuXG5cdCAqL1xuXHRnZXRHZW9tZXRyeUlkQXQoIGluc3RhbmNlSWQgKSB7XG5cblx0XHR0aGlzLnZhbGlkYXRlSW5zdGFuY2VJZCggaW5zdGFuY2VJZCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuX2luc3RhbmNlSW5mb1sgaW5zdGFuY2VJZCBdLmdlb21ldHJ5SW5kZXg7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIHJhbmdlIHJlcHJlc2VudGluZyB0aGUgc3Vic2V0IG9mIHRyaWFuZ2xlcyByZWxhdGVkIHRvIHRoZSBhdHRhY2hlZCBnZW9tZXRyeSxcblx0ICogaW5kaWNhdGluZyB0aGUgc3RhcnRpbmcgb2Zmc2V0IGFuZCBjb3VudCwgb3IgYG51bGxgIGlmIGludmFsaWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBnZW9tZXRyeUlkIC0gVGhlIGlkIG9mIHRoZSBnZW9tZXRyeSB0byBnZXQgdGhlIHJhbmdlIG9mLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3RhcmdldF0gLSBUaGUgdGFyZ2V0IG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7e1xuXHQgKiBcdHZlcnRleFN0YXJ0Om51bWJlcix2ZXJ0ZXhDb3VudDpudW1iZXIscmVzZXJ2ZWRWZXJ0ZXhDb3VudDpudW1iZXIsXG5cdCAqIFx0aW5kZXhTdGFydDpudW1iZXIsaW5kZXhDb3VudDpudW1iZXIscmVzZXJ2ZWRJbmRleENvdW50Om51bWJlcixcblx0ICogXHRzdGFydDpudW1iZXIsY291bnQ6bnVtYmVyXG5cdCAqIH19IFRoZSByZXN1bHQgb2JqZWN0IHdpdGggcmFuZ2UgZGF0YS5cblx0ICovXG5cdGdldEdlb21ldHJ5UmFuZ2VBdCggZ2VvbWV0cnlJZCwgdGFyZ2V0ID0ge30gKSB7XG5cblx0XHR0aGlzLnZhbGlkYXRlR2VvbWV0cnlJZCggZ2VvbWV0cnlJZCApO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmZvID0gdGhpcy5fZ2VvbWV0cnlJbmZvWyBnZW9tZXRyeUlkIF07XG5cdFx0dGFyZ2V0LnZlcnRleFN0YXJ0ID0gZ2VvbWV0cnlJbmZvLnZlcnRleFN0YXJ0O1xuXHRcdHRhcmdldC52ZXJ0ZXhDb3VudCA9IGdlb21ldHJ5SW5mby52ZXJ0ZXhDb3VudDtcblx0XHR0YXJnZXQucmVzZXJ2ZWRWZXJ0ZXhDb3VudCA9IGdlb21ldHJ5SW5mby5yZXNlcnZlZFZlcnRleENvdW50O1xuXG5cdFx0dGFyZ2V0LmluZGV4U3RhcnQgPSBnZW9tZXRyeUluZm8uaW5kZXhTdGFydDtcblx0XHR0YXJnZXQuaW5kZXhDb3VudCA9IGdlb21ldHJ5SW5mby5pbmRleENvdW50O1xuXHRcdHRhcmdldC5yZXNlcnZlZEluZGV4Q291bnQgPSBnZW9tZXRyeUluZm8ucmVzZXJ2ZWRJbmRleENvdW50O1xuXG5cdFx0dGFyZ2V0LnN0YXJ0ID0gZ2VvbWV0cnlJbmZvLnN0YXJ0O1xuXHRcdHRhcmdldC5jb3VudCA9IGdlb21ldHJ5SW5mby5jb3VudDtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNpemVzIHRoZSBuZWNlc3NhcnkgYnVmZmVycyB0byBzdXBwb3J0IHRoZSBwcm92aWRlZCBudW1iZXIgb2YgaW5zdGFuY2VzLlxuXHQgKiBJZiB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIHNocmluayB0aGUgbnVtYmVyIG9mIGluc3RhbmNlcyBidXQgdGhlcmUgYXJlIG5vdCBlbm91Z2hcblx0ICogdW51c2VkIElkcyBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0IHRoZW4gYW4gZXJyb3IgaXMgdGhyb3duLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4SW5zdGFuY2VDb3VudCAtIFRoZSBtYXggbnVtYmVyIG9mIGluZGl2aWR1YWwgaW5zdGFuY2VzIHRoYXQgY2FuIGJlIGFkZGVkIGFuZCByZW5kZXJlZCBieSB0aGUgYmF0Y2guXG5cdCovXG5cdHNldEluc3RhbmNlQ291bnQoIG1heEluc3RhbmNlQ291bnQgKSB7XG5cblx0XHQvLyBzaHJpbmsgdGhlIGF2YWlsYWJsZSBpbnN0YW5jZXMgYXMgbXVjaCBhcyBwb3NzaWJsZVxuXHRcdGNvbnN0IGF2YWlsYWJsZUluc3RhbmNlSWRzID0gdGhpcy5fYXZhaWxhYmxlSW5zdGFuY2VJZHM7XG5cdFx0Y29uc3QgaW5zdGFuY2VJbmZvID0gdGhpcy5faW5zdGFuY2VJbmZvO1xuXHRcdGF2YWlsYWJsZUluc3RhbmNlSWRzLnNvcnQoIGFzY0lkU29ydCApO1xuXHRcdHdoaWxlICggYXZhaWxhYmxlSW5zdGFuY2VJZHNbIGF2YWlsYWJsZUluc3RhbmNlSWRzLmxlbmd0aCAtIDEgXSA9PT0gaW5zdGFuY2VJbmZvLmxlbmd0aCApIHtcblxuXHRcdFx0aW5zdGFuY2VJbmZvLnBvcCgpO1xuXHRcdFx0YXZhaWxhYmxlSW5zdGFuY2VJZHMucG9wKCk7XG5cblx0XHR9XG5cblx0XHQvLyB0aHJvdyBhbiBlcnJvciBpZiBpdCBjYW4ndCBiZSBzaHJ1bmsgdG8gdGhlIGRlc2lyZWQgc2l6ZVxuXHRcdGlmICggbWF4SW5zdGFuY2VDb3VudCA8IGluc3RhbmNlSW5mby5sZW5ndGggKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggYEJhdGNoZWRNZXNoOiBJbnN0YW5jZSBpZHMgb3V0c2lkZSB0aGUgcmFuZ2UgJHsgbWF4SW5zdGFuY2VDb3VudCB9IGFyZSBiZWluZyB1c2VkLiBDYW5ub3Qgc2hyaW5rIGluc3RhbmNlIGNvdW50LmAgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvcHkgdGhlIG11bHRpIGRyYXcgY291bnRzXG5cdFx0Y29uc3QgbXVsdGlEcmF3Q291bnRzID0gbmV3IEludDMyQXJyYXkoIG1heEluc3RhbmNlQ291bnQgKTtcblx0XHRjb25zdCBtdWx0aURyYXdTdGFydHMgPSBuZXcgSW50MzJBcnJheSggbWF4SW5zdGFuY2VDb3VudCApO1xuXHRcdGNvcHlBcnJheUNvbnRlbnRzKCB0aGlzLl9tdWx0aURyYXdDb3VudHMsIG11bHRpRHJhd0NvdW50cyApO1xuXHRcdGNvcHlBcnJheUNvbnRlbnRzKCB0aGlzLl9tdWx0aURyYXdTdGFydHMsIG11bHRpRHJhd1N0YXJ0cyApO1xuXG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gbXVsdGlEcmF3Q291bnRzO1xuXHRcdHRoaXMuX211bHRpRHJhd1N0YXJ0cyA9IG11bHRpRHJhd1N0YXJ0cztcblx0XHR0aGlzLl9tYXhJbnN0YW5jZUNvdW50ID0gbWF4SW5zdGFuY2VDb3VudDtcblxuXHRcdC8vIHVwZGF0ZSB0ZXh0dXJlIGRhdGEgZm9yIGluc3RhbmNlIHNhbXBsaW5nXG5cdFx0Y29uc3QgaW5kaXJlY3RUZXh0dXJlID0gdGhpcy5faW5kaXJlY3RUZXh0dXJlO1xuXHRcdGNvbnN0IG1hdHJpY2VzVGV4dHVyZSA9IHRoaXMuX21hdHJpY2VzVGV4dHVyZTtcblx0XHRjb25zdCBjb2xvcnNUZXh0dXJlID0gdGhpcy5fY29sb3JzVGV4dHVyZTtcblxuXHRcdGluZGlyZWN0VGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5faW5pdEluZGlyZWN0VGV4dHVyZSgpO1xuXHRcdGNvcHlBcnJheUNvbnRlbnRzKCBpbmRpcmVjdFRleHR1cmUuaW1hZ2UuZGF0YSwgdGhpcy5faW5kaXJlY3RUZXh0dXJlLmltYWdlLmRhdGEgKTtcblxuXHRcdG1hdHJpY2VzVGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5faW5pdE1hdHJpY2VzVGV4dHVyZSgpO1xuXHRcdGNvcHlBcnJheUNvbnRlbnRzKCBtYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YSwgdGhpcy5fbWF0cmljZXNUZXh0dXJlLmltYWdlLmRhdGEgKTtcblxuXHRcdGlmICggY29sb3JzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29sb3JzVGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLl9pbml0Q29sb3JzVGV4dHVyZSgpO1xuXHRcdFx0Y29weUFycmF5Q29udGVudHMoIGNvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YSwgdGhpcy5fY29sb3JzVGV4dHVyZS5pbWFnZS5kYXRhICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNpemVzIHRoZSBhdmFpbGFibGUgc3BhY2UgaW4gdGhlIGJhdGNoJ3MgdmVydGV4IGFuZCBpbmRleCBidWZmZXIgYXR0cmlidXRlcyB0byB0aGUgcHJvdmlkZWQgc2l6ZXMuXG5cdCAqIElmIHRoZSBwcm92aWRlZCBhcmd1bWVudHMgc2hyaW5rIHRoZSBnZW9tZXRyeSBidWZmZXJzIGJ1dCB0aGVyZSBpcyBub3QgZW5vdWdoIHVudXNlZCBzcGFjZSBhdCB0aGVcblx0ICogZW5kIG9mIHRoZSBnZW9tZXRyeSBhdHRyaWJ1dGVzIHRoZW4gYW4gZXJyb3IgaXMgdGhyb3duLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4VmVydGV4Q291bnQgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgdmVydGljZXMgdG8gYmUgdXNlZCBieSBhbGwgdW5pcXVlIGdlb21ldHJpZXMgdG8gcmVzaXplIHRvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4SW5kZXhDb3VudCAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpbmRpY2VzIHRvIGJlIHVzZWQgYnkgYWxsIHVuaXF1ZSBnZW9tZXRyaWVzIHRvIHJlc2l6ZSB0by5cblx0Ki9cblx0c2V0R2VvbWV0cnlTaXplKCBtYXhWZXJ0ZXhDb3VudCwgbWF4SW5kZXhDb3VudCApIHtcblxuXHRcdC8vIENoZWNrIGlmIHdlIGNhbiBzaHJpbmsgdG8gdGhlIHJlcXVlc3RlZCB2ZXJ0ZXggYXR0cmlidXRlIHNpemVcblx0XHRjb25zdCB2YWxpZFJhbmdlcyA9IFsgLi4udGhpcy5fZ2VvbWV0cnlJbmZvIF0uZmlsdGVyKCBpbmZvID0+IGluZm8uYWN0aXZlICk7XG5cdFx0Y29uc3QgcmVxdWlyZWRWZXJ0ZXhMZW5ndGggPSBNYXRoLm1heCggLi4udmFsaWRSYW5nZXMubWFwKCByYW5nZSA9PiByYW5nZS52ZXJ0ZXhTdGFydCArIHJhbmdlLnJlc2VydmVkVmVydGV4Q291bnQgKSApO1xuXHRcdGlmICggcmVxdWlyZWRWZXJ0ZXhMZW5ndGggPiBtYXhWZXJ0ZXhDb3VudCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCBgQmF0Y2hlZE1lc2g6IEdlb21ldHJ5IHZlcnRleCB2YWx1ZXMgYXJlIGJlaW5nIHVzZWQgb3V0c2lkZSB0aGUgcmFuZ2UgJHsgbWF4SW5kZXhDb3VudCB9LiBDYW5ub3Qgc2hyaW5rIGZ1cnRoZXIuYCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UgY2FuIHNocmluayB0byB0aGUgcmVxdWVzdGVkIGluZGV4IGF0dHJpYnV0ZSBzaXplXG5cdFx0aWYgKCB0aGlzLmdlb21ldHJ5LmluZGV4ICkge1xuXG5cdFx0XHRjb25zdCByZXF1aXJlZEluZGV4TGVuZ3RoID0gTWF0aC5tYXgoIC4uLnZhbGlkUmFuZ2VzLm1hcCggcmFuZ2UgPT4gcmFuZ2UuaW5kZXhTdGFydCArIHJhbmdlLnJlc2VydmVkSW5kZXhDb3VudCApICk7XG5cdFx0XHRpZiAoIHJlcXVpcmVkSW5kZXhMZW5ndGggPiBtYXhJbmRleENvdW50ICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggYEJhdGNoZWRNZXNoOiBHZW9tZXRyeSBpbmRleCB2YWx1ZXMgYXJlIGJlaW5nIHVzZWQgb3V0c2lkZSB0aGUgcmFuZ2UgJHsgbWF4SW5kZXhDb3VudCB9LiBDYW5ub3Qgc2hyaW5rIGZ1cnRoZXIuYCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Ly8gZGlzcG9zZSBvZiB0aGUgcHJldmlvdXMgZ2VvbWV0cnlcblx0XHRjb25zdCBvbGRHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0b2xkR2VvbWV0cnkuZGlzcG9zZSgpO1xuXG5cdFx0Ly8gcmVjcmVhdGUgdGhlIGdlb21ldHJ5IG5lZWRlZCBiYXNlZCBvbiB0aGUgcHJldmlvdXMgdmFyaWFudFxuXHRcdHRoaXMuX21heFZlcnRleENvdW50ID0gbWF4VmVydGV4Q291bnQ7XG5cdFx0dGhpcy5fbWF4SW5kZXhDb3VudCA9IG1heEluZGV4Q291bnQ7XG5cblx0XHRpZiAoIHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgKSB7XG5cblx0XHRcdHRoaXMuX2dlb21ldHJ5SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblx0XHRcdHRoaXMuZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRcdHRoaXMuX2luaXRpYWxpemVHZW9tZXRyeSggb2xkR2VvbWV0cnkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNvcHkgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyBnZW9tZXRyeVxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRpZiAoIG9sZEdlb21ldHJ5LmluZGV4ICkge1xuXG5cdFx0XHRjb3B5QXJyYXlDb250ZW50cyggb2xkR2VvbWV0cnkuaW5kZXguYXJyYXksIGdlb21ldHJ5LmluZGV4LmFycmF5ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBjb25zdCBrZXkgaW4gb2xkR2VvbWV0cnkuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29weUFycmF5Q29udGVudHMoIG9sZEdlb21ldHJ5LmF0dHJpYnV0ZXNbIGtleSBdLmFycmF5LCBnZW9tZXRyeS5hdHRyaWJ1dGVzWyBrZXkgXS5hcnJheSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB0aGlzLl9pbnN0YW5jZUluZm87XG5cdFx0Y29uc3QgZ2VvbWV0cnlJbmZvTGlzdCA9IHRoaXMuX2dlb21ldHJ5SW5mbztcblx0XHRjb25zdCBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XG5cdFx0Y29uc3QgYmF0Y2hHZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgZWFjaCBnZW9tZXRyeVxuXHRcdF9tZXNoLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblx0XHRfbWVzaC5nZW9tZXRyeS5pbmRleCA9IGJhdGNoR2VvbWV0cnkuaW5kZXg7XG5cdFx0X21lc2guZ2VvbWV0cnkuYXR0cmlidXRlcyA9IGJhdGNoR2VvbWV0cnkuYXR0cmlidXRlcztcblx0XHRpZiAoIF9tZXNoLmdlb21ldHJ5LmJvdW5kaW5nQm94ID09PSBudWxsICkge1xuXG5cdFx0XHRfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIF9tZXNoLmdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHRfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpZiAoICEgaW5zdGFuY2VJbmZvWyBpIF0udmlzaWJsZSB8fCAhIGluc3RhbmNlSW5mb1sgaSBdLmFjdGl2ZSApIHtcblxuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBnZW9tZXRyeUlkID0gaW5zdGFuY2VJbmZvWyBpIF0uZ2VvbWV0cnlJbmRleDtcblx0XHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXTtcblx0XHRcdF9tZXNoLmdlb21ldHJ5LnNldERyYXdSYW5nZSggZ2VvbWV0cnlJbmZvLnN0YXJ0LCBnZW9tZXRyeUluZm8uY291bnQgKTtcblxuXHRcdFx0Ly8gZ2V0IHRoZSBpbnRlcnNlY3RzXG5cdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWVzaC5tYXRyaXhXb3JsZCApLnByZW11bHRpcGx5KCBtYXRyaXhXb3JsZCApO1xuXHRcdFx0dGhpcy5nZXRCb3VuZGluZ0JveEF0KCBnZW9tZXRyeUlkLCBfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ0JveCApO1xuXHRcdFx0dGhpcy5nZXRCb3VuZGluZ1NwaGVyZUF0KCBnZW9tZXRyeUlkLCBfbWVzaC5nZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApO1xuXHRcdFx0X21lc2gucmF5Y2FzdCggcmF5Y2FzdGVyLCBfYmF0Y2hJbnRlcnNlY3RzICk7XG5cblx0XHRcdC8vIGFkZCBiYXRjaCBpZCB0byB0aGUgaW50ZXJzZWN0c1xuXHRcdFx0Zm9yICggbGV0IGogPSAwLCBsID0gX2JhdGNoSW50ZXJzZWN0cy5sZW5ndGg7IGogPCBsOyBqICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGludGVyc2VjdCA9IF9iYXRjaEludGVyc2VjdHNbIGogXTtcblx0XHRcdFx0aW50ZXJzZWN0Lm9iamVjdCA9IHRoaXM7XG5cdFx0XHRcdGludGVyc2VjdC5iYXRjaElkID0gaTtcblx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCBpbnRlcnNlY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfYmF0Y2hJbnRlcnNlY3RzLmxlbmd0aCA9IDA7XG5cblx0XHR9XG5cblx0XHRfbWVzaC5tYXRlcmlhbCA9IG51bGw7XG5cdFx0X21lc2guZ2VvbWV0cnkuaW5kZXggPSBudWxsO1xuXHRcdF9tZXNoLmdlb21ldHJ5LmF0dHJpYnV0ZXMgPSB7fTtcblx0XHRfbWVzaC5nZW9tZXRyeS5zZXREcmF3UmFuZ2UoIDAsIEluZmluaXR5ICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5nZW9tZXRyeSA9IHNvdXJjZS5nZW9tZXRyeS5jbG9uZSgpO1xuXHRcdHRoaXMucGVyT2JqZWN0RnJ1c3R1bUN1bGxlZCA9IHNvdXJjZS5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkO1xuXHRcdHRoaXMuc29ydE9iamVjdHMgPSBzb3VyY2Uuc29ydE9iamVjdHM7XG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveCAhPT0gbnVsbCA/IHNvdXJjZS5ib3VuZGluZ0JveC5jbG9uZSgpIDogbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gc291cmNlLmJvdW5kaW5nU3BoZXJlICE9PSBudWxsID8gc291cmNlLmJvdW5kaW5nU3BoZXJlLmNsb25lKCkgOiBudWxsO1xuXG5cdFx0dGhpcy5fZ2VvbWV0cnlJbmZvID0gc291cmNlLl9nZW9tZXRyeUluZm8ubWFwKCBpbmZvID0+ICgge1xuXHRcdFx0Li4uaW5mbyxcblxuXHRcdFx0Ym91bmRpbmdCb3g6IGluZm8uYm91bmRpbmdCb3ggIT09IG51bGwgPyBpbmZvLmJvdW5kaW5nQm94LmNsb25lKCkgOiBudWxsLFxuXHRcdFx0Ym91bmRpbmdTcGhlcmU6IGluZm8uYm91bmRpbmdTcGhlcmUgIT09IG51bGwgPyBpbmZvLmJvdW5kaW5nU3BoZXJlLmNsb25lKCkgOiBudWxsLFxuXHRcdH0gKSApO1xuXHRcdHRoaXMuX2luc3RhbmNlSW5mbyA9IHNvdXJjZS5faW5zdGFuY2VJbmZvLm1hcCggaW5mbyA9PiAoIHsgLi4uaW5mbyB9ICkgKTtcblxuXHRcdHRoaXMuX21heEluc3RhbmNlQ291bnQgPSBzb3VyY2UuX21heEluc3RhbmNlQ291bnQ7XG5cdFx0dGhpcy5fbWF4VmVydGV4Q291bnQgPSBzb3VyY2UuX21heFZlcnRleENvdW50O1xuXHRcdHRoaXMuX21heEluZGV4Q291bnQgPSBzb3VyY2UuX21heEluZGV4Q291bnQ7XG5cblx0XHR0aGlzLl9nZW9tZXRyeUluaXRpYWxpemVkID0gc291cmNlLl9nZW9tZXRyeUluaXRpYWxpemVkO1xuXHRcdHRoaXMuX2dlb21ldHJ5Q291bnQgPSBzb3VyY2UuX2dlb21ldHJ5Q291bnQ7XG5cdFx0dGhpcy5fbXVsdGlEcmF3Q291bnRzID0gc291cmNlLl9tdWx0aURyYXdDb3VudHMuc2xpY2UoKTtcblx0XHR0aGlzLl9tdWx0aURyYXdTdGFydHMgPSBzb3VyY2UuX211bHRpRHJhd1N0YXJ0cy5zbGljZSgpO1xuXG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gc291cmNlLl9tYXRyaWNlc1RleHR1cmUuY2xvbmUoKTtcblx0XHR0aGlzLl9tYXRyaWNlc1RleHR1cmUuaW1hZ2UuZGF0YSA9IHRoaXMuX21hdHJpY2VzVGV4dHVyZS5pbWFnZS5kYXRhLnNsaWNlKCk7XG5cblx0XHRpZiAoIHRoaXMuX2NvbG9yc1RleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2NvbG9yc1RleHR1cmUgPSBzb3VyY2UuX2NvbG9yc1RleHR1cmUuY2xvbmUoKTtcblx0XHRcdHRoaXMuX2NvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YSA9IHRoaXMuX2NvbG9yc1RleHR1cmUuaW1hZ2UuZGF0YS5zbGljZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0Ly8gQXNzdW1pbmcgdGhlIGdlb21ldHJ5IGlzIG5vdCBzaGFyZWQgd2l0aCBvdGhlciBtZXNoZXNcblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblxuXHRcdHRoaXMuX21hdHJpY2VzVGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fbWF0cmljZXNUZXh0dXJlID0gbnVsbDtcblxuXHRcdHRoaXMuX2luZGlyZWN0VGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5faW5kaXJlY3RUZXh0dXJlID0gbnVsbDtcblxuXHRcdGlmICggdGhpcy5fY29sb3JzVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fY29sb3JzVGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0XHR0aGlzLl9jb2xvcnNUZXh0dXJlID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0b25CZWZvcmVSZW5kZXIoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwvKiwgX2dyb3VwKi8gKSB7XG5cblx0XHQvLyBpZiB2aXNpYmlsaXR5IGhhcyBub3QgY2hhbmdlZCBhbmQgZnJ1c3R1bSBjdWxsaW5nIGFuZCBvYmplY3Qgc29ydGluZyBpcyBub3QgcmVxdWlyZWRcblx0XHQvLyB0aGVuIHNraXAgaXRlcmF0aW5nIG92ZXIgYWxsIGl0ZW1zXG5cdFx0aWYgKCAhIHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkICYmICEgdGhpcy5wZXJPYmplY3RGcnVzdHVtQ3VsbGVkICYmICEgdGhpcy5zb3J0T2JqZWN0cyApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdGhlIGluZGV4ZWQgdmVyc2lvbiBvZiB0aGUgbXVsdGkgZHJhdyBmdW5jdGlvbiByZXF1aXJlcyBzcGVjaWZ5aW5nIHRoZSBzdGFydFxuXHRcdC8vIG9mZnNldCBpbiBieXRlcy5cblx0XHRjb25zdCBpbmRleCA9IGdlb21ldHJ5LmdldEluZGV4KCk7XG5cdFx0Y29uc3QgYnl0ZXNQZXJFbGVtZW50ID0gaW5kZXggPT09IG51bGwgPyAxIDogaW5kZXguYXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG5cblx0XHRjb25zdCBpbnN0YW5jZUluZm8gPSB0aGlzLl9pbnN0YW5jZUluZm87XG5cdFx0Y29uc3QgbXVsdGlEcmF3U3RhcnRzID0gdGhpcy5fbXVsdGlEcmF3U3RhcnRzO1xuXHRcdGNvbnN0IG11bHRpRHJhd0NvdW50cyA9IHRoaXMuX211bHRpRHJhd0NvdW50cztcblx0XHRjb25zdCBnZW9tZXRyeUluZm9MaXN0ID0gdGhpcy5fZ2VvbWV0cnlJbmZvO1xuXHRcdGNvbnN0IHBlck9iamVjdEZydXN0dW1DdWxsZWQgPSB0aGlzLnBlck9iamVjdEZydXN0dW1DdWxsZWQ7XG5cdFx0Y29uc3QgaW5kaXJlY3RUZXh0dXJlID0gdGhpcy5faW5kaXJlY3RUZXh0dXJlO1xuXHRcdGNvbnN0IGluZGlyZWN0QXJyYXkgPSBpbmRpcmVjdFRleHR1cmUuaW1hZ2UuZGF0YTtcblxuXHRcdC8vIHByZXBhcmUgdGhlIGZydXN0dW0gaW4gdGhlIGxvY2FsIGZyYW1lXG5cdFx0aWYgKCBwZXJPYmplY3RGcnVzdHVtQ3VsbGVkICkge1xuXG5cdFx0XHRfbWF0cml4JDFcblx0XHRcdFx0Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlIClcblx0XHRcdFx0Lm11bHRpcGx5KCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRfZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeChcblx0XHRcdFx0X21hdHJpeCQxLFxuXHRcdFx0XHRyZW5kZXJlci5jb29yZGluYXRlU3lzdGVtXG5cdFx0XHQpO1xuXG5cdFx0fVxuXG5cdFx0bGV0IG11bHRpRHJhd0NvdW50ID0gMDtcblx0XHRpZiAoIHRoaXMuc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdC8vIGdldCB0aGUgY2FtZXJhIHBvc2l0aW9uIGluIHRoZSBsb2NhbCBmcmFtZVxuXHRcdFx0X21hdHJpeCQxLmNvcHkoIHRoaXMubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRcdF92ZWN0b3IkNS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApLmFwcGx5TWF0cml4NCggX21hdHJpeCQxICk7XG5cdFx0XHRfZm9yd2FyZC5zZXQoIDAsIDAsIC0xICkudHJhbnNmb3JtRGlyZWN0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKS50cmFuc2Zvcm1EaXJlY3Rpb24oIF9tYXRyaXgkMSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBpbnN0YW5jZUluZm8ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIGluc3RhbmNlSW5mb1sgaSBdLnZpc2libGUgJiYgaW5zdGFuY2VJbmZvWyBpIF0uYWN0aXZlICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZ2VvbWV0cnlJZCA9IGluc3RhbmNlSW5mb1sgaSBdLmdlb21ldHJ5SW5kZXg7XG5cblx0XHRcdFx0XHQvLyBnZXQgdGhlIGJvdW5kcyBpbiB3b3JsZCBzcGFjZVxuXHRcdFx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGksIF9tYXRyaXgkMSApO1xuXHRcdFx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdTcGhlcmVBdCggZ2VvbWV0cnlJZCwgX3NwaGVyZSQyICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4JDEgKTtcblxuXHRcdFx0XHRcdC8vIGRldGVybWluZSB3aGV0aGVyIHRoZSBiYXRjaGVkIGdlb21ldHJ5IGlzIHdpdGhpbiB0aGUgZnJ1c3R1bVxuXHRcdFx0XHRcdGxldCBjdWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoIHBlck9iamVjdEZydXN0dW1DdWxsZWQgKSB7XG5cblx0XHRcdFx0XHRcdGN1bGxlZCA9ICEgX2ZydXN0dW0uaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgY3VsbGVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyBnZXQgdGhlIGRpc3RhbmNlIGZyb20gY2FtZXJhIHVzZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5SW5mbyA9IGdlb21ldHJ5SW5mb0xpc3RbIGdlb21ldHJ5SWQgXTtcblx0XHRcdFx0XHRcdGNvbnN0IHogPSBfdGVtcC5zdWJWZWN0b3JzKCBfc3BoZXJlJDIuY2VudGVyLCBfdmVjdG9yJDUgKS5kb3QoIF9mb3J3YXJkICk7XG5cdFx0XHRcdFx0XHRfcmVuZGVyTGlzdC5wdXNoKCBnZW9tZXRyeUluZm8uc3RhcnQsIGdlb21ldHJ5SW5mby5jb3VudCwgeiwgaSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTb3J0IHRoZSBkcmF3IHJhbmdlcyBhbmQgcHJlcCBmb3IgcmVuZGVyaW5nXG5cdFx0XHRjb25zdCBsaXN0ID0gX3JlbmRlckxpc3QubGlzdDtcblx0XHRcdGNvbnN0IGN1c3RvbVNvcnQgPSB0aGlzLmN1c3RvbVNvcnQ7XG5cdFx0XHRpZiAoIGN1c3RvbVNvcnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0bGlzdC5zb3J0KCBtYXRlcmlhbC50cmFuc3BhcmVudCA/IHNvcnRUcmFuc3BhcmVudCA6IHNvcnRPcGFxdWUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjdXN0b21Tb3J0LmNhbGwoIHRoaXMsIGxpc3QsIGNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpdGVtID0gbGlzdFsgaSBdO1xuXHRcdFx0XHRtdWx0aURyYXdTdGFydHNbIG11bHRpRHJhd0NvdW50IF0gPSBpdGVtLnN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50O1xuXHRcdFx0XHRtdWx0aURyYXdDb3VudHNbIG11bHRpRHJhd0NvdW50IF0gPSBpdGVtLmNvdW50O1xuXHRcdFx0XHRpbmRpcmVjdEFycmF5WyBtdWx0aURyYXdDb3VudCBdID0gaXRlbS5pbmRleDtcblx0XHRcdFx0bXVsdGlEcmF3Q291bnQgKys7XG5cblx0XHRcdH1cblxuXHRcdFx0X3JlbmRlckxpc3QucmVzZXQoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluc3RhbmNlSW5mby5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggaW5zdGFuY2VJbmZvWyBpIF0udmlzaWJsZSAmJiBpbnN0YW5jZUluZm9bIGkgXS5hY3RpdmUgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeUlkID0gaW5zdGFuY2VJbmZvWyBpIF0uZ2VvbWV0cnlJbmRleDtcblxuXHRcdFx0XHRcdC8vIGRldGVybWluZSB3aGV0aGVyIHRoZSBiYXRjaGVkIGdlb21ldHJ5IGlzIHdpdGhpbiB0aGUgZnJ1c3R1bVxuXHRcdFx0XHRcdGxldCBjdWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoIHBlck9iamVjdEZydXN0dW1DdWxsZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGdldCB0aGUgYm91bmRzIGluIHdvcmxkIHNwYWNlXG5cdFx0XHRcdFx0XHR0aGlzLmdldE1hdHJpeEF0KCBpLCBfbWF0cml4JDEgKTtcblx0XHRcdFx0XHRcdHRoaXMuZ2V0Qm91bmRpbmdTcGhlcmVBdCggZ2VvbWV0cnlJZCwgX3NwaGVyZSQyICkuYXBwbHlNYXRyaXg0KCBfbWF0cml4JDEgKTtcblx0XHRcdFx0XHRcdGN1bGxlZCA9ICEgX2ZydXN0dW0uaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgY3VsbGVkICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeUluZm8gPSBnZW9tZXRyeUluZm9MaXN0WyBnZW9tZXRyeUlkIF07XG5cdFx0XHRcdFx0XHRtdWx0aURyYXdTdGFydHNbIG11bHRpRHJhd0NvdW50IF0gPSBnZW9tZXRyeUluZm8uc3RhcnQgKiBieXRlc1BlckVsZW1lbnQ7XG5cdFx0XHRcdFx0XHRtdWx0aURyYXdDb3VudHNbIG11bHRpRHJhd0NvdW50IF0gPSBnZW9tZXRyeUluZm8uY291bnQ7XG5cdFx0XHRcdFx0XHRpbmRpcmVjdEFycmF5WyBtdWx0aURyYXdDb3VudCBdID0gaTtcblx0XHRcdFx0XHRcdG11bHRpRHJhd0NvdW50ICsrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aW5kaXJlY3RUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLl9tdWx0aURyYXdDb3VudCA9IG11bHRpRHJhd0NvdW50O1xuXHRcdHRoaXMuX3Zpc2liaWxpdHlDaGFuZ2VkID0gZmFsc2U7XG5cblx0fVxuXG5cdG9uQmVmb3JlU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwvKiAsIGdyb3VwICovICkge1xuXG5cdFx0dGhpcy5vbkJlZm9yZVJlbmRlciggcmVuZGVyZXIsIG51bGwsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIG1hdGVyaWFsIGZvciByZW5kZXJpbmcgbGluZSBwcmltaXRpdmVzLlxuICpcbiAqIE1hdGVyaWFscyBkZWZpbmUgdGhlIGFwcGVhcmFuY2Ugb2YgcmVuZGVyYWJsZSAzRCBvYmplY3RzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYgfSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIE1hdGVyaWFsXG4gKi9cbmNsYXNzIExpbmVCYXNpY01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGxpbmUgYmFzaWMgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0xpbmVCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdMaW5lQmFzaWNNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBDb2xvciBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSwxKVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBjb2xvciBvZiB0aGUgbGluZXMgdXNpbmcgZGF0YSBmcm9tIGEgdGV4dHVyZS4gVGhlIHRleHR1cmUgbWFwXG5cdFx0ICogY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZSBkaWZmdXNlIGBjb2xvcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIGxpbmUgdGhpY2tuZXNzIG9yIGxpbmVzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uIFdlYkdMIGFuZCBXZWJHUFVcblx0XHQgKiBpZ25vcmUgdGhpcyBzZXR0aW5nIGFuZCBhbHdheXMgcmVuZGVyIGxpbmUgcHJpbWl0aXZlcyB3aXRoIGFcblx0XHQgKiB3aWR0aCBvZiBvbmUgcGl4ZWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmxpbmV3aWR0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIGFwcGVhcmFuY2Ugb2YgbGluZSBlbmRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdidXR0J3wncm91bmQnfCdzcXVhcmUnKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy5saW5lY2FwID0gJ3JvdW5kJztcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgYXBwZWFyYW5jZSBvZiBsaW5lIGpvaW50cy5cblx0XHQgKlxuXHRcdCAqIENhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgU1ZHUmVuZGVyZXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeygncm91bmQnfCdiZXZlbCd8J21pdGVyJyl9XG5cdFx0ICogQGRlZmF1bHQgJ3JvdW5kJ1xuXHRcdCAqL1xuXHRcdHRoaXMubGluZWpvaW4gPSAncm91bmQnO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgbWF0ZXJpYWwgaXMgYWZmZWN0ZWQgYnkgZm9nIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpbmV3aWR0aCA9IHNvdXJjZS5saW5ld2lkdGg7XG5cdFx0dGhpcy5saW5lY2FwID0gc291cmNlLmxpbmVjYXA7XG5cdFx0dGhpcy5saW5lam9pbiA9IHNvdXJjZS5saW5lam9pbjtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdlN0YXJ0ID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZFbmQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9pbnZlcnNlTWF0cml4JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcmF5JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcbmNvbnN0IF9zcGhlcmUkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFNwaGVyZSgpO1xuXG5jb25zdCBfaW50ZXJzZWN0UG9pbnRPblJheSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9pbnRlcnNlY3RQb2ludE9uU2VnbWVudCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBBIGNvbnRpbnVvdXMgbGluZS4gVGhlIGxpbmUgYXJlIHJlbmRlcmVkIGJ5IGNvbm5lY3RpbmcgY29uc2VjdXRpdmVcbiAqIHZlcnRpY2VzIHdpdGggc3RyYWlnaHQgbGluZXMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweDAwMDBmZiB9ICk7XG4gKlxuICogY29uc3QgcG9pbnRzID0gW107XG4gKiBwb2ludHMucHVzaCggbmV3IFRIUkVFLlZlY3RvcjMoIC0gMTAsIDAsIDAgKSApO1xuICogcG9pbnRzLnB1c2goIG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxMCwgMCApICk7XG4gKiBwb2ludHMucHVzaCggbmV3IFRIUkVFLlZlY3RvcjMoIDEwLCAwLCAwICkgKTtcbiAqXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuICpcbiAqIGNvbnN0IGxpbmUgPSBuZXcgVEhSRUUuTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIGxpbmUgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBMaW5lIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGxpbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IFtnZW9tZXRyeV0gLSBUaGUgbGluZSBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbHxBcnJheTxNYXRlcmlhbD59IFttYXRlcmlhbF0gLSBUaGUgbGluZSBtYXRlcmlhbC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCgpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNMaW5lID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdMaW5lJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaW5lIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0J1ZmZlckdlb21ldHJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaW5lIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge01hdGVyaWFsfEFycmF5PE1hdGVyaWFsPn1cblx0XHQgKiBAZGVmYXVsdCBMaW5lQmFzaWNNYXRlcmlhbFxuXHRcdCAqL1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgZGljdGlvbmFyeSByZXByZXNlbnRpbmcgdGhlIG1vcnBoIHRhcmdldHMgaW4gdGhlIGdlb21ldHJ5LiBUaGUga2V5IGlzIHRoZVxuXHRcdCAqIG1vcnBoIHRhcmdldHMgbmFtZSwgdGhlIHZhbHVlIGl0cyBhdHRyaWJ1dGUgaW5kZXguIFRoaXMgbWVtYmVyIGlzIGB1bmRlZmluZWRgXG5cdFx0ICogYnkgZGVmYXVsdCBhbmQgb25seSBzZXQgd2hlbiBtb3JwaCB0YXJnZXRzIGFyZSBkZXRlY3RlZCBpbiB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PFN0cmluZyxudW1iZXI+fHVuZGVmaW5lZH1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHVuZGVmaW5lZDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIHdlaWdodHMgdHlwaWNhbGx5IGluIHRoZSByYW5nZSBgWzAsMV1gIHRoYXQgc3BlY2lmeSBob3cgbXVjaCBvZiB0aGUgbW9ycGhcblx0XHQgKiBpcyBhcHBsaWVkLiBUaGlzIG1lbWJlciBpcyBgdW5kZWZpbmVkYCBieSBkZWZhdWx0IGFuZCBvbmx5IHNldCB3aGVuIG1vcnBoIHRhcmdldHMgYXJlXG5cdFx0ICogZGV0ZWN0ZWQgaW4gdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PG51bWJlcj58dW5kZWZpbmVkfVxuXHRcdCAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuXHRcdCAqL1xuXHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gdW5kZWZpbmVkO1xuXG5cdFx0dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IEFycmF5LmlzQXJyYXkoIHNvdXJjZS5tYXRlcmlhbCApID8gc291cmNlLm1hdGVyaWFsLnNsaWNlKCkgOiBzb3VyY2UubWF0ZXJpYWw7XG5cdFx0dGhpcy5nZW9tZXRyeSA9IHNvdXJjZS5nZW9tZXRyeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgYW4gYXJyYXkgb2YgZGlzdGFuY2UgdmFsdWVzIHdoaWNoIGFyZSBuZWNlc3NhcnkgZm9yIHJlbmRlcmluZyBkYXNoZWQgbGluZXMuXG5cdCAqIEZvciBlYWNoIHZlcnRleCBpbiB0aGUgZ2VvbWV0cnksIHRoZSBtZXRob2QgY2FsY3VsYXRlcyB0aGUgY3VtdWxhdGl2ZSBsZW5ndGggZnJvbSB0aGVcblx0ICogY3VycmVudCBwb2ludCB0byB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgdGhlIGxpbmUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0xpbmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbGluZS5cblx0ICovXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRjb25zdCBsaW5lRGlzdGFuY2VzID0gWyAwIF07XG5cblx0XHRcdGZvciAoIGxldCBpID0gMSwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRfdlN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpIC0gMSApO1xuXHRcdFx0XHRfdkVuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSArPSBfdlN0YXJ0LmRpc3RhbmNlVG8oIF92RW5kICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBpbnRlcnNlY3Rpb24gcG9pbnRzIGJldHdlZW4gYSBjYXN0ZWQgcmF5IGFuZCB0aGlzIGxpbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UmF5Y2FzdGVyfSByYXljYXN0ZXIgLSBUaGUgcmF5Y2FzdGVyLlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IGludGVyc2VjdHMgLSBUaGUgdGFyZ2V0IGFycmF5IHRoYXQgaG9sZHMgdGhlIGludGVyc2VjdGlvbiBwb2ludHMuXG5cdCAqL1xuXHRyYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXHRcdGNvbnN0IHRocmVzaG9sZCA9IHJheWNhc3Rlci5wYXJhbXMuTGluZS50aHJlc2hvbGQ7XG5cdFx0Y29uc3QgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xuXG5cdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRfc3BoZXJlJDEuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRfc3BoZXJlJDEuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXHRcdF9zcGhlcmUkMS5yYWRpdXMgKz0gdGhyZXNob2xkO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUkMSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRfaW52ZXJzZU1hdHJpeCQxLmNvcHkoIG1hdHJpeFdvcmxkICkuaW52ZXJ0KCk7XG5cdFx0X3JheSQxLmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4JDEgKTtcblxuXHRcdGNvbnN0IGxvY2FsVGhyZXNob2xkID0gdGhyZXNob2xkIC8gKCAoIHRoaXMuc2NhbGUueCArIHRoaXMuc2NhbGUueSArIHRoaXMuc2NhbGUueiApIC8gMyApO1xuXHRcdGNvbnN0IGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkO1xuXG5cdFx0Y29uc3Qgc3RlcCA9IHRoaXMuaXNMaW5lU2VnbWVudHMgPyAyIDogMTtcblxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgbCA9IGVuZCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGluZGV4LmdldFgoIGkgKTtcblx0XHRcdFx0Y29uc3QgYiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cblx0XHRcdFx0Y29uc3QgaW50ZXJzZWN0ID0gY2hlY2tJbnRlcnNlY3Rpb24oIHRoaXMsIHJheWNhc3RlciwgX3JheSQxLCBsb2NhbFRocmVzaG9sZFNxLCBhLCBiLCBpICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggZW5kIC0gMSApO1xuXHRcdFx0XHRjb25zdCBiID0gaW5kZXguZ2V0WCggc3RhcnQgKTtcblxuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3QgPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgcmF5Y2FzdGVyLCBfcmF5JDEsIGxvY2FsVGhyZXNob2xkU3EsIGEsIGIsIGVuZCAtIDEgKTtcblxuXHRcdFx0XHRpZiAoIGludGVyc2VjdCApIHtcblxuXHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kIC0gMTsgaSA8IGw7IGkgKz0gc3RlcCApIHtcblxuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3QgPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgcmF5Y2FzdGVyLCBfcmF5JDEsIGxvY2FsVGhyZXNob2xkU3EsIGksIGkgKyAxLCBpICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRoaXMuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0XHRjb25zdCBpbnRlcnNlY3QgPSBjaGVja0ludGVyc2VjdGlvbiggdGhpcywgcmF5Y2FzdGVyLCBfcmF5JDEsIGxvY2FsVGhyZXNob2xkU3EsIGVuZCAtIDEsIHN0YXJ0LCBlbmQgLSAxICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3QgKSB7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWVzIG9mIHtAbGluayBMaW5lI21vcnBoVGFyZ2V0RGljdGlvbmFyeX0gYW5kIHtAbGluayBMaW5lI21vcnBoVGFyZ2V0SW5mbHVlbmNlc31cblx0ICogdG8gbWFrZSBzdXJlIGV4aXN0aW5nIG1vcnBoIHRhcmdldHMgY2FuIGluZmx1ZW5jZSB0aGlzIDNEIG9iamVjdC5cblx0ICovXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0cygpIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoIG1vcnBoQXR0cmlidXRlcyApO1xuXG5cdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gW107XG5cdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0Zm9yICggbGV0IG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goIDAgKTtcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgbmFtZSBdID0gbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgcmF5Y2FzdGVyLCByYXksIHRocmVzaG9sZFNxLCBhLCBiLCBpICkge1xuXG5cdGNvbnN0IHBvc2l0aW9uQXR0cmlidXRlID0gb2JqZWN0Lmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0X3ZTdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYSApO1xuXHRfdkVuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgYiApO1xuXG5cdGNvbnN0IGRpc3RTcSA9IHJheS5kaXN0YW5jZVNxVG9TZWdtZW50KCBfdlN0YXJ0LCBfdkVuZCwgX2ludGVyc2VjdFBvaW50T25SYXksIF9pbnRlcnNlY3RQb2ludE9uU2VnbWVudCApO1xuXG5cdGlmICggZGlzdFNxID4gdGhyZXNob2xkU3EgKSByZXR1cm47XG5cblx0X2ludGVyc2VjdFBvaW50T25SYXkuYXBwbHlNYXRyaXg0KCBvYmplY3QubWF0cml4V29ybGQgKTsgLy8gTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvblxuXG5cdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggX2ludGVyc2VjdFBvaW50T25SYXkgKTtcblxuXHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgcmV0dXJuO1xuXG5cdHJldHVybiB7XG5cblx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XG5cdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludE9uU2VnbWVudC5jbG9uZSgpLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICksXG5cdFx0aW5kZXg6IGksXG5cdFx0ZmFjZTogbnVsbCxcblx0XHRmYWNlSW5kZXg6IG51bGwsXG5cdFx0YmFyeWNvb3JkOiBudWxsLFxuXHRcdG9iamVjdDogb2JqZWN0XG5cblx0fTtcblxufVxuXG5jb25zdCBfc3RhcnQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfZW5kID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIEEgc2VyaWVzIG9mIGxpbmVzIGRyYXduIGJldHdlZW4gcGFpcnMgb2YgdmVydGljZXMuXG4gKlxuICogQGF1Z21lbnRzIExpbmVcbiAqL1xuY2xhc3MgTGluZVNlZ21lbnRzIGV4dGVuZHMgTGluZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbGluZSBzZWdtZW50cy5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gW2dlb21ldHJ5XSAtIFRoZSBsaW5lIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfEFycmF5PE1hdGVyaWFsPn0gW21hdGVyaWFsXSAtIFRoZSBsaW5lIG1hdGVyaWFsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNMaW5lU2VnbWVudHMgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVTZWdtZW50cyc7XG5cblx0fVxuXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzKCkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXG5cdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRjb25zdCBsaW5lRGlzdGFuY2VzID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHRcdF9zdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXHRcdFx0XHRfZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBfc3RhcnQuZGlzdGFuY2VUbyggX2VuZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmVTZWdtZW50cy5jb21wdXRlTGluZURpc3RhbmNlcygpOiBDb21wdXRhdGlvbiBvbmx5IHBvc3NpYmxlIHdpdGggbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnkuJyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBjb250aW51b3VzIGxpbmUuIFRoaXMgaXMgbmVhcmx5IHRoZSBzYW1lIGFzIHtAbGluayBMaW5lfSB0aGUgb25seSBkaWZmZXJlbmNlXG4gKiBpcyB0aGF0IHRoZSBsYXN0IHZlcnRleCBpcyBjb25uZWN0ZWQgd2l0aCB0aGUgZmlyc3QgdmVydGV4IGluIG9yZGVyIHRvIGNsb3NlXG4gKiB0aGUgbGluZSB0byBmb3JtIGEgbG9vcC5cbiAqXG4gKiBAYXVnbWVudHMgTGluZVxuICovXG5jbGFzcyBMaW5lTG9vcCBleHRlbmRzIExpbmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGxpbmUgbG9vcC5cblx0ICpcblx0ICogQHBhcmFtIHtCdWZmZXJHZW9tZXRyeX0gW2dlb21ldHJ5XSAtIFRoZSBsaW5lIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge01hdGVyaWFsfEFycmF5PE1hdGVyaWFsPn0gW21hdGVyaWFsXSAtIFRoZSBsaW5lIG1hdGVyaWFsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNMaW5lTG9vcCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGluZUxvb3AnO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgbWF0ZXJpYWwgZm9yIHJlbmRlcmluZyBwb2ludCBwcmltaXRpdmVzLlxuICpcbiAqIE1hdGVyaWFscyBkZWZpbmUgdGhlIGFwcGVhcmFuY2Ugb2YgcmVuZGVyYWJsZSAzRCBvYmplY3RzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuICpcbiAqIGZvciAoIGxldCBpID0gMDsgaSA8IDEwMDAwOyBpICsrICkge1xuICogXHRjb25zdCB4ID0gVEhSRUUuTWF0aFV0aWxzLnJhbmRGbG9hdFNwcmVhZCggMjAwMCApO1xuICogXHRjb25zdCB5ID0gVEhSRUUuTWF0aFV0aWxzLnJhbmRGbG9hdFNwcmVhZCggMjAwMCApO1xuICogXHRjb25zdCB6ID0gVEhSRUUuTWF0aFV0aWxzLnJhbmRGbG9hdFNwcmVhZCggMjAwMCApO1xuICpcbiAqIFx0dmVydGljZXMucHVzaCggeCwgeSwgeiApO1xuICogfVxuICpcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gKiBnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbCggeyBjb2xvcjogMHg4ODg4ODggfSApO1xuICogY29uc3QgcG9pbnRzID0gbmV3IFRIUkVFLlBvaW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIHBvaW50cyApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIE1hdGVyaWFsXG4gKi9cbmNsYXNzIFBvaW50c01hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvaW50cyBtYXRlcmlhbC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzXSAtIEFuIG9iamVjdCB3aXRoIG9uZSBvciBtb3JlIHByb3BlcnRpZXNcblx0ICogZGVmaW5pbmcgdGhlIG1hdGVyaWFsJ3MgYXBwZWFyYW5jZS4gQW55IHByb3BlcnR5IG9mIHRoZSBtYXRlcmlhbFxuXHQgKiAoaW5jbHVkaW5nIGFueSBwcm9wZXJ0eSBmcm9tIGluaGVyaXRlZCBtYXRlcmlhbHMpIGNhbiBiZSBwYXNzZWRcblx0ICogaW4gaGVyZS4gQ29sb3IgdmFsdWVzIGNhbiBiZSBwYXNzZWQgYW55IHR5cGUgb2YgdmFsdWUgYWNjZXB0ZWRcblx0ICogYnkge0BsaW5rIENvbG9yI3NldH0uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUG9pbnRzTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvaW50c01hdGVyaWFsJztcblxuXHRcdC8qKlxuXHRcdCAqIENvbG9yIG9mIHRoZSBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKiBAZGVmYXVsdCAoMSwxLDEpXG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb2xvciBtYXAuIE1heSBvcHRpb25hbGx5IGluY2x1ZGUgYW4gYWxwaGEgY2hhbm5lbCwgdHlwaWNhbGx5IGNvbWJpbmVkXG5cdFx0ICogd2l0aCB7QGxpbmsgTWF0ZXJpYWwjdHJhbnNwYXJlbnR9IG9yIHtAbGluayBNYXRlcmlhbCNhbHBoYVRlc3R9LiBUaGUgdGV4dHVyZSBtYXBcblx0XHQgKiBjb2xvciBpcyBtb2R1bGF0ZWQgYnkgdGhlIGRpZmZ1c2UgYGNvbG9yYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFscGhhIG1hcCBpcyBhIGdyYXlzY2FsZSB0ZXh0dXJlIHRoYXQgY29udHJvbHMgdGhlIG9wYWNpdHkgYWNyb3NzIHRoZVxuXHRcdCAqIHN1cmZhY2UgKGJsYWNrOiBmdWxseSB0cmFuc3BhcmVudDsgd2hpdGU6IGZ1bGx5IG9wYXF1ZSkuXG5cdFx0ICpcblx0XHQgKiBPbmx5IHRoZSBjb2xvciBvZiB0aGUgdGV4dHVyZSBpcyB1c2VkLCBpZ25vcmluZyB0aGUgYWxwaGEgY2hhbm5lbCBpZiBvbmVcblx0XHQgKiBleGlzdHMuIEZvciBSR0IgYW5kIFJHQkEgdGV4dHVyZXMsIHRoZSByZW5kZXJlciB3aWxsIHVzZSB0aGUgZ3JlZW4gY2hhbm5lbFxuXHRcdCAqIHdoZW4gc2FtcGxpbmcgdGhpcyB0ZXh0dXJlIGR1ZSB0byB0aGUgZXh0cmEgYml0IG9mIHByZWNpc2lvbiBwcm92aWRlZCBmb3Jcblx0XHQgKiBncmVlbiBpbiBEWFQtY29tcHJlc3NlZCBhbmQgdW5jb21wcmVzc2VkIFJHQiA1NjUgZm9ybWF0cy4gTHVtaW5hbmNlLW9ubHkgYW5kXG5cdFx0ICogbHVtaW5hbmNlL2FscGhhIHRleHR1cmVzIHdpbGwgYWxzbyBzdGlsbCB3b3JrIGFzIGV4cGVjdGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIHNpemUgb2YgdGhlIHBvaW50cyBpbiBwaXhlbHMuXG5cdFx0ICpcblx0XHQgKiBNaWdodCBiZSBjYXBwZWQgaWYgdGhlIHZhbHVlIGV4Y2VlZHMgaGFyZHdhcmUgZGVwZW5kZW50IHBhcmFtZXRlcnMgbGlrZSBbZ2wuQUxJQVNFRF9QT0lOVF9TSVpFX1JBTkdFXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR0xSZW5kZXJpbmdDb250ZXh0L2dldFBhcmFtZXRlfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuc2l6ZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBTcGVjaWZpZXMgd2hldGhlciBzaXplIG9mIGluZGl2aWR1YWwgcG9pbnRzIGlzIGF0dGVudWF0ZWQgYnkgdGhlIGNhbWVyYSBkZXB0aCAocGVyc3BlY3RpdmUgY2FtZXJhIG9ubHkpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuc2l6ZSA9IHNvdXJjZS5zaXplO1xuXHRcdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gc291cmNlLnNpemVBdHRlbnVhdGlvbjtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBfaW52ZXJzZU1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9yYXkgPSAvKkBfX1BVUkVfXyovIG5ldyBSYXkoKTtcbmNvbnN0IF9zcGhlcmUgPSAvKkBfX1BVUkVfXyovIG5ldyBTcGhlcmUoKTtcbmNvbnN0IF9wb3NpdGlvbiQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIEEgY2xhc3MgZm9yIGRpc3BsYXlpbmcgcG9pbnRzIG9yIHBvaW50IGNsb3Vkcy5cbiAqXG4gKiBAYXVnbWVudHMgT2JqZWN0M0RcbiAqL1xuY2xhc3MgUG9pbnRzIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvaW50IGNsb3VkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBbZ2VvbWV0cnldIC0gVGhlIHBvaW50cyBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtNYXRlcmlhbHxBcnJheTxNYXRlcmlhbD59IFttYXRlcmlhbF0gLSBUaGUgcG9pbnRzIG1hdGVyaWFsLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCksIG1hdGVyaWFsID0gbmV3IFBvaW50c01hdGVyaWFsKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1BvaW50cyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9pbnRzJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwb2ludHMgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QnVmZmVyR2VvbWV0cnl9XG5cdFx0ICovXG5cdFx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpbmUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TWF0ZXJpYWx8QXJyYXk8TWF0ZXJpYWw+fVxuXHRcdCAqIEBkZWZhdWx0IFBvaW50c01hdGVyaWFsXG5cdFx0ICovXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBkaWN0aW9uYXJ5IHJlcHJlc2VudGluZyB0aGUgbW9ycGggdGFyZ2V0cyBpbiB0aGUgZ2VvbWV0cnkuIFRoZSBrZXkgaXMgdGhlXG5cdFx0ICogbW9ycGggdGFyZ2V0cyBuYW1lLCB0aGUgdmFsdWUgaXRzIGF0dHJpYnV0ZSBpbmRleC4gVGhpcyBtZW1iZXIgaXMgYHVuZGVmaW5lZGBcblx0XHQgKiBieSBkZWZhdWx0IGFuZCBvbmx5IHNldCB3aGVuIG1vcnBoIHRhcmdldHMgYXJlIGRldGVjdGVkIGluIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8U3RyaW5nLG51bWJlcj58dW5kZWZpbmVkfVxuXHRcdCAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuXHRcdCAqL1xuXHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0gdW5kZWZpbmVkO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2Ygd2VpZ2h0cyB0eXBpY2FsbHkgaW4gdGhlIHJhbmdlIGBbMCwxXWAgdGhhdCBzcGVjaWZ5IGhvdyBtdWNoIG9mIHRoZSBtb3JwaFxuXHRcdCAqIGlzIGFwcGxpZWQuIFRoaXMgbWVtYmVyIGlzIGB1bmRlZmluZWRgIGJ5IGRlZmF1bHQgYW5kIG9ubHkgc2V0IHdoZW4gbW9ycGggdGFyZ2V0cyBhcmVcblx0XHQgKiBkZXRlY3RlZCBpbiB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8bnVtYmVyPnx1bmRlZmluZWR9XG5cdFx0ICogQGRlZmF1bHQgdW5kZWZpbmVkXG5cdFx0ICovXG5cdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSB1bmRlZmluZWQ7XG5cblx0XHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLm1hdGVyaWFsID0gQXJyYXkuaXNBcnJheSggc291cmNlLm1hdGVyaWFsICkgPyBzb3VyY2UubWF0ZXJpYWwuc2xpY2UoKSA6IHNvdXJjZS5tYXRlcmlhbDtcblx0XHR0aGlzLmdlb21ldHJ5ID0gc291cmNlLmdlb21ldHJ5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyBpbnRlcnNlY3Rpb24gcG9pbnRzIGJldHdlZW4gYSBjYXN0ZWQgcmF5IGFuZCB0aGlzIHBvaW50IGNsb3VkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1JheWNhc3Rlcn0gcmF5Y2FzdGVyIC0gVGhlIHJheWNhc3Rlci5cblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBpbnRlcnNlY3RzIC0gVGhlIHRhcmdldCBhcnJheSB0aGF0IGhvbGRzIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuXHQgKi9cblx0cmF5Y2FzdCggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xuXHRcdGNvbnN0IG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHRjb25zdCB0aHJlc2hvbGQgPSByYXljYXN0ZXIucGFyYW1zLlBvaW50cy50aHJlc2hvbGQ7XG5cdFx0Y29uc3QgZHJhd1JhbmdlID0gZ2VvbWV0cnkuZHJhd1JhbmdlO1xuXG5cdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cdFx0X3NwaGVyZS5yYWRpdXMgKz0gdGhyZXNob2xkO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvL1xuXG5cdFx0X2ludmVyc2VNYXRyaXguY29weSggbWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblx0XHRfcmF5LmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4ICk7XG5cblx0XHRjb25zdCBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICggKCB0aGlzLnNjYWxlLnggKyB0aGlzLnNjYWxlLnkgKyB0aGlzLnNjYWxlLnogKSAvIDMgKTtcblx0XHRjb25zdCBsb2NhbFRocmVzaG9sZFNxID0gbG9jYWxUaHJlc2hvbGQgKiBsb2NhbFRocmVzaG9sZDtcblxuXHRcdGNvbnN0IGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc3Qgc3RhcnQgPSBNYXRoLm1heCggMCwgZHJhd1JhbmdlLnN0YXJ0ICk7XG5cdFx0XHRjb25zdCBlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhID0gaW5kZXguZ2V0WCggaSApO1xuXG5cdFx0XHRcdF9wb3NpdGlvbiQyLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBhICk7XG5cblx0XHRcdFx0dGVzdFBvaW50KCBfcG9zaXRpb24kMiwgYSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdGNvbnN0IGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IHN0YXJ0LCBsID0gZW5kOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRfcG9zaXRpb24kMi5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXG5cdFx0XHRcdHRlc3RQb2ludCggX3Bvc2l0aW9uJDIsIGksIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRoaXMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWVzIG9mIHtAbGluayBQb2ludHMjbW9ycGhUYXJnZXREaWN0aW9uYXJ5fSBhbmQge0BsaW5rIFBvaW50cyNtb3JwaFRhcmdldEluZmx1ZW5jZXN9XG5cdCAqIHRvIG1ha2Ugc3VyZSBleGlzdGluZyBtb3JwaCB0YXJnZXRzIGNhbiBpbmZsdWVuY2UgdGhpcyAzRCBvYmplY3QuXG5cdCAqL1xuXHR1cGRhdGVNb3JwaFRhcmdldHMoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdGlmICgga2V5cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1sga2V5c1sgMCBdIF07XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIGxldCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVsgbSBdLm5hbWUgfHwgU3RyaW5nKCBtICk7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKCAwICk7XG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHRlc3RQb2ludCggcG9pbnQsIGluZGV4LCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCBvYmplY3QgKSB7XG5cblx0Y29uc3QgcmF5UG9pbnREaXN0YW5jZVNxID0gX3JheS5kaXN0YW5jZVNxVG9Qb2ludCggcG9pbnQgKTtcblxuXHRpZiAoIHJheVBvaW50RGlzdGFuY2VTcSA8IGxvY2FsVGhyZXNob2xkU3EgKSB7XG5cblx0XHRjb25zdCBpbnRlcnNlY3RQb2ludCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRfcmF5LmNsb3Nlc3RQb2ludFRvUG9pbnQoIHBvaW50LCBpbnRlcnNlY3RQb2ludCApO1xuXHRcdGludGVyc2VjdFBvaW50LmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblxuXHRcdGNvbnN0IGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyggaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0ZGlzdGFuY2VUb1JheTogTWF0aC5zcXJ0KCByYXlQb2ludERpc3RhbmNlU3EgKSxcblx0XHRcdHBvaW50OiBpbnRlcnNlY3RQb2ludCxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRmYWNlSW5kZXg6IG51bGwsXG5cdFx0XHRiYXJ5Y29vcmQ6IG51bGwsXG5cdFx0XHRvYmplY3Q6IG9iamVjdFxuXG5cdFx0fSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgdGV4dHVyZSBmb3IgdXNlIHdpdGggYSB2aWRlby5cbiAqXG4gKiBgYGBqc1xuICogLy8gYXNzdW1pbmcgeW91IGhhdmUgY3JlYXRlZCBhIEhUTUwgdmlkZW8gZWxlbWVudCB3aXRoIGlkPVwidmlkZW9cIlxuICogY29uc3QgdmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3ZpZGVvJyApO1xuICogY29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5WaWRlb1RleHR1cmUoIHZpZGVvICk7XG4gKiBgYGBcbiAqXG4gKiBOb3RlOiBBZnRlciB0aGUgaW5pdGlhbCB1c2Ugb2YgYSB0ZXh0dXJlLCBpdHMgZGltZW5zaW9ucywgZm9ybWF0LCBhbmQgdHlwZVxuICogY2Fubm90IGJlIGNoYW5nZWQuIEluc3RlYWQsIGNhbGwge0BsaW5rIFRleHR1cmUjZGlzcG9zZX0gb24gdGhlIHRleHR1cmUgYW5kIGluc3RhbnRpYXRlIGEgbmV3IG9uZS5cbiAqXG4gKiBAYXVnbWVudHMgVGV4dHVyZVxuICovXG5jbGFzcyBWaWRlb1RleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2aWRlbyB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZpZGVvfSB2aWRlbyAtIFRoZSB2aWRlbyBlbGVtZW50IHRvIHVzZSBhcyBhIGRhdGEgc291cmNlIGZvciB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttYXBwaW5nPVRleHR1cmUuREVGQVVMVF9NQVBQSU5HXSAtIFRoZSB0ZXh0dXJlIG1hcHBpbmcuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFM9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFMgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd3JhcFQ9Q2xhbXBUb0VkZ2VXcmFwcGluZ10gLSBUaGUgd3JhcFQgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWFnRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWFnIGZpbHRlciB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttaW5GaWx0ZXI9TGluZWFyRmlsdGVyXSAtIFRoZSBtaW4gZmlsdGVyIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zvcm1hdD1SR0JBRm9ybWF0XSAtIFRoZSB0ZXh0dXJlIGZvcm1hdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZpZGVvLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciA9IExpbmVhckZpbHRlciwgbWluRmlsdGVyID0gTGluZWFyRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKSB7XG5cblx0XHRzdXBlciggdmlkZW8sIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1ZpZGVvVGV4dHVyZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRmdW5jdGlvbiB1cGRhdGVWaWRlbygpIHtcblxuXHRcdFx0c2NvcGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0dmlkZW8ucmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayggdXBkYXRlVmlkZW8gKTtcblxuXHRcdH1cblxuXHRcdGlmICggJ3JlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2snIGluIHZpZGVvICkge1xuXG5cdFx0XHR2aWRlby5yZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrKCB1cGRhdGVWaWRlbyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5pbWFnZSApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSByZW5kZXJlciBhbmQgc2V0cyB7QGxpbmsgVGV4dHVyZSNuZWVkc1VwZGF0ZX1cblx0ICogdG8gYHRydWVgIGV2ZXJ5IHRpbWUgYSBuZXcgZnJhbWUgaXMgYXZhaWxhYmxlLlxuXHQgKlxuXHQgKiBPbmx5IHJlbGV2YW50IGlmIGByZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrYCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyLlxuXHQgKi9cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgdmlkZW8gPSB0aGlzLmltYWdlO1xuXHRcdGNvbnN0IGhhc1ZpZGVvRnJhbWVDYWxsYmFjayA9ICdyZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrJyBpbiB2aWRlbztcblxuXHRcdGlmICggaGFzVmlkZW9GcmFtZUNhbGxiYWNrID09PSBmYWxzZSAmJiB2aWRlby5yZWFkeVN0YXRlID49IHZpZGVvLkhBVkVfQ1VSUkVOVF9EQVRBICkge1xuXG5cdFx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIGFzIGFuIGFsdGVybmF0aXZlIHdheSB0byBkZWZpbmUgdmlkZW8gZGF0YS4gSW5zdGVhZCBvZiB1c2luZ1xuICogYW4gaW5zdGFuY2Ugb2YgYEhUTUxWaWRlb0VsZW1lbnRgIGxpa2Ugd2l0aCBgVmlkZW9UZXh0dXJlYCwgYFZpZGVvRnJhbWVUZXh0dXJlYCBleHBlY3RzIGVhY2ggZnJhbWUgaXNcbiAqIGRlZmluZWQgbWFudWFsbHkgdmlhIHtAbGluayBWaWRlb0ZyYW1lVGV4dHVyZSNzZXRGcmFtZX0uIEEgdHlwaWNhbCB1c2UgY2FzZSBmb3IgdGhpcyBtb2R1bGUgaXMgd2hlblxuICogdmlkZW8gZnJhbWVzIGFyZSBkZWNvZGVkIHdpdGggdGhlIFdlYkNvZGVjcyBBUEkuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHRleHR1cmUgPSBuZXcgVEhSRUUuVmlkZW9GcmFtZVRleHR1cmUoKTtcbiAqIHRleHR1cmUuc2V0RnJhbWUoIGZyYW1lICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgVmlkZW9UZXh0dXJlXG4gKi9cbmNsYXNzIFZpZGVvRnJhbWVUZXh0dXJlIGV4dGVuZHMgVmlkZW9UZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB2aWRlbyBmcmFtZSB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21hcHBpbmc9VGV4dHVyZS5ERUZBVUxUX01BUFBJTkddIC0gVGhlIHRleHR1cmUgbWFwcGluZy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwUz1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwUyB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3cmFwVD1DbGFtcFRvRWRnZVdyYXBwaW5nXSAtIFRoZSB3cmFwVCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFttYWdGaWx0ZXI9TGluZWFyRmlsdGVyXSAtIFRoZSBtYWcgZmlsdGVyIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21pbkZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1pbiBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZm9ybWF0PVJHQkFGb3JtYXRdIC0gVGhlIHRleHR1cmUgZm9ybWF0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3R5cGU9VW5zaWduZWRCeXRlVHlwZV0gLSBUaGUgdGV4dHVyZSB0eXBlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FuaXNvdHJvcHk9VGV4dHVyZS5ERUZBVUxUX0FOSVNPVFJPUFldIC0gVGhlIGFuaXNvdHJvcHkgdmFsdWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkge1xuXG5cdFx0c3VwZXIoIHt9LCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNWaWRlb0ZyYW1lVGV4dHVyZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBvdmVyd3JpdHRlbiB3aXRoIGFuIGVtcHR5IGltcGxlbWVudGF0aW9uIHNpbmNlXG5cdCAqIHRoaXMgdHlwZSBvZiB0ZXh0dXJlIGlzIHVwZGF0ZWQgdmlhIGBzZXRGcmFtZSgpYC5cblx0ICovXG5cdHVwZGF0ZSgpIHt9XG5cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7IC8vIHJlc3RvcmluZyBUZXh0dXJlLmNsb25lKClcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGN1cnJlbnQgZnJhbWUgb2YgdGhlIHZpZGVvLiBUaGlzIHdpbGwgYXV0b21hdGljYWxseSB1cGRhdGUgdGhlIHRleHR1cmVcblx0ICogc28gdGhlIGRhdGEgY2FuIGJlIHVzZWQgZm9yIHJlbmRlcmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtWaWRlb0ZyYW1lfSBmcmFtZSAtIFRoZSB2aWRlbyBmcmFtZS5cblx0ICovXG5cdHNldEZyYW1lKCBmcmFtZSApIHtcblxuXHRcdHRoaXMuaW1hZ2UgPSBmcmFtZTtcblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlKClgIG1ldGhvZHNcbiAqIG9mIHJlbmRlcmVycy4gSXQgZXh0cmFjdHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50IGJvdW5kIGZyYW1lYnVmZmVyIGFuZCBwcm92aWRlcyBpdFxuICogYXMgYSB0ZXh0dXJlIGZvciBmdXJ0aGVyIHVzYWdlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gKiBjb25zdCB0ZXh0dXJlU2l6ZSA9IDEyOCAqIHBpeGVsUmF0aW87XG4gKlxuICogY29uc3QgZnJhbWVUZXh0dXJlID0gbmV3IEZyYW1lYnVmZmVyVGV4dHVyZSggdGV4dHVyZVNpemUsIHRleHR1cmVTaXplICk7XG4gKlxuICogLy8gY2FsY3VsYXRlIHN0YXJ0IHBvc2l0aW9uIGZvciBjb3B5aW5nIHBhcnQgb2YgdGhlIGZyYW1lIGRhdGFcbiAqIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IyKCk7XG4gKiB2ZWN0b3IueCA9ICggd2luZG93LmlubmVyV2lkdGggKiBwaXhlbFJhdGlvIC8gMiApIC0gKCB0ZXh0dXJlU2l6ZSAvIDIgKTtcbiAqIHZlY3Rvci55ID0gKCB3aW5kb3cuaW5uZXJIZWlnaHQgKiBwaXhlbFJhdGlvIC8gMiApIC0gKCB0ZXh0dXJlU2l6ZSAvIDIgKTtcbiAqXG4gKiByZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjYW1lcmEgKTtcbiAqXG4gKiAvLyBjb3B5IHBhcnQgb2YgdGhlIHJlbmRlcmVkIGZyYW1lIGludG8gdGhlIGZyYW1lYnVmZmVyIHRleHR1cmVcbiAqIHJlbmRlcmVyLmNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSggZnJhbWVUZXh0dXJlLCB2ZWN0b3IgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBUZXh0dXJlXG4gKi9cbmNsYXNzIEZyYW1lYnVmZmVyVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZyYW1lYnVmZmVyIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdHN1cGVyKCB7IHdpZHRoLCBoZWlnaHQgfSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0ZyYW1lYnVmZmVyVGV4dHVyZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgdGhlIHRleHR1cmUgaXMgc2FtcGxlZCB3aGVuIGEgdGV4ZWwgY292ZXJzIG1vcmUgdGhhbiBvbmUgcGl4ZWwuXG5cdFx0ICpcblx0XHQgKiBPdmVyd3JpdHRlbiBhbmQgc2V0IHRvIGBOZWFyZXN0RmlsdGVyYCBieSBkZWZhdWx0IHRvIGRpc2FibGUgZmlsdGVyaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhOZWFyZXN0RmlsdGVyfE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyfE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXJ8TGluZWFyRmlsdGVyfExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXJ8TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyKX1cblx0XHQgKiBAZGVmYXVsdCBOZWFyZXN0RmlsdGVyXG5cdFx0ICovXG5cdFx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IHRoZSB0ZXh0dXJlIGlzIHNhbXBsZWQgd2hlbiBhIHRleGVsIGNvdmVycyBsZXNzIHRoYW4gb25lIHBpeGVsLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgTmVhcmVzdEZpbHRlcmAgYnkgZGVmYXVsdCB0byBkaXNhYmxlIGZpbHRlcmluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcnxOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyfExpbmVhckZpbHRlcnxMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyfExpbmVhck1pcG1hcExpbmVhckZpbHRlcil9XG5cdFx0ICogQGRlZmF1bHQgTmVhcmVzdEZpbHRlclxuXHRcdCAqL1xuXHRcdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdG8gZ2VuZXJhdGUgbWlwbWFwcyAoaWYgcG9zc2libGUpIGZvciBhIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBPdmVyd3JpdHRlbiBhbmQgc2V0IHRvIGBmYWxzZWAgYnkgZGVmYXVsdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZXh0dXJlIGJhc2VkIG9uIGRhdGEgaW4gY29tcHJlc3NlZCBmb3JtLlxuICpcbiAqIFRoZXNlIHRleHR1cmUgYXJlIHVzdWFsbHkgbG9hZGVkIHdpdGgge0BsaW5rIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyfS5cbiAqXG4gKiBAYXVnbWVudHMgVGV4dHVyZVxuICovXG5jbGFzcyBDb21wcmVzc2VkVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNvbXByZXNzZWQgdGV4dHVyZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxPYmplY3Q+fSBtaXBtYXBzIC0gVGhpcyBhcnJheSBob2xkcyBmb3IgYWxsIG1pcG1hcHMgKGluY2x1ZGluZyB0aGUgYmFzZXMgbWlwKVxuXHQgKiB0aGUgZGF0YSBhbmQgZGltZW5zaW9ucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtmb3JtYXQ9UkdCQUZvcm1hdF0gLSBUaGUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEJ5dGVUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWFwcGluZz1UZXh0dXJlLkRFRkFVTFRfTUFQUElOR10gLSBUaGUgdGV4dHVyZSBtYXBwaW5nLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBTPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBTIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBUPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBUIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWluRmlsdGVyPUxpbmVhck1pcG1hcExpbmVhckZpbHRlcl0gLSBUaGUgbWluIGZpbHRlciB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW2NvbG9yU3BhY2U9Tm9Db2xvclNwYWNlXSAtIFRoZSBjb2xvciBzcGFjZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGNvbG9yU3BhY2UgKSB7XG5cblx0XHRzdXBlciggbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBjb2xvclNwYWNlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQ29tcHJlc3NlZFRleHR1cmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGltYWdlIHByb3BlcnR5IG9mIGEgY29tcHJlc3NlZCB0ZXh0dXJlIGp1c3QgZGVmaW5lcyBpdHMgZGltZW5zaW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHt7d2lkdGg6bnVtYmVyLGhlaWdodDpudW1iZXJ9fVxuXHRcdCAqL1xuXHRcdHRoaXMuaW1hZ2UgPSB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgYXJyYXkgaG9sZHMgZm9yIGFsbCBtaXBtYXBzIChpbmNsdWRpbmcgdGhlIGJhc2VzIG1pcCkgdGhlIGRhdGEgYW5kIGRpbWVuc2lvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cblx0XHQgKi9cblx0XHR0aGlzLm1pcG1hcHMgPSBtaXBtYXBzO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHRleHR1cmUgaXMgZmxpcHBlZCBhbG9uZyB0aGUgdmVydGljYWwgYXhpcyB3aGVuXG5cdFx0ICogdXBsb2FkZWQgdG8gdGhlIEdQVS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0IHNpbmNlIGl0IGlzIG5vdCBwb3NzaWJsZSB0b1xuXHRcdCAqIGZsaXAgY29tcHJlc3NlZCB0ZXh0dXJlcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0byBnZW5lcmF0ZSBtaXBtYXBzIChpZiBwb3NzaWJsZSkgZm9yIGEgdGV4dHVyZS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0IHNpbmNlIGl0IGlzIG5vdFxuXHRcdCAqIHBvc3NpYmxlIHRvIGdlbmVyYXRlIG1pcG1hcHMgZm9yIGNvbXByZXNzZWQgZGF0YS4gTWlwbWFwc1xuXHRcdCAqIG11c3QgYmUgZW1iZWRkZWQgaW4gdGhlIGNvbXByZXNzZWQgdGV4dHVyZSBmaWxlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZXh0dXJlIDJEIGFycmF5IGJhc2VkIG9uIGRhdGEgaW4gY29tcHJlc3NlZCBmb3JtLlxuICpcbiAqIFRoZXNlIHRleHR1cmUgYXJlIHVzdWFsbHkgbG9hZGVkIHdpdGgge0BsaW5rIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyfS5cbiAqXG4gKiBAYXVnbWVudHMgQ29tcHJlc3NlZFRleHR1cmVcbiAqL1xuY2xhc3MgQ29tcHJlc3NlZEFycmF5VGV4dHVyZSBleHRlbmRzIENvbXByZXNzZWRUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjb21wcmVzc2VkIGFycmF5IHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gbWlwbWFwcyAtIFRoaXMgYXJyYXkgaG9sZHMgZm9yIGFsbCBtaXBtYXBzIChpbmNsdWRpbmcgdGhlIGJhc2VzIG1pcClcblx0ICogdGhlIGRhdGEgYW5kIGRpbWVuc2lvbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCAtIFRoZSBkZXB0aCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtmb3JtYXQ9UkdCQUZvcm1hdF0gLSBUaGUgbWluIGZpbHRlciB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIG1pbiBmaWx0ZXIgdmFsdWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGZvcm1hdCwgdHlwZSApIHtcblxuXHRcdHN1cGVyKCBtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbWFnZSBwcm9wZXJ0eSBvZiBhIGNvbXByZXNzZWQgdGV4dHVyZSBqdXN0IGRlZmluZXMgaXRzIGRpbWVuc2lvbnMuXG5cdFx0ICpcblx0XHQgKiBAbmFtZSBDb21wcmVzc2VkQXJyYXlUZXh0dXJlI2ltYWdlXG5cdFx0ICogQHR5cGUge3t3aWR0aDpudW1iZXIsaGVpZ2h0Om51bWJlcixkZXB0aDpudW1iZXJ9fVxuXHRcdCAqL1xuXHRcdHRoaXMuaW1hZ2UuZGVwdGggPSBkZXB0aDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZGVmaW5lcyBob3cgdGhlIHRleHR1cmUgaXMgd3JhcHBlZCBpbiB0aGUgZGVwdGggYW5kIGNvcnJlc3BvbmRzIHRvXG5cdFx0ICogKlcqIGluIFVWVyBtYXBwaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhSZXBlYXRXcmFwcGluZ3xDbGFtcFRvRWRnZVdyYXBwaW5nfE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcpfVxuXHRcdCAqIEBkZWZhdWx0IENsYW1wVG9FZGdlV3JhcHBpbmdcblx0XHQgKi9cblx0XHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHRcdC8qKlxuXHRcdCAqIEEgc2V0IG9mIGFsbCBsYXllcnMgd2hpY2ggbmVlZCB0byBiZSB1cGRhdGVkIGluIHRoZSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1NldDxudW1iZXI+fVxuXHRcdCAqL1xuXHRcdHRoaXMubGF5ZXJVcGRhdGVzID0gbmV3IFNldCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVzY3JpYmVzIHRoYXQgYSBzcGVjaWZpYyBsYXllciBvZiB0aGUgdGV4dHVyZSBuZWVkcyB0byBiZSB1cGRhdGVkLlxuXHQgKiBOb3JtYWxseSB3aGVuIHtAbGluayBUZXh0dXJlI25lZWRzVXBkYXRlfSBpcyBzZXQgdG8gYHRydWVgLCB0aGVcblx0ICogZW50aXJlIGNvbXByZXNzZWQgdGV4dHVyZSBhcnJheSBpcyBzZW50IHRvIHRoZSBHUFUuIE1hcmtpbmcgc3BlY2lmaWNcblx0ICogbGF5ZXJzIHdpbGwgb25seSB0cmFuc21pdCBzdWJzZXRzIG9mIGFsbCBtaXBtYXBzIGFzc29jaWF0ZWQgd2l0aCBhXG5cdCAqIHNwZWNpZmljIGRlcHRoIGluIHRoZSBhcnJheSB3aGljaCBpcyBvZnRlbiBtdWNoIG1vcmUgcGVyZm9ybWFudC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxheWVySW5kZXggLSBUaGUgbGF5ZXIgaW5kZXggdGhhdCBzaG91bGQgYmUgdXBkYXRlZC5cblx0ICovXG5cdGFkZExheWVyVXBkYXRlKCBsYXllckluZGV4ICkge1xuXG5cdFx0dGhpcy5sYXllclVwZGF0ZXMuYWRkKCBsYXllckluZGV4ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIGxheWVyIHVwZGF0ZXMgcmVnaXN0cnkuXG5cdCAqL1xuXHRjbGVhckxheWVyVXBkYXRlcygpIHtcblxuXHRcdHRoaXMubGF5ZXJVcGRhdGVzLmNsZWFyKCk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGN1YmUgdGV4dHVyZSBiYXNlZCBvbiBkYXRhIGluIGNvbXByZXNzZWQgZm9ybS5cbiAqXG4gKiBUaGVzZSB0ZXh0dXJlIGFyZSB1c3VhbGx5IGxvYWRlZCB3aXRoIHtAbGluayBDb21wcmVzc2VkVGV4dHVyZUxvYWRlcn0uXG4gKlxuICogQGF1Z21lbnRzIENvbXByZXNzZWRUZXh0dXJlXG4gKi9cbmNsYXNzIENvbXByZXNzZWRDdWJlVGV4dHVyZSBleHRlbmRzIENvbXByZXNzZWRUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjb21wcmVzc2VkIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8Q29tcHJlc3NlZFRleHR1cmU+fSBpbWFnZXMgLSBBbiBhcnJheSBvZiBjb21wcmVzc2VkIHRleHR1cmVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zvcm1hdD1SR0JBRm9ybWF0XSAtIFRoZSB0ZXh0dXJlIGZvcm1hdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0eXBlPVVuc2lnbmVkQnl0ZVR5cGVdIC0gVGhlIHRleHR1cmUgdHlwZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBpbWFnZXMsIGZvcm1hdCwgdHlwZSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGltYWdlc1sgMCBdLndpZHRoLCBpbWFnZXNbIDAgXS5oZWlnaHQsIGZvcm1hdCwgdHlwZSwgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQ29tcHJlc3NlZEN1YmVUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNDdWJlVGV4dHVyZSA9IHRydWU7XG5cblx0XHR0aGlzLmltYWdlID0gaW1hZ2VzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZXh0dXJlIGZyb20gYSBjYW52YXMgZWxlbWVudC5cbiAqXG4gKiBUaGlzIGlzIGFsbW9zdCB0aGUgc2FtZSBhcyB0aGUgYmFzZSB0ZXh0dXJlIGNsYXNzLCBleGNlcHQgdGhhdCBpdCBzZXRzIHtAbGluayBUZXh0dXJlI25lZWRzVXBkYXRlfVxuICogdG8gYHRydWVgIGltbWVkaWF0ZWx5IHNpbmNlIGEgY2FudmFzIGNhbiBkaXJlY3RseSBiZSB1c2VkIGZvciByZW5kZXJpbmcuXG4gKlxuICogQGF1Z21lbnRzIFRleHR1cmVcbiAqL1xuY2xhc3MgQ2FudmFzVGV4dHVyZSBleHRlbmRzIFRleHR1cmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IFtjYW52YXNdIC0gVGhlIEhUTUwgY2FudmFzIGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWFwcGluZz1UZXh0dXJlLkRFRkFVTFRfTUFQUElOR10gLSBUaGUgdGV4dHVyZSBtYXBwaW5nLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBTPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBTIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBUPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBUIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWluRmlsdGVyPUxpbmVhck1pcG1hcExpbmVhckZpbHRlcl0gLSBUaGUgbWluIGZpbHRlciB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtmb3JtYXQ9UkdCQUZvcm1hdF0gLSBUaGUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdHlwZT1VbnNpZ25lZEJ5dGVUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYW5pc290cm9weT1UZXh0dXJlLkRFRkFVTFRfQU5JU09UUk9QWV0gLSBUaGUgYW5pc290cm9weSB2YWx1ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApIHtcblxuXHRcdHN1cGVyKCBjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0NhbnZhc1RleHR1cmUgPSB0cnVlO1xuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBhdXRvbWF0aWNhbGx5IHNhdmUgdGhlIGRlcHRoIGluZm9ybWF0aW9uIG9mIGFcbiAqIHJlbmRlcmluZyBpbnRvIGEgdGV4dHVyZS5cbiAqXG4gKiBAYXVnbWVudHMgVGV4dHVyZVxuICovXG5jbGFzcyBEZXB0aFRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkZXB0aCB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3R5cGU9VW5zaWduZWRJbnRUeXBlXSAtIFRoZSB0ZXh0dXJlIHR5cGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWFwcGluZz1UZXh0dXJlLkRFRkFVTFRfTUFQUElOR10gLSBUaGUgdGV4dHVyZSBtYXBwaW5nLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBTPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBTIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dyYXBUPUNsYW1wVG9FZGdlV3JhcHBpbmddIC0gVGhlIHdyYXBUIHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21hZ0ZpbHRlcj1MaW5lYXJGaWx0ZXJdIC0gVGhlIG1hZyBmaWx0ZXIgdmFsdWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbWluRmlsdGVyPUxpbmVhckZpbHRlcl0gLSBUaGUgbWluIGZpbHRlciB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthbmlzb3Ryb3B5PVRleHR1cmUuREVGQVVMVF9BTklTT1RST1BZXSAtIFRoZSBhbmlzb3Ryb3B5IHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zvcm1hdD1EZXB0aEZvcm1hdF0gLSBUaGUgdGV4dHVyZSBmb3JtYXQuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgdHlwZSA9IFVuc2lnbmVkSW50VHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyLCBtaW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyLCBhbmlzb3Ryb3B5LCBmb3JtYXQgPSBEZXB0aEZvcm1hdCApIHtcblxuXHRcdGlmICggZm9ybWF0ICE9PSBEZXB0aEZvcm1hdCAmJiBmb3JtYXQgIT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRGVwdGhUZXh0dXJlIGZvcm1hdCBtdXN0IGJlIGVpdGhlciBUSFJFRS5EZXB0aEZvcm1hdCBvciBUSFJFRS5EZXB0aFN0ZW5jaWxGb3JtYXQnICk7XG5cblx0XHR9XG5cblx0XHRzdXBlciggbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzRGVwdGhUZXh0dXJlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbWFnZSBwcm9wZXJ0eSBvZiBhIGRlcHRoIHRleHR1cmUganVzdCBkZWZpbmVzIGl0cyBkaW1lbnNpb25zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3t3aWR0aDpudW1iZXIsaGVpZ2h0Om51bWJlcn19XG5cdFx0ICovXG5cdFx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHRleHR1cmUgaXMgZmxpcHBlZCBhbG9uZyB0aGUgdmVydGljYWwgYXhpcyB3aGVuXG5cdFx0ICogdXBsb2FkZWQgdG8gdGhlIEdQVS5cblx0XHQgKlxuXHRcdCAqIE92ZXJ3cml0dGVuIGFuZCBzZXQgdG8gYGZhbHNlYCBieSBkZWZhdWx0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIGdlbmVyYXRlIG1pcG1hcHMgKGlmIHBvc3NpYmxlKSBmb3IgYSB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogT3ZlcndyaXR0ZW4gYW5kIHNldCB0byBgZmFsc2VgIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGVwdGggY29tcGFyZSBmdW5jdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/KE5ldmVyQ29tcGFyZXxMZXNzQ29tcGFyZXxFcXVhbENvbXBhcmV8TGVzc0VxdWFsQ29tcGFyZXxHcmVhdGVyQ29tcGFyZXxOb3RFcXVhbENvbXBhcmV8R3JlYXRlckVxdWFsQ29tcGFyZXxBbHdheXNDb21wYXJlKX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jb21wYXJlRnVuY3Rpb24gPSBudWxsO1xuXG5cdH1cblxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBuZXcgU291cmNlKCBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLmltYWdlICkgKTsgLy8gc2VlICMzMDU0MFxuXHRcdHRoaXMuY29tcGFyZUZ1bmN0aW9uID0gc291cmNlLmNvbXBhcmVGdW5jdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuY29tcGFyZUZ1bmN0aW9uICE9PSBudWxsICkgZGF0YS5jb21wYXJlRnVuY3Rpb24gPSB0aGlzLmNvbXBhcmVGdW5jdGlvbjtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEFuIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGNyZWF0aW5nIGFuIGFuYWx5dGljIGN1cnZlIG9iamVjdCB0aGF0IGNvbnRhaW5zIG1ldGhvZHNcbiAqIGZvciBpbnRlcnBvbGF0aW9uLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBDdXJ2ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY3VydmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0eXBlIHByb3BlcnR5IGlzIHVzZWQgZm9yIGRldGVjdGluZyB0aGUgb2JqZWN0IHR5cGVcblx0XHQgKiBpbiBjb250ZXh0IG9mIHNlcmlhbGl6YXRpb24vZGVzZXJpYWxpemF0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSAnQ3VydmUnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyB2YWx1ZSBkZXRlcm1pbmVzIHRoZSBhbW91bnQgb2YgZGl2aXNpb25zIHdoZW4gY2FsY3VsYXRpbmcgdGhlXG5cdFx0ICogY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHMgb2YgYSBjdXJ2ZSB2aWEge0BsaW5rIEN1cnZlI2dldExlbmd0aHN9LiBUbyBlbnN1cmVcblx0XHQgKiBwcmVjaXNpb24gd2hlbiB1c2luZyBtZXRob2RzIGxpa2Uge0BsaW5rIEN1cnZlI2dldFNwYWNlZFBvaW50c30sIGl0IGlzXG5cdFx0ICogcmVjb21tZW5kZWQgdG8gaW5jcmVhc2UgdGhlIHZhbHVlIG9mIHRoaXMgcHJvcGVydHkgaWYgdGhlIGN1cnZlIGlzIHZlcnkgbGFyZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDIwMFxuXHRcdCAqL1xuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gMjAwO1xuXG5cdFx0LyoqXG5cdFx0ICogTXVzdCBiZSBzZXQgdG8gYHRydWVgIGlmIHRoZSBjdXJ2ZSBwYXJhbWV0ZXJzIGhhdmUgY2hhbmdlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gaW50ZXJuYWwgY2FjaGUgdGhhdCBob2xkcyBwcmVjb21wdXRlZCBjdXJ2ZSBsZW5ndGggdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAdHlwZSB7P0FycmF5PG51bWJlcj59XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY2FjaGVBcmNMZW5ndGhzID0gbnVsbDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSB2ZWN0b3IgaW4gMkQgb3IgM0Qgc3BhY2UgKGRlcGVuZGluZyBvbiB0aGUgY3VydmUgZGVmaW5pdGlvbilcblx0ICogZm9yIHRoZSBnaXZlbiBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gQSBpbnRlcnBvbGF0aW9uIGZhY3RvciByZXByZXNlbnRpbmcgYSBwb3NpdGlvbiBvbiB0aGUgY3VydmUuIE11c3QgYmUgaW4gdGhlIHJhbmdlIGBbMCwxXWAuXG5cdCAqIEBwYXJhbSB7KFZlY3RvcjJ8VmVjdG9yMyl9IFtvcHRpb25hbFRhcmdldF0gLSBUaGUgb3B0aW9uYWwgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHdyaXR0ZW4gdG8uXG5cdCAqIEByZXR1cm4geyhWZWN0b3IyfFZlY3RvcjMpfSBUaGUgcG9zaXRpb24gb24gdGhlIGN1cnZlLiBJdCBjYW4gYmUgYSAyRCBvciAzRCB2ZWN0b3IgZGVwZW5kaW5nIG9uIHRoZSBjdXJ2ZSBkZWZpbml0aW9uLlxuXHQgKi9cblx0Z2V0UG9pbnQoIC8qIHQsIG9wdGlvbmFsVGFyZ2V0ICovICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5nZXRQb2ludCgpIG5vdCBpbXBsZW1lbnRlZC4nICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgdmVjdG9yIGluIDJEIG9yIDNEIHNwYWNlIChkZXBlbmRpbmcgb24gdGhlIGN1cnZlIGRlZmluaXRpb24pXG5cdCAqIGZvciB0aGUgZ2l2ZW4gaW50ZXJwb2xhdGlvbiBmYWN0b3IuIFVubGlrZSB7QGxpbmsgQ3VydmUjZ2V0UG9pbnR9LCB0aGlzIG1ldGhvZCBob25vcnMgdGhlIGxlbmd0aFxuXHQgKiBvZiB0aGUgY3VydmUgd2hpY2ggZXF1aWRpc3RhbnQgc2FtcGxlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHUgLSBBIGludGVycG9sYXRpb24gZmFjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZS4gTXVzdCBiZSBpbiB0aGUgcmFuZ2UgYFswLDFdYC5cblx0ICogQHBhcmFtIHsoVmVjdG9yMnxWZWN0b3IzKX0gW29wdGlvbmFsVGFyZ2V0XSAtIFRoZSBvcHRpb25hbCB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgd3JpdHRlbiB0by5cblx0ICogQHJldHVybiB7KFZlY3RvcjJ8VmVjdG9yMyl9IFRoZSBwb3NpdGlvbiBvbiB0aGUgY3VydmUuIEl0IGNhbiBiZSBhIDJEIG9yIDNEIHZlY3RvciBkZXBlbmRpbmcgb24gdGhlIGN1cnZlIGRlZmluaXRpb24uXG5cdCAqL1xuXHRnZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBzYW1wbGVzIHRoZSBjdXJ2ZSB2aWEge0BsaW5rIEN1cnZlI2dldFBvaW50fSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBwb2ludHMgcmVwcmVzZW50aW5nXG5cdCAqIHRoZSBjdXJ2ZSBzaGFwZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkaXZpc2lvbnM9NV0gLSBUaGUgbnVtYmVyIG9mIGRpdmlzaW9ucy5cblx0ICogQHJldHVybiB7QXJyYXk8KFZlY3RvcjJ8VmVjdG9yMyk+fSBBbiBhcnJheSBob2xkaW5nIHRoZSBzYW1wbGVkIGN1cnZlIHZhbHVlcy4gVGhlIG51bWJlciBvZiBwb2ludHMgaXMgYGRpdmlzaW9ucyArIDFgLlxuXHQgKi9cblx0Z2V0UG9pbnRzKCBkaXZpc2lvbnMgPSA1ICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH1cblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50QXQoIHUgKVxuXG5cdC8qKlxuXHQgKiBUaGlzIG1ldGhvZCBzYW1wbGVzIHRoZSBjdXJ2ZSB2aWEge0BsaW5rIEN1cnZlI2dldFBvaW50QXR9IGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHBvaW50cyByZXByZXNlbnRpbmdcblx0ICogdGhlIGN1cnZlIHNoYXBlLiBVbmxpa2Uge0BsaW5rIEN1cnZlI2dldFBvaW50c30sIHRoaXMgbWV0aG9kIHJldHVybnMgZXF1aS1zcGFjZWQgcG9pbnRzIGFjcm9zcyB0aGUgZW50aXJlXG5cdCAqIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RpdmlzaW9ucz01XSAtIFRoZSBudW1iZXIgb2YgZGl2aXNpb25zLlxuXHQgKiBAcmV0dXJuIHtBcnJheTwoVmVjdG9yMnxWZWN0b3IzKT59IEFuIGFycmF5IGhvbGRpbmcgdGhlIHNhbXBsZWQgY3VydmUgdmFsdWVzLiBUaGUgbnVtYmVyIG9mIHBvaW50cyBpcyBgZGl2aXNpb25zICsgMWAuXG5cdCAqL1xuXHRnZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyA9IDUgKSB7XG5cblx0XHRjb25zdCBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50QXQoIGQgLyBkaXZpc2lvbnMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHRvdGFsIGFyYyBsZW5ndGggb2YgdGhlIGN1cnZlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBsZW5ndGggb2YgdGhlIGN1cnZlLlxuXHQgKi9cblx0Z2V0TGVuZ3RoKCkge1xuXG5cdFx0Y29uc3QgbGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xuXHRcdHJldHVybiBsZW5ndGhzWyBsZW5ndGhzLmxlbmd0aCAtIDEgXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gYXJyYXkgb2YgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHMgb2YgdGhlIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RpdmlzaW9ucz10aGlzLmFyY0xlbmd0aERpdmlzaW9uc10gLSBUaGUgbnVtYmVyIG9mIGRpdmlzaW9ucy5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gQW4gYXJyYXkgaG9sZGluZyB0aGUgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHMuXG5cdCAqL1xuXHRnZXRMZW5ndGhzKCBkaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucyApIHtcblxuXHRcdGlmICggdGhpcy5jYWNoZUFyY0xlbmd0aHMgJiZcblx0XHRcdCggdGhpcy5jYWNoZUFyY0xlbmd0aHMubGVuZ3RoID09PSBkaXZpc2lvbnMgKyAxICkgJiZcblx0XHRcdCEgdGhpcy5uZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY2FjaGUgPSBbXTtcblx0XHRsZXQgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTtcblx0XHRsZXQgc3VtID0gMDtcblxuXHRcdGNhY2hlLnB1c2goIDAgKTtcblxuXHRcdGZvciAoIGxldCBwID0gMTsgcCA8PSBkaXZpc2lvbnM7IHAgKysgKSB7XG5cblx0XHRcdGN1cnJlbnQgPSB0aGlzLmdldFBvaW50KCBwIC8gZGl2aXNpb25zICk7XG5cdFx0XHRzdW0gKz0gY3VycmVudC5kaXN0YW5jZVRvKCBsYXN0ICk7XG5cdFx0XHRjYWNoZS5wdXNoKCBzdW0gKTtcblx0XHRcdGxhc3QgPSBjdXJyZW50O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYWNoZUFyY0xlbmd0aHMgPSBjYWNoZTtcblxuXHRcdHJldHVybiBjYWNoZTsgLy8geyBzdW1zOiBjYWNoZSwgc3VtOiBzdW0gfTsgU3VtIGlzIGluIHRoZSBsYXN0IGVsZW1lbnQuXG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGUgdGhlIGN1bXVsYXRpdmUgc2VnbWVudCBkaXN0YW5jZSBjYWNoZS4gVGhlIG1ldGhvZCBtdXN0IGJlIGNhbGxlZFxuXHQgKiBldmVyeSB0aW1lIGN1cnZlIHBhcmFtZXRlcnMgYXJlIGNoYW5nZWQuIElmIGFuIHVwZGF0ZWQgY3VydmUgaXMgcGFydCBvZiBhXG5cdCAqIGNvbXBvc2VkIGN1cnZlIGxpa2Uge0BsaW5rIEN1cnZlUGF0aH0sIHRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIG9uIHRoZVxuXHQgKiBjb21wb3NlZCBjdXJ2ZSwgdG9vLlxuXHQgKi9cblx0dXBkYXRlQXJjTGVuZ3RocygpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2l2ZW4gYW4gaW50ZXJwb2xhdGlvbiBmYWN0b3IgaW4gdGhlIHJhbmdlIGBbMCwxXWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYW4gdXBkYXRlZFxuXHQgKiBpbnRlcnBvbGF0aW9uIGZhY3RvciBpbiB0aGUgc2FtZSByYW5nZSB0aGF0IGNhbiBiZSB1ZWQgdG8gc2FtcGxlIGVxdWlkaXN0YW50IHBvaW50c1xuXHQgKiBmcm9tIGEgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB1IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuXHQgKiBAcGFyYW0gez9udW1iZXJ9IGRpc3RhbmNlIC0gQW4gb3B0aW9uYWwgZGlzdGFuY2Ugb24gdGhlIGN1cnZlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB1cGRhdGVkIGludGVycG9sYXRpb24gZmFjdG9yLlxuXHQgKi9cblx0Z2V0VXRvVG1hcHBpbmcoIHUsIGRpc3RhbmNlID0gbnVsbCApIHtcblxuXHRcdGNvbnN0IGFyY0xlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblxuXHRcdGxldCBpID0gMDtcblx0XHRjb25zdCBpbCA9IGFyY0xlbmd0aHMubGVuZ3RoO1xuXG5cdFx0bGV0IHRhcmdldEFyY0xlbmd0aDsgLy8gVGhlIHRhcmdldGVkIHUgZGlzdGFuY2UgdmFsdWUgdG8gZ2V0XG5cblx0XHRpZiAoIGRpc3RhbmNlICkge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSBkaXN0YW5jZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IHUgKiBhcmNMZW5ndGhzWyBpbCAtIDEgXTtcblxuXHRcdH1cblxuXHRcdC8vIGJpbmFyeSBzZWFyY2ggZm9yIHRoZSBpbmRleCB3aXRoIGxhcmdlc3QgdmFsdWUgc21hbGxlciB0aGFuIHRhcmdldCB1IGRpc3RhbmNlXG5cblx0XHRsZXQgbG93ID0gMCwgaGlnaCA9IGlsIC0gMSwgY29tcGFyaXNvbjtcblxuXHRcdHdoaWxlICggbG93IDw9IGhpZ2ggKSB7XG5cblx0XHRcdGkgPSBNYXRoLmZsb29yKCBsb3cgKyAoIGhpZ2ggLSBsb3cgKSAvIDIgKTsgLy8gbGVzcyBsaWtlbHkgdG8gb3ZlcmZsb3csIHRob3VnaCBwcm9iYWJseSBub3QgaXNzdWUgaGVyZSwgSlMgZG9lc24ndCByZWFsbHkgaGF2ZSBpbnRlZ2VycywgYWxsIG51bWJlcnMgYXJlIGZsb2F0c1xuXG5cdFx0XHRjb21wYXJpc29uID0gYXJjTGVuZ3Roc1sgaSBdIC0gdGFyZ2V0QXJjTGVuZ3RoO1xuXG5cdFx0XHRpZiAoIGNvbXBhcmlzb24gPCAwICkge1xuXG5cdFx0XHRcdGxvdyA9IGkgKyAxO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21wYXJpc29uID4gMCApIHtcblxuXHRcdFx0XHRoaWdoID0gaSAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aGlnaCA9IGk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8vIERPTkVcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aSA9IGhpZ2g7XG5cblx0XHRpZiAoIGFyY0xlbmd0aHNbIGkgXSA9PT0gdGFyZ2V0QXJjTGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gaSAvICggaWwgLSAxICk7XG5cblx0XHR9XG5cblx0XHQvLyB3ZSBjb3VsZCBnZXQgZmluZXIgZ3JhaW4gYXQgbGVuZ3Rocywgb3IgdXNlIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuXG5cdFx0Y29uc3QgbGVuZ3RoQmVmb3JlID0gYXJjTGVuZ3Roc1sgaSBdO1xuXHRcdGNvbnN0IGxlbmd0aEFmdGVyID0gYXJjTGVuZ3Roc1sgaSArIDEgXTtcblxuXHRcdGNvbnN0IHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcblxuXHRcdC8vIGRldGVybWluZSB3aGVyZSB3ZSBhcmUgYmV0d2VlbiB0aGUgJ2JlZm9yZScgYW5kICdhZnRlcicgcG9pbnRzXG5cblx0XHRjb25zdCBzZWdtZW50RnJhY3Rpb24gPSAoIHRhcmdldEFyY0xlbmd0aCAtIGxlbmd0aEJlZm9yZSApIC8gc2VnbWVudExlbmd0aDtcblxuXHRcdC8vIGFkZCB0aGF0IGZyYWN0aW9uYWwgYW1vdW50IHRvIHRcblxuXHRcdGNvbnN0IHQgPSAoIGkgKyBzZWdtZW50RnJhY3Rpb24gKSAvICggaWwgLSAxICk7XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGZvciB0aGUgZ2l2ZW4gaW50ZXJwb2xhdGlvbiBmYWN0b3IuXG5cdCAqIElmIHRoZSBkZXJpdmVkIGN1cnZlIGRvZXMgbm90IGltcGxlbWVudCBpdHMgdGFuZ2VudCBkZXJpdmF0aW9uLFxuXHQgKiB0d28gcG9pbnRzIGEgc21hbGwgZGVsdGEgYXBhcnQgd2lsbCBiZSB1c2VkIHRvIGZpbmQgaXRzIGdyYWRpZW50XG5cdCAqIHdoaWNoIHNlZW1zIHRvIGdpdmUgYSByZWFzb25hYmxlIGFwcHJveGltYXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuXHQgKiBAcGFyYW0geyhWZWN0b3IyfFZlY3RvcjMpfSBbb3B0aW9uYWxUYXJnZXRdIC0gVGhlIG9wdGlvbmFsIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyB3cml0dGVuIHRvLlxuXHQgKiBAcmV0dXJuIHsoVmVjdG9yMnxWZWN0b3IzKX0gVGhlIHRhbmdlbnQgdmVjdG9yLlxuXHQgKi9cblx0Z2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zdCBkZWx0YSA9IDAuMDAwMTtcblx0XHRsZXQgdDEgPSB0IC0gZGVsdGE7XG5cdFx0bGV0IHQyID0gdCArIGRlbHRhO1xuXG5cdFx0Ly8gQ2FwcGluZyBpbiBjYXNlIG9mIGRhbmdlclxuXG5cdFx0aWYgKCB0MSA8IDAgKSB0MSA9IDA7XG5cdFx0aWYgKCB0MiA+IDEgKSB0MiA9IDE7XG5cblx0XHRjb25zdCBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApO1xuXHRcdGNvbnN0IHB0MiA9IHRoaXMuZ2V0UG9pbnQoIHQyICk7XG5cblx0XHRjb25zdCB0YW5nZW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgKCAoIHB0MS5pc1ZlY3RvcjIgKSA/IG5ldyBWZWN0b3IyKCkgOiBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR0YW5nZW50LmNvcHkoIHB0MiApLnN1YiggcHQxICkubm9ybWFsaXplKCk7XG5cblx0XHRyZXR1cm4gdGFuZ2VudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNhbWUgYXMge0BsaW5rIEN1cnZlI2dldFRhbmdlbnR9IGJ1dCB3aXRoIGVxdWlkaXN0YW50IHNhbXBsZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB1IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuXHQgKiBAcGFyYW0geyhWZWN0b3IyfFZlY3RvcjMpfSBbb3B0aW9uYWxUYXJnZXRdIC0gVGhlIG9wdGlvbmFsIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyB3cml0dGVuIHRvLlxuXHQgKiBAcmV0dXJuIHsoVmVjdG9yMnxWZWN0b3IzKX0gVGhlIHRhbmdlbnQgdmVjdG9yLlxuXHQgKiBAc2VlIHtAbGluayBDdXJ2ZSNnZXRQb2ludEF0fVxuXHQgKi9cblx0Z2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyB0aGUgRnJlbmV0IEZyYW1lcy4gUmVxdWlyZXMgYSBjdXJ2ZSBkZWZpbml0aW9uIGluIDNEIHNwYWNlLiBVc2VkXG5cdCAqIGluIGdlb21ldHJpZXMgbGlrZSB7QGxpbmsgVHViZUdlb21ldHJ5fSBvciB7QGxpbmsgRXh0cnVkZUdlb21ldHJ5fS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNlZ21lbnRzIC0gVGhlIG51bWJlciBvZiBzZWdtZW50cy5cblx0ICogQHBhcmFtIHtib29sZWFufSBbY2xvc2VkPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGN1cnZlIGlzIGNsb3NlZCBvciBub3QuXG5cdCAqIEByZXR1cm4ge3t0YW5nZW50czogQXJyYXk8VmVjdG9yMz4sIG5vcm1hbHM6IEFycmF5PFZlY3RvcjM+LCBiaW5vcm1hbHM6IEFycmF5PFZlY3RvcjM+fX0gVGhlIEZyZW5ldCBGcmFtZXMuXG5cdCAqL1xuXHRjb21wdXRlRnJlbmV0RnJhbWVzKCBzZWdtZW50cywgY2xvc2VkID0gZmFsc2UgKSB7XG5cblx0XHQvLyBzZWUgaHR0cDovL3d3dy5jcy5pbmRpYW5hLmVkdS9wdWIvdGVjaHJlcG9ydHMvVFI0MjUucGRmXG5cblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgdGFuZ2VudHMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgYmlub3JtYWxzID0gW107XG5cblx0XHRjb25zdCB2ZWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG1hdCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0XHQvLyBjb21wdXRlIHRoZSB0YW5nZW50IHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdSA9IGkgLyBzZWdtZW50cztcblxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1LCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgYW4gaW5pdGlhbCBub3JtYWwgdmVjdG9yIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGZpcnN0IHRhbmdlbnQgdmVjdG9yLFxuXHRcdC8vIGFuZCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtaW5pbXVtIHRhbmdlbnQgeHl6IGNvbXBvbmVudFxuXG5cdFx0bm9ybWFsc1sgMCBdID0gbmV3IFZlY3RvcjMoKTtcblx0XHRiaW5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0bGV0IG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0Y29uc3QgdHggPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS54ICk7XG5cdFx0Y29uc3QgdHkgPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS55ICk7XG5cdFx0Y29uc3QgdHogPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS56ICk7XG5cblx0XHRpZiAoIHR4IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHg7XG5cdFx0XHRub3JtYWwuc2V0KCAxLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR5IDw9IG1pbiApIHtcblxuXHRcdFx0bWluID0gdHk7XG5cdFx0XHRub3JtYWwuc2V0KCAwLCAxLCAwICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHR6IDw9IG1pbiApIHtcblxuXHRcdFx0bm9ybWFsLnNldCggMCwgMCwgMSApO1xuXG5cdFx0fVxuXG5cdFx0dmVjLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgbm9ybWFsICkubm9ybWFsaXplKCk7XG5cblx0XHRub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCB2ZWMgKTtcblx0XHRiaW5vcm1hbHNbIDAgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbHNbIDAgXSApO1xuXG5cblx0XHQvLyBjb21wdXRlIHRoZSBzbG93bHktdmFyeWluZyBub3JtYWwgYW5kIGJpbm9ybWFsIHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcblxuXHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0bm9ybWFsc1sgaSBdID0gbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIHZlYy5sZW5ndGgoKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZlYy5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRjb25zdCB0aGV0YSA9IE1hdGguYWNvcyggY2xhbXAoIHRhbmdlbnRzWyBpIC0gMSBdLmRvdCggdGFuZ2VudHNbIGkgXSApLCAtMSwgMSApICk7IC8vIGNsYW1wIGZvciBmbG9hdGluZyBwdCBlcnJvcnNcblxuXHRcdFx0XHRub3JtYWxzWyBpIF0uYXBwbHlNYXRyaXg0KCBtYXQubWFrZVJvdGF0aW9uQXhpcyggdmVjLCB0aGV0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ymlub3JtYWxzWyBpIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSBdLCBub3JtYWxzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGlmIHRoZSBjdXJ2ZSBpcyBjbG9zZWQsIHBvc3Rwcm9jZXNzIHRoZSB2ZWN0b3JzIHNvIHRoZSBmaXJzdCBhbmQgbGFzdCBub3JtYWwgdmVjdG9ycyBhcmUgdGhlIHNhbWVcblxuXHRcdGlmICggY2xvc2VkID09PSB0cnVlICkge1xuXG5cdFx0XHRsZXQgdGhldGEgPSBNYXRoLmFjb3MoIGNsYW1wKCBub3JtYWxzWyAwIF0uZG90KCBub3JtYWxzWyBzZWdtZW50cyBdICksIC0xLCAxICkgKTtcblx0XHRcdHRoZXRhIC89IHNlZ21lbnRzO1xuXG5cdFx0XHRpZiAoIHRhbmdlbnRzWyAwIF0uZG90KCB2ZWMuY3Jvc3NWZWN0b3JzKCBub3JtYWxzWyAwIF0sIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSApID4gMCApIHtcblxuXHRcdFx0XHR0aGV0YSA9IC0gdGhldGE7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIHR3aXN0IGEgbGl0dGxlLi4uXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB0YW5nZW50c1sgaSBdLCB0aGV0YSAqIGkgKSApO1xuXHRcdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dGFuZ2VudHM6IHRhbmdlbnRzLFxuXHRcdFx0bm9ybWFsczogbm9ybWFscyxcblx0XHRcdGJpbm9ybWFsczogYmlub3JtYWxzXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgY3VydmUgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7Q3VydmV9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGN1cnZlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q3VydmV9IHNvdXJjZSAtIFRoZSBjdXJ2ZSB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtDdXJ2ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBjdXJ2ZS5cblx0ICovXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gc291cmNlLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGUgY3VydmUgaW50byBKU09OLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGN1cnZlLlxuXHQgKiBAc2VlIHtAbGluayBPYmplY3RMb2FkZXIjcGFyc2V9XG5cdCAqL1xuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC42LFxuXHRcdFx0XHR0eXBlOiAnQ3VydmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdDdXJ2ZS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGRhdGEuYXJjTGVuZ3RoRGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXNlcmlhbGl6ZXMgdGhlIGN1cnZlIGZyb20gdGhlIGdpdmVuIEpTT04uXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gaG9sZGluZyB0aGUgc2VyaWFsaXplZCBjdXJ2ZS5cblx0ICogQHJldHVybiB7Q3VydmV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY3VydmUuXG5cdCAqL1xuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0ganNvbi5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGN1cnZlIHJlcHJlc2VudGluZyBhbiBlbGxpcHNlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBjdXJ2ZSA9IG5ldyBUSFJFRS5FbGxpcHNlQ3VydmUoXG4gKiBcdDAsIDAsXG4gKiBcdDEwLCAxMCxcbiAqIFx0MCwgMiAqIE1hdGguUEksXG4gKiBcdGZhbHNlLFxuICogXHQwXG4gKiApO1xuICpcbiAqIGNvbnN0IHBvaW50cyA9IGN1cnZlLmdldFBvaW50cyggNTAgKTtcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG4gKlxuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmYwMDAwIH0gKTtcbiAqXG4gKiAvLyBDcmVhdGUgdGhlIGZpbmFsIG9iamVjdCB0byBhZGQgdG8gdGhlIHNjZW5lXG4gKiBjb25zdCBlbGxpcHNlID0gbmV3IFRIUkVFLkxpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIEN1cnZlXG4gKi9cbmNsYXNzIEVsbGlwc2VDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBlbGxpcHNlIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FYPTBdIC0gVGhlIFggY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FZPTBdIC0gVGhlIFkgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3hSYWRpdXM9MV0gLSBUaGUgcmFkaXVzIG9mIHRoZSBlbGxpcHNlIGluIHRoZSB4IGRpcmVjdGlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt5UmFkaXVzPTFdIC0gVGhlIHJhZGl1cyBvZiB0aGUgZWxsaXBzZSBpbiB0aGUgeSBkaXJlY3Rpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYVN0YXJ0QW5nbGU9MF0gLSBUaGUgc3RhcnQgYW5nbGUgb2YgdGhlIGN1cnZlIGluIHJhZGlhbnMgc3RhcnRpbmcgZnJvbSB0aGUgcG9zaXRpdmUgWCBheGlzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FFbmRBbmdsZT1NYXRoLlBJKjJdIC0gVGhlIGVuZCBhbmdsZSBvZiB0aGUgY3VydmUgaW4gcmFkaWFucyBzdGFydGluZyBmcm9tIHRoZSBwb3NpdGl2ZSBYIGF4aXMuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FDbG9ja3dpc2U9ZmFsc2VdIC0gV2hldGhlciB0aGUgZWxsaXBzZSBpcyBkcmF3biBjbG9ja3dpc2Ugb3Igbm90LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FSb3RhdGlvbj0wXSAtIFRoZSByb3RhdGlvbiBhbmdsZSBvZiB0aGUgZWxsaXBzZSBpbiByYWRpYW5zLCBjb3VudGVyY2xvY2t3aXNlIGZyb20gdGhlIHBvc2l0aXZlIFggYXhpcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhWCA9IDAsIGFZID0gMCwgeFJhZGl1cyA9IDEsIHlSYWRpdXMgPSAxLCBhU3RhcnRBbmdsZSA9IDAsIGFFbmRBbmdsZSA9IE1hdGguUEkgKiAyLCBhQ2xvY2t3aXNlID0gZmFsc2UsIGFSb3RhdGlvbiA9IDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0VsbGlwc2VDdXJ2ZSA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnRWxsaXBzZUN1cnZlJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBYIGNlbnRlciBvZiB0aGUgZWxsaXBzZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuYVggPSBhWDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBZIGNlbnRlciBvZiB0aGUgZWxsaXBzZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuYVkgPSBhWTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByYWRpdXMgb2YgdGhlIGVsbGlwc2UgaW4gdGhlIHggZGlyZWN0aW9uLlxuXHRcdCAqIFNldHRpbmcgdGhlIHRoaXMgdmFsdWUgZXF1YWwgdG8gdGhlIHtAbGluayBFbGxpcHNlQ3VydmUjeVJhZGl1c30gd2lsbCByZXN1bHQgaW4gYSBjaXJjbGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnhSYWRpdXMgPSB4UmFkaXVzO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJhZGl1cyBvZiB0aGUgZWxsaXBzZSBpbiB0aGUgeSBkaXJlY3Rpb24uXG5cdFx0ICogU2V0dGluZyB0aGUgdGhpcyB2YWx1ZSBlcXVhbCB0byB0aGUge0BsaW5rIEVsbGlwc2VDdXJ2ZSN4UmFkaXVzfSB3aWxsIHJlc3VsdCBpbiBhIGNpcmNsZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMueVJhZGl1cyA9IHlSYWRpdXM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3RhcnQgYW5nbGUgb2YgdGhlIGN1cnZlIGluIHJhZGlhbnMgc3RhcnRpbmcgZnJvbSB0aGUgcG9zaXRpdmUgWCBheGlzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IGFTdGFydEFuZ2xlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGVuZCBhbmdsZSBvZiB0aGUgY3VydmUgaW4gcmFkaWFucyBzdGFydGluZyBmcm9tIHRoZSBwb3NpdGl2ZSBYIGF4aXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IE1hdGguUEkqMlxuXHRcdCAqL1xuXHRcdHRoaXMuYUVuZEFuZ2xlID0gYUVuZEFuZ2xlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgZWxsaXBzZSBpcyBkcmF3biBjbG9ja3dpc2Ugb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmFDbG9ja3dpc2UgPSBhQ2xvY2t3aXNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBlbGxpcHNlIGluIHJhZGlhbnMsIGNvdW50ZXJjbG9ja3dpc2UgZnJvbSB0aGUgcG9zaXRpdmUgWCBheGlzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5hUm90YXRpb24gPSBhUm90YXRpb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcG9pbnQgb24gdGhlIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdCAtIEEgaW50ZXJwb2xhdGlvbiBmYWN0b3IgcmVwcmVzZW50aW5nIGEgcG9zaXRpb24gb24gdGhlIGN1cnZlLiBNdXN0IGJlIGluIHRoZSByYW5nZSBgWzAsMV1gLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IFtvcHRpb25hbFRhcmdldF0gLSBUaGUgb3B0aW9uYWwgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHdyaXR0ZW4gdG8uXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IFRoZSBwb3NpdGlvbiBvbiB0aGUgY3VydmUuXG5cdCAqL1xuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHR3b1BpID0gTWF0aC5QSSAqIDI7XG5cdFx0bGV0IGRlbHRhQW5nbGUgPSB0aGlzLmFFbmRBbmdsZSAtIHRoaXMuYVN0YXJ0QW5nbGU7XG5cdFx0Y29uc3Qgc2FtZVBvaW50cyA9IE1hdGguYWJzKCBkZWx0YUFuZ2xlICkgPCBOdW1iZXIuRVBTSUxPTjtcblxuXHRcdC8vIGVuc3VyZXMgdGhhdCBkZWx0YUFuZ2xlIGlzIDAgLi4gMiBQSVxuXHRcdHdoaWxlICggZGVsdGFBbmdsZSA8IDAgKSBkZWx0YUFuZ2xlICs9IHR3b1BpO1xuXHRcdHdoaWxlICggZGVsdGFBbmdsZSA+IHR3b1BpICkgZGVsdGFBbmdsZSAtPSB0d29QaTtcblxuXHRcdGlmICggZGVsdGFBbmdsZSA8IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRpZiAoIHNhbWVQb2ludHMgKSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IDA7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IHR3b1BpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYUNsb2Nrd2lzZSA9PT0gdHJ1ZSAmJiAhIHNhbWVQb2ludHMgKSB7XG5cblx0XHRcdGlmICggZGVsdGFBbmdsZSA9PT0gdHdvUGkgKSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IC0gdHdvUGk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZGVsdGFBbmdsZSA9IGRlbHRhQW5nbGUgLSB0d29QaTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlICsgdCAqIGRlbHRhQW5nbGU7XG5cdFx0bGV0IHggPSB0aGlzLmFYICsgdGhpcy54UmFkaXVzICogTWF0aC5jb3MoIGFuZ2xlICk7XG5cdFx0bGV0IHkgPSB0aGlzLmFZICsgdGhpcy55UmFkaXVzICogTWF0aC5zaW4oIGFuZ2xlICk7XG5cblx0XHRpZiAoIHRoaXMuYVJvdGF0aW9uICE9PSAwICkge1xuXG5cdFx0XHRjb25zdCBjb3MgPSBNYXRoLmNvcyggdGhpcy5hUm90YXRpb24gKTtcblx0XHRcdGNvbnN0IHNpbiA9IE1hdGguc2luKCB0aGlzLmFSb3RhdGlvbiApO1xuXG5cdFx0XHRjb25zdCB0eCA9IHggLSB0aGlzLmFYO1xuXHRcdFx0Y29uc3QgdHkgPSB5IC0gdGhpcy5hWTtcblxuXHRcdFx0Ly8gUm90YXRlIHRoZSBwb2ludCBhYm91dCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHRcdFx0eCA9IHR4ICogY29zIC0gdHkgKiBzaW4gKyB0aGlzLmFYO1xuXHRcdFx0eSA9IHR4ICogc2luICsgdHkgKiBjb3MgKyB0aGlzLmFZO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50LnNldCggeCwgeSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuYVggPSBzb3VyY2UuYVg7XG5cdFx0dGhpcy5hWSA9IHNvdXJjZS5hWTtcblxuXHRcdHRoaXMueFJhZGl1cyA9IHNvdXJjZS54UmFkaXVzO1xuXHRcdHRoaXMueVJhZGl1cyA9IHNvdXJjZS55UmFkaXVzO1xuXG5cdFx0dGhpcy5hU3RhcnRBbmdsZSA9IHNvdXJjZS5hU3RhcnRBbmdsZTtcblx0XHR0aGlzLmFFbmRBbmdsZSA9IHNvdXJjZS5hRW5kQW5nbGU7XG5cblx0XHR0aGlzLmFDbG9ja3dpc2UgPSBzb3VyY2UuYUNsb2Nrd2lzZTtcblxuXHRcdHRoaXMuYVJvdGF0aW9uID0gc291cmNlLmFSb3RhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLmFYID0gdGhpcy5hWDtcblx0XHRkYXRhLmFZID0gdGhpcy5hWTtcblxuXHRcdGRhdGEueFJhZGl1cyA9IHRoaXMueFJhZGl1cztcblx0XHRkYXRhLnlSYWRpdXMgPSB0aGlzLnlSYWRpdXM7XG5cblx0XHRkYXRhLmFTdGFydEFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZTtcblx0XHRkYXRhLmFFbmRBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlO1xuXG5cdFx0ZGF0YS5hQ2xvY2t3aXNlID0gdGhpcy5hQ2xvY2t3aXNlO1xuXG5cdFx0ZGF0YS5hUm90YXRpb24gPSB0aGlzLmFSb3RhdGlvbjtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLmFYID0ganNvbi5hWDtcblx0XHR0aGlzLmFZID0ganNvbi5hWTtcblxuXHRcdHRoaXMueFJhZGl1cyA9IGpzb24ueFJhZGl1cztcblx0XHR0aGlzLnlSYWRpdXMgPSBqc29uLnlSYWRpdXM7XG5cblx0XHR0aGlzLmFTdGFydEFuZ2xlID0ganNvbi5hU3RhcnRBbmdsZTtcblx0XHR0aGlzLmFFbmRBbmdsZSA9IGpzb24uYUVuZEFuZ2xlO1xuXG5cdFx0dGhpcy5hQ2xvY2t3aXNlID0ganNvbi5hQ2xvY2t3aXNlO1xuXG5cdFx0dGhpcy5hUm90YXRpb24gPSBqc29uLmFSb3RhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgY3VydmUgcmVwcmVzZW50aW5nIGFuIGFyYy5cbiAqXG4gKiBAYXVnbWVudHMgRWxsaXBzZUN1cnZlXG4gKi9cbmNsYXNzIEFyY0N1cnZlIGV4dGVuZHMgRWxsaXBzZUN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBhcmMgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYVg9MF0gLSBUaGUgWCBjZW50ZXIgb2YgdGhlIGVsbGlwc2UuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYVk9MF0gLSBUaGUgWSBjZW50ZXIgb2YgdGhlIGVsbGlwc2UuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYVJhZGl1cz0xXSAtIFRoZSByYWRpdXMgb2YgdGhlIGVsbGlwc2UgaW4gdGhlIHggZGlyZWN0aW9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FTdGFydEFuZ2xlPTBdIC0gVGhlIHN0YXJ0IGFuZ2xlIG9mIHRoZSBjdXJ2ZSBpbiByYWRpYW5zIHN0YXJ0aW5nIGZyb20gdGhlIHBvc2l0aXZlIFggYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthRW5kQW5nbGU9TWF0aC5QSSoyXSAtIFRoZSBlbmQgYW5nbGUgb2YgdGhlIGN1cnZlIGluIHJhZGlhbnMgc3RhcnRpbmcgZnJvbSB0aGUgcG9zaXRpdmUgWCBheGlzLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFthQ2xvY2t3aXNlPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGVsbGlwc2UgaXMgZHJhd24gY2xvY2t3aXNlIG9yIG5vdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0XHRzdXBlciggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQXJjQ3VydmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0FyY0N1cnZlJztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNQb2x5KCkge1xuXG5cdC8qKlxuXHQgKiBDZW50cmlwZXRhbCBDYXRtdWxsUm9tIEN1cnZlIC0gd2hpY2ggaXMgdXNlZnVsIGZvciBhdm9pZGluZ1xuXHQqIGN1c3BzIGFuZCBzZWxmLWludGVyc2VjdGlvbnMgaW4gbm9uLXVuaWZvcm0gY2F0bXVsbCByb20gY3VydmVzLlxuXHQqIGh0dHA6Ly93d3cuY2VteXVrc2VsLmNvbS9yZXNlYXJjaC9jYXRtdWxscm9tX3BhcmFtL2NhdG11bGxyb20ucGRmXG5cdCpcblx0KiBjdXJ2ZS50eXBlIGFjY2VwdHMgY2VudHJpcGV0YWwoZGVmYXVsdCksIGNob3JkYWwgYW5kIGNhdG11bGxyb21cblx0KiBjdXJ2ZS50ZW5zaW9uIGlzIHVzZWQgZm9yIGNhdG11bGxyb20gd2hpY2ggZGVmYXVsdHMgdG8gMC41XG5cdCovXG5cblx0Lypcblx0QmFzZWQgb24gYW4gb3B0aW1pemVkIGMrKyBzb2x1dGlvbiBpblxuXHQtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTQ4OTczNi9jYXRtdWxsLXJvbS1jdXJ2ZS13aXRoLW5vLWN1c3BzLWFuZC1uby1zZWxmLWludGVyc2VjdGlvbnMvXG5cdC0gaHR0cDovL2lkZW9uZS5jb20vTm9FYlZNXG5cblx0VGhpcyBDdWJpY1BvbHkgY2xhc3MgY291bGQgYmUgdXNlZCBmb3IgcmV1c2luZyBzb21lIHZhcmlhYmxlcyBhbmQgY2FsY3VsYXRpb25zLFxuXHRidXQgZm9yIHRocmVlLmpzIGN1cnZlIHVzZSwgaXQgY291bGQgYmUgcG9zc2libGUgaW5saW5lZCBhbmQgZmxhdHRlbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxcblx0d2hpY2ggY2FuIGJlIHBsYWNlZCBpbiBDdXJ2ZVV0aWxzLlxuXHQqL1xuXG5cdGxldCBjMCA9IDAsIGMxID0gMCwgYzIgPSAwLCBjMyA9IDA7XG5cblx0Lypcblx0ICogQ29tcHV0ZSBjb2VmZmljaWVudHMgZm9yIGEgY3ViaWMgcG9seW5vbWlhbFxuXHQgKiAgIHAocykgPSBjMCArIGMxKnMgKyBjMipzXjIgKyBjMypzXjNcblx0ICogc3VjaCB0aGF0XG5cdCAqICAgcCgwKSA9IHgwLCBwKDEpID0geDFcblx0ICogIGFuZFxuXHQgKiAgIHAnKDApID0gdDAsIHAnKDEpID0gdDEuXG5cdCAqL1xuXHRmdW5jdGlvbiBpbml0KCB4MCwgeDEsIHQwLCB0MSApIHtcblxuXHRcdGMwID0geDA7XG5cdFx0YzEgPSB0MDtcblx0XHRjMiA9IC0zICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcblx0XHRjMyA9IDIgKiB4MCAtIDIgKiB4MSArIHQwICsgdDE7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRpbml0Q2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgdGVuc2lvbiApIHtcblxuXHRcdFx0aW5pdCggeDEsIHgyLCB0ZW5zaW9uICogKCB4MiAtIHgwICksIHRlbnNpb24gKiAoIHgzIC0geDEgKSApO1xuXG5cdFx0fSxcblxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKCB4MCwgeDEsIHgyLCB4MywgZHQwLCBkdDEsIGR0MiApIHtcblxuXHRcdFx0Ly8gY29tcHV0ZSB0YW5nZW50cyB3aGVuIHBhcmFtZXRlcml6ZWQgaW4gW3QxLHQyXVxuXHRcdFx0bGV0IHQxID0gKCB4MSAtIHgwICkgLyBkdDAgLSAoIHgyIC0geDAgKSAvICggZHQwICsgZHQxICkgKyAoIHgyIC0geDEgKSAvIGR0MTtcblx0XHRcdGxldCB0MiA9ICggeDIgLSB4MSApIC8gZHQxIC0gKCB4MyAtIHgxICkgLyAoIGR0MSArIGR0MiApICsgKCB4MyAtIHgyICkgLyBkdDI7XG5cblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxuXHRcdFx0dDEgKj0gZHQxO1xuXHRcdFx0dDIgKj0gZHQxO1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHQxLCB0MiApO1xuXG5cdFx0fSxcblxuXHRcdGNhbGM6IGZ1bmN0aW9uICggdCApIHtcblxuXHRcdFx0Y29uc3QgdDIgPSB0ICogdDtcblx0XHRcdGNvbnN0IHQzID0gdDIgKiB0O1xuXHRcdFx0cmV0dXJuIGMwICsgYzEgKiB0ICsgYzIgKiB0MiArIGMzICogdDM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG4vL1xuXG5jb25zdCB0bXAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBweCA9IC8qQF9fUFVSRV9fKi8gbmV3IEN1YmljUG9seSgpO1xuY29uc3QgcHkgPSAvKkBfX1BVUkVfXyovIG5ldyBDdWJpY1BvbHkoKTtcbmNvbnN0IHB6ID0gLypAX19QVVJFX18qLyBuZXcgQ3ViaWNQb2x5KCk7XG5cbi8qKlxuICogQSBjdXJ2ZSByZXByZXNlbnRpbmcgYSBDYXRtdWxsLVJvbSBzcGxpbmUuXG4gKlxuICogYGBganNcbiAqIC8vQ3JlYXRlIGEgY2xvc2VkIHdhdmV5IGxvb3BcbiAqIGNvbnN0IGN1cnZlID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoIFtcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjMoIC0xMCwgMCwgMTAgKSxcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjMoIC01LCA1LCA1ICksXG4gKiBcdG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAwLCAwICksXG4gKiBcdG5ldyBUSFJFRS5WZWN0b3IzKCA1LCAtNSwgNSApLFxuICogXHRuZXcgVEhSRUUuVmVjdG9yMyggMTAsIDAsIDEwIClcbiAqIF0gKTtcbiAqXG4gKiBjb25zdCBwb2ludHMgPSBjdXJ2ZS5nZXRQb2ludHMoIDUwICk7XG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuICpcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmMDAwMCB9ICk7XG4gKlxuICogLy8gQ3JlYXRlIHRoZSBmaW5hbCBvYmplY3QgdG8gYWRkIHRvIHRoZSBzY2VuZVxuICogY29uc3QgY3VydmVPYmplY3QgPSBuZXcgVEhSRUUuTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQ3VydmVcbiAqL1xuY2xhc3MgQ2F0bXVsbFJvbUN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBDYXRtdWxsLVJvbSBjdXJ2ZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3IzPn0gW3BvaW50c10gLSBBbiBhcnJheSBvZiAzRCBwb2ludHMgZGVmaW5pbmcgdGhlIGN1cnZlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtjbG9zZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgY3VydmUgaXMgY2xvc2VkIG9yIG5vdC5cblx0ICogQHBhcmFtIHsoJ2NlbnRyaXBldGFsJ3wnY2hvcmRhbCd8J2NhdG11bGxyb20nKX0gW2N1cnZlVHlwZT0nY2VudHJpcGV0YWwnXSAtIFRoZSBjdXJ2ZSB0eXBlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3RlbnNpb249MC41XSAtIFRlbnNpb24gb2YgdGhlIGN1cnZlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFtdLCBjbG9zZWQgPSBmYWxzZSwgY3VydmVUeXBlID0gJ2NlbnRyaXBldGFsJywgdGVuc2lvbiA9IDAuNSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2F0bXVsbFJvbUN1cnZlMyc7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiAzRCBwb2ludHMgZGVmaW5pbmcgdGhlIGN1cnZlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PFZlY3RvcjM+fVxuXHRcdCAqL1xuXHRcdHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgY3VydmUgaXMgY2xvc2VkIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5jbG9zZWQgPSBjbG9zZWQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY3VydmUgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ2NlbnRyaXBldGFsJ3wnY2hvcmRhbCd8J2NhdG11bGxyb20nKX1cblx0XHQgKiBAZGVmYXVsdCAnY2VudHJpcGV0YWwnXG5cdFx0ICovXG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBjdXJ2ZVR5cGU7XG5cblx0XHQvKipcblx0XHQgKiBUZW5zaW9uIG9mIHRoZSBjdXJ2ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMC41XG5cdFx0ICovXG5cdFx0dGhpcy50ZW5zaW9uID0gdGVuc2lvbjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBwb2ludCBvbiB0aGUgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gQSBpbnRlcnBvbGF0aW9uIGZhY3RvciByZXByZXNlbnRpbmcgYSBwb3NpdGlvbiBvbiB0aGUgY3VydmUuIE11c3QgYmUgaW4gdGhlIHJhbmdlIGBbMCwxXWAuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW29wdGlvbmFsVGFyZ2V0XSAtIFRoZSBvcHRpb25hbCB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgd3JpdHRlbiB0by5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZS5cblx0ICovXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cdFx0Y29uc3QgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0XHRjb25zdCBwID0gKCBsIC0gKCB0aGlzLmNsb3NlZCA/IDAgOiAxICkgKSAqIHQ7XG5cdFx0bGV0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHRcdGxldCB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkICkge1xuXG5cdFx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7XG5cblx0XHR9IGVsc2UgaWYgKCB3ZWlnaHQgPT09IDAgJiYgaW50UG9pbnQgPT09IGwgLSAxICkge1xuXG5cdFx0XHRpbnRQb2ludCA9IGwgLSAyO1xuXHRcdFx0d2VpZ2h0ID0gMTtcblxuXHRcdH1cblxuXHRcdGxldCBwMCwgcDM7IC8vIDQgcG9pbnRzIChwMSAmIHAyIGRlZmluZWQgYmVsb3cpXG5cblx0XHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ID4gMCApIHtcblxuXHRcdFx0cDAgPSBwb2ludHNbICggaW50UG9pbnQgLSAxICkgJSBsIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBleHRyYXBvbGF0ZSBmaXJzdCBwb2ludFxuXHRcdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgMCBdLCBwb2ludHNbIDEgXSApLmFkZCggcG9pbnRzWyAwIF0gKTtcblx0XHRcdHAwID0gdG1wO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcDEgPSBwb2ludHNbIGludFBvaW50ICUgbCBdO1xuXHRcdGNvbnN0IHAyID0gcG9pbnRzWyAoIGludFBvaW50ICsgMSApICUgbCBdO1xuXG5cdFx0aWYgKCB0aGlzLmNsb3NlZCB8fCBpbnRQb2ludCArIDIgPCBsICkge1xuXG5cdFx0XHRwMyA9IHBvaW50c1sgKCBpbnRQb2ludCArIDIgKSAlIGwgXTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGV4dHJhcG9sYXRlIGxhc3QgcG9pbnRcblx0XHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7XG5cdFx0XHRwMyA9IHRtcDtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjZW50cmlwZXRhbCcgfHwgdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyApIHtcblxuXHRcdFx0Ly8gaW5pdCBDZW50cmlwZXRhbCAvIENob3JkYWwgQ2F0bXVsbC1Sb21cblx0XHRcdGNvbnN0IHBvdyA9IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgPyAwLjUgOiAwLjI1O1xuXHRcdFx0bGV0IGR0MCA9IE1hdGgucG93KCBwMC5kaXN0YW5jZVRvU3F1YXJlZCggcDEgKSwgcG93ICk7XG5cdFx0XHRsZXQgZHQxID0gTWF0aC5wb3coIHAxLmRpc3RhbmNlVG9TcXVhcmVkKCBwMiApLCBwb3cgKTtcblx0XHRcdGxldCBkdDIgPSBNYXRoLnBvdyggcDIuZGlzdGFuY2VUb1NxdWFyZWQoIHAzICksIHBvdyApO1xuXG5cdFx0XHQvLyBzYWZldHkgY2hlY2sgZm9yIHJlcGVhdGVkIHBvaW50c1xuXHRcdFx0aWYgKCBkdDEgPCAxZS00ICkgZHQxID0gMS4wO1xuXHRcdFx0aWYgKCBkdDAgPCAxZS00ICkgZHQwID0gZHQxO1xuXHRcdFx0aWYgKCBkdDIgPCAxZS00ICkgZHQyID0gZHQxO1xuXG5cdFx0XHRweC5pbml0Tm9udW5pZm9ybUNhdG11bGxSb20oIHAwLngsIHAxLngsIHAyLngsIHAzLngsIGR0MCwgZHQxLCBkdDIgKTtcblx0XHRcdHB5LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdFx0cHouaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCBkdDAsIGR0MSwgZHQyICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nICkge1xuXG5cdFx0XHRweC5pbml0Q2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uICk7XG5cdFx0XHRweS5pbml0Q2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgdGhpcy50ZW5zaW9uICk7XG5cdFx0XHRwei5pbml0Q2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgdGhpcy50ZW5zaW9uICk7XG5cblx0XHR9XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRweC5jYWxjKCB3ZWlnaHQgKSxcblx0XHRcdHB5LmNhbGMoIHdlaWdodCApLFxuXHRcdFx0cHouY2FsYyggd2VpZ2h0IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IHNvdXJjZS5jbG9zZWQ7XG5cdFx0dGhpcy5jdXJ2ZVR5cGUgPSBzb3VyY2UuY3VydmVUeXBlO1xuXHRcdHRoaXMudGVuc2lvbiA9IHNvdXJjZS50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzWyBpIF07XG5cdFx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHRcdH1cblxuXHRcdGRhdGEuY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG5cdFx0ZGF0YS5jdXJ2ZVR5cGUgPSB0aGlzLmN1cnZlVHlwZTtcblx0XHRkYXRhLnRlbnNpb24gPSB0aGlzLnRlbnNpb247XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTtcblx0XHRcdHRoaXMucG9pbnRzLnB1c2goIG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBwb2ludCApICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNsb3NlZCA9IGpzb24uY2xvc2VkO1xuXHRcdHRoaXMuY3VydmVUeXBlID0ganNvbi5jdXJ2ZVR5cGU7XG5cdFx0dGhpcy50ZW5zaW9uID0ganNvbi50ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8vIEJlemllciBDdXJ2ZXMgZm9ybXVsYXMgb2J0YWluZWQgZnJvbTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQiVDMyVBOXppZXJfY3VydmVcblxuLyoqXG4gKiBDb21wdXRlcyBhIHBvaW50IG9uIGEgQ2F0bXVsbC1Sb20gc3BsaW5lLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuICogQHBhcmFtIHtudW1iZXJ9IHAwIC0gVGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gcDEgLSBUaGUgc2Vjb25kIGNvbnRyb2wgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gcDIgLSBUaGUgdGhpcmQgY29udHJvbCBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwMyAtIFRoZSBmb3VydGggY29udHJvbCBwb2ludC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNhbGN1bGF0ZWQgcG9pbnQgb24gYSBDYXRtdWxsLVJvbSBzcGxpbmUuXG4gKi9cbmZ1bmN0aW9uIENhdG11bGxSb20oIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdGNvbnN0IHYwID0gKCBwMiAtIHAwICkgKiAwLjU7XG5cdGNvbnN0IHYxID0gKCBwMyAtIHAxICkgKiAwLjU7XG5cdGNvbnN0IHQyID0gdCAqIHQ7XG5cdGNvbnN0IHQzID0gdCAqIHQyO1xuXHRyZXR1cm4gKCAyICogcDEgLSAyICogcDIgKyB2MCArIHYxICkgKiB0MyArICggLTMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxICkgKiB0MiArIHYwICogdCArIHAxO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAwKCB0LCBwICkge1xuXG5cdGNvbnN0IGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMSggdCwgcCApIHtcblxuXHRyZXR1cm4gMiAqICggMSAtIHQgKSAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiB0ICogdCAqIHA7XG5cbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIHBvaW50IG9uIGEgUXVhZHJhdGljIEJlemllciBjdXJ2ZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdCAtIFRoZSBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwMCAtIFRoZSBmaXJzdCBjb250cm9sIHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHAxIC0gVGhlIHNlY29uZCBjb250cm9sIHBvaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IHAyIC0gVGhlIHRoaXJkIGNvbnRyb2wgcG9pbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBjYWxjdWxhdGVkIHBvaW50IG9uIGEgUXVhZHJhdGljIEJlemllciBjdXJ2ZS5cbiAqL1xuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyKCB0LCBwMCwgcDEsIHAyICkge1xuXG5cdHJldHVybiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcDAgKSArIFF1YWRyYXRpY0JlemllclAxKCB0LCBwMSApICtcblx0XHRRdWFkcmF0aWNCZXppZXJQMiggdCwgcDIgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBDdWJpY0JlemllclAwKCB0LCBwICkge1xuXG5cdGNvbnN0IGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogayAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMSggdCwgcCApIHtcblxuXHRjb25zdCBrID0gMSAtIHQ7XG5cdHJldHVybiAzICogayAqIGsgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiAzICogKCAxIC0gdCApICogdCAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDMoIHQsIHAgKSB7XG5cblx0cmV0dXJuIHQgKiB0ICogdCAqIHA7XG5cbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhIHBvaW50IG9uIGEgQ3ViaWMgQmV6aWVyIGN1cnZlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuICogQHBhcmFtIHtudW1iZXJ9IHAwIC0gVGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gcDEgLSBUaGUgc2Vjb25kIGNvbnRyb2wgcG9pbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gcDIgLSBUaGUgdGhpcmQgY29udHJvbCBwb2ludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwMyAtIFRoZSBmb3VydGggY29udHJvbCBwb2ludC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNhbGN1bGF0ZWQgcG9pbnQgb24gYSBDdWJpYyBCZXppZXIgY3VydmUuXG4gKi9cbmZ1bmN0aW9uIEN1YmljQmV6aWVyKCB0LCBwMCwgcDEsIHAyLCBwMyApIHtcblxuXHRyZXR1cm4gQ3ViaWNCZXppZXJQMCggdCwgcDAgKSArIEN1YmljQmV6aWVyUDEoIHQsIHAxICkgKyBDdWJpY0JlemllclAyKCB0LCBwMiApICtcblx0XHRDdWJpY0JlemllclAzKCB0LCBwMyApO1xuXG59XG5cbi8qKlxuICogQSBjdXJ2ZSByZXByZXNlbnRpbmcgYSAyRCBDdWJpYyBCZXppZXIgY3VydmUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGN1cnZlID0gbmV3IFRIUkVFLkN1YmljQmV6aWVyQ3VydmUoXG4gKiBcdG5ldyBUSFJFRS5WZWN0b3IyKCAtIDAsIDAgKSxcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIC0gNSwgMTUgKSxcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIDIwLCAxNSApLFxuICogXHRuZXcgVEhSRUUuVmVjdG9yMiggMTAsIDAgKVxuICogKTtcbiAqXG4gKiBjb25zdCBwb2ludHMgPSBjdXJ2ZS5nZXRQb2ludHMoIDUwICk7XG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuICpcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmMDAwMCB9ICk7XG4gKlxuICogLy8gQ3JlYXRlIHRoZSBmaW5hbCBvYmplY3QgdG8gYWRkIHRvIHRoZSBzY2VuZVxuICogY29uc3QgY3VydmVPYmplY3QgPSBuZXcgVEhSRUUuTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQ3VydmVcbiAqL1xuY2xhc3MgQ3ViaWNCZXppZXJDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBDdWJpYyBCZXppZXIgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gW3YwXSAtIFRoZSBzdGFydCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBbdjFdIC0gVGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gW3YyXSAtIFRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBbdjNdIC0gVGhlIGVuZCBwb2ludC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IyKCksIHYxID0gbmV3IFZlY3RvcjIoKSwgdjIgPSBuZXcgVmVjdG9yMigpLCB2MyA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0N1YmljQmV6aWVyQ3VydmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHN0YXJ0IHBvaW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICovXG5cdFx0dGhpcy52MCA9IHYwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKi9cblx0XHR0aGlzLnYxID0gdjE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2Vjb25kIGNvbnRyb2wgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKi9cblx0XHR0aGlzLnYyID0gdjI7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZW5kIHBvaW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICovXG5cdFx0dGhpcy52MyA9IHYzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBvaW50IG9uIHRoZSBjdXJ2ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBBIGludGVycG9sYXRpb24gZmFjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZS4gTXVzdCBiZSBpbiB0aGUgcmFuZ2UgYFswLDFdYC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBbb3B0aW9uYWxUYXJnZXRdIC0gVGhlIG9wdGlvbmFsIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyB3cml0dGVuIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgcG9zaXRpb24gb24gdGhlIGN1cnZlLlxuXHQgKi9cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueCwgdjEueCwgdjIueCwgdjMueCApLFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdFx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdFx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgY3VydmUgcmVwcmVzZW50aW5nIGEgM0QgQ3ViaWMgQmV6aWVyIGN1cnZlLlxuICpcbiAqIEBhdWdtZW50cyBDdXJ2ZVxuICovXG5jbGFzcyBDdWJpY0JlemllckN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBDdWJpYyBCZXppZXIgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3YwXSAtIFRoZSBzdGFydCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbdjFdIC0gVGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3YyXSAtIFRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbdjNdIC0gVGhlIGVuZCBwb2ludC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB2MCA9IG5ldyBWZWN0b3IzKCksIHYxID0gbmV3IFZlY3RvcjMoKSwgdjIgPSBuZXcgVmVjdG9yMygpLCB2MyA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0N1YmljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlMyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3RhcnQgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnYwID0gdjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZmlyc3QgY29udHJvbCBwb2ludC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMudjEgPSB2MTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMudjIgPSB2MjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBlbmQgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnYzID0gdjM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcG9pbnQgb24gdGhlIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdCAtIEEgaW50ZXJwb2xhdGlvbiBmYWN0b3IgcmVwcmVzZW50aW5nIGEgcG9zaXRpb24gb24gdGhlIGN1cnZlLiBNdXN0IGJlIGluIHRoZSByYW5nZSBgWzAsMV1gLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFtvcHRpb25hbFRhcmdldF0gLSBUaGUgb3B0aW9uYWwgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHdyaXR0ZW4gdG8uXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBwb3NpdGlvbiBvbiB0aGUgY3VydmUuXG5cdCAqL1xuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcblxuXHRcdHBvaW50LnNldChcblx0XHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApLFxuXHRcdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnosIHYzLnogKVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdFx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cdFx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgY3VydmUgcmVwcmVzZW50aW5nIGEgMkQgbGluZSBzZWdtZW50LlxuICpcbiAqIEBhdWdtZW50cyBDdXJ2ZVxuICovXG5jbGFzcyBMaW5lQ3VydmUgZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbGluZSBjdXJ2ZS5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSBbdjFdIC0gVGhlIHN0YXJ0IHBvaW50LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IFt2Ml0gLSBUaGUgZW5kIHBvaW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHYxID0gbmV3IFZlY3RvcjIoKSwgdjIgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNMaW5lQ3VydmUgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZSc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3RhcnQgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKi9cblx0XHR0aGlzLnYxID0gdjE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZW5kIHBvaW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICovXG5cdFx0dGhpcy52MiA9IHYyO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBvaW50IG9uIHRoZSBsaW5lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdCAtIEEgaW50ZXJwb2xhdGlvbiBmYWN0b3IgcmVwcmVzZW50aW5nIGEgcG9zaXRpb24gb24gdGhlIGxpbmUuIE11c3QgYmUgaW4gdGhlIHJhbmdlIGBbMCwxXWAuXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gW29wdGlvbmFsVGFyZ2V0XSAtIFRoZSBvcHRpb25hbCB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgd3JpdHRlbiB0by5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gVGhlIHBvc2l0aW9uIG9uIHRoZSBsaW5lLlxuXHQgKi9cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRpZiAoIHQgPT09IDEgKSB7XG5cblx0XHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKTtcblx0XHRcdHBvaW50Lm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnYxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnQ7XG5cblx0fVxuXG5cdC8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxuXHRnZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cblxuXHRnZXRUYW5nZW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRyZXR1cm4gb3B0aW9uYWxUYXJnZXQuc3ViVmVjdG9ycyggdGhpcy52MiwgdGhpcy52MSApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRnZXRUYW5nZW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHRcdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHRcdHRoaXMudjIuZnJvbUFycmF5KCBqc29uLnYyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGN1cnZlIHJlcHJlc2VudGluZyBhIDNEIGxpbmUgc2VnbWVudC5cbiAqXG4gKiBAYXVnbWVudHMgQ3VydmVcbiAqL1xuY2xhc3MgTGluZUN1cnZlMyBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaW5lIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFt2MV0gLSBUaGUgc3RhcnQgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3YyXSAtIFRoZSBlbmQgcG9pbnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggdjEgPSBuZXcgVmVjdG9yMygpLCB2MiA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0xpbmVDdXJ2ZTMgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZTMnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHN0YXJ0IHBvaW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy52MSA9IHYxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGVuZCBwb2ludC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqL1xuXHRcdHRoaXMudjIgPSB2MjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBwb2ludCBvbiB0aGUgbGluZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBBIGludGVycG9sYXRpb24gZmFjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIG9uIHRoZSBsaW5lLiBNdXN0IGJlIGluIHRoZSByYW5nZSBgWzAsMV1gLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFtvcHRpb25hbFRhcmdldF0gLSBUaGUgb3B0aW9uYWwgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHdyaXR0ZW4gdG8uXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjN9IFRoZSBwb3NpdGlvbiBvbiB0aGUgbGluZS5cblx0ICovXG5cdGdldFBvaW50KCB0LCBvcHRpb25hbFRhcmdldCA9IG5ldyBWZWN0b3IzKCkgKSB7XG5cblx0XHRjb25zdCBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0O1xuXG5cdFx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHQvLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblx0Z2V0UG9pbnRBdCggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCggdSwgb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMygpICkge1xuXG5cdFx0cmV0dXJuIG9wdGlvbmFsVGFyZ2V0LnN1YlZlY3RvcnMoIHRoaXMudjIsIHRoaXMudjEgKS5ub3JtYWxpemUoKTtcblxuXHR9XG5cblx0Z2V0VGFuZ2VudEF0KCB1LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0XHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0XHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0XHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBjdXJ2ZSByZXByZXNlbnRpbmcgYSAyRCBRdWFkcmF0aWMgQmV6aWVyIGN1cnZlLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBjdXJ2ZSA9IG5ldyBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZShcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIC0gMTAsIDAgKSxcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIDIwLCAxNSApLFxuICogXHRuZXcgVEhSRUUuVmVjdG9yMiggMTAsIDAgKVxuICogKVxuICpcbiAqIGNvbnN0IHBvaW50cyA9IGN1cnZlLmdldFBvaW50cyggNTAgKTtcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCkuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG4gKlxuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmYwMDAwIH0gKTtcbiAqXG4gKiAvLyBDcmVhdGUgdGhlIGZpbmFsIG9iamVjdCB0byBhZGQgdG8gdGhlIHNjZW5lXG4gKiBjb25zdCBjdXJ2ZU9iamVjdCA9IG5ldyBUSFJFRS5MaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBDdXJ2ZVxuICovXG5jbGFzcyBRdWFkcmF0aWNCZXppZXJDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBRdWFkcmF0aWMgQmV6aWVyIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IFt2MF0gLSBUaGUgc3RhcnQgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gW3YxXSAtIFRoZSBjb250cm9sIHBvaW50LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IFt2Ml0gLSBUaGUgZW5kIHBvaW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHYwID0gbmV3IFZlY3RvcjIoKSwgdjEgPSBuZXcgVmVjdG9yMigpLCB2MiA9IG5ldyBWZWN0b3IyKCkgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1F1YWRyYXRpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3RhcnQgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKi9cblx0XHR0aGlzLnYwID0gdjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29udHJvbCBwb2ludC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqL1xuXHRcdHRoaXMudjEgPSB2MTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBlbmQgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKi9cblx0XHR0aGlzLnYyID0gdjI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgcG9pbnQgb24gdGhlIGN1cnZlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdCAtIEEgaW50ZXJwb2xhdGlvbiBmYWN0b3IgcmVwcmVzZW50aW5nIGEgcG9zaXRpb24gb24gdGhlIGN1cnZlLiBNdXN0IGJlIGluIHRoZSByYW5nZSBgWzAsMV1gLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IFtvcHRpb25hbFRhcmdldF0gLSBUaGUgb3B0aW9uYWwgdGFyZ2V0IHZlY3RvciB0aGUgcmVzdWx0IGlzIHdyaXR0ZW4gdG8uXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IFRoZSBwb3NpdGlvbiBvbiB0aGUgY3VydmUuXG5cdCAqL1xuXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVmVjdG9yMigpICkge1xuXG5cdFx0Y29uc3QgcG9pbnQgPSBvcHRpb25hbFRhcmdldDtcblxuXHRcdGNvbnN0IHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjI7XG5cblx0XHRwb2ludC5zZXQoXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLnggKSxcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgY3VydmUgcmVwcmVzZW50aW5nIGEgM0QgUXVhZHJhdGljIEJlemllciBjdXJ2ZS5cbiAqXG4gKiBAYXVnbWVudHMgQ3VydmVcbiAqL1xuY2xhc3MgUXVhZHJhdGljQmV6aWVyQ3VydmUzIGV4dGVuZHMgQ3VydmUge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFF1YWRyYXRpYyBCZXppZXIgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3YwXSAtIFRoZSBzdGFydCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbdjFdIC0gVGhlIGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3YyXSAtIFRoZSBlbmQgcG9pbnQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggdjAgPSBuZXcgVmVjdG9yMygpLCB2MSA9IG5ldyBWZWN0b3IzKCksIHYyID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUXVhZHJhdGljQmV6aWVyQ3VydmUzID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZTMnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHN0YXJ0IHBvaW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy52MCA9IHYwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbnRyb2wgcG9pbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnYxID0gdjE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZW5kIHBvaW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy52MiA9IHYyO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBvaW50IG9uIHRoZSBjdXJ2ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBBIGludGVycG9sYXRpb24gZmFjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZS4gTXVzdCBiZSBpbiB0aGUgcmFuZ2UgYFswLDFdYC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3B0aW9uYWxUYXJnZXRdIC0gVGhlIG9wdGlvbmFsIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyB3cml0dGVuIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgcG9zaXRpb24gb24gdGhlIGN1cnZlLlxuXHQgKi9cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdFx0cG9pbnQuc2V0KFxuXHRcdFx0UXVhZHJhdGljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54ICksXG5cdFx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKSxcblx0XHRcdFF1YWRyYXRpY0JlemllciggdCwgdjAueiwgdjEueiwgdjIueiApXG5cdFx0KTtcblxuXHRcdHJldHVybiBwb2ludDtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHRcdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdFx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdFx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRcdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHRcdHRoaXMudjEuZnJvbUFycmF5KCBqc29uLnYxICk7XG5cdFx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgY3VydmUgcmVwcmVzZW50aW5nIGEgMkQgc3BsaW5lIGN1cnZlLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBDcmVhdGUgYSBzaW5lLWxpa2Ugd2F2ZVxuICogY29uc3QgY3VydmUgPSBuZXcgVEhSRUUuU3BsaW5lQ3VydmUoIFtcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIC0xMCwgMCApLFxuICogXHRuZXcgVEhSRUUuVmVjdG9yMiggLTUsIDUgKSxcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIDAsIDAgKSxcbiAqIFx0bmV3IFRIUkVFLlZlY3RvcjIoIDUsIC01ICksXG4gKiBcdG5ldyBUSFJFRS5WZWN0b3IyKCAxMCwgMCApXG4gKiBdICk7XG4gKlxuICogY29uc3QgcG9pbnRzID0gY3VydmUuZ2V0UG9pbnRzKCA1MCApO1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKTtcbiAqXG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZjAwMDAgfSApO1xuICpcbiAqIC8vIENyZWF0ZSB0aGUgZmluYWwgb2JqZWN0IHRvIGFkZCB0byB0aGUgc2NlbmVcbiAqIGNvbnN0IHNwbGluZU9iamVjdCA9IG5ldyBUSFJFRS5MaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBDdXJ2ZVxuICovXG5jbGFzcyBTcGxpbmVDdXJ2ZSBleHRlbmRzIEN1cnZlIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyAyRCBzcGxpbmUgY3VydmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj59IFtwb2ludHNdIC0gIEFuIGFycmF5IG9mIDJEIHBvaW50cyBkZWZpbmluZyB0aGUgY3VydmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcG9pbnRzID0gW10gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NwbGluZUN1cnZlID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTcGxpbmVDdXJ2ZSc7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBvZiAyRCBwb2ludHMgZGVmaW5pbmcgdGhlIGN1cnZlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PFZlY3RvcjI+fVxuXHRcdCAqL1xuXHRcdHRoaXMucG9pbnRzID0gcG9pbnRzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBvaW50IG9uIHRoZSBjdXJ2ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBBIGludGVycG9sYXRpb24gZmFjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZS4gTXVzdCBiZSBpbiB0aGUgcmFuZ2UgYFswLDFdYC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBbb3B0aW9uYWxUYXJnZXRdIC0gVGhlIG9wdGlvbmFsIHRhcmdldCB2ZWN0b3IgdGhlIHJlc3VsdCBpcyB3cml0dGVuIHRvLlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgcG9zaXRpb24gb24gdGhlIGN1cnZlLlxuXHQgKi9cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ID0gbmV3IFZlY3RvcjIoKSApIHtcblxuXHRcdGNvbnN0IHBvaW50ID0gb3B0aW9uYWxUYXJnZXQ7XG5cblx0XHRjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0XHRjb25zdCBwID0gKCBwb2ludHMubGVuZ3RoIC0gMSApICogdDtcblxuXHRcdGNvbnN0IGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHRcdGNvbnN0IHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHRcdGNvbnN0IHAwID0gcG9pbnRzWyBpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxIF07XG5cdFx0Y29uc3QgcDEgPSBwb2ludHNbIGludFBvaW50IF07XG5cdFx0Y29uc3QgcDIgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDIgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMSBdO1xuXHRcdGNvbnN0IHAzID0gcG9pbnRzWyBpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDIgXTtcblxuXHRcdHBvaW50LnNldChcblx0XHRcdENhdG11bGxSb20oIHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCApLFxuXHRcdFx0Q2F0bXVsbFJvbSggd2VpZ2h0LCBwMC55LCBwMS55LCBwMi55LCBwMy55IClcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHBvaW50O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gc291cmNlLnBvaW50c1sgaSBdO1xuXG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdGZyb21KU09OKCBqc29uICkge1xuXG5cdFx0c3VwZXIuZnJvbUpTT04oIGpzb24gKTtcblxuXHRcdHRoaXMucG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbnZhciBDdXJ2ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0QXJjQ3VydmU6IEFyY0N1cnZlLFxuXHRDYXRtdWxsUm9tQ3VydmUzOiBDYXRtdWxsUm9tQ3VydmUzLFxuXHRDdWJpY0JlemllckN1cnZlOiBDdWJpY0JlemllckN1cnZlLFxuXHRDdWJpY0JlemllckN1cnZlMzogQ3ViaWNCZXppZXJDdXJ2ZTMsXG5cdEVsbGlwc2VDdXJ2ZTogRWxsaXBzZUN1cnZlLFxuXHRMaW5lQ3VydmU6IExpbmVDdXJ2ZSxcblx0TGluZUN1cnZlMzogTGluZUN1cnZlMyxcblx0UXVhZHJhdGljQmV6aWVyQ3VydmU6IFF1YWRyYXRpY0JlemllckN1cnZlLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6IFF1YWRyYXRpY0JlemllckN1cnZlMyxcblx0U3BsaW5lQ3VydmU6IFNwbGluZUN1cnZlXG59KTtcblxuLyoqXG4gKiBBIGJhc2UgY2xhc3MgZXh0ZW5kaW5nIHtAbGluayBDdXJ2ZX0uIGBDdXJ2ZVBhdGhgIGlzIHNpbXBseSBhblxuICogYXJyYXkgb2YgY29ubmVjdGVkIGN1cnZlcywgYnV0IHJldGFpbnMgdGhlIEFQSSBvZiBhIGN1cnZlLlxuICpcbiAqIEBhdWdtZW50cyBDdXJ2ZVxuICovXG5jbGFzcyBDdXJ2ZVBhdGggZXh0ZW5kcyBDdXJ2ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY3VydmUgcGF0aC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdDdXJ2ZVBhdGgnO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgb2YgY3VydmVzIGRlZmluaW5nIHRoZVxuXHRcdCAqIHBhdGguXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8Q3VydmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBwYXRoIHNob3VsZCBhdXRvbWF0aWNhbGx5IGJlIGNsb3NlZFxuXHRcdCAqIGJ5IGEgbGluZSBjdXJ2ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5hdXRvQ2xvc2UgPSBmYWxzZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBjdXJ2ZSB0byB0aGlzIGN1cnZlIHBhdGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q3VydmV9IGN1cnZlIC0gVGhlIGN1cnZlIHRvIGFkZC5cblx0ICovXG5cdGFkZCggY3VydmUgKSB7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGxpbmUgY3VydmUgdG8gY2xvc2UgdGhlIHBhdGguXG5cdCAqXG5cdCAqIEByZXR1cm4ge0N1cnZlUGF0aH0gQSByZWZlcmVuY2UgdG8gdGhpcyBjdXJ2ZSBwYXRoLlxuXHQgKi9cblx0Y2xvc2VQYXRoKCkge1xuXG5cdFx0Ly8gQWRkIGEgbGluZSBjdXJ2ZSBpZiBzdGFydCBhbmQgZW5kIG9mIGxpbmVzIGFyZSBub3QgY29ubmVjdGVkXG5cdFx0Y29uc3Qgc3RhcnRQb2ludCA9IHRoaXMuY3VydmVzWyAwIF0uZ2V0UG9pbnQoIDAgKTtcblx0XHRjb25zdCBlbmRQb2ludCA9IHRoaXMuY3VydmVzWyB0aGlzLmN1cnZlcy5sZW5ndGggLSAxIF0uZ2V0UG9pbnQoIDEgKTtcblxuXHRcdGlmICggISBzdGFydFBvaW50LmVxdWFscyggZW5kUG9pbnQgKSApIHtcblxuXHRcdFx0Y29uc3QgbGluZVR5cGUgPSAoIHN0YXJ0UG9pbnQuaXNWZWN0b3IyID09PSB0cnVlICkgPyAnTGluZUN1cnZlJyA6ICdMaW5lQ3VydmUzJztcblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBDdXJ2ZXNbIGxpbmVUeXBlIF0oIGVuZFBvaW50LCBzdGFydFBvaW50ICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgcmV0dXJucyBhIHZlY3RvciBpbiAyRCBvciAzRCBzcGFjZSAoZGVwZW5kaW5nIG9uIHRoZSBjdXJ2ZSBkZWZpbml0aW9ucylcblx0ICogZm9yIHRoZSBnaXZlbiBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBBIGludGVycG9sYXRpb24gZmFjdG9yIHJlcHJlc2VudGluZyBhIHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZS4gTXVzdCBiZSBpbiB0aGUgcmFuZ2UgYFswLDFdYC5cblx0ICogQHBhcmFtIHsoVmVjdG9yMnxWZWN0b3IzKX0gW29wdGlvbmFsVGFyZ2V0XSAtIFRoZSBvcHRpb25hbCB0YXJnZXQgdmVjdG9yIHRoZSByZXN1bHQgaXMgd3JpdHRlbiB0by5cblx0ICogQHJldHVybiB7PyhWZWN0b3IyfFZlY3RvcjMpfSBUaGUgcG9zaXRpb24gb24gdGhlIGN1cnZlLiBJdCBjYW4gYmUgYSAyRCBvciAzRCB2ZWN0b3IgZGVwZW5kaW5nIG9uIHRoZSBjdXJ2ZSBkZWZpbml0aW9uLlxuXHQgKi9cblx0Z2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Ly8gVG8gZ2V0IGFjY3VyYXRlIHBvaW50IHdpdGggcmVmZXJlbmNlIHRvXG5cdFx0Ly8gZW50aXJlIHBhdGggZGlzdGFuY2UgYXQgdGltZSB0LFxuXHRcdC8vIGZvbGxvd2luZyBoYXMgdG8gYmUgZG9uZTpcblxuXHRcdC8vIDEuIExlbmd0aCBvZiBlYWNoIHN1YiBwYXRoIGhhdmUgdG8gYmUga25vd25cblx0XHQvLyAyLiBMb2NhdGUgYW5kIGlkZW50aWZ5IHR5cGUgb2YgY3VydmVcblx0XHQvLyAzLiBHZXQgdCBmb3IgdGhlIGN1cnZlXG5cdFx0Ly8gNC4gUmV0dXJuIGN1cnZlLmdldFBvaW50QXQodCcpXG5cblx0XHRjb25zdCBkID0gdCAqIHRoaXMuZ2V0TGVuZ3RoKCk7XG5cdFx0Y29uc3QgY3VydmVMZW5ndGhzID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHRsZXQgaSA9IDA7XG5cblx0XHQvLyBUbyB0aGluayBhYm91dCBib3VuZGFyaWVzIHBvaW50cy5cblxuXHRcdHdoaWxlICggaSA8IGN1cnZlTGVuZ3Rocy5sZW5ndGggKSB7XG5cblx0XHRcdGlmICggY3VydmVMZW5ndGhzWyBpIF0gPj0gZCApIHtcblxuXHRcdFx0XHRjb25zdCBkaWZmID0gY3VydmVMZW5ndGhzWyBpIF0gLSBkO1xuXHRcdFx0XHRjb25zdCBjdXJ2ZSA9IHRoaXMuY3VydmVzWyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgc2VnbWVudExlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpO1xuXHRcdFx0XHRjb25zdCB1ID0gc2VnbWVudExlbmd0aCA9PT0gMCA/IDAgOiAxIC0gZGlmZiAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHRcdFx0cmV0dXJuIGN1cnZlLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aSArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdFx0Ly8gbG9vcCB3aGVyZSBzdW0gIT0gMCwgc3VtID4gZCAsIHN1bSsxIDxkXG5cblx0fVxuXG5cdGdldExlbmd0aCgpIHtcblxuXHRcdC8vIFdlIGNhbm5vdCB1c2UgdGhlIGRlZmF1bHQgVEhSRUUuQ3VydmUgZ2V0UG9pbnQoKSB3aXRoIGdldExlbmd0aCgpIGJlY2F1c2UgaW5cblx0XHQvLyBUSFJFRS5DdXJ2ZSwgZ2V0TGVuZ3RoKCkgZGVwZW5kcyBvbiBnZXRQb2ludCgpIGJ1dCBpbiBUSFJFRS5DdXJ2ZVBhdGhcblx0XHQvLyBnZXRQb2ludCgpIGRlcGVuZHMgb24gZ2V0TGVuZ3RoXG5cblx0XHRjb25zdCBsZW5zID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuc1sgbGVucy5sZW5ndGggLSAxIF07XG5cblx0fVxuXG5cdHVwZGF0ZUFyY0xlbmd0aHMoKSB7XG5cblx0XHQvLyBjYWNoZUxlbmd0aHMgbXVzdCBiZSByZWNhbGN1bGF0ZWQuXG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLmNhY2hlTGVuZ3RocyA9IG51bGw7XG5cdFx0dGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgbGlzdCBvZiBjdW11bGF0aXZlIGN1cnZlIGxlbmd0aHMgb2YgdGhlIGRlZmluZWQgY3VydmVzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgY3VydmUgbGVuZ3Rocy5cblx0ICovXG5cdGdldEN1cnZlTGVuZ3RocygpIHtcblxuXHRcdC8vIENvbXB1dGUgbGVuZ3RocyBhbmQgY2FjaGUgdGhlbVxuXHRcdC8vIFdlIGNhbm5vdCBvdmVyd3JpdGUgZ2V0TGVuZ3RocygpIGJlY2F1c2UgVXRvVCBtYXBwaW5nIHVzZXMgaXQuXG5cdFx0Ly8gV2UgdXNlIGNhY2hlIHZhbHVlcyBpZiBjdXJ2ZXMgYW5kIGNhY2hlIGFycmF5IGFyZSBzYW1lIGxlbmd0aFxuXG5cdFx0aWYgKCB0aGlzLmNhY2hlTGVuZ3RocyAmJiB0aGlzLmNhY2hlTGVuZ3Rocy5sZW5ndGggPT09IHRoaXMuY3VydmVzLmxlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVMZW5ndGhzO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGxlbmd0aCBvZiBzdWItY3VydmVcblx0XHQvLyBQdXNoIHN1bXMgaW50byBjYWNoZWQgYXJyYXlcblxuXHRcdGNvbnN0IGxlbmd0aHMgPSBbXTtcblx0XHRsZXQgc3VtcyA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRzdW1zICs9IHRoaXMuY3VydmVzWyBpIF0uZ2V0TGVuZ3RoKCk7XG5cdFx0XHRsZW5ndGhzLnB1c2goIHN1bXMgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbGVuZ3RocztcblxuXHRcdHJldHVybiBsZW5ndGhzO1xuXG5cdH1cblxuXHRnZXRTcGFjZWRQb2ludHMoIGRpdmlzaW9ucyA9IDQwICkge1xuXG5cdFx0Y29uc3QgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gZGl2aXNpb25zOyBpICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggaSAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYXV0b0Nsb3NlICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggcG9pbnRzWyAwIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fVxuXG5cdGdldFBvaW50cyggZGl2aXNpb25zID0gMTIgKSB7XG5cblx0XHRjb25zdCBwb2ludHMgPSBbXTtcblx0XHRsZXQgbGFzdDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgY3VydmVzID0gdGhpcy5jdXJ2ZXM7IGkgPCBjdXJ2ZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJ2ZSA9IGN1cnZlc1sgaSBdO1xuXHRcdFx0Y29uc3QgcmVzb2x1dGlvbiA9IGN1cnZlLmlzRWxsaXBzZUN1cnZlID8gZGl2aXNpb25zICogMlxuXHRcdFx0XHQ6ICggY3VydmUuaXNMaW5lQ3VydmUgfHwgY3VydmUuaXNMaW5lQ3VydmUzICkgPyAxXG5cdFx0XHRcdFx0OiBjdXJ2ZS5pc1NwbGluZUN1cnZlID8gZGl2aXNpb25zICogY3VydmUucG9pbnRzLmxlbmd0aFxuXHRcdFx0XHRcdFx0OiBkaXZpc2lvbnM7XG5cblx0XHRcdGNvbnN0IHB0cyA9IGN1cnZlLmdldFBvaW50cyggcmVzb2x1dGlvbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBwdHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHBvaW50ID0gcHRzWyBqIF07XG5cblx0XHRcdFx0aWYgKCBsYXN0ICYmIGxhc3QuZXF1YWxzKCBwb2ludCApICkgY29udGludWU7IC8vIGVuc3VyZXMgbm8gY29uc2VjdXRpdmUgcG9pbnRzIGFyZSBkdXBsaWNhdGVzXG5cblx0XHRcdFx0cG9pbnRzLnB1c2goIHBvaW50ICk7XG5cdFx0XHRcdGxhc3QgPSBwb2ludDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmF1dG9DbG9zZSAmJiBwb2ludHMubGVuZ3RoID4gMSAmJiAhIHBvaW50c1sgcG9pbnRzLmxlbmd0aCAtIDEgXS5lcXVhbHMoIHBvaW50c1sgMCBdICkgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc291cmNlLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJ2ZSA9IHNvdXJjZS5jdXJ2ZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hdXRvQ2xvc2UgPSBzb3VyY2UuYXV0b0Nsb3NlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEuYXV0b0Nsb3NlID0gdGhpcy5hdXRvQ2xvc2U7XG5cdFx0ZGF0YS5jdXJ2ZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHRoaXMuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGN1cnZlID0gdGhpcy5jdXJ2ZXNbIGkgXTtcblx0XHRcdGRhdGEuY3VydmVzLnB1c2goIGN1cnZlLnRvSlNPTigpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5hdXRvQ2xvc2UgPSBqc29uLmF1dG9DbG9zZTtcblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgY3VydmUgPSBqc29uLmN1cnZlc1sgaSBdO1xuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IEN1cnZlc1sgY3VydmUudHlwZSBdKCkuZnJvbUpTT04oIGN1cnZlICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgMkQgcGF0aCByZXByZXNlbnRhdGlvbi4gVGhlIGNsYXNzIHByb3ZpZGVzIG1ldGhvZHMgZm9yIGNyZWF0aW5nIHBhdGhzXG4gKiBhbmQgY29udG91cnMgb2YgMkQgc2hhcGVzIHNpbWlsYXIgdG8gdGhlIDJEIENhbnZhcyBBUEkuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBhdGggPSBuZXcgVEhSRUUuUGF0aCgpO1xuICpcbiAqIHBhdGgubGluZVRvKCAwLCAwLjggKTtcbiAqIHBhdGgucXVhZHJhdGljQ3VydmVUbyggMCwgMSwgMC4yLCAxICk7XG4gKiBwYXRoLmxpbmVUbyggMSwgMSApO1xuICpcbiAqIGNvbnN0IHBvaW50cyA9IHBhdGguZ2V0UG9pbnRzKCk7XG4gKlxuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmZmZiB9ICk7XG4gKlxuICogY29uc3QgbGluZSA9IG5ldyBUSFJFRS5MaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggbGluZSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIEN1cnZlUGF0aFxuICovXG5jbGFzcyBQYXRoIGV4dGVuZHMgQ3VydmVQYXRoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwYXRoLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PFZlY3RvcjI+fSBbcG9pbnRzXSAtIEFuIGFycmF5IG9mIDJEIHBvaW50cyBkZWZpbmluZyB0aGUgcGF0aC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwb2ludHMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BhdGgnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgb2Zmc2V0IG9mIHRoZSBwYXRoLiBBbnkgbmV3IGN1cnZlIGFkZGVkIHdpbGwgc3RhcnQgaGVyZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqL1xuXHRcdHRoaXMuY3VycmVudFBvaW50ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdGlmICggcG9pbnRzICkge1xuXG5cdFx0XHR0aGlzLnNldEZyb21Qb2ludHMoIHBvaW50cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHBhdGggZnJvbSB0aGUgZ2l2ZW4gbGlzdCBvZiBwb2ludHMuIFRoZSBwb2ludHMgYXJlIGFkZGVkXG5cdCAqIHRvIHRoZSBwYXRoIGFzIGluc3RhbmNlcyBvZiB7QGxpbmsgTGluZUN1cnZlfS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3IyPn0gcG9pbnRzIC0gQW4gYXJyYXkgb2YgMkQgcG9pbnRzLlxuXHQgKiBAcmV0dXJuIHtQYXRofSBBIHJlZmVyZW5jZSB0byB0aGlzIHBhdGguXG5cdCAqL1xuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1vdmVUbyggcG9pbnRzWyAwIF0ueCwgcG9pbnRzWyAwIF0ueSApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMubGluZVRvKCBwb2ludHNbIGkgXS54LCBwb2ludHNbIGkgXS55ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIE1vdmVzIHtAbGluayBQYXRoI2N1cnJlbnRQb2ludH0gdG8gdGhlIGdpdmVuIHBvaW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IGNvb3JkaW5hdGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZS5cblx0ICogQHJldHVybiB7UGF0aH0gQSByZWZlcmVuY2UgdG8gdGhpcyBwYXRoLlxuXHQgKi9cblx0bW92ZVRvKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCB4LCB5ICk7IC8vIFRPRE8gY29uc2lkZXIgcmVmZXJlbmNpbmcgdmVjdG9ycyBpbnN0ZWFkIG9mIGNvcHlpbmc/XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIExpbmVDdXJ2ZX0gdG8gdGhlIHBhdGggYnkgY29ubmVjdGluZ1xuXHQgKiB0aGUgY3VycmVudCBwb2ludCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBwb2ludC5cblx0ICogQHJldHVybiB7UGF0aH0gQSByZWZlcmVuY2UgdG8gdGhpcyBwYXRoLlxuXHQgKi9cblx0bGluZVRvKCB4LCB5ICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgTGluZUN1cnZlKCB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLCBuZXcgVmVjdG9yMiggeCwgeSApICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGFuIGluc3RhbmNlIG9mIHtAbGluayBRdWFkcmF0aWNCZXppZXJDdXJ2ZX0gdG8gdGhlIHBhdGggYnkgY29ubmVjdGluZ1xuXHQgKiB0aGUgY3VycmVudCBwb2ludCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhQ1B4IC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgY29udHJvbCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFDUHkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBjb250cm9sIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYVggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBlbmQgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhWSAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBwb2ludC5cblx0ICogQHJldHVybiB7UGF0aH0gQSByZWZlcmVuY2UgdG8gdGhpcyBwYXRoLlxuXHQgKi9cblx0cXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUoXG5cdFx0XHR0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFDUHgsIGFDUHkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhWCwgYVkgKVxuXHRcdCk7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgQ3ViaWNCZXppZXJDdXJ2ZX0gdG8gdGhlIHBhdGggYnkgY29ubmVjdGluZ1xuXHQgKiB0aGUgY3VycmVudCBwb2ludCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhQ1AxeCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhQ1AxeSAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhQ1AyeCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNlY29uZCBjb250cm9sIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUNQMnkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFYIC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYVkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBlbmQgcG9pbnQuXG5cdCAqIEByZXR1cm4ge1BhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGF0aC5cblx0ICovXG5cdGJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHRjb25zdCBjdXJ2ZSA9IG5ldyBDdWJpY0JlemllckN1cnZlKFxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1AxeCwgYUNQMXkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhQ1AyeCwgYUNQMnkgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBhWCwgYVkgKVxuXHRcdCk7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgU3BsaW5lQ3VydmV9IHRvIHRoZSBwYXRoIGJ5IGNvbm5lY3Rpbmdcblx0ICogdGhlIGN1cnJlbnQgcG9pbnQgd2l0aCB0aGUgZ2l2ZW4gbGlzdCBvZiBwb2ludHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj59IHB0cyAtIEFuIGFycmF5IG9mIHBvaW50cyBpbiAyRCBzcGFjZS5cblx0ICogQHJldHVybiB7UGF0aH0gQSByZWZlcmVuY2UgdG8gdGhpcyBwYXRoLlxuXHQgKi9cblx0c3BsaW5lVGhydSggcHRzICkge1xuXG5cdFx0Y29uc3QgbnB0cyA9IFsgdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSBdLmNvbmNhdCggcHRzICk7XG5cblx0XHRjb25zdCBjdXJ2ZSA9IG5ldyBTcGxpbmVDdXJ2ZSggbnB0cyApO1xuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBwdHNbIHB0cy5sZW5ndGggLSAxIF0gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhbiBhcmMgYXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEVsbGlwc2VDdXJ2ZX0gdG8gdGhlIHBhdGgsIHBvc2l0aW9uZWQgcmVsYXRpdmVcblx0ICogdG8gdGhlIGN1cnJlbnQgcG9pbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhWCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRlciBvZiB0aGUgYXJjIG9mZnNldHRlZCBmcm9tIHRoZSBwcmV2aW91cyBjdXJ2ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFZIC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgY2VudGVyIG9mIHRoZSBhcmMgb2Zmc2V0dGVkIGZyb20gdGhlIHByZXZpb3VzIGN1cnZlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYVJhZGl1cyAtIFRoZSByYWRpdXMgb2YgdGhlIGFyYy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFTdGFydEFuZ2xlIC0gVGhlIHN0YXJ0IGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhRW5kQW5nbGUgLSBUaGUgZW5kIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FDbG9ja3dpc2U9ZmFsc2VdIC0gV2hldGhlciB0byBzd2VlcCB0aGUgYXJjIGNsb2Nrd2lzZSBvciBub3QuXG5cdCAqIEByZXR1cm4ge1BhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGF0aC5cblx0ICovXG5cdGFyYyggYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICkge1xuXG5cdFx0Y29uc3QgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdGNvbnN0IHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzYXJjKCBhWCArIHgwLCBhWSArIHkwLCBhUmFkaXVzLFxuXHRcdFx0YVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGFuIGFic29sdXRlbHkgcG9zaXRpb25lZCBhcmMgYXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEVsbGlwc2VDdXJ2ZX0gdG8gdGhlIHBhdGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhWCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRlciBvZiB0aGUgYXJjLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYVkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhlIGFyYy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFSYWRpdXMgLSBUaGUgcmFkaXVzIG9mIHRoZSBhcmMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhU3RhcnRBbmdsZSAtIFRoZSBzdGFydCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUVuZEFuZ2xlIC0gVGhlIGVuZCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFthQ2xvY2t3aXNlPWZhbHNlXSAtIFdoZXRoZXIgdG8gc3dlZXAgdGhlIGFyYyBjbG9ja3dpc2Ugb3Igbm90LlxuXHQgKiBAcmV0dXJuIHtQYXRofSBBIHJlZmVyZW5jZSB0byB0aGlzIHBhdGguXG5cdCAqL1xuXHRhYnNhcmMoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gZWxsaXBzZSBhcyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgRWxsaXBzZUN1cnZlfSB0byB0aGUgcGF0aCwgcG9zaXRpb25lZCByZWxhdGl2ZVxuXHQgKiB0byB0aGUgY3VycmVudCBwb2ludFxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYVggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhlIGVsbGlwc2Ugb2Zmc2V0dGVkIGZyb20gdGhlIHByZXZpb3VzIGN1cnZlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYVkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgb2YgdGhlIGVsbGlwc2Ugb2Zmc2V0dGVkIGZyb20gdGhlIHByZXZpb3VzIGN1cnZlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geFJhZGl1cyAtIFRoZSByYWRpdXMgb2YgdGhlIGVsbGlwc2UgaW4gdGhlIHggYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHlSYWRpdXMgLSBUaGUgcmFkaXVzIG9mIHRoZSBlbGxpcHNlIGluIHRoZSB5IGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhU3RhcnRBbmdsZSAtIFRoZSBzdGFydCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUVuZEFuZ2xlIC0gVGhlIGVuZCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFthQ2xvY2t3aXNlPWZhbHNlXSAtIFdoZXRoZXIgdG8gc3dlZXAgdGhlIGVsbGlwc2UgY2xvY2t3aXNlIG9yIG5vdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthUm90YXRpb249MF0gLSBUaGUgcm90YXRpb24gYW5nbGUgb2YgdGhlIGVsbGlwc2UgaW4gcmFkaWFucywgY291bnRlcmNsb2Nrd2lzZSBmcm9tIHRoZSBwb3NpdGl2ZSBYIGF4aXMuXG5cdCAqIEByZXR1cm4ge1BhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGF0aC5cblx0ICovXG5cdGVsbGlwc2UoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0Y29uc3QgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdGNvbnN0IHkwID0gdGhpcy5jdXJyZW50UG9pbnQueTtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVggKyB4MCwgYVkgKyB5MCwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gYWJzb2x1dGVseSBwb3NpdGlvbmVkIGVsbGlwc2UgYXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEVsbGlwc2VDdXJ2ZX0gdG8gdGhlIHBhdGguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhWCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGFic29sdXRlIGNlbnRlciBvZiB0aGUgZWxsaXBzZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFZIC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgYWJzb2x1dGUgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geFJhZGl1cyAtIFRoZSByYWRpdXMgb2YgdGhlIGVsbGlwc2UgaW4gdGhlIHggYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHlSYWRpdXMgLSBUaGUgcmFkaXVzIG9mIHRoZSBlbGxpcHNlIGluIHRoZSB5IGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhU3RhcnRBbmdsZSAtIFRoZSBzdGFydCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUVuZEFuZ2xlIC0gVGhlIGVuZCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFthQ2xvY2t3aXNlPWZhbHNlXSAtIFdoZXRoZXIgdG8gc3dlZXAgdGhlIGVsbGlwc2UgY2xvY2t3aXNlIG9yIG5vdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFthUm90YXRpb249MF0gLSBUaGUgcm90YXRpb24gYW5nbGUgb2YgdGhlIGVsbGlwc2UgaW4gcmFkaWFucywgY291bnRlcmNsb2Nrd2lzZSBmcm9tIHRoZSBwb3NpdGl2ZSBYIGF4aXMuXG5cdCAqIEByZXR1cm4ge1BhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcGF0aC5cblx0ICovXG5cdGFic2VsbGlwc2UoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0Y29uc3QgY3VydmUgPSBuZXcgRWxsaXBzZUN1cnZlKCBhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0aWYgKCB0aGlzLmN1cnZlcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHQvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pblxuXHRcdFx0Y29uc3QgZmlyc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAwICk7XG5cblx0XHRcdGlmICggISBmaXJzdFBvaW50LmVxdWFscyggdGhpcy5jdXJyZW50UG9pbnQgKSApIHtcblxuXHRcdFx0XHR0aGlzLmxpbmVUbyggZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdGNvbnN0IGxhc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAxICk7XG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggbGFzdFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KCBzb3VyY2UuY3VycmVudFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0dG9KU09OKCkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTigpO1xuXG5cdFx0ZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHRzdXBlci5mcm9tSlNPTigganNvbiApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KCBqc29uLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ3JlYXRlcyBtZXNoZXMgd2l0aCBheGlhbCBzeW1tZXRyeSBsaWtlIHZhc2VzLiBUaGUgbGF0aGUgcm90YXRlcyBhcm91bmQgdGhlIFkgYXhpcy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcG9pbnRzID0gW107XG4gKiBmb3IgKCBsZXQgaSA9IDA7IGkgPCAxMDsgaSArKyApIHtcbiAqIFx0cG9pbnRzLnB1c2goIG5ldyBUSFJFRS5WZWN0b3IyKCBNYXRoLnNpbiggaSAqIDAuMiApICogMTAgKyA1LCAoIGkgLSA1ICkgKiAyICkgKTtcbiAqIH1cbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkxhdGhlR2VvbWV0cnkoIHBvaW50cyApO1xuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZjAwIH0gKTtcbiAqIGNvbnN0IGxhdGhlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogc2NlbmUuYWRkKCBsYXRoZSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckdlb21ldHJ5XG4gKi9cbmNsYXNzIExhdGhlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbGF0aGUgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMnxWZWN0b3IzPn0gW3BvaW50c10gLSBBbiBhcnJheSBvZiBwb2ludHMgaW4gMkQgc3BhY2UuIFRoZSB4LWNvb3JkaW5hdGUgb2YgZWFjaCBwb2ludFxuXHQgKiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NlZ21lbnRzPTEyXSAtIFRoZSBudW1iZXIgb2YgY2lyY3VtZmVyZW5jZSBzZWdtZW50cyB0byBnZW5lcmF0ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtwaGlTdGFydD0wXSAtIFRoZSBzdGFydGluZyBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3BoaUxlbmd0aD1NYXRoLlBJKjJdIC0gVGhlIHJhZGlhbiAoMCB0byAyUEkpIHJhbmdlIG9mIHRoZSBsYXRoZWQgc2VjdGlvbiAyUEkgaXMgYVxuXHQgKiBjbG9zZWQgbGF0aGUsIGxlc3MgdGhhbiAyUEkgaXMgYSBwb3J0aW9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBvaW50cyA9IFsgbmV3IFZlY3RvcjIoIDAsIC0wLjUgKSwgbmV3IFZlY3RvcjIoIDAuNSwgMCApLCBuZXcgVmVjdG9yMiggMCwgMC41ICkgXSwgc2VnbWVudHMgPSAxMiwgcGhpU3RhcnQgPSAwLCBwaGlMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnTGF0aGVHZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRwb2ludHM6IHBvaW50cyxcblx0XHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHNlZ21lbnRzID0gTWF0aC5mbG9vciggc2VnbWVudHMgKTtcblxuXHRcdC8vIGNsYW1wIHBoaUxlbmd0aCBzbyBpdCdzIGluIHJhbmdlIG9mIFsgMCwgMlBJIF1cblxuXHRcdHBoaUxlbmd0aCA9IGNsYW1wKCBwaGlMZW5ndGgsIDAsIE1hdGguUEkgKiAyICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblx0XHRjb25zdCBpbml0Tm9ybWFscyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGNvbnN0IGludmVyc2VTZWdtZW50cyA9IDEuMCAvIHNlZ21lbnRzO1xuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgY3VyTm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBwcmV2Tm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRsZXQgZHggPSAwO1xuXHRcdGxldCBkeSA9IDA7XG5cblx0XHQvLyBwcmUtY29tcHV0ZSBub3JtYWxzIGZvciBpbml0aWFsIFwibWVyaWRpYW5cIlxuXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9ICggcG9pbnRzLmxlbmd0aCAtIDEgKTsgaiArKyApIHtcblxuXHRcdFx0c3dpdGNoICggaiApIHtcblxuXHRcdFx0XHRjYXNlIDA6XHRcdFx0XHQvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciAxc3QgdmVydGV4IG9uIHBhdGhcblxuXHRcdFx0XHRcdGR4ID0gcG9pbnRzWyBqICsgMSBdLnggLSBwb2ludHNbIGogXS54O1xuXHRcdFx0XHRcdGR5ID0gcG9pbnRzWyBqICsgMSBdLnkgLSBwb2ludHNbIGogXS55O1xuXG5cdFx0XHRcdFx0bm9ybWFsLnggPSBkeSAqIDEuMDtcblx0XHRcdFx0XHRub3JtYWwueSA9IC0gZHg7XG5cdFx0XHRcdFx0bm9ybWFsLnogPSBkeSAqIDAuMDtcblxuXHRcdFx0XHRcdHByZXZOb3JtYWwuY29weSggbm9ybWFsICk7XG5cblx0XHRcdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0XHRpbml0Tm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICggcG9pbnRzLmxlbmd0aCAtIDEgKTpcdC8vIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGxhc3QgVmVydGV4IG9uIHBhdGhcblxuXHRcdFx0XHRcdGluaXROb3JtYWxzLnB1c2goIHByZXZOb3JtYWwueCwgcHJldk5vcm1hbC55LCBwcmV2Tm9ybWFsLnogKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XHRcdFx0Ly8gZGVmYXVsdCBoYW5kbGluZyBmb3IgYWxsIHZlcnRpY2VzIGluIGJldHdlZW5cblxuXHRcdFx0XHRcdGR4ID0gcG9pbnRzWyBqICsgMSBdLnggLSBwb2ludHNbIGogXS54O1xuXHRcdFx0XHRcdGR5ID0gcG9pbnRzWyBqICsgMSBdLnkgLSBwb2ludHNbIGogXS55O1xuXG5cdFx0XHRcdFx0bm9ybWFsLnggPSBkeSAqIDEuMDtcblx0XHRcdFx0XHRub3JtYWwueSA9IC0gZHg7XG5cdFx0XHRcdFx0bm9ybWFsLnogPSBkeSAqIDAuMDtcblxuXHRcdFx0XHRcdGN1ck5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblxuXHRcdFx0XHRcdG5vcm1hbC54ICs9IHByZXZOb3JtYWwueDtcblx0XHRcdFx0XHRub3JtYWwueSArPSBwcmV2Tm9ybWFsLnk7XG5cdFx0XHRcdFx0bm9ybWFsLnogKz0gcHJldk5vcm1hbC56O1xuXG5cdFx0XHRcdFx0bm9ybWFsLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRcdFx0aW5pdE5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdFx0cHJldk5vcm1hbC5jb3B5KCBjdXJOb3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIHV2cyBhbmQgbm9ybWFsc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBwaGkgPSBwaGlTdGFydCArIGkgKiBpbnZlcnNlU2VnbWVudHMgKiBwaGlMZW5ndGg7XG5cblx0XHRcdGNvbnN0IHNpbiA9IE1hdGguc2luKCBwaGkgKTtcblx0XHRcdGNvbnN0IGNvcyA9IE1hdGguY29zKCBwaGkgKTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9ICggcG9pbnRzLmxlbmd0aCAtIDEgKTsgaiArKyApIHtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHBvaW50c1sgaiBdLnggKiBzaW47XG5cdFx0XHRcdHZlcnRleC55ID0gcG9pbnRzWyBqIF0ueTtcblx0XHRcdFx0dmVydGV4LnogPSBwb2ludHNbIGogXS54ICogY29zO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2LnggPSBpIC8gc2VnbWVudHM7XG5cdFx0XHRcdHV2LnkgPSBqIC8gKCBwb2ludHMubGVuZ3RoIC0gMSApO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0Y29uc3QgeCA9IGluaXROb3JtYWxzWyAzICogaiArIDAgXSAqIHNpbjtcblx0XHRcdFx0Y29uc3QgeSA9IGluaXROb3JtYWxzWyAzICogaiArIDEgXTtcblx0XHRcdFx0Y29uc3QgeiA9IGluaXROb3JtYWxzWyAzICogaiArIDAgXSAqIGNvcztcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIHgsIHksIHogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8ICggcG9pbnRzLmxlbmd0aCAtIDEgKTsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCBiYXNlID0gaiArIGkgKiBwb2ludHMubGVuZ3RoO1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBiYXNlO1xuXHRcdFx0XHRjb25zdCBiID0gYmFzZSArIHBvaW50cy5sZW5ndGg7XG5cdFx0XHRcdGNvbnN0IGMgPSBiYXNlICsgcG9pbnRzLmxlbmd0aCArIDE7XG5cdFx0XHRcdGNvbnN0IGQgPSBiYXNlICsgMTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGMsIGQsIGIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtMYXRoZUdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgTGF0aGVHZW9tZXRyeSggZGF0YS5wb2ludHMsIGRhdGEuc2VnbWVudHMsIGRhdGEucGhpU3RhcnQsIGRhdGEucGhpTGVuZ3RoICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBnZW9tZXRyeSBjbGFzcyBmb3IgYSBjYXBzdWxlIHdpdGggZ2l2ZW4gcmFkaWkgYW5kIGhlaWdodC4gSXQgaXMgY29uc3RydWN0ZWQgdXNpbmcgYSBsYXRoZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQ2Fwc3VsZUdlb21ldHJ5KCAxLCAxLCA0LCA4ICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgwMGZmMDAgfSApO1xuICogY29uc3QgY2Fwc3VsZSA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggY2Fwc3VsZSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIExhdGhlR2VvbWV0cnlcbiAqL1xuY2xhc3MgQ2Fwc3VsZUdlb21ldHJ5IGV4dGVuZHMgTGF0aGVHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY2Fwc3VsZSBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9MV0gLSBSYWRpdXMgb2YgdGhlIGNhcHN1bGUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTFdIC0gTGVuZ3RoIG9mIHRoZSBtaWRkbGUgc2VjdGlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtjYXBTZWdtZW50cz00XSAtIE51bWJlciBvZiBjdXJ2ZSBzZWdtZW50cyB1c2VkIHRvIGJ1aWxkIHRoZSBjYXBzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGlhbFNlZ21lbnRzPThdIC0gTnVtYmVyIG9mIHNlZ21lbnRlZCBmYWNlcyBhcm91bmQgdGhlIGNpcmN1bWZlcmVuY2Ugb2YgdGhlIGNhcHN1bGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgbGVuZ3RoID0gMSwgY2FwU2VnbWVudHMgPSA0LCByYWRpYWxTZWdtZW50cyA9IDggKSB7XG5cblx0XHRjb25zdCBwYXRoID0gbmV3IFBhdGgoKTtcblx0XHRwYXRoLmFic2FyYyggMCwgLSBsZW5ndGggLyAyLCByYWRpdXMsIE1hdGguUEkgKiAxLjUsIDAgKTtcblx0XHRwYXRoLmFic2FyYyggMCwgbGVuZ3RoIC8gMiwgcmFkaXVzLCAwLCBNYXRoLlBJICogMC41ICk7XG5cblx0XHRzdXBlciggcGF0aC5nZXRQb2ludHMoIGNhcFNlZ21lbnRzICksIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2Fwc3VsZUdlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0bGVuZ3RoOiBsZW5ndGgsXG5cdFx0XHRjYXBTZWdtZW50czogY2FwU2VnbWVudHMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtDYXBzdWxlR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDYXBzdWxlR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmxlbmd0aCwgZGF0YS5jYXBTZWdtZW50cywgZGF0YS5yYWRpYWxTZWdtZW50cyApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgc2ltcGxlIHNoYXBlIG9mIEV1Y2xpZGVhbiBnZW9tZXRyeS4gSXQgaXMgY29uc3RydWN0ZWQgZnJvbSBhXG4gKiBudW1iZXIgb2YgdHJpYW5ndWxhciBzZWdtZW50cyB0aGF0IGFyZSBvcmllbnRlZCBhcm91bmQgYSBjZW50cmFsIHBvaW50IGFuZFxuICogZXh0ZW5kIGFzIGZhciBvdXQgYXMgYSBnaXZlbiByYWRpdXMuIEl0IGlzIGJ1aWx0IGNvdW50ZXItY2xvY2t3aXNlIGZyb20gYVxuICogc3RhcnQgYW5nbGUgYW5kIGEgZ2l2ZW4gY2VudHJhbCBhbmdsZS4gSXQgY2FuIGFsc28gYmUgdXNlZCB0byBjcmVhdGVcbiAqIHJlZ3VsYXIgcG9seWdvbnMsIHdoZXJlIHRoZSBudW1iZXIgb2Ygc2VnbWVudHMgZGV0ZXJtaW5lcyB0aGUgbnVtYmVyIG9mXG4gKiBzaWRlcy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQ2lyY2xlR2VvbWV0cnkoIDUsIDMyICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuICogY29uc3QgY2lyY2xlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogc2NlbmUuYWRkKCBjaXJjbGUgKVxuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckdlb21ldHJ5XG4gKi9cbmNsYXNzIENpcmNsZUdlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNpcmNsZSBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9MV0gLSBSYWRpdXMgb2YgdGhlIGNpcmNsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzZWdtZW50cz0zMl0gLSBOdW1iZXIgb2Ygc2VnbWVudHMgKHRyaWFuZ2xlcyksIG1pbmltdW0gPSBgM2AuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdGhldGFTdGFydD0wXSAtIFN0YXJ0IGFuZ2xlIGZvciBmaXJzdCBzZWdtZW50IGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdGhldGFMZW5ndGg9TWF0aC5QSSoyXSAtIFRoZSBjZW50cmFsIGFuZ2xlLCBvZnRlbiBjYWxsZWQgdGhldGEsXG5cdCAqIG9mIHRoZSBjaXJjdWxhciBzZWN0b3IgaW4gcmFkaWFucy4gVGhlIGRlZmF1bHQgdmFsdWUgcmVzdWx0cyBpbiBhIGNvbXBsZXRlIGNpcmNsZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBzZWdtZW50cyA9IDMyLCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ2lyY2xlR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW5cblx0XHQgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvblxuXHRcdCAqIGFmdGVyIGluc3RhbnRpYXRpb24gZG9lcyBub3QgY2hhbmdlIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHNlZ21lbnRzID0gTWF0aC5tYXgoIDMsIHNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IHV2ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdC8vIGNlbnRlciBwb2ludFxuXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXHRcdHV2cy5wdXNoKCAwLjUsIDAuNSApO1xuXG5cdFx0Zm9yICggbGV0IHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcyArKywgaSArPSAzICkge1xuXG5cdFx0XHRjb25zdCBzZWdtZW50ID0gdGhldGFTdGFydCArIHMgLyBzZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyggc2VnbWVudCApO1xuXHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0Ly8gdXZzXG5cblx0XHRcdHV2LnggPSAoIHZlcnRpY2VzWyBpIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXHRcdFx0dXYueSA9ICggdmVydGljZXNbIGkgKyAxIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGksIGkgKyAxLCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSB0aGUgZ2l2ZW5cblx0ICogSlNPTiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZ2VvbWV0cnkuXG5cdCAqIEByZXR1cm4ge0NpcmNsZUdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgQ2lyY2xlR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLnNlZ21lbnRzLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGdlb21ldHJ5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgYSBjeWxpbmRlci5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSggNSwgNSwgMjAsIDMyICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuICogY29uc3QgY3lsaW5kZXIgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIGN5bGluZGVyICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgQ3lsaW5kZXJHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjeWxpbmRlciBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXNUb3A9MV0gLSBSYWRpdXMgb2YgdGhlIGN5bGluZGVyIGF0IHRoZSB0b3AuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXVzQm90dG9tPTFdIC0gUmFkaXVzIG9mIHRoZSBjeWxpbmRlciBhdCB0aGUgYm90dG9tLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIEhlaWdodCBvZiB0aGUgY3lsaW5kZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaWFsU2VnbWVudHM9MzJdIC0gTnVtYmVyIG9mIHNlZ21lbnRlZCBmYWNlcyBhcm91bmQgdGhlIGNpcmN1bWZlcmVuY2Ugb2YgdGhlIGN5bGluZGVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodFNlZ21lbnRzPTFdIC0gTnVtYmVyIG9mIHJvd3Mgb2YgZmFjZXMgYWxvbmcgdGhlIGhlaWdodCBvZiB0aGUgY3lsaW5kZXIuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wZW5FbmRlZD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBiYXNlIG9mIHRoZSBjeWxpbmRlciBpcyBvcGVuIG9yIGNhcHBlZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0aGV0YVN0YXJ0PTBdIC0gU3RhcnQgYW5nbGUgZm9yIGZpcnN0IHNlZ21lbnQsIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdGhldGFMZW5ndGg9TWF0aC5QSSoyXSAtIFRoZSBjZW50cmFsIGFuZ2xlLCBvZnRlbiBjYWxsZWQgdGhldGEsIG9mIHRoZSBjaXJjdWxhciBzZWN0b3IsIGluIHJhZGlhbnMuXG5cdCAqIFRoZSBkZWZhdWx0IHZhbHVlIHJlc3VsdHMgaW4gYSBjb21wbGV0ZSBjeWxpbmRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByYWRpdXNUb3AgPSAxLCByYWRpdXNCb3R0b20gPSAxLCBoZWlnaHQgPSAxLCByYWRpYWxTZWdtZW50cyA9IDMyLCBoZWlnaHRTZWdtZW50cyA9IDEsIG9wZW5FbmRlZCA9IGZhbHNlLCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJHZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcblx0XHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0cmFkaWFsU2VnbWVudHMgPSBNYXRoLmZsb29yKCByYWRpYWxTZWdtZW50cyApO1xuXHRcdGhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCBpbmRleCA9IDA7XG5cdFx0Y29uc3QgaW5kZXhBcnJheSA9IFtdO1xuXHRcdGNvbnN0IGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuXHRcdGxldCBncm91cFN0YXJ0ID0gMDtcblxuXHRcdC8vIGdlbmVyYXRlIGdlb21ldHJ5XG5cblx0XHRnZW5lcmF0ZVRvcnNvKCk7XG5cblx0XHRpZiAoIG9wZW5FbmRlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggcmFkaXVzVG9wID4gMCApIGdlbmVyYXRlQ2FwKCB0cnVlICk7XG5cdFx0XHRpZiAoIHJhZGl1c0JvdHRvbSA+IDAgKSBnZW5lcmF0ZUNhcCggZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVUb3JzbygpIHtcblxuXHRcdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGxldCBncm91cENvdW50ID0gMDtcblxuXHRcdFx0Ly8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWxcblx0XHRcdGNvbnN0IHNsb3BlID0gKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSAvIGhlaWdodDtcblxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0XHRmb3IgKCBsZXQgeSA9IDA7IHkgPD0gaGVpZ2h0U2VnbWVudHM7IHkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5kZXhSb3cgPSBbXTtcblxuXHRcdFx0XHRjb25zdCB2ID0geSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgcmFkaXVzIG9mIHRoZSBjdXJyZW50IHJvd1xuXG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IHYgKiAoIHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCApICsgcmFkaXVzVG9wO1xuXG5cdFx0XHRcdGZvciAoIGxldCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0XHRjb25zdCB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XG5cblx0XHRcdFx0XHRjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXHRcdFx0XHRcdGNvbnN0IGNvc1RoZXRhID0gTWF0aC5jb3MoIHRoZXRhICk7XG5cblx0XHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHRcdFx0dmVydGV4LnkgPSAtIHYgKiBoZWlnaHQgKyBoYWxmSGVpZ2h0O1xuXHRcdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdFx0XHRub3JtYWwuc2V0KCBzaW5UaGV0YSwgc2xvcGUsIGNvc1RoZXRhICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdFx0dXZzLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHRcdFx0XHQvLyBzYXZlIGluZGV4IG9mIHZlcnRleCBpbiByZXNwZWN0aXZlIHJvd1xuXG5cdFx0XHRcdFx0aW5kZXhSb3cucHVzaCggaW5kZXggKysgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbm93IHNhdmUgdmVydGljZXMgb2YgdGhlIHJvdyBpbiBvdXIgaW5kZXggYXJyYXlcblxuXHRcdFx0XHRpbmRleEFycmF5LnB1c2goIGluZGV4Um93ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgeSA9IDA7IHkgPCBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0XHRcdC8vIHdlIHVzZSB0aGUgaW5kZXggYXJyYXkgdG8gYWNjZXNzIHRoZSBjb3JyZWN0IGluZGljZXNcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSBpbmRleEFycmF5WyB5IF1bIHggXTtcblx0XHRcdFx0XHRjb25zdCBiID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCBdO1xuXHRcdFx0XHRcdGNvbnN0IGMgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4ICsgMSBdO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSBpbmRleEFycmF5WyB5IF1bIHggKyAxIF07XG5cblx0XHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdFx0aWYgKCByYWRpdXNUb3AgPiAwIHx8IHkgIT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRcdFx0Z3JvdXBDb3VudCArPSAzO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCByYWRpdXNCb3R0b20gPiAwIHx8IHkgIT09IGhlaWdodFNlZ21lbnRzIC0gMSApIHtcblxuXHRcdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cdFx0XHRcdFx0XHRncm91cENvdW50ICs9IDM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBncm91cFN0YXJ0LCBncm91cENvdW50LCAwICk7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZUNhcCggdG9wICkge1xuXG5cdFx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2VudGVyIHZlcnRleFxuXHRcdFx0Y29uc3QgY2VudGVySW5kZXhTdGFydCA9IGluZGV4O1xuXG5cdFx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRsZXQgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHRcdGNvbnN0IHJhZGl1cyA9ICggdG9wID09PSB0cnVlICkgPyByYWRpdXNUb3AgOiByYWRpdXNCb3R0b207XG5cdFx0XHRjb25zdCBzaWduID0gKCB0b3AgPT09IHRydWUgKSA/IDEgOiAtMTtcblxuXHRcdFx0Ly8gZmlyc3Qgd2UgZ2VuZXJhdGUgdGhlIGNlbnRlciB2ZXJ0ZXggZGF0YSBvZiB0aGUgY2FwLlxuXHRcdFx0Ly8gYmVjYXVzZSB0aGUgZ2VvbWV0cnkgbmVlZHMgb25lIHNldCBvZiB1dnMgcGVyIGZhY2UsXG5cdFx0XHQvLyB3ZSBtdXN0IGdlbmVyYXRlIGEgY2VudGVyIHZlcnRleCBwZXIgZmFjZS9zZWdtZW50XG5cblx0XHRcdGZvciAoIGxldCB4ID0gMTsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCBoYWxmSGVpZ2h0ICogc2lnbiwgMCApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIDAuNSwgMC41ICk7XG5cblx0XHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcblxuXHRcdFx0XHRpbmRleCArKztcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBjZW50ZXIgdmVydGV4XG5cdFx0XHRjb25zdCBjZW50ZXJJbmRleEVuZCA9IGluZGV4O1xuXG5cdFx0XHQvLyBub3cgd2UgZ2VuZXJhdGUgdGhlIHN1cnJvdW5kaW5nIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdFx0Zm9yICggbGV0IHggPSAwOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XG5cdFx0XHRcdGNvbnN0IHRoZXRhID0gdSAqIHRoZXRhTGVuZ3RoICsgdGhldGFTdGFydDtcblxuXHRcdFx0XHRjb25zdCBjb3NUaGV0YSA9IE1hdGguY29zKCB0aGV0YSApO1xuXHRcdFx0XHRjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHRcdHZlcnRleC55ID0gaGFsZkhlaWdodCAqIHNpZ247XG5cdFx0XHRcdHZlcnRleC56ID0gcmFkaXVzICogY29zVGhldGE7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIHNpZ24sIDAgKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2LnggPSAoIGNvc1RoZXRhICogMC41ICkgKyAwLjU7XG5cdFx0XHRcdHV2LnkgPSAoIHNpblRoZXRhICogMC41ICogc2lnbiApICsgMC41O1xuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdC8vIGluY3JlYXNlIGluZGV4XG5cblx0XHRcdFx0aW5kZXggKys7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjID0gY2VudGVySW5kZXhTdGFydCArIHg7XG5cdFx0XHRcdGNvbnN0IGkgPSBjZW50ZXJJbmRleEVuZCArIHg7XG5cblx0XHRcdFx0aWYgKCB0b3AgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBmYWNlIHRvcFxuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBpLCBpICsgMSwgYyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBmYWNlIGJvdHRvbVxuXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKCBpICsgMSwgaSwgYyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRncm91cENvdW50ICs9IDM7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gYWRkIGEgZ3JvdXAgdG8gdGhlIGdlb21ldHJ5LiB0aGlzIHdpbGwgZW5zdXJlIG11bHRpIG1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIHRvcCA9PT0gdHJ1ZSA/IDEgOiAyICk7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtDeWxpbmRlckdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgQ3lsaW5kZXJHZW9tZXRyeSggZGF0YS5yYWRpdXNUb3AsIGRhdGEucmFkaXVzQm90dG9tLCBkYXRhLmhlaWdodCwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5vcGVuRW5kZWQsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgZ2VvbWV0cnkgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIGNvbmUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkNvbmVHZW9tZXRyeSggNSwgMjAsIDMyICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuICogY29uc3QgY29uZSA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogc2NlbmUuYWRkKCBjb25lICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQ3lsaW5kZXJHZW9tZXRyeVxuICovXG5jbGFzcyBDb25lR2VvbWV0cnkgZXh0ZW5kcyBDeWxpbmRlckdlb21ldHJ5IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjb25lIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0xXSAtIFJhZGl1cyBvZiB0aGUgY29uZSBiYXNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIEhlaWdodCBvZiB0aGUgY29uZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpYWxTZWdtZW50cz0zMl0gLSBOdW1iZXIgb2Ygc2VnbWVudGVkIGZhY2VzIGFyb3VuZCB0aGUgY2lyY3VtZmVyZW5jZSBvZiB0aGUgY29uZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRTZWdtZW50cz0xXSAtIE51bWJlciBvZiByb3dzIG9mIGZhY2VzIGFsb25nIHRoZSBoZWlnaHQgb2YgdGhlIGNvbmUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wZW5FbmRlZD1mYWxzZV0gLSBXaGV0aGVyIHRoZSBiYXNlIG9mIHRoZSBjb25lIGlzIG9wZW4gb3IgY2FwcGVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3RoZXRhU3RhcnQ9MF0gLSBTdGFydCBhbmdsZSBmb3IgZmlyc3Qgc2VnbWVudCwgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0aGV0YUxlbmd0aD1NYXRoLlBJKjJdIC0gVGhlIGNlbnRyYWwgYW5nbGUsIG9mdGVuIGNhbGxlZCB0aGV0YSwgb2YgdGhlIGNpcmN1bGFyIHNlY3RvciwgaW4gcmFkaWFucy5cblx0ICogVGhlIGRlZmF1bHQgdmFsdWUgcmVzdWx0cyBpbiBhIGNvbXBsZXRlIGNvbmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgaGVpZ2h0ID0gMSwgcmFkaWFsU2VnbWVudHMgPSAzMiwgaGVpZ2h0U2VnbWVudHMgPSAxLCBvcGVuRW5kZWQgPSBmYWxzZSwgdGhldGFTdGFydCA9IDAsIHRoZXRhTGVuZ3RoID0gTWF0aC5QSSAqIDIgKSB7XG5cblx0XHRzdXBlciggMCwgcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NvbmVHZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdFx0b3BlbkVuZGVkOiBvcGVuRW5kZWQsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtDb25lR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDb25lR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmhlaWdodCwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS5oZWlnaHRTZWdtZW50cywgZGF0YS5vcGVuRW5kZWQsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgcG9seWhlZHJvbiBpcyBhIHNvbGlkIGluIHRocmVlIGRpbWVuc2lvbnMgd2l0aCBmbGF0IGZhY2VzLiBUaGlzIGNsYXNzXG4gKiB3aWxsIHRha2UgYW4gYXJyYXkgb2YgdmVydGljZXMsIHByb2plY3QgdGhlbSBvbnRvIGEgc3BoZXJlLCBhbmQgdGhlblxuICogZGl2aWRlIHRoZW0gdXAgdG8gdGhlIGRlc2lyZWQgbGV2ZWwgb2YgZGV0YWlsLlxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJHZW9tZXRyeVxuICovXG5jbGFzcyBQb2x5aGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcG9seWhlZHJvbiBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbdmVydGljZXNdIC0gQSBmbGF0IGFycmF5IG9mIHZlcnRpY2VzIGRlc2NyaWJpbmcgdGhlIGJhc2Ugc2hhcGUuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2luZGljZXNdIC0gQSBmbGF0IGFycmF5IG9mIGluZGljZXMgZGVzY3JpYmluZyB0aGUgYmFzZSBzaGFwZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9MV0gLSBUaGUgcmFkaXVzIG9mIHRoZSBzaGFwZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWw9MF0gLSBIb3cgbWFueSBsZXZlbHMgdG8gc3ViZGl2aWRlIHRoZSBnZW9tZXRyeS4gVGhlIG1vcmUgZGV0YWlsLCB0aGUgc21vb3RoZXIgdGhlIHNoYXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZlcnRpY2VzID0gW10sIGluZGljZXMgPSBbXSwgcmFkaXVzID0gMSwgZGV0YWlsID0gMCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkdlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHZlcnRpY2VzOiB2ZXJ0aWNlcyxcblx0XHRcdGluZGljZXM6IGluZGljZXMsXG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHRcdC8vIGRlZmF1bHQgYnVmZmVyIGRhdGFcblxuXHRcdGNvbnN0IHZlcnRleEJ1ZmZlciA9IFtdO1xuXHRcdGNvbnN0IHV2QnVmZmVyID0gW107XG5cblx0XHQvLyB0aGUgc3ViZGl2aXNpb24gY3JlYXRlcyB0aGUgdmVydGV4IGJ1ZmZlciBkYXRhXG5cblx0XHRzdWJkaXZpZGUoIGRldGFpbCApO1xuXG5cdFx0Ly8gYWxsIHZlcnRpY2VzIHNob3VsZCBsaWUgb24gYSBjb25jZXB0dWFsIHNwaGVyZSB3aXRoIGEgZ2l2ZW4gcmFkaXVzXG5cblx0XHRhcHBseVJhZGl1cyggcmFkaXVzICk7XG5cblx0XHQvLyBmaW5hbGx5LCBjcmVhdGUgdGhlIHV2IGRhdGFcblxuXHRcdGdlbmVyYXRlVVZzKCk7XG5cblx0XHQvLyBidWlsZCBub24taW5kZXhlZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0ZXhCdWZmZXIsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlci5zbGljZSgpLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QnVmZmVyLCAyICkgKTtcblxuXHRcdGlmICggZGV0YWlsID09PSAwICkge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7IC8vIGZsYXQgbm9ybWFsc1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7IC8vIHNtb290aCBub3JtYWxzXG5cblx0XHR9XG5cblx0XHQvLyBoZWxwZXIgZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBzdWJkaXZpZGUoIGRldGFpbCApIHtcblxuXHRcdFx0Y29uc3QgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIGZhY2VzIGFuZCBhcHBseSBhIHN1YmRpdmlzaW9uIHdpdGggdGhlIGdpdmVuIGRldGFpbCB2YWx1ZVxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdC8vIGdldCB0aGUgdmVydGljZXMgb2YgdGhlIGZhY2VcblxuXHRcdFx0XHRnZXRWZXJ0ZXhCeUluZGV4KCBpbmRpY2VzWyBpICsgMCBdLCBhICk7XG5cdFx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdFx0Z2V0VmVydGV4QnlJbmRleCggaW5kaWNlc1sgaSArIDIgXSwgYyApO1xuXG5cdFx0XHRcdC8vIHBlcmZvcm0gc3ViZGl2aXNpb25cblxuXHRcdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0XHRjb25zdCBjb2xzID0gZGV0YWlsICsgMTtcblxuXHRcdFx0Ly8gd2UgdXNlIHRoaXMgbXVsdGlkaW1lbnNpb25hbCBhcnJheSBhcyBhIGRhdGEgc3RydWN0dXJlIGZvciBjcmVhdGluZyB0aGUgc3ViZGl2aXNpb25cblxuXHRcdFx0Y29uc3QgdiA9IFtdO1xuXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBmb3IgdGhpcyBzdWJkaXZpc2lvblxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gY29sczsgaSArKyApIHtcblxuXHRcdFx0XHR2WyBpIF0gPSBbXTtcblxuXHRcdFx0XHRjb25zdCBhaiA9IGEuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXHRcdFx0XHRjb25zdCBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHRcdGNvbnN0IHJvd3MgPSBjb2xzIC0gaTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcm93czsgaiArKyApIHtcblxuXHRcdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0XHR2WyBpIF1bIGogXSA9IGFqO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSBmYWNlc1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb2xzOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IDIgKiAoIGNvbHMgLSBpICkgLSAxOyBqICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0XHRpZiAoIGogJSAyID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSBdWyBrIF0gKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdFx0cHVzaFZlcnRleCggdlsgaSArIDEgXVsgayBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhcHBseVJhZGl1cyggcmFkaXVzICkge1xuXG5cdFx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpdGVyYXRlIG92ZXIgdGhlIGVudGlyZSBidWZmZXIgYW5kIGFwcGx5IHRoZSByYWRpdXMgdG8gZWFjaCB2ZXJ0ZXhcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCByYWRpdXMgKTtcblxuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0gPSB2ZXJ0ZXgueDtcblx0XHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMSBdID0gdmVydGV4Lnk7XG5cdFx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlclsgaSArIDEgXTtcblx0XHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdFx0Y29uc3QgdSA9IGF6aW11dGgoIHZlcnRleCApIC8gMiAvIE1hdGguUEkgKyAwLjU7XG5cdFx0XHRcdGNvbnN0IHYgPSBpbmNsaW5hdGlvbiggdmVydGV4ICkgLyBNYXRoLlBJICsgMC41O1xuXHRcdFx0XHR1dkJ1ZmZlci5wdXNoKCB1LCAxIC0gdiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvcnJlY3RVVnMoKTtcblxuXHRcdFx0Y29ycmVjdFNlYW0oKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvcnJlY3RTZWFtKCkge1xuXG5cdFx0XHQvLyBoYW5kbGUgY2FzZSB3aGVuIGZhY2Ugc3RyYWRkbGVzIHRoZSBzZWFtLCBzZWUgIzMyNjlcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdXZCdWZmZXIubGVuZ3RoOyBpICs9IDYgKSB7XG5cblx0XHRcdFx0Ly8gdXYgZGF0YSBvZiBhIHNpbmdsZSBmYWNlXG5cblx0XHRcdFx0Y29uc3QgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdFx0Y29uc3QgeDEgPSB1dkJ1ZmZlclsgaSArIDIgXTtcblx0XHRcdFx0Y29uc3QgeDIgPSB1dkJ1ZmZlclsgaSArIDQgXTtcblxuXHRcdFx0XHRjb25zdCBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xuXHRcdFx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiggeDAsIHgxLCB4MiApO1xuXG5cdFx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcblxuXHRcdFx0XHRpZiAoIG1heCA+IDAuOSAmJiBtaW4gPCAwLjEgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHgwIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAwIF0gKz0gMTtcblx0XHRcdFx0XHRpZiAoIHgxIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTtcblx0XHRcdFx0XHRpZiAoIHgyIDwgMC4yICkgdXZCdWZmZXJbIGkgKyA0IF0gKz0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHB1c2hWZXJ0ZXgoIHZlcnRleCApIHtcblxuXHRcdFx0dmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldFZlcnRleEJ5SW5kZXgoIGluZGV4LCB2ZXJ0ZXggKSB7XG5cblx0XHRcdGNvbnN0IHN0cmlkZSA9IGluZGV4ICogMztcblxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMCBdO1xuXHRcdFx0dmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMiBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcblxuXHRcdFx0Y29uc3QgYSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdGNvbnN0IGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRjb25zdCBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGNvbnN0IHV2QSA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0XHRjb25zdCB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0Y29uc3QgdXZDID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xuXG5cdFx0XHRcdGEuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAwIF0sIHZlcnRleEJ1ZmZlclsgaSArIDEgXSwgdmVydGV4QnVmZmVyWyBpICsgMiBdICk7XG5cdFx0XHRcdGIuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyAzIF0sIHZlcnRleEJ1ZmZlclsgaSArIDQgXSwgdmVydGV4QnVmZmVyWyBpICsgNSBdICk7XG5cdFx0XHRcdGMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7XG5cblx0XHRcdFx0dXZBLnNldCggdXZCdWZmZXJbIGogKyAwIF0sIHV2QnVmZmVyWyBqICsgMSBdICk7XG5cdFx0XHRcdHV2Qi5zZXQoIHV2QnVmZmVyWyBqICsgMiBdLCB1dkJ1ZmZlclsgaiArIDMgXSApO1xuXHRcdFx0XHR1dkMuc2V0KCB1dkJ1ZmZlclsgaiArIDQgXSwgdXZCdWZmZXJbIGogKyA1IF0gKTtcblxuXHRcdFx0XHRjZW50cm9pZC5jb3B5KCBhICkuYWRkKCBiICkuYWRkKCBjICkuZGl2aWRlU2NhbGFyKCAzICk7XG5cblx0XHRcdFx0Y29uc3QgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcblxuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QSwgaiArIDAsIGEsIGF6aSApO1xuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QiwgaiArIDIsIGIsIGF6aSApO1xuXHRcdFx0XHRjb3JyZWN0VVYoIHV2QywgaiArIDQsIGMsIGF6aSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb3JyZWN0VVYoIHV2LCBzdHJpZGUsIHZlY3RvciwgYXppbXV0aCApIHtcblxuXHRcdFx0aWYgKCAoIGF6aW11dGggPCAwICkgJiYgKCB1di54ID09PSAxICkgKSB7XG5cblx0XHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gdXYueCAtIDE7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAoIHZlY3Rvci54ID09PSAwICkgJiYgKCB2ZWN0b3IueiA9PT0gMCApICkge1xuXG5cdFx0XHRcdHV2QnVmZmVyWyBzdHJpZGUgXSA9IGF6aW11dGggLyAyIC8gTWF0aC5QSSArIDAuNTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQW5nbGUgYXJvdW5kIHRoZSBZIGF4aXMsIGNvdW50ZXItY2xvY2t3aXNlIHdoZW4gbG9va2luZyBmcm9tIGFib3ZlLlxuXG5cdFx0ZnVuY3Rpb24gYXppbXV0aCggdmVjdG9yICkge1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5hdGFuMiggdmVjdG9yLnosIC0gdmVjdG9yLnggKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLlxuXG5cdFx0ZnVuY3Rpb24gaW5jbGluYXRpb24oIHZlY3RvciApIHtcblxuXHRcdFx0cmV0dXJuIE1hdGguYXRhbjIoIC0gdmVjdG9yLnksIE1hdGguc3FydCggKCB2ZWN0b3IueCAqIHZlY3Rvci54ICkgKyAoIHZlY3Rvci56ICogdmVjdG9yLnogKSApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtQb2x5aGVkcm9uR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBQb2x5aGVkcm9uR2VvbWV0cnkoIGRhdGEudmVydGljZXMsIGRhdGEuaW5kaWNlcywgZGF0YS5yYWRpdXMsIGRhdGEuZGV0YWlscyApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgZ2VvbWV0cnkgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIGRvZGVjYWhlZHJvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuRG9kZWNhaGVkcm9uR2VvbWV0cnkoKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmYwMCB9ICk7XG4gKiBjb25zdCBkb2RlY2FoZWRyb24gPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIGRvZGVjYWhlZHJvbiApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIFBvbHloZWRyb25HZW9tZXRyeVxuICovXG5jbGFzcyBEb2RlY2FoZWRyb25HZW9tZXRyeSBleHRlbmRzIFBvbHloZWRyb25HZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZG9kZWNhaGVkcm9uIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0xXSAtIFJhZGl1cyBvZiB0aGUgZG9kZWNhaGVkcm9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RldGFpbD0wXSAtIFNldHRpbmcgdGhpcyB0byBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBgMGAgYWRkcyB2ZXJ0aWNlcyBtYWtpbmcgaXQgbm8gbG9uZ2VyIGEgZG9kZWNhaGVkcm9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRjb25zdCB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5cdFx0Y29uc3QgciA9IDEgLyB0O1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cblx0XHRcdC8vICjCsTEsIMKxMSwgwrExKVxuXHRcdFx0LTEsIC0xLCAtMSxcdC0xLCAtMSwgMSxcblx0XHRcdC0xLCAxLCAtMSwgLTEsIDEsIDEsXG5cdFx0XHQxLCAtMSwgLTEsIDEsIC0xLCAxLFxuXHRcdFx0MSwgMSwgLTEsIDEsIDEsIDEsXG5cblx0XHRcdC8vICgwLCDCsTEvz4YsIMKxz4YpXG5cdFx0XHQwLCAtIHIsIC0gdCwgMCwgLSByLCB0LFxuXHRcdFx0MCwgciwgLSB0LCAwLCByLCB0LFxuXG5cdFx0XHQvLyAowrExL8+GLCDCsc+GLCAwKVxuXHRcdFx0LSByLCAtIHQsIDAsIC0gciwgdCwgMCxcblx0XHRcdHIsIC0gdCwgMCwgciwgdCwgMCxcblxuXHRcdFx0Ly8gKMKxz4YsIDAsIMKxMS/Philcblx0XHRcdC0gdCwgMCwgLSByLCB0LCAwLCAtIHIsXG5cdFx0XHQtIHQsIDAsIHIsIHQsIDAsIHJcblx0XHRdO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcblx0XHRcdDMsIDExLCA3LCBcdDMsIDcsIDE1LCBcdDMsIDE1LCAxMyxcblx0XHRcdDcsIDE5LCAxNywgXHQ3LCAxNywgNiwgXHQ3LCA2LCAxNSxcblx0XHRcdDE3LCA0LCA4LCBcdDE3LCA4LCAxMCwgXHQxNywgMTAsIDYsXG5cdFx0XHQ4LCAwLCAxNiwgXHQ4LCAxNiwgMiwgXHQ4LCAyLCAxMCxcblx0XHRcdDAsIDEyLCAxLCBcdDAsIDEsIDE4LCBcdDAsIDE4LCAxNixcblx0XHRcdDYsIDEwLCAyLCBcdDYsIDIsIDEzLCBcdDYsIDEzLCAxNSxcblx0XHRcdDIsIDE2LCAxOCwgXHQyLCAxOCwgMywgXHQyLCAzLCAxMyxcblx0XHRcdDE4LCAxLCA5LCBcdDE4LCA5LCAxMSwgXHQxOCwgMTEsIDMsXG5cdFx0XHQ0LCAxNCwgMTIsIFx0NCwgMTIsIDAsIFx0NCwgMCwgOCxcblx0XHRcdDExLCA5LCA1LCBcdDExLCA1LCAxOSwgXHQxMSwgMTksIDcsXG5cdFx0XHQxOSwgNSwgMTQsIFx0MTksIDE0LCA0LCBcdDE5LCA0LCAxNyxcblx0XHRcdDEsIDEyLCAxNCwgXHQxLCAxNCwgNSwgXHQxLCA1LCA5XG5cdFx0XTtcblxuXHRcdHN1cGVyKCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdEb2RlY2FoZWRyb25HZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtEb2RlY2FoZWRyb25HZW9tZXRyeX0gQSBuZXcgaW5zdGFuY2UuXG5cdCAqL1xuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IERvZGVjYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3YwID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3YxJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbm9ybWFsID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3RyaWFuZ2xlID0gLypAX19QVVJFX18qLyBuZXcgVHJpYW5nbGUoKTtcblxuLyoqXG4gKiBDYW4gYmUgdXNlZCBhcyBhIGhlbHBlciBvYmplY3QgdG8gdmlldyB0aGUgZWRnZXMgb2YgYSBnZW9tZXRyeS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoKTtcbiAqIGNvbnN0IGVkZ2VzID0gbmV3IFRIUkVFLkVkZ2VzR2VvbWV0cnkoIGdlb21ldHJ5ICk7XG4gKiBjb25zdCBsaW5lID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyggZWRnZXMgKTtcbiAqIHNjZW5lLmFkZCggbGluZSApO1xuICogYGBgXG4gKlxuICogTm90ZTogSXQgaXMgbm90IHlldCBwb3NzaWJsZSB0byBzZXJpYWxpemUvZGVzZXJpYWxpemUgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MuXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckdlb21ldHJ5XG4gKi9cbmNsYXNzIEVkZ2VzR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZWRnZXMgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0J1ZmZlckdlb21ldHJ5fSBbZ2VvbWV0cnk9bnVsbF0gLSBUaGUgZ2VvbWV0cnkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdGhyZXNob2xkQW5nbGU9MV0gLSBBbiBlZGdlIGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhlIGFuZ2xlIChpbiBkZWdyZWVzKVxuXHQgKiBiZXR3ZWVuIHRoZSBmYWNlIG5vcm1hbHMgb2YgdGhlIGFkam9pbmluZyBmYWNlcyBleGNlZWRzIHRoaXMgdmFsdWUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsLCB0aHJlc2hvbGRBbmdsZSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0VkZ2VzR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW5cblx0XHQgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvblxuXHRcdCAqIGFmdGVyIGluc3RhbnRpYXRpb24gZG9lcyBub3QgY2hhbmdlIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0dGhyZXNob2xkQW5nbGU6IHRocmVzaG9sZEFuZ2xlXG5cdFx0fTtcblxuXHRcdGlmICggZ2VvbWV0cnkgIT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnN0IHByZWNpc2lvblBvaW50cyA9IDQ7XG5cdFx0XHRjb25zdCBwcmVjaXNpb24gPSBNYXRoLnBvdyggMTAsIHByZWNpc2lvblBvaW50cyApO1xuXHRcdFx0Y29uc3QgdGhyZXNob2xkRG90ID0gTWF0aC5jb3MoIERFRzJSQUQgKiB0aHJlc2hvbGRBbmdsZSApO1xuXG5cdFx0XHRjb25zdCBpbmRleEF0dHIgPSBnZW9tZXRyeS5nZXRJbmRleCgpO1xuXHRcdFx0Y29uc3QgcG9zaXRpb25BdHRyID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cdFx0XHRjb25zdCBpbmRleENvdW50ID0gaW5kZXhBdHRyID8gaW5kZXhBdHRyLmNvdW50IDogcG9zaXRpb25BdHRyLmNvdW50O1xuXG5cdFx0XHRjb25zdCBpbmRleEFyciA9IFsgMCwgMCwgMCBdO1xuXHRcdFx0Y29uc3QgdmVydEtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblx0XHRcdGNvbnN0IGhhc2hlcyA9IG5ldyBBcnJheSggMyApO1xuXG5cdFx0XHRjb25zdCBlZGdlRGF0YSA9IHt9O1xuXHRcdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGluZGV4Q291bnQ7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRpZiAoIGluZGV4QXR0ciApIHtcblxuXHRcdFx0XHRcdGluZGV4QXJyWyAwIF0gPSBpbmRleEF0dHIuZ2V0WCggaSApO1xuXHRcdFx0XHRcdGluZGV4QXJyWyAxIF0gPSBpbmRleEF0dHIuZ2V0WCggaSArIDEgKTtcblx0XHRcdFx0XHRpbmRleEFyclsgMiBdID0gaW5kZXhBdHRyLmdldFgoIGkgKyAyICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGluZGV4QXJyWyAwIF0gPSBpO1xuXHRcdFx0XHRcdGluZGV4QXJyWyAxIF0gPSBpICsgMTtcblx0XHRcdFx0XHRpbmRleEFyclsgMiBdID0gaSArIDI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHsgYSwgYiwgYyB9ID0gX3RyaWFuZ2xlO1xuXHRcdFx0XHRhLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXhBcnJbIDAgXSApO1xuXHRcdFx0XHRiLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXhBcnJbIDEgXSApO1xuXHRcdFx0XHRjLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0ciwgaW5kZXhBcnJbIDIgXSApO1xuXHRcdFx0XHRfdHJpYW5nbGUuZ2V0Tm9ybWFsKCBfbm9ybWFsICk7XG5cblx0XHRcdFx0Ly8gY3JlYXRlIGhhc2hlcyBmb3IgdGhlIGVkZ2UgZnJvbSB0aGUgdmVydGljZXNcblx0XHRcdFx0aGFzaGVzWyAwIF0gPSBgJHsgTWF0aC5yb3VuZCggYS54ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBhLnkgKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGEueiAqIHByZWNpc2lvbiApIH1gO1xuXHRcdFx0XHRoYXNoZXNbIDEgXSA9IGAkeyBNYXRoLnJvdW5kKCBiLnggKiBwcmVjaXNpb24gKSB9LCR7IE1hdGgucm91bmQoIGIueSAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYi56ICogcHJlY2lzaW9uICkgfWA7XG5cdFx0XHRcdGhhc2hlc1sgMiBdID0gYCR7IE1hdGgucm91bmQoIGMueCAqIHByZWNpc2lvbiApIH0sJHsgTWF0aC5yb3VuZCggYy55ICogcHJlY2lzaW9uICkgfSwkeyBNYXRoLnJvdW5kKCBjLnogKiBwcmVjaXNpb24gKSB9YDtcblxuXHRcdFx0XHQvLyBza2lwIGRlZ2VuZXJhdGUgdHJpYW5nbGVzXG5cdFx0XHRcdGlmICggaGFzaGVzWyAwIF0gPT09IGhhc2hlc1sgMSBdIHx8IGhhc2hlc1sgMSBdID09PSBoYXNoZXNbIDIgXSB8fCBoYXNoZXNbIDIgXSA9PT0gaGFzaGVzWyAwIF0gKSB7XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaXRlcmF0ZSBvdmVyIGV2ZXJ5IGVkZ2Vcblx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdC8vIGdldCB0aGUgZmlyc3QgYW5kIG5leHQgdmVydGV4IG1ha2luZyB1cCB0aGUgZWRnZVxuXHRcdFx0XHRcdGNvbnN0IGpOZXh0ID0gKCBqICsgMSApICUgMztcblx0XHRcdFx0XHRjb25zdCB2ZWNIYXNoMCA9IGhhc2hlc1sgaiBdO1xuXHRcdFx0XHRcdGNvbnN0IHZlY0hhc2gxID0gaGFzaGVzWyBqTmV4dCBdO1xuXHRcdFx0XHRcdGNvbnN0IHYwID0gX3RyaWFuZ2xlWyB2ZXJ0S2V5c1sgaiBdIF07XG5cdFx0XHRcdFx0Y29uc3QgdjEgPSBfdHJpYW5nbGVbIHZlcnRLZXlzWyBqTmV4dCBdIF07XG5cblx0XHRcdFx0XHRjb25zdCBoYXNoID0gYCR7IHZlY0hhc2gwIH1fJHsgdmVjSGFzaDEgfWA7XG5cdFx0XHRcdFx0Y29uc3QgcmV2ZXJzZUhhc2ggPSBgJHsgdmVjSGFzaDEgfV8keyB2ZWNIYXNoMCB9YDtcblxuXHRcdFx0XHRcdGlmICggcmV2ZXJzZUhhc2ggaW4gZWRnZURhdGEgJiYgZWRnZURhdGFbIHJldmVyc2VIYXNoIF0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIGlmIHdlIGZvdW5kIGEgc2libGluZyBlZGdlIGFkZCBpdCBpbnRvIHRoZSB2ZXJ0ZXggYXJyYXkgaWZcblx0XHRcdFx0XHRcdC8vIGl0IG1lZXRzIHRoZSBhbmdsZSB0aHJlc2hvbGQgYW5kIGRlbGV0ZSB0aGUgZWRnZSBmcm9tIHRoZSBtYXAuXG5cdFx0XHRcdFx0XHRpZiAoIF9ub3JtYWwuZG90KCBlZGdlRGF0YVsgcmV2ZXJzZUhhc2ggXS5ub3JtYWwgKSA8PSB0aHJlc2hvbGREb3QgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmVydGljZXMucHVzaCggdjAueCwgdjAueSwgdjAueiApO1xuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2MS54LCB2MS55LCB2MS56ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZWRnZURhdGFbIHJldmVyc2VIYXNoIF0gPSBudWxsO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISAoIGhhc2ggaW4gZWRnZURhdGEgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gaWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gZWRnZSBoZXJlIHRoZW4gc2tpcCBhZGRpbmcgYSBuZXcgb25lXG5cdFx0XHRcdFx0XHRlZGdlRGF0YVsgaGFzaCBdID0ge1xuXG5cdFx0XHRcdFx0XHRcdGluZGV4MDogaW5kZXhBcnJbIGogXSxcblx0XHRcdFx0XHRcdFx0aW5kZXgxOiBpbmRleEFyclsgak5leHQgXSxcblx0XHRcdFx0XHRcdFx0bm9ybWFsOiBfbm9ybWFsLmNsb25lKCksXG5cblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGl0ZXJhdGUgb3ZlciBhbGwgcmVtYWluaW5nLCB1bm1hdGNoZWQgZWRnZXMgYW5kIGFkZCB0aGVtIHRvIHRoZSB2ZXJ0ZXggYXJyYXlcblx0XHRcdGZvciAoIGNvbnN0IGtleSBpbiBlZGdlRGF0YSApIHtcblxuXHRcdFx0XHRpZiAoIGVkZ2VEYXRhWyBrZXkgXSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHsgaW5kZXgwLCBpbmRleDEgfSA9IGVkZ2VEYXRhWyBrZXkgXTtcblx0XHRcdFx0XHRfdjAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyLCBpbmRleDAgKTtcblx0XHRcdFx0XHRfdjEkMS5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHIsIGluZGV4MSApO1xuXG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggX3YwLngsIF92MC55LCBfdjAueiApO1xuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIF92MSQxLngsIF92MSQxLnksIF92MSQxLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBEZWZpbmVzIGFuIGFyYml0cmFyeSAyZCBzaGFwZSBwbGFuZSB1c2luZyBwYXRocyB3aXRoIG9wdGlvbmFsIGhvbGVzLiBJdFxuICogY2FuIGJlIHVzZWQgd2l0aCB7QGxpbmsgRXh0cnVkZUdlb21ldHJ5fSwge0BsaW5rIFNoYXBlR2VvbWV0cnl9LCB0byBnZXRcbiAqIHBvaW50cywgb3IgdG8gZ2V0IHRyaWFuZ3VsYXRlZCBmYWNlcy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgaGVhcnRTaGFwZSA9IG5ldyBUSFJFRS5TaGFwZSgpO1xuICpcbiAqIGhlYXJ0U2hhcGUubW92ZVRvKCAyNSwgMjUgKTtcbiAqIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyggMjUsIDI1LCAyMCwgMCwgMCwgMCApO1xuICogaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKCAtIDMwLCAwLCAtIDMwLCAzNSwgLSAzMCwgMzUgKTtcbiAqIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyggLSAzMCwgNTUsIC0gMTAsIDc3LCAyNSwgOTUgKTtcbiAqIGhlYXJ0U2hhcGUuYmV6aWVyQ3VydmVUbyggNjAsIDc3LCA4MCwgNTUsIDgwLCAzNSApO1xuICogaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKCA4MCwgMzUsIDgwLCAwLCA1MCwgMCApO1xuICogaGVhcnRTaGFwZS5iZXppZXJDdXJ2ZVRvKCAzNSwgMCwgMjUsIDI1LCAyNSwgMjUgKTtcbiAqXG4gKiBjb25zdCBleHRydWRlU2V0dGluZ3MgPSB7XG4gKiBcdGRlcHRoOiA4LFxuICogXHRiZXZlbEVuYWJsZWQ6IHRydWUsXG4gKiBcdGJldmVsU2VnbWVudHM6IDIsXG4gKiBcdHN0ZXBzOiAyLFxuICogXHRiZXZlbFNpemU6IDEsXG4gKiBcdGJldmVsVGhpY2tuZXNzOiAxXG4gKiB9O1xuICpcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkV4dHJ1ZGVHZW9tZXRyeSggaGVhcnRTaGFwZSwgZXh0cnVkZVNldHRpbmdzICk7XG4gKiBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoKSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIFBhdGhcbiAqL1xuY2xhc3MgU2hhcGUgZXh0ZW5kcyBQYXRoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzaGFwZS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3IyPn0gW3BvaW50c10gLSBBbiBhcnJheSBvZiAyRCBwb2ludHMgZGVmaW5pbmcgdGhlIHNoYXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBvaW50cyApIHtcblxuXHRcdHN1cGVyKCBwb2ludHMgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBVVUlEIG9mIHRoZSBzaGFwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2hhcGUnO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyB0aGUgaG9sZXMgaW4gdGhlIHNoYXBlLiBIb2xlIGRlZmluaXRpb25zIG11c3QgdXNlIHRoZVxuXHRcdCAqIG9wcG9zaXRlIHdpbmRpbmcgb3JkZXIgKENXL0NDVykgdGhhbiB0aGUgb3V0ZXIgc2hhcGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8UGF0aD59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSByZXByZXNlbnRpbmcgZWFjaCBjb250b3VyIG9mIHRoZSBob2xlc1xuXHQgKiBhcyBhIGxpc3Qgb2YgMkQgcG9pbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNpb25zIC0gVGhlIGZpbmVuZXNzIG9mIHRoZSByZXN1bHQuXG5cdCAqIEByZXR1cm4ge0FycmF5PEFycmF5PFZlY3RvcjI+Pn0gVGhlIGhvbGVzIGFzIGEgc2VyaWVzIG9mIDJEIHBvaW50cy5cblx0ICovXG5cdGdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRjb25zdCBob2xlc1B0cyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaG9sZXNQdHM7XG5cblx0fVxuXG5cdC8vIGdldCBwb2ludHMgb2Ygc2hhcGUgYW5kIGhvbGVzIChrZXlwb2ludHMgYmFzZWQgb24gc2VnbWVudHMgcGFyYW1ldGVyKVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGhvbGRzIGNvbnRvdXIgZGF0YSBmb3IgdGhlIHNoYXBlIGFuZCBpdHMgaG9sZXMgYXNcblx0ICogYXJyYXlzIG9mIDJEIHBvaW50cy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzaW9ucyAtIFRoZSBmaW5lbmVzcyBvZiB0aGUgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHt7c2hhcGU6QXJyYXk8VmVjdG9yMj4saG9sZXM6QXJyYXk8QXJyYXk8VmVjdG9yMj4+fX0gQW4gb2JqZWN0IHdpdGggY29udG91ciBkYXRhLlxuXHQgKi9cblx0ZXh0cmFjdFBvaW50cyggZGl2aXNpb25zICkge1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2hhcGU6IHRoaXMuZ2V0UG9pbnRzKCBkaXZpc2lvbnMgKSxcblx0XHRcdGhvbGVzOiB0aGlzLmdldFBvaW50c0hvbGVzKCBkaXZpc2lvbnMgKVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzb3VyY2UuaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgaG9sZSA9IHNvdXJjZS5ob2xlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goIGhvbGUuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcblx0XHRkYXRhLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB0aGlzLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGhvbGUgPSB0aGlzLmhvbGVzWyBpIF07XG5cdFx0XHRkYXRhLmhvbGVzLnB1c2goIGhvbGUudG9KU09OKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxuXHRmcm9tSlNPTigganNvbiApIHtcblxuXHRcdHN1cGVyLmZyb21KU09OKCBqc29uICk7XG5cblx0XHR0aGlzLnV1aWQgPSBqc29uLnV1aWQ7XG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBob2xlID0ganNvbi5ob2xlc1sgaSBdO1xuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBuZXcgUGF0aCgpLmZyb21KU09OKCBob2xlICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gY29weSBvZiBtYXBib3gvZWFyY3V0IHZlcnNpb24gMy4wLjFcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvZWFyY3V0L3RyZWUvdjMuMC4xXG5cbmZ1bmN0aW9uIGVhcmN1dChkYXRhLCBob2xlSW5kaWNlcywgZGltID0gMikge1xuXG4gICAgY29uc3QgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGg7XG4gICAgY29uc3Qgb3V0ZXJMZW4gPSBoYXNIb2xlcyA/IGhvbGVJbmRpY2VzWzBdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgbGV0IG91dGVyTm9kZSA9IGxpbmtlZExpc3QoZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSk7XG4gICAgY29uc3QgdHJpYW5nbGVzID0gW107XG5cbiAgICBpZiAoIW91dGVyTm9kZSB8fCBvdXRlck5vZGUubmV4dCA9PT0gb3V0ZXJOb2RlLnByZXYpIHJldHVybiB0cmlhbmdsZXM7XG5cbiAgICBsZXQgbWluWCwgbWluWSwgaW52U2l6ZTtcblxuICAgIGlmIChoYXNIb2xlcykgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKTtcblxuICAgIC8vIGlmIHRoZSBzaGFwZSBpcyBub3QgdG9vIHNpbXBsZSwgd2UnbGwgdXNlIHotb3JkZXIgY3VydmUgaGFzaCBsYXRlcjsgY2FsY3VsYXRlIHBvbHlnb24gYmJveFxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDgwICogZGltKSB7XG4gICAgICAgIG1pblggPSBJbmZpbml0eTtcbiAgICAgICAgbWluWSA9IEluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WCA9IC1JbmZpbml0eTtcbiAgICAgICAgbGV0IG1heFkgPSAtSW5maW5pdHk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGRpbTsgaSA8IG91dGVyTGVuOyBpICs9IGRpbSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IGRhdGFbaV07XG4gICAgICAgICAgICBjb25zdCB5ID0gZGF0YVtpICsgMV07XG4gICAgICAgICAgICBpZiAoeCA8IG1pblgpIG1pblggPSB4O1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSBtaW5ZID0geTtcbiAgICAgICAgICAgIGlmICh4ID4gbWF4WCkgbWF4WCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA+IG1heFkpIG1heFkgPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cbiAgICAgICAgaW52U2l6ZSA9IE1hdGgubWF4KG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XG4gICAgICAgIGludlNpemUgPSBpbnZTaXplICE9PSAwID8gMzI3NjcgLyBpbnZTaXplIDogMDtcbiAgICB9XG5cbiAgICBlYXJjdXRMaW5rZWQob3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7XG5cbiAgICByZXR1cm4gdHJpYW5nbGVzO1xufVxuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcbmZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHtcbiAgICBsZXQgbGFzdDtcblxuICAgIGlmIChjbG9ja3dpc2UgPT09IChzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpIC8gZGltIHwgMCwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpIC8gZGltIHwgMCwgZGF0YVtpXSwgZGF0YVtpICsgMV0sIGxhc3QpO1xuICAgIH1cblxuICAgIGlmIChsYXN0ICYmIGVxdWFscyhsYXN0LCBsYXN0Lm5leHQpKSB7XG4gICAgICAgIHJlbW92ZU5vZGUobGFzdCk7XG4gICAgICAgIGxhc3QgPSBsYXN0Lm5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3Q7XG59XG5cbi8vIGVsaW1pbmF0ZSBjb2xpbmVhciBvciBkdXBsaWNhdGUgcG9pbnRzXG5mdW5jdGlvbiBmaWx0ZXJQb2ludHMoc3RhcnQsIGVuZCkge1xuICAgIGlmICghc3RhcnQpIHJldHVybiBzdGFydDtcbiAgICBpZiAoIWVuZCkgZW5kID0gc3RhcnQ7XG5cbiAgICBsZXQgcCA9IHN0YXJ0LFxuICAgICAgICBhZ2FpbjtcbiAgICBkbyB7XG4gICAgICAgIGFnYWluID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCFwLnN0ZWluZXIgJiYgKGVxdWFscyhwLCBwLm5leHQpIHx8IGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID09PSAwKSkge1xuICAgICAgICAgICAgcmVtb3ZlTm9kZShwKTtcbiAgICAgICAgICAgIHAgPSBlbmQgPSBwLnByZXY7XG4gICAgICAgICAgICBpZiAocCA9PT0gcC5uZXh0KSBicmVhaztcbiAgICAgICAgICAgIGFnYWluID0gdHJ1ZTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcCA9IHAubmV4dDtcbiAgICAgICAgfVxuICAgIH0gd2hpbGUgKGFnYWluIHx8IHAgIT09IGVuZCk7XG5cbiAgICByZXR1cm4gZW5kO1xufVxuXG4vLyBtYWluIGVhciBzbGljaW5nIGxvb3Agd2hpY2ggdHJpYW5ndWxhdGVzIGEgcG9seWdvbiAoZ2l2ZW4gYXMgYSBsaW5rZWQgbGlzdClcbmZ1bmN0aW9uIGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCBwYXNzKSB7XG4gICAgaWYgKCFlYXIpIHJldHVybjtcblxuICAgIC8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcbiAgICBpZiAoIXBhc3MgJiYgaW52U2l6ZSkgaW5kZXhDdXJ2ZShlYXIsIG1pblgsIG1pblksIGludlNpemUpO1xuXG4gICAgbGV0IHN0b3AgPSBlYXI7XG5cbiAgICAvLyBpdGVyYXRlIHRocm91Z2ggZWFycywgc2xpY2luZyB0aGVtIG9uZSBieSBvbmVcbiAgICB3aGlsZSAoZWFyLnByZXYgIT09IGVhci5uZXh0KSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBlYXIucHJldjtcbiAgICAgICAgY29uc3QgbmV4dCA9IGVhci5uZXh0O1xuXG4gICAgICAgIGlmIChpbnZTaXplID8gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSA6IGlzRWFyKGVhcikpIHtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHByZXYuaSwgZWFyLmksIG5leHQuaSk7IC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWFyKTtcblxuICAgICAgICAgICAgLy8gc2tpcHBpbmcgdGhlIG5leHQgdmVydGV4IGxlYWRzIHRvIGxlc3Mgc2xpdmVyIHRyaWFuZ2xlc1xuICAgICAgICAgICAgZWFyID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgc3RvcCA9IG5leHQubmV4dDtcblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBlYXIgPSBuZXh0O1xuXG4gICAgICAgIC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG4gICAgICAgIGlmIChlYXIgPT09IHN0b3ApIHtcbiAgICAgICAgICAgIC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG4gICAgICAgICAgICBpZiAoIXBhc3MpIHtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxKTtcblxuICAgICAgICAgICAgLy8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFzcyA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGVhciA9IGN1cmVMb2NhbEludGVyc2VjdGlvbnMoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcyk7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIpO1xuXG4gICAgICAgICAgICAvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3b1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc3BsaXRFYXJjdXQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBjaGVjayB3aGV0aGVyIGEgcG9seWdvbiBub2RlIGZvcm1zIGEgdmFsaWQgZWFyIHdpdGggYWRqYWNlbnQgbm9kZXNcbmZ1bmN0aW9uIGlzRWFyKGVhcikge1xuICAgIGNvbnN0IGEgPSBlYXIucHJldixcbiAgICAgICAgYiA9IGVhcixcbiAgICAgICAgYyA9IGVhci5uZXh0O1xuXG4gICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG4gICAgLy8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcbiAgICBjb25zdCBheCA9IGEueCwgYnggPSBiLngsIGN4ID0gYy54LCBheSA9IGEueSwgYnkgPSBiLnksIGN5ID0gYy55O1xuXG4gICAgLy8gdHJpYW5nbGUgYmJveFxuICAgIGNvbnN0IHgwID0gTWF0aC5taW4oYXgsIGJ4LCBjeCksXG4gICAgICAgIHkwID0gTWF0aC5taW4oYXksIGJ5LCBjeSksXG4gICAgICAgIHgxID0gTWF0aC5tYXgoYXgsIGJ4LCBjeCksXG4gICAgICAgIHkxID0gTWF0aC5tYXgoYXksIGJ5LCBjeSk7XG5cbiAgICBsZXQgcCA9IGMubmV4dDtcbiAgICB3aGlsZSAocCAhPT0gYSkge1xuICAgICAgICBpZiAocC54ID49IHgwICYmIHAueCA8PSB4MSAmJiBwLnkgPj0geTAgJiYgcC55IDw9IHkxICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGVFeGNlcHRGaXJzdChheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiZcbiAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgY29uc3QgYSA9IGVhci5wcmV2LFxuICAgICAgICBiID0gZWFyLFxuICAgICAgICBjID0gZWFyLm5leHQ7XG5cbiAgICBpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cbiAgICBjb25zdCBheCA9IGEueCwgYnggPSBiLngsIGN4ID0gYy54LCBheSA9IGEueSwgYnkgPSBiLnksIGN5ID0gYy55O1xuXG4gICAgLy8gdHJpYW5nbGUgYmJveFxuICAgIGNvbnN0IHgwID0gTWF0aC5taW4oYXgsIGJ4LCBjeCksXG4gICAgICAgIHkwID0gTWF0aC5taW4oYXksIGJ5LCBjeSksXG4gICAgICAgIHgxID0gTWF0aC5tYXgoYXgsIGJ4LCBjeCksXG4gICAgICAgIHkxID0gTWF0aC5tYXgoYXksIGJ5LCBjeSk7XG5cbiAgICAvLyB6LW9yZGVyIHJhbmdlIGZvciB0aGUgY3VycmVudCB0cmlhbmdsZSBiYm94O1xuICAgIGNvbnN0IG1pblogPSB6T3JkZXIoeDAsIHkwLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSxcbiAgICAgICAgbWF4WiA9IHpPcmRlcih4MSwgeTEsIG1pblgsIG1pblksIGludlNpemUpO1xuXG4gICAgbGV0IHAgPSBlYXIucHJldlosXG4gICAgICAgIG4gPSBlYXIubmV4dFo7XG5cbiAgICAvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBpbiBib3RoIGRpcmVjdGlvbnNcbiAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaKSB7XG4gICAgICAgIGlmIChwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiYgcCAhPT0gYSAmJiBwICE9PSBjICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGVFeGNlcHRGaXJzdChheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiYgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwID0gcC5wcmV2WjtcblxuICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlRXhjZXB0Rmlyc3QoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgbi54LCBuLnkpICYmIGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgbiA9IG4ubmV4dFo7XG4gICAgfVxuXG4gICAgLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcbiAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWikge1xuICAgICAgICBpZiAocC54ID49IHgwICYmIHAueCA8PSB4MSAmJiBwLnkgPj0geTAgJiYgcC55IDw9IHkxICYmIHAgIT09IGEgJiYgcCAhPT0gYyAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlRXhjZXB0Rmlyc3QoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAucHJldlo7XG4gICAgfVxuXG4gICAgLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBpbmNyZWFzaW5nIHotb3JkZXJcbiAgICB3aGlsZSAobiAmJiBuLnogPD0gbWF4Wikge1xuICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlRXhjZXB0Rmlyc3QoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgbi54LCBuLnkpICYmIGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgbiA9IG4ubmV4dFo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGdvIHRocm91Z2ggYWxsIHBvbHlnb24gbm9kZXMgYW5kIGN1cmUgc21hbGwgbG9jYWwgc2VsZi1pbnRlcnNlY3Rpb25zXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMpIHtcbiAgICBsZXQgcCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgY29uc3QgYSA9IHAucHJldixcbiAgICAgICAgICAgIGIgPSBwLm5leHQubmV4dDtcblxuICAgICAgICBpZiAoIWVxdWFscyhhLCBiKSAmJiBpbnRlcnNlY3RzKGEsIHAsIHAubmV4dCwgYikgJiYgbG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpKSB7XG5cbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKGEuaSwgcC5pLCBiLmkpO1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgdHdvIG5vZGVzIGludm9sdmVkXG4gICAgICAgICAgICByZW1vdmVOb2RlKHApO1xuICAgICAgICAgICAgcmVtb3ZlTm9kZShwLm5leHQpO1xuXG4gICAgICAgICAgICBwID0gc3RhcnQgPSBiO1xuICAgICAgICB9XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpO1xuXG4gICAgcmV0dXJuIGZpbHRlclBvaW50cyhwKTtcbn1cblxuLy8gdHJ5IHNwbGl0dGluZyBwb2x5Z29uIGludG8gdHdvIGFuZCB0cmlhbmd1bGF0ZSB0aGVtIGluZGVwZW5kZW50bHlcbmZ1bmN0aW9uIHNwbGl0RWFyY3V0KHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG4gICAgbGV0IGEgPSBzdGFydDtcbiAgICBkbyB7XG4gICAgICAgIGxldCBiID0gYS5uZXh0Lm5leHQ7XG4gICAgICAgIHdoaWxlIChiICE9PSBhLnByZXYpIHtcbiAgICAgICAgICAgIGlmIChhLmkgIT09IGIuaSAmJiBpc1ZhbGlkRGlhZ29uYWwoYSwgYikpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGxpdCB0aGUgcG9seWdvbiBpbiB0d28gYnkgdGhlIGRpYWdvbmFsXG4gICAgICAgICAgICAgICAgbGV0IGMgPSBzcGxpdFBvbHlnb24oYSwgYik7XG5cbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXIgY29saW5lYXIgcG9pbnRzIGFyb3VuZCB0aGUgY3V0c1xuICAgICAgICAgICAgICAgIGEgPSBmaWx0ZXJQb2ludHMoYSwgYS5uZXh0KTtcbiAgICAgICAgICAgICAgICBjID0gZmlsdGVyUG9pbnRzKGMsIGMubmV4dCk7XG5cbiAgICAgICAgICAgICAgICAvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuICAgICAgICAgICAgICAgIGVhcmN1dExpbmtlZChhLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGMsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiID0gYi5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGEgPSBhLm5leHQ7XG4gICAgfSB3aGlsZSAoYSAhPT0gc3RhcnQpO1xufVxuXG4vLyBsaW5rIGV2ZXJ5IGhvbGUgaW50byB0aGUgb3V0ZXIgbG9vcCwgcHJvZHVjaW5nIGEgc2luZ2xlLXJpbmcgcG9seWdvbiB3aXRob3V0IGhvbGVzXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlcyhkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0pIHtcbiAgICBjb25zdCBxdWV1ZSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgIGNvbnN0IGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGxpc3QgPSBsaW5rZWRMaXN0KGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSwgZmFsc2UpO1xuICAgICAgICBpZiAobGlzdCA9PT0gbGlzdC5uZXh0KSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuICAgICAgICBxdWV1ZS5wdXNoKGdldExlZnRtb3N0KGxpc3QpKTtcbiAgICB9XG5cbiAgICBxdWV1ZS5zb3J0KGNvbXBhcmVYWVNsb3BlKTtcblxuICAgIC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlKHF1ZXVlW2ldLCBvdXRlck5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRlck5vZGU7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVYWVNsb3BlKGEsIGIpIHtcbiAgICBsZXQgcmVzdWx0ID0gYS54IC0gYi54O1xuICAgIC8vIHdoZW4gdGhlIGxlZnQtbW9zdCBwb2ludCBvZiAyIGhvbGVzIG1lZXQgYXQgYSB2ZXJ0ZXgsIHNvcnQgdGhlIGhvbGVzIGNvdW50ZXJjbG9ja3dpc2Ugc28gdGhhdCB3aGVuIHdlIGZpbmRcbiAgICAvLyB0aGUgYnJpZGdlIHRvIHRoZSBvdXRlciBzaGVsbCBpcyBhbHdheXMgdGhlIHBvaW50IHRoYXQgdGhleSBtZWV0IGF0LlxuICAgIGlmIChyZXN1bHQgPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gYS55IC0gYi55O1xuICAgICAgICBpZiAocmVzdWx0ID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBhU2xvcGUgPSAoYS5uZXh0LnkgLSBhLnkpIC8gKGEubmV4dC54IC0gYS54KTtcbiAgICAgICAgICAgIGNvbnN0IGJTbG9wZSA9IChiLm5leHQueSAtIGIueSkgLyAoYi5uZXh0LnggLSBiLngpO1xuICAgICAgICAgICAgcmVzdWx0ID0gYVNsb3BlIC0gYlNsb3BlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIGZpbmQgYSBicmlkZ2UgYmV0d2VlbiB2ZXJ0aWNlcyB0aGF0IGNvbm5lY3RzIGhvbGUgd2l0aCBhbiBvdXRlciByaW5nIGFuZCBhbmQgbGluayBpdFxuZnVuY3Rpb24gZWxpbWluYXRlSG9sZShob2xlLCBvdXRlck5vZGUpIHtcbiAgICBjb25zdCBicmlkZ2UgPSBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpO1xuICAgIGlmICghYnJpZGdlKSB7XG4gICAgICAgIHJldHVybiBvdXRlck5vZGU7XG4gICAgfVxuXG4gICAgY29uc3QgYnJpZGdlUmV2ZXJzZSA9IHNwbGl0UG9seWdvbihicmlkZ2UsIGhvbGUpO1xuXG4gICAgLy8gZmlsdGVyIGNvbGxpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG4gICAgZmlsdGVyUG9pbnRzKGJyaWRnZVJldmVyc2UsIGJyaWRnZVJldmVyc2UubmV4dCk7XG4gICAgcmV0dXJuIGZpbHRlclBvaW50cyhicmlkZ2UsIGJyaWRnZS5uZXh0KTtcbn1cblxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxuZnVuY3Rpb24gZmluZEhvbGVCcmlkZ2UoaG9sZSwgb3V0ZXJOb2RlKSB7XG4gICAgbGV0IHAgPSBvdXRlck5vZGU7XG4gICAgY29uc3QgaHggPSBob2xlLng7XG4gICAgY29uc3QgaHkgPSBob2xlLnk7XG4gICAgbGV0IHF4ID0gLUluZmluaXR5O1xuICAgIGxldCBtO1xuXG4gICAgLy8gZmluZCBhIHNlZ21lbnQgaW50ZXJzZWN0ZWQgYnkgYSByYXkgZnJvbSB0aGUgaG9sZSdzIGxlZnRtb3N0IHBvaW50IHRvIHRoZSBsZWZ0O1xuICAgIC8vIHNlZ21lbnQncyBlbmRwb2ludCB3aXRoIGxlc3NlciB4IHdpbGwgYmUgcG90ZW50aWFsIGNvbm5lY3Rpb24gcG9pbnRcbiAgICAvLyB1bmxlc3MgdGhleSBpbnRlcnNlY3QgYXQgYSB2ZXJ0ZXgsIHRoZW4gY2hvb3NlIHRoZSB2ZXJ0ZXhcbiAgICBpZiAoZXF1YWxzKGhvbGUsIHApKSByZXR1cm4gcDtcbiAgICBkbyB7XG4gICAgICAgIGlmIChlcXVhbHMoaG9sZSwgcC5uZXh0KSkgcmV0dXJuIHAubmV4dDtcbiAgICAgICAgZWxzZSBpZiAoaHkgPD0gcC55ICYmIGh5ID49IHAubmV4dC55ICYmIHAubmV4dC55ICE9PSBwLnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBwLnggKyAoaHkgLSBwLnkpICogKHAubmV4dC54IC0gcC54KSAvIChwLm5leHQueSAtIHAueSk7XG4gICAgICAgICAgICBpZiAoeCA8PSBoeCAmJiB4ID4gcXgpIHtcbiAgICAgICAgICAgICAgICBxeCA9IHg7XG4gICAgICAgICAgICAgICAgbSA9IHAueCA8IHAubmV4dC54ID8gcCA6IHAubmV4dDtcbiAgICAgICAgICAgICAgICBpZiAoeCA9PT0gaHgpIHJldHVybiBtOyAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsZWZ0bW9zdCBlbmRwb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gb3V0ZXJOb2RlKTtcblxuICAgIGlmICghbSkgcmV0dXJuIG51bGw7XG5cbiAgICAvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XG4gICAgLy8gaWYgdGhlcmUgYXJlIG5vIHBvaW50cyBmb3VuZCwgd2UgaGF2ZSBhIHZhbGlkIGNvbm5lY3Rpb247XG4gICAgLy8gb3RoZXJ3aXNlIGNob29zZSB0aGUgcG9pbnQgb2YgdGhlIG1pbmltdW0gYW5nbGUgd2l0aCB0aGUgcmF5IGFzIGNvbm5lY3Rpb24gcG9pbnRcblxuICAgIGNvbnN0IHN0b3AgPSBtO1xuICAgIGNvbnN0IG14ID0gbS54O1xuICAgIGNvbnN0IG15ID0gbS55O1xuICAgIGxldCB0YW5NaW4gPSBJbmZpbml0eTtcblxuICAgIHAgPSBtO1xuXG4gICAgZG8ge1xuICAgICAgICBpZiAoaHggPj0gcC54ICYmIHAueCA+PSBteCAmJiBoeCAhPT0gcC54ICYmXG4gICAgICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55KSkge1xuXG4gICAgICAgICAgICBjb25zdCB0YW4gPSBNYXRoLmFicyhoeSAtIHAueSkgLyAoaHggLSBwLngpOyAvLyB0YW5nZW50aWFsXG5cbiAgICAgICAgICAgIGlmIChsb2NhbGx5SW5zaWRlKHAsIGhvbGUpICYmXG4gICAgICAgICAgICAgICAgKHRhbiA8IHRhbk1pbiB8fCAodGFuID09PSB0YW5NaW4gJiYgKHAueCA+IG0ueCB8fCAocC54ID09PSBtLnggJiYgc2VjdG9yQ29udGFpbnNTZWN0b3IobSwgcCkpKSkpKSB7XG4gICAgICAgICAgICAgICAgbSA9IHA7XG4gICAgICAgICAgICAgICAgdGFuTWluID0gdGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdG9wKTtcblxuICAgIHJldHVybiBtO1xufVxuXG4vLyB3aGV0aGVyIHNlY3RvciBpbiB2ZXJ0ZXggbSBjb250YWlucyBzZWN0b3IgaW4gdmVydGV4IHAgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZXNcbmZ1bmN0aW9uIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApIHtcbiAgICByZXR1cm4gYXJlYShtLnByZXYsIG0sIHAucHJldikgPCAwICYmIGFyZWEocC5uZXh0LCBtLCBtLm5leHQpIDwgMDtcbn1cblxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuZnVuY3Rpb24gaW5kZXhDdXJ2ZShzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIGxldCBwID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC56ID09PSAwKSBwLnogPSB6T3JkZXIocC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUpO1xuICAgICAgICBwLnByZXZaID0gcC5wcmV2O1xuICAgICAgICBwLm5leHRaID0gcC5uZXh0O1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcblxuICAgIHAucHJldloubmV4dFogPSBudWxsO1xuICAgIHAucHJldlogPSBudWxsO1xuXG4gICAgc29ydExpbmtlZChwKTtcbn1cblxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cbi8vIGh0dHA6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vYWxnb3JpdGhtcy9saXN0c29ydC5odG1sXG5mdW5jdGlvbiBzb3J0TGlua2VkKGxpc3QpIHtcbiAgICBsZXQgbnVtTWVyZ2VzO1xuICAgIGxldCBpblNpemUgPSAxO1xuXG4gICAgZG8ge1xuICAgICAgICBsZXQgcCA9IGxpc3Q7XG4gICAgICAgIGxldCBlO1xuICAgICAgICBsaXN0ID0gbnVsbDtcbiAgICAgICAgbGV0IHRhaWwgPSBudWxsO1xuICAgICAgICBudW1NZXJnZXMgPSAwO1xuXG4gICAgICAgIHdoaWxlIChwKSB7XG4gICAgICAgICAgICBudW1NZXJnZXMrKztcbiAgICAgICAgICAgIGxldCBxID0gcDtcbiAgICAgICAgICAgIGxldCBwU2l6ZSA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcFNpemUrKztcbiAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICBpZiAoIXEpIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHFTaXplID0gaW5TaXplO1xuXG4gICAgICAgICAgICB3aGlsZSAocFNpemUgPiAwIHx8IChxU2l6ZSA+IDAgJiYgcSkpIHtcblxuICAgICAgICAgICAgICAgIGlmIChwU2l6ZSAhPT0gMCAmJiAocVNpemUgPT09IDAgfHwgIXEgfHwgcC56IDw9IHEueikpIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHA7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBwU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGUgPSBxO1xuICAgICAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICAgICAgcVNpemUtLTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGFpbCkgdGFpbC5uZXh0WiA9IGU7XG4gICAgICAgICAgICAgICAgZWxzZSBsaXN0ID0gZTtcblxuICAgICAgICAgICAgICAgIGUucHJldlogPSB0YWlsO1xuICAgICAgICAgICAgICAgIHRhaWwgPSBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwID0gcTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhaWwubmV4dFogPSBudWxsO1xuICAgICAgICBpblNpemUgKj0gMjtcblxuICAgIH0gd2hpbGUgKG51bU1lcmdlcyA+IDEpO1xuXG4gICAgcmV0dXJuIGxpc3Q7XG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxuZnVuY3Rpb24gek9yZGVyKHgsIHksIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICAvLyBjb29yZHMgYXJlIHRyYW5zZm9ybWVkIGludG8gbm9uLW5lZ2F0aXZlIDE1LWJpdCBpbnRlZ2VyIHJhbmdlXG4gICAgeCA9ICh4IC0gbWluWCkgKiBpbnZTaXplIHwgMDtcbiAgICB5ID0gKHkgLSBtaW5ZKSAqIGludlNpemUgfCAwO1xuXG4gICAgeCA9ICh4IHwgKHggPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgICB4ID0gKHggfCAoeCA8PCA0KSkgJiAweDBGMEYwRjBGO1xuICAgIHggPSAoeCB8ICh4IDw8IDIpKSAmIDB4MzMzMzMzMzM7XG4gICAgeCA9ICh4IHwgKHggPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICAgIHkgPSAoeSB8ICh5IDw8IDgpKSAmIDB4MDBGRjAwRkY7XG4gICAgeSA9ICh5IHwgKHkgPDwgNCkpICYgMHgwRjBGMEYwRjtcbiAgICB5ID0gKHkgfCAoeSA8PCAyKSkgJiAweDMzMzMzMzMzO1xuICAgIHkgPSAoeSB8ICh5IDw8IDEpKSAmIDB4NTU1NTU1NTU7XG5cbiAgICByZXR1cm4geCB8ICh5IDw8IDEpO1xufVxuXG4vLyBmaW5kIHRoZSBsZWZ0bW9zdCBub2RlIG9mIGEgcG9seWdvbiByaW5nXG5mdW5jdGlvbiBnZXRMZWZ0bW9zdChzdGFydCkge1xuICAgIGxldCBwID0gc3RhcnQsXG4gICAgICAgIGxlZnRtb3N0ID0gc3RhcnQ7XG4gICAgZG8ge1xuICAgICAgICBpZiAocC54IDwgbGVmdG1vc3QueCB8fCAocC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkpKSBsZWZ0bW9zdCA9IHA7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gc3RhcnQpO1xuXG4gICAgcmV0dXJuIGxlZnRtb3N0O1xufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXG5mdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7XG4gICAgcmV0dXJuIChjeCAtIHB4KSAqIChheSAtIHB5KSA+PSAoYXggLSBweCkgKiAoY3kgLSBweSkgJiZcbiAgICAgICAgICAgKGF4IC0gcHgpICogKGJ5IC0gcHkpID49IChieCAtIHB4KSAqIChheSAtIHB5KSAmJlxuICAgICAgICAgICAoYnggLSBweCkgKiAoY3kgLSBweSkgPj0gKGN4IC0gcHgpICogKGJ5IC0gcHkpO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlIGJ1dCBmYWxzZSBpZiBpdHMgZXF1YWwgdG8gdGhlIGZpcnN0IHBvaW50IG9mIHRoZSB0cmlhbmdsZVxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlRXhjZXB0Rmlyc3QoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcHgsIHB5KSB7XG4gICAgcmV0dXJuICEoYXggPT09IHB4ICYmIGF5ID09PSBweSkgJiYgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSk7XG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKGEsIGIpIHtcbiAgICByZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICFpbnRlcnNlY3RzUG9seWdvbihhLCBiKSAmJiAvLyBkb25lcyd0IGludGVyc2VjdCBvdGhlciBlZGdlc1xuICAgICAgICAgICAobG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpICYmIG1pZGRsZUluc2lkZShhLCBiKSAmJiAvLyBsb2NhbGx5IHZpc2libGVcbiAgICAgICAgICAgIChhcmVhKGEucHJldiwgYSwgYi5wcmV2KSB8fCBhcmVhKGEsIGIucHJldiwgYikpIHx8IC8vIGRvZXMgbm90IGNyZWF0ZSBvcHBvc2l0ZS1mYWNpbmcgc2VjdG9yc1xuICAgICAgICAgICAgZXF1YWxzKGEsIGIpICYmIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpID4gMCAmJiBhcmVhKGIucHJldiwgYiwgYi5uZXh0KSA+IDApOyAvLyBzcGVjaWFsIHplcm8tbGVuZ3RoIGNhc2Vcbn1cblxuLy8gc2lnbmVkIGFyZWEgb2YgYSB0cmlhbmdsZVxuZnVuY3Rpb24gYXJlYShwLCBxLCByKSB7XG4gICAgcmV0dXJuIChxLnkgLSBwLnkpICogKHIueCAtIHEueCkgLSAocS54IC0gcC54KSAqIChyLnkgLSBxLnkpO1xufVxuXG4vLyBjaGVjayBpZiB0d28gcG9pbnRzIGFyZSBlcXVhbFxuZnVuY3Rpb24gZXF1YWxzKHAxLCBwMikge1xuICAgIHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcbmZ1bmN0aW9uIGludGVyc2VjdHMocDEsIHExLCBwMiwgcTIpIHtcbiAgICBjb25zdCBvMSA9IHNpZ24oYXJlYShwMSwgcTEsIHAyKSk7XG4gICAgY29uc3QgbzIgPSBzaWduKGFyZWEocDEsIHExLCBxMikpO1xuICAgIGNvbnN0IG8zID0gc2lnbihhcmVhKHAyLCBxMiwgcDEpKTtcbiAgICBjb25zdCBvNCA9IHNpZ24oYXJlYShwMiwgcTIsIHExKSk7XG5cbiAgICBpZiAobzEgIT09IG8yICYmIG8zICE9PSBvNCkgcmV0dXJuIHRydWU7IC8vIGdlbmVyYWwgY2FzZVxuXG4gICAgaWYgKG8xID09PSAwICYmIG9uU2VnbWVudChwMSwgcDIsIHExKSkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcDIgYXJlIGNvbGxpbmVhciBhbmQgcDIgbGllcyBvbiBwMXExXG4gICAgaWYgKG8yID09PSAwICYmIG9uU2VnbWVudChwMSwgcTIsIHExKSkgcmV0dXJuIHRydWU7IC8vIHAxLCBxMSBhbmQgcTIgYXJlIGNvbGxpbmVhciBhbmQgcTIgbGllcyBvbiBwMXExXG4gICAgaWYgKG8zID09PSAwICYmIG9uU2VnbWVudChwMiwgcDEsIHEyKSkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcDEgYXJlIGNvbGxpbmVhciBhbmQgcDEgbGllcyBvbiBwMnEyXG4gICAgaWYgKG80ID09PSAwICYmIG9uU2VnbWVudChwMiwgcTEsIHEyKSkgcmV0dXJuIHRydWU7IC8vIHAyLCBxMiBhbmQgcTEgYXJlIGNvbGxpbmVhciBhbmQgcTEgbGllcyBvbiBwMnEyXG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGZvciBjb2xsaW5lYXIgcG9pbnRzIHAsIHEsIHIsIGNoZWNrIGlmIHBvaW50IHEgbGllcyBvbiBzZWdtZW50IHByXG5mdW5jdGlvbiBvblNlZ21lbnQocCwgcSwgcikge1xuICAgIHJldHVybiBxLnggPD0gTWF0aC5tYXgocC54LCByLngpICYmIHEueCA+PSBNYXRoLm1pbihwLngsIHIueCkgJiYgcS55IDw9IE1hdGgubWF4KHAueSwgci55KSAmJiBxLnkgPj0gTWF0aC5taW4ocC55LCByLnkpO1xufVxuXG5mdW5jdGlvbiBzaWduKG51bSkge1xuICAgIHJldHVybiBudW0gPiAwID8gMSA6IG51bSA8IDAgPyAtMSA6IDA7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbihhLCBiKSB7XG4gICAgbGV0IHAgPSBhO1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAuaSAhPT0gYS5pICYmIHAubmV4dC5pICE9PSBhLmkgJiYgcC5pICE9PSBiLmkgJiYgcC5uZXh0LmkgIT09IGIuaSAmJlxuICAgICAgICAgICAgICAgIGludGVyc2VjdHMocCwgcC5uZXh0LCBhLCBiKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvblxuZnVuY3Rpb24gbG9jYWxseUluc2lkZShhLCBiKSB7XG4gICAgcmV0dXJuIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpIDwgMCA/XG4gICAgICAgIGFyZWEoYSwgYiwgYS5uZXh0KSA+PSAwICYmIGFyZWEoYSwgYS5wcmV2LCBiKSA+PSAwIDpcbiAgICAgICAgYXJlYShhLCBiLCBhLnByZXYpIDwgMCB8fCBhcmVhKGEsIGEubmV4dCwgYikgPCAwO1xufVxuXG4vLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIG1pZGRsZUluc2lkZShhLCBiKSB7XG4gICAgbGV0IHAgPSBhO1xuICAgIGxldCBpbnNpZGUgPSBmYWxzZTtcbiAgICBjb25zdCBweCA9IChhLnggKyBiLngpIC8gMjtcbiAgICBjb25zdCBweSA9IChhLnkgKyBiLnkpIC8gMjtcbiAgICBkbyB7XG4gICAgICAgIGlmICgoKHAueSA+IHB5KSAhPT0gKHAubmV4dC55ID4gcHkpKSAmJiBwLm5leHQueSAhPT0gcC55ICYmXG4gICAgICAgICAgICAgICAgKHB4IDwgKHAubmV4dC54IC0gcC54KSAqIChweSAtIHAueSkgLyAocC5uZXh0LnkgLSBwLnkpICsgcC54KSlcbiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gaW5zaWRlO1xufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcbmZ1bmN0aW9uIHNwbGl0UG9seWdvbihhLCBiKSB7XG4gICAgY29uc3QgYTIgPSBjcmVhdGVOb2RlKGEuaSwgYS54LCBhLnkpLFxuICAgICAgICBiMiA9IGNyZWF0ZU5vZGUoYi5pLCBiLngsIGIueSksXG4gICAgICAgIGFuID0gYS5uZXh0LFxuICAgICAgICBicCA9IGIucHJldjtcblxuICAgIGEubmV4dCA9IGI7XG4gICAgYi5wcmV2ID0gYTtcblxuICAgIGEyLm5leHQgPSBhbjtcbiAgICBhbi5wcmV2ID0gYTI7XG5cbiAgICBiMi5uZXh0ID0gYTI7XG4gICAgYTIucHJldiA9IGIyO1xuXG4gICAgYnAubmV4dCA9IGIyO1xuICAgIGIyLnByZXYgPSBicDtcblxuICAgIHJldHVybiBiMjtcbn1cblxuLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdClcbmZ1bmN0aW9uIGluc2VydE5vZGUoaSwgeCwgeSwgbGFzdCkge1xuICAgIGNvbnN0IHAgPSBjcmVhdGVOb2RlKGksIHgsIHkpO1xuXG4gICAgaWYgKCFsYXN0KSB7XG4gICAgICAgIHAucHJldiA9IHA7XG4gICAgICAgIHAubmV4dCA9IHA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBwLm5leHQgPSBsYXN0Lm5leHQ7XG4gICAgICAgIHAucHJldiA9IGxhc3Q7XG4gICAgICAgIGxhc3QubmV4dC5wcmV2ID0gcDtcbiAgICAgICAgbGFzdC5uZXh0ID0gcDtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5vZGUocCkge1xuICAgIHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuICAgIHAucHJldi5uZXh0ID0gcC5uZXh0O1xuXG4gICAgaWYgKHAucHJldlopIHAucHJldloubmV4dFogPSBwLm5leHRaO1xuICAgIGlmIChwLm5leHRaKSBwLm5leHRaLnByZXZaID0gcC5wcmV2Wjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZShpLCB4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaSwgLy8gdmVydGV4IGluZGV4IGluIGNvb3JkaW5hdGVzIGFycmF5XG4gICAgICAgIHgsIHksIC8vIHZlcnRleCBjb29yZGluYXRlc1xuICAgICAgICBwcmV2OiBudWxsLCAvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0ZXggbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgejogMCwgLy8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxuICAgICAgICBwcmV2WjogbnVsbCwgLy8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuICAgICAgICBuZXh0WjogbnVsbCxcbiAgICAgICAgc3RlaW5lcjogZmFsc2UgLy8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGZvciAobGV0IGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0pIHtcbiAgICAgICAgc3VtICs9IChkYXRhW2pdIC0gZGF0YVtpXSkgKiAoZGF0YVtpICsgMV0gKyBkYXRhW2ogKyAxXSk7XG4gICAgICAgIGogPSBpO1xuICAgIH1cbiAgICByZXR1cm4gc3VtO1xufVxuXG5jbGFzcyBFYXJjdXQge1xuXG5cdC8qKlxuXHQgKiBUcmlhbmd1bGF0ZXMgdGhlIGdpdmVuIHNoYXBlIGRlZmluaXRpb24gYnkgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRyaWFuZ2xlcy5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBkYXRhIC0gQW4gYXJyYXkgd2l0aCAyRCBwb2ludHMuXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gaG9sZUluZGljZXMgLSBBbiBhcnJheSB3aXRoIGluZGljZXMgZGVmaW5pbmcgaG9sZXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGltPTJdIC0gVGhlIG51bWJlciBvZiBjb29yZGluYXRlcyBwZXIgdmVydGV4IGluIHRoZSBpbnB1dCBhcnJheS5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gQW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSB0cmlhbmd1bGF0ZWQgZmFjZXMuIEVhY2ggZmFjZSBpcyBkZWZpbmVkIGJ5IHRocmVlIGNvbnNlY3V0aXZlIG51bWJlcnNcblx0ICogcmVwcmVzZW50aW5nIHZlcnRleCBpbmRpY2VzLlxuXHQgKi9cblx0c3RhdGljIHRyaWFuZ3VsYXRlKCBkYXRhLCBob2xlSW5kaWNlcywgZGltID0gMiApIHtcblxuXHRcdHJldHVybiBlYXJjdXQoIGRhdGEsIGhvbGVJbmRpY2VzLCBkaW0gKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIGNvbnRhaW5pbmcgdXRpbGl0eSBmdW5jdGlvbnMgZm9yIHNoYXBlcy5cbiAqXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFNoYXBlVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGUgYXJlYSBvZiBhICggMkQgKSBjb250b3VyIHBvbHlnb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj59IGNvbnRvdXIgLSBBbiBhcnJheSBvZiAyRCBwb2ludHMuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFyZWEuXG5cdCAqL1xuXHRzdGF0aWMgYXJlYSggY29udG91ciApIHtcblxuXHRcdGNvbnN0IG4gPSBjb250b3VyLmxlbmd0aDtcblx0XHRsZXQgYSA9IDAuMDtcblxuXHRcdGZvciAoIGxldCBwID0gbiAtIDEsIHEgPSAwOyBxIDwgbjsgcCA9IHEgKysgKSB7XG5cblx0XHRcdGEgKz0gY29udG91clsgcCBdLnggKiBjb250b3VyWyBxIF0ueSAtIGNvbnRvdXJbIHEgXS54ICogY29udG91clsgcCBdLnk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYSAqIDAuNTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBjb250b3VyIHVzZXMgYSBjbG9ja3dpc2Ugd2luZGluZyBvcmRlci5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxWZWN0b3IyPn0gcHRzIC0gQW4gYXJyYXkgb2YgMkQgcG9pbnRzIGRlZmluaW5nIGEgcG9seWdvbi5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZ2l2ZW4gY29udG91ciB1c2VzIGEgY2xvY2t3aXNlIHdpbmRpbmcgb3JkZXIgb3Igbm90LlxuXHQgKi9cblx0c3RhdGljIGlzQ2xvY2tXaXNlKCBwdHMgKSB7XG5cblx0XHRyZXR1cm4gU2hhcGVVdGlscy5hcmVhKCBwdHMgKSA8IDA7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUcmlhbmd1bGF0ZXMgdGhlIGdpdmVuIHNoYXBlIGRlZmluaXRpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj59IGNvbnRvdXIgLSBBbiBhcnJheSBvZiAyRCBwb2ludHMgZGVmaW5pbmcgdGhlIGNvbnRvdXIuXG5cdCAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8VmVjdG9yMj4+fSBob2xlcyAtIEFuIGFycmF5IHRoYXQgaG9sZHMgYXJyYXlzIG9mIDJEIHBvaW50cyBkZWZpbmluZyB0aGUgaG9sZXMuXG5cdCAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fSBBbiBhcnJheSB0aGF0IGhvbGRzIGZvciBlYWNoIGZhY2UgZGVmaW5pdGlvbiBhbiBhcnJheSB3aXRoIHRocmVlIGluZGljZXMuXG5cdCAqL1xuXHRzdGF0aWMgdHJpYW5ndWxhdGVTaGFwZSggY29udG91ciwgaG9sZXMgKSB7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdOyAvLyBmbGF0IGFycmF5IG9mIHZlcnRpY2VzIGxpa2UgWyB4MCx5MCwgeDEseTEsIHgyLHkyLCAuLi4gXVxuXHRcdGNvbnN0IGhvbGVJbmRpY2VzID0gW107IC8vIGFycmF5IG9mIGhvbGUgaW5kaWNlc1xuXHRcdGNvbnN0IGZhY2VzID0gW107IC8vIGZpbmFsIGFycmF5IG9mIHZlcnRleCBpbmRpY2VzIGxpa2UgWyBbIGEsYixkIF0sIFsgYixjLGQgXSBdXG5cblx0XHRyZW1vdmVEdXBFbmRQdHMoIGNvbnRvdXIgKTtcblx0XHRhZGRDb250b3VyKCB2ZXJ0aWNlcywgY29udG91ciApO1xuXG5cdFx0Ly9cblxuXHRcdGxldCBob2xlSW5kZXggPSBjb250b3VyLmxlbmd0aDtcblxuXHRcdGhvbGVzLmZvckVhY2goIHJlbW92ZUR1cEVuZFB0cyApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgaG9sZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRob2xlSW5kaWNlcy5wdXNoKCBob2xlSW5kZXggKTtcblx0XHRcdGhvbGVJbmRleCArPSBob2xlc1sgaSBdLmxlbmd0aDtcblx0XHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBob2xlc1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgdHJpYW5nbGVzID0gRWFyY3V0LnRyaWFuZ3VsYXRlKCB2ZXJ0aWNlcywgaG9sZUluZGljZXMgKTtcblxuXHRcdC8vXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdGZhY2VzLnB1c2goIHRyaWFuZ2xlcy5zbGljZSggaSwgaSArIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhY2VzO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiByZW1vdmVEdXBFbmRQdHMoIHBvaW50cyApIHtcblxuXHRjb25zdCBsID0gcG9pbnRzLmxlbmd0aDtcblxuXHRpZiAoIGwgPiAyICYmIHBvaW50c1sgbCAtIDEgXS5lcXVhbHMoIHBvaW50c1sgMCBdICkgKSB7XG5cblx0XHRwb2ludHMucG9wKCk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICkge1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IGNvbnRvdXIubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0dmVydGljZXMucHVzaCggY29udG91clsgaSBdLnggKTtcblx0XHR2ZXJ0aWNlcy5wdXNoKCBjb250b3VyWyBpIF0ueSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgZXh0cnVkZWQgZ2VvbWV0cnkgZnJvbSBhIHBhdGggc2hhcGUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGxlbmd0aCA9IDEyLCB3aWR0aCA9IDg7XG4gKlxuICogY29uc3Qgc2hhcGUgPSBuZXcgVEhSRUUuU2hhcGUoKTtcbiAqIHNoYXBlLm1vdmVUbyggMCwwICk7XG4gKiBzaGFwZS5saW5lVG8oIDAsIHdpZHRoICk7XG4gKiBzaGFwZS5saW5lVG8oIGxlbmd0aCwgd2lkdGggKTtcbiAqIHNoYXBlLmxpbmVUbyggbGVuZ3RoLCAwICk7XG4gKiBzaGFwZS5saW5lVG8oIDAsIDAgKTtcbiAqXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5FeHRydWRlR2VvbWV0cnkoIHNoYXBlICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgwMGZmMDAgfSApO1xuICogY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSA7XG4gKiBzY2VuZS5hZGQoIG1lc2ggKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJHZW9tZXRyeVxuICovXG5jbGFzcyBFeHRydWRlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZXh0cnVkZSBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtTaGFwZXxBcnJheTxTaGFwZT59IFtzaGFwZXNdIC0gQSBzaGFwZSBvciBhbiBhcnJheSBvZiBzaGFwZXMuXG5cdCAqIEBwYXJhbSB7RXh0cnVkZUdlb21ldHJ5fk9wdGlvbnN9IFtvcHRpb25zXSAtIFRoZSBleHRydWRlIHNldHRpbmdzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNoYXBlcyA9IG5ldyBTaGFwZSggWyBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSwgbmV3IFZlY3RvcjIoIC0wLjUsIDAuNSApLCBuZXcgVmVjdG9yMiggLTAuNSwgLTAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAtMC41ICkgXSApLCBvcHRpb25zID0ge30gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ0V4dHJ1ZGVHZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRcdG9wdGlvbnM6IG9wdGlvbnNcblx0XHR9O1xuXG5cdFx0c2hhcGVzID0gQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPyBzaGFwZXMgOiBbIHNoYXBlcyBdO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgdmVydGljZXNBcnJheSA9IFtdO1xuXHRcdGNvbnN0IHV2QXJyYXkgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXHRcdFx0YWRkU2hhcGUoIHNoYXBlICk7XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlc0FycmF5LCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2QXJyYXksIDIgKSApO1xuXG5cdFx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdFx0Ly8gZnVuY3Rpb25zXG5cblx0XHRmdW5jdGlvbiBhZGRTaGFwZSggc2hhcGUgKSB7XG5cblx0XHRcdGNvbnN0IHBsYWNlaG9sZGVyID0gW107XG5cblx0XHRcdC8vIG9wdGlvbnNcblxuXHRcdFx0Y29uc3QgY3VydmVTZWdtZW50cyA9IG9wdGlvbnMuY3VydmVTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzIDogMTI7XG5cdFx0XHRjb25zdCBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xuXHRcdFx0Y29uc3QgZGVwdGggPSBvcHRpb25zLmRlcHRoICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoIDogMTtcblxuXHRcdFx0bGV0IGJldmVsRW5hYmxlZCA9IG9wdGlvbnMuYmV2ZWxFbmFibGVkICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsRW5hYmxlZCA6IHRydWU7XG5cdFx0XHRsZXQgYmV2ZWxUaGlja25lc3MgPSBvcHRpb25zLmJldmVsVGhpY2tuZXNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsVGhpY2tuZXNzIDogMC4yO1xuXHRcdFx0bGV0IGJldmVsU2l6ZSA9IG9wdGlvbnMuYmV2ZWxTaXplICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2l6ZSA6IGJldmVsVGhpY2tuZXNzIC0gMC4xO1xuXHRcdFx0bGV0IGJldmVsT2Zmc2V0ID0gb3B0aW9ucy5iZXZlbE9mZnNldCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbE9mZnNldCA6IDA7XG5cdFx0XHRsZXQgYmV2ZWxTZWdtZW50cyA9IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5iZXZlbFNlZ21lbnRzIDogMztcblxuXHRcdFx0Y29uc3QgZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoO1xuXG5cdFx0XHRjb25zdCB1dmdlbiA9IG9wdGlvbnMuVVZHZW5lcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuVVZHZW5lcmF0b3IgOiBXb3JsZFVWR2VuZXJhdG9yO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRsZXQgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlO1xuXHRcdFx0bGV0IHNwbGluZVR1YmUsIGJpbm9ybWFsLCBub3JtYWwsIHBvc2l0aW9uMjtcblxuXHRcdFx0aWYgKCBleHRydWRlUGF0aCApIHtcblxuXHRcdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xuXG5cdFx0XHRcdGV4dHJ1ZGVCeVBhdGggPSB0cnVlO1xuXHRcdFx0XHRiZXZlbEVuYWJsZWQgPSBmYWxzZTsgLy8gYmV2ZWxzIG5vdCBzdXBwb3J0ZWQgZm9yIHBhdGggZXh0cnVzaW9uXG5cblx0XHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xuXG5cdFx0XHRcdC8vIFRPRE8xIC0gaGF2ZSBhIC5pc0Nsb3NlZCBpbiBzcGxpbmU/XG5cblx0XHRcdFx0c3BsaW5lVHViZSA9IGV4dHJ1ZGVQYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHN0ZXBzLCBmYWxzZSApO1xuXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKHNwbGluZVR1YmUsICdzcGxpbmVUdWJlJywgc3BsaW5lVHViZS5ub3JtYWxzLmxlbmd0aCwgJ3N0ZXBzJywgc3RlcHMsICdleHRydWRlUHRzJywgZXh0cnVkZVB0cy5sZW5ndGgpO1xuXG5cdFx0XHRcdGJpbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0bm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYWZlZ3VhcmRzIGlmIGJldmVscyBhcmUgbm90IGVuYWJsZWRcblxuXHRcdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHRiZXZlbFNlZ21lbnRzID0gMDtcblx0XHRcdFx0YmV2ZWxUaGlja25lc3MgPSAwO1xuXHRcdFx0XHRiZXZlbFNpemUgPSAwO1xuXHRcdFx0XHRiZXZlbE9mZnNldCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG5cblx0XHRcdGNvbnN0IHNoYXBlUG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyggY3VydmVTZWdtZW50cyApO1xuXG5cdFx0XHRsZXQgdmVydGljZXMgPSBzaGFwZVBvaW50cy5zaGFwZTtcblx0XHRcdGNvbnN0IGhvbGVzID0gc2hhcGVQb2ludHMuaG9sZXM7XG5cblx0XHRcdGNvbnN0IHJldmVyc2UgPSAhIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHZlcnRpY2VzICk7XG5cblx0XHRcdGlmICggcmV2ZXJzZSApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0XHQvLyBNYXliZSB3ZSBzaG91bGQgYWxzbyBjaGVjayBpZiBob2xlcyBhcmUgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiwganVzdCB0byBiZSBzYWZlIC4uLlxuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblxuXHRcdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggYWhvbGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aG9sZXNbIGggXSA9IGFob2xlLnJldmVyc2UoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0LyoqTWVyZ2VzIGluZGV4LWFkamFjZW50IHBvaW50cyB0aGF0IGFyZSB3aXRoaW4gYSB0aHJlc2hvbGQgZGlzdGFuY2Ugb2YgZWFjaCBvdGhlci4gQXJyYXkgaXMgbW9kaWZpZWQgaW4tcGxhY2UuIFRocmVzaG9sZCBkaXN0YW5jZSBpcyBlbXBpcmljYWwsIGFuZCBzY2FsZWQgYmFzZWQgb24gdGhlIG1hZ25pdHVkZSBvZiBwb2ludCBjb29yZGluYXRlcy5cblx0XHRcdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj59IHBvaW50c1xuXHRcdFx0Ki9cblx0XHRcdGZ1bmN0aW9uIG1lcmdlT3ZlcmxhcHBpbmdQb2ludHMoIHBvaW50cyApIHtcblxuXHRcdFx0XHRjb25zdCBUSFJFU0hPTEQgPSAxZS0xMDtcblx0XHRcdFx0Y29uc3QgVEhSRVNIT0xEX1NRID0gVEhSRVNIT0xEICogVEhSRVNIT0xEO1xuXHRcdFx0XHRsZXQgcHJldlBvcyA9IHBvaW50c1sgMCBdO1xuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gcG9pbnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRJbmRleCA9IGkgJSBwb2ludHMubGVuZ3RoO1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRQb3MgPSBwb2ludHNbIGN1cnJlbnRJbmRleCBdO1xuXHRcdFx0XHRcdGNvbnN0IGR4ID0gY3VycmVudFBvcy54IC0gcHJldlBvcy54O1xuXHRcdFx0XHRcdGNvbnN0IGR5ID0gY3VycmVudFBvcy55IC0gcHJldlBvcy55O1xuXHRcdFx0XHRcdGNvbnN0IGRpc3RTcSA9IGR4ICogZHggKyBkeSAqIGR5O1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2NhbGluZ0ZhY3RvclNxcnQgPSBNYXRoLm1heChcblx0XHRcdFx0XHRcdE1hdGguYWJzKCBjdXJyZW50UG9zLnggKSxcblx0XHRcdFx0XHRcdE1hdGguYWJzKCBjdXJyZW50UG9zLnkgKSxcblx0XHRcdFx0XHRcdE1hdGguYWJzKCBwcmV2UG9zLnggKSxcblx0XHRcdFx0XHRcdE1hdGguYWJzKCBwcmV2UG9zLnkgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y29uc3QgdGhlc2hvbGRTcVNjYWxlZCA9IFRIUkVTSE9MRF9TUSAqIHNjYWxpbmdGYWN0b3JTcXJ0ICogc2NhbGluZ0ZhY3RvclNxcnQ7XG5cdFx0XHRcdFx0aWYgKCBkaXN0U3EgPD0gdGhlc2hvbGRTcVNjYWxlZCApIHtcblxuXHRcdFx0XHRcdFx0cG9pbnRzLnNwbGljZSggY3VycmVudEluZGV4LCAxICk7XG5cdFx0XHRcdFx0XHRpIC0tO1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRwcmV2UG9zID0gY3VycmVudFBvcztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bWVyZ2VPdmVybGFwcGluZ1BvaW50cyggdmVydGljZXMgKTtcblx0XHRcdGhvbGVzLmZvckVhY2goIG1lcmdlT3ZlcmxhcHBpbmdQb2ludHMgKTtcblxuXHRcdFx0Y29uc3QgbnVtSG9sZXMgPSBob2xlcy5sZW5ndGg7XG5cblx0XHRcdC8qIFZlcnRpY2VzICovXG5cblx0XHRcdGNvbnN0IGNvbnRvdXIgPSB2ZXJ0aWNlczsgLy8gdmVydGljZXMgaGFzIGFsbCBwb2ludHMgYnV0IGNvbnRvdXIgaGFzIG9ubHkgcG9pbnRzIG9mIGNpcmN1bWZlcmVuY2VcblxuXHRcdFx0Zm9yICggbGV0IGggPSAwOyBoIDwgbnVtSG9sZXM7IGggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHRcdHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KCBhaG9sZSApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gc2NhbGVQdDIoIHB0LCB2ZWMsIHNpemUgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHZlYyApIGNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlR2VvbWV0cnk6IHZlYyBkb2VzIG5vdCBleGlzdCcgKTtcblxuXHRcdFx0XHRyZXR1cm4gcHQuY2xvbmUoKS5hZGRTY2FsZWRWZWN0b3IoIHZlYywgc2l6ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHZsZW4gPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblxuXHRcdFx0Ly8gRmluZCBkaXJlY3Rpb25zIGZvciBwb2ludCBtb3ZlbWVudFxuXG5cblx0XHRcdGZ1bmN0aW9uIGdldEJldmVsVmVjKCBpblB0LCBpblByZXYsIGluTmV4dCApIHtcblxuXHRcdFx0XHQvLyBjb21wdXRlcyBmb3IgaW5QdCB0aGUgY29ycmVzcG9uZGluZyBwb2ludCBpblB0JyBvbiBhIG5ldyBjb250b3VyXG5cdFx0XHRcdC8vICAgc2hpZnRlZCBieSAxIHVuaXQgKGxlbmd0aCBvZiBub3JtYWxpemVkIHZlY3RvcikgdG8gdGhlIGxlZnRcblx0XHRcdFx0Ly8gaWYgd2Ugd2FsayBhbG9uZyBjb250b3VyIGNsb2Nrd2lzZSwgdGhpcyBuZXcgY29udG91ciBpcyBvdXRzaWRlIHRoZSBvbGQgb25lXG5cdFx0XHRcdC8vXG5cdFx0XHRcdC8vIGluUHQnIGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBsaW5lcyBwYXJhbGxlbCB0byB0aGUgdHdvXG5cdFx0XHRcdC8vICBhZGphY2VudCBlZGdlcyBvZiBpblB0IGF0IGEgZGlzdGFuY2Ugb2YgMSB1bml0IG9uIHRoZSBsZWZ0IHNpZGUuXG5cblx0XHRcdFx0bGV0IHZfdHJhbnNfeCwgdl90cmFuc195LCBzaHJpbmtfYnk7IC8vIHJlc3VsdGluZyB0cmFuc2xhdGlvbiB2ZWN0b3IgZm9yIGluUHRcblxuXHRcdFx0XHQvLyBnb29kIHJlYWRpbmcgZm9yIGdlb21ldHJ5IGFsZ29yaXRobXMgKGhlcmU6IGxpbmUtbGluZSBpbnRlcnNlY3Rpb24pXG5cdFx0XHRcdC8vIGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTA1LV9pbnRlcnNlY3QtMS5odG1sXG5cblx0XHRcdFx0Y29uc3Qgdl9wcmV2X3ggPSBpblB0LnggLSBpblByZXYueCxcblx0XHRcdFx0XHR2X3ByZXZfeSA9IGluUHQueSAtIGluUHJldi55O1xuXHRcdFx0XHRjb25zdCB2X25leHRfeCA9IGluTmV4dC54IC0gaW5QdC54LFxuXHRcdFx0XHRcdHZfbmV4dF95ID0gaW5OZXh0LnkgLSBpblB0Lnk7XG5cblx0XHRcdFx0Y29uc3Qgdl9wcmV2X2xlbnNxID0gKCB2X3ByZXZfeCAqIHZfcHJldl94ICsgdl9wcmV2X3kgKiB2X3ByZXZfeSApO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGZvciBjb2xsaW5lYXIgZWRnZXNcblx0XHRcdFx0Y29uc3QgY29sbGluZWFyMCA9ICggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBjb2xsaW5lYXIwICkgPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdC8vIG5vdCBjb2xsaW5lYXJcblxuXHRcdFx0XHRcdC8vIGxlbmd0aCBvZiB2ZWN0b3JzIGZvciBub3JtYWxpemluZ1xuXG5cdFx0XHRcdFx0Y29uc3Qgdl9wcmV2X2xlbiA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cdFx0XHRcdFx0Y29uc3Qgdl9uZXh0X2xlbiA9IE1hdGguc3FydCggdl9uZXh0X3ggKiB2X25leHRfeCArIHZfbmV4dF95ICogdl9uZXh0X3kgKTtcblxuXHRcdFx0XHRcdC8vIHNoaWZ0IGFkamFjZW50IHBvaW50cyBieSB1bml0IHZlY3RvcnMgdG8gdGhlIGxlZnRcblxuXHRcdFx0XHRcdGNvbnN0IHB0UHJldlNoaWZ0X3ggPSAoIGluUHJldi54IC0gdl9wcmV2X3kgLyB2X3ByZXZfbGVuICk7XG5cdFx0XHRcdFx0Y29uc3QgcHRQcmV2U2hpZnRfeSA9ICggaW5QcmV2LnkgKyB2X3ByZXZfeCAvIHZfcHJldl9sZW4gKTtcblxuXHRcdFx0XHRcdGNvbnN0IHB0TmV4dFNoaWZ0X3ggPSAoIGluTmV4dC54IC0gdl9uZXh0X3kgLyB2X25leHRfbGVuICk7XG5cdFx0XHRcdFx0Y29uc3QgcHROZXh0U2hpZnRfeSA9ICggaW5OZXh0LnkgKyB2X25leHRfeCAvIHZfbmV4dF9sZW4gKTtcblxuXHRcdFx0XHRcdC8vIHNjYWxpbmcgZmFjdG9yIGZvciB2X3ByZXYgdG8gaW50ZXJzZWN0aW9uIHBvaW50XG5cblx0XHRcdFx0XHRjb25zdCBzZiA9ICggKCBwdE5leHRTaGlmdF94IC0gcHRQcmV2U2hpZnRfeCApICogdl9uZXh0X3kgLVxuXHRcdFx0XHRcdFx0XHQoIHB0TmV4dFNoaWZ0X3kgLSBwdFByZXZTaGlmdF95ICkgKiB2X25leHRfeCApIC9cblx0XHRcdFx0XHRcdCggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHRcdC8vIHZlY3RvciBmcm9tIGluUHQgdG8gaW50ZXJzZWN0aW9uIHBvaW50XG5cblx0XHRcdFx0XHR2X3RyYW5zX3ggPSAoIHB0UHJldlNoaWZ0X3ggKyB2X3ByZXZfeCAqIHNmIC0gaW5QdC54ICk7XG5cdFx0XHRcdFx0dl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qgbm9ybWFsaXplISwgb3RoZXJ3aXNlIHNoYXJwIGNvcm5lcnMgYmVjb21lIHVnbHlcblx0XHRcdFx0XHQvLyAgYnV0IHByZXZlbnQgY3Jhenkgc3Bpa2VzXG5cdFx0XHRcdFx0Y29uc3Qgdl90cmFuc19sZW5zcSA9ICggdl90cmFuc194ICogdl90cmFuc194ICsgdl90cmFuc195ICogdl90cmFuc195ICk7XG5cdFx0XHRcdFx0aWYgKCB2X3RyYW5zX2xlbnNxIDw9IDIgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194LCB2X3RyYW5zX3kgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl90cmFuc19sZW5zcSAvIDIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIHNwZWNpYWwgY2FzZSBvZiBjb2xsaW5lYXIgZWRnZXNcblxuXHRcdFx0XHRcdGxldCBkaXJlY3Rpb25fZXEgPSBmYWxzZTsgLy8gYXNzdW1lczogb3Bwb3NpdGVcblxuXHRcdFx0XHRcdGlmICggdl9wcmV2X3ggPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB2X25leHRfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGlmICggdl9wcmV2X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdl9uZXh0X3ggPCAtIE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBNYXRoLnNpZ24oIHZfcHJldl95ICkgPT09IE1hdGguc2lnbiggdl9uZXh0X3kgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGRpcmVjdGlvbl9lcSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzZXF1ZW5jZVwiKTtcblx0XHRcdFx0XHRcdHZfdHJhbnNfeCA9IC0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0XHR2X3RyYW5zX3kgPSB2X3ByZXZfeDtcblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNwaWtlXCIpO1xuXHRcdFx0XHRcdFx0dl90cmFuc194ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0XHR2X3RyYW5zX3kgPSB2X3ByZXZfeTtcblx0XHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxIC8gMiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoIHZfdHJhbnNfeCAvIHNocmlua19ieSwgdl90cmFuc195IC8gc2hyaW5rX2J5ICk7XG5cblx0XHRcdH1cblxuXG5cdFx0XHRjb25zdCBjb250b3VyTW92ZW1lbnRzID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBqID09PSBpbCApIGogPSAwO1xuXHRcdFx0XHRpZiAoIGsgPT09IGlsICkgayA9IDA7XG5cblx0XHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZygnaSxqLGsnLCBpLCBqICwgaylcblxuXHRcdFx0XHRjb250b3VyTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggY29udG91clsgaSBdLCBjb250b3VyWyBqIF0sIGNvbnRvdXJbIGsgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGhvbGVzTW92ZW1lbnRzID0gW107XG5cdFx0XHRsZXQgb25lSG9sZU1vdmVtZW50cywgdmVydGljZXNNb3ZlbWVudHMgPSBjb250b3VyTW92ZW1lbnRzLmNvbmNhdCgpO1xuXG5cdFx0XHRmb3IgKCBsZXQgaCA9IDAsIGhsID0gbnVtSG9sZXM7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGgsIGogPSBpbCAtIDEsIGsgPSBpICsgMTsgaSA8IGlsOyBpICsrLCBqICsrLCBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBqID09PSBpbCApIGogPSAwO1xuXHRcdFx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0XHRcdC8vICAoaiktLS0oaSktLS0oaylcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzWyBpIF0gPSBnZXRCZXZlbFZlYyggYWhvbGVbIGkgXSwgYWhvbGVbIGogXSwgYWhvbGVbIGsgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRob2xlc01vdmVtZW50cy5wdXNoKCBvbmVIb2xlTW92ZW1lbnRzICk7XG5cdFx0XHRcdHZlcnRpY2VzTW92ZW1lbnRzID0gdmVydGljZXNNb3ZlbWVudHMuY29uY2F0KCBvbmVIb2xlTW92ZW1lbnRzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY29udHJhY3RlZENvbnRvdXJWZXJ0aWNlcyA9IFtdO1xuXHRcdFx0Y29uc3QgZXhwYW5kZWRIb2xlVmVydGljZXMgPSBbXTtcblxuXHRcdFx0Ly8gTG9vcCBiZXZlbFNlZ21lbnRzLCAxIGZvciB0aGUgZnJvbnQsIDEgZm9yIHRoZSBiYWNrXG5cblx0XHRcdGZvciAoIGxldCBiID0gMDsgYiA8IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cblx0XHRcdFx0Ly9mb3IgKCBiID0gYmV2ZWxTZWdtZW50czsgYiA+IDA7IGIgLS0gKSB7XG5cblx0XHRcdFx0Y29uc3QgdCA9IGIgLyBiZXZlbFNlZ21lbnRzO1xuXHRcdFx0XHRjb25zdCB6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XG5cdFx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdFx0Ly8gY29udHJhY3Qgc2hhcGVcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cdFx0XHRcdFx0aWYgKCB0ID09IDAgKSBjb250cmFjdGVkQ29udG91clZlcnRpY2VzLnB1c2goIHZlcnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gZXhwYW5kIGhvbGVzXG5cblx0XHRcdFx0Zm9yICggbGV0IGggPSAwLCBobCA9IG51bUhvbGVzOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzWyBoIF07XG5cdFx0XHRcdFx0Y29uc3Qgb25lSG9sZVZlcnRpY2VzID0gW107XG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gc2NhbGVQdDIoIGFob2xlWyBpIF0sIG9uZUhvbGVNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0ID09IDAgKSBvbmVIb2xlVmVydGljZXMucHVzaCggdmVydCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCB0ID09IDAgKSBleHBhbmRlZEhvbGVWZXJ0aWNlcy5wdXNoKCBvbmVIb2xlVmVydGljZXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUoIGNvbnRyYWN0ZWRDb250b3VyVmVydGljZXMsIGV4cGFuZGVkSG9sZVZlcnRpY2VzICk7XG5cblx0XHRcdGNvbnN0IGZsZW4gPSBmYWNlcy5sZW5ndGg7XG5cblx0XHRcdGNvbnN0IGJzID0gYmV2ZWxTaXplICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdC8vIEJhY2sgZmFjaW5nIHZlcnRpY2VzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgdmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCAwICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgMCBdLnksIGV4dHJ1ZGVQdHNbIDAgXS54ICk7XG5cblx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyAwIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRcdHBvc2l0aW9uMi5jb3B5KCBleHRydWRlUHRzWyAwIF0gKS5hZGQoIG5vcm1hbCApLmFkZCggYmlub3JtYWwgKTtcblxuXHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHN0ZXBwZWQgdmVydGljZXMuLi5cblx0XHRcdC8vIEluY2x1ZGluZyBmcm9udCBmYWNpbmcgdmVydGljZXNcblxuXHRcdFx0Zm9yICggbGV0IHMgPSAxOyBzIDw9IHN0ZXBzOyBzICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCAvIHN0ZXBzICogcyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueCApO1xuXG5cdFx0XHRcdFx0XHRub3JtYWwuY29weSggc3BsaW5lVHViZS5ub3JtYWxzWyBzIF0gKS5tdWx0aXBseVNjYWxhciggdmVydC54ICk7XG5cdFx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgcyBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0XHRcdHYoIHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnogKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXG5cdFx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXG5cblx0XHRcdC8vZm9yICggYiA9IDE7IGIgPD0gYmV2ZWxTZWdtZW50czsgYiArKyApIHtcblx0XHRcdGZvciAoIGxldCBiID0gYmV2ZWxTZWdtZW50cyAtIDE7IGIgPj0gMDsgYiAtLSApIHtcblxuXHRcdFx0XHRjb25zdCB0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHRcdGNvbnN0IHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdFx0Y29uc3QgYnMgPSBiZXZlbFNpemUgKiBNYXRoLnNpbiggdCAqIE1hdGguUEkgLyAyICkgKyBiZXZlbE9mZnNldDtcblxuXHRcdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbIGggXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBhaG9sZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0XHRcdHYoIHZlcnQueCwgdmVydC55LCBkZXB0aCArIHogKTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHN0ZXBzIC0gMSBdLnggKyB6ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0LyogRmFjZXMgKi9cblxuXHRcdFx0Ly8gVG9wIGFuZCBib3R0b20gZmFjZXNcblxuXHRcdFx0YnVpbGRMaWRGYWNlcygpO1xuXG5cdFx0XHQvLyBTaWRlcyBmYWNlc1xuXG5cdFx0XHRidWlsZFNpZGVGYWNlcygpO1xuXG5cblx0XHRcdC8vLy8vICBJbnRlcm5hbCBmdW5jdGlvbnNcblxuXHRcdFx0ZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHtcblxuXHRcdFx0XHRjb25zdCBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblxuXHRcdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHRcdGxldCBsYXllciA9IDA7IC8vIHN0ZXBzICsgMVxuXHRcdFx0XHRcdGxldCBvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDIgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAwIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxheWVyID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcblx0XHRcdFx0XHRvZmZzZXQgPSB2bGVuICogbGF5ZXI7XG5cblx0XHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIG9mZnNldCwgZmFjZVsgMSBdICsgb2Zmc2V0LCBmYWNlWyAyIF0gKyBvZmZzZXQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gQm90dG9tIGZhY2VzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBmbGVuOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRcdGYzKCBmYWNlWyAyIF0sIGZhY2VbIDEgXSwgZmFjZVsgMCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGZhY2UgPSBmYWNlc1sgaSBdO1xuXHRcdFx0XHRcdFx0ZjMoIGZhY2VbIDAgXSArIHZsZW4gKiBzdGVwcywgZmFjZVsgMSBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAyIF0gKyB2bGVuICogc3RlcHMgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIENyZWF0ZSBmYWNlcyBmb3IgdGhlIHotc2lkZXMgb2YgdGhlIHNoYXBlXG5cblx0XHRcdGZ1bmN0aW9uIGJ1aWxkU2lkZUZhY2VzKCkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXHRcdFx0XHRsZXQgbGF5ZXJvZmZzZXQgPSAwO1xuXHRcdFx0XHRzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICk7XG5cdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIGxldCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGFob2xlID0gaG9sZXNbIGggXTtcblx0XHRcdFx0XHRzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApO1xuXG5cdFx0XHRcdFx0Ly8sIHRydWVcblx0XHRcdFx0XHRsYXllcm9mZnNldCArPSBhaG9sZS5sZW5ndGg7XG5cblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0c2NvcGUuYWRkR3JvdXAoIHN0YXJ0LCB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDMgLSBzdGFydCwgMSApO1xuXG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApIHtcblxuXHRcdFx0XHRsZXQgaSA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgaiA9IGk7XG5cdFx0XHRcdFx0bGV0IGsgPSBpIC0gMTtcblx0XHRcdFx0XHRpZiAoIGsgPCAwICkgayA9IGNvbnRvdXIubGVuZ3RoIC0gMTtcblxuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IHMgPSAwLCBzbCA9ICggc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMiApOyBzIDwgc2w7IHMgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IHNsZW4xID0gdmxlbiAqIHM7XG5cdFx0XHRcdFx0XHRjb25zdCBzbGVuMiA9IHZsZW4gKiAoIHMgKyAxICk7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGEgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMSxcblx0XHRcdFx0XHRcdFx0YiA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4xLFxuXHRcdFx0XHRcdFx0XHRjID0gbGF5ZXJvZmZzZXQgKyBrICsgc2xlbjIsXG5cdFx0XHRcdFx0XHRcdGQgPSBsYXllcm9mZnNldCArIGogKyBzbGVuMjtcblxuXHRcdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gdiggeCwgeSwgeiApIHtcblxuXHRcdFx0XHRwbGFjZWhvbGRlci5wdXNoKCB4ICk7XG5cdFx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHkgKTtcblx0XHRcdFx0cGxhY2Vob2xkZXIucHVzaCggeiApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblxuXHRcdFx0XHRjb25zdCBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlVG9wVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdFx0YWRkVVYoIHV2c1sgMCBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHtcblxuXHRcdFx0XHRhZGRWZXJ0ZXgoIGEgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cdFx0XHRcdGFkZFZlcnRleCggYiApO1xuXHRcdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblx0XHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblxuXHRcdFx0XHRjb25zdCBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XG5cdFx0XHRcdGNvbnN0IHV2cyA9IHV2Z2VuLmdlbmVyYXRlU2lkZVdhbGxVViggc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDYsIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEgKTtcblxuXHRcdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblx0XHRcdFx0YWRkVVYoIHV2c1sgMyBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHtcblxuXHRcdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAwIF0gKTtcblx0XHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMSBdICk7XG5cdFx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0ZnVuY3Rpb24gYWRkVVYoIHZlY3RvcjIgKSB7XG5cblx0XHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTtcblx0XHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdFx0cmV0dXJuIHRvSlNPTiQxKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcGFyYW0ge0FycmF5PFNoYXBlPn0gc2hhcGVzIC0gQW4gYXJyYXkgb2Ygc2hhcGVzLlxuXHQgKiBAcmV0dXJuIHtFeHRydWRlR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IGRhdGEuc2hhcGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRjb25zdCBzaGFwZSA9IHNoYXBlc1sgZGF0YS5zaGFwZXNbIGogXSBdO1xuXG5cdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZXh0cnVkZVBhdGggPSBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGg7XG5cblx0XHRpZiAoIGV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG5ldyBDdXJ2ZXNbIGV4dHJ1ZGVQYXRoLnR5cGUgXSgpLmZyb21KU09OKCBleHRydWRlUGF0aCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBFeHRydWRlR2VvbWV0cnkoIGdlb21ldHJ5U2hhcGVzLCBkYXRhLm9wdGlvbnMgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgV29ybGRVVkdlbmVyYXRvciA9IHtcblxuXHRnZW5lcmF0ZVRvcFVWOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCB2ZXJ0aWNlcywgaW5kZXhBLCBpbmRleEIsIGluZGV4QyApIHtcblxuXHRcdGNvbnN0IGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XG5cdFx0Y29uc3QgYV95ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAxIF07XG5cdFx0Y29uc3QgYl94ID0gdmVydGljZXNbIGluZGV4QiAqIDMgXTtcblx0XHRjb25zdCBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcblx0XHRjb25zdCBjX3ggPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyBdO1xuXHRcdGNvbnN0IGNfeSA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMSBdO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIGFfeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgYl95ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggY194LCBjX3kgKVxuXHRcdF07XG5cblx0fSxcblxuXHRnZW5lcmF0ZVNpZGVXYWxsVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDLCBpbmRleEQgKSB7XG5cblx0XHRjb25zdCBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdGNvbnN0IGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGFfeiA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMiBdO1xuXHRcdGNvbnN0IGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0Y29uc3QgYl95ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAxIF07XG5cdFx0Y29uc3QgYl96ID0gdmVydGljZXNbIGluZGV4QiAqIDMgKyAyIF07XG5cdFx0Y29uc3QgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHRjb25zdCBjX3kgPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDEgXTtcblx0XHRjb25zdCBjX3ogPSB2ZXJ0aWNlc1sgaW5kZXhDICogMyArIDIgXTtcblx0XHRjb25zdCBkX3ggPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyBdO1xuXHRcdGNvbnN0IGRfeSA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMSBdO1xuXHRcdGNvbnN0IGRfeiA9IHZlcnRpY2VzWyBpbmRleEQgKiAzICsgMiBdO1xuXG5cdFx0aWYgKCBNYXRoLmFicyggYV95IC0gYl95ICkgPCBNYXRoLmFicyggYV94IC0gYl94ICkgKSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY194LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3ksIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeSwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY195LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3ksIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbmZ1bmN0aW9uIHRvSlNPTiQxKCBzaGFwZXMsIG9wdGlvbnMsIGRhdGEgKSB7XG5cblx0ZGF0YS5zaGFwZXMgPSBbXTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0ZGF0YS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbigge30sIG9wdGlvbnMgKTtcblxuXHRpZiAoIG9wdGlvbnMuZXh0cnVkZVBhdGggIT09IHVuZGVmaW5lZCApIGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG9wdGlvbnMuZXh0cnVkZVBhdGgudG9KU09OKCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn1cblxuLyoqXG4gKiBBIGdlb21ldHJ5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgYW4gaWNvc2FoZWRyb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkoKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmYwMCB9ICk7XG4gKiBjb25zdCBpY29zYWhlZHJvbiA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggaWNvc2FoZWRyb24gKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBQb2x5aGVkcm9uR2VvbWV0cnlcbiAqL1xuY2xhc3MgSWNvc2FoZWRyb25HZW9tZXRyeSBleHRlbmRzIFBvbHloZWRyb25HZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgaWNvc2FoZWRyb24gZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXVzPTFdIC0gUmFkaXVzIG9mIHRoZSBpY29zYWhlZHJvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWw9MF0gLSBTZXR0aW5nIHRoaXMgdG8gYSB2YWx1ZSBncmVhdGVyIHRoYW4gYDBgIGFkZHMgdmVydGljZXMgbWFraW5nIGl0IG5vIGxvbmdlciBhIGljb3NhaGVkcm9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRjb25zdCB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtcblx0XHRcdC0xLCB0LCAwLCBcdDEsIHQsIDAsIFx0LTEsIC0gdCwgMCwgXHQxLCAtIHQsIDAsXG5cdFx0XHQwLCAtMSwgdCwgXHQwLCAxLCB0LFx0MCwgLTEsIC0gdCwgXHQwLCAxLCAtIHQsXG5cdFx0XHR0LCAwLCAtMSwgXHR0LCAwLCAxLCBcdC0gdCwgMCwgLTEsIFx0LSB0LCAwLCAxXG5cdFx0XTtcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXG5cdFx0XHQwLCAxMSwgNSwgXHQwLCA1LCAxLCBcdDAsIDEsIDcsIFx0MCwgNywgMTAsIFx0MCwgMTAsIDExLFxuXHRcdFx0MSwgNSwgOSwgXHQ1LCAxMSwgNCxcdDExLCAxMCwgMixcdDEwLCA3LCA2LFx0NywgMSwgOCxcblx0XHRcdDMsIDksIDQsIFx0MywgNCwgMixcdDMsIDIsIDYsXHQzLCA2LCA4LFx0MywgOCwgOSxcblx0XHRcdDQsIDksIDUsIFx0MiwgNCwgMTEsXHQ2LCAyLCAxMCxcdDgsIDYsIDcsXHQ5LCA4LCAxXG5cdFx0XTtcblxuXHRcdHN1cGVyKCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdJY29zYWhlZHJvbkdlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0ZGV0YWlsOiBkZXRhaWxcblx0XHR9O1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSB0aGUgZ2l2ZW5cblx0ICogSlNPTiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZ2VvbWV0cnkuXG5cdCAqIEByZXR1cm4ge0ljb3NhaGVkcm9uR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBJY29zYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGdlb21ldHJ5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgYW4gb2N0YWhlZHJvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuT2N0YWhlZHJvbkdlb21ldHJ5KCk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuICogY29uc3Qgb2N0YWhlZHJvbiA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggb2N0YWhlZHJvbiApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIFBvbHloZWRyb25HZW9tZXRyeVxuICovXG5jbGFzcyBPY3RhaGVkcm9uR2VvbWV0cnkgZXh0ZW5kcyBQb2x5aGVkcm9uR2VvbWV0cnkge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG9jdGFoZWRyb24gZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXVzPTFdIC0gUmFkaXVzIG9mIHRoZSBvY3RhaGVkcm9uLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RldGFpbD0wXSAtIFNldHRpbmcgdGhpcyB0byBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBgMGAgYWRkcyB2ZXJ0aWNlcyBtYWtpbmcgaXQgbm8gbG9uZ2VyIGEgb2N0YWhlZHJvbi5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxLCBkZXRhaWwgPSAwICkge1xuXG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXG5cdFx0XHQxLCAwLCAwLCBcdC0xLCAwLCAwLFx0MCwgMSwgMCxcblx0XHRcdDAsIC0xLCAwLCBcdDAsIDAsIDEsXHQwLCAwLCAtMVxuXHRcdF07XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW1xuXHRcdFx0MCwgMiwgNCxcdDAsIDQsIDMsXHQwLCAzLCA1LFxuXHRcdFx0MCwgNSwgMixcdDEsIDIsIDUsXHQxLCA1LCAzLFxuXHRcdFx0MSwgMywgNCxcdDEsIDQsIDJcblx0XHRdO1xuXG5cdFx0c3VwZXIoIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25HZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdGRldGFpbDogZGV0YWlsXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtPY3RhaGVkcm9uR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBPY3RhaGVkcm9uR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLmRldGFpbCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgZ2VvbWV0cnkgY2xhc3MgZm9yIHJlcHJlc2VudGluZyBhIHBsYW5lLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KCAxLCAxICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAsIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGUgfSApO1xuICogY29uc3QgcGxhbmUgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIHBsYW5lICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgUGxhbmVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwbGFuZSBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXSAtIFRoZSB3aWR0aCBhbG9uZyB0aGUgWCBheGlzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgYWxvbmcgdGhlIFkgYXhpc1xuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoU2VnbWVudHM9MV0gLSBUaGUgbnVtYmVyIG9mIHNlZ21lbnRzIGFsb25nIHRoZSBYIGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaGVpZ2h0U2VnbWVudHM9MV0gLSBUaGUgbnVtYmVyIG9mIHNlZ21lbnRzIGFsb25nIHRoZSBZIGF4aXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCB3aWR0aFNlZ21lbnRzID0gMSwgaGVpZ2h0U2VnbWVudHMgPSAxICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdGhlaWdodDogaGVpZ2h0LFxuXHRcdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50c1xuXHRcdH07XG5cblx0XHRjb25zdCB3aWR0aF9oYWxmID0gd2lkdGggLyAyO1xuXHRcdGNvbnN0IGhlaWdodF9oYWxmID0gaGVpZ2h0IC8gMjtcblxuXHRcdGNvbnN0IGdyaWRYID0gTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApO1xuXHRcdGNvbnN0IGdyaWRZID0gTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKTtcblxuXHRcdGNvbnN0IGdyaWRYMSA9IGdyaWRYICsgMTtcblx0XHRjb25zdCBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0XHRjb25zdCBzZWdtZW50X3dpZHRoID0gd2lkdGggLyBncmlkWDtcblx0XHRjb25zdCBzZWdtZW50X2hlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSArKyApIHtcblxuXHRcdFx0Y29uc3QgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjtcblxuXHRcdFx0Zm9yICggbGV0IGl4ID0gMDsgaXggPCBncmlkWDE7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIC0geSwgMCApO1xuXG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHRcdHV2cy5wdXNoKCBpeCAvIGdyaWRYICk7XG5cdFx0XHRcdHV2cy5wdXNoKCAxIC0gKCBpeSAvIGdyaWRZICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBncmlkWTsgaXkgKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0XHRjb25zdCBiID0gaXggKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0XHRjb25zdCBjID0gKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdGNvbnN0IGQgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBKU09OIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS5cblx0ICogQHJldHVybiB7UGxhbmVHZW9tZXRyeX0gQSBuZXcgaW5zdGFuY2UuXG5cdCAqL1xuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEgKSB7XG5cblx0XHRyZXR1cm4gbmV3IFBsYW5lR2VvbWV0cnkoIGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0LCBkYXRhLndpZHRoU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIGZvciBnZW5lcmF0aW5nIGEgdHdvLWRpbWVuc2lvbmFsIHJpbmcgZ2VvbWV0cnkuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlJpbmdHZW9tZXRyeSggMSwgNSwgMzIgKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmYwMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZSB9ICk7XG4gKiBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogc2NlbmUuYWRkKCBtZXNoICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgUmluZ0dlb21ldHJ5IGV4dGVuZHMgQnVmZmVyR2VvbWV0cnkge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJpbmcgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaW5uZXJSYWRpdXM9MC41XSAtIFRoZSBpbm5lciByYWRpdXMgb2YgdGhlIHJpbmcuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb3V0ZXJSYWRpdXM9MV0gLSBUaGUgb3V0ZXIgcmFkaXVzIG9mIHRoZSByaW5nLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3RoZXRhU2VnbWVudHM9MzJdIC0gTnVtYmVyIG9mIHNlZ21lbnRzLiBBIGhpZ2hlciBudW1iZXIgbWVhbnMgdGhlIHJpbmcgd2lsbCBiZSBtb3JlIHJvdW5kLiBNaW5pbXVtIGlzIGAzYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtwaGlTZWdtZW50cz0xXSAtIE51bWJlciBvZiBzZWdtZW50cyBwZXIgcmluZyBzZWdtZW50LiBNaW5pbXVtIGlzIGAxYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0aGV0YVN0YXJ0PTBdIC0gU3RhcnRpbmcgYW5nbGUgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0aGV0YUxlbmd0aD1NYXRoLlBJKjJdIC0gQ2VudHJhbCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGlubmVyUmFkaXVzID0gMC41LCBvdXRlclJhZGl1cyA9IDEsIHRoZXRhU2VnbWVudHMgPSAzMiwgcGhpU2VnbWVudHMgPSAxLCB0aGV0YVN0YXJ0ID0gMCwgdGhldGFMZW5ndGggPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnUmluZ0dlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHRcdHRoZXRhU2VnbWVudHM6IHRoZXRhU2VnbWVudHMsXG5cdFx0XHRwaGlTZWdtZW50czogcGhpU2VnbWVudHMsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHRoZXRhU2VnbWVudHMgPSBNYXRoLm1heCggMywgdGhldGFTZWdtZW50cyApO1xuXHRcdHBoaVNlZ21lbnRzID0gTWF0aC5tYXgoIDEsIHBoaVNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBzb21lIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCByYWRpdXMgPSBpbm5lclJhZGl1cztcblx0XHRjb25zdCByYWRpdXNTdGVwID0gKCAoIG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMgKSAvIHBoaVNlZ21lbnRzICk7XG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8PSB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIHZhbHVlcyBhcmUgZ2VuZXJhdGUgZnJvbSB0aGUgaW5zaWRlIG9mIHRoZSByaW5nIHRvIHRoZSBvdXRzaWRlXG5cblx0XHRcdFx0Y29uc3Qgc2VnbWVudCA9IHRoZXRhU3RhcnQgKyBpIC8gdGhldGFTZWdtZW50cyAqIHRoZXRhTGVuZ3RoO1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogTWF0aC5jb3MoIHNlZ21lbnQgKTtcblx0XHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbiggc2VnbWVudCApO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2LnggPSAoIHZlcnRleC54IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXHRcdFx0XHR1di55ID0gKCB2ZXJ0ZXgueSAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblxuXHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluY3JlYXNlIHRoZSByYWRpdXMgZm9yIG5leHQgcm93IG9mIHZlcnRpY2VzXG5cblx0XHRcdHJhZGl1cyArPSByYWRpdXNTdGVwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGNvbnN0IHRoZXRhU2VnbWVudExldmVsID0gaiAqICggdGhldGFTZWdtZW50cyArIDEgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhldGFTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzZWdtZW50ID0gaSArIHRoZXRhU2VnbWVudExldmVsO1xuXG5cdFx0XHRcdGNvbnN0IGEgPSBzZWdtZW50O1xuXHRcdFx0XHRjb25zdCBiID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAxO1xuXHRcdFx0XHRjb25zdCBjID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAyO1xuXHRcdFx0XHRjb25zdCBkID0gc2VnbWVudCArIDE7XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBKU09OIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS5cblx0ICogQHJldHVybiB7UmluZ0dlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgUmluZ0dlb21ldHJ5KCBkYXRhLmlubmVyUmFkaXVzLCBkYXRhLm91dGVyUmFkaXVzLCBkYXRhLnRoZXRhU2VnbWVudHMsIGRhdGEucGhpU2VnbWVudHMsIGRhdGEudGhldGFTdGFydCwgZGF0YS50aGV0YUxlbmd0aCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gb25lLXNpZGVkIHBvbHlnb25hbCBnZW9tZXRyeSBmcm9tIG9uZSBvciBtb3JlIHBhdGggc2hhcGVzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBhcmNTaGFwZSA9IG5ldyBUSFJFRS5TaGFwZSgpXG4gKlx0Lm1vdmVUbyggNSwgMSApXG4gKlx0LmFic2FyYyggMSwgMSwgNCwgMCwgTWF0aC5QSSAqIDIsIGZhbHNlICk7XG4gKlxuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU2hhcGVHZW9tZXRyeSggYXJjU2hhcGUgKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweDAwZmYwMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZSB9ICk7XG4gKiBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApIDtcbiAqIHNjZW5lLmFkZCggbWVzaCApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIEJ1ZmZlckdlb21ldHJ5XG4gKi9cbmNsYXNzIFNoYXBlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc2hhcGUgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U2hhcGV8QXJyYXk8U2hhcGU+fSBbc2hhcGVzXSAtIEEgc2hhcGUgb3IgYW4gYXJyYXkgb2Ygc2hhcGVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2N1cnZlU2VnbWVudHM9MTJdIC0gTnVtYmVyIG9mIHNlZ21lbnRzIHBlciBzaGFwZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzaGFwZXMgPSBuZXcgU2hhcGUoIFsgbmV3IFZlY3RvcjIoIDAsIDAuNSApLCBuZXcgVmVjdG9yMiggLTAuNSwgLTAuNSApLCBuZXcgVmVjdG9yMiggMC41LCAtMC41ICkgXSApLCBjdXJ2ZVNlZ21lbnRzID0gMTIgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NoYXBlR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW5cblx0XHQgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvblxuXHRcdCAqIGFmdGVyIGluc3RhbnRpYXRpb24gZG9lcyBub3QgY2hhbmdlIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdFx0fTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGxldCBncm91cFN0YXJ0ID0gMDtcblx0XHRsZXQgZ3JvdXBDb3VudCA9IDA7XG5cblx0XHQvLyBhbGxvdyBzaW5nbGUgYW5kIGFycmF5IHZhbHVlcyBmb3IgXCJzaGFwZXNcIiBwYXJhbWV0ZXJcblxuXHRcdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRhZGRTaGFwZSggc2hhcGVzICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBzaGFwZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGFkZFNoYXBlKCBzaGFwZXNbIGkgXSApO1xuXG5cdFx0XHRcdHRoaXMuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIGkgKTsgLy8gZW5hYmxlcyBNdWx0aU1hdGVyaWFsIHN1cHBvcnRcblxuXHRcdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cdFx0XHRcdGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXG5cdFx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gYWRkU2hhcGUoIHNoYXBlICkge1xuXG5cdFx0XHRjb25zdCBpbmRleE9mZnNldCA9IHZlcnRpY2VzLmxlbmd0aCAvIDM7XG5cdFx0XHRjb25zdCBwb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHRcdGxldCBzaGFwZVZlcnRpY2VzID0gcG9pbnRzLnNoYXBlO1xuXHRcdFx0Y29uc3Qgc2hhcGVIb2xlcyA9IHBvaW50cy5ob2xlcztcblxuXHRcdFx0Ly8gY2hlY2sgZGlyZWN0aW9uIG9mIHZlcnRpY2VzXG5cblx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggc2hhcGVWZXJ0aWNlcyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5yZXZlcnNlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHNoYXBlSG9sZSApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c2hhcGVIb2xlc1sgaSBdID0gc2hhcGVIb2xlLnJldmVyc2UoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUoIHNoYXBlVmVydGljZXMsIHNoYXBlSG9sZXMgKTtcblxuXHRcdFx0Ly8gam9pbiB2ZXJ0aWNlcyBvZiBpbm5lciBhbmQgb3V0ZXIgcGF0aHMgdG8gYSBzaW5nbGUgYXJyYXlcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbIGkgXTtcblx0XHRcdFx0c2hhcGVWZXJ0aWNlcyA9IHNoYXBlVmVydGljZXMuY29uY2F0KCBzaGFwZUhvbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzXG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHNoYXBlVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2ZXJ0ZXggPSBzaGFwZVZlcnRpY2VzWyBpIF07XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCAwICk7XG5cdFx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXHRcdFx0XHR1dnMucHVzaCggdmVydGV4LngsIHZlcnRleC55ICk7IC8vIHdvcmxkIHV2c1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZmFjZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBhID0gZmFjZVsgMCBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGIgPSBmYWNlWyAxIF0gKyBpbmRleE9mZnNldDtcblx0XHRcdFx0Y29uc3QgYyA9IGZhY2VbIDIgXSArIGluZGV4T2Zmc2V0O1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYyApO1xuXHRcdFx0XHRncm91cENvdW50ICs9IDM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCk7XG5cblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdFx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBkYXRhICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBKU09OIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS5cblx0ICogQHBhcmFtIHtBcnJheTxTaGFwZT59IHNoYXBlcyAtIEFuIGFycmF5IG9mIHNoYXBlcy5cblx0ICogQHJldHVybiB7U2hhcGVHZW9tZXRyeX0gQSBuZXcgaW5zdGFuY2UuXG5cdCAqL1xuXHRzdGF0aWMgZnJvbUpTT04oIGRhdGEsIHNoYXBlcyApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5U2hhcGVzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaiA9IDAsIGpsID0gZGF0YS5zaGFwZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBkYXRhLnNoYXBlc1sgaiBdIF07XG5cblx0XHRcdGdlb21ldHJ5U2hhcGVzLnB1c2goIHNoYXBlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IFNoYXBlR2VvbWV0cnkoIGdlb21ldHJ5U2hhcGVzLCBkYXRhLmN1cnZlU2VnbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gdG9KU09OKCBzaGFwZXMsIGRhdGEgKSB7XG5cblx0ZGF0YS5zaGFwZXMgPSBbXTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHNoYXBlID0gc2hhcGVzWyBpIF07XG5cblx0XHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlLnV1aWQgKTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGVzLnV1aWQgKTtcblxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIGZvciBnZW5lcmF0aW5nIGEgc3BoZXJlIGdlb21ldHJ5LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSggMTUsIDMyLCAxNiApO1xuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZjAwIH0gKTtcbiAqIGNvbnN0IHNwaGVyZSA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggc3BoZXJlICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgU3BoZXJlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3BoZXJlIGdlb21ldHJ5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0xXSAtIFRoZSBzcGhlcmUgcmFkaXVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoU2VnbWVudHM9MzJdIC0gVGhlIG51bWJlciBvZiBob3Jpem9udGFsIHNlZ21lbnRzLiBNaW5pbXVtIHZhbHVlIGlzIGAzYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHRTZWdtZW50cz0xNl0gLSBUaGUgbnVtYmVyIG9mIHZlcnRpY2FsIHNlZ21lbnRzLiBNaW5pbXVtIHZhbHVlIGlzIGAyYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtwaGlTdGFydD0wXSAtIFRoZSBob3Jpem9udGFsIHN0YXJ0aW5nIGFuZ2xlIGluIHJhZGlhbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcGhpTGVuZ3RoPU1hdGguUEkqMl0gLSBUaGUgaG9yaXpvbnRhbCBzd2VlcCBhbmdsZSBzaXplLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3RoZXRhU3RhcnQ9MF0gLSBUaGUgdmVydGljYWwgc3RhcnRpbmcgYW5nbGUgaW4gcmFkaWFucy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0aGV0YUxlbmd0aD1NYXRoLlBJXSAtIFRoZSB2ZXJ0aWNhbCBzd2VlcCBhbmdsZSBzaXplLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHdpZHRoU2VnbWVudHMgPSAzMiwgaGVpZ2h0U2VnbWVudHMgPSAxNiwgcGhpU3RhcnQgPSAwLCBwaGlMZW5ndGggPSBNYXRoLlBJICogMiwgdGhldGFTdGFydCA9IDAsIHRoZXRhTGVuZ3RoID0gTWF0aC5QSSApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BoZXJlR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW5cblx0XHQgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvblxuXHRcdCAqIGFmdGVyIGluc3RhbnRpYXRpb24gZG9lcyBub3QgY2hhbmdlIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxuXHRcdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGgsXG5cdFx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdFx0fTtcblxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLm1heCggMywgTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApICk7XG5cdFx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCggMiwgTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSApO1xuXG5cdFx0Y29uc3QgdGhldGFFbmQgPSBNYXRoLm1pbiggdGhldGFTdGFydCArIHRoZXRhTGVuZ3RoLCBNYXRoLlBJICk7XG5cblx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdGNvbnN0IGdyaWQgPSBbXTtcblxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIGxldCBpeSA9IDA7IGl5IDw9IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdFx0Y29uc3QgdmVydGljZXNSb3cgPSBbXTtcblxuXHRcdFx0Y29uc3QgdiA9IGl5IC8gaGVpZ2h0U2VnbWVudHM7XG5cblx0XHRcdC8vIHNwZWNpYWwgY2FzZSBmb3IgdGhlIHBvbGVzXG5cblx0XHRcdGxldCB1T2Zmc2V0ID0gMDtcblxuXHRcdFx0aWYgKCBpeSA9PT0gMCAmJiB0aGV0YVN0YXJ0ID09PSAwICkge1xuXG5cdFx0XHRcdHVPZmZzZXQgPSAwLjUgLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpeSA9PT0gaGVpZ2h0U2VnbWVudHMgJiYgdGhldGFFbmQgPT09IE1hdGguUEkgKSB7XG5cblx0XHRcdFx0dU9mZnNldCA9IC0wLjUgLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDw9IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHUgPSBpeCAvIHdpZHRoU2VnbWVudHM7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSAtIHJhZGl1cyAqIE1hdGguY29zKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5jb3MoIHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGggKTtcblx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBNYXRoLnNpbiggcGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoICkgKiBNYXRoLnNpbiggdGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aCApO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0XHRub3JtYWwuY29weSggdmVydGV4ICkubm9ybWFsaXplKCk7XG5cdFx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHRcdC8vIHV2XG5cblx0XHRcdFx0dXZzLnB1c2goIHUgKyB1T2Zmc2V0LCAxIC0gdiApO1xuXG5cdFx0XHRcdHZlcnRpY2VzUm93LnB1c2goIGluZGV4ICsrICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z3JpZC5wdXNoKCB2ZXJ0aWNlc1JvdyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGl5ID0gMDsgaXkgPCBoZWlnaHRTZWdtZW50czsgaXkgKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpeCA9IDA7IGl4IDwgd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGdyaWRbIGl5IF1bIGl4ICsgMSBdO1xuXHRcdFx0XHRjb25zdCBiID0gZ3JpZFsgaXkgXVsgaXggXTtcblx0XHRcdFx0Y29uc3QgYyA9IGdyaWRbIGl5ICsgMSBdWyBpeCBdO1xuXHRcdFx0XHRjb25zdCBkID0gZ3JpZFsgaXkgKyAxIF1bIGl4ICsgMSBdO1xuXG5cdFx0XHRcdGlmICggaXkgIT09IDAgfHwgdGhldGFTdGFydCA+IDAgKSBpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aWYgKCBpeSAhPT0gaGVpZ2h0U2VnbWVudHMgLSAxIHx8IHRoZXRhRW5kIDwgTWF0aC5QSSApIGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSB0aGUgZ2l2ZW5cblx0ICogSlNPTiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZ2VvbWV0cnkuXG5cdCAqIEByZXR1cm4ge1NwaGVyZUdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgU3BoZXJlR2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLndpZHRoU2VnbWVudHMsIGRhdGEuaGVpZ2h0U2VnbWVudHMsIGRhdGEucGhpU3RhcnQsIGRhdGEucGhpTGVuZ3RoLCBkYXRhLnRoZXRhU3RhcnQsIGRhdGEudGhldGFMZW5ndGggKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGdlb21ldHJ5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgYW4gdGV0cmFoZWRyb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlRldHJhaGVkcm9uR2VvbWV0cnkoKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmYwMCB9ICk7XG4gKiBjb25zdCB0ZXRyYWhlZHJvbiA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggdGV0cmFoZWRyb24gKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBQb2x5aGVkcm9uR2VvbWV0cnlcbiAqL1xuY2xhc3MgVGV0cmFoZWRyb25HZW9tZXRyeSBleHRlbmRzIFBvbHloZWRyb25HZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdGV0cmFoZWRyb24gZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXVzPTFdIC0gUmFkaXVzIG9mIHRoZSB0ZXRyYWhlZHJvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZXRhaWw9MF0gLSBTZXR0aW5nIHRoaXMgdG8gYSB2YWx1ZSBncmVhdGVyIHRoYW4gYDBgIGFkZHMgdmVydGljZXMgbWFraW5nIGl0IG5vIGxvbmdlciBhIHRldHJhaGVkcm9uLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIGRldGFpbCA9IDAgKSB7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtcblx0XHRcdDEsIDEsIDEsIFx0LTEsIC0xLCAxLCBcdC0xLCAxLCAtMSwgXHQxLCAtMSwgLTFcblx0XHRdO1xuXG5cdFx0Y29uc3QgaW5kaWNlcyA9IFtcblx0XHRcdDIsIDEsIDAsIFx0MCwgMywgMixcdDEsIDMsIDAsXHQyLCAzLCAxXG5cdFx0XTtcblxuXHRcdHN1cGVyKCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzIHRoYXQgaGF2ZSBiZWVuXG5cdFx0ICogdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2VvbWV0cnkuIEFueSBtb2RpZmljYXRpb25cblx0XHQgKiBhZnRlciBpbnN0YW50aWF0aW9uIGRvZXMgbm90IGNoYW5nZSB0aGUgZ2VvbWV0cnkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdFx0ZGV0YWlsOiBkZXRhaWxcblx0XHR9O1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSB0aGUgZ2l2ZW5cblx0ICogSlNPTiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZ2VvbWV0cnkuXG5cdCAqIEByZXR1cm4ge1RldHJhaGVkcm9uR2VvbWV0cnl9IEEgbmV3IGluc3RhbmNlLlxuXHQgKi9cblx0c3RhdGljIGZyb21KU09OKCBkYXRhICkge1xuXG5cdFx0cmV0dXJuIG5ldyBUZXRyYWhlZHJvbkdlb21ldHJ5KCBkYXRhLnJhZGl1cywgZGF0YS5kZXRhaWwgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGdlb21ldHJ5IGNsYXNzIGZvciByZXByZXNlbnRpbmcgYW4gdG9ydXMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlRvcnVzR2VvbWV0cnkoIDEwLCAzLCAxNiwgMTAwICk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmMDAgfSApO1xuICogY29uc3QgdG9ydXMgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIHRvcnVzICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgVG9ydXNHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB0b3J1cyBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9MV0gLSBSYWRpdXMgb2YgdGhlIHRvcnVzLCBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIHRvcnVzIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHR1YmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdHViZT0wLjRdIC0gUmFkaXVzIG9mIHRoZSB0dWJlLiBNdXN0IGJlIHNtYWxsZXIgdGhhbiBgcmFkaXVzYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpYWxTZWdtZW50cz0xMl0gLSBUaGUgbnVtYmVyIG9mIHJhZGlhbCBzZWdtZW50cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0dWJ1bGFyU2VnbWVudHM9NDhdIC0gVGhlIG51bWJlciBvZiB0dWJ1bGFyIHNlZ21lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2FyYz1NYXRoLlBJKjJdIC0gQ2VudHJhbCBhbmdsZSBpbiByYWRpYW5zLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHR1YmUgPSAwLjQsIHJhZGlhbFNlZ21lbnRzID0gMTIsIHR1YnVsYXJTZWdtZW50cyA9IDQ4LCBhcmMgPSBNYXRoLlBJICogMiApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnVG9ydXNHZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRcdHR1YmU6IHR1YmUsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRcdGFyYzogYXJjXG5cdFx0fTtcblxuXHRcdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKTtcblx0XHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKTtcblxuXHRcdC8vIGJ1ZmZlcnNcblxuXHRcdGNvbnN0IGluZGljZXMgPSBbXTtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGNvbnN0IGNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogYXJjO1xuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdFx0Ly8gdmVydGV4XG5cblx0XHRcdFx0dmVydGV4LnggPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0XHR2ZXJ0ZXgueSA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguc2luKCB1ICk7XG5cdFx0XHRcdHZlcnRleC56ID0gdHViZSAqIE1hdGguc2luKCB2ICk7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdGNlbnRlci54ID0gcmFkaXVzICogTWF0aC5jb3MoIHUgKTtcblx0XHRcdFx0Y2VudGVyLnkgPSByYWRpdXMgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0XHRub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBjZW50ZXIgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHQvLyB1dlxuXG5cdFx0XHRcdHV2cy5wdXNoKCBpIC8gdHVidWxhclNlZ21lbnRzICk7XG5cdFx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0Zm9yICggbGV0IGogPSAxOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0XHRjb25zdCBhID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiBqICsgaSAtIDE7XG5cdFx0XHRcdGNvbnN0IGIgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGkgLSAxO1xuXHRcdFx0XHRjb25zdCBjID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXHRcdFx0XHRjb25zdCBkID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5wYXJhbWV0ZXJzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gdGhlIGdpdmVuXG5cdCAqIEpTT04gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIEEgSlNPTiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBzZXJpYWxpemVkIGdlb21ldHJ5LlxuXHQgKiBAcmV0dXJuIHtUb3J1c0dlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgVG9ydXNHZW9tZXRyeSggZGF0YS5yYWRpdXMsIGRhdGEudHViZSwgZGF0YS5yYWRpYWxTZWdtZW50cywgZGF0YS50dWJ1bGFyU2VnbWVudHMsIGRhdGEuYXJjICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRvcnVzIGtub3QsIHRoZSBwYXJ0aWN1bGFyIHNoYXBlIG9mIHdoaWNoIGlzIGRlZmluZWQgYnkgYSBwYWlyXG4gKiBvZiBjb3ByaW1lIGludGVnZXJzLCBwIGFuZCBxLiBJZiBwIGFuZCBxIGFyZSBub3QgY29wcmltZSwgdGhlIHJlc3VsdCB3aWxsXG4gKiBiZSBhIHRvcnVzIGxpbmsuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlRvcnVzS25vdEdlb21ldHJ5KCAxMCwgMywgMTAwLCAxNiApO1xuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4ZmZmZjAwIH0gKTtcbiAqIGNvbnN0IHRvcnVzS25vdCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggdG9ydXNLbm90ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQnVmZmVyR2VvbWV0cnlcbiAqL1xuY2xhc3MgVG9ydXNLbm90R2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdG9ydXMga25vdCBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9MV0gLSBSYWRpdXMgb2YgdGhlIHRvcnVzIGtub3QuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdHViZT0wLjRdIC0gUmFkaXVzIG9mIHRoZSB0dWJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3R1YnVsYXJTZWdtZW50cz02NF0gLSBUaGUgbnVtYmVyIG9mIHR1YnVsYXIgc2VnbWVudHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaWFsU2VnbWVudHM9OF0gLSBUaGUgbnVtYmVyIG9mIHJhZGlhbCBzZWdtZW50cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtwPTJdIC0gVGhpcyB2YWx1ZSBkZXRlcm1pbmVzLCBob3cgbWFueSB0aW1lcyB0aGUgZ2VvbWV0cnkgd2luZHMgYXJvdW5kIGl0cyBheGlzIG9mIHJvdGF0aW9uYWwgc3ltbWV0cnkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcT0zXSAtIFRoaXMgdmFsdWUgZGV0ZXJtaW5lcywgaG93IG1hbnkgdGltZXMgdGhlIGdlb21ldHJ5IHdpbmRzIGFyb3VuZCBhIGNpcmNsZSBpbiB0aGUgaW50ZXJpb3Igb2YgdGhlIHRvcnVzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHR1YmUgPSAwLjQsIHR1YnVsYXJTZWdtZW50cyA9IDY0LCByYWRpYWxTZWdtZW50cyA9IDgsIHAgPSAyLCBxID0gMyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90R2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW5cblx0XHQgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvblxuXHRcdCAqIGFmdGVyIGluc3RhbnRpYXRpb24gZG9lcyBub3QgY2hhbmdlIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHR0dWJlOiB0dWJlLFxuXHRcdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRwOiBwLFxuXHRcdFx0cTogcVxuXHRcdH07XG5cblx0XHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cdFx0Y29uc3QgdmVydGljZXMgPSBbXTtcblx0XHRjb25zdCBub3JtYWxzID0gW107XG5cdFx0Y29uc3QgdXZzID0gW107XG5cblx0XHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0XHRjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRjb25zdCBQMSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgUDIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Y29uc3QgQiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgVCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3QgTiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArKyBpICkge1xuXG5cdFx0XHQvLyB0aGUgcmFkaWFuIFwidVwiIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvbiB0aGUgdG9ydXMgY3VydmUgb2YgdGhlIGN1cnJlbnQgdHVidWxhciBzZWdtZW50XG5cblx0XHRcdGNvbnN0IHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogcCAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHQvLyBub3cgd2UgY2FsY3VsYXRlIHR3byBwb2ludHMuIFAxIGlzIG91ciBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZSwgUDIgaXMgYSBsaXR0bGUgZmFydGhlciBhaGVhZC5cblx0XHRcdC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcblxuXHRcdFx0Y2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1LCBwLCBxLCByYWRpdXMsIFAxICk7XG5cdFx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUoIHUgKyAwLjAxLCBwLCBxLCByYWRpdXMsIFAyICk7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpc1xuXG5cdFx0XHRULnN1YlZlY3RvcnMoIFAyLCBQMSApO1xuXHRcdFx0Ti5hZGRWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHRcdEIuY3Jvc3NWZWN0b3JzKCBULCBOICk7XG5cdFx0XHROLmNyb3NzVmVjdG9ycyggQiwgVCApO1xuXG5cdFx0XHQvLyBub3JtYWxpemUgQiwgTi4gVCBjYW4gYmUgaWdub3JlZCwgd2UgZG9uJ3QgdXNlIGl0XG5cblx0XHRcdEIubm9ybWFsaXplKCk7XG5cdFx0XHROLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7ICsrIGogKSB7XG5cblx0XHRcdFx0Ly8gbm93IGNhbGN1bGF0ZSB0aGUgdmVydGljZXMuIHRoZXkgYXJlIG5vdGhpbmcgbW9yZSB0aGFuIGFuIGV4dHJ1c2lvbiBvZiB0aGUgdG9ydXMgY3VydmUuXG5cdFx0XHRcdC8vIGJlY2F1c2Ugd2UgZXh0cnVkZSBhIHNoYXBlIGluIHRoZSB4eS1wbGFuZSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxjdWxhdGUgYSB6LXZhbHVlLlxuXG5cdFx0XHRcdGNvbnN0IHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcblx0XHRcdFx0Y29uc3QgY3ggPSAtIHR1YmUgKiBNYXRoLmNvcyggdiApO1xuXHRcdFx0XHRjb25zdCBjeSA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG5cdFx0XHRcdC8vIG5vdyBjYWxjdWxhdGUgdGhlIGZpbmFsIHZlcnRleCBwb3NpdGlvbi5cblx0XHRcdFx0Ly8gZmlyc3Qgd2Ugb3JpZW50IHRoZSBleHRydXNpb24gd2l0aCBvdXIgYmFzaXMgdmVjdG9ycywgdGhlbiB3ZSBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlXG5cblx0XHRcdFx0dmVydGV4LnggPSBQMS54ICsgKCBjeCAqIE4ueCArIGN5ICogQi54ICk7XG5cdFx0XHRcdHZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApO1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IFAxLnogKyAoIGN4ICogTi56ICsgY3kgKiBCLnogKTtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0Ly8gbm9ybWFsIChQMSBpcyBhbHdheXMgdGhlIGNlbnRlci9vcmlnaW4gb2YgdGhlIGV4dHJ1c2lvbiwgdGh1cyB3ZSBjYW4gdXNlIGl0IHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsKVxuXG5cdFx0XHRcdG5vcm1hbC5zdWJWZWN0b3JzKCB2ZXJ0ZXgsIFAxICkubm9ybWFsaXplKCk7XG5cblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0XHR1dnMucHVzaCggaiAvIHJhZGlhbFNlZ21lbnRzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcblxuXHRcdGZvciAoIGxldCBqID0gMTsgaiA8PSB0dWJ1bGFyU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdFx0Y29uc3QgYSA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyAoIGkgLSAxICk7XG5cdFx0XHRcdGNvbnN0IGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0Y29uc3QgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdFx0Y29uc3QgZCA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXG5cdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHRcdC8vIHRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgdG9ydXMgY3VydmVcblxuXHRcdGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBwb3NpdGlvbiApIHtcblxuXHRcdFx0Y29uc3QgY3UgPSBNYXRoLmNvcyggdSApO1xuXHRcdFx0Y29uc3Qgc3UgPSBNYXRoLnNpbiggdSApO1xuXHRcdFx0Y29uc3QgcXVPdmVyUCA9IHEgLyBwICogdTtcblx0XHRcdGNvbnN0IGNzID0gTWF0aC5jb3MoIHF1T3ZlclAgKTtcblxuXHRcdFx0cG9zaXRpb24ueCA9IHJhZGl1cyAqICggMiArIGNzICkgKiAwLjUgKiBjdTtcblx0XHRcdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoIDIgKyBjcyApICogc3UgKiAwLjU7XG5cdFx0XHRwb3NpdGlvbi56ID0gcmFkaXVzICogTWF0aC5zaW4oIHF1T3ZlclAgKSAqIDAuNTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSB0aGUgZ2l2ZW5cblx0ICogSlNPTiBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgZ2VvbWV0cnkuXG5cdCAqIEByZXR1cm4ge1RvcnVzS25vdEdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdHJldHVybiBuZXcgVG9ydXNLbm90R2VvbWV0cnkoIGRhdGEucmFkaXVzLCBkYXRhLnR1YmUsIGRhdGEudHVidWxhclNlZ21lbnRzLCBkYXRhLnJhZGlhbFNlZ21lbnRzLCBkYXRhLnAsIGRhdGEucSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0dWJlIHRoYXQgZXh0cnVkZXMgYWxvbmcgYSAzRCBjdXJ2ZS5cbiAqXG4gKiBgYGBqc1xuICogY2xhc3MgQ3VzdG9tU2luQ3VydmUgZXh0ZW5kcyBUSFJFRS5DdXJ2ZSB7XG4gKlxuICogXHRnZXRQb2ludCggdCwgb3B0aW9uYWxUYXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpICkge1xuICpcbiAqIFx0XHRjb25zdCB0eCA9IHQgKiAzIC0gMS41O1xuICogXHRcdGNvbnN0IHR5ID0gTWF0aC5zaW4oIDIgKiBNYXRoLlBJICogdCApO1xuICogXHRcdGNvbnN0IHR6ID0gMDtcbiAqXG4gKiBcdFx0cmV0dXJuIG9wdGlvbmFsVGFyZ2V0LnNldCggdHgsIHR5LCB0eiApO1xuICogXHR9XG4gKlxuICogfVxuICpcbiAqIGNvbnN0IHBhdGggPSBuZXcgQ3VzdG9tU2luQ3VydmUoIDEwICk7XG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5UdWJlR2VvbWV0cnkoIHBhdGgsIDIwLCAyLCA4LCBmYWxzZSApO1xuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4MDBmZjAwIH0gKTtcbiAqIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gKiBzY2VuZS5hZGQoIG1lc2ggKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJHZW9tZXRyeVxuICovXG5jbGFzcyBUdWJlR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdHViZSBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtDdXJ2ZX0gW3BhdGg9UXVhZHJhdGljQmV6aWVyQ3VydmUzXSAtIEEgM0QgY3VydmUgZGVmaW5pbmcgdGhlIHBhdGggb2YgdGhlIHR1YmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdHVidWxhclNlZ21lbnRzPTY0XSAtIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgdGhhdCBtYWtlIHVwIHRoZSB0dWJlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0xXSAtVGhlIHJhZGl1cyBvZiB0aGUgdHViZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpYWxTZWdtZW50cz04XSAtIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgdGhhdCBtYWtlIHVwIHRoZSBjcm9zcy1zZWN0aW9uLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtjbG9zZWQ9ZmFsc2VdIC0gV2hldGhlciB0aGUgdHViZSBpcyBjbG9zZWQgb3Igbm90LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhdGggPSBuZXcgUXVhZHJhdGljQmV6aWVyQ3VydmUzKCBuZXcgVmVjdG9yMyggLTEsIC0xLCAwICksIG5ldyBWZWN0b3IzKCAtMSwgMSwgMCApLCBuZXcgVmVjdG9yMyggMSwgMSwgMCApICksIHR1YnVsYXJTZWdtZW50cyA9IDY0LCByYWRpdXMgPSAxLCByYWRpYWxTZWdtZW50cyA9IDgsIGNsb3NlZCA9IGZhbHNlICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdUdWJlR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGNvbnN0cnVjdG9yIHBhcmFtZXRlcnMgdGhhdCBoYXZlIGJlZW5cblx0XHQgKiB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnZW9tZXRyeS4gQW55IG1vZGlmaWNhdGlvblxuXHRcdCAqIGFmdGVyIGluc3RhbnRpYXRpb24gZG9lcyBub3QgY2hhbmdlIHRoZSBnZW9tZXRyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0cGF0aDogcGF0aCxcblx0XHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0XHRjbG9zZWQ6IGNsb3NlZFxuXHRcdH07XG5cblx0XHRjb25zdCBmcmFtZXMgPSBwYXRoLmNvbXB1dGVGcmVuZXRGcmFtZXMoIHR1YnVsYXJTZWdtZW50cywgY2xvc2VkICk7XG5cblx0XHQvLyBleHBvc2UgaW50ZXJuYWxzXG5cblx0XHR0aGlzLnRhbmdlbnRzID0gZnJhbWVzLnRhbmdlbnRzO1xuXHRcdHRoaXMubm9ybWFscyA9IGZyYW1lcy5ub3JtYWxzO1xuXHRcdHRoaXMuYmlub3JtYWxzID0gZnJhbWVzLmJpbm9ybWFscztcblxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHRcdGNvbnN0IHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Y29uc3Qgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHRjb25zdCB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0bGV0IFAgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gYnVmZmVyXG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IG5vcm1hbHMgPSBbXTtcblx0XHRjb25zdCB1dnMgPSBbXTtcblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cblx0XHQvLyBjcmVhdGUgYnVmZmVyIGRhdGFcblxuXHRcdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xuXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHRcdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cblx0XHQvLyBmdW5jdGlvbnNcblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlQnVmZmVyRGF0YSgpIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlU2VnbWVudCggaSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBub3QgY2xvc2VkLCBnZW5lcmF0ZSB0aGUgbGFzdCByb3cgb2YgdmVydGljZXMgYW5kIG5vcm1hbHNcblx0XHRcdC8vIGF0IHRoZSByZWd1bGFyIHBvc2l0aW9uIG9uIHRoZSBnaXZlbiBwYXRoXG5cdFx0XHQvL1xuXHRcdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgZHVwbGljYXRlIHRoZSBmaXJzdCByb3cgb2YgdmVydGljZXMgYW5kIG5vcm1hbHMgKHV2cyB3aWxsIGRpZmZlcilcblxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCAoIGNsb3NlZCA9PT0gZmFsc2UgKSA/IHR1YnVsYXJTZWdtZW50cyA6IDAgKTtcblxuXHRcdFx0Ly8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi5cblx0XHRcdC8vIHRoaXMgbWFrZXMgaXQgZWFzeSBjb21wdXRlIGNvcnJlY3QgdmFsdWVzIGZvciBjbG9zZWQgZ2VvbWV0cmllc1xuXG5cdFx0XHRnZW5lcmF0ZVVWcygpO1xuXG5cdFx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xuXG5cdFx0XHRnZW5lcmF0ZUluZGljZXMoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHtcblxuXHRcdFx0Ly8gd2UgdXNlIGdldFBvaW50QXQgdG8gc2FtcGxlIGV2ZW5seSBkaXN0cmlidXRlZCBwb2ludHMgZnJvbSB0aGUgZ2l2ZW4gcGF0aFxuXG5cdFx0XHRQID0gcGF0aC5nZXRQb2ludEF0KCBpIC8gdHVidWxhclNlZ21lbnRzLCBQICk7XG5cblx0XHRcdC8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbFxuXG5cdFx0XHRjb25zdCBOID0gZnJhbWVzLm5vcm1hbHNbIGkgXTtcblx0XHRcdGNvbnN0IEIgPSBmcmFtZXMuYmlub3JtYWxzWyBpIF07XG5cblx0XHRcdC8vIGdlbmVyYXRlIG5vcm1hbHMgYW5kIHZlcnRpY2VzIGZvciB0aGUgY3VycmVudCBzZWdtZW50XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdFx0Y29uc3Qgc2luID0gTWF0aC5zaW4oIHYgKTtcblx0XHRcdFx0Y29uc3QgY29zID0gLSBNYXRoLmNvcyggdiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbC54ID0gKCBjb3MgKiBOLnggKyBzaW4gKiBCLnggKTtcblx0XHRcdFx0bm9ybWFsLnkgPSAoIGNvcyAqIE4ueSArIHNpbiAqIEIueSApO1xuXHRcdFx0XHRub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7XG5cdFx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0XHR2ZXJ0ZXgueCA9IFAueCArIHJhZGl1cyAqIG5vcm1hbC54O1xuXHRcdFx0XHR2ZXJ0ZXgueSA9IFAueSArIHJhZGl1cyAqIG5vcm1hbC55O1xuXHRcdFx0XHR2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56O1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2VuZXJhdGVJbmRpY2VzKCkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMTsgaSA8PSByYWRpYWxTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHRcdGNvbnN0IGIgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogaiArICggaSAtIDEgKTtcblx0XHRcdFx0XHRjb25zdCBjID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXHRcdFx0XHRcdGNvbnN0IGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdlbmVyYXRlVVZzKCkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0XHRcdHV2LnggPSBpIC8gdHVidWxhclNlZ21lbnRzO1xuXHRcdFx0XHRcdHV2LnkgPSBqIC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMucGFyYW1ldGVycyA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UucGFyYW1ldGVycyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEucGF0aCA9IHRoaXMucGFyYW1ldGVycy5wYXRoLnRvSlNPTigpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIHRoZSBnaXZlblxuXHQgKiBKU09OIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIEpTT04gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2VyaWFsaXplZCBnZW9tZXRyeS5cblx0ICogQHJldHVybiB7VHViZUdlb21ldHJ5fSBBIG5ldyBpbnN0YW5jZS5cblx0ICovXG5cdHN0YXRpYyBmcm9tSlNPTiggZGF0YSApIHtcblxuXHRcdC8vIFRoaXMgb25seSB3b3JrcyBmb3IgYnVpbHQtaW4gY3VydmVzIChlLmcuIENhdG11bGxSb21DdXJ2ZTMpLlxuXHRcdC8vIFVzZXIgZGVmaW5lZCBjdXJ2ZXMgb3IgaW5zdGFuY2VzIG9mIEN1cnZlUGF0aCB3aWxsIG5vdCBiZSBkZXNlcmlhbGl6ZWQuXG5cdFx0cmV0dXJuIG5ldyBUdWJlR2VvbWV0cnkoXG5cdFx0XHRuZXcgQ3VydmVzWyBkYXRhLnBhdGgudHlwZSBdKCkuZnJvbUpTT04oIGRhdGEucGF0aCApLFxuXHRcdFx0ZGF0YS50dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRkYXRhLmNsb3NlZFxuXHRcdCk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ2FuIGJlIHVzZWQgYXMgYSBoZWxwZXIgb2JqZWN0IHRvIHZpc3VhbGl6ZSBhIGdlb21ldHJ5IGFzIGEgd2lyZWZyYW1lLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSgpO1xuICpcbiAqIGNvbnN0IHdpcmVmcmFtZSA9IG5ldyBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSggZ2VvbWV0cnkgKTtcbiAqXG4gKiBjb25zdCBsaW5lID0gbmV3IFRIUkVFLkxpbmVTZWdtZW50cyggd2lyZWZyYW1lICk7XG4gKiBsaW5lLm1hdGVyaWFsLmRlcHRoV3JpdGUgPSBmYWxzZTtcbiAqIGxpbmUubWF0ZXJpYWwub3BhY2l0eSA9IDAuMjU7XG4gKiBsaW5lLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAqXG4gKiBzY2VuZS5hZGQoIGxpbmUgKTtcbiAqIGBgYFxuICpcbiAqIE5vdGU6IEl0IGlzIG5vdCB5ZXQgcG9zc2libGUgdG8gc2VyaWFsaXplL2Rlc2VyaWFsaXplIGluc3RhbmNlcyBvZiB0aGlzIGNsYXNzLlxuICpcbiAqIEBhdWdtZW50cyBCdWZmZXJHZW9tZXRyeVxuICovXG5jbGFzcyBXaXJlZnJhbWVHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB3aXJlZnJhbWUgZ2VvbWV0cnkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7P0J1ZmZlckdlb21ldHJ5fSBbZ2VvbWV0cnk9bnVsbF0gLSBUaGUgZ2VvbWV0cnkuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggZ2VvbWV0cnkgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdXaXJlZnJhbWVHZW9tZXRyeSc7XG5cblx0XHQvKipcblx0XHQgKiBIb2xkcyB0aGUgY29uc3RydWN0b3IgcGFyYW1ldGVycyB0aGF0IGhhdmUgYmVlblxuXHRcdCAqIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGdlb21ldHJ5LiBBbnkgbW9kaWZpY2F0aW9uXG5cdFx0ICogYWZ0ZXIgaW5zdGFudGlhdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIGdlb21ldHJ5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHRnZW9tZXRyeTogZ2VvbWV0cnlcblx0XHR9O1xuXG5cdFx0aWYgKCBnZW9tZXRyeSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gYnVmZmVyXG5cblx0XHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0XHRjb25zdCBlZGdlcyA9IG5ldyBTZXQoKTtcblxuXHRcdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0XHRjb25zdCBzdGFydCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRjb25zdCBlbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIGluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0XHRcdGNvbnN0IGluZGljZXMgPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdFx0bGV0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRpZiAoIGdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdFx0XHRncm91cHMgPSBbIHsgc3RhcnQ6IDAsIGNvdW50OiBpbmRpY2VzLmNvdW50LCBtYXRlcmlhbEluZGV4OiAwIH0gXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gY3JlYXRlIGEgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBjb250YWlucyBhbGwgZWRnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHRcdFx0Zm9yICggbGV0IG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBvIF07XG5cblx0XHRcdFx0XHRjb25zdCBncm91cFN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXBDb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSBncm91cFN0YXJ0LCBsID0gKCBncm91cFN0YXJ0ICsgZ3JvdXBDb3VudCApOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGluZGV4MSA9IGluZGljZXMuZ2V0WCggaSArIGogKTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgaW5kZXgyID0gaW5kaWNlcy5nZXRYKCBpICsgKCBqICsgMSApICUgMyApO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXJ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHRcdFx0ZW5kLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHN0YXJ0LngsIHN0YXJ0LnksIHN0YXJ0LnogKTtcblx0XHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBlbmQueCwgZW5kLnksIGVuZC56ICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gdGhyZWUgZWRnZXMgcGVyIHRyaWFuZ2xlLCBhbiBlZGdlIGlzIHJlcHJlc2VudGVkIGFzIChpbmRleDEsIGluZGV4Milcblx0XHRcdFx0XHRcdC8vIGUuZy4gdGhlIGZpcnN0IHRyaWFuZ2xlIGhhcyB0aGUgZm9sbG93aW5nIGVkZ2VzOiAoMCwxKSwoMSwyKSwoMiwwKVxuXG5cdFx0XHRcdFx0XHRjb25zdCBpbmRleDEgPSAzICogaSArIGo7XG5cdFx0XHRcdFx0XHRjb25zdCBpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApO1xuXG5cdFx0XHRcdFx0XHRzdGFydC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgxICk7XG5cdFx0XHRcdFx0XHRlbmQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGluZGV4MiApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzVW5pcXVlRWRnZSggc3RhcnQsIGVuZCwgZWRnZXMgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCBzdGFydC54LCBzdGFydC55LCBzdGFydC56ICk7XG5cdFx0XHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIGVuZC54LCBlbmQueSwgZW5kLnogKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKCB7fSwgc291cmNlLnBhcmFtZXRlcnMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBpc1VuaXF1ZUVkZ2UoIHN0YXJ0LCBlbmQsIGVkZ2VzICkge1xuXG5cdGNvbnN0IGhhc2gxID0gYCR7c3RhcnQueH0sJHtzdGFydC55fSwke3N0YXJ0Lnp9LSR7ZW5kLnh9LCR7ZW5kLnl9LCR7ZW5kLnp9YDtcblx0Y29uc3QgaGFzaDIgPSBgJHtlbmQueH0sJHtlbmQueX0sJHtlbmQuen0tJHtzdGFydC54fSwke3N0YXJ0Lnl9LCR7c3RhcnQuen1gOyAvLyBjb2luY2lkZW50IGVkZ2VcblxuXHRpZiAoIGVkZ2VzLmhhcyggaGFzaDEgKSA9PT0gdHJ1ZSB8fCBlZGdlcy5oYXMoIGhhc2gyICkgPT09IHRydWUgKSB7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSBlbHNlIHtcblxuXHRcdGVkZ2VzLmFkZCggaGFzaDEgKTtcblx0XHRlZGdlcy5hZGQoIGhhc2gyICk7XG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fVxuXG59XG5cbnZhciBHZW9tZXRyaWVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdEJveEdlb21ldHJ5OiBCb3hHZW9tZXRyeSxcblx0Q2Fwc3VsZUdlb21ldHJ5OiBDYXBzdWxlR2VvbWV0cnksXG5cdENpcmNsZUdlb21ldHJ5OiBDaXJjbGVHZW9tZXRyeSxcblx0Q29uZUdlb21ldHJ5OiBDb25lR2VvbWV0cnksXG5cdEN5bGluZGVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkdlb21ldHJ5OiBEb2RlY2FoZWRyb25HZW9tZXRyeSxcblx0RWRnZXNHZW9tZXRyeTogRWRnZXNHZW9tZXRyeSxcblx0RXh0cnVkZUdlb21ldHJ5OiBFeHRydWRlR2VvbWV0cnksXG5cdEljb3NhaGVkcm9uR2VvbWV0cnk6IEljb3NhaGVkcm9uR2VvbWV0cnksXG5cdExhdGhlR2VvbWV0cnk6IExhdGhlR2VvbWV0cnksXG5cdE9jdGFoZWRyb25HZW9tZXRyeTogT2N0YWhlZHJvbkdlb21ldHJ5LFxuXHRQbGFuZUdlb21ldHJ5OiBQbGFuZUdlb21ldHJ5LFxuXHRQb2x5aGVkcm9uR2VvbWV0cnk6IFBvbHloZWRyb25HZW9tZXRyeSxcblx0UmluZ0dlb21ldHJ5OiBSaW5nR2VvbWV0cnksXG5cdFNoYXBlR2VvbWV0cnk6IFNoYXBlR2VvbWV0cnksXG5cdFNwaGVyZUdlb21ldHJ5OiBTcGhlcmVHZW9tZXRyeSxcblx0VGV0cmFoZWRyb25HZW9tZXRyeTogVGV0cmFoZWRyb25HZW9tZXRyeSxcblx0VG9ydXNHZW9tZXRyeTogVG9ydXNHZW9tZXRyeSxcblx0VG9ydXNLbm90R2VvbWV0cnk6IFRvcnVzS25vdEdlb21ldHJ5LFxuXHRUdWJlR2VvbWV0cnk6IFR1YmVHZW9tZXRyeSxcblx0V2lyZWZyYW1lR2VvbWV0cnk6IFdpcmVmcmFtZUdlb21ldHJ5XG59KTtcblxuLyoqXG4gKiBUaGlzIG1hdGVyaWFsIGNhbiByZWNlaXZlIHNoYWRvd3MsIGJ1dCBvdGhlcndpc2UgaXMgY29tcGxldGVseSB0cmFuc3BhcmVudC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSggMjAwMCwgMjAwMCApO1xuICogZ2VvbWV0cnkucm90YXRlWCggLSBNYXRoLlBJIC8gMiApO1xuICpcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLlNoYWRvd01hdGVyaWFsKCk7XG4gKiBtYXRlcmlhbC5vcGFjaXR5ID0gMC4yO1xuICpcbiAqIGNvbnN0IHBsYW5lID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICogcGxhbmUucG9zaXRpb24ueSA9IC0yMDA7XG4gKiBwbGFuZS5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAqIHNjZW5lLmFkZCggcGxhbmUgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBNYXRlcmlhbFxuICovXG5jbGFzcyBTaGFkb3dNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzaGFkb3cgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1NoYWRvd01hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdTaGFkb3dNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBDb2xvciBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cblx0XHQvKipcblx0XHQgKiBPdmVyd3JpdHRlbiBzaW5jZSBzaGFkb3cgbWF0ZXJpYWxzIGFyZSB0cmFuc3BhcmVudFxuXHRcdCAqIGJ5IGRlZmF1bHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBtYXRlcmlhbCBpcyBhZmZlY3RlZCBieSBmb2cgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3Mgd29ya3MganVzdCBsaWtlIHtAbGluayBTaGFkZXJNYXRlcmlhbH0sIGV4Y2VwdCB0aGF0IGRlZmluaXRpb25zXG4gKiBvZiBidWlsdC1pbiB1bmlmb3JtcyBhbmQgYXR0cmlidXRlcyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgcHJlcGVuZGVkIHRvIHRoZVxuICogR0xTTCBzaGFkZXIgY29kZS5cbiAqXG4gKiBgUmF3U2hhZGVyTWF0ZXJpYWxgIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG4gKlxuICogQGF1Z21lbnRzIFNoYWRlck1hdGVyaWFsXG4gKi9cbmNsYXNzIFJhd1NoYWRlck1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHJhdyBzaGFkZXIgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVycyApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1Jhd1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdSYXdTaGFkZXJNYXRlcmlhbCc7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBzdGFuZGFyZCBwaHlzaWNhbGx5IGJhc2VkIG1hdGVyaWFsLCB1c2luZyBNZXRhbGxpYy1Sb3VnaG5lc3Mgd29ya2Zsb3cuXG4gKlxuICogUGh5c2ljYWxseSBiYXNlZCByZW5kZXJpbmcgKFBCUikgaGFzIHJlY2VudGx5IGJlY29tZSB0aGUgc3RhbmRhcmQgaW4gbWFueVxuICogM0QgYXBwbGljYXRpb25zLCBzdWNoIGFzIFtVbml0eV17QGxpbmsgaHR0cHM6Ly9ibG9ncy51bml0eTNkLmNvbS8yMDE0LzEwLzI5L3BoeXNpY2FsbHktYmFzZWQtc2hhZGluZy1pbi11bml0eS01LWEtcHJpbWVyL30sXG4gKiBbVW5yZWFsXXtAbGluayBodHRwczovL2RvY3MudW5yZWFsZW5naW5lLmNvbS9sYXRlc3QvSU5UL0VuZ2luZS9SZW5kZXJpbmcvTWF0ZXJpYWxzL1BoeXNpY2FsbHlCYXNlZC99IGFuZFxuICogWzNEIFN0dWRpbyBNYXhde0BsaW5rIGh0dHA6Ly9hcmVhLmF1dG9kZXNrLmNvbS9ibG9ncy90aGUtM2RzLW1heC1ibG9nL3doYXQwMzlzLW5ldy1mb3ItcmVuZGVyaW5nLWluLTNkcy1tYXgtMjAxN30uXG4gKlxuICogVGhpcyBhcHByb2FjaCBkaWZmZXJzIGZyb20gb2xkZXIgYXBwcm9hY2hlcyBpbiB0aGF0IGluc3RlYWQgb2YgdXNpbmdcbiAqIGFwcHJveGltYXRpb25zIGZvciB0aGUgd2F5IGluIHdoaWNoIGxpZ2h0IGludGVyYWN0cyB3aXRoIGEgc3VyZmFjZSwgYVxuICogcGh5c2ljYWxseSBjb3JyZWN0IG1vZGVsIGlzIHVzZWQuIFRoZSBpZGVhIGlzIHRoYXQsIGluc3RlYWQgb2YgdHdlYWtpbmdcbiAqIG1hdGVyaWFscyB0byBsb29rIGdvb2QgdW5kZXIgc3BlY2lmaWMgbGlnaHRpbmcsIGEgbWF0ZXJpYWwgY2FuIGJlIGNyZWF0ZWRcbiAqIHRoYXQgd2lsbCByZWFjdCAnY29ycmVjdGx5JyB1bmRlciBhbGwgbGlnaHRpbmcgc2NlbmFyaW9zLlxuICpcbiAqIEluIHByYWN0aWNlIHRoaXMgZ2l2ZXMgYSBtb3JlIGFjY3VyYXRlIGFuZCByZWFsaXN0aWMgbG9va2luZyByZXN1bHQgdGhhblxuICogdGhlIHtAbGluayBNZXNoTGFtYmVydE1hdGVyaWFsfSBvciB7QGxpbmsgTWVzaFBob25nTWF0ZXJpYWx9LCBhdCB0aGUgY29zdCBvZlxuICogYmVpbmcgc29tZXdoYXQgbW9yZSBjb21wdXRhdGlvbmFsbHkgZXhwZW5zaXZlLiBgTWVzaFN0YW5kYXJkTWF0ZXJpYWxgIHVzZXMgcGVyLWZyYWdtZW50XG4gKiBzaGFkaW5nLlxuICpcbiAqIE5vdGUgdGhhdCBmb3IgYmVzdCByZXN1bHRzIHlvdSBzaG91bGQgYWx3YXlzIHNwZWNpZnkgYW4gZW52aXJvbm1lbnQgbWFwIHdoZW4gdXNpbmcgdGhpcyBtYXRlcmlhbC5cbiAqXG4gKiBGb3IgYSBub24tdGVjaG5pY2FsIGludHJvZHVjdGlvbiB0byB0aGUgY29uY2VwdCBvZiBQQlIgYW5kIGhvdyB0byBzZXQgdXAgYVxuICogUEJSIG1hdGVyaWFsLCBjaGVjayBvdXQgdGhlc2UgYXJ0aWNsZXMgYnkgdGhlIHBlb3BsZSBhdCBbbWFybW9zZXRde0BsaW5rIGh0dHBzOi8vd3d3Lm1hcm1vc2V0LmNvfTpcbiAqXG4gKiAtIFtCYXNpYyBUaGVvcnkgb2YgUGh5c2ljYWxseSBCYXNlZCBSZW5kZXJpbmdde0BsaW5rIGh0dHBzOi8vd3d3Lm1hcm1vc2V0LmNvL3Bvc3RzL2Jhc2ljLXRoZW9yeS1vZi1waHlzaWNhbGx5LWJhc2VkLXJlbmRlcmluZy99XG4gKiAtIFtQaHlzaWNhbGx5IEJhc2VkIFJlbmRlcmluZyBhbmQgWW91IENhbiBUb29de0BsaW5rIGh0dHBzOi8vd3d3Lm1hcm1vc2V0LmNvL3Bvc3RzL3BoeXNpY2FsbHktYmFzZWQtcmVuZGVyaW5nLWFuZC15b3UtY2FuLXRvby99XG4gKlxuICogVGVjaG5pY2FsIGRldGFpbHMgb2YgdGhlIGFwcHJvYWNoIHVzZWQgaW4gdGhyZWUuanMgKGFuZCBtb3N0IG90aGVyIFBCUiBzeXN0ZW1zKSBjYW4gYmUgZm91bmQgaXMgdGhpc1xuICogW3BhcGVyIGZyb20gRGlzbmV5XXtAbGluayBodHRwczovL21lZGlhLmRpc25leWFuaW1hdGlvbi5jb20vdXBsb2Fkcy9wcm9kdWN0aW9uL3B1YmxpY2F0aW9uX2Fzc2V0LzQ4L2Fzc2V0L3MyMDEyX3Bic19kaXNuZXlfYnJkZl9ub3Rlc192My5wZGZ9XG4gKiAocGRmKSwgYnkgQnJlbnQgQnVybGV5LlxuICpcbiAqIEBhdWdtZW50cyBNYXRlcmlhbFxuICovXG5jbGFzcyBNZXNoU3RhbmRhcmRNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIHN0YW5kYXJkIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gQW4gb2JqZWN0IHdpdGggb25lIG9yIG1vcmUgcHJvcGVydGllc1xuXHQgKiBkZWZpbmluZyB0aGUgbWF0ZXJpYWwncyBhcHBlYXJhbmNlLiBBbnkgcHJvcGVydHkgb2YgdGhlIG1hdGVyaWFsXG5cdCAqIChpbmNsdWRpbmcgYW55IHByb3BlcnR5IGZyb20gaW5oZXJpdGVkIG1hdGVyaWFscykgY2FuIGJlIHBhc3NlZFxuXHQgKiBpbiBoZXJlLiBDb2xvciB2YWx1ZXMgY2FuIGJlIHBhc3NlZCBhbnkgdHlwZSBvZiB2YWx1ZSBhY2NlcHRlZFxuXHQgKiBieSB7QGxpbmsgQ29sb3Ijc2V0fS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ29sb3Igb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NvbG9yfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXG5cblx0XHQvKipcblx0XHQgKiBIb3cgcm91Z2ggdGhlIG1hdGVyaWFsIGFwcGVhcnMuIGAwLjBgIG1lYW5zIGEgc21vb3RoIG1pcnJvciByZWZsZWN0aW9uLCBgMS4wYFxuXHRcdCAqIG1lYW5zIGZ1bGx5IGRpZmZ1c2UuIElmIGByb3VnaG5lc3NNYXBgIGlzIGFsc28gcHJvdmlkZWQsXG5cdFx0ICogYm90aCB2YWx1ZXMgYXJlIG11bHRpcGxpZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnJvdWdobmVzcyA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSBtYXRlcmlhbCBpcyBsaWtlIGEgbWV0YWwuIE5vbi1tZXRhbGxpYyBtYXRlcmlhbHMgc3VjaCBhcyB3b29kXG5cdFx0ICogb3Igc3RvbmUgdXNlIGAwLjBgLCBtZXRhbGxpYyB1c2UgYDEuMGAsIHdpdGggbm90aGluZyAodXN1YWxseSkgaW4gYmV0d2Vlbi5cblx0XHQgKiBBIHZhbHVlIGJldHdlZW4gYDAuMGAgYW5kIGAxLjBgIGNvdWxkIGJlIHVzZWQgZm9yIGEgcnVzdHkgbWV0YWwgbG9vay5cblx0XHQgKiBJZiBgbWV0YWxuZXNzTWFwYCBpcyBhbHNvIHByb3ZpZGVkLCBib3RoIHZhbHVlcyBhcmUgbXVsdGlwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMubWV0YWxuZXNzID0gMC4wO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbG9yIG1hcC4gTWF5IG9wdGlvbmFsbHkgaW5jbHVkZSBhbiBhbHBoYSBjaGFubmVsLCB0eXBpY2FsbHkgY29tYmluZWRcblx0XHQgKiB3aXRoIHtAbGluayBNYXRlcmlhbCN0cmFuc3BhcmVudH0gb3Ige0BsaW5rIE1hdGVyaWFsI2FscGhhVGVzdH0uIFRoZSB0ZXh0dXJlIG1hcFxuXHRcdCAqIGNvbG9yIGlzIG1vZHVsYXRlZCBieSB0aGUgZGlmZnVzZSBgY29sb3JgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQgbWFwLiBSZXF1aXJlcyBhIHNlY29uZCBzZXQgb2YgVVZzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgYmFrZWQgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlZCBjaGFubmVsIG9mIHRoaXMgdGV4dHVyZSBpcyB1c2VkIGFzIHRoZSBhbWJpZW50IG9jY2x1c2lvbiBtYXAuXG5cdFx0ICogUmVxdWlyZXMgYSBzZWNvbmQgc2V0IG9mIFVWcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBJbnRlbnNpdHkgb2YgdGhlIGFtYmllbnQgb2NjbHVzaW9uIGVmZmVjdC4gUmFuZ2UgaXMgYFswLDFdYCwgd2hlcmUgYDBgXG5cdFx0ICogZGlzYWJsZXMgYW1iaWVudCBvY2NsdXNpb24uIFdoZXJlIGludGVuc2l0eSBpcyBgMWAgYW5kIHRoZSBBTyBtYXAnc1xuXHRcdCAqIHJlZCBjaGFubmVsIGlzIGFsc28gYDFgLCBhbWJpZW50IGxpZ2h0IGlzIGZ1bGx5IG9jY2x1ZGVkIG9uIGEgc3VyZmFjZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBFbWlzc2l2ZSAobGlnaHQpIGNvbG9yIG9mIHRoZSBtYXRlcmlhbCwgZXNzZW50aWFsbHkgYSBzb2xpZCBjb2xvclxuXHRcdCAqIHVuYWZmZWN0ZWQgYnkgb3RoZXIgbGlnaHRpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cblx0XHQvKipcblx0XHQgKiBJbnRlbnNpdHkgb2YgdGhlIGVtaXNzaXZlIGxpZ2h0LiBNb2R1bGF0ZXMgdGhlIGVtaXNzaXZlIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCBlbWlzc2l2ZSAoZ2xvdykgbWFwLiBUaGUgZW1pc3NpdmUgbWFwIGNvbG9yIGlzIG1vZHVsYXRlZCBieSB0aGVcblx0XHQgKiBlbWlzc2l2ZSBjb2xvciBhbmQgdGhlIGVtaXNzaXZlIGludGVuc2l0eS4gSWYgeW91IGhhdmUgYW4gZW1pc3NpdmUgbWFwLFxuXHRcdCAqIGJlIHN1cmUgdG8gc2V0IHRoZSBlbWlzc2l2ZSBjb2xvciB0byBzb21ldGhpbmcgb3RoZXIgdGhhbiBibGFjay5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBidW1wIG1hcC4gVGhlIGJsYWNrIGFuZCB3aGl0ZSB2YWx1ZXMgbWFwIHRvIHRoZVxuXHRcdCAqIHBlcmNlaXZlZCBkZXB0aCBpbiByZWxhdGlvbiB0byB0aGUgbGlnaHRzLiBCdW1wIGRvZXNuJ3QgYWN0dWFsbHkgYWZmZWN0XG5cdFx0ICogdGhlIGdlb21ldHJ5IG9mIHRoZSBvYmplY3QsIG9ubHkgdGhlIGxpZ2h0aW5nLiBJZiBhIG5vcm1hbCBtYXAgaXMgZGVmaW5lZFxuXHRcdCAqIHRoaXMgd2lsbCBiZSBpZ25vcmVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGJ1bXAgbWFwIGFmZmVjdHMgdGhlIG1hdGVyaWFsLiBUeXBpY2FsIHJhbmdlIGlzIGBbMCwxXWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBub3JtYWwgbWFwLiBUaGUgUkdCIHZhbHVlcyBhZmZlY3QgdGhlIHN1cmZhY2Vcblx0XHQgKiBub3JtYWwgZm9yIGVhY2ggcGl4ZWwgZnJhZ21lbnQgYW5kIGNoYW5nZSB0aGUgd2F5IHRoZSBjb2xvciBpcyBsaXQuIE5vcm1hbFxuXHRcdCAqIG1hcHMgZG8gbm90IGNoYW5nZSB0aGUgYWN0dWFsIHNoYXBlIG9mIHRoZSBzdXJmYWNlLCBvbmx5IHRoZSBsaWdodGluZy4gSW5cblx0XHQgKiBjYXNlIHRoZSBtYXRlcmlhbCBoYXMgYSBub3JtYWwgbWFwIGF1dGhvcmVkIHVzaW5nIHRoZSBsZWZ0IGhhbmRlZFxuXHRcdCAqIGNvbnZlbnRpb24sIHRoZSBgeWAgY29tcG9uZW50IG9mIGBub3JtYWxTY2FsZWAgc2hvdWxkIGJlIG5lZ2F0ZWQgdG8gY29tcGVuc2F0ZVxuXHRcdCAqIGZvciB0aGUgZGlmZmVyZW50IGhhbmRlZG5lc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIG5vcm1hbCBtYXAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFRhbmdlbnRTcGFjZU5vcm1hbE1hcHxPYmplY3RTcGFjZU5vcm1hbE1hcCl9XG5cdFx0ICogQGRlZmF1bHQgVGFuZ2VudFNwYWNlTm9ybWFsTWFwXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIG5vcm1hbCBtYXAgYWZmZWN0cyB0aGUgbWF0ZXJpYWwuIFR5cGljYWwgdmFsdWUgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEpXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGlzcGxhY2VtZW50IG1hcCBhZmZlY3RzIHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVzaCdzIHZlcnRpY2VzLiBVbmxpa2Vcblx0XHQgKiBvdGhlciBtYXBzIHdoaWNoIG9ubHkgYWZmZWN0IHRoZSBsaWdodCBhbmQgc2hhZGUgb2YgdGhlIG1hdGVyaWFsIHRoZVxuXHRcdCAqIGRpc3BsYWNlZCB2ZXJ0aWNlcyBjYW4gY2FzdCBzaGFkb3dzLCBibG9jayBvdGhlciBvYmplY3RzLCBhbmQgb3RoZXJ3aXNlXG5cdFx0ICogYWN0IGFzIHJlYWwgZ2VvbWV0cnkuIFRoZSBkaXNwbGFjZW1lbnQgdGV4dHVyZSBpcyBhbiBpbWFnZSB3aGVyZSB0aGUgdmFsdWVcblx0XHQgKiBvZiBlYWNoIHBpeGVsICh3aGl0ZSBiZWluZyB0aGUgaGlnaGVzdCkgaXMgbWFwcGVkIGFnYWluc3QsIGFuZFxuXHRcdCAqIHJlcG9zaXRpb25zLCB0aGUgdmVydGljZXMgb2YgdGhlIG1lc2guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIG1lc2ggKHdoZXJlIGJsYWNrIGlzIG5vXG5cdFx0ICogZGlzcGxhY2VtZW50LCBhbmQgd2hpdGUgaXMgbWF4aW11bSBkaXNwbGFjZW1lbnQpLiBXaXRob3V0IGEgZGlzcGxhY2VtZW50XG5cdFx0ICogbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9mZnNldCBvZiB0aGUgZGlzcGxhY2VtZW50IG1hcCdzIHZhbHVlcyBvbiB0aGUgbWVzaCdzIHZlcnRpY2VzLlxuXHRcdCAqIFRoZSBiaWFzIGlzIGFkZGVkIHRvIHRoZSBzY2FsZWQgc2FtcGxlIG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwLlxuXHRcdCAqIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnQgbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ3JlZW4gY2hhbm5lbCBvZiB0aGlzIHRleHR1cmUgaXMgdXNlZCB0byBhbHRlciB0aGUgcm91Z2huZXNzIG9mIHRoZVxuXHRcdCAqIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYmx1ZSBjaGFubmVsIG9mIHRoaXMgdGV4dHVyZSBpcyB1c2VkIHRvIGFsdGVyIHRoZSBtZXRhbG5lc3Mgb2YgdGhlXG5cdFx0ICogbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWV0YWxuZXNzTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbHBoYSBtYXAgaXMgYSBncmF5c2NhbGUgdGV4dHVyZSB0aGF0IGNvbnRyb2xzIHRoZSBvcGFjaXR5IGFjcm9zcyB0aGVcblx0XHQgKiBzdXJmYWNlIChibGFjazogZnVsbHkgdHJhbnNwYXJlbnQ7IHdoaXRlOiBmdWxseSBvcGFxdWUpLlxuXHRcdCAqXG5cdFx0ICogT25seSB0aGUgY29sb3Igb2YgdGhlIHRleHR1cmUgaXMgdXNlZCwgaWdub3JpbmcgdGhlIGFscGhhIGNoYW5uZWwgaWYgb25lXG5cdFx0ICogZXhpc3RzLiBGb3IgUkdCIGFuZCBSR0JBIHRleHR1cmVzLCB0aGUgcmVuZGVyZXIgd2lsbCB1c2UgdGhlIGdyZWVuIGNoYW5uZWxcblx0XHQgKiB3aGVuIHNhbXBsaW5nIHRoaXMgdGV4dHVyZSBkdWUgdG8gdGhlIGV4dHJhIGJpdCBvZiBwcmVjaXNpb24gcHJvdmlkZWQgZm9yXG5cdFx0ICogZ3JlZW4gaW4gRFhULWNvbXByZXNzZWQgYW5kIHVuY29tcHJlc3NlZCBSR0IgNTY1IGZvcm1hdHMuIEx1bWluYW5jZS1vbmx5IGFuZFxuXHRcdCAqIGx1bWluYW5jZS9hbHBoYSB0ZXh0dXJlcyB3aWxsIGFsc28gc3RpbGwgd29yayBhcyBleHBlY3RlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZW52aXJvbm1lbnQgbWFwLiBUbyBlbnN1cmUgYSBwaHlzaWNhbGx5IGNvcnJlY3QgcmVuZGVyaW5nLCBlbnZpcm9ubWVudCBtYXBzXG5cdFx0ICogYXJlIGludGVybmFsbHkgcHJlLXByb2Nlc3NlZCB3aXRoIHtAbGluayBQTVJFTUdlbmVyYXRvcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByb3RhdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQgbWFwIGluIHJhZGlhbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RXVsZXJ9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFNjYWxlcyB0aGUgZWZmZWN0IG9mIHRoZSBlbnZpcm9ubWVudCBtYXAgYnkgbXVsdGlwbHlpbmcgaXRzIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJzIHRoZSBnZW9tZXRyeSBhcyBhIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIENhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgU1ZHUmVuZGVyZXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBhcHBlYXJhbmNlIG9mIHdpcmVmcmFtZSBlbmRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdyb3VuZCd8J2JldmVsJ3wnbWl0ZXInKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgYXBwZWFyYW5jZSBvZiB3aXJlZnJhbWUgam9pbnRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdyb3VuZCd8J2JldmVsJ3wnbWl0ZXInKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBtYXRlcmlhbCBpcyByZW5kZXJlZCB3aXRoIGZsYXQgc2hhZGluZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7ICdTVEFOREFSRCc6ICcnIH07XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMucm91Z2huZXNzID0gc291cmNlLnJvdWdobmVzcztcblx0XHR0aGlzLm1ldGFsbmVzcyA9IHNvdXJjZS5tZXRhbG5lc3M7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLnJvdWdobmVzc01hcCA9IHNvdXJjZS5yb3VnaG5lc3NNYXA7XG5cblx0XHR0aGlzLm1ldGFsbmVzc01hcCA9IHNvdXJjZS5tZXRhbG5lc3NNYXA7XG5cblx0XHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdFx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24uY29weSggc291cmNlLmVudk1hcFJvdGF0aW9uICk7XG5cdFx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEFuIGV4dGVuc2lvbiBvZiB0aGUge0BsaW5rIE1lc2hTdGFuZGFyZE1hdGVyaWFsfSwgcHJvdmlkaW5nIG1vcmUgYWR2YW5jZWRcbiAqIHBoeXNpY2FsbHktYmFzZWQgcmVuZGVyaW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSBBbmlzb3Ryb3B5OiBBYmlsaXR5IHRvIHJlcHJlc2VudCB0aGUgYW5pc290cm9waWMgcHJvcGVydHkgb2YgbWF0ZXJpYWxzXG4gKiBhcyBvYnNlcnZhYmxlIHdpdGggYnJ1c2hlZCBtZXRhbHMuXG4gKiAtIENsZWFyY29hdDogU29tZSBtYXRlcmlhbHMg4oCUIGxpa2UgY2FyIHBhaW50cywgY2FyYm9uIGZpYmVyLCBhbmQgd2V0IHN1cmZhY2VzIOKAlCByZXF1aXJlXG4gKiBhIGNsZWFyLCByZWZsZWN0aXZlIGxheWVyIG9uIHRvcCBvZiBhbm90aGVyIGxheWVyIHRoYXQgbWF5IGJlIGlycmVndWxhciBvciByb3VnaC5cbiAqIENsZWFyY29hdCBhcHByb3hpbWF0ZXMgdGhpcyBlZmZlY3QsIHdpdGhvdXQgdGhlIG5lZWQgZm9yIGEgc2VwYXJhdGUgdHJhbnNwYXJlbnQgc3VyZmFjZS5cbiAqIC0gSXJpZGVzY2VuY2U6IEFsbG93cyB0byByZW5kZXIgdGhlIGVmZmVjdCB3aGVyZSBodWUgdmFyaWVzICBkZXBlbmRpbmcgb24gdGhlIHZpZXdpbmdcbiAqIGFuZ2xlIGFuZCBpbGx1bWluYXRpb24gYW5nbGUuIFRoaXMgY2FuIGJlIHNlZW4gb24gc29hcCBidWJibGVzLCBvaWwgZmlsbXMsIG9yIG9uIHRoZVxuICogd2luZ3Mgb2YgbWFueSBpbnNlY3RzLlxuICogLSBQaHlzaWNhbGx5LWJhc2VkIHRyYW5zcGFyZW5jeTogT25lIGxpbWl0YXRpb24gb2Yge0BsaW5rIE1hdGVyaWFsI29wYWNpdHl9IGlzIHRoYXQgaGlnaGx5XG4gKiB0cmFuc3BhcmVudCBtYXRlcmlhbHMgYXJlIGxlc3MgcmVmbGVjdGl2ZS4gUGh5c2ljYWxseS1iYXNlZCB0cmFuc21pc3Npb24gcHJvdmlkZXMgYSBtb3JlXG4gKiByZWFsaXN0aWMgb3B0aW9uIGZvciB0aGluLCB0cmFuc3BhcmVudCBzdXJmYWNlcyBsaWtlIGdsYXNzLlxuICogLSBBZHZhbmNlZCByZWZsZWN0aXZpdHk6IE1vcmUgZmxleGlibGUgcmVmbGVjdGl2aXR5IGZvciBub24tbWV0YWxsaWMgbWF0ZXJpYWxzLlxuICogLSBTaGVlbjogQ2FuIGJlIHVzZWQgZm9yIHJlcHJlc2VudGluZyBjbG90aCBhbmQgZmFicmljIG1hdGVyaWFscy5cbiAqXG4gKiBBcyBhIHJlc3VsdCBvZiB0aGVzZSBjb21wbGV4IHNoYWRpbmcgZmVhdHVyZXMsIGBNZXNoUGh5c2ljYWxNYXRlcmlhbGAgaGFzIGFcbiAqIGhpZ2hlciBwZXJmb3JtYW5jZSBjb3N0LCBwZXIgcGl4ZWwsIHRoYW4gb3RoZXIgdGhyZWUuanMgbWF0ZXJpYWxzLiBNb3N0XG4gKiBlZmZlY3RzIGFyZSBkaXNhYmxlZCBieSBkZWZhdWx0LCBhbmQgYWRkIGNvc3QgYXMgdGhleSBhcmUgZW5hYmxlZC4gRm9yXG4gKiBiZXN0IHJlc3VsdHMsIGFsd2F5cyBzcGVjaWZ5IGFuIGVudmlyb25tZW50IG1hcCB3aGVuIHVzaW5nIHRoaXMgbWF0ZXJpYWwuXG4gKlxuICogQGF1Z21lbnRzIE1lc2hTdGFuZGFyZE1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hQaHlzaWNhbE1hdGVyaWFsIGV4dGVuZHMgTWVzaFN0YW5kYXJkTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggcGh5c2ljYWwgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hQaHlzaWNhbE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHtcblxuXHRcdFx0J1NUQU5EQVJEJzogJycsXG5cdFx0XHQnUEhZU0lDQUwnOiAnJ1xuXG5cdFx0fTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoUGh5c2ljYWxNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcm90YXRpb24gb2YgdGhlIGFuaXNvdHJvcHkgaW4gdGFuZ2VudCwgYml0YW5nZW50IHNwYWNlLCBtZWFzdXJlZCBpbiByYWRpYW5zXG5cdFx0ICogY291bnRlci1jbG9ja3dpc2UgZnJvbSB0aGUgdGFuZ2VudC4gV2hlbiBgYW5pc290cm9weU1hcGAgaXMgcHJlc2VudCwgdGhpc1xuXHRcdCAqIHByb3BlcnR5IHByb3ZpZGVzIGFkZGl0aW9uYWwgcm90YXRpb24gdG8gdGhlIHZlY3RvcnMgaW4gdGhlIHRleHR1cmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBSZWQgYW5kIGdyZWVuIGNoYW5uZWxzIHJlcHJlc2VudCB0aGUgYW5pc290cm9weSBkaXJlY3Rpb24gaW4gYFstMSwgMV1gIHRhbmdlbnQsXG5cdFx0ICogYml0YW5nZW50IHNwYWNlLCB0byBiZSByb3RhdGVkIGJ5IGBhbmlzb3Ryb3B5Um90YXRpb25gLiBUaGUgYmx1ZSBjaGFubmVsXG5cdFx0ICogY29udGFpbnMgc3RyZW5ndGggYXMgYFswLCAxXWAgdG8gYmUgbXVsdGlwbGllZCBieSBgYW5pc290cm9weWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYW5pc290cm9weU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVkIGNoYW5uZWwgb2YgdGhpcyB0ZXh0dXJlIGlzIG11bHRpcGxpZWQgYWdhaW5zdCBgY2xlYXJjb2F0YCxcblx0XHQgKiBmb3IgcGVyLXBpeGVsIGNvbnRyb2wgb3ZlciBhIGNvYXRpbmcncyBpbnRlbnNpdHkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFJvdWdobmVzcyBvZiB0aGUgY2xlYXIgY29hdCBsYXllciwgZnJvbSBgMC4wYCB0byBgMS4wYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzID0gMC4wO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGdyZWVuIGNoYW5uZWwgb2YgdGhpcyB0ZXh0dXJlIGlzIG11bHRpcGxpZWQgYWdhaW5zdFxuXHRcdCAqIGBjbGVhcmNvYXRSb3VnaG5lc3NgLCBmb3IgcGVyLXBpeGVsIGNvbnRyb2wgb3ZlciBhIGNvYXRpbmcncyByb3VnaG5lc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIGBjbGVhcmNvYXROb3JtYWxNYXBgIGFmZmVjdHMgdGhlIGNsZWFyIGNvYXQgbGF5ZXIsIGZyb21cblx0XHQgKiBgKDAsMClgIHRvIGAoMSwxKWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKiBAZGVmYXVsdCAoMSwxKVxuXHRcdCAqL1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FuIGJlIHVzZWQgdG8gZW5hYmxlIGluZGVwZW5kZW50IG5vcm1hbHMgZm9yIHRoZSBjbGVhciBjb2F0IGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBJbmRleC1vZi1yZWZyYWN0aW9uIGZvciBub24tbWV0YWxsaWMgbWF0ZXJpYWxzLCBmcm9tIGAxLjBgIHRvIGAyLjMzM2AuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDEuNVxuXHRcdCAqL1xuXHRcdHRoaXMuaW9yID0gMS41O1xuXG5cdFx0LyoqXG5cdFx0ICogRGVncmVlIG9mIHJlZmxlY3Rpdml0eSwgZnJvbSBgMC4wYCB0byBgMS4wYC4gRGVmYXVsdCBpcyBgMC41YCwgd2hpY2hcblx0XHQgKiBjb3JyZXNwb25kcyB0byBhbiBpbmRleC1vZi1yZWZyYWN0aW9uIG9mIGAxLjVgLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBtb2RlbHMgdGhlIHJlZmxlY3Rpdml0eSBvZiBub24tbWV0YWxsaWMgbWF0ZXJpYWxzLiBJdCBoYXMgbm8gZWZmZWN0XG5cdFx0ICogd2hlbiBgbWV0YWxuZXNzYCBpcyBgMS4wYFxuXHRcdCAqXG5cdFx0ICogQG5hbWUgTWVzaFBoeXNpY2FsTWF0ZXJpYWwjcmVmbGVjdGl2aXR5XG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwLjVcblx0XHQgKi9cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdyZWZsZWN0aXZpdHknLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRyZXR1cm4gKCBjbGFtcCggMi41ICogKCB0aGlzLmlvciAtIDEgKSAvICggdGhpcy5pb3IgKyAxICksIDAsIDEgKSApO1xuXG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAoIHJlZmxlY3Rpdml0eSApIHtcblxuXHRcdFx0XHR0aGlzLmlvciA9ICggMSArIDAuNCAqIHJlZmxlY3Rpdml0eSApIC8gKCAxIC0gMC40ICogcmVmbGVjdGl2aXR5ICk7XG5cblx0XHRcdH1cblx0XHR9ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVkIGNoYW5uZWwgb2YgdGhpcyB0ZXh0dXJlIGlzIG11bHRpcGxpZWQgYWdhaW5zdCBgaXJpZGVzY2VuY2VgLCBmb3IgcGVyLXBpeGVsXG5cdFx0ICogY29udHJvbCBvdmVyIGlyaWRlc2NlbmNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmlyaWRlc2NlbmNlTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFN0cmVuZ3RoIG9mIHRoZSBpcmlkZXNjZW5jZSBSR0IgY29sb3Igc2hpZnQgZWZmZWN0LCByZXByZXNlbnRlZCBieSBhbiBpbmRleC1vZi1yZWZyYWN0aW9uLlxuXHRcdCAqIEJldHdlZW4gYDEuMGAgdG8gYDIuMzMzYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMS4zXG5cdFx0ICovXG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUiA9IDEuMztcblxuXHRcdC8qKlxuXHRcdCAqQXJyYXkgb2YgZXhhY3RseSAyIGVsZW1lbnRzLCBzcGVjaWZ5aW5nIG1pbmltdW0gYW5kIG1heGltdW0gdGhpY2tuZXNzIG9mIHRoZSBpcmlkZXNjZW5jZSBsYXllci5cblx0XHQgVGhpY2tuZXNzIG9mIGlyaWRlc2NlbmNlIGxheWVyIGhhcyBhbiBlcXVpdmFsZW50IGVmZmVjdCBvZiB0aGUgb25lIGB0aGlja25lc3NgIGhhcyBvbiBgaW9yYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxudW1iZXIsbnVtYmVyPn1cblx0XHQgKiBAZGVmYXVsdCBbMTAwLDQwMF1cblx0XHQgKi9cblx0XHR0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgPSBbIDEwMCwgNDAwIF07XG5cblx0XHQvKipcblx0XHQgKiBBIHRleHR1cmUgdGhhdCBkZWZpbmVzIHRoZSB0aGlja25lc3Mgb2YgdGhlIGlyaWRlc2NlbmNlIGxheWVyLCBzdG9yZWQgaW4gdGhlIGdyZWVuIGNoYW5uZWwuXG5cdFx0ICogTWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMgb2YgdGhpY2tuZXNzIGFyZSBkZWZpbmVkIGJ5IGBpcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlYCBhcnJheTpcblx0XHQgKiAtIGAwLjBgIGluIHRoZSBncmVlbiBjaGFubmVsIHdpbGwgcmVzdWx0IGluIHRoaWNrbmVzcyBlcXVhbCB0byBmaXJzdCBlbGVtZW50IG9mIHRoZSBhcnJheS5cblx0XHQgKiAtIGAxLjBgIGluIHRoZSBncmVlbiBjaGFubmVsIHdpbGwgcmVzdWx0IGluIHRoaWNrbmVzcyBlcXVhbCB0byBzZWNvbmQgZWxlbWVudCBvZiB0aGUgYXJyYXkuXG5cdFx0ICogLSBWYWx1ZXMgaW4tYmV0d2VlbiB3aWxsIGxpbmVhcmx5IGludGVycG9sYXRlIGJldHdlZW4gdGhlIGVsZW1lbnRzIG9mIHRoZSBhcnJheS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2hlZW4gdGludC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5zaGVlbkNvbG9yID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIFJHQiBjaGFubmVscyBvZiB0aGlzIHRleHR1cmUgYXJlIG11bHRpcGxpZWQgYWdhaW5zdCAgYHNoZWVuQ29sb3JgLCBmb3IgcGVyLXBpeGVsIGNvbnRyb2xcblx0XHQgKiBvdmVyIHNoZWVuIHRpbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hlZW5Db2xvck1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBSb3VnaG5lc3Mgb2YgdGhlIHNoZWVuIGxheWVyLCBmcm9tIGAwLjBgIHRvIGAxLjBgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5zaGVlblJvdWdobmVzcyA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbHBoYSBjaGFubmVsIG9mIHRoaXMgdGV4dHVyZSBpcyBtdWx0aXBsaWVkIGFnYWluc3QgYHNoZWVuUm91Z2huZXNzYCwgZm9yIHBlci1waXhlbCBjb250cm9sXG5cdFx0ICogb3ZlciBzaGVlbiByb3VnaG5lc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2hlZW5Sb3VnaG5lc3NNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlZCBjaGFubmVsIG9mIHRoaXMgdGV4dHVyZSBpcyBtdWx0aXBsaWVkIGFnYWluc3QgYHRyYW5zbWlzc2lvbmAsIGZvciBwZXItcGl4ZWwgY29udHJvbCBvdmVyXG5cdFx0ICogb3B0aWNhbCB0cmFuc3BhcmVuY3kuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudHJhbnNtaXNzaW9uTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0aGlja25lc3Mgb2YgdGhlIHZvbHVtZSBiZW5lYXRoIHRoZSBzdXJmYWNlLiBUaGUgdmFsdWUgaXMgZ2l2ZW4gaW4gdGhlXG5cdFx0ICogY29vcmRpbmF0ZSBzcGFjZSBvZiB0aGUgbWVzaC4gSWYgdGhlIHZhbHVlIGlzIGAwYCB0aGUgbWF0ZXJpYWwgaXNcblx0XHQgKiB0aGluLXdhbGxlZC4gT3RoZXJ3aXNlIHRoZSBtYXRlcmlhbCBpcyBhIHZvbHVtZSBib3VuZGFyeS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudGhpY2tuZXNzID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgdGV4dHVyZSB0aGF0IGRlZmluZXMgdGhlIHRoaWNrbmVzcywgc3RvcmVkIGluIHRoZSBncmVlbiBjaGFubmVsLiBUaGlzIHdpbGxcblx0XHQgKiBiZSBtdWx0aXBsaWVkIGJ5IGB0aGlja25lc3NgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnRoaWNrbmVzc01hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBEZW5zaXR5IG9mIHRoZSBtZWRpdW0gZ2l2ZW4gYXMgdGhlIGF2ZXJhZ2UgZGlzdGFuY2UgdGhhdCBsaWdodCB0cmF2ZWxzIGluXG5cdFx0ICogdGhlIG1lZGl1bSBiZWZvcmUgaW50ZXJhY3Rpbmcgd2l0aCBhIHBhcnRpY2xlLiBUaGUgdmFsdWUgaXMgZ2l2ZW4gaW4gd29ybGRcblx0XHQgKiBzcGFjZSB1bml0cywgYW5kIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IEluZmluaXR5XG5cdFx0ICovXG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gSW5maW5pdHk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgdGhhdCB3aGl0ZSBsaWdodCB0dXJucyBpbnRvIGR1ZSB0byBhYnNvcnB0aW9uIHdoZW4gcmVhY2hpbmcgdGhlXG5cdFx0ICogYXR0ZW51YXRpb24gZGlzdGFuY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSwxKVxuXHRcdCAqL1xuXHRcdHRoaXMuYXR0ZW51YXRpb25Db2xvciA9IG5ldyBDb2xvciggMSwgMSwgMSApO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBmbG9hdCB0aGF0IHNjYWxlcyB0aGUgYW1vdW50IG9mIHNwZWN1bGFyIHJlZmxlY3Rpb24gZm9yIG5vbi1tZXRhbHMgb25seS5cblx0XHQgKiBXaGVuIHNldCB0byB6ZXJvLCB0aGUgbW9kZWwgaXMgZWZmZWN0aXZlbHkgTGFtYmVydGlhbi4gRnJvbSBgMC4wYCB0byBgMS4wYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWxwaGEgY2hhbm5lbCBvZiB0aGlzIHRleHR1cmUgaXMgbXVsdGlwbGllZCBhZ2FpbnN0IGBzcGVjdWxhckludGVuc2l0eWAsXG5cdFx0ICogZm9yIHBlci1waXhlbCBjb250cm9sIG92ZXIgc3BlY3VsYXIgaW50ZW5zaXR5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRpbnRzIHRoZSBzcGVjdWxhciByZWZsZWN0aW9uIGF0IG5vcm1hbCBpbmNpZGVuY2UgZm9yIG5vbi1tZXRhbHMgb25seS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKiBAZGVmYXVsdCAoMSwxLDEpXG5cdFx0ICovXG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yID0gbmV3IENvbG9yKCAxLCAxLCAxICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgUkdCIGNoYW5uZWxzIG9mIHRoaXMgdGV4dHVyZSBhcmUgbXVsdGlwbGllZCBhZ2FpbnN0IGBzcGVjdWxhckNvbG9yYCxcblx0XHQgKiBmb3IgcGVyLXBpeGVsIGNvbnRyb2wgb3ZlciBzcGVjdWxhciBjb2xvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yTWFwID0gbnVsbDtcblxuXHRcdHRoaXMuX2FuaXNvdHJvcHkgPSAwO1xuXHRcdHRoaXMuX2NsZWFyY29hdCA9IDA7XG5cdFx0dGhpcy5fZGlzcGVyc2lvbiA9IDA7XG5cdFx0dGhpcy5faXJpZGVzY2VuY2UgPSAwO1xuXHRcdHRoaXMuX3NoZWVuID0gMC4wO1xuXHRcdHRoaXMuX3RyYW5zbWlzc2lvbiA9IDA7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGFuaXNvdHJvcHkgc3RyZW5ndGguXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCBhbmlzb3Ryb3B5KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2FuaXNvdHJvcHk7XG5cblx0fVxuXG5cdHNldCBhbmlzb3Ryb3B5KCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fYW5pc290cm9weSA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fYW5pc290cm9weSA9IHZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVwcmVzZW50cyB0aGUgaW50ZW5zaXR5IG9mIHRoZSBjbGVhciBjb2F0IGxheWVyLCBmcm9tIGAwLjBgIHRvIGAxLjBgLiBVc2Vcblx0ICogY2xlYXIgY29hdCByZWxhdGVkIHByb3BlcnRpZXMgdG8gZW5hYmxlIG11bHRpbGF5ZXIgbWF0ZXJpYWxzIHRoYXQgaGF2ZSBhXG5cdCAqIHRoaW4gdHJhbnNsdWNlbnQgbGF5ZXIgb3ZlciB0aGUgYmFzZSBsYXllci5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgMFxuXHQgKi9cblx0Z2V0IGNsZWFyY29hdCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGVhcmNvYXQ7XG5cblx0fVxuXG5cdHNldCBjbGVhcmNvYXQoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9jbGVhcmNvYXQgPiAwICE9PSB2YWx1ZSA+IDAgKSB7XG5cblx0XHRcdHRoaXMudmVyc2lvbiArKztcblxuXHRcdH1cblxuXHRcdHRoaXMuX2NsZWFyY29hdCA9IHZhbHVlO1xuXG5cdH1cblx0LyoqXG5cdCAqIFRoZSBpbnRlbnNpdHkgb2YgdGhlIGlyaWRlc2NlbmNlIGxheWVyLCBzaW11bGF0aW5nIFJHQiBjb2xvciBzaGlmdCBiYXNlZCBvbiB0aGUgYW5nbGUgYmV0d2VlblxuXHQgKiB0aGUgc3VyZmFjZSBhbmQgdGhlIHZpZXdlciwgZnJvbSBgMC4wYCB0byBgMS4wYC5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgMFxuXHQgKi9cblx0Z2V0IGlyaWRlc2NlbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2lyaWRlc2NlbmNlO1xuXG5cdH1cblxuXHRzZXQgaXJpZGVzY2VuY2UoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9pcmlkZXNjZW5jZSA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5faXJpZGVzY2VuY2UgPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHN0cmVuZ3RoIG9mIHRoZSBhbmd1bGFyIHNlcGFyYXRpb24gb2YgY29sb3JzIChjaHJvbWF0aWMgYWJlcnJhdGlvbikgdHJhbnNtaXR0aW5nXG5cdCAqIHRocm91Z2ggYSByZWxhdGl2ZWx5IGNsZWFyIHZvbHVtZS4gQW55IHZhbHVlIHplcm8gb3IgbGFyZ2VyIGlzIHZhbGlkLCB0aGUgdHlwaWNhbCByYW5nZSBvZlxuXHQgKiByZWFsaXN0aWMgdmFsdWVzIGlzIGBbMCwgMV1gLiBUaGlzIHByb3BlcnR5IGNhbiBiZSBvbmx5IGJlIHVzZWQgd2l0aCB0cmFuc21pc3NpdmUgb2JqZWN0cy5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgMFxuXHQgKi9cblx0Z2V0IGRpc3BlcnNpb24oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZGlzcGVyc2lvbjtcblxuXHR9XG5cblx0c2V0IGRpc3BlcnNpb24oIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9kaXNwZXJzaW9uID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9kaXNwZXJzaW9uID0gdmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgaW50ZW5zaXR5IG9mIHRoZSBzaGVlbiBsYXllciwgZnJvbSBgMC4wYCB0byBgMS4wYC5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgMFxuXHQgKi9cblx0Z2V0IHNoZWVuKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NoZWVuO1xuXG5cdH1cblxuXHRzZXQgc2hlZW4oIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLl9zaGVlbiA+IDAgIT09IHZhbHVlID4gMCApIHtcblxuXHRcdFx0dGhpcy52ZXJzaW9uICsrO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fc2hlZW4gPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZ3JlZSBvZiB0cmFuc21pc3Npb24gKG9yIG9wdGljYWwgdHJhbnNwYXJlbmN5KSwgZnJvbSBgMC4wYCB0byBgMS4wYC5cblx0ICpcblx0ICogVGhpbiwgdHJhbnNwYXJlbnQgb3Igc2VtaXRyYW5zcGFyZW50LCBwbGFzdGljIG9yIGdsYXNzIG1hdGVyaWFscyByZW1haW5cblx0ICogbGFyZ2VseSByZWZsZWN0aXZlIGV2ZW4gaWYgdGhleSBhcmUgZnVsbHkgdHJhbnNtaXNzaXZlLiBUaGUgdHJhbnNtaXNzaW9uXG5cdCAqIHByb3BlcnR5IGNhbiBiZSB1c2VkIHRvIG1vZGVsIHRoZXNlIG1hdGVyaWFscy5cblx0ICpcblx0ICogV2hlbiB0cmFuc21pc3Npb24gaXMgbm9uLXplcm8sIGBvcGFjaXR5YCBzaG91bGQgYmUgIHNldCB0byBgMWAuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDBcblx0ICovXG5cdGdldCB0cmFuc21pc3Npb24oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdHJhbnNtaXNzaW9uO1xuXG5cdH1cblxuXHRzZXQgdHJhbnNtaXNzaW9uKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5fdHJhbnNtaXNzaW9uID4gMCAhPT0gdmFsdWUgPiAwICkge1xuXG5cdFx0XHR0aGlzLnZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0XHR0aGlzLl90cmFuc21pc3Npb24gPSB2YWx1ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7XG5cblx0XHRcdCdTVEFOREFSRCc6ICcnLFxuXHRcdFx0J1BIWVNJQ0FMJzogJydcblxuXHRcdH07XG5cblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBzb3VyY2UuYW5pc290cm9weTtcblx0XHR0aGlzLmFuaXNvdHJvcHlSb3RhdGlvbiA9IHNvdXJjZS5hbmlzb3Ryb3B5Um90YXRpb247XG5cdFx0dGhpcy5hbmlzb3Ryb3B5TWFwID0gc291cmNlLmFuaXNvdHJvcHlNYXA7XG5cblx0XHR0aGlzLmNsZWFyY29hdCA9IHNvdXJjZS5jbGVhcmNvYXQ7XG5cdFx0dGhpcy5jbGVhcmNvYXRNYXAgPSBzb3VyY2UuY2xlYXJjb2F0TWFwO1xuXHRcdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzID0gc291cmNlLmNsZWFyY29hdFJvdWdobmVzcztcblx0XHR0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcCA9IHNvdXJjZS5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cdFx0dGhpcy5jbGVhcmNvYXROb3JtYWxNYXAgPSBzb3VyY2UuY2xlYXJjb2F0Tm9ybWFsTWFwO1xuXHRcdHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUuY29weSggc291cmNlLmNsZWFyY29hdE5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BlcnNpb24gPSBzb3VyY2UuZGlzcGVyc2lvbjtcblx0XHR0aGlzLmlvciA9IHNvdXJjZS5pb3I7XG5cblx0XHR0aGlzLmlyaWRlc2NlbmNlID0gc291cmNlLmlyaWRlc2NlbmNlO1xuXHRcdHRoaXMuaXJpZGVzY2VuY2VNYXAgPSBzb3VyY2UuaXJpZGVzY2VuY2VNYXA7XG5cdFx0dGhpcy5pcmlkZXNjZW5jZUlPUiA9IHNvdXJjZS5pcmlkZXNjZW5jZUlPUjtcblx0XHR0aGlzLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UgPSBbIC4uLnNvdXJjZS5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlIF07XG5cdFx0dGhpcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA9IHNvdXJjZS5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcDtcblxuXHRcdHRoaXMuc2hlZW4gPSBzb3VyY2Uuc2hlZW47XG5cdFx0dGhpcy5zaGVlbkNvbG9yLmNvcHkoIHNvdXJjZS5zaGVlbkNvbG9yICk7XG5cdFx0dGhpcy5zaGVlbkNvbG9yTWFwID0gc291cmNlLnNoZWVuQ29sb3JNYXA7XG5cdFx0dGhpcy5zaGVlblJvdWdobmVzcyA9IHNvdXJjZS5zaGVlblJvdWdobmVzcztcblx0XHR0aGlzLnNoZWVuUm91Z2huZXNzTWFwID0gc291cmNlLnNoZWVuUm91Z2huZXNzTWFwO1xuXG5cdFx0dGhpcy50cmFuc21pc3Npb24gPSBzb3VyY2UudHJhbnNtaXNzaW9uO1xuXHRcdHRoaXMudHJhbnNtaXNzaW9uTWFwID0gc291cmNlLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdHRoaXMudGhpY2tuZXNzID0gc291cmNlLnRoaWNrbmVzcztcblx0XHR0aGlzLnRoaWNrbmVzc01hcCA9IHNvdXJjZS50aGlja25lc3NNYXA7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkRpc3RhbmNlID0gc291cmNlLmF0dGVudWF0aW9uRGlzdGFuY2U7XG5cdFx0dGhpcy5hdHRlbnVhdGlvbkNvbG9yLmNvcHkoIHNvdXJjZS5hdHRlbnVhdGlvbkNvbG9yICk7XG5cblx0XHR0aGlzLnNwZWN1bGFySW50ZW5zaXR5ID0gc291cmNlLnNwZWN1bGFySW50ZW5zaXR5O1xuXHRcdHRoaXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBzb3VyY2Uuc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yLmNvcHkoIHNvdXJjZS5zcGVjdWxhckNvbG9yICk7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yTWFwID0gc291cmNlLnNwZWN1bGFyQ29sb3JNYXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIG1hdGVyaWFsIGZvciBzaGlueSBzdXJmYWNlcyB3aXRoIHNwZWN1bGFyIGhpZ2hsaWdodHMuXG4gKlxuICogVGhlIG1hdGVyaWFsIHVzZXMgYSBub24tcGh5c2ljYWxseSBiYXNlZCBbQmxpbm4tUGhvbmdde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JsaW5uLVBob25nX3NoYWRpbmdfbW9kZWx9XG4gKiBtb2RlbCBmb3IgY2FsY3VsYXRpbmcgcmVmbGVjdGFuY2UuIFVubGlrZSB0aGUgTGFtYmVydGlhbiBtb2RlbCB1c2VkIGluIHRoZVxuICoge0BsaW5rIE1lc2hMYW1iZXJ0TWF0ZXJpYWx9IHRoaXMgY2FuIHNpbXVsYXRlIHNoaW55IHN1cmZhY2VzIHdpdGggc3BlY3VsYXJcbiAqIGhpZ2hsaWdodHMgKHN1Y2ggYXMgdmFybmlzaGVkIHdvb2QpLiBgTWVzaFBob25nTWF0ZXJpYWxgIHVzZXMgcGVyLWZyYWdtZW50IHNoYWRpbmcuXG4gKlxuICogUGVyZm9ybWFuY2Ugd2lsbCBnZW5lcmFsbHkgYmUgZ3JlYXRlciB3aGVuIHVzaW5nIHRoaXMgbWF0ZXJpYWwgb3ZlciB0aGVcbiAqIHtAbGluayBNZXNoU3RhbmRhcmRNYXRlcmlhbH0gb3Ige0BsaW5rIE1lc2hQaHlzaWNhbE1hdGVyaWFsfSwgYXQgdGhlIGNvc3Qgb2ZcbiAqIHNvbWUgZ3JhcGhpY2FsIGFjY3VyYWN5LlxuICpcbiAqIEBhdWdtZW50cyBNYXRlcmlhbFxuICovXG5jbGFzcyBNZXNoUGhvbmdNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIHBob25nIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdIC0gQW4gb2JqZWN0IHdpdGggb25lIG9yIG1vcmUgcHJvcGVydGllc1xuXHQgKiBkZWZpbmluZyB0aGUgbWF0ZXJpYWwncyBhcHBlYXJhbmNlLiBBbnkgcHJvcGVydHkgb2YgdGhlIG1hdGVyaWFsXG5cdCAqIChpbmNsdWRpbmcgYW55IHByb3BlcnR5IGZyb20gaW5oZXJpdGVkIG1hdGVyaWFscykgY2FuIGJlIHBhc3NlZFxuXHQgKiBpbiBoZXJlLiBDb2xvciB2YWx1ZXMgY2FuIGJlIHBhc3NlZCBhbnkgdHlwZSBvZiB2YWx1ZSBhY2NlcHRlZFxuXHQgKiBieSB7QGxpbmsgQ29sb3Ijc2V0fS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFBob25nTWF0ZXJpYWwnO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29sb3Igb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NvbG9yfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXG5cblx0XHQvKipcblx0XHQgKiBTcGVjdWxhciBjb2xvciBvZiB0aGUgbWF0ZXJpYWwuIFRoZSBkZWZhdWx0IGNvbG9yIGlzIHNldCB0byBgMHgxMTExMTFgICh2ZXJ5IGRhcmsgZ3JleSlcblx0XHQgKlxuXHRcdCAqIFRoaXMgZGVmaW5lcyBob3cgc2hpbnkgdGhlIG1hdGVyaWFsIGlzIGFuZCB0aGUgY29sb3Igb2YgaXRzIHNoaW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NvbG9yfVxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoIDB4MTExMTExICk7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgc2hpbnkgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodCBpczsgYSBoaWdoZXIgdmFsdWUgZ2l2ZXMgYSBzaGFycGVyIGhpZ2hsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMzBcblx0XHQgKi9cblx0XHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbG9yIG1hcC4gTWF5IG9wdGlvbmFsbHkgaW5jbHVkZSBhbiBhbHBoYSBjaGFubmVsLCB0eXBpY2FsbHkgY29tYmluZWRcblx0XHQgKiB3aXRoIHtAbGluayBNYXRlcmlhbCN0cmFuc3BhcmVudH0gb3Ige0BsaW5rIE1hdGVyaWFsI2FscGhhVGVzdH0uIFRoZSB0ZXh0dXJlIG1hcFxuXHRcdCAqIGNvbG9yIGlzIG1vZHVsYXRlZCBieSB0aGUgZGlmZnVzZSBgY29sb3JgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQgbWFwLiBSZXF1aXJlcyBhIHNlY29uZCBzZXQgb2YgVVZzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgYmFrZWQgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlZCBjaGFubmVsIG9mIHRoaXMgdGV4dHVyZSBpcyB1c2VkIGFzIHRoZSBhbWJpZW50IG9jY2x1c2lvbiBtYXAuXG5cdFx0ICogUmVxdWlyZXMgYSBzZWNvbmQgc2V0IG9mIFVWcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hb01hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBJbnRlbnNpdHkgb2YgdGhlIGFtYmllbnQgb2NjbHVzaW9uIGVmZmVjdC4gUmFuZ2UgaXMgYFswLDFdYCwgd2hlcmUgYDBgXG5cdFx0ICogZGlzYWJsZXMgYW1iaWVudCBvY2NsdXNpb24uIFdoZXJlIGludGVuc2l0eSBpcyBgMWAgYW5kIHRoZSBBTyBtYXAnc1xuXHRcdCAqIHJlZCBjaGFubmVsIGlzIGFsc28gYDFgLCBhbWJpZW50IGxpZ2h0IGlzIGZ1bGx5IG9jY2x1ZGVkIG9uIGEgc3VyZmFjZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBFbWlzc2l2ZSAobGlnaHQpIGNvbG9yIG9mIHRoZSBtYXRlcmlhbCwgZXNzZW50aWFsbHkgYSBzb2xpZCBjb2xvclxuXHRcdCAqIHVuYWZmZWN0ZWQgYnkgb3RoZXIgbGlnaHRpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cblx0XHQvKipcblx0XHQgKiBJbnRlbnNpdHkgb2YgdGhlIGVtaXNzaXZlIGxpZ2h0LiBNb2R1bGF0ZXMgdGhlIGVtaXNzaXZlIGNvbG9yLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCBlbWlzc2l2ZSAoZ2xvdykgbWFwLiBUaGUgZW1pc3NpdmUgbWFwIGNvbG9yIGlzIG1vZHVsYXRlZCBieSB0aGVcblx0XHQgKiBlbWlzc2l2ZSBjb2xvciBhbmQgdGhlIGVtaXNzaXZlIGludGVuc2l0eS4gSWYgeW91IGhhdmUgYW4gZW1pc3NpdmUgbWFwLFxuXHRcdCAqIGJlIHN1cmUgdG8gc2V0IHRoZSBlbWlzc2l2ZSBjb2xvciB0byBzb21ldGhpbmcgb3RoZXIgdGhhbiBibGFjay5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBidW1wIG1hcC4gVGhlIGJsYWNrIGFuZCB3aGl0ZSB2YWx1ZXMgbWFwIHRvIHRoZVxuXHRcdCAqIHBlcmNlaXZlZCBkZXB0aCBpbiByZWxhdGlvbiB0byB0aGUgbGlnaHRzLiBCdW1wIGRvZXNuJ3QgYWN0dWFsbHkgYWZmZWN0XG5cdFx0ICogdGhlIGdlb21ldHJ5IG9mIHRoZSBvYmplY3QsIG9ubHkgdGhlIGxpZ2h0aW5nLiBJZiBhIG5vcm1hbCBtYXAgaXMgZGVmaW5lZFxuXHRcdCAqIHRoaXMgd2lsbCBiZSBpZ25vcmVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGJ1bXAgbWFwIGFmZmVjdHMgdGhlIG1hdGVyaWFsLiBUeXBpY2FsIHJhbmdlIGlzIGBbMCwxXWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGV4dHVyZSB0byBjcmVhdGUgYSBub3JtYWwgbWFwLiBUaGUgUkdCIHZhbHVlcyBhZmZlY3QgdGhlIHN1cmZhY2Vcblx0XHQgKiBub3JtYWwgZm9yIGVhY2ggcGl4ZWwgZnJhZ21lbnQgYW5kIGNoYW5nZSB0aGUgd2F5IHRoZSBjb2xvciBpcyBsaXQuIE5vcm1hbFxuXHRcdCAqIG1hcHMgZG8gbm90IGNoYW5nZSB0aGUgYWN0dWFsIHNoYXBlIG9mIHRoZSBzdXJmYWNlLCBvbmx5IHRoZSBsaWdodGluZy4gSW5cblx0XHQgKiBjYXNlIHRoZSBtYXRlcmlhbCBoYXMgYSBub3JtYWwgbWFwIGF1dGhvcmVkIHVzaW5nIHRoZSBsZWZ0IGhhbmRlZFxuXHRcdCAqIGNvbnZlbnRpb24sIHRoZSBgeWAgY29tcG9uZW50IG9mIGBub3JtYWxTY2FsZWAgc2hvdWxkIGJlIG5lZ2F0ZWQgdG8gY29tcGVuc2F0ZVxuXHRcdCAqIGZvciB0aGUgZGlmZmVyZW50IGhhbmRlZG5lc3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIG5vcm1hbCBtYXAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFRhbmdlbnRTcGFjZU5vcm1hbE1hcHxPYmplY3RTcGFjZU5vcm1hbE1hcCl9XG5cdFx0ICogQGRlZmF1bHQgVGFuZ2VudFNwYWNlTm9ybWFsTWFwXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIG5vcm1hbCBtYXAgYWZmZWN0cyB0aGUgbWF0ZXJpYWwuIFR5cGljYWwgdmFsdWUgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEpXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGlzcGxhY2VtZW50IG1hcCBhZmZlY3RzIHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVzaCdzIHZlcnRpY2VzLiBVbmxpa2Vcblx0XHQgKiBvdGhlciBtYXBzIHdoaWNoIG9ubHkgYWZmZWN0IHRoZSBsaWdodCBhbmQgc2hhZGUgb2YgdGhlIG1hdGVyaWFsIHRoZVxuXHRcdCAqIGRpc3BsYWNlZCB2ZXJ0aWNlcyBjYW4gY2FzdCBzaGFkb3dzLCBibG9jayBvdGhlciBvYmplY3RzLCBhbmQgb3RoZXJ3aXNlXG5cdFx0ICogYWN0IGFzIHJlYWwgZ2VvbWV0cnkuIFRoZSBkaXNwbGFjZW1lbnQgdGV4dHVyZSBpcyBhbiBpbWFnZSB3aGVyZSB0aGUgdmFsdWVcblx0XHQgKiBvZiBlYWNoIHBpeGVsICh3aGl0ZSBiZWluZyB0aGUgaGlnaGVzdCkgaXMgbWFwcGVkIGFnYWluc3QsIGFuZFxuXHRcdCAqIHJlcG9zaXRpb25zLCB0aGUgdmVydGljZXMgb2YgdGhlIG1lc2guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIG1lc2ggKHdoZXJlIGJsYWNrIGlzIG5vXG5cdFx0ICogZGlzcGxhY2VtZW50LCBhbmQgd2hpdGUgaXMgbWF4aW11bSBkaXNwbGFjZW1lbnQpLiBXaXRob3V0IGEgZGlzcGxhY2VtZW50XG5cdFx0ICogbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9mZnNldCBvZiB0aGUgZGlzcGxhY2VtZW50IG1hcCdzIHZhbHVlcyBvbiB0aGUgbWVzaCdzIHZlcnRpY2VzLlxuXHRcdCAqIFRoZSBiaWFzIGlzIGFkZGVkIHRvIHRoZSBzY2FsZWQgc2FtcGxlIG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwLlxuXHRcdCAqIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnQgbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3BlY3VsYXIgbWFwIHZhbHVlIGFmZmVjdHMgYm90aCBob3cgbXVjaCB0aGUgc3BlY3VsYXIgc3VyZmFjZVxuXHRcdCAqIGhpZ2hsaWdodCBjb250cmlidXRlcyBhbmQgaG93IG11Y2ggb2YgdGhlIGVudmlyb25tZW50IG1hcCBhZmZlY3RzIHRoZVxuXHRcdCAqIHN1cmZhY2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFscGhhIG1hcCBpcyBhIGdyYXlzY2FsZSB0ZXh0dXJlIHRoYXQgY29udHJvbHMgdGhlIG9wYWNpdHkgYWNyb3NzIHRoZVxuXHRcdCAqIHN1cmZhY2UgKGJsYWNrOiBmdWxseSB0cmFuc3BhcmVudDsgd2hpdGU6IGZ1bGx5IG9wYXF1ZSkuXG5cdFx0ICpcblx0XHQgKiBPbmx5IHRoZSBjb2xvciBvZiB0aGUgdGV4dHVyZSBpcyB1c2VkLCBpZ25vcmluZyB0aGUgYWxwaGEgY2hhbm5lbCBpZiBvbmVcblx0XHQgKiBleGlzdHMuIEZvciBSR0IgYW5kIFJHQkEgdGV4dHVyZXMsIHRoZSByZW5kZXJlciB3aWxsIHVzZSB0aGUgZ3JlZW4gY2hhbm5lbFxuXHRcdCAqIHdoZW4gc2FtcGxpbmcgdGhpcyB0ZXh0dXJlIGR1ZSB0byB0aGUgZXh0cmEgYml0IG9mIHByZWNpc2lvbiBwcm92aWRlZCBmb3Jcblx0XHQgKiBncmVlbiBpbiBEWFQtY29tcHJlc3NlZCBhbmQgdW5jb21wcmVzc2VkIFJHQiA1NjUgZm9ybWF0cy4gTHVtaW5hbmNlLW9ubHkgYW5kXG5cdFx0ICogbHVtaW5hbmNlL2FscGhhIHRleHR1cmVzIHdpbGwgYWxzbyBzdGlsbCB3b3JrIGFzIGV4cGVjdGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBlbnZpcm9ubWVudCBtYXAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZW52TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByb3RhdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQgbWFwIGluIHJhZGlhbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RXVsZXJ9XG5cdFx0ICogQGRlZmF1bHQgKDAsMCwwKVxuXHRcdCAqL1xuXHRcdHRoaXMuZW52TWFwUm90YXRpb24gPSBuZXcgRXVsZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyB0byBjb21iaW5lIHRoZSByZXN1bHQgb2YgdGhlIHN1cmZhY2UncyBjb2xvciB3aXRoIHRoZSBlbnZpcm9ubWVudCBtYXAsIGlmIGFueS5cblx0XHQgKlxuXHRcdCAqIFdoZW4gc2V0IHRvIGBNaXhPcGVyYXRpb25gLCB0aGUge0BsaW5rIE1lc2hCYXNpY01hdGVyaWFsI3JlZmxlY3Rpdml0eX0gaXMgdXNlZCB0b1xuXHRcdCAqIGJsZW5kIGJldHdlZW4gdGhlIHR3byBjb2xvcnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KE11bHRpcGx5T3BlcmF0aW9ufE1peE9wZXJhdGlvbnxBZGRPcGVyYXRpb24pfVxuXHRcdCAqIEBkZWZhdWx0IE11bHRpcGx5T3BlcmF0aW9uXG5cdFx0ICovXG5cdFx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgZW52aXJvbm1lbnQgbWFwIGFmZmVjdHMgdGhlIHN1cmZhY2UuXG5cdFx0ICogVGhlIHZhbGlkIHJhbmdlIGlzIGJldHdlZW4gYDBgIChubyByZWZsZWN0aW9ucykgYW5kIGAxYCAoZnVsbCByZWZsZWN0aW9ucykuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW5kZXggb2YgcmVmcmFjdGlvbiAoSU9SKSBvZiBhaXIgKGFwcHJveGltYXRlbHkgMSkgZGl2aWRlZCBieSB0aGVcblx0XHQgKiBpbmRleCBvZiByZWZyYWN0aW9uIG9mIHRoZSBtYXRlcmlhbC4gSXQgaXMgdXNlZCB3aXRoIGVudmlyb25tZW50IG1hcHBpbmdcblx0XHQgKiBtb2RlcyB7QGxpbmsgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nfSBhbmQge0BsaW5rIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nfS5cblx0XHQgKiBUaGUgcmVmcmFjdGlvbiByYXRpbyBzaG91bGQgbm90IGV4Y2VlZCBgMWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDAuOThcblx0XHQgKi9cblx0XHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJzIHRoZSBnZW9tZXRyeSBhcyBhIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIENhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgU1ZHUmVuZGVyZXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBhcHBlYXJhbmNlIG9mIHdpcmVmcmFtZSBlbmRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdyb3VuZCd8J2JldmVsJ3wnbWl0ZXInKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgYXBwZWFyYW5jZSBvZiB3aXJlZnJhbWUgam9pbnRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdyb3VuZCd8J2JldmVsJ3wnbWl0ZXInKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBtYXRlcmlhbCBpcyByZW5kZXJlZCB3aXRoIGZsYXQgc2hhZGluZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXHRcdHRoaXMuc3BlY3VsYXIuY29weSggc291cmNlLnNwZWN1bGFyICk7XG5cdFx0dGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gc291cmNlLmVtaXNzaXZlTWFwO1xuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbi5jb3B5KCBzb3VyY2UuZW52TWFwUm90YXRpb24gKTtcblx0XHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0XHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cdFx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgbWF0ZXJpYWwgaW1wbGVtZW50aW5nIHRvb24gc2hhZGluZy5cbiAqXG4gKiBAYXVnbWVudHMgTWF0ZXJpYWxcbiAqL1xuY2xhc3MgTWVzaFRvb25NYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIHRvb24gbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hUb29uTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy5kZWZpbmVzID0geyAnVE9PTic6ICcnIH07XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaFRvb25NYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBDb2xvciBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSwxKVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgbWFwLiBNYXkgb3B0aW9uYWxseSBpbmNsdWRlIGFuIGFscGhhIGNoYW5uZWwsIHR5cGljYWxseSBjb21iaW5lZFxuXHRcdCAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4gVGhlIHRleHR1cmUgbWFwXG5cdFx0ICogY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZSBkaWZmdXNlIGBjb2xvcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEdyYWRpZW50IG1hcCBmb3IgdG9vbiBzaGFkaW5nLiBJdCdzIHJlcXVpcmVkIHRvIHNldFxuXHRcdCAqIHtAbGluayBUZXh0dXJlI21pbkZpbHRlcn0gYW5kIHtAbGluayBUZXh0dXJlI21hZ0ZpbHRlcn0gdG8ge0BsaW5rTmVhcmVzdEZpbHRlcn1cblx0XHQgKiB3aGVuIHVzaW5nIHRoaXMgdHlwZSBvZiB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaWdodCBtYXAuIFJlcXVpcmVzIGEgc2Vjb25kIHNldCBvZiBVVnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSW50ZW5zaXR5IG9mIHRoZSBiYWtlZCBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVkIGNoYW5uZWwgb2YgdGhpcyB0ZXh0dXJlIGlzIHVzZWQgYXMgdGhlIGFtYmllbnQgb2NjbHVzaW9uIG1hcC5cblx0XHQgKiBSZXF1aXJlcyBhIHNlY29uZCBzZXQgb2YgVVZzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgYW1iaWVudCBvY2NsdXNpb24gZWZmZWN0LiBSYW5nZSBpcyBgWzAsMV1gLCB3aGVyZSBgMGBcblx0XHQgKiBkaXNhYmxlcyBhbWJpZW50IG9jY2x1c2lvbi4gV2hlcmUgaW50ZW5zaXR5IGlzIGAxYCBhbmQgdGhlIEFPIG1hcCdzXG5cdFx0ICogcmVkIGNoYW5uZWwgaXMgYWxzbyBgMWAsIGFtYmllbnQgbGlnaHQgaXMgZnVsbHkgb2NjbHVkZWQgb24gYSBzdXJmYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIEVtaXNzaXZlIChsaWdodCkgY29sb3Igb2YgdGhlIG1hdGVyaWFsLCBlc3NlbnRpYWxseSBhIHNvbGlkIGNvbG9yXG5cdFx0ICogdW5hZmZlY3RlZCBieSBvdGhlciBsaWdodGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgZW1pc3NpdmUgbGlnaHQuIE1vZHVsYXRlcyB0aGUgZW1pc3NpdmUgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IGVtaXNzaXZlIChnbG93KSBtYXAuIFRoZSBlbWlzc2l2ZSBtYXAgY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZVxuXHRcdCAqIGVtaXNzaXZlIGNvbG9yIGFuZCB0aGUgZW1pc3NpdmUgaW50ZW5zaXR5LiBJZiB5b3UgaGF2ZSBhbiBlbWlzc2l2ZSBtYXAsXG5cdFx0ICogYmUgc3VyZSB0byBzZXQgdGhlIGVtaXNzaXZlIGNvbG9yIHRvIHNvbWV0aGluZyBvdGhlciB0aGFuIGJsYWNrLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIGJ1bXAgbWFwLiBUaGUgYmxhY2sgYW5kIHdoaXRlIHZhbHVlcyBtYXAgdG8gdGhlXG5cdFx0ICogcGVyY2VpdmVkIGRlcHRoIGluIHJlbGF0aW9uIHRvIHRoZSBsaWdodHMuIEJ1bXAgZG9lc24ndCBhY3R1YWxseSBhZmZlY3Rcblx0XHQgKiB0aGUgZ2VvbWV0cnkgb2YgdGhlIG9iamVjdCwgb25seSB0aGUgbGlnaHRpbmcuIElmIGEgbm9ybWFsIG1hcCBpcyBkZWZpbmVkXG5cdFx0ICogdGhpcyB3aWxsIGJlIGlnbm9yZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgYnVtcCBtYXAgYWZmZWN0cyB0aGUgbWF0ZXJpYWwuIFR5cGljYWwgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIG5vcm1hbCBtYXAuIFRoZSBSR0IgdmFsdWVzIGFmZmVjdCB0aGUgc3VyZmFjZVxuXHRcdCAqIG5vcm1hbCBmb3IgZWFjaCBwaXhlbCBmcmFnbWVudCBhbmQgY2hhbmdlIHRoZSB3YXkgdGhlIGNvbG9yIGlzIGxpdC4gTm9ybWFsXG5cdFx0ICogbWFwcyBkbyBub3QgY2hhbmdlIHRoZSBhY3R1YWwgc2hhcGUgb2YgdGhlIHN1cmZhY2UsIG9ubHkgdGhlIGxpZ2h0aW5nLiBJblxuXHRcdCAqIGNhc2UgdGhlIG1hdGVyaWFsIGhhcyBhIG5vcm1hbCBtYXAgYXV0aG9yZWQgdXNpbmcgdGhlIGxlZnQgaGFuZGVkXG5cdFx0ICogY29udmVudGlvbiwgdGhlIGB5YCBjb21wb25lbnQgb2YgYG5vcm1hbFNjYWxlYCBzaG91bGQgYmUgbmVnYXRlZCB0byBjb21wZW5zYXRlXG5cdFx0ICogZm9yIHRoZSBkaWZmZXJlbnQgaGFuZGVkbmVzcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2Ygbm9ybWFsIG1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoVGFuZ2VudFNwYWNlTm9ybWFsTWFwfE9iamVjdFNwYWNlTm9ybWFsTWFwKX1cblx0XHQgKiBAZGVmYXVsdCBUYW5nZW50U3BhY2VOb3JtYWxNYXBcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgbm9ybWFsIG1hcCBhZmZlY3RzIHRoZSBtYXRlcmlhbC4gVHlwaWNhbCB2YWx1ZSByYW5nZSBpcyBgWzAsMV1gLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZXNoJ3MgdmVydGljZXMuIFVubGlrZVxuXHRcdCAqIG90aGVyIG1hcHMgd2hpY2ggb25seSBhZmZlY3QgdGhlIGxpZ2h0IGFuZCBzaGFkZSBvZiB0aGUgbWF0ZXJpYWwgdGhlXG5cdFx0ICogZGlzcGxhY2VkIHZlcnRpY2VzIGNhbiBjYXN0IHNoYWRvd3MsIGJsb2NrIG90aGVyIG9iamVjdHMsIGFuZCBvdGhlcndpc2Vcblx0XHQgKiBhY3QgYXMgcmVhbCBnZW9tZXRyeS4gVGhlIGRpc3BsYWNlbWVudCB0ZXh0dXJlIGlzIGFuIGltYWdlIHdoZXJlIHRoZSB2YWx1ZVxuXHRcdCAqIG9mIGVhY2ggcGl4ZWwgKHdoaXRlIGJlaW5nIHRoZSBoaWdoZXN0KSBpcyBtYXBwZWQgYWdhaW5zdCwgYW5kXG5cdFx0ICogcmVwb3NpdGlvbnMsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgbWVzaC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgbWVzaCAod2hlcmUgYmxhY2sgaXMgbm9cblx0XHQgKiBkaXNwbGFjZW1lbnQsIGFuZCB3aGl0ZSBpcyBtYXhpbXVtIGRpc3BsYWNlbWVudCkuIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnRcblx0XHQgKiBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2Zmc2V0IG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwJ3MgdmFsdWVzIG9uIHRoZSBtZXNoJ3MgdmVydGljZXMuXG5cdFx0ICogVGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIHNjYWxlZCBzYW1wbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAuXG5cdFx0ICogV2l0aG91dCBhIGRpc3BsYWNlbWVudCBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbHBoYSBtYXAgaXMgYSBncmF5c2NhbGUgdGV4dHVyZSB0aGF0IGNvbnRyb2xzIHRoZSBvcGFjaXR5IGFjcm9zcyB0aGVcblx0XHQgKiBzdXJmYWNlIChibGFjazogZnVsbHkgdHJhbnNwYXJlbnQ7IHdoaXRlOiBmdWxseSBvcGFxdWUpLlxuXHRcdCAqXG5cdFx0ICogT25seSB0aGUgY29sb3Igb2YgdGhlIHRleHR1cmUgaXMgdXNlZCwgaWdub3JpbmcgdGhlIGFscGhhIGNoYW5uZWwgaWYgb25lXG5cdFx0ICogZXhpc3RzLiBGb3IgUkdCIGFuZCBSR0JBIHRleHR1cmVzLCB0aGUgcmVuZGVyZXIgd2lsbCB1c2UgdGhlIGdyZWVuIGNoYW5uZWxcblx0XHQgKiB3aGVuIHNhbXBsaW5nIHRoaXMgdGV4dHVyZSBkdWUgdG8gdGhlIGV4dHJhIGJpdCBvZiBwcmVjaXNpb24gcHJvdmlkZWQgZm9yXG5cdFx0ICogZ3JlZW4gaW4gRFhULWNvbXByZXNzZWQgYW5kIHVuY29tcHJlc3NlZCBSR0IgNTY1IGZvcm1hdHMuIEx1bWluYW5jZS1vbmx5IGFuZFxuXHRcdCAqIGx1bWluYW5jZS9hbHBoYSB0ZXh0dXJlcyB3aWxsIGFsc28gc3RpbGwgd29yayBhcyBleHBlY3RlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJzIHRoZSBnZW9tZXRyeSBhcyBhIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIENhbiBvbmx5IGJlIHVzZWQgd2l0aCB7QGxpbmsgU1ZHUmVuZGVyZXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBhcHBlYXJhbmNlIG9mIHdpcmVmcmFtZSBlbmRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdyb3VuZCd8J2JldmVsJ3wnbWl0ZXInKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgYXBwZWFyYW5jZSBvZiB3aXJlZnJhbWUgam9pbnRzLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdyb3VuZCd8J2JldmVsJ3wnbWl0ZXInKX1cblx0XHQgKiBAZGVmYXVsdCAncm91bmQnXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBtYXRlcmlhbCBpcyBhZmZlY3RlZCBieSBmb2cgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZm9nID0gdHJ1ZTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblx0XHR0aGlzLmdyYWRpZW50TWFwID0gc291cmNlLmdyYWRpZW50TWFwO1xuXG5cdFx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcblx0XHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5hb01hcCA9IHNvdXJjZS5hb01hcDtcblx0XHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gc291cmNlLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gc291cmNlLmVtaXNzaXZlTWFwO1xuXHRcdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSBzb3VyY2UuZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgbWF0ZXJpYWwgdGhhdCBtYXBzIHRoZSBub3JtYWwgdmVjdG9ycyB0byBSR0IgY29sb3JzLlxuICpcbiAqIEBhdWdtZW50cyBNYXRlcmlhbFxuICovXG5jbGFzcyBNZXNoTm9ybWFsTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbWVzaCBub3JtYWwgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hOb3JtYWxNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnTWVzaE5vcm1hbE1hdGVyaWFsJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIGJ1bXAgbWFwLiBUaGUgYmxhY2sgYW5kIHdoaXRlIHZhbHVlcyBtYXAgdG8gdGhlXG5cdFx0ICogcGVyY2VpdmVkIGRlcHRoIGluIHJlbGF0aW9uIHRvIHRoZSBsaWdodHMuIEJ1bXAgZG9lc24ndCBhY3R1YWxseSBhZmZlY3Rcblx0XHQgKiB0aGUgZ2VvbWV0cnkgb2YgdGhlIG9iamVjdCwgb25seSB0aGUgbGlnaHRpbmcuIElmIGEgbm9ybWFsIG1hcCBpcyBkZWZpbmVkXG5cdFx0ICogdGhpcyB3aWxsIGJlIGlnbm9yZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgYnVtcCBtYXAgYWZmZWN0cyB0aGUgbWF0ZXJpYWwuIFR5cGljYWwgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIG5vcm1hbCBtYXAuIFRoZSBSR0IgdmFsdWVzIGFmZmVjdCB0aGUgc3VyZmFjZVxuXHRcdCAqIG5vcm1hbCBmb3IgZWFjaCBwaXhlbCBmcmFnbWVudCBhbmQgY2hhbmdlIHRoZSB3YXkgdGhlIGNvbG9yIGlzIGxpdC4gTm9ybWFsXG5cdFx0ICogbWFwcyBkbyBub3QgY2hhbmdlIHRoZSBhY3R1YWwgc2hhcGUgb2YgdGhlIHN1cmZhY2UsIG9ubHkgdGhlIGxpZ2h0aW5nLiBJblxuXHRcdCAqIGNhc2UgdGhlIG1hdGVyaWFsIGhhcyBhIG5vcm1hbCBtYXAgYXV0aG9yZWQgdXNpbmcgdGhlIGxlZnQgaGFuZGVkXG5cdFx0ICogY29udmVudGlvbiwgdGhlIGB5YCBjb21wb25lbnQgb2YgYG5vcm1hbFNjYWxlYCBzaG91bGQgYmUgbmVnYXRlZCB0byBjb21wZW5zYXRlXG5cdFx0ICogZm9yIHRoZSBkaWZmZXJlbnQgaGFuZGVkbmVzcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2Ygbm9ybWFsIG1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoVGFuZ2VudFNwYWNlTm9ybWFsTWFwfE9iamVjdFNwYWNlTm9ybWFsTWFwKX1cblx0XHQgKiBAZGVmYXVsdCBUYW5nZW50U3BhY2VOb3JtYWxNYXBcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgbm9ybWFsIG1hcCBhZmZlY3RzIHRoZSBtYXRlcmlhbC4gVHlwaWNhbCB2YWx1ZSByYW5nZSBpcyBgWzAsMV1gLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZXNoJ3MgdmVydGljZXMuIFVubGlrZVxuXHRcdCAqIG90aGVyIG1hcHMgd2hpY2ggb25seSBhZmZlY3QgdGhlIGxpZ2h0IGFuZCBzaGFkZSBvZiB0aGUgbWF0ZXJpYWwgdGhlXG5cdFx0ICogZGlzcGxhY2VkIHZlcnRpY2VzIGNhbiBjYXN0IHNoYWRvd3MsIGJsb2NrIG90aGVyIG9iamVjdHMsIGFuZCBvdGhlcndpc2Vcblx0XHQgKiBhY3QgYXMgcmVhbCBnZW9tZXRyeS4gVGhlIGRpc3BsYWNlbWVudCB0ZXh0dXJlIGlzIGFuIGltYWdlIHdoZXJlIHRoZSB2YWx1ZVxuXHRcdCAqIG9mIGVhY2ggcGl4ZWwgKHdoaXRlIGJlaW5nIHRoZSBoaWdoZXN0KSBpcyBtYXBwZWQgYWdhaW5zdCwgYW5kXG5cdFx0ICogcmVwb3NpdGlvbnMsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgbWVzaC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgbWVzaCAod2hlcmUgYmxhY2sgaXMgbm9cblx0XHQgKiBkaXNwbGFjZW1lbnQsIGFuZCB3aGl0ZSBpcyBtYXhpbXVtIGRpc3BsYWNlbWVudCkuIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnRcblx0XHQgKiBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2Zmc2V0IG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwJ3MgdmFsdWVzIG9uIHRoZSBtZXNoJ3MgdmVydGljZXMuXG5cdFx0ICogVGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIHNjYWxlZCBzYW1wbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAuXG5cdFx0ICogV2l0aG91dCBhIGRpc3BsYWNlbWVudCBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcnMgdGhlIGdlb21ldHJ5IGFzIGEgd2lyZWZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29udHJvbHMgdGhlIHRoaWNrbmVzcyBvZiB0aGUgd2lyZWZyYW1lLlxuXHRcdCAqXG5cdFx0ICogV2ViR0wgYW5kIFdlYkdQVSBpZ25vcmUgdGhpcyBwcm9wZXJ0eSBhbmQgYWx3YXlzIHJlbmRlclxuXHRcdCAqIDEgcGl4ZWwgd2lkZSBsaW5lcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIHJlbmRlcmVkIHdpdGggZmxhdCBzaGFkaW5nIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0XHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XG5cblx0XHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XG5cdFx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdFx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KCBzb3VyY2Uubm9ybWFsU2NhbGUgKTtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBzb3VyY2UuZmxhdFNoYWRpbmc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIG1hdGVyaWFsIGZvciBub24tc2hpbnkgc3VyZmFjZXMsIHdpdGhvdXQgc3BlY3VsYXIgaGlnaGxpZ2h0cy5cbiAqXG4gKiBUaGUgbWF0ZXJpYWwgdXNlcyBhIG5vbi1waHlzaWNhbGx5IGJhc2VkIFtMYW1iZXJ0aWFuXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYW1iZXJ0aWFuX3JlZmxlY3RhbmNlfVxuICogbW9kZWwgZm9yIGNhbGN1bGF0aW5nIHJlZmxlY3RhbmNlLiBUaGlzIGNhbiBzaW11bGF0ZSBzb21lIHN1cmZhY2VzIChzdWNoXG4gKiBhcyB1bnRyZWF0ZWQgd29vZCBvciBzdG9uZSkgd2VsbCwgYnV0IGNhbm5vdCBzaW11bGF0ZSBzaGlueSBzdXJmYWNlcyB3aXRoXG4gKiBzcGVjdWxhciBoaWdobGlnaHRzIChzdWNoIGFzIHZhcm5pc2hlZCB3b29kKS4gYE1lc2hMYW1iZXJ0TWF0ZXJpYWxgIHVzZXMgcGVyLWZyYWdtZW50XG4gKiBzaGFkaW5nLlxuICpcbiAqIER1ZSB0byB0aGUgc2ltcGxpY2l0eSBvZiB0aGUgcmVmbGVjdGFuY2UgYW5kIGlsbHVtaW5hdGlvbiBtb2RlbHMsXG4gKiBwZXJmb3JtYW5jZSB3aWxsIGJlIGdyZWF0ZXIgd2hlbiB1c2luZyB0aGlzIG1hdGVyaWFsIG92ZXIgdGhlXG4gKiB7QGxpbmsgTWVzaFBob25nTWF0ZXJpYWx9LCB7QGxpbmsgTWVzaFN0YW5kYXJkTWF0ZXJpYWx9IG9yXG4gKiB7QGxpbmsgTWVzaFBoeXNpY2FsTWF0ZXJpYWx9LCBhdCB0aGUgY29zdCBvZiBzb21lIGdyYXBoaWNhbCBhY2N1cmFjeS5cbiAqXG4gKiBAYXVnbWVudHMgTWF0ZXJpYWxcbiAqL1xuY2xhc3MgTWVzaExhbWJlcnRNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtZXNoIGxhbWJlcnQgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hMYW1iZXJ0TWF0ZXJpYWwnO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29sb3Igb2YgdGhlIG1hdGVyaWFsLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0NvbG9yfVxuXHRcdCAqIEBkZWZhdWx0ICgxLDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBkaWZmdXNlXG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgbWFwLiBNYXkgb3B0aW9uYWxseSBpbmNsdWRlIGFuIGFscGhhIGNoYW5uZWwsIHR5cGljYWxseSBjb21iaW5lZFxuXHRcdCAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4gVGhlIHRleHR1cmUgbWFwXG5cdFx0ICogY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZSBkaWZmdXNlIGBjb2xvcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaWdodCBtYXAuIFJlcXVpcmVzIGEgc2Vjb25kIHNldCBvZiBVVnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSW50ZW5zaXR5IG9mIHRoZSBiYWtlZCBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVkIGNoYW5uZWwgb2YgdGhpcyB0ZXh0dXJlIGlzIHVzZWQgYXMgdGhlIGFtYmllbnQgb2NjbHVzaW9uIG1hcC5cblx0XHQgKiBSZXF1aXJlcyBhIHNlY29uZCBzZXQgb2YgVVZzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFvTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgYW1iaWVudCBvY2NsdXNpb24gZWZmZWN0LiBSYW5nZSBpcyBgWzAsMV1gLCB3aGVyZSBgMGBcblx0XHQgKiBkaXNhYmxlcyBhbWJpZW50IG9jY2x1c2lvbi4gV2hlcmUgaW50ZW5zaXR5IGlzIGAxYCBhbmQgdGhlIEFPIG1hcCdzXG5cdFx0ICogcmVkIGNoYW5uZWwgaXMgYWxzbyBgMWAsIGFtYmllbnQgbGlnaHQgaXMgZnVsbHkgb2NjbHVkZWQgb24gYSBzdXJmYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIEVtaXNzaXZlIChsaWdodCkgY29sb3Igb2YgdGhlIG1hdGVyaWFsLCBlc3NlbnRpYWxseSBhIHNvbGlkIGNvbG9yXG5cdFx0ICogdW5hZmZlY3RlZCBieSBvdGhlciBsaWdodGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEludGVuc2l0eSBvZiB0aGUgZW1pc3NpdmUgbGlnaHQuIE1vZHVsYXRlcyB0aGUgZW1pc3NpdmUgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IGVtaXNzaXZlIChnbG93KSBtYXAuIFRoZSBlbWlzc2l2ZSBtYXAgY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZVxuXHRcdCAqIGVtaXNzaXZlIGNvbG9yIGFuZCB0aGUgZW1pc3NpdmUgaW50ZW5zaXR5LiBJZiB5b3UgaGF2ZSBhbiBlbWlzc2l2ZSBtYXAsXG5cdFx0ICogYmUgc3VyZSB0byBzZXQgdGhlIGVtaXNzaXZlIGNvbG9yIHRvIHNvbWV0aGluZyBvdGhlciB0aGFuIGJsYWNrLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIGJ1bXAgbWFwLiBUaGUgYmxhY2sgYW5kIHdoaXRlIHZhbHVlcyBtYXAgdG8gdGhlXG5cdFx0ICogcGVyY2VpdmVkIGRlcHRoIGluIHJlbGF0aW9uIHRvIHRoZSBsaWdodHMuIEJ1bXAgZG9lc24ndCBhY3R1YWxseSBhZmZlY3Rcblx0XHQgKiB0aGUgZ2VvbWV0cnkgb2YgdGhlIG9iamVjdCwgb25seSB0aGUgbGlnaHRpbmcuIElmIGEgbm9ybWFsIG1hcCBpcyBkZWZpbmVkXG5cdFx0ICogdGhpcyB3aWxsIGJlIGlnbm9yZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgYnVtcCBtYXAgYWZmZWN0cyB0aGUgbWF0ZXJpYWwuIFR5cGljYWwgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIG5vcm1hbCBtYXAuIFRoZSBSR0IgdmFsdWVzIGFmZmVjdCB0aGUgc3VyZmFjZVxuXHRcdCAqIG5vcm1hbCBmb3IgZWFjaCBwaXhlbCBmcmFnbWVudCBhbmQgY2hhbmdlIHRoZSB3YXkgdGhlIGNvbG9yIGlzIGxpdC4gTm9ybWFsXG5cdFx0ICogbWFwcyBkbyBub3QgY2hhbmdlIHRoZSBhY3R1YWwgc2hhcGUgb2YgdGhlIHN1cmZhY2UsIG9ubHkgdGhlIGxpZ2h0aW5nLiBJblxuXHRcdCAqIGNhc2UgdGhlIG1hdGVyaWFsIGhhcyBhIG5vcm1hbCBtYXAgYXV0aG9yZWQgdXNpbmcgdGhlIGxlZnQgaGFuZGVkXG5cdFx0ICogY29udmVudGlvbiwgdGhlIGB5YCBjb21wb25lbnQgb2YgYG5vcm1hbFNjYWxlYCBzaG91bGQgYmUgbmVnYXRlZCB0byBjb21wZW5zYXRlXG5cdFx0ICogZm9yIHRoZSBkaWZmZXJlbnQgaGFuZGVkbmVzcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2Ygbm9ybWFsIG1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoVGFuZ2VudFNwYWNlTm9ybWFsTWFwfE9iamVjdFNwYWNlTm9ybWFsTWFwKX1cblx0XHQgKiBAZGVmYXVsdCBUYW5nZW50U3BhY2VOb3JtYWxNYXBcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgbm9ybWFsIG1hcCBhZmZlY3RzIHRoZSBtYXRlcmlhbC4gVHlwaWNhbCB2YWx1ZSByYW5nZSBpcyBgWzAsMV1gLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZXNoJ3MgdmVydGljZXMuIFVubGlrZVxuXHRcdCAqIG90aGVyIG1hcHMgd2hpY2ggb25seSBhZmZlY3QgdGhlIGxpZ2h0IGFuZCBzaGFkZSBvZiB0aGUgbWF0ZXJpYWwgdGhlXG5cdFx0ICogZGlzcGxhY2VkIHZlcnRpY2VzIGNhbiBjYXN0IHNoYWRvd3MsIGJsb2NrIG90aGVyIG9iamVjdHMsIGFuZCBvdGhlcndpc2Vcblx0XHQgKiBhY3QgYXMgcmVhbCBnZW9tZXRyeS4gVGhlIGRpc3BsYWNlbWVudCB0ZXh0dXJlIGlzIGFuIGltYWdlIHdoZXJlIHRoZSB2YWx1ZVxuXHRcdCAqIG9mIGVhY2ggcGl4ZWwgKHdoaXRlIGJlaW5nIHRoZSBoaWdoZXN0KSBpcyBtYXBwZWQgYWdhaW5zdCwgYW5kXG5cdFx0ICogcmVwb3NpdGlvbnMsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgbWVzaC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgbWVzaCAod2hlcmUgYmxhY2sgaXMgbm9cblx0XHQgKiBkaXNwbGFjZW1lbnQsIGFuZCB3aGl0ZSBpcyBtYXhpbXVtIGRpc3BsYWNlbWVudCkuIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnRcblx0XHQgKiBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2Zmc2V0IG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwJ3MgdmFsdWVzIG9uIHRoZSBtZXNoJ3MgdmVydGljZXMuXG5cdFx0ICogVGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIHNjYWxlZCBzYW1wbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAuXG5cdFx0ICogV2l0aG91dCBhIGRpc3BsYWNlbWVudCBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFNwZWN1bGFyIG1hcCB1c2VkIGJ5IHRoZSBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYWxwaGEgbWFwIGlzIGEgZ3JheXNjYWxlIHRleHR1cmUgdGhhdCBjb250cm9scyB0aGUgb3BhY2l0eSBhY3Jvc3MgdGhlXG5cdFx0ICogc3VyZmFjZSAoYmxhY2s6IGZ1bGx5IHRyYW5zcGFyZW50OyB3aGl0ZTogZnVsbHkgb3BhcXVlKS5cblx0XHQgKlxuXHRcdCAqIE9ubHkgdGhlIGNvbG9yIG9mIHRoZSB0ZXh0dXJlIGlzIHVzZWQsIGlnbm9yaW5nIHRoZSBhbHBoYSBjaGFubmVsIGlmIG9uZVxuXHRcdCAqIGV4aXN0cy4gRm9yIFJHQiBhbmQgUkdCQSB0ZXh0dXJlcywgdGhlIHJlbmRlcmVyIHdpbGwgdXNlIHRoZSBncmVlbiBjaGFubmVsXG5cdFx0ICogd2hlbiBzYW1wbGluZyB0aGlzIHRleHR1cmUgZHVlIHRvIHRoZSBleHRyYSBiaXQgb2YgcHJlY2lzaW9uIHByb3ZpZGVkIGZvclxuXHRcdCAqIGdyZWVuIGluIERYVC1jb21wcmVzc2VkIGFuZCB1bmNvbXByZXNzZWQgUkdCIDU2NSBmb3JtYXRzLiBMdW1pbmFuY2Utb25seSBhbmRcblx0XHQgKiBsdW1pbmFuY2UvYWxwaGEgdGV4dHVyZXMgd2lsbCBhbHNvIHN0aWxsIHdvcmsgYXMgZXhwZWN0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGVudmlyb25tZW50IG1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJvdGF0aW9uIG9mIHRoZSBlbnZpcm9ubWVudCBtYXAgaW4gcmFkaWFucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtFdWxlcn1cblx0XHQgKiBAZGVmYXVsdCAoMCwwLDApXG5cdFx0ICovXG5cdFx0dGhpcy5lbnZNYXBSb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IHRvIGNvbWJpbmUgdGhlIHJlc3VsdCBvZiB0aGUgc3VyZmFjZSdzIGNvbG9yIHdpdGggdGhlIGVudmlyb25tZW50IG1hcCwgaWYgYW55LlxuXHRcdCAqXG5cdFx0ICogV2hlbiBzZXQgdG8gYE1peE9wZXJhdGlvbmAsIHRoZSB7QGxpbmsgTWVzaEJhc2ljTWF0ZXJpYWwjcmVmbGVjdGl2aXR5fSBpcyB1c2VkIHRvXG5cdFx0ICogYmxlbmQgYmV0d2VlbiB0aGUgdHdvIGNvbG9ycy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTXVsdGlwbHlPcGVyYXRpb258TWl4T3BlcmF0aW9ufEFkZE9wZXJhdGlvbil9XG5cdFx0ICogQGRlZmF1bHQgTXVsdGlwbHlPcGVyYXRpb25cblx0XHQgKi9cblx0XHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSBlbnZpcm9ubWVudCBtYXAgYWZmZWN0cyB0aGUgc3VyZmFjZS5cblx0XHQgKiBUaGUgdmFsaWQgcmFuZ2UgaXMgYmV0d2VlbiBgMGAgKG5vIHJlZmxlY3Rpb25zKSBhbmQgYDFgIChmdWxsIHJlZmxlY3Rpb25zKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbmRleCBvZiByZWZyYWN0aW9uIChJT1IpIG9mIGFpciAoYXBwcm94aW1hdGVseSAxKSBkaXZpZGVkIGJ5IHRoZVxuXHRcdCAqIGluZGV4IG9mIHJlZnJhY3Rpb24gb2YgdGhlIG1hdGVyaWFsLiBJdCBpcyB1c2VkIHdpdGggZW52aXJvbm1lbnQgbWFwcGluZ1xuXHRcdCAqIG1vZGVzIHtAbGluayBDdWJlUmVmcmFjdGlvbk1hcHBpbmd9IGFuZCB7QGxpbmsgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmd9LlxuXHRcdCAqIFRoZSByZWZyYWN0aW9uIHJhdGlvIHNob3VsZCBub3QgZXhjZWVkIGAxYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMC45OFxuXHRcdCAqL1xuXHRcdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcnMgdGhlIGdlb21ldHJ5IGFzIGEgd2lyZWZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29udHJvbHMgdGhlIHRoaWNrbmVzcyBvZiB0aGUgd2lyZWZyYW1lLlxuXHRcdCAqXG5cdFx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIHtAbGluayBTVkdSZW5kZXJlcn0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIGFwcGVhcmFuY2Ugb2Ygd2lyZWZyYW1lIGVuZHMuXG5cdFx0ICpcblx0XHQgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFNWR1JlbmRlcmVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ3JvdW5kJ3wnYmV2ZWwnfCdtaXRlcicpfVxuXHRcdCAqIEBkZWZhdWx0ICdyb3VuZCdcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBhcHBlYXJhbmNlIG9mIHdpcmVmcmFtZSBqb2ludHMuXG5cdFx0ICpcblx0XHQgKiBDYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFNWR1JlbmRlcmVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoJ3JvdW5kJ3wnYmV2ZWwnfCdtaXRlcicpfVxuXHRcdCAqIEBkZWZhdWx0ICdyb3VuZCdcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIHJlbmRlcmVkIHdpdGggZmxhdCBzaGFkaW5nIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgbWF0ZXJpYWwgaXMgYWZmZWN0ZWQgYnkgZm9nIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmZvZyA9IHRydWU7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0XHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHRcdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xuXHRcdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHR0aGlzLmVtaXNzaXZlLmNvcHkoIHNvdXJjZS5lbWlzc2l2ZSApO1xuXHRcdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XG5cdFx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcblxuXHRcdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcblx0XHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoIHNvdXJjZS5ub3JtYWxTY2FsZSApO1xuXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0XHR0aGlzLmVudk1hcFJvdGF0aW9uLmNvcHkoIHNvdXJjZS5lbnZNYXBSb3RhdGlvbiApO1xuXHRcdHRoaXMuY29tYmluZSA9IHNvdXJjZS5jb21iaW5lO1xuXHRcdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcblx0XHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdFx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHRcdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gc291cmNlLmZsYXRTaGFkaW5nO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBtYXRlcmlhbCBmb3IgZHJhd2luZyBnZW9tZXRyeSBieSBkZXB0aC4gRGVwdGggaXMgYmFzZWQgb2ZmIG9mIHRoZSBjYW1lcmFcbiAqIG5lYXIgYW5kIGZhciBwbGFuZS4gV2hpdGUgaXMgbmVhcmVzdCwgYmxhY2sgaXMgZmFydGhlc3QuXG4gKlxuICogQGF1Z21lbnRzIE1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hEZXB0aE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggZGVwdGggbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hEZXB0aE1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoRGVwdGhNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBUeXBlIGZvciBkZXB0aCBwYWNraW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhCYXNpY0RlcHRoUGFja2luZ3xSR0JBRGVwdGhQYWNraW5nfFJHQkRlcHRoUGFja2luZ3xSR0RlcHRoUGFja2luZyl9XG5cdFx0ICogQGRlZmF1bHQgQmFzaWNEZXB0aFBhY2tpbmdcblx0XHQgKi9cblx0XHR0aGlzLmRlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbG9yIG1hcC4gTWF5IG9wdGlvbmFsbHkgaW5jbHVkZSBhbiBhbHBoYSBjaGFubmVsLCB0eXBpY2FsbHkgY29tYmluZWRcblx0XHQgKiB3aXRoIHtAbGluayBNYXRlcmlhbCN0cmFuc3BhcmVudH0gb3Ige0BsaW5rIE1hdGVyaWFsI2FscGhhVGVzdH0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbHBoYSBtYXAgaXMgYSBncmF5c2NhbGUgdGV4dHVyZSB0aGF0IGNvbnRyb2xzIHRoZSBvcGFjaXR5IGFjcm9zcyB0aGVcblx0XHQgKiBzdXJmYWNlIChibGFjazogZnVsbHkgdHJhbnNwYXJlbnQ7IHdoaXRlOiBmdWxseSBvcGFxdWUpLlxuXHRcdCAqXG5cdFx0ICogT25seSB0aGUgY29sb3Igb2YgdGhlIHRleHR1cmUgaXMgdXNlZCwgaWdub3JpbmcgdGhlIGFscGhhIGNoYW5uZWwgaWYgb25lXG5cdFx0ICogZXhpc3RzLiBGb3IgUkdCIGFuZCBSR0JBIHRleHR1cmVzLCB0aGUgcmVuZGVyZXIgd2lsbCB1c2UgdGhlIGdyZWVuIGNoYW5uZWxcblx0XHQgKiB3aGVuIHNhbXBsaW5nIHRoaXMgdGV4dHVyZSBkdWUgdG8gdGhlIGV4dHJhIGJpdCBvZiBwcmVjaXNpb24gcHJvdmlkZWQgZm9yXG5cdFx0ICogZ3JlZW4gaW4gRFhULWNvbXByZXNzZWQgYW5kIHVuY29tcHJlc3NlZCBSR0IgNTY1IGZvcm1hdHMuIEx1bWluYW5jZS1vbmx5IGFuZFxuXHRcdCAqIGx1bWluYW5jZS9hbHBoYSB0ZXh0dXJlcyB3aWxsIGFsc28gc3RpbGwgd29yayBhcyBleHBlY3RlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGlzcGxhY2VtZW50IG1hcCBhZmZlY3RzIHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVzaCdzIHZlcnRpY2VzLiBVbmxpa2Vcblx0XHQgKiBvdGhlciBtYXBzIHdoaWNoIG9ubHkgYWZmZWN0IHRoZSBsaWdodCBhbmQgc2hhZGUgb2YgdGhlIG1hdGVyaWFsIHRoZVxuXHRcdCAqIGRpc3BsYWNlZCB2ZXJ0aWNlcyBjYW4gY2FzdCBzaGFkb3dzLCBibG9jayBvdGhlciBvYmplY3RzLCBhbmQgb3RoZXJ3aXNlXG5cdFx0ICogYWN0IGFzIHJlYWwgZ2VvbWV0cnkuIFRoZSBkaXNwbGFjZW1lbnQgdGV4dHVyZSBpcyBhbiBpbWFnZSB3aGVyZSB0aGUgdmFsdWVcblx0XHQgKiBvZiBlYWNoIHBpeGVsICh3aGl0ZSBiZWluZyB0aGUgaGlnaGVzdCkgaXMgbWFwcGVkIGFnYWluc3QsIGFuZFxuXHRcdCAqIHJlcG9zaXRpb25zLCB0aGUgdmVydGljZXMgb2YgdGhlIG1lc2guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBtdWNoIHRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIG1lc2ggKHdoZXJlIGJsYWNrIGlzIG5vXG5cdFx0ICogZGlzcGxhY2VtZW50LCBhbmQgd2hpdGUgaXMgbWF4aW11bSBkaXNwbGFjZW1lbnQpLiBXaXRob3V0IGEgZGlzcGxhY2VtZW50XG5cdFx0ICogbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG9mZnNldCBvZiB0aGUgZGlzcGxhY2VtZW50IG1hcCdzIHZhbHVlcyBvbiB0aGUgbWVzaCdzIHZlcnRpY2VzLlxuXHRcdCAqIFRoZSBiaWFzIGlzIGFkZGVkIHRvIHRoZSBzY2FsZWQgc2FtcGxlIG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwLlxuXHRcdCAqIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnQgbWFwIHNldCwgdGhpcyB2YWx1ZSBpcyBub3QgYXBwbGllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXJzIHRoZSBnZW9tZXRyeSBhcyBhIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIENvbnRyb2xzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHdpcmVmcmFtZS5cblx0XHQgKlxuXHRcdCAqIFdlYkdMIGFuZCBXZWJHUFUgaWdub3JlIHRoaXMgcHJvcGVydHkgYW5kIGFsd2F5cyByZW5kZXJcblx0XHQgKiAxIHBpeGVsIHdpZGUgbGluZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0XHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGVwdGhQYWNraW5nID0gc291cmNlLmRlcHRoUGFja2luZztcblxuXHRcdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0XHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIG1hdGVyaWFsIHVzZWQgaW50ZXJuYWxseSBmb3IgaW1wbGVtZW50aW5nIHNoYWRvdyBtYXBwaW5nIHdpdGhcbiAqIHBvaW50IGxpZ2h0cy5cbiAqXG4gKiBDYW4gYWxzbyBiZSB1c2VkIHRvIGN1c3RvbWl6ZSB0aGUgc2hhZG93IGNhc3Rpbmcgb2YgYW4gb2JqZWN0IGJ5IGFzc2lnbmluZ1xuICogYW4gaW5zdGFuY2Ugb2YgYE1lc2hEaXN0YW5jZU1hdGVyaWFsYCB0byB7QGxpbmsgT2JqZWN0M0QjY3VzdG9tRGlzdGFuY2VNYXRlcmlhbH0uXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGVzIGRlbW9uc3RyYXRlcyB0aGlzIGFwcHJvYWNoIGluIG9yZGVyIHRvIGVuc3VyZVxuICogdHJhbnNwYXJlbnQgcGFydHMgb2Ygb2JqZWN0cyBkbyBubyBjYXN0IHNoYWRvd3MuXG4gKlxuICogQGF1Z21lbnRzIE1hdGVyaWFsXG4gKi9cbmNsYXNzIE1lc2hEaXN0YW5jZU1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG1lc2ggZGlzdGFuY2UgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdNZXNoRGlzdGFuY2VNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgbWFwLiBNYXkgb3B0aW9uYWxseSBpbmNsdWRlIGFuIGFscGhhIGNoYW5uZWwsIHR5cGljYWxseSBjb21iaW5lZFxuXHRcdCAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFscGhhIG1hcCBpcyBhIGdyYXlzY2FsZSB0ZXh0dXJlIHRoYXQgY29udHJvbHMgdGhlIG9wYWNpdHkgYWNyb3NzIHRoZVxuXHRcdCAqIHN1cmZhY2UgKGJsYWNrOiBmdWxseSB0cmFuc3BhcmVudDsgd2hpdGU6IGZ1bGx5IG9wYXF1ZSkuXG5cdFx0ICpcblx0XHQgKiBPbmx5IHRoZSBjb2xvciBvZiB0aGUgdGV4dHVyZSBpcyB1c2VkLCBpZ25vcmluZyB0aGUgYWxwaGEgY2hhbm5lbCBpZiBvbmVcblx0XHQgKiBleGlzdHMuIEZvciBSR0IgYW5kIFJHQkEgdGV4dHVyZXMsIHRoZSByZW5kZXJlciB3aWxsIHVzZSB0aGUgZ3JlZW4gY2hhbm5lbFxuXHRcdCAqIHdoZW4gc2FtcGxpbmcgdGhpcyB0ZXh0dXJlIGR1ZSB0byB0aGUgZXh0cmEgYml0IG9mIHByZWNpc2lvbiBwcm92aWRlZCBmb3Jcblx0XHQgKiBncmVlbiBpbiBEWFQtY29tcHJlc3NlZCBhbmQgdW5jb21wcmVzc2VkIFJHQiA1NjUgZm9ybWF0cy4gTHVtaW5hbmNlLW9ubHkgYW5kXG5cdFx0ICogbHVtaW5hbmNlL2FscGhhIHRleHR1cmVzIHdpbGwgYWxzbyBzdGlsbCB3b3JrIGFzIGV4cGVjdGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZXNoJ3MgdmVydGljZXMuIFVubGlrZVxuXHRcdCAqIG90aGVyIG1hcHMgd2hpY2ggb25seSBhZmZlY3QgdGhlIGxpZ2h0IGFuZCBzaGFkZSBvZiB0aGUgbWF0ZXJpYWwgdGhlXG5cdFx0ICogZGlzcGxhY2VkIHZlcnRpY2VzIGNhbiBjYXN0IHNoYWRvd3MsIGJsb2NrIG90aGVyIG9iamVjdHMsIGFuZCBvdGhlcndpc2Vcblx0XHQgKiBhY3QgYXMgcmVhbCBnZW9tZXRyeS4gVGhlIGRpc3BsYWNlbWVudCB0ZXh0dXJlIGlzIGFuIGltYWdlIHdoZXJlIHRoZSB2YWx1ZVxuXHRcdCAqIG9mIGVhY2ggcGl4ZWwgKHdoaXRlIGJlaW5nIHRoZSBoaWdoZXN0KSBpcyBtYXBwZWQgYWdhaW5zdCwgYW5kXG5cdFx0ICogcmVwb3NpdGlvbnMsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgbWVzaC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgbWVzaCAod2hlcmUgYmxhY2sgaXMgbm9cblx0XHQgKiBkaXNwbGFjZW1lbnQsIGFuZCB3aGl0ZSBpcyBtYXhpbXVtIGRpc3BsYWNlbWVudCkuIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnRcblx0XHQgKiBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2Zmc2V0IG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwJ3MgdmFsdWVzIG9uIHRoZSBtZXNoJ3MgdmVydGljZXMuXG5cdFx0ICogVGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIHNjYWxlZCBzYW1wbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAuXG5cdFx0ICogV2l0aG91dCBhIGRpc3BsYWNlbWVudCBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHRcdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0XHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhpcyBtYXRlcmlhbCBpcyBkZWZpbmVkIGJ5IGEgTWF0Q2FwIChvciBMaXQgU3BoZXJlKSB0ZXh0dXJlLCB3aGljaCBlbmNvZGVzIHRoZVxuICogbWF0ZXJpYWwgY29sb3IgYW5kIHNoYWRpbmcuXG4gKlxuICogYE1lc2hNYXRjYXBNYXRlcmlhbGAgZG9lcyBub3QgcmVzcG9uZCB0byBsaWdodHMgc2luY2UgdGhlIG1hdGNhcCBpbWFnZSBmaWxlIGVuY29kZXNcbiAqIGJha2VkIGxpZ2h0aW5nLiBJdCB3aWxsIGNhc3QgYSBzaGFkb3cgb250byBhbiBvYmplY3QgdGhhdCByZWNlaXZlcyBzaGFkb3dzXG4gKiAoYW5kIHNoYWRvdyBjbGlwcGluZyB3b3JrcyksIGJ1dCBpdCB3aWxsIG5vdCBzZWxmLXNoYWRvdyBvciByZWNlaXZlXG4gKiBzaGFkb3dzLlxuICpcbiAqIEBhdWdtZW50cyBNYXRlcmlhbFxuICovXG5jbGFzcyBNZXNoTWF0Y2FwTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbWVzaCBtYXRjYXAgbWF0ZXJpYWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1ldGVyc10gLSBBbiBvYmplY3Qgd2l0aCBvbmUgb3IgbW9yZSBwcm9wZXJ0aWVzXG5cdCAqIGRlZmluaW5nIHRoZSBtYXRlcmlhbCdzIGFwcGVhcmFuY2UuIEFueSBwcm9wZXJ0eSBvZiB0aGUgbWF0ZXJpYWxcblx0ICogKGluY2x1ZGluZyBhbnkgcHJvcGVydHkgZnJvbSBpbmhlcml0ZWQgbWF0ZXJpYWxzKSBjYW4gYmUgcGFzc2VkXG5cdCAqIGluIGhlcmUuIENvbG9yIHZhbHVlcyBjYW4gYmUgcGFzc2VkIGFueSB0eXBlIG9mIHZhbHVlIGFjY2VwdGVkXG5cdCAqIGJ5IHtAbGluayBDb2xvciNzZXR9LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc01lc2hNYXRjYXBNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xuXG5cdFx0dGhpcy50eXBlID0gJ01lc2hNYXRjYXBNYXRlcmlhbCc7XG5cblx0XHQvKipcblx0XHQgKiBDb2xvciBvZiB0aGUgbWF0ZXJpYWwuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSwxKVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2VcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBtYXRjYXAgbWFwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1hdGNhcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgbWFwLiBNYXkgb3B0aW9uYWxseSBpbmNsdWRlIGFuIGFscGhhIGNoYW5uZWwsIHR5cGljYWxseSBjb21iaW5lZFxuXHRcdCAqIHdpdGgge0BsaW5rIE1hdGVyaWFsI3RyYW5zcGFyZW50fSBvciB7QGxpbmsgTWF0ZXJpYWwjYWxwaGFUZXN0fS4gVGhlIHRleHR1cmUgbWFwXG5cdFx0ICogY29sb3IgaXMgbW9kdWxhdGVkIGJ5IHRoZSBkaWZmdXNlIGBjb2xvcmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIGJ1bXAgbWFwLiBUaGUgYmxhY2sgYW5kIHdoaXRlIHZhbHVlcyBtYXAgdG8gdGhlXG5cdFx0ICogcGVyY2VpdmVkIGRlcHRoIGluIHJlbGF0aW9uIHRvIHRoZSBsaWdodHMuIEJ1bXAgZG9lc24ndCBhY3R1YWxseSBhZmZlY3Rcblx0XHQgKiB0aGUgZ2VvbWV0cnkgb2YgdGhlIG9iamVjdCwgb25seSB0aGUgbGlnaHRpbmcuIElmIGEgbm9ybWFsIG1hcCBpcyBkZWZpbmVkXG5cdFx0ICogdGhpcyB3aWxsIGJlIGlnbm9yZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcE1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgYnVtcCBtYXAgYWZmZWN0cyB0aGUgbWF0ZXJpYWwuIFR5cGljYWwgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVtcFNjYWxlID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0ZXh0dXJlIHRvIGNyZWF0ZSBhIG5vcm1hbCBtYXAuIFRoZSBSR0IgdmFsdWVzIGFmZmVjdCB0aGUgc3VyZmFjZVxuXHRcdCAqIG5vcm1hbCBmb3IgZWFjaCBwaXhlbCBmcmFnbWVudCBhbmQgY2hhbmdlIHRoZSB3YXkgdGhlIGNvbG9yIGlzIGxpdC4gTm9ybWFsXG5cdFx0ICogbWFwcyBkbyBub3QgY2hhbmdlIHRoZSBhY3R1YWwgc2hhcGUgb2YgdGhlIHN1cmZhY2UsIG9ubHkgdGhlIGxpZ2h0aW5nLiBJblxuXHRcdCAqIGNhc2UgdGhlIG1hdGVyaWFsIGhhcyBhIG5vcm1hbCBtYXAgYXV0aG9yZWQgdXNpbmcgdGhlIGxlZnQgaGFuZGVkXG5cdFx0ICogY29udmVudGlvbiwgdGhlIGB5YCBjb21wb25lbnQgb2YgYG5vcm1hbFNjYWxlYCBzaG91bGQgYmUgbmVnYXRlZCB0byBjb21wZW5zYXRlXG5cdFx0ICogZm9yIHRoZSBkaWZmZXJlbnQgaGFuZGVkbmVzcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2Ygbm9ybWFsIG1hcC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoVGFuZ2VudFNwYWNlTm9ybWFsTWFwfE9iamVjdFNwYWNlTm9ybWFsTWFwKX1cblx0XHQgKiBAZGVmYXVsdCBUYW5nZW50U3BhY2VOb3JtYWxNYXBcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbXVjaCB0aGUgbm9ybWFsIG1hcCBhZmZlY3RzIHRoZSBtYXRlcmlhbC4gVHlwaWNhbCB2YWx1ZSByYW5nZSBpcyBgWzAsMV1gLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjJ9XG5cdFx0ICogQGRlZmF1bHQgKDEsMSlcblx0XHQgKi9cblx0XHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXNwbGFjZW1lbnQgbWFwIGFmZmVjdHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZXNoJ3MgdmVydGljZXMuIFVubGlrZVxuXHRcdCAqIG90aGVyIG1hcHMgd2hpY2ggb25seSBhZmZlY3QgdGhlIGxpZ2h0IGFuZCBzaGFkZSBvZiB0aGUgbWF0ZXJpYWwgdGhlXG5cdFx0ICogZGlzcGxhY2VkIHZlcnRpY2VzIGNhbiBjYXN0IHNoYWRvd3MsIGJsb2NrIG90aGVyIG9iamVjdHMsIGFuZCBvdGhlcndpc2Vcblx0XHQgKiBhY3QgYXMgcmVhbCBnZW9tZXRyeS4gVGhlIGRpc3BsYWNlbWVudCB0ZXh0dXJlIGlzIGFuIGltYWdlIHdoZXJlIHRoZSB2YWx1ZVxuXHRcdCAqIG9mIGVhY2ggcGl4ZWwgKHdoaXRlIGJlaW5nIHRoZSBoaWdoZXN0KSBpcyBtYXBwZWQgYWdhaW5zdCwgYW5kXG5cdFx0ICogcmVwb3NpdGlvbnMsIHRoZSB2ZXJ0aWNlcyBvZiB0aGUgbWVzaC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IG11Y2ggdGhlIGRpc3BsYWNlbWVudCBtYXAgYWZmZWN0cyB0aGUgbWVzaCAod2hlcmUgYmxhY2sgaXMgbm9cblx0XHQgKiBkaXNwbGFjZW1lbnQsIGFuZCB3aGl0ZSBpcyBtYXhpbXVtIGRpc3BsYWNlbWVudCkuIFdpdGhvdXQgYSBkaXNwbGFjZW1lbnRcblx0XHQgKiBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2Zmc2V0IG9mIHRoZSBkaXNwbGFjZW1lbnQgbWFwJ3MgdmFsdWVzIG9uIHRoZSBtZXNoJ3MgdmVydGljZXMuXG5cdFx0ICogVGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIHNjYWxlZCBzYW1wbGUgb2YgdGhlIGRpc3BsYWNlbWVudCBtYXAuXG5cdFx0ICogV2l0aG91dCBhIGRpc3BsYWNlbWVudCBtYXAgc2V0LCB0aGlzIHZhbHVlIGlzIG5vdCBhcHBsaWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbHBoYSBtYXAgaXMgYSBncmF5c2NhbGUgdGV4dHVyZSB0aGF0IGNvbnRyb2xzIHRoZSBvcGFjaXR5IGFjcm9zcyB0aGVcblx0XHQgKiBzdXJmYWNlIChibGFjazogZnVsbHkgdHJhbnNwYXJlbnQ7IHdoaXRlOiBmdWxseSBvcGFxdWUpLlxuXHRcdCAqXG5cdFx0ICogT25seSB0aGUgY29sb3Igb2YgdGhlIHRleHR1cmUgaXMgdXNlZCwgaWdub3JpbmcgdGhlIGFscGhhIGNoYW5uZWwgaWYgb25lXG5cdFx0ICogZXhpc3RzLiBGb3IgUkdCIGFuZCBSR0JBIHRleHR1cmVzLCB0aGUgcmVuZGVyZXIgd2lsbCB1c2UgdGhlIGdyZWVuIGNoYW5uZWxcblx0XHQgKiB3aGVuIHNhbXBsaW5nIHRoaXMgdGV4dHVyZSBkdWUgdG8gdGhlIGV4dHJhIGJpdCBvZiBwcmVjaXNpb24gcHJvdmlkZWQgZm9yXG5cdFx0ICogZ3JlZW4gaW4gRFhULWNvbXByZXNzZWQgYW5kIHVuY29tcHJlc3NlZCBSR0IgNTY1IGZvcm1hdHMuIEx1bWluYW5jZS1vbmx5IGFuZFxuXHRcdCAqIGx1bWluYW5jZS9hbHBoYSB0ZXh0dXJlcyB3aWxsIGFsc28gc3RpbGwgd29yayBhcyBleHBlY3RlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/VGV4dHVyZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBtYXRlcmlhbCBpcyByZW5kZXJlZCB3aXRoIGZsYXQgc2hhZGluZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hdGVyaWFsIGlzIGFmZmVjdGVkIGJ5IGZvZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5mb2cgPSB0cnVlO1xuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0XHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdFx0dGhpcy5tYXRjYXAgPSBzb3VyY2UubWF0Y2FwO1xuXG5cdFx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdFx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XG5cdFx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdFx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xuXHRcdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xuXHRcdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0XHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0XHR0aGlzLmZsYXRTaGFkaW5nID0gc291cmNlLmZsYXRTaGFkaW5nO1xuXG5cdFx0dGhpcy5mb2cgPSBzb3VyY2UuZm9nO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBtYXRlcmlhbCBmb3IgcmVuZGVyaW5nIGxpbmUgcHJpbWl0aXZlcy5cbiAqXG4gKiBNYXRlcmlhbHMgZGVmaW5lIHRoZSBhcHBlYXJhbmNlIG9mIHJlbmRlcmFibGUgM0Qgb2JqZWN0cy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZURhc2hlZE1hdGVyaWFsKCB7XG4gKiBcdGNvbG9yOiAweGZmZmZmZixcbiAqIFx0c2NhbGU6IDEsXG4gKiBcdGRhc2hTaXplOiAzLFxuICogXHRnYXBTaXplOiAxLFxuICogfSApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIExpbmVCYXNpY01hdGVyaWFsXG4gKi9cbmNsYXNzIExpbmVEYXNoZWRNYXRlcmlhbCBleHRlbmRzIExpbmVCYXNpY01hdGVyaWFsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaW5lIGRhc2hlZCBtYXRlcmlhbC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbWV0ZXJzXSAtIEFuIG9iamVjdCB3aXRoIG9uZSBvciBtb3JlIHByb3BlcnRpZXNcblx0ICogZGVmaW5pbmcgdGhlIG1hdGVyaWFsJ3MgYXBwZWFyYW5jZS4gQW55IHByb3BlcnR5IG9mIHRoZSBtYXRlcmlhbFxuXHQgKiAoaW5jbHVkaW5nIGFueSBwcm9wZXJ0eSBmcm9tIGluaGVyaXRlZCBtYXRlcmlhbHMpIGNhbiBiZSBwYXNzZWRcblx0ICogaW4gaGVyZS4gQ29sb3IgdmFsdWVzIGNhbiBiZSBwYXNzZWQgYW55IHR5cGUgb2YgdmFsdWUgYWNjZXB0ZWRcblx0ICogYnkge0BsaW5rIENvbG9yI3NldH0uXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVycyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzTGluZURhc2hlZE1hdGVyaWFsID0gdHJ1ZTtcblx0XHR0aGlzLnR5cGUgPSAnTGluZURhc2hlZE1hdGVyaWFsJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzY2FsZSBvZiB0aGUgZGFzaGVkIHBhcnQgb2YgYSBsaW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5zY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2l6ZSBvZiB0aGUgZGFzaC4gVGhpcyBpcyBib3RoIHRoZSBnYXAgd2l0aCB0aGUgc3Ryb2tlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAzXG5cdFx0ICovXG5cdFx0dGhpcy5kYXNoU2l6ZSA9IDM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2l6ZSBvZiB0aGUgZ2FwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5nYXBTaXplID0gMTtcblxuXHRcdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5zY2FsZSA9IHNvdXJjZS5zY2FsZTtcblx0XHR0aGlzLmRhc2hTaXplID0gc291cmNlLmRhc2hTaXplO1xuXHRcdHRoaXMuZ2FwU2l6ZSA9IHNvdXJjZS5nYXBTaXplO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgdG8gYSBzcGVjaWZpYyB0eXBlLlxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheXxBcnJheX0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAqIEBwYXJhbSB7VHlwZWRBcnJheS5jb25zdHJ1Y3Rvcn0gdHlwZSAtIFRoZSBjb25zdHJ1Y3RvciBvZiBhIHR5cGVkIGFycmF5IHRoYXQgZGVmaW5lcyB0aGUgbmV3IHR5cGUuXG4gKiBAcmV0dXJuIHtUeXBlZEFycmF5fSBUaGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjb252ZXJ0QXJyYXkoIGFycmF5LCB0eXBlICkge1xuXG5cdGlmICggISBhcnJheSB8fCBhcnJheS5jb25zdHJ1Y3RvciA9PT0gdHlwZSApIHJldHVybiBhcnJheTtcblxuXHRpZiAoIHR5cGVvZiB0eXBlLkJZVEVTX1BFUl9FTEVNRU5UID09PSAnbnVtYmVyJyApIHtcblxuXHRcdHJldHVybiBuZXcgdHlwZSggYXJyYXkgKTsgLy8gY3JlYXRlIHR5cGVkIGFycmF5XG5cblx0fVxuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJyYXkgKTsgLy8gY3JlYXRlIEFycmF5XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHthbnl9IG9iamVjdCAtIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gaXNUeXBlZEFycmF5KCBvYmplY3QgKSB7XG5cblx0cmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyggb2JqZWN0ICkgJiYgISAoIG9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3ICk7XG5cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gVGhlIGtleWZyYW1lIHRpbWUgdmFsdWVzLlxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBnZXRLZXlmcmFtZU9yZGVyKCB0aW1lcyApIHtcblxuXHRmdW5jdGlvbiBjb21wYXJlVGltZSggaSwgaiApIHtcblxuXHRcdHJldHVybiB0aW1lc1sgaSBdIC0gdGltZXNbIGogXTtcblxuXHR9XG5cblx0Y29uc3QgbiA9IHRpbWVzLmxlbmd0aDtcblx0Y29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KCBuICk7XG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHJlc3VsdFsgaSBdID0gaTtcblxuXHRyZXN1bHQuc29ydCggY29tcGFyZVRpbWUgKTtcblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59XG5cbi8qKlxuICogU29ydHMgdGhlIGdpdmVuIGFycmF5IGJ5IHRoZSBwcmV2aW91c2x5IGNvbXB1dGVkIG9yZGVyIHZpYSBgZ2V0S2V5ZnJhbWVPcmRlcigpYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIFRoZSB2YWx1ZXMgdG8gc29ydC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdHJpZGUgLSBUaGUgc3RyaWRlLlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBvcmRlciAtIFRoZSBzb3J0IG9yZGVyLlxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIHNvcnRlZCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNvcnRlZEFycmF5KCB2YWx1ZXMsIHN0cmlkZSwgb3JkZXIgKSB7XG5cblx0Y29uc3QgblZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG5cdGNvbnN0IHJlc3VsdCA9IG5ldyB2YWx1ZXMuY29uc3RydWN0b3IoIG5WYWx1ZXMgKTtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIGRzdE9mZnNldCA9IDA7IGRzdE9mZnNldCAhPT0gblZhbHVlczsgKysgaSApIHtcblxuXHRcdGNvbnN0IHNyY09mZnNldCA9IG9yZGVyWyBpIF0gKiBzdHJpZGU7XG5cblx0XHRmb3IgKCBsZXQgaiA9IDA7IGogIT09IHN0cmlkZTsgKysgaiApIHtcblxuXHRcdFx0cmVzdWx0WyBkc3RPZmZzZXQgKysgXSA9IHZhbHVlc1sgc3JjT2Zmc2V0ICsgaiBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xuXG59XG5cbi8qKlxuICogVXNlZCBmb3IgcGFyc2luZyBBT1Mga2V5ZnJhbWUgZm9ybWF0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGpzb25LZXlzIC0gQSBsaXN0IG9mIEpTT04ga2V5ZnJhbWVzLlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aW1lcyAtIFRoaXMgYXJyYXkgd2lsbCBiZSBmaWxsZWQgd2l0aCBrZXlmcmFtZSB0aW1lcyBieSB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB2YWx1ZXMgLSBUaGlzIGFycmF5IHdpbGwgYmUgZmlsbGVkIHdpdGgga2V5ZnJhbWUgdmFsdWVzIGJ5IHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVQcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXNlLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuSlNPTigganNvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHZhbHVlUHJvcGVydHlOYW1lICkge1xuXG5cdGxldCBpID0gMSwga2V5ID0ganNvbktleXNbIDAgXTtcblxuXHR3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICYmIGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHR9XG5cblx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gbm8gZGF0YVxuXG5cdGxldCB2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCAuLi52YWx1ZSApOyAvLyBwdXNoIGFsbCBlbGVtZW50c1xuXG5cdFx0XHR9XG5cblx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHR9IHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgKTtcblxuXHR9IGVsc2UgaWYgKCB2YWx1ZS50b0FycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2hcblxuXHRcdGRvIHtcblxuXHRcdFx0dmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cblx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHR2YWx1ZS50b0FycmF5KCB2YWx1ZXMsIHZhbHVlcy5sZW5ndGggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRrZXkgPSBqc29uS2V5c1sgaSArKyBdO1xuXG5cdFx0fSB3aGlsZSAoIGtleSAhPT0gdW5kZWZpbmVkICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIG90aGVyd2lzZSBwdXNoIGFzLWlzXG5cblx0XHRkbyB7XG5cblx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCgga2V5LnRpbWUgKTtcblx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0a2V5ID0ganNvbktleXNbIGkgKysgXTtcblxuXHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgY2xpcCwgY29udGFpbmluZyBvbmx5IHRoZSBzZWdtZW50IG9mIHRoZSBvcmlnaW5hbCBjbGlwIGJldHdlZW4gdGhlIGdpdmVuIGZyYW1lcy5cbiAqXG4gKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB9IHNvdXJjZUNsaXAgLSBUaGUgdmFsdWVzIHRvIHNvcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjbGlwLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0RnJhbWUgLSBUaGUgc3RhcnQgZnJhbWUuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kRnJhbWUgLSBUaGUgZW5kIGZyYW1lLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmcHM9MzBdIC0gVGhlIEZQUy5cbiAqIEByZXR1cm4ge0FuaW1hdGlvbkNsaXB9IFRoZSBuZXcgc3ViIGNsaXAuXG4gKi9cbmZ1bmN0aW9uIHN1YmNsaXAoIHNvdXJjZUNsaXAsIG5hbWUsIHN0YXJ0RnJhbWUsIGVuZEZyYW1lLCBmcHMgPSAzMCApIHtcblxuXHRjb25zdCBjbGlwID0gc291cmNlQ2xpcC5jbG9uZSgpO1xuXG5cdGNsaXAubmFtZSA9IG5hbWU7XG5cblx0Y29uc3QgdHJhY2tzID0gW107XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0Y29uc3QgdHJhY2sgPSBjbGlwLnRyYWNrc1sgaSBdO1xuXHRcdGNvbnN0IHZhbHVlU2l6ZSA9IHRyYWNrLmdldFZhbHVlU2l6ZSgpO1xuXG5cdFx0Y29uc3QgdGltZXMgPSBbXTtcblx0XHRjb25zdCB2YWx1ZXMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHRyYWNrLnRpbWVzLmxlbmd0aDsgKysgaiApIHtcblxuXHRcdFx0Y29uc3QgZnJhbWUgPSB0cmFjay50aW1lc1sgaiBdICogZnBzO1xuXG5cdFx0XHRpZiAoIGZyYW1lIDwgc3RhcnRGcmFtZSB8fCBmcmFtZSA+PSBlbmRGcmFtZSApIGNvbnRpbnVlO1xuXG5cdFx0XHR0aW1lcy5wdXNoKCB0cmFjay50aW1lc1sgaiBdICk7XG5cblx0XHRcdGZvciAoIGxldCBrID0gMDsgayA8IHZhbHVlU2l6ZTsgKysgayApIHtcblxuXHRcdFx0XHR2YWx1ZXMucHVzaCggdHJhY2sudmFsdWVzWyBqICogdmFsdWVTaXplICsgayBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGltZXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHR0cmFjay50aW1lcyA9IGNvbnZlcnRBcnJheSggdGltZXMsIHRyYWNrLnRpbWVzLmNvbnN0cnVjdG9yICk7XG5cdFx0dHJhY2sudmFsdWVzID0gY29udmVydEFycmF5KCB2YWx1ZXMsIHRyYWNrLnZhbHVlcy5jb25zdHJ1Y3RvciApO1xuXG5cdFx0dHJhY2tzLnB1c2goIHRyYWNrICk7XG5cblx0fVxuXG5cdGNsaXAudHJhY2tzID0gdHJhY2tzO1xuXG5cdC8vIGZpbmQgbWluaW11bSAudGltZXMgdmFsdWUgYWNyb3NzIGFsbCB0cmFja3MgaW4gdGhlIHRyaW1tZWQgY2xpcFxuXG5cdGxldCBtaW5TdGFydFRpbWUgPSBJbmZpbml0eTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRpZiAoIG1pblN0YXJ0VGltZSA+IGNsaXAudHJhY2tzWyBpIF0udGltZXNbIDAgXSApIHtcblxuXHRcdFx0bWluU3RhcnRUaW1lID0gY2xpcC50cmFja3NbIGkgXS50aW1lc1sgMCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBzaGlmdCBhbGwgdHJhY2tzIHN1Y2ggdGhhdCBjbGlwIGJlZ2lucyBhdCB0PTBcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjbGlwLnRyYWNrcy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRjbGlwLnRyYWNrc1sgaSBdLnNoaWZ0KCAtMSAqIG1pblN0YXJ0VGltZSApO1xuXG5cdH1cblxuXHRjbGlwLnJlc2V0RHVyYXRpb24oKTtcblxuXHRyZXR1cm4gY2xpcDtcblxufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBrZXlmcmFtZXMgb2YgdGhlIGdpdmVuIGFuaW1hdGlvbiBjbGlwIHRvIGFuIGFkZGl0aXZlIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB9IHRhcmdldENsaXAgLSBUaGUgY2xpcCB0byBtYWtlIGFkZGl0aXZlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtyZWZlcmVuY2VGcmFtZT0wXSAtIFRoZSByZWZlcmVuY2UgZnJhbWUuXG4gKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB9IFtyZWZlcmVuY2VDbGlwPXRhcmdldENsaXBdIC0gVGhlIHJlZmVyZW5jZSBjbGlwLlxuICogQHBhcmFtIHtudW1iZXJ9IFtmcHM9MzBdIC0gVGhlIEZQUy5cbiAqIEByZXR1cm4ge0FuaW1hdGlvbkNsaXB9IFRoZSB1cGRhdGVkIGNsaXAgd2hpY2ggaXMgbm93IGFkZGl0aXZlLlxuICovXG5mdW5jdGlvbiBtYWtlQ2xpcEFkZGl0aXZlKCB0YXJnZXRDbGlwLCByZWZlcmVuY2VGcmFtZSA9IDAsIHJlZmVyZW5jZUNsaXAgPSB0YXJnZXRDbGlwLCBmcHMgPSAzMCApIHtcblxuXHRpZiAoIGZwcyA8PSAwICkgZnBzID0gMzA7XG5cblx0Y29uc3QgbnVtVHJhY2tzID0gcmVmZXJlbmNlQ2xpcC50cmFja3MubGVuZ3RoO1xuXHRjb25zdCByZWZlcmVuY2VUaW1lID0gcmVmZXJlbmNlRnJhbWUgLyBmcHM7XG5cblx0Ly8gTWFrZSBlYWNoIHRyYWNrJ3MgdmFsdWVzIHJlbGF0aXZlIHRvIHRoZSB2YWx1ZXMgYXQgdGhlIHJlZmVyZW5jZSBmcmFtZVxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1UcmFja3M7ICsrIGkgKSB7XG5cblx0XHRjb25zdCByZWZlcmVuY2VUcmFjayA9IHJlZmVyZW5jZUNsaXAudHJhY2tzWyBpIF07XG5cdFx0Y29uc3QgcmVmZXJlbmNlVHJhY2tUeXBlID0gcmVmZXJlbmNlVHJhY2suVmFsdWVUeXBlTmFtZTtcblxuXHRcdC8vIFNraXAgdGhpcyB0cmFjayBpZiBpdCdzIG5vbi1udW1lcmljXG5cdFx0aWYgKCByZWZlcmVuY2VUcmFja1R5cGUgPT09ICdib29sJyB8fCByZWZlcmVuY2VUcmFja1R5cGUgPT09ICdzdHJpbmcnICkgY29udGludWU7XG5cblx0XHQvLyBGaW5kIHRoZSB0cmFjayBpbiB0aGUgdGFyZ2V0IGNsaXAgd2hvc2UgbmFtZSBhbmQgdHlwZSBtYXRjaGVzIHRoZSByZWZlcmVuY2UgdHJhY2tcblx0XHRjb25zdCB0YXJnZXRUcmFjayA9IHRhcmdldENsaXAudHJhY2tzLmZpbmQoIGZ1bmN0aW9uICggdHJhY2sgKSB7XG5cblx0XHRcdHJldHVybiB0cmFjay5uYW1lID09PSByZWZlcmVuY2VUcmFjay5uYW1lXG5cdFx0XHRcdCYmIHRyYWNrLlZhbHVlVHlwZU5hbWUgPT09IHJlZmVyZW5jZVRyYWNrVHlwZTtcblxuXHRcdH0gKTtcblxuXHRcdGlmICggdGFyZ2V0VHJhY2sgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0bGV0IHJlZmVyZW5jZU9mZnNldCA9IDA7XG5cdFx0Y29uc3QgcmVmZXJlbmNlVmFsdWVTaXplID0gcmVmZXJlbmNlVHJhY2suZ2V0VmFsdWVTaXplKCk7XG5cblx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrLmNyZWF0ZUludGVycG9sYW50LmlzSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kR0xURkN1YmljU3BsaW5lICkge1xuXG5cdFx0XHRyZWZlcmVuY2VPZmZzZXQgPSByZWZlcmVuY2VWYWx1ZVNpemUgLyAzO1xuXG5cdFx0fVxuXG5cdFx0bGV0IHRhcmdldE9mZnNldCA9IDA7XG5cdFx0Y29uc3QgdGFyZ2V0VmFsdWVTaXplID0gdGFyZ2V0VHJhY2suZ2V0VmFsdWVTaXplKCk7XG5cblx0XHRpZiAoIHRhcmdldFRyYWNrLmNyZWF0ZUludGVycG9sYW50LmlzSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kR0xURkN1YmljU3BsaW5lICkge1xuXG5cdFx0XHR0YXJnZXRPZmZzZXQgPSB0YXJnZXRWYWx1ZVNpemUgLyAzO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbGFzdEluZGV4ID0gcmVmZXJlbmNlVHJhY2sudGltZXMubGVuZ3RoIC0gMTtcblx0XHRsZXQgcmVmZXJlbmNlVmFsdWU7XG5cblx0XHQvLyBGaW5kIHRoZSB2YWx1ZSB0byBzdWJ0cmFjdCBvdXQgb2YgdGhlIHRyYWNrXG5cdFx0aWYgKCByZWZlcmVuY2VUaW1lIDw9IHJlZmVyZW5jZVRyYWNrLnRpbWVzWyAwIF0gKSB7XG5cblx0XHRcdC8vIFJlZmVyZW5jZSBmcmFtZSBpcyBlYXJsaWVyIHRoYW4gdGhlIGZpcnN0IGtleWZyYW1lLCBzbyBqdXN0IHVzZSB0aGUgZmlyc3Qga2V5ZnJhbWVcblx0XHRcdGNvbnN0IHN0YXJ0SW5kZXggPSByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRjb25zdCBlbmRJbmRleCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdHJlZmVyZW5jZVZhbHVlID0gcmVmZXJlbmNlVHJhY2sudmFsdWVzLnNsaWNlKCBzdGFydEluZGV4LCBlbmRJbmRleCApO1xuXG5cdFx0fSBlbHNlIGlmICggcmVmZXJlbmNlVGltZSA+PSByZWZlcmVuY2VUcmFjay50aW1lc1sgbGFzdEluZGV4IF0gKSB7XG5cblx0XHRcdC8vIFJlZmVyZW5jZSBmcmFtZSBpcyBhZnRlciB0aGUgbGFzdCBrZXlmcmFtZSwgc28ganVzdCB1c2UgdGhlIGxhc3Qga2V5ZnJhbWVcblx0XHRcdGNvbnN0IHN0YXJ0SW5kZXggPSBsYXN0SW5kZXggKiByZWZlcmVuY2VWYWx1ZVNpemUgKyByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRjb25zdCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyByZWZlcmVuY2VWYWx1ZVNpemUgLSByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRyZWZlcmVuY2VWYWx1ZSA9IHJlZmVyZW5jZVRyYWNrLnZhbHVlcy5zbGljZSggc3RhcnRJbmRleCwgZW5kSW5kZXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEludGVycG9sYXRlIHRvIHRoZSByZWZlcmVuY2UgdmFsdWVcblx0XHRcdGNvbnN0IGludGVycG9sYW50ID0gcmVmZXJlbmNlVHJhY2suY3JlYXRlSW50ZXJwb2xhbnQoKTtcblx0XHRcdGNvbnN0IHN0YXJ0SW5kZXggPSByZWZlcmVuY2VPZmZzZXQ7XG5cdFx0XHRjb25zdCBlbmRJbmRleCA9IHJlZmVyZW5jZVZhbHVlU2l6ZSAtIHJlZmVyZW5jZU9mZnNldDtcblx0XHRcdGludGVycG9sYW50LmV2YWx1YXRlKCByZWZlcmVuY2VUaW1lICk7XG5cdFx0XHRyZWZlcmVuY2VWYWx1ZSA9IGludGVycG9sYW50LnJlc3VsdEJ1ZmZlci5zbGljZSggc3RhcnRJbmRleCwgZW5kSW5kZXggKTtcblxuXHRcdH1cblxuXHRcdC8vIENvbmp1Z2F0ZSB0aGUgcXVhdGVybmlvblxuXHRcdGlmICggcmVmZXJlbmNlVHJhY2tUeXBlID09PSAncXVhdGVybmlvbicgKSB7XG5cblx0XHRcdGNvbnN0IHJlZmVyZW5jZVF1YXQgPSBuZXcgUXVhdGVybmlvbigpLmZyb21BcnJheSggcmVmZXJlbmNlVmFsdWUgKS5ub3JtYWxpemUoKS5jb25qdWdhdGUoKTtcblx0XHRcdHJlZmVyZW5jZVF1YXQudG9BcnJheSggcmVmZXJlbmNlVmFsdWUgKTtcblxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHRoZSByZWZlcmVuY2UgdmFsdWUgZnJvbSBhbGwgb2YgdGhlIHRyYWNrIHZhbHVlc1xuXG5cdFx0Y29uc3QgbnVtVGltZXMgPSB0YXJnZXRUcmFjay50aW1lcy5sZW5ndGg7XG5cdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbnVtVGltZXM7ICsrIGogKSB7XG5cblx0XHRcdGNvbnN0IHZhbHVlU3RhcnQgPSBqICogdGFyZ2V0VmFsdWVTaXplICsgdGFyZ2V0T2Zmc2V0O1xuXG5cdFx0XHRpZiAoIHJlZmVyZW5jZVRyYWNrVHlwZSA9PT0gJ3F1YXRlcm5pb24nICkge1xuXG5cdFx0XHRcdC8vIE11bHRpcGx5IHRoZSBjb25qdWdhdGUgZm9yIHF1YXRlcm5pb24gdHJhY2sgdHlwZXNcblx0XHRcdFx0UXVhdGVybmlvbi5tdWx0aXBseVF1YXRlcm5pb25zRmxhdChcblx0XHRcdFx0XHR0YXJnZXRUcmFjay52YWx1ZXMsXG5cdFx0XHRcdFx0dmFsdWVTdGFydCxcblx0XHRcdFx0XHRyZWZlcmVuY2VWYWx1ZSxcblx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdHRhcmdldFRyYWNrLnZhbHVlcyxcblx0XHRcdFx0XHR2YWx1ZVN0YXJ0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc3QgdmFsdWVFbmQgPSB0YXJnZXRWYWx1ZVNpemUgLSB0YXJnZXRPZmZzZXQgKiAyO1xuXG5cdFx0XHRcdC8vIFN1YnRyYWN0IGVhY2ggdmFsdWUgZm9yIGFsbCBvdGhlciBudW1lcmljIHRyYWNrIHR5cGVzXG5cdFx0XHRcdGZvciAoIGxldCBrID0gMDsgayA8IHZhbHVlRW5kOyArKyBrICkge1xuXG5cdFx0XHRcdFx0dGFyZ2V0VHJhY2sudmFsdWVzWyB2YWx1ZVN0YXJ0ICsgayBdIC09IHJlZmVyZW5jZVZhbHVlWyBrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdHRhcmdldENsaXAuYmxlbmRNb2RlID0gQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGU7XG5cblx0cmV0dXJuIHRhcmdldENsaXA7XG5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHdpdGggdmFyaW91cyBtZXRob2RzIHRvIGFzc2lzdCB3aXRoIGFuaW1hdGlvbnMuXG4gKlxuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBBbmltYXRpb25VdGlscyB7XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGFuIGFycmF5IHRvIGEgc3BlY2lmaWMgdHlwZVxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheXxBcnJheX0gYXJyYXkgLSBUaGUgYXJyYXkgdG8gY29udmVydC5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5LmNvbnN0cnVjdG9yfSB0eXBlIC0gVGhlIGNvbnN0cnVjdG9yIG9mIGEgdHlwZSBhcnJheS5cblx0ICogQHJldHVybiB7VHlwZWRBcnJheX0gVGhlIGNvbnZlcnRlZCBhcnJheVxuXHQgKi9cblx0c3RhdGljIGNvbnZlcnRBcnJheSggYXJyYXksIHR5cGUgKSB7XG5cblx0XHRyZXR1cm4gY29udmVydEFycmF5KCBhcnJheSwgdHlwZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBhIHR5cGVkIGFycmF5LlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7YW55fSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSB0eXBlZCBhcnJheS5cblx0ICovXG5cdHN0YXRpYyBpc1R5cGVkQXJyYXkoIG9iamVjdCApIHtcblxuXHRcdHJldHVybiBpc1R5cGVkQXJyYXkoIG9iamVjdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBieSB3aGljaCB0aW1lcyBhbmQgdmFsdWVzIGNhbiBiZSBzb3J0ZWQuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aW1lcyAtIFRoZSBrZXlmcmFtZSB0aW1lIHZhbHVlcy5cblx0ICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gVGhlIGFycmF5LlxuXHQgKi9cblx0c3RhdGljIGdldEtleWZyYW1lT3JkZXIoIHRpbWVzICkge1xuXG5cdFx0cmV0dXJuIGdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTb3J0cyB0aGUgZ2l2ZW4gYXJyYXkgYnkgdGhlIHByZXZpb3VzbHkgY29tcHV0ZWQgb3JkZXIgdmlhIGBnZXRLZXlmcmFtZU9yZGVyKClgLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gdmFsdWVzIC0gVGhlIHZhbHVlcyB0byBzb3J0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RyaWRlIC0gVGhlIHN0cmlkZS5cblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBvcmRlciAtIFRoZSBzb3J0IG9yZGVyLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBUaGUgc29ydGVkIHZhbHVlcy5cblx0ICovXG5cdHN0YXRpYyBzb3J0ZWRBcnJheSggdmFsdWVzLCBzdHJpZGUsIG9yZGVyICkge1xuXG5cdFx0cmV0dXJuIHNvcnRlZEFycmF5KCB2YWx1ZXMsIHN0cmlkZSwgb3JkZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVzZWQgZm9yIHBhcnNpbmcgQU9TIGtleWZyYW1lIGZvcm1hdHMuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBqc29uS2V5cyAtIEEgbGlzdCBvZiBKU09OIGtleWZyYW1lcy5cblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aW1lcyAtIFRoaXMgYXJyYXkgd2lsbCBiZSBmaWxsZWQgd2l0aCBrZXlmcmFtZSB0aW1lcyBieSB0aGlzIG1ldGhvZC5cblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB2YWx1ZXMgLSBUaGlzIGFycmF5IHdpbGwgYmUgZmlsbGVkIHdpdGgga2V5ZnJhbWUgdmFsdWVzIGJ5IHRoaXMgbWV0aG9kLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVQcm9wZXJ0eU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXNlLlxuXHQgKi9cblx0c3RhdGljIGZsYXR0ZW5KU09OKCBqc29uS2V5cywgdGltZXMsIHZhbHVlcywgdmFsdWVQcm9wZXJ0eU5hbWUgKSB7XG5cblx0XHRmbGF0dGVuSlNPTigganNvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHZhbHVlUHJvcGVydHlOYW1lICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IGNsaXAsIGNvbnRhaW5pbmcgb25seSB0aGUgc2VnbWVudCBvZiB0aGUgb3JpZ2luYWwgY2xpcCBiZXR3ZWVuIHRoZSBnaXZlbiBmcmFtZXMuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtBbmltYXRpb25DbGlwfSBzb3VyY2VDbGlwIC0gVGhlIHZhbHVlcyB0byBzb3J0LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBjbGlwLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRGcmFtZSAtIFRoZSBzdGFydCBmcmFtZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGVuZEZyYW1lIC0gVGhlIGVuZCBmcmFtZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtmcHM9MzBdIC0gVGhlIEZQUy5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQ2xpcH0gVGhlIG5ldyBzdWIgY2xpcC5cblx0ICovXG5cdHN0YXRpYyBzdWJjbGlwKCBzb3VyY2VDbGlwLCBuYW1lLCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgZnBzID0gMzAgKSB7XG5cblx0XHRyZXR1cm4gc3ViY2xpcCggc291cmNlQ2xpcCwgbmFtZSwgc3RhcnRGcmFtZSwgZW5kRnJhbWUsIGZwcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGtleWZyYW1lcyBvZiB0aGUgZ2l2ZW4gYW5pbWF0aW9uIGNsaXAgdG8gYW4gYWRkaXRpdmUgZm9ybWF0LlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7QW5pbWF0aW9uQ2xpcH0gdGFyZ2V0Q2xpcCAtIFRoZSBjbGlwIHRvIG1ha2UgYWRkaXRpdmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcmVmZXJlbmNlRnJhbWU9MF0gLSBUaGUgcmVmZXJlbmNlIGZyYW1lLlxuXHQgKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB9IFtyZWZlcmVuY2VDbGlwPXRhcmdldENsaXBdIC0gVGhlIHJlZmVyZW5jZSBjbGlwLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zwcz0zMF0gLSBUaGUgRlBTLlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25DbGlwfSBUaGUgdXBkYXRlZCBjbGlwIHdoaWNoIGlzIG5vdyBhZGRpdGl2ZS5cblx0ICovXG5cdHN0YXRpYyBtYWtlQ2xpcEFkZGl0aXZlKCB0YXJnZXRDbGlwLCByZWZlcmVuY2VGcmFtZSA9IDAsIHJlZmVyZW5jZUNsaXAgPSB0YXJnZXRDbGlwLCBmcHMgPSAzMCApIHtcblxuXHRcdHJldHVybiBtYWtlQ2xpcEFkZGl0aXZlKCB0YXJnZXRDbGlwLCByZWZlcmVuY2VGcmFtZSwgcmVmZXJlbmNlQ2xpcCwgZnBzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBpbnRlcnBvbGFudHMgb3ZlciBwYXJhbWV0cmljIHNhbXBsZXMuXG4gKlxuICogVGhlIHBhcmFtZXRlciBkb21haW4gaXMgb25lIGRpbWVuc2lvbmFsLCB0eXBpY2FsbHkgdGhlIHRpbWUgb3IgYSBwYXRoXG4gKiBhbG9uZyBhIGN1cnZlIGRlZmluZWQgYnkgdGhlIGRhdGEuXG4gKlxuICogVGhlIHNhbXBsZSB2YWx1ZXMgY2FuIGhhdmUgYW55IGRpbWVuc2lvbmFsaXR5IGFuZCBkZXJpdmVkIGNsYXNzZXMgbWF5XG4gKiBhcHBseSBzcGVjaWFsIGludGVycHJldGF0aW9ucyB0byB0aGUgZGF0YS5cbiAqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHRoZSBpbnRlcnZhbCBzZWVrIGluIGEgVGVtcGxhdGUgTWV0aG9kLCBkZWZlcnJpbmdcbiAqIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiB0byBkZXJpdmVkIGNsYXNzZXMuXG4gKlxuICogVGltZSBjb21wbGV4aXR5IGlzIE8oMSkgZm9yIGxpbmVhciBhY2Nlc3MgY3Jvc3NpbmcgYXQgbW9zdCB0d28gcG9pbnRzXG4gKiBhbmQgTyhsb2cgTikgZm9yIHJhbmRvbSBhY2Nlc3MsIHdoZXJlIE4gaXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbnMuXG4gKlxuICogUmVmZXJlbmNlczoge0BsaW5rIGh0dHA6Ly93d3cub29kZXNpZ24uY29tL3RlbXBsYXRlLW1ldGhvZC1wYXR0ZXJuLmh0bWx9XG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIEludGVycG9sYW50IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBpbnRlcnBvbGFudC5cblx0ICpcblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBwYXJhbWV0ZXJQb3NpdGlvbnMgLSBUaGUgcGFyYW1ldGVyIHBvc2l0aW9ucyBob2xkIHRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvcnMuXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gc2FtcGxlVmFsdWVzIC0gVGhlIHNhbXBsZSB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzYW1wbGVTaXplIC0gVGhlIHNhbXBsZSBzaXplXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gW3Jlc3VsdEJ1ZmZlcl0gLSBUaGUgcmVzdWx0IGJ1ZmZlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhcmFtZXRlciBwb3NpdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VHlwZWRBcnJheX1cblx0XHQgKi9cblx0XHR0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyA9IHBhcmFtZXRlclBvc2l0aW9ucztcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FjaGUgaW5kZXguXG5cdFx0ICpcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZXN1bHQgYnVmZmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1R5cGVkQXJyYXl9XG5cdFx0ICovXG5cdFx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/IHJlc3VsdEJ1ZmZlciA6IG5ldyBzYW1wbGVWYWx1ZXMuY29uc3RydWN0b3IoIHNhbXBsZVNpemUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzYW1wbGUgdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1R5cGVkQXJyYXl9XG5cdFx0ICovXG5cdFx0dGhpcy5zYW1wbGVWYWx1ZXMgPSBzYW1wbGVWYWx1ZXM7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdmFsdWUgc2l6ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtUeXBlZEFycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMudmFsdWVTaXplID0gc2FtcGxlU2l6ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBpbnRlcnBvbGF0aW9uIHNldHRpbmdzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9PYmplY3R9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlZmF1bHQgc2V0dGluZ3Mgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLkRlZmF1bHRTZXR0aW5nc18gPSB7fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlIHRoZSBpbnRlcnBvbGFudCBhdCBwb3NpdGlvbiBgdGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gVGhlIGludGVycG9sYXRpb24gZmFjdG9yLlxuXHQgKiBAcmV0dXJuIHtUeXBlZEFycmF5fSBUaGUgcmVzdWx0IGJ1ZmZlci5cblx0ICovXG5cdGV2YWx1YXRlKCB0ICkge1xuXG5cdFx0Y29uc3QgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucztcblx0XHRsZXQgaTEgPSB0aGlzLl9jYWNoZWRJbmRleCxcblx0XHRcdHQxID0gcHBbIGkxIF0sXG5cdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XG5cblx0XHRcdHNlZWs6IHtcblxuXHRcdFx0XHRsZXQgcmlnaHQ7XG5cblx0XHRcdFx0bGluZWFyX3NjYW46IHtcblxuXHRcdFx0XHRcdC8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvM1xuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcblx0XHRcdFx0XHQvLy1cblx0XHRcdFx0XHQvLy0gXHRcdFx0XHRpZiAoIHQgPj0gdDEgfHwgdDEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgZ2l2ZVVwQXQgPSBpMSArIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBhZnRlciBlbmRcblxuXHRcdFx0XHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XG5cdFx0XHRcdFx0XHRcdHQxID0gcHBbICsrIGkxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhICggdCA+PSB0MCApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsb29waW5nP1xuXG5cdFx0XHRcdFx0XHRjb25zdCB0MWdsb2JhbCA9IHBwWyAxIF07XG5cblx0XHRcdFx0XHRcdGlmICggdCA8IHQxZ2xvYmFsICkge1xuXG5cdFx0XHRcdFx0XHRcdGkxID0gMjsgLy8gKyAxLCB1c2luZyB0aGUgc2NhbiBmb3IgdGhlIGRldGFpbHNcblx0XHRcdFx0XHRcdFx0dDAgPSB0MWdsb2JhbDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBsaW5lYXIgcmV2ZXJzZSBzY2FuXG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBnaXZlVXBBdCA9IGkxIC0gMjsgOyApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBiZWZvcmUgc3RhcnRcblxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKCAwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQxID0gdDA7XG5cdFx0XHRcdFx0XHRcdHQwID0gcHBbIC0tIGkxIC0gMSBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdCA+PSB0MCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHdlIGhhdmUgYXJyaXZlZCBhdCB0aGUgc291Z2h0IGludGVydmFsXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWsgc2VlaztcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gcHJlcGFyZSBiaW5hcnkgc2VhcmNoIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIGluZGV4XG5cdFx0XHRcdFx0XHRyaWdodCA9IGkxO1xuXHRcdFx0XHRcdFx0aTEgPSAwO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyB0aGUgaW50ZXJ2YWwgaXMgdmFsaWRcblxuXHRcdFx0XHRcdGJyZWFrIHZhbGlkYXRlX2ludGVydmFsO1xuXG5cdFx0XHRcdH0gLy8gbGluZWFyIHNjYW5cblxuXHRcdFx0XHQvLyBiaW5hcnkgc2VhcmNoXG5cblx0XHRcdFx0d2hpbGUgKCBpMSA8IHJpZ2h0ICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbWlkID0gKCBpMSArIHJpZ2h0ICkgPj4+IDE7XG5cblx0XHRcdFx0XHRpZiAoIHQgPCBwcFsgbWlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdHJpZ2h0ID0gbWlkO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aTEgPSBtaWQgKyAxO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0MSA9IHBwWyBpMSBdO1xuXHRcdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdFx0XHQvLyBjaGVjayBib3VuZGFyeSBjYXNlcywgYWdhaW5cblxuXHRcdFx0XHRpZiAoIHQwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHQxID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcblx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oIGkxIC0gMSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSAvLyBzZWVrXG5cblx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cblx0XHRcdHRoaXMuaW50ZXJ2YWxDaGFuZ2VkXyggaTEsIHQwLCB0MSApO1xuXG5cdFx0fSAvLyB2YWxpZGF0ZV9pbnRlcnZhbFxuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKCBpMSwgdDAsIHQsIHQxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpbnRlcnBvbGF0aW9uIHNldHRpbmdzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBpbnRlcnBvbGF0aW9uIHNldHRpbmdzLlxuXHQgKi9cblx0Z2V0U2V0dGluZ3NfKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MgfHwgdGhpcy5EZWZhdWx0U2V0dGluZ3NfO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBBbiBpbmRleCBpbnRvIHRoZSBzYW1wbGUgdmFsdWUgYnVmZmVyLlxuXHQgKiBAcmV0dXJuIHtUeXBlZEFycmF5fSBUaGUgcmVzdWx0IGJ1ZmZlci5cblx0ICovXG5cdGNvcHlTYW1wbGVWYWx1ZV8oIGluZGV4ICkge1xuXG5cdFx0Ly8gY29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyXG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBpbmRleCAqIHN0cmlkZTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9IHZhbHVlc1sgb2Zmc2V0ICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyBhIHNhbXBsZSB2YWx1ZSB0byB0aGUgcmVzdWx0IGJ1ZmZlci5cblx0ICpcblx0ICogQGFic3RyYWN0XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpMSAtIEFuIGluZGV4IGludG8gdGhlIHNhbXBsZSB2YWx1ZSBidWZmZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0MCAtIFRoZSBwcmV2aW91cyBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgY3VycmVudCBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHQxIC0gVGhlIG5leHQgaW50ZXJwb2xhdGlvbiBmYWN0b3IuXG5cdCAqIEByZXR1cm4ge1R5cGVkQXJyYXl9IFRoZSByZXN1bHQgYnVmZmVyLlxuXHQgKi9cblx0aW50ZXJwb2xhdGVfKCAvKiBpMSwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnY2FsbCB0byBhYnN0cmFjdCBtZXRob2QnICk7XG5cdFx0Ly8gaW1wbGVtZW50YXRpb25zIHNoYWxsIHJldHVybiB0aGlzLnJlc3VsdEJ1ZmZlclxuXG5cdH1cblxuXHQvKipcblx0ICogT3B0aW9uYWwgbWV0aG9kIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB0aGUgaW50ZXJ2YWwgaGFzIGNoYW5nZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpMSAtIEFuIGluZGV4IGludG8gdGhlIHNhbXBsZSB2YWx1ZSBidWZmZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0MCAtIFRoZSBwcmV2aW91cyBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHQgLSBUaGUgY3VycmVudCBpbnRlcnBvbGF0aW9uIGZhY3Rvci5cblx0ICovXG5cdGludGVydmFsQ2hhbmdlZF8oIC8qIGkxLCB0MCwgdDEgKi8gKSB7XG5cblx0XHQvLyBlbXB0eVxuXG5cdH1cblxufVxuXG4vKipcbiAqIEZhc3QgYW5kIHNpbXBsZSBjdWJpYyBzcGxpbmUgaW50ZXJwb2xhbnQuXG4gKlxuICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZVxuICogYXQgZWFjaCBzYW1wbGUgcG9zaXRpb24gdG8gdGhlIGxpbmVhciBzbG9wZSBiZXR3ZWVuIG5laWdoYm9yaW5nIHBvc2l0aW9uc1xuICogb3ZlciB0aGVpciBwYXJhbWV0ZXIgaW50ZXJ2YWwuXG4gKlxuICogQGF1Z21lbnRzIEludGVycG9sYW50XG4gKi9cbmNsYXNzIEN1YmljSW50ZXJwb2xhbnQgZXh0ZW5kcyBJbnRlcnBvbGFudCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY3ViaWMgaW50ZXJwb2xhbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gcGFyYW1ldGVyUG9zaXRpb25zIC0gVGhlIHBhcmFtZXRlciBwb3NpdGlvbnMgaG9sZCB0aGUgaW50ZXJwb2xhdGlvbiBmYWN0b3JzLlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IHNhbXBsZVZhbHVlcyAtIFRoZSBzYW1wbGUgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlU2l6ZSAtIFRoZSBzYW1wbGUgc2l6ZVxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IFtyZXN1bHRCdWZmZXJdIC0gVGhlIHJlc3VsdCBidWZmZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gLTA7XG5cdFx0dGhpcy5fb2Zmc2V0UHJldiA9IC0wO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSAtMDtcblx0XHR0aGlzLl9vZmZzZXROZXh0ID0gLTA7XG5cblx0XHR0aGlzLkRlZmF1bHRTZXR0aW5nc18gPSB7XG5cblx0XHRcdGVuZGluZ1N0YXJ0OiBaZXJvQ3VydmF0dXJlRW5kaW5nLFxuXHRcdFx0ZW5kaW5nRW5kOiBaZXJvQ3VydmF0dXJlRW5kaW5nXG5cblx0XHR9O1xuXG5cdH1cblxuXHRpbnRlcnZhbENoYW5nZWRfKCBpMSwgdDAsIHQxICkge1xuXG5cdFx0Y29uc3QgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucztcblx0XHRsZXQgaVByZXYgPSBpMSAtIDIsXG5cdFx0XHRpTmV4dCA9IGkxICsgMSxcblxuXHRcdFx0dFByZXYgPSBwcFsgaVByZXYgXSxcblx0XHRcdHROZXh0ID0gcHBbIGlOZXh0IF07XG5cblx0XHRpZiAoIHRQcmV2ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nU3RhcnQgKSB7XG5cblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyBmJyh0MCkgPSAwXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IDIgKiB0MCAtIHQxO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBXcmFwQXJvdW5kRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBvdGhlciBlbmQgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0aVByZXYgPSBwcC5sZW5ndGggLSAyO1xuXHRcdFx0XHRcdHRQcmV2ID0gdDAgKyBwcFsgaVByZXYgXSAtIHBwWyBpUHJldiArIDEgXTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6IC8vIFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdFx0XHRcdC8vIGYnJyh0MCkgPSAwIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlQcmV2ID0gaTE7XG5cdFx0XHRcdFx0dFByZXYgPSB0MTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0TmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ0VuZCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHROKSA9IDBcblx0XHRcdFx0XHRpTmV4dCA9IGkxO1xuXHRcdFx0XHRcdHROZXh0ID0gMiAqIHQxIC0gdDA7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpTmV4dCA9IDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MSArIHBwWyAxIF0gLSBwcFsgMCBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHROKSA9IDAsIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlOZXh0ID0gaTEgLSAxO1xuXHRcdFx0XHRcdHROZXh0ID0gdDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGhhbGZEdCA9ICggdDEgLSB0MCApICogMC41LFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemU7XG5cblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gaGFsZkR0IC8gKCB0MCAtIHRQcmV2ICk7XG5cdFx0dGhpcy5fd2VpZ2h0TmV4dCA9IGhhbGZEdCAvICggdE5leHQgLSB0MSApO1xuXHRcdHRoaXMuX29mZnNldFByZXYgPSBpUHJldiAqIHN0cmlkZTtcblx0XHR0aGlzLl9vZmZzZXROZXh0ID0gaU5leHQgKiBzdHJpZGU7XG5cblx0fVxuXG5cdGludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0bzEgPSBpMSAqIHN0cmlkZSxcdFx0bzAgPSBvMSAtIHN0cmlkZSxcblx0XHRcdG9QID0gdGhpcy5fb2Zmc2V0UHJldiwgXHRvTiA9IHRoaXMuX29mZnNldE5leHQsXG5cdFx0XHR3UCA9IHRoaXMuX3dlaWdodFByZXYsXHR3TiA9IHRoaXMuX3dlaWdodE5leHQsXG5cblx0XHRcdHAgPSAoIHQgLSB0MCApIC8gKCB0MSAtIHQwICksXG5cdFx0XHRwcCA9IHAgKiBwLFxuXHRcdFx0cHBwID0gcHAgKiBwO1xuXG5cdFx0Ly8gZXZhbHVhdGUgcG9seW5vbWlhbHNcblxuXHRcdGNvbnN0IHNQID0gLSB3UCAqIHBwcCArIDIgKiB3UCAqIHBwIC0gd1AgKiBwO1xuXHRcdGNvbnN0IHMwID0gKCAxICsgd1AgKSAqIHBwcCArICggLTEuNSAtIDIgKiB3UCApICogcHAgKyAoIC0wLjUgKyB3UCApICogcCArIDE7XG5cdFx0Y29uc3QgczEgPSAoIC0xIC0gd04gKSAqIHBwcCArICggMS41ICsgd04gKSAqIHBwICsgMC41ICogcDtcblx0XHRjb25zdCBzTiA9IHdOICogcHBwIC0gd04gKiBwcDtcblxuXHRcdC8vIGNvbWJpbmUgZGF0YSBsaW5lYXJseVxuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHRzUCAqIHZhbHVlc1sgb1AgKyBpIF0gK1xuXHRcdFx0XHRcdHMwICogdmFsdWVzWyBvMCArIGkgXSArXG5cdFx0XHRcdFx0czEgKiB2YWx1ZXNbIG8xICsgaSBdICtcblx0XHRcdFx0XHRzTiAqIHZhbHVlc1sgb04gKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgYmFzaWMgbGluZWFyIGludGVycG9sYW50LlxuICpcbiAqIEBhdWdtZW50cyBJbnRlcnBvbGFudFxuICovXG5jbGFzcyBMaW5lYXJJbnRlcnBvbGFudCBleHRlbmRzIEludGVycG9sYW50IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaW5lYXIgaW50ZXJwb2xhbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gcGFyYW1ldGVyUG9zaXRpb25zIC0gVGhlIHBhcmFtZXRlciBwb3NpdGlvbnMgaG9sZCB0aGUgaW50ZXJwb2xhdGlvbiBmYWN0b3JzLlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IHNhbXBsZVZhbHVlcyAtIFRoZSBzYW1wbGUgdmFsdWVzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2FtcGxlU2l6ZSAtIFRoZSBzYW1wbGUgc2l6ZVxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IFtyZXN1bHRCdWZmZXJdIC0gVGhlIHJlc3VsdCBidWZmZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdHN1cGVyKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cblx0fVxuXG5cdGludGVycG9sYXRlXyggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b2Zmc2V0MSA9IGkxICogc3RyaWRlLFxuXHRcdFx0b2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUsXG5cblx0XHRcdHdlaWdodDEgPSAoIHQgLSB0MCApIC8gKCB0MSAtIHQwICksXG5cdFx0XHR3ZWlnaHQwID0gMSAtIHdlaWdodDE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPVxuXHRcdFx0XHRcdHZhbHVlc1sgb2Zmc2V0MCArIGkgXSAqIHdlaWdodDAgK1xuXHRcdFx0XHRcdHZhbHVlc1sgb2Zmc2V0MSArIGkgXSAqIHdlaWdodDE7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEludGVycG9sYW50IHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBzYW1wbGUgdmFsdWUgYXQgdGhlIHBvc2l0aW9uIHByZWNlZGluZ1xuICogdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAYXVnbWVudHMgSW50ZXJwb2xhbnRcbiAqL1xuY2xhc3MgRGlzY3JldGVJbnRlcnBvbGFudCBleHRlbmRzIEludGVycG9sYW50IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkaXNjcmV0ZSBpbnRlcnBvbGFudC5cblx0ICpcblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBwYXJhbWV0ZXJQb3NpdGlvbnMgLSBUaGUgcGFyYW1ldGVyIHBvc2l0aW9ucyBob2xkIHRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvcnMuXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gc2FtcGxlVmFsdWVzIC0gVGhlIHNhbXBsZSB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzYW1wbGVTaXplIC0gVGhlIHNhbXBsZSBzaXplXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gW3Jlc3VsdEJ1ZmZlcl0gLSBUaGUgcmVzdWx0IGJ1ZmZlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdFx0c3VwZXIoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR9XG5cblx0aW50ZXJwb2xhdGVfKCBpMSAvKiwgdDAsIHQsIHQxICovICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weVNhbXBsZVZhbHVlXyggaTEgLSAxICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBzIGEgdGltZWQgc2VxdWVuY2Ugb2Yga2V5ZnJhbWVzLCB3aGljaCBhcmUgY29tcG9zZWQgb2YgbGlzdHMgb2ZcbiAqIHRpbWVzIGFuZCByZWxhdGVkIHZhbHVlcywgYW5kIHdoaWNoIGFyZSB1c2VkIHRvIGFuaW1hdGUgYSBzcGVjaWZpYyBwcm9wZXJ0eVxuICogb2YgYW4gb2JqZWN0LlxuICovXG5jbGFzcyBLZXlmcmFtZVRyYWNrIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBrZXlmcmFtZSB0cmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUga2V5ZnJhbWUgdHJhY2sncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gQSBsaXN0IG9mIGtleWZyYW1lIHRpbWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7KEludGVycG9sYXRlTGluZWFyfEludGVycG9sYXRlRGlzY3JldGV8SW50ZXJwb2xhdGVTbW9vdGgpfSBbaW50ZXJwb2xhdGlvbl0gLSBUaGUgaW50ZXJwb2xhdGlvbiB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIG5hbWUgaXMgdW5kZWZpbmVkJyApO1xuXHRcdGlmICggdGltZXMgPT09IHVuZGVmaW5lZCB8fCB0aW1lcy5sZW5ndGggPT09IDAgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBubyBrZXlmcmFtZXMgaW4gdHJhY2sgbmFtZWQgJyArIG5hbWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0cmFjaydzIG5hbWUgY2FuIHJlZmVyIHRvIG1vcnBoIHRhcmdldHMgb3IgYm9uZXMgb3Jcblx0XHQgKiBwb3NzaWJseSBvdGhlciB2YWx1ZXMgd2l0aGluIGFuIGFuaW1hdGVkIG9iamVjdC4gU2VlIHtAbGluayBQcm9wZXJ0eUJpbmRpbmcjcGFyc2VUcmFja05hbWV9XG5cdFx0ICogZm9yIHRoZSBmb3JtcyBvZiBzdHJpbmdzIHRoYXQgY2FuIGJlIHBhcnNlZCBmb3IgcHJvcGVydHkgYmluZGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBrZXlmcmFtZSB0aW1lcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtGbG9hdDMyQXJyYXl9XG5cdFx0ICovXG5cdFx0dGhpcy50aW1lcyA9IGNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBrZXlmcmFtZSB2YWx1ZXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RmxvYXQzMkFycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMudmFsdWVzID0gY29udmVydEFycmF5KCB2YWx1ZXMsIHRoaXMuVmFsdWVCdWZmZXJUeXBlICk7XG5cblx0XHR0aGlzLnNldEludGVycG9sYXRpb24oIGludGVycG9sYXRpb24gfHwgdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGtleWZyYW1lIHRyYWNrIHRvIEpTT04uXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtLZXlmcmFtZVRyYWNrfSB0cmFjayAtIFRoZSBrZXlmcmFtZSB0cmFjayB0byBzZXJpYWxpemUuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIHNlcmlhbGl6ZWQga2V5ZnJhbWUgdHJhY2sgYXMgSlNPTi5cblx0ICovXG5cdHN0YXRpYyB0b0pTT04oIHRyYWNrICkge1xuXG5cdFx0Y29uc3QgdHJhY2tUeXBlID0gdHJhY2suY29uc3RydWN0b3I7XG5cblx0XHRsZXQganNvbjtcblxuXHRcdC8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHRvSlNPTiBtZXRob2Rcblx0XHRpZiAoIHRyYWNrVHlwZS50b0pTT04gIT09IHRoaXMudG9KU09OICkge1xuXG5cdFx0XHRqc29uID0gdHJhY2tUeXBlLnRvSlNPTiggdHJhY2sgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSB0aGUgZGF0YSBjYW4gYmUgc2VyaWFsaXplZCBhcy1pc1xuXHRcdFx0anNvbiA9IHtcblxuXHRcdFx0XHQnbmFtZSc6IHRyYWNrLm5hbWUsXG5cdFx0XHRcdCd0aW1lcyc6IGNvbnZlcnRBcnJheSggdHJhY2sudGltZXMsIEFycmF5ICksXG5cdFx0XHRcdCd2YWx1ZXMnOiBjb252ZXJ0QXJyYXkoIHRyYWNrLnZhbHVlcywgQXJyYXkgKVxuXG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBpbnRlcnBvbGF0aW9uID0gdHJhY2suZ2V0SW50ZXJwb2xhdGlvbigpO1xuXG5cdFx0XHRpZiAoIGludGVycG9sYXRpb24gIT09IHRyYWNrLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdGpzb24uaW50ZXJwb2xhdGlvbiA9IGludGVycG9sYXRpb247XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGpzb24udHlwZSA9IHRyYWNrLlZhbHVlVHlwZU5hbWU7IC8vIG1hbmRhdG9yeVxuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBuZXcgZGlzY3JldGUgaW50ZXJwb2xhbnQuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBbcmVzdWx0XSAtIFRoZSByZXN1bHQgYnVmZmVyLlxuXHQgKiBAcmV0dXJuIHtEaXNjcmV0ZUludGVycG9sYW50fSBUaGUgbmV3IGludGVycG9sYW50LlxuXHQgKi9cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgRGlzY3JldGVJbnRlcnBvbGFudCggdGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGEgbmV3IGxpbmVhciBpbnRlcnBvbGFudC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IFtyZXN1bHRdIC0gVGhlIHJlc3VsdCBidWZmZXIuXG5cdCAqIEByZXR1cm4ge0xpbmVhckludGVycG9sYW50fSBUaGUgbmV3IGludGVycG9sYW50LlxuXHQgKi9cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IExpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBuZXcgc21vb3RoIGludGVycG9sYW50LlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7VHlwZWRBcnJheX0gW3Jlc3VsdF0gLSBUaGUgcmVzdWx0IGJ1ZmZlci5cblx0ICogQHJldHVybiB7Q3ViaWNJbnRlcnBvbGFudH0gVGhlIG5ldyBpbnRlcnBvbGFudC5cblx0ICovXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCggcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDdWJpY0ludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBpbnRlcnBvbGF0aW9uIGZhY3RvciBtZXRob2QgZm9yIHRoaXMga2V5ZnJhbWUgdHJhY2suXG5cdCAqXG5cdCAqIEBwYXJhbSB7KEludGVycG9sYXRlTGluZWFyfEludGVycG9sYXRlRGlzY3JldGV8SW50ZXJwb2xhdGVTbW9vdGgpfSBpbnRlcnBvbGF0aW9uIC0gVGhlIGludGVycG9sYXRpb24gdHlwZS5cblx0ICogQHJldHVybiB7S2V5ZnJhbWVUcmFja30gQSByZWZlcmVuY2UgdG8gdGhpcyBrZXlmcmFtZSB0cmFjay5cblx0ICovXG5cdHNldEludGVycG9sYXRpb24oIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRsZXQgZmFjdG9yeU1ldGhvZDtcblxuXHRcdHN3aXRjaCAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVEaXNjcmV0ZTpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZUxpbmVhcjpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVTbW9vdGg6XG5cblx0XHRcdFx0ZmFjdG9yeU1ldGhvZCA9IHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmYWN0b3J5TWV0aG9kID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG1lc3NhZ2UgPSAndW5zdXBwb3J0ZWQgaW50ZXJwb2xhdGlvbiBmb3IgJyArXG5cdFx0XHRcdHRoaXMuVmFsdWVUeXBlTmFtZSArICcga2V5ZnJhbWUgdHJhY2sgbmFtZWQgJyArIHRoaXMubmFtZTtcblxuXHRcdFx0aWYgKCB0aGlzLmNyZWF0ZUludGVycG9sYW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gZmFsbCBiYWNrIHRvIGRlZmF1bHQsIHVubGVzcyB0aGUgZGVmYXVsdCBpdHNlbGYgaXMgbWVzc2VkIHVwXG5cdFx0XHRcdGlmICggaW50ZXJwb2xhdGlvbiAhPT0gdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApIHtcblxuXHRcdFx0XHRcdHRoaXMuc2V0SW50ZXJwb2xhdGlvbiggdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIG1lc3NhZ2UgKTsgLy8gZmF0YWwsIGluIHRoaXMgY2FzZVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5LZXlmcmFtZVRyYWNrOicsIG1lc3NhZ2UgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9IGZhY3RvcnlNZXRob2Q7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgaW50ZXJwb2xhdGlvbiB0eXBlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHsoSW50ZXJwb2xhdGVMaW5lYXJ8SW50ZXJwb2xhdGVEaXNjcmV0ZXxJbnRlcnBvbGF0ZVNtb290aCl9IFRoZSBpbnRlcnBvbGF0aW9uIHR5cGUuXG5cdCAqL1xuXHRnZXRJbnRlcnBvbGF0aW9uKCkge1xuXG5cdFx0c3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcblxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSB2YWx1ZSBzaXplLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSB2YWx1ZSBzaXplLlxuXHQgKi9cblx0Z2V0VmFsdWVTaXplKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aCAvIHRoaXMudGltZXMubGVuZ3RoO1xuXG5cdH1cblxuXHQvKipcblx0ICogTW92ZXMgYWxsIGtleWZyYW1lcyBlaXRoZXIgZm9yd2FyZCBvciBiYWNrd2FyZCBpbiB0aW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGltZU9mZnNldCAtIFRoZSBvZmZzZXQgdG8gbW92ZSB0aGUgdGltZSB2YWx1ZXMuXG5cdCAqIEByZXR1cm4ge0tleWZyYW1lVHJhY2t9IEEgcmVmZXJlbmNlIHRvIHRoaXMga2V5ZnJhbWUgdHJhY2suXG5cdCAqL1xuXHRzaGlmdCggdGltZU9mZnNldCApIHtcblxuXHRcdGlmICggdGltZU9mZnNldCAhPT0gMC4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICs9IHRpbWVPZmZzZXQ7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2NhbGUgYWxsIGtleWZyYW1lIHRpbWVzIGJ5IGEgZmFjdG9yICh1c2VmdWwgZm9yIGZyYW1lIC0gc2Vjb25kcyBjb252ZXJzaW9ucykuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lU2NhbGUgLSBUaGUgdGltZSBzY2FsZS5cblx0ICogQHJldHVybiB7S2V5ZnJhbWVUcmFja30gQSByZWZlcmVuY2UgdG8gdGhpcyBrZXlmcmFtZSB0cmFjay5cblx0ICovXG5cdHNjYWxlKCB0aW1lU2NhbGUgKSB7XG5cblx0XHRpZiAoIHRpbWVTY2FsZSAhPT0gMS4wICkge1xuXG5cdFx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRpbWVzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR0aW1lc1sgaSBdICo9IHRpbWVTY2FsZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGtleWZyYW1lcyBiZWZvcmUgYW5kIGFmdGVyIGFuaW1hdGlvbiB3aXRob3V0IGNoYW5naW5nIGFueSB2YWx1ZXMgd2l0aGluIHRoZSBkZWZpbmVkIHRpbWUgcmFuZ2UuXG5cdCAqXG5cdCAqIE5vdGU6IFRoZSBtZXRob2QgZG9lcyBub3Qgc2hpZnQgYXJvdW5kIGtleXMgdG8gdGhlIHN0YXJ0IG9mIHRoZSB0cmFjayB0aW1lLCBiZWNhdXNlIGZvciBpbnRlcnBvbGF0ZWRcblx0ICoga2V5cyB0aGlzIHdpbGwgY2hhbmdlIHRoZWlyIHZhbHVlc1xuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRUaW1lIC0gVGhlIHN0YXJ0IHRpbWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBlbmRUaW1lIC0gVGhlIGVuZCB0aW1lLlxuXHQgKiBAcmV0dXJuIHtLZXlmcmFtZVRyYWNrfSBBIHJlZmVyZW5jZSB0byB0aGlzIGtleWZyYW1lIHRyYWNrLlxuXHQgKi9cblx0dHJpbSggc3RhcnRUaW1lLCBlbmRUaW1lICkge1xuXG5cdFx0Y29uc3QgdGltZXMgPSB0aGlzLnRpbWVzLFxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGg7XG5cblx0XHRsZXQgZnJvbSA9IDAsXG5cdFx0XHR0byA9IG5LZXlzIC0gMTtcblxuXHRcdHdoaWxlICggZnJvbSAhPT0gbktleXMgJiYgdGltZXNbIGZyb20gXSA8IHN0YXJ0VGltZSApIHtcblxuXHRcdFx0KysgZnJvbTtcblxuXHRcdH1cblxuXHRcdHdoaWxlICggdG8gIT09IC0xICYmIHRpbWVzWyB0byBdID4gZW5kVGltZSApIHtcblxuXHRcdFx0LS0gdG87XG5cblx0XHR9XG5cblx0XHQrKyB0bzsgLy8gaW5jbHVzaXZlIC0+IGV4Y2x1c2l2ZSBib3VuZFxuXG5cdFx0aWYgKCBmcm9tICE9PSAwIHx8IHRvICE9PSBuS2V5cyApIHtcblxuXHRcdFx0Ly8gZW1wdHkgdHJhY2tzIGFyZSBmb3JiaWRkZW4sIHNvIGtlZXAgYXQgbGVhc3Qgb25lIGtleWZyYW1lXG5cdFx0XHRpZiAoIGZyb20gPj0gdG8gKSB7XG5cblx0XHRcdFx0dG8gPSBNYXRoLm1heCggdG8sIDEgKTtcblx0XHRcdFx0ZnJvbSA9IHRvIC0gMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzdHJpZGUgPSB0aGlzLmdldFZhbHVlU2l6ZSgpO1xuXHRcdFx0dGhpcy50aW1lcyA9IHRpbWVzLnNsaWNlKCBmcm9tLCB0byApO1xuXHRcdFx0dGhpcy52YWx1ZXMgPSB0aGlzLnZhbHVlcy5zbGljZSggZnJvbSAqIHN0cmlkZSwgdG8gKiBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybXMgbWluaW1hbCB2YWxpZGF0aW9uIG9uIHRoZSBrZXlmcmFtZSB0cmFjay4gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlc1xuXHQgKiBhcmUgdmFsaWQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGtleWZyYW1lcyBhcmUgdmFsaWQgb3Igbm90LlxuXHQgKi9cblx0dmFsaWRhdGUoKSB7XG5cblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Y29uc3QgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcblx0XHRpZiAoIHZhbHVlU2l6ZSAtIE1hdGguZmxvb3IoIHZhbHVlU2l6ZSApICE9PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogSW52YWxpZCB2YWx1ZSBzaXplIGluIHRyYWNrLicsIHRoaXMgKTtcblx0XHRcdHZhbGlkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0aW1lcyA9IHRoaXMudGltZXMsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnZhbHVlcyxcblxuXHRcdFx0bktleXMgPSB0aW1lcy5sZW5ndGg7XG5cblx0XHRpZiAoIG5LZXlzID09PSAwICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVHJhY2sgaXMgZW1wdHkuJywgdGhpcyApO1xuXHRcdFx0dmFsaWQgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGxldCBwcmV2VGltZSA9IG51bGw7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5LZXlzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjdXJyVGltZSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdGlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy4nLCB0aGlzLCBpLCBjdXJyVGltZSwgcHJldlRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcblxuXHRcdH1cblxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggaXNUeXBlZEFycmF5KCB2YWx1ZXMgKSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggaXNOYU4oIHZhbHVlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBWYWx1ZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE9wdGltaXplcyB0aGlzIGtleWZyYW1lIHRyYWNrIGJ5IHJlbW92aW5nIGVxdWl2YWxlbnQgc2VxdWVudGlhbCBrZXlzICh3aGljaCBhcmVcblx0ICogY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXMpLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25DbGlwfSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBjbGlwLlxuXHQgKi9cblx0b3B0aW1pemUoKSB7XG5cblx0XHQvLyAoMCwwLDAsMCwxLDEsMSwwLDAsMCwwLDAsMCwwKSAtLT4gKDAsMCwxLDEsMCwwKVxuXG5cdFx0Ly8gdGltZXMgb3IgdmFsdWVzIG1heSBiZSBzaGFyZWQgd2l0aCBvdGhlciB0cmFja3MsIHNvIG92ZXJ3cml0aW5nIGlzIHVuc2FmZVxuXHRcdGNvbnN0IHRpbWVzID0gdGhpcy50aW1lcy5zbGljZSgpLFxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMuc2xpY2UoKSxcblx0XHRcdHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksXG5cblx0XHRcdHNtb290aEludGVycG9sYXRpb24gPSB0aGlzLmdldEludGVycG9sYXRpb24oKSA9PT0gSW50ZXJwb2xhdGVTbW9vdGgsXG5cblx0XHRcdGxhc3RJbmRleCA9IHRpbWVzLmxlbmd0aCAtIDE7XG5cblx0XHRsZXQgd3JpdGVJbmRleCA9IDE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCBsYXN0SW5kZXg7ICsrIGkgKSB7XG5cblx0XHRcdGxldCBrZWVwID0gZmFsc2U7XG5cblx0XHRcdGNvbnN0IHRpbWUgPSB0aW1lc1sgaSBdO1xuXHRcdFx0Y29uc3QgdGltZU5leHQgPSB0aW1lc1sgaSArIDEgXTtcblxuXHRcdFx0Ly8gcmVtb3ZlIGFkamFjZW50IGtleWZyYW1lcyBzY2hlZHVsZWQgYXQgdGhlIHNhbWUgdGltZVxuXG5cdFx0XHRpZiAoIHRpbWUgIT09IHRpbWVOZXh0ICYmICggaSAhPT0gMSB8fCB0aW1lICE9PSB0aW1lc1sgMCBdICkgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHNtb290aEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHQvLyByZW1vdmUgdW5uZWNlc3Nhcnkga2V5ZnJhbWVzIHNhbWUgYXMgdGhlaXIgbmVpZ2hib3JzXG5cblx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBpICogc3RyaWRlLFxuXHRcdFx0XHRcdFx0b2Zmc2V0UCA9IG9mZnNldCAtIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldE4gPSBvZmZzZXQgKyBzdHJpZGU7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogIT09IHN0cmlkZTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIG9mZnNldCArIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB2YWx1ZSAhPT0gdmFsdWVzWyBvZmZzZXRQICsgaiBdIHx8XG5cdFx0XHRcdFx0XHRcdHZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldE4gKyBqIF0gKSB7XG5cblx0XHRcdFx0XHRcdFx0a2VlcCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGtlZXAgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBpbi1wbGFjZSBjb21wYWN0aW9uXG5cblx0XHRcdGlmICgga2VlcCApIHtcblxuXHRcdFx0XHRpZiAoIGkgIT09IHdyaXRlSW5kZXggKSB7XG5cblx0XHRcdFx0XHR0aW1lc1sgd3JpdGVJbmRleCBdID0gdGltZXNbIGkgXTtcblxuXHRcdFx0XHRcdGNvbnN0IHJlYWRPZmZzZXQgPSBpICogc3RyaWRlLFxuXHRcdFx0XHRcdFx0d3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCsrIHdyaXRlSW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGZsdXNoIGxhc3Qga2V5ZnJhbWUgKGNvbXBhY3Rpb24gbG9va3MgYWhlYWQpXG5cblx0XHRpZiAoIGxhc3RJbmRleCA+IDAgKSB7XG5cblx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgbGFzdEluZGV4IF07XG5cblx0XHRcdGZvciAoIGxldCByZWFkT2Zmc2V0ID0gbGFzdEluZGV4ICogc3RyaWRlLCB3cml0ZU9mZnNldCA9IHdyaXRlSW5kZXggKiBzdHJpZGUsIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSB0aW1lcy5zbGljZSggMCwgd3JpdGVJbmRleCApO1xuXHRcdFx0dGhpcy52YWx1ZXMgPSB2YWx1ZXMuc2xpY2UoIDAsIHdyaXRlSW5kZXggKiBzdHJpZGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSB0aW1lcztcblx0XHRcdHRoaXMudmFsdWVzID0gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IGtleWZyYW1lIHRyYWNrIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0tleWZyYW1lVHJhY2t9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0Y29uc3QgdGltZXMgPSB0aGlzLnRpbWVzLnNsaWNlKCk7XG5cdFx0Y29uc3QgdmFsdWVzID0gdGhpcy52YWx1ZXMuc2xpY2UoKTtcblxuXHRcdGNvbnN0IFR5cGVkS2V5ZnJhbWVUcmFjayA9IHRoaXMuY29uc3RydWN0b3I7XG5cdFx0Y29uc3QgdHJhY2sgPSBuZXcgVHlwZWRLZXlmcmFtZVRyYWNrKCB0aGlzLm5hbWUsIHRpbWVzLCB2YWx1ZXMgKTtcblxuXHRcdC8vIEludGVycG9sYW50IGFyZ3VtZW50IHRvIGNvbnN0cnVjdG9yIGlzIG5vdCBzYXZlZCwgc28gY29weSB0aGUgZmFjdG9yeSBtZXRob2QgZGlyZWN0bHkuXG5cdFx0dHJhY2suY3JlYXRlSW50ZXJwb2xhbnQgPSB0aGlzLmNyZWF0ZUludGVycG9sYW50O1xuXG5cdFx0cmV0dXJuIHRyYWNrO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSB2YWx1ZSB0eXBlIG5hbWUuXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBkZWZhdWx0ICcnXG4gKi9cbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnJztcblxuLyoqXG4gKiBUaGUgdGltZSBidWZmZXIgdHlwZSBvZiB0aGlzIGtleWZyYW1lIHRyYWNrLlxuICpcbiAqIEB0eXBlIHtUeXBlZEFycmF5fEFycmF5fVxuICogQGRlZmF1bHQgRmxvYXQzMkFycmF5LmNvbnN0cnVjdG9yXG4gKi9cbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlRpbWVCdWZmZXJUeXBlID0gRmxvYXQzMkFycmF5O1xuXG4vKipcbiAqIFRoZSB2YWx1ZSBidWZmZXIgdHlwZSBvZiB0aGlzIGtleWZyYW1lIHRyYWNrLlxuICpcbiAqIEB0eXBlIHtUeXBlZEFycmF5fEFycmF5fVxuICogQGRlZmF1bHQgRmxvYXQzMkFycmF5LmNvbnN0cnVjdG9yXG4gKi9cbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlQnVmZmVyVHlwZSA9IEZsb2F0MzJBcnJheTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBpbnRlcnBvbGF0aW9uIHR5cGUgb2YgdGhpcyBrZXlmcmFtZSB0cmFjay5cbiAqXG4gKiBAdHlwZSB7KEludGVycG9sYXRlTGluZWFyfEludGVycG9sYXRlRGlzY3JldGV8SW50ZXJwb2xhdGVTbW9vdGgpfVxuICogQGRlZmF1bHQgSW50ZXJwb2xhdGVMaW5lYXJcbiAqL1xuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuRGVmYXVsdEludGVycG9sYXRpb24gPSBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuLyoqXG4gKiBBIHRyYWNrIGZvciBib29sZWFuIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKiBAYXVnbWVudHMgS2V5ZnJhbWVUcmFja1xuICovXG5jbGFzcyBCb29sZWFuS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGJvb2xlYW4ga2V5ZnJhbWUgdHJhY2suXG5cdCAqXG5cdCAqIFRoaXMga2V5ZnJhbWUgdHJhY2sgdHlwZSBoYXMgbm8gYGludGVycG9sYXRpb25gIHBhcmFtZXRlciBiZWNhdXNlIHRoZVxuXHQgKiBpbnRlcnBvbGF0aW9uIGlzIGFsd2F5cyBkaXNjcmV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUga2V5ZnJhbWUgdHJhY2sncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gQSBsaXN0IG9mIGtleWZyYW1lIHRpbWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB2YWx1ZXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGltZXMsIHZhbHVlcyApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhlIHZhbHVlIHR5cGUgbmFtZS5cbiAqXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQGRlZmF1bHQgJ2Jvb2wnXG4gKi9cbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZVR5cGVOYW1lID0gJ2Jvb2wnO1xuXG4vKipcbiAqIFRoZSB2YWx1ZSBidWZmZXIgdHlwZSBvZiB0aGlzIGtleWZyYW1lIHRyYWNrLlxuICpcbiAqIEB0eXBlIHtUeXBlZEFycmF5fEFycmF5fVxuICogQGRlZmF1bHQgQXJyYXkuY29uc3RydWN0b3JcbiAqL1xuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlQnVmZmVyVHlwZSA9IEFycmF5O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGludGVycG9sYXRpb24gdHlwZSBvZiB0aGlzIGtleWZyYW1lIHRyYWNrLlxuICpcbiAqIEB0eXBlIHsoSW50ZXJwb2xhdGVMaW5lYXJ8SW50ZXJwb2xhdGVEaXNjcmV0ZXxJbnRlcnBvbGF0ZVNtb290aCl9XG4gKiBAZGVmYXVsdCBJbnRlcnBvbGF0ZURpc2NyZXRlXG4gKi9cbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5EZWZhdWx0SW50ZXJwb2xhdGlvbiA9IEludGVycG9sYXRlRGlzY3JldGU7XG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyID0gdW5kZWZpbmVkO1xuQm9vbGVhbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHRyYWNrIGZvciBjb2xvciBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICogQGF1Z21lbnRzIEtleWZyYW1lVHJhY2tcbiAqL1xuY2xhc3MgQ29sb3JLZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29sb3Iga2V5ZnJhbWUgdHJhY2suXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGtleWZyYW1lIHRyYWNrJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB0aW1lcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB0aW1lcy5cblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB2YWx1ZXMgLSBBIGxpc3Qgb2Yga2V5ZnJhbWUgdmFsdWVzLlxuXHQgKiBAcGFyYW0geyhJbnRlcnBvbGF0ZUxpbmVhcnxJbnRlcnBvbGF0ZURpc2NyZXRlfEludGVycG9sYXRlU21vb3RoKX0gW2ludGVycG9sYXRpb25dIC0gVGhlIGludGVycG9sYXRpb24gdHlwZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0c3VwZXIoIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGUgdmFsdWUgdHlwZSBuYW1lLlxuICpcbiAqIEB0eXBlIHtTdHJpbmd9XG4gKiBAZGVmYXVsdCAnY29sb3InXG4gKi9cbkNvbG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdjb2xvcic7XG5cbi8qKlxuICogQSB0cmFjayBmb3IgbnVtZXJpYyBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICogQGF1Z21lbnRzIEtleWZyYW1lVHJhY2tcbiAqL1xuY2xhc3MgTnVtYmVyS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IG51bWJlciBrZXlmcmFtZSB0cmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUga2V5ZnJhbWUgdHJhY2sncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gQSBsaXN0IG9mIGtleWZyYW1lIHRpbWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7KEludGVycG9sYXRlTGluZWFyfEludGVycG9sYXRlRGlzY3JldGV8SW50ZXJwb2xhdGVTbW9vdGgpfSBbaW50ZXJwb2xhdGlvbl0gLSBUaGUgaW50ZXJwb2xhdGlvbiB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSB2YWx1ZSB0eXBlIG5hbWUuXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBkZWZhdWx0ICdudW1iZXInXG4gKi9cbk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAnbnVtYmVyJztcblxuLyoqXG4gKiBTcGhlcmljYWwgbGluZWFyIHVuaXQgcXVhdGVybmlvbiBpbnRlcnBvbGFudC5cbiAqXG4gKiBAYXVnbWVudHMgSW50ZXJwb2xhbnRcbiAqL1xuY2xhc3MgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IGV4dGVuZHMgSW50ZXJwb2xhbnQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFNMRVJQIGludGVycG9sYW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IHBhcmFtZXRlclBvc2l0aW9ucyAtIFRoZSBwYXJhbWV0ZXIgcG9zaXRpb25zIGhvbGQgdGhlIGludGVycG9sYXRpb24gZmFjdG9ycy5cblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBzYW1wbGVWYWx1ZXMgLSBUaGUgc2FtcGxlIHZhbHVlcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHNhbXBsZVNpemUgLSBUaGUgc2FtcGxlIHNpemVcblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBbcmVzdWx0QnVmZmVyXSAtIFRoZSByZXN1bHQgYnVmZmVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0XHRzdXBlciggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG5cdH1cblxuXHRpbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdGFscGhhID0gKCB0IC0gdDAgKSAvICggdDEgLSB0MCApO1xuXG5cdFx0bGV0IG9mZnNldCA9IGkxICogc3RyaWRlO1xuXG5cdFx0Zm9yICggbGV0IGVuZCA9IG9mZnNldCArIHN0cmlkZTsgb2Zmc2V0ICE9PSBlbmQ7IG9mZnNldCArPSA0ICkge1xuXG5cdFx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggcmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgdHJhY2sgZm9yIFF1YXRlcm5pb24ga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqIEBhdWdtZW50cyBLZXlmcmFtZVRyYWNrXG4gKi9cbmNsYXNzIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrIGV4dGVuZHMgS2V5ZnJhbWVUcmFjayB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUXVhdGVybmlvbiBrZXlmcmFtZSB0cmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUga2V5ZnJhbWUgdHJhY2sncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gQSBsaXN0IG9mIGtleWZyYW1lIHRpbWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7KEludGVycG9sYXRlTGluZWFyfEludGVycG9sYXRlRGlzY3JldGV8SW50ZXJwb2xhdGVTbW9vdGgpfSBbaW50ZXJwb2xhdGlvbl0gLSBUaGUgaW50ZXJwb2xhdGlvbiB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogT3ZlcndyaXR0ZW4gc28gdGhlIG1ldGhvZCByZXR1cm5zIFF1YXRlcm5pb24gYmFzZWQgaW50ZXJwb2xhbnQuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBbcmVzdWx0XSAtIFRoZSByZXN1bHQgYnVmZmVyLlxuXHQgKiBAcmV0dXJuIHtRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnR9IFRoZSBuZXcgaW50ZXJwb2xhbnQuXG5cdCAqL1xuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIoIHJlc3VsdCApIHtcblxuXHRcdHJldHVybiBuZXcgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhlIHZhbHVlIHR5cGUgbmFtZS5cbiAqXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQGRlZmF1bHQgJ3F1YXRlcm5pb24nXG4gKi9cblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZS5WYWx1ZVR5cGVOYW1lID0gJ3F1YXRlcm5pb24nO1xuLy8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuLy8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkO1xuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHRyYWNrIGZvciBzdHJpbmcga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqIEBhdWdtZW50cyBLZXlmcmFtZVRyYWNrXG4gKi9cbmNsYXNzIFN0cmluZ0tleWZyYW1lVHJhY2sgZXh0ZW5kcyBLZXlmcmFtZVRyYWNrIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzdHJpbmcga2V5ZnJhbWUgdHJhY2suXG5cdCAqXG5cdCAqIFRoaXMga2V5ZnJhbWUgdHJhY2sgdHlwZSBoYXMgbm8gYGludGVycG9sYXRpb25gIHBhcmFtZXRlciBiZWNhdXNlIHRoZVxuXHQgKiBpbnRlcnBvbGF0aW9uIGlzIGFsd2F5cyBkaXNjcmV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUga2V5ZnJhbWUgdHJhY2sncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gQSBsaXN0IG9mIGtleWZyYW1lIHRpbWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB2YWx1ZXMuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbmFtZSwgdGltZXMsIHZhbHVlcyApIHtcblxuXHRcdHN1cGVyKCBuYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhlIHZhbHVlIHR5cGUgbmFtZS5cbiAqXG4gKiBAdHlwZSB7U3RyaW5nfVxuICogQGRlZmF1bHQgJ3N0cmluZydcbiAqL1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVUeXBlTmFtZSA9ICdzdHJpbmcnO1xuXG4vKipcbiAqIFRoZSB2YWx1ZSBidWZmZXIgdHlwZSBvZiB0aGlzIGtleWZyYW1lIHRyYWNrLlxuICpcbiAqIEB0eXBlIHtUeXBlZEFycmF5fEFycmF5fVxuICogQGRlZmF1bHQgQXJyYXkuY29uc3RydWN0b3JcbiAqL1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuVmFsdWVCdWZmZXJUeXBlID0gQXJyYXk7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgaW50ZXJwb2xhdGlvbiB0eXBlIG9mIHRoaXMga2V5ZnJhbWUgdHJhY2suXG4gKlxuICogQHR5cGUgeyhJbnRlcnBvbGF0ZUxpbmVhcnxJbnRlcnBvbGF0ZURpc2NyZXRlfEludGVycG9sYXRlU21vb3RoKX1cbiAqIEBkZWZhdWx0IEludGVycG9sYXRlRGlzY3JldGVcbiAqL1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuRGVmYXVsdEludGVycG9sYXRpb24gPSBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyID0gdW5kZWZpbmVkO1xuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoID0gdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgdHJhY2sgZm9yIHZlY3RvciBrZXlmcmFtZSB2YWx1ZXMuXG4gKlxuICogQGF1Z21lbnRzIEtleWZyYW1lVHJhY2tcbiAqL1xuY2xhc3MgVmVjdG9yS2V5ZnJhbWVUcmFjayBleHRlbmRzIEtleWZyYW1lVHJhY2sge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHZlY3RvciBrZXlmcmFtZSB0cmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUga2V5ZnJhbWUgdHJhY2sncyBuYW1lLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHRpbWVzIC0gQSBsaXN0IG9mIGtleWZyYW1lIHRpbWVzLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHZhbHVlcyAtIEEgbGlzdCBvZiBrZXlmcmFtZSB2YWx1ZXMuXG5cdCAqIEBwYXJhbSB7KEludGVycG9sYXRlTGluZWFyfEludGVycG9sYXRlRGlzY3JldGV8SW50ZXJwb2xhdGVTbW9vdGgpfSBbaW50ZXJwb2xhdGlvbl0gLSBUaGUgaW50ZXJwb2xhdGlvbiB0eXBlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRzdXBlciggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSB2YWx1ZSB0eXBlIG5hbWUuXG4gKlxuICogQHR5cGUge1N0cmluZ31cbiAqIEBkZWZhdWx0ICd2ZWN0b3InXG4gKi9cblZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlLlZhbHVlVHlwZU5hbWUgPSAndmVjdG9yJztcblxuLyoqXG4gKiBBIHJldXNhYmxlIHNldCBvZiBrZXlmcmFtZSB0cmFja3Mgd2hpY2ggcmVwcmVzZW50IGFuIGFuaW1hdGlvbi5cbiAqL1xuY2xhc3MgQW5pbWF0aW9uQ2xpcCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYW5pbWF0aW9uIGNsaXAuXG5cdCAqXG5cdCAqIE5vdGU6IEluc3RlYWQgb2YgaW5zdGFudGlhdGluZyBhbiBBbmltYXRpb25DbGlwIGRpcmVjdGx5IHdpdGggdGhlIGNvbnN0cnVjdG9yLCB5b3UgY2FuXG5cdCAqIHVzZSB0aGUgc3RhdGljIGludGVyZmFjZSBvZiB0aGlzIGNsYXNzIGZvciBjcmVhdGluZyBjbGlwcy4gSW4gbW9zdCBjYXNlcyB0aG91Z2gsIGFuaW1hdGlvbiBjbGlwc1xuXHQgKiB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgY3JlYXRlZCBieSBsb2FkZXJzIHdoZW4gaW1wb3J0aW5nIGFuaW1hdGVkIDNEIGFzc2V0cy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lPScnXSAtIFRoZSBjbGlwJ3MgbmFtZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkdXJhdGlvbj0tMV0gLSBUaGUgY2xpcCdzIGR1cmF0aW9uIGluIHNlY29uZHMuIElmIGEgbmVnYXRpdmUgdmFsdWUgaXMgcGFzc2VkLFxuXHQgKiB0aGUgZHVyYXRpb24gd2lsbCBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIHBhc3NlZCBrZXlmcmFtZXMuXG5cdCAqIEBwYXJhbSB7QXJyYXk8S2V5ZnJhbWVUcmFjaz59IHRyYWNrcyAtIEFuIGFycmF5IG9mIGtleWZyYW1lIHRyYWNrcy5cblx0ICogQHBhcmFtIHsoTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlfEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlKX0gW2JsZW5kTW9kZT1Ob3JtYWxBbmltYXRpb25CbGVuZE1vZGVdIC0gRGVmaW5lcyBob3cgdGhlIGFuaW1hdGlvblxuXHQgKiBpcyBibGVuZGVkL2NvbWJpbmVkIHdoZW4gdHdvIG9yIG1vcmUgYW5pbWF0aW9ucyBhcmUgc2ltdWx0YW5lb3VzbHkgcGxheWVkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG5hbWUgPSAnJywgZHVyYXRpb24gPSAtMSwgdHJhY2tzID0gW10sIGJsZW5kTW9kZSA9IE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjbGlwJ3MgbmFtZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdC8qKlxuXHRcdCAqICBBbiBhcnJheSBvZiBrZXlmcmFtZSB0cmFja3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8S2V5ZnJhbWVUcmFjaz59XG5cdFx0ICovXG5cdFx0dGhpcy50cmFja3MgPSB0cmFja3M7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2xpcCdzIGR1cmF0aW9uIGluIHNlY29uZHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgaG93IHRoZSBhbmltYXRpb24gaXMgYmxlbmRlZC9jb21iaW5lZCB3aGVuIHR3byBvciBtb3JlIGFuaW1hdGlvbnNcblx0XHQgKiBhcmUgc2ltdWx0YW5lb3VzbHkgcGxheWVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhOb3JtYWxBbmltYXRpb25CbGVuZE1vZGV8QWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUpfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmxlbmRNb2RlID0gYmxlbmRNb2RlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIFVVSUQgb2YgdGhlIGFuaW1hdGlvbiBjbGlwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKTtcblxuXHRcdC8vIHRoaXMgbWVhbnMgaXQgc2hvdWxkIGZpZ3VyZSBvdXQgaXRzIGR1cmF0aW9uIGJ5IHNjYW5uaW5nIHRoZSB0cmFja3Ncblx0XHRpZiAoIHRoaXMuZHVyYXRpb24gPCAwICkge1xuXG5cdFx0XHR0aGlzLnJlc2V0RHVyYXRpb24oKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBhbmltYXRpb24gY2xpcCBmcm9tIHRoZSBnaXZlbiBKU09OLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIHNlcmlhbGl6ZWQgYW5pbWF0aW9uIGNsaXAuXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkNsaXB9IFRoZSBuZXcgYW5pbWF0aW9uIGNsaXAuXG5cdCAqL1xuXHRzdGF0aWMgcGFyc2UoIGpzb24gKSB7XG5cblx0XHRjb25zdCB0cmFja3MgPSBbXSxcblx0XHRcdGpzb25UcmFja3MgPSBqc29uLnRyYWNrcyxcblx0XHRcdGZyYW1lVGltZSA9IDEuMCAvICgganNvbi5mcHMgfHwgMS4wICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBqc29uVHJhY2tzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dHJhY2tzLnB1c2goIHBhcnNlS2V5ZnJhbWVUcmFjaygganNvblRyYWNrc1sgaSBdICkuc2NhbGUoIGZyYW1lVGltZSApICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjbGlwID0gbmV3IHRoaXMoIGpzb24ubmFtZSwganNvbi5kdXJhdGlvbiwgdHJhY2tzLCBqc29uLmJsZW5kTW9kZSApO1xuXHRcdGNsaXAudXVpZCA9IGpzb24udXVpZDtcblxuXHRcdHJldHVybiBjbGlwO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGUgZ2l2ZW4gYW5pbWF0aW9uIGNsaXAgaW50byBKU09OLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7QW5pbWF0aW9uQ2xpcH0gY2xpcCAtIFRoZSBhbmltYXRpb24gY2xpcCB0byBzZXJpYWxpemUuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gVGhlIEpTT04gb2JqZWN0LlxuXHQgKi9cblx0c3RhdGljIHRvSlNPTiggY2xpcCApIHtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdLFxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xuXG5cdFx0Y29uc3QganNvbiA9IHtcblxuXHRcdFx0J25hbWUnOiBjbGlwLm5hbWUsXG5cdFx0XHQnZHVyYXRpb24nOiBjbGlwLmR1cmF0aW9uLFxuXHRcdFx0J3RyYWNrcyc6IHRyYWNrcyxcblx0XHRcdCd1dWlkJzogY2xpcC51dWlkLFxuXHRcdFx0J2JsZW5kTW9kZSc6IGNsaXAuYmxlbmRNb2RlXG5cblx0XHR9O1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gY2xpcFRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCBLZXlmcmFtZVRyYWNrLnRvSlNPTiggY2xpcFRyYWNrc1sgaSBdICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBqc29uO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBhbmltYXRpb24gY2xpcCBmcm9tIHRoZSBwYXNzZWQgbW9ycGggdGFyZ2V0cyBhcnJheSBvZiBhXG5cdCAqIGdlb21ldHJ5LCB0YWtpbmcgYSBuYW1lIGFuZCB0aGUgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kLlxuXHQgKlxuXHQgKiBOb3RlOiBUaGUgZnBzIHBhcmFtZXRlciBpcyByZXF1aXJlZCwgYnV0IHRoZSBhbmltYXRpb24gc3BlZWQgY2FuIGJlXG5cdCAqIG92ZXJyaWRkZW4gdmlhIHtAbGluayBBbmltYXRpb25BY3Rpb24jc2V0RHVyYXRpb259LlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiBjbGlwLlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IG1vcnBoVGFyZ2V0U2VxdWVuY2UgLSBBIHNlcXVlbmNlIG9mIG1vcnBoIHRhcmdldHMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmcHMgLSBUaGUgRnJhbWVzLVBlci1TZWNvbmQgdmFsdWUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gbm9Mb29wIC0gV2hldGhlciB0aGUgY2xpcCBzaG91bGQgYmUgbm8gbG9vcCBvciBub3QuXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkNsaXB9IFRoZSBuZXcgYW5pbWF0aW9uIGNsaXAuXG5cdCAqL1xuXHRzdGF0aWMgQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIG1vcnBoVGFyZ2V0U2VxdWVuY2UsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0Y29uc3QgbnVtTW9ycGhUYXJnZXRzID0gbW9ycGhUYXJnZXRTZXF1ZW5jZS5sZW5ndGg7XG5cdFx0Y29uc3QgdHJhY2tzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBudW1Nb3JwaFRhcmdldHM7IGkgKysgKSB7XG5cblx0XHRcdGxldCB0aW1lcyA9IFtdO1xuXHRcdFx0bGV0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHR0aW1lcy5wdXNoKFxuXHRcdFx0XHQoIGkgKyBudW1Nb3JwaFRhcmdldHMgLSAxICkgJSBudW1Nb3JwaFRhcmdldHMsXG5cdFx0XHRcdGksXG5cdFx0XHRcdCggaSArIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyApO1xuXG5cdFx0XHR2YWx1ZXMucHVzaCggMCwgMSwgMCApO1xuXG5cdFx0XHRjb25zdCBvcmRlciA9IGdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cdFx0XHR0aW1lcyA9IHNvcnRlZEFycmF5KCB0aW1lcywgMSwgb3JkZXIgKTtcblx0XHRcdHZhbHVlcyA9IHNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXG5cdFx0XHRpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrcy5wdXNoKFxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHQnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1snICsgbW9ycGhUYXJnZXRTZXF1ZW5jZVsgaSBdLm5hbWUgKyAnXScsXG5cdFx0XHRcdFx0dGltZXMsIHZhbHVlc1xuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyB0aGlzKCBuYW1lLCAtMSwgdHJhY2tzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2hlcyBmb3IgYW4gYW5pbWF0aW9uIGNsaXAgYnkgbmFtZSwgdGFraW5nIGFzIGl0cyBmaXJzdCBwYXJhbWV0ZXJcblx0ICogZWl0aGVyIGFuIGFycmF5IG9mIGNsaXBzLCBvciBhIG1lc2ggb3IgZ2VvbWV0cnkgdGhhdCBjb250YWlucyBhblxuXHQgKiBhcnJheSBuYW1lZCBcImFuaW1hdGlvbnNcIiBwcm9wZXJ0eS5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0geyhBcnJheTxBbmltYXRpb25DbGlwPnxPYmplY3QzRCl9IG9iamVjdE9yQ2xpcEFycmF5IC0gVGhlIGFycmF5IG9yIG9iamVjdCB0byBzZWFyY2ggdGhyb3VnaC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSB0byBzZWFyY2ggZm9yLlxuXHQgKiBAcmV0dXJuIHs/QW5pbWF0aW9uQ2xpcH0gVGhlIGZvdW5kIGFuaW1hdGlvbiBjbGlwLiBSZXR1cm5zIGBudWxsYCBpZiBubyBjbGlwIGhhcyBiZWVuIGZvdW5kLlxuXHQgKi9cblx0c3RhdGljIGZpbmRCeU5hbWUoIG9iamVjdE9yQ2xpcEFycmF5LCBuYW1lICkge1xuXG5cdFx0bGV0IGNsaXBBcnJheSA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXG5cdFx0aWYgKCAhIEFycmF5LmlzQXJyYXkoIG9iamVjdE9yQ2xpcEFycmF5ICkgKSB7XG5cblx0XHRcdGNvbnN0IG8gPSBvYmplY3RPckNsaXBBcnJheTtcblx0XHRcdGNsaXBBcnJheSA9IG8uZ2VvbWV0cnkgJiYgby5nZW9tZXRyeS5hbmltYXRpb25zIHx8IG8uYW5pbWF0aW9ucztcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNsaXBBcnJheS5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggY2xpcEFycmF5WyBpIF0ubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gY2xpcEFycmF5WyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSBvZiBuZXcgQW5pbWF0aW9uQ2xpcHMgY3JlYXRlZCBmcm9tIHRoZSBtb3JwaCB0YXJnZXRcblx0ICogc2VxdWVuY2VzIG9mIGEgZ2VvbWV0cnksIHRyeWluZyB0byBzb3J0IG1vcnBoIHRhcmdldCBuYW1lcyBpbnRvXG5cdCAqIGFuaW1hdGlvbi1ncm91cC1iYXNlZCBwYXR0ZXJucyBsaWtlIFwiV2Fsa18wMDEsIFdhbGtfMDAyLCBSdW5fMDAxLCBSdW5fMDAyLi4uXCIuXG5cdCAqXG5cdCAqIFNlZSB7QGxpbmsgTUQyTG9hZGVyI3BhcnNlfSBhcyBhbiBleGFtcGxlIGZvciBob3cgdGhlIG1ldGhvZCBzaG91bGQgYmUgdXNlZC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IG1vcnBoVGFyZ2V0cyAtIEEgc2VxdWVuY2Ugb2YgbW9ycGggdGFyZ2V0cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGZwcyAtIFRoZSBGcmFtZXMtUGVyLVNlY29uZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtib29sZWFufSBub0xvb3AgLSBXaGV0aGVyIHRoZSBjbGlwIHNob3VsZCBiZSBubyBsb29wIG9yIG5vdC5cblx0ICogQHJldHVybiB7QXJyYXk8QW5pbWF0aW9uQ2xpcD59IEFuIGFycmF5IG9mIG5ldyBhbmltYXRpb24gY2xpcHMuXG5cdCAqL1xuXHRzdGF0aWMgQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMoIG1vcnBoVGFyZ2V0cywgZnBzLCBub0xvb3AgKSB7XG5cblx0XHRjb25zdCBhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyA9IHt9O1xuXG5cdFx0Ly8gdGVzdGVkIHdpdGggaHR0cHM6Ly9yZWdleDEwMS5jb20vIG9uIHRyaWNrIHNlcXVlbmNlc1xuXHRcdC8vIHN1Y2ggZmxhbWluZ29fZmx5QV8wMDMsIGZsYW1pbmdvX3J1bjFfMDAzLCBjcmRlYXRoMDA1OVxuXHRcdGNvbnN0IHBhdHRlcm4gPSAvXihbXFx3LV0qPykoW1xcZF0rKSQvO1xuXG5cdFx0Ly8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkXG5cdFx0Ly8gcGF0dGVybnMgbGlrZSBXYWxrXzAwMSwgV2Fsa18wMDIsIFJ1bl8wMDEsIFJ1bl8wMDJcblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaSBdO1xuXHRcdFx0Y29uc3QgcGFydHMgPSBtb3JwaFRhcmdldC5uYW1lLm1hdGNoKCBwYXR0ZXJuICk7XG5cblx0XHRcdGlmICggcGFydHMgJiYgcGFydHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHRjb25zdCBuYW1lID0gcGFydHNbIDEgXTtcblxuXHRcdFx0XHRsZXQgYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXTtcblxuXHRcdFx0XHRpZiAoICEgYW5pbWF0aW9uTW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0YW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXSA9IGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyA9IFtdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhbmltYXRpb25Nb3JwaFRhcmdldHMucHVzaCggbW9ycGhUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2xpcHMgPSBbXTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdGNsaXBzLnB1c2goIHRoaXMuQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0sIGZwcywgbm9Mb29wICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjbGlwcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyB0aGUgYGFuaW1hdGlvbi5oaWVyYXJjaHlgIGZvcm1hdCBhbmQgcmV0dXJucyBhIG5ldyBhbmltYXRpb24gY2xpcC5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSByMTc1LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gYW5pbWF0aW9uIC0gQSBzZXJpYWxpemVkIGFuaW1hdGlvbiBjbGlwIGFzIEpTT04uXG5cdCAqIEBwYXJhbSB7QXJyYXk8Qm9uZXM+fSBib25lcyAtIEFuIGFycmF5IG9mIGJvbmVzLlxuXHQgKiBAcmV0dXJuIHs/QW5pbWF0aW9uQ2xpcH0gVGhlIG5ldyBhbmltYXRpb24gY2xpcC5cblx0ICovXG5cdHN0YXRpYyBwYXJzZUFuaW1hdGlvbiggYW5pbWF0aW9uLCBib25lcyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IHBhcnNlQW5pbWF0aW9uKCkgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIHdpdGggcjE4NScgKTtcblxuXHRcdGlmICggISBhbmltYXRpb24gKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5BbmltYXRpb25DbGlwOiBObyBhbmltYXRpb24gaW4gSlNPTkxvYWRlciBkYXRhLicgKTtcblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYWRkTm9uZW1wdHlUcmFjayA9IGZ1bmN0aW9uICggdHJhY2tUeXBlLCB0cmFja05hbWUsIGFuaW1hdGlvbktleXMsIHByb3BlcnR5TmFtZSwgZGVzdFRyYWNrcyApIHtcblxuXHRcdFx0Ly8gb25seSByZXR1cm4gdHJhY2sgaWYgdGhlcmUgYXJlIGFjdHVhbGx5IGtleXMuXG5cdFx0XHRpZiAoIGFuaW1hdGlvbktleXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdGNvbnN0IHRpbWVzID0gW107XG5cdFx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRcdGZsYXR0ZW5KU09OKCBhbmltYXRpb25LZXlzLCB0aW1lcywgdmFsdWVzLCBwcm9wZXJ0eU5hbWUgKTtcblxuXHRcdFx0XHQvLyBlbXB0eSBrZXlzIGFyZSBmaWx0ZXJlZCBvdXQsIHNvIGNoZWNrIGFnYWluXG5cdFx0XHRcdGlmICggdGltZXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdFx0ZGVzdFRyYWNrcy5wdXNoKCBuZXcgdHJhY2tUeXBlKCB0cmFja05hbWUsIHRpbWVzLCB2YWx1ZXMgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdO1xuXG5cdFx0Y29uc3QgY2xpcE5hbWUgPSBhbmltYXRpb24ubmFtZSB8fCAnZGVmYXVsdCc7XG5cdFx0Y29uc3QgZnBzID0gYW5pbWF0aW9uLmZwcyB8fCAzMDtcblx0XHRjb25zdCBibGVuZE1vZGUgPSBhbmltYXRpb24uYmxlbmRNb2RlO1xuXG5cdFx0Ly8gYXV0b21hdGljIGxlbmd0aCBkZXRlcm1pbmF0aW9uIGluIEFuaW1hdGlvbkNsaXAuXG5cdFx0bGV0IGR1cmF0aW9uID0gYW5pbWF0aW9uLmxlbmd0aCB8fCAtMTtcblxuXHRcdGNvbnN0IGhpZXJhcmNoeVRyYWNrcyA9IGFuaW1hdGlvbi5oaWVyYXJjaHkgfHwgW107XG5cblx0XHRmb3IgKCBsZXQgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xuXG5cdFx0XHRjb25zdCBhbmltYXRpb25LZXlzID0gaGllcmFyY2h5VHJhY2tzWyBoIF0ua2V5cztcblxuXHRcdFx0Ly8gc2tpcCBlbXB0eSB0cmFja3Ncblx0XHRcdGlmICggISBhbmltYXRpb25LZXlzIHx8IGFuaW1hdGlvbktleXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggdGFyZ2V0c1xuXHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyAwIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdC8vIGZpZ3VyZSBvdXQgYWxsIG1vcnBoIHRhcmdldHMgdXNlZCBpbiB0aGlzIHRyYWNrXG5cdFx0XHRcdGNvbnN0IG1vcnBoVGFyZ2V0TmFtZXMgPSB7fTtcblxuXHRcdFx0XHRsZXQgaztcblxuXHRcdFx0XHRmb3IgKCBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0xO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNyZWF0ZSBhIHRyYWNrIGZvciBlYWNoIG1vcnBoIHRhcmdldCB3aXRoIGFsbCB6ZXJvXG5cdFx0XHRcdC8vIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBleGNlcHQgZm9yIHRoZSBrZXlzIGluIHdoaWNoXG5cdFx0XHRcdC8vIHRoZSBtb3JwaFRhcmdldCBpcyBuYW1lZC5cblx0XHRcdFx0Zm9yICggY29uc3QgbW9ycGhUYXJnZXROYW1lIGluIG1vcnBoVGFyZ2V0TmFtZXMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB0aW1lcyA9IFtdO1xuXHRcdFx0XHRcdGNvbnN0IHZhbHVlcyA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IG0gPSAwOyBtICE9PSBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgKysgbSApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgYW5pbWF0aW9uS2V5ID0gYW5pbWF0aW9uS2V5c1sgayBdO1xuXG5cdFx0XHRcdFx0XHR0aW1lcy5wdXNoKCBhbmltYXRpb25LZXkudGltZSApO1xuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goICggYW5pbWF0aW9uS2V5Lm1vcnBoVGFyZ2V0ID09PSBtb3JwaFRhcmdldE5hbWUgKSA/IDEgOiAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0cmFja3MucHVzaCggbmV3IE51bWJlcktleWZyYW1lVHJhY2soICcubW9ycGhUYXJnZXRJbmZsdWVuY2VbJyArIG1vcnBoVGFyZ2V0TmFtZSArICddJywgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGR1cmF0aW9uID0gbW9ycGhUYXJnZXROYW1lcy5sZW5ndGggKiBmcHM7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gLi4uYXNzdW1lIHNrZWxldGFsIGFuaW1hdGlvblxuXG5cdFx0XHRcdGNvbnN0IGJvbmVOYW1lID0gJy5ib25lc1snICsgYm9uZXNbIGggXS5uYW1lICsgJ10nO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0VmVjdG9yS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnBvc2l0aW9uJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncG9zJywgdHJhY2tzICk7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnF1YXRlcm5pb24nLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdyb3QnLCB0cmFja3MgKTtcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5zY2FsZScsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3NjbCcsIHRyYWNrcyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRyYWNrcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY2xpcCA9IG5ldyB0aGlzKCBjbGlwTmFtZSwgZHVyYXRpb24sIHRyYWNrcywgYmxlbmRNb2RlICk7XG5cblx0XHRyZXR1cm4gY2xpcDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGR1cmF0aW9uIG9mIHRoaXMgY2xpcCB0byB0aGUgZHVyYXRpb24gb2YgaXRzIGxvbmdlc3Qga2V5ZnJhbWUgdHJhY2suXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkNsaXB9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYW5pbWF0aW9uIGNsaXAuXG5cdCAqL1xuXHRyZXNldER1cmF0aW9uKCkge1xuXG5cdFx0Y29uc3QgdHJhY2tzID0gdGhpcy50cmFja3M7XG5cdFx0bGV0IGR1cmF0aW9uID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHRyYWNrID0gdGhpcy50cmFja3NbIGkgXTtcblxuXHRcdFx0ZHVyYXRpb24gPSBNYXRoLm1heCggZHVyYXRpb24sIHRyYWNrLnRpbWVzWyB0cmFjay50aW1lcy5sZW5ndGggLSAxIF0gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogVHJpbXMgYWxsIHRyYWNrcyB0byB0aGUgY2xpcCdzIGR1cmF0aW9uLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25DbGlwfSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBjbGlwLlxuXHQgKi9cblx0dHJpbSgpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy50cmFja3NbIGkgXS50cmltKCAwLCB0aGlzLmR1cmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBlcmZvcm1zIG1pbmltYWwgdmFsaWRhdGlvbiBvbiBlYWNoIHRyYWNrIGluIHRoZSBjbGlwLiBSZXR1cm5zIGB0cnVlYCBpZiBhbGxcblx0ICogdHJhY2tzIGFyZSB2YWxpZC5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgY2xpcCdzIGtleWZyYW1lcyBhcmUgdmFsaWQgb3Igbm90LlxuXHQgKi9cblx0dmFsaWRhdGUoKSB7XG5cblx0XHRsZXQgdmFsaWQgPSB0cnVlO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YWxpZCA9IHZhbGlkICYmIHRoaXMudHJhY2tzWyBpIF0udmFsaWRhdGUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIE9wdGltaXplcyBlYWNoIHRyYWNrIGJ5IHJlbW92aW5nIGVxdWl2YWxlbnQgc2VxdWVudGlhbCBrZXlzICh3aGljaCBhcmVcblx0ICogY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXMpLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25DbGlwfSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBjbGlwLlxuXHQgKi9cblx0b3B0aW1pemUoKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0ub3B0aW1pemUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBhbmltYXRpb24gY2xpcCB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25DbGlwfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggdGhpcy50cmFja3NbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMubmFtZSwgdGhpcy5kdXJhdGlvbiwgdHJhY2tzLCB0aGlzLmJsZW5kTW9kZSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2VyaWFsaXplcyB0aGlzIGFuaW1hdGlvbiBjbGlwIGludG8gSlNPTi5cblx0ICpcblx0ICogQHJldHVybiB7T2JqZWN0fSBUaGUgSlNPTiBvYmplY3QuXG5cdCAqL1xuXHR0b0pTT04oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b0pTT04oIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSggdHlwZU5hbWUgKSB7XG5cblx0c3dpdGNoICggdHlwZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblxuXHRcdGNhc2UgJ3NjYWxhcic6XG5cdFx0Y2FzZSAnZG91YmxlJzpcblx0XHRjYXNlICdmbG9hdCc6XG5cdFx0Y2FzZSAnbnVtYmVyJzpcblx0XHRjYXNlICdpbnRlZ2VyJzpcblxuXHRcdFx0cmV0dXJuIE51bWJlcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICd2ZWN0b3InOlxuXHRcdGNhc2UgJ3ZlY3RvcjInOlxuXHRcdGNhc2UgJ3ZlY3RvcjMnOlxuXHRcdGNhc2UgJ3ZlY3RvcjQnOlxuXG5cdFx0XHRyZXR1cm4gVmVjdG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ2NvbG9yJzpcblxuXHRcdFx0cmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3F1YXRlcm5pb24nOlxuXG5cdFx0XHRyZXR1cm4gUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdib29sJzpcblx0XHRjYXNlICdib29sZWFuJzpcblxuXHRcdFx0cmV0dXJuIEJvb2xlYW5LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnc3RyaW5nJzpcblxuXHRcdFx0cmV0dXJuIFN0cmluZ0tleWZyYW1lVHJhY2s7XG5cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUgKTtcblxufVxuXG5mdW5jdGlvbiBwYXJzZUtleWZyYW1lVHJhY2soIGpzb24gKSB7XG5cblx0aWYgKCBqc29uLnR5cGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIHR5cGUgdW5kZWZpbmVkLCBjYW4gbm90IHBhcnNlJyApO1xuXG5cdH1cblxuXHRjb25zdCB0cmFja1R5cGUgPSBnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lKCBqc29uLnR5cGUgKTtcblxuXHRpZiAoIGpzb24udGltZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGNvbnN0IHRpbWVzID0gW10sIHZhbHVlcyA9IFtdO1xuXG5cdFx0ZmxhdHRlbkpTT04oIGpzb24ua2V5cywgdGltZXMsIHZhbHVlcywgJ3ZhbHVlJyApO1xuXG5cdFx0anNvbi50aW1lcyA9IHRpbWVzO1xuXHRcdGpzb24udmFsdWVzID0gdmFsdWVzO1xuXG5cdH1cblxuXHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyBwYXJzZSBtZXRob2Rcblx0aWYgKCB0cmFja1R5cGUucGFyc2UgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHJldHVybiB0cmFja1R5cGUucGFyc2UoIGpzb24gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gYnkgZGVmYXVsdCwgd2UgYXNzdW1lIGEgY29uc3RydWN0b3IgY29tcGF0aWJsZSB3aXRoIHRoZSBiYXNlXG5cdFx0cmV0dXJuIG5ldyB0cmFja1R5cGUoIGpzb24ubmFtZSwganNvbi50aW1lcywganNvbi52YWx1ZXMsIGpzb24uaW50ZXJwb2xhdGlvbiApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEBjbGFzc1xuICogQGNsYXNzZGVzYyBBIHNpbXBsZSBjYWNoaW5nIHN5c3RlbSwgdXNlZCBpbnRlcm5hbGx5IGJ5IHtAbGluayBGaWxlTG9hZGVyfS5cbiAqIFRvIGVuYWJsZSBjYWNoaW5nIGFjcm9zcyBhbGwgbG9hZGVycyB0aGF0IHVzZSB7QGxpbmsgRmlsZUxvYWRlcn0sIGFkZCBgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWUuYCBvbmNlIGluIHlvdXIgYXBwLlxuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG5jb25zdCBDYWNoZSA9IHtcblxuXHQvKipcblx0ICogV2hldGhlciBjYWNoaW5nIGlzIGVuYWJsZWQgb3Igbm90LlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKi9cblx0ZW5hYmxlZDogZmFsc2UsXG5cblx0LyoqXG5cdCAqIEEgZGljdGlvbmFyeSB0aGF0IGhvbGRzIGNhY2hlZCBmaWxlcy5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxPYmplY3Q+fVxuXHQgKi9cblx0ZmlsZXM6IHt9LFxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgY2FjaGUgZW50cnkgd2l0aCBhIGtleSB0byByZWZlcmVuY2UgdGhlIGZpbGUuIElmIHRoaXMga2V5IGFscmVhZHlcblx0ICogaG9sZHMgYSBmaWxlLCBpdCBpcyBvdmVyd3JpdHRlbi5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSB0byByZWZlcmVuY2UgdGhlIGNhY2hlZCBmaWxlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gZmlsZSAtICBUaGUgZmlsZSB0byBiZSBjYWNoZWQuXG5cdCAqL1xuXHRhZGQ6IGZ1bmN0aW9uICgga2V5LCBmaWxlICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdBZGRpbmcga2V5OicsIGtleSApO1xuXG5cdFx0dGhpcy5maWxlc1sga2V5IF0gPSBmaWxlO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGNhY2hlZCB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleS5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSB0byByZWZlcmVuY2UgdGhlIGNhY2hlZCBmaWxlLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R8dW5kZWZpbmVkfSBUaGUgY2FjaGVkIGZpbGUuIElmIHRoZSBrZXkgZG9lcyBub3QgZXhpc3QgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG5cdCAqL1xuXHRnZXQ6IGZ1bmN0aW9uICgga2V5ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5DYWNoZScsICdDaGVja2luZyBrZXk6Jywga2V5ICk7XG5cblx0XHRyZXR1cm4gdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgY2FjaGVkIGZpbGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgdG8gcmVmZXJlbmNlIHRoZSBjYWNoZWQgZmlsZS5cblx0ICovXG5cdHJlbW92ZTogZnVuY3Rpb24gKCBrZXkgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHQvKipcblx0ICogUmVtb3ZlIGFsbCB2YWx1ZXMgZnJvbSB0aGUgY2FjaGUuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdGNsZWFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmZpbGVzID0ge307XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYW5kIGtlZXBzIHRyYWNrIG9mIGxvYWRlZCBhbmQgcGVuZGluZyBkYXRhLiBBIGRlZmF1bHQgZ2xvYmFsXG4gKiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlzIGNyZWF0ZWQgYW5kIHVzZWQgYnkgbG9hZGVycyBpZiBub3Qgc3VwcGxpZWRcbiAqIG1hbnVhbGx5LlxuICpcbiAqIEluIGdlbmVyYWwgdGhhdCBzaG91bGQgYmUgc3VmZmljaWVudCwgaG93ZXZlciB0aGVyZSBhcmUgdGltZXMgd2hlbiBpdCBjYW5cbiAqIGJlIHVzZWZ1bCB0byBoYXZlIHNlcGFyYXRlIGxvYWRlcnMgLSBmb3IgZXhhbXBsZSBpZiB5b3Ugd2FudCB0byBzaG93XG4gKiBzZXBhcmF0ZSBsb2FkaW5nIGJhcnMgZm9yIG9iamVjdHMgYW5kIHRleHR1cmVzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtYW5hZ2VyID0gbmV3IFRIUkVFLkxvYWRpbmdNYW5hZ2VyKCk7XG4gKiBtYW5hZ2VyLm9uTG9hZCA9ICgpID0+IGNvbnNvbGUubG9nKCAnTG9hZGluZyBjb21wbGV0ZSEnICk7XG4gKlxuICogY29uc3QgbG9hZGVyMSA9IG5ldyBPQkpMb2FkZXIoIG1hbmFnZXIgKTtcbiAqIGNvbnN0IGxvYWRlcjIgPSBuZXcgQ29sbGFkYUxvYWRlciggbWFuYWdlciApO1xuICogYGBgXG4gKi9cbmNsYXNzIExvYWRpbmdNYW5hZ2VyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkxvYWRdIC0gRXhlY3V0ZXMgd2hlbiBhbGwgaXRlbXMgaGF2ZSBiZWVuIGxvYWRlZC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gW29uUHJvZ3Jlc3NdIC0gRXhlY3V0ZXMgd2hlbiBzaW5nbGUgaXRlbXMgaGF2ZSBiZWVuIGxvYWRlZC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gW29uRXJyb3JdIC0gRXhlY3V0ZXMgd2hlbiBhbiBlcnJvciBvY2N1cnMuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0bGV0IGlzTG9hZGluZyA9IGZhbHNlO1xuXHRcdGxldCBpdGVtc0xvYWRlZCA9IDA7XG5cdFx0bGV0IGl0ZW1zVG90YWwgPSAwO1xuXHRcdGxldCB1cmxNb2RpZmllciA9IHVuZGVmaW5lZDtcblx0XHRjb25zdCBoYW5kbGVycyA9IFtdO1xuXG5cdFx0Ly8gUmVmZXIgdG8gIzU2ODkgZm9yIHRoZSByZWFzb24gd2h5IHdlIGRvbid0IHNldCAub25TdGFydFxuXHRcdC8vIGluIHRoZSBjb25zdHJ1Y3RvclxuXG5cdFx0LyoqXG5cdFx0ICogRXhlY3V0ZXMgd2hlbiBhbiBpdGVtIHN0YXJ0cyBsb2FkaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufHVuZGVmaW5lZH1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLm9uU3RhcnQgPSB1bmRlZmluZWQ7XG5cblx0XHQvKipcblx0XHQgKiBFeGVjdXRlcyB3aGVuIGFsbCBpdGVtcyBoYXZlIGJlZW4gbG9hZGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufHVuZGVmaW5lZH1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLm9uTG9hZCA9IG9uTG9hZDtcblxuXHRcdC8qKlxuXHRcdCAqIEV4ZWN1dGVzIHdoZW4gc2luZ2xlIGl0ZW1zIGhhdmUgYmVlbiBsb2FkZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RnVuY3Rpb258dW5kZWZpbmVkfVxuXHRcdCAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuXHRcdCAqL1xuXHRcdHRoaXMub25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3M7XG5cblx0XHQvKipcblx0XHQgKiBFeGVjdXRlcyB3aGVuIGFuIGVycm9yIG9jY3Vycy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtGdW5jdGlvbnx1bmRlZmluZWR9XG5cdFx0ICogQGRlZmF1bHQgdW5kZWZpbmVkXG5cdFx0ICovXG5cdFx0dGhpcy5vbkVycm9yID0gb25FcnJvcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBieSBhbnkgbG9hZGVyIHVzaW5nIHRoZSBtYW5hZ2VyIHdoZW4gdGhlIGxvYWRlclxuXHRcdCAqIHN0YXJ0cyBsb2FkaW5nIGFuIGl0ZW0uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBsb2FkLlxuXHRcdCAqL1xuXHRcdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRcdGl0ZW1zVG90YWwgKys7XG5cblx0XHRcdGlmICggaXNMb2FkaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHNjb3BlLm9uU3RhcnQoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aXNMb2FkaW5nID0gdHJ1ZTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYnkgYW55IGxvYWRlciB1c2luZyB0aGUgbWFuYWdlciB3aGVuIHRoZSBsb2FkZXJcblx0XHQgKiBlbmRlZCBsb2FkaW5nIGFuIGl0ZW0uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCBvZiB0aGUgbG9hZGVkIGl0ZW0uXG5cdFx0ICovXG5cdFx0dGhpcy5pdGVtRW5kID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRcdGl0ZW1zTG9hZGVkICsrO1xuXG5cdFx0XHRpZiAoIHNjb3BlLm9uUHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5vblByb2dyZXNzKCB1cmwsIGl0ZW1zTG9hZGVkLCBpdGVtc1RvdGFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpdGVtc0xvYWRlZCA9PT0gaXRlbXNUb3RhbCApIHtcblxuXHRcdFx0XHRpc0xvYWRpbmcgPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLm9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0c2NvcGUub25Mb2FkKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIGJ5IGFueSBsb2FkZXIgdXNpbmcgdGhlIG1hbmFnZXIgd2hlbiB0aGUgbG9hZGVyXG5cdFx0ICogZW5jb3VudGVycyBhbiBlcnJvciB3aGVuIGxvYWRpbmcgYW4gaXRlbS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIG9mIHRoZSBpdGVtIHRoYXQgcHJvZHVjZXMgYW4gZXJyb3IuXG5cdFx0ICovXG5cdFx0dGhpcy5pdGVtRXJyb3IgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5vbkVycm9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUub25FcnJvciggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBHaXZlbiBhIFVSTCwgdXNlcyB0aGUgVVJMIG1vZGlmaWVyIGNhbGxiYWNrIChpZiBhbnkpIGFuZCByZXR1cm5zIGFcblx0XHQgKiByZXNvbHZlZCBVUkwuIElmIG5vIFVSTCBtb2RpZmllciBpcyBzZXQsIHJldHVybnMgdGhlIG9yaWdpbmFsIFVSTC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIGxvYWQuXG5cdFx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmVzb2x2ZWQgVVJMLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVzb2x2ZVVSTCA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0XHRpZiAoIHVybE1vZGlmaWVyICkge1xuXG5cdFx0XHRcdHJldHVybiB1cmxNb2RpZmllciggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVybDtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBJZiBwcm92aWRlZCwgdGhlIGNhbGxiYWNrIHdpbGwgYmUgcGFzc2VkIGVhY2ggcmVzb3VyY2UgVVJMIGJlZm9yZSBhXG5cdFx0ICogcmVxdWVzdCBpcyBzZW50LiBUaGUgY2FsbGJhY2sgbWF5IHJldHVybiB0aGUgb3JpZ2luYWwgVVJMLCBvciBhIG5ldyBVUkwgdG9cblx0XHQgKiBvdmVycmlkZSBsb2FkaW5nIGJlaGF2aW9yLiBUaGlzIGJlaGF2aW9yIGNhbiBiZSB1c2VkIHRvIGxvYWQgYXNzZXRzIGZyb21cblx0XHQgKiAuWklQIGZpbGVzLCBkcmFnLWFuZC1kcm9wIEFQSXMsIGFuZCBEYXRhIFVSSXMuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnN0IGJsb2JzID0geydmaXNoLmdsdGYnOiBibG9iMSwgJ2RpZmZ1c2UucG5nJzogYmxvYjIsICdub3JtYWwucG5nJzogYmxvYjN9O1xuXHRcdCAqXG5cdFx0ICogY29uc3QgbWFuYWdlciA9IG5ldyBUSFJFRS5Mb2FkaW5nTWFuYWdlcigpO1xuXHRcdCAqXG5cdFx0ICogLy8gSW5pdGlhbGl6ZSBsb2FkaW5nIG1hbmFnZXIgd2l0aCBVUkwgY2FsbGJhY2suXG5cdFx0ICogY29uc3Qgb2JqZWN0VVJMcyA9IFtdO1xuXHRcdCAqIG1hbmFnZXIuc2V0VVJMTW9kaWZpZXIoICggdXJsICkgPT4ge1xuXHRcdCAqXG5cdFx0ICogXHR1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKCBibG9ic1sgdXJsIF0gKTtcblx0XHQgKiBcdG9iamVjdFVSTHMucHVzaCggdXJsICk7XG5cdFx0ICogXHRyZXR1cm4gdXJsO1xuXHRcdCAqXG5cdFx0ICogfSApO1xuXHRcdCAqXG5cdFx0ICogLy8gTG9hZCBhcyB1c3VhbCwgdGhlbiByZXZva2UgdGhlIGJsb2IgVVJMcy5cblx0XHQgKiBjb25zdCBsb2FkZXIgPSBuZXcgR0xURkxvYWRlciggbWFuYWdlciApO1xuXHRcdCAqIGxvYWRlci5sb2FkKCAnZmlzaC5nbHRmJywgKGdsdGYpID0+IHtcblx0XHQgKlxuXHRcdCAqIFx0c2NlbmUuYWRkKCBnbHRmLnNjZW5lICk7XG5cdFx0ICogXHRvYmplY3RVUkxzLmZvckVhY2goICggdXJsICkgPT4gVVJMLnJldm9rZU9iamVjdFVSTCggdXJsICkgKTtcblx0XHQgKlxuXHRcdCAqIH0gKTtcblx0XHQgKiBgYGBcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKTpzdHJpbmd9IHRyYW5zZm9ybSAtIFVSTCBtb2RpZmllciBjYWxsYmFjay4gQ2FsbGVkIHdpdGggYW4gVVJMIGFuZCBtdXN0IHJldHVybiBhIHJlc29sdmVkIFVSTC5cblx0XHQgKiBAcmV0dXJuIHtMb2FkaW5nTWFuYWdlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBsb2FkaW5nIG1hbmFnZXIuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRVUkxNb2RpZmllciA9IGZ1bmN0aW9uICggdHJhbnNmb3JtICkge1xuXG5cdFx0XHR1cmxNb2RpZmllciA9IHRyYW5zZm9ybTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVnaXN0ZXJzIGEgbG9hZGVyIHdpdGggdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbi4gQ2FuIGJlIHVzZWQgdG9cblx0XHQgKiBkZWZpbmUgd2hhdCBsb2FkZXIgc2hvdWxkIGJlIHVzZWQgaW4gb3JkZXIgdG8gbG9hZCBzcGVjaWZpYyBmaWxlcy4gQVxuXHRcdCAqIHR5cGljYWwgdXNlIGNhc2UgaXMgdG8gb3ZlcndyaXRlIHRoZSBkZWZhdWx0IGxvYWRlciBmb3IgdGV4dHVyZXMuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIC8vIGFkZCBoYW5kbGVyIGZvciBUR0EgdGV4dHVyZXNcblx0XHQgKiBtYW5hZ2VyLmFkZEhhbmRsZXIoIC9cXC50Z2EkL2ksIG5ldyBUR0FMb2FkZXIoKSApO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHJlZ2V4IC0gQSByZWd1bGFyIGV4cHJlc3Npb24uXG5cdFx0ICogQHBhcmFtIHtMb2FkZXJ9IGxvYWRlciAtIEEgbG9hZGVyIHRoYXQgc2hvdWxkIGhhbmRsZSBtYXRjaGVkIGNhc2VzLlxuXHRcdCAqIEByZXR1cm4ge0xvYWRpbmdNYW5hZ2VyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGxvYWRpbmcgbWFuYWdlci5cblx0XHQgKi9cblx0XHR0aGlzLmFkZEhhbmRsZXIgPSBmdW5jdGlvbiAoIHJlZ2V4LCBsb2FkZXIgKSB7XG5cblx0XHRcdGhhbmRsZXJzLnB1c2goIHJlZ2V4LCBsb2FkZXIgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlcyB0aGUgbG9hZGVyIGZvciB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHJlZ2V4IC0gQSByZWd1bGFyIGV4cHJlc3Npb24uXG5cdFx0ICogQHJldHVybiB7TG9hZGluZ01hbmFnZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbG9hZGluZyBtYW5hZ2VyLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uICggcmVnZXggKSB7XG5cblx0XHRcdGNvbnN0IGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZiggcmVnZXggKTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gLTEgKSB7XG5cblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBpbmRleCwgMiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSByZWdpc3RlcmVkIGxvYWRlciBmb3IgdGhlIGdpdmVuIGZpbGUgcGF0aC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIC0gVGhlIGZpbGUgcGF0aC5cblx0XHQgKiBAcmV0dXJuIHs/TG9hZGVyfSBUaGUgcmVnaXN0ZXJlZCBsb2FkZXIuIFJldHVybnMgYG51bGxgIGlmIG5vIGxvYWRlciB3YXMgZm91bmQuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRIYW5kbGVyID0gZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBsOyBpICs9IDIgKSB7XG5cblx0XHRcdFx0Y29uc3QgcmVnZXggPSBoYW5kbGVyc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBsb2FkZXIgPSBoYW5kbGVyc1sgaSArIDEgXTtcblxuXHRcdFx0XHRpZiAoIHJlZ2V4Lmdsb2JhbCApIHJlZ2V4Lmxhc3RJbmRleCA9IDA7IC8vIHNlZSAjMTc5MjBcblxuXHRcdFx0XHRpZiAoIHJlZ2V4LnRlc3QoIGZpbGUgKSApIHtcblxuXHRcdFx0XHRcdHJldHVybiBsb2FkZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGUgZ2xvYmFsIGRlZmF1bHQgbG9hZGluZyBtYW5hZ2VyLlxuICpcbiAqIEBjb25zdGFudFxuICogQHR5cGUge0xvYWRpbmdNYW5hZ2VyfVxuICovXG5jb25zdCBEZWZhdWx0TG9hZGluZ01hbmFnZXIgPSAvKkBfX1BVUkVfXyovIG5ldyBMb2FkaW5nTWFuYWdlcigpO1xuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGxvYWRlcnMuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIExvYWRlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbG9hZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBUaGUgbG9hZGluZyBtYW5hZ2VyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbG9hZGluZyBtYW5hZ2VyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0xvYWRpbmdNYW5hZ2VyfVxuXHRcdCAqIEBkZWZhdWx0IERlZmF1bHRMb2FkaW5nTWFuYWdlclxuXHRcdCAqL1xuXHRcdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNyb3NzT3JpZ2luIHN0cmluZyB0byBpbXBsZW1lbnQgQ09SUyBmb3IgbG9hZGluZyB0aGUgdXJsIGZyb20gYVxuXHRcdCAqIGRpZmZlcmVudCBkb21haW4gdGhhdCBhbGxvd3MgQ09SUy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgJ2Fub255bW91cydcblx0XHQgKi9cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBYTUxIdHRwUmVxdWVzdCB1c2VzIGNyZWRlbnRpYWxzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGJhc2UgcGF0aCBmcm9tIHdoaWNoIHRoZSBhc3NldCB3aWxsIGJlIGxvYWRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXRoID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYmFzZSBwYXRoIGZyb20gd2hpY2ggYWRkaXRpb25hbCByZXNvdXJjZXMgbGlrZSB0ZXh0dXJlcyB3aWxsIGJlIGxvYWRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSAnJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBbcmVxdWVzdCBoZWFkZXJde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvUmVxdWVzdF9oZWFkZXJ9XG5cdFx0ICogdXNlZCBpbiBIVFRQIHJlcXVlc3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZywgYW55Pn1cblx0XHQgKi9cblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSB7fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgbWV0aG9kIG5lZWRzIHRvIGJlIGltcGxlbWVudGVkIGJ5IGFsbCBjb25jcmV0ZSBsb2FkZXJzLiBJdCBob2xkcyB0aGVcblx0ICogbG9naWMgZm9yIGxvYWRpbmcgYXNzZXRzIGZyb20gdGhlIGJhY2tlbmQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgcGF0aC9VUkwgb2YgdGhlIGZpbGUgdG8gYmUgbG9hZGVkLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvbkxvYWQgLSBFeGVjdXRlZCB3aGVuIHRoZSBsb2FkaW5nIHByb2Nlc3MgaGFzIGJlZW4gZmluaXNoZWQuXG5cdCAqIEBwYXJhbSB7b25Qcm9ncmVzc0NhbGxiYWNrfSBbb25Qcm9ncmVzc10gLSBFeGVjdXRlZCB3aGlsZSB0aGUgbG9hZGluZyBpcyBpbiBwcm9ncmVzcy5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IFtvbkVycm9yXSAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKi9cblx0bG9hZCggLyogdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKi8gKSB7fVxuXG5cdC8qKlxuXHQgKiBBIGFzeW5jIHZlcnNpb24gb2Yge0BsaW5rIExvYWRlciNsb2FkfS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuXG5cdCAqIEBwYXJhbSB7b25Qcm9ncmVzc0NhbGxiYWNrfSBbb25Qcm9ncmVzc10gLSBFeGVjdXRlZCB3aGlsZSB0aGUgbG9hZGluZyBpcyBpbiBwcm9ncmVzcy5cblx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgYXNzZXQgaGFzIGJlZW4gbG9hZGVkLlxuXHQgKi9cblx0bG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG5cdFx0XHRzY29wZS5sb2FkKCB1cmwsIHJlc29sdmUsIG9uUHJvZ3Jlc3MsIHJlamVjdCApO1xuXG5cdFx0fSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBtZXRob2QgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQgYnkgYWxsIGNvbmNyZXRlIGxvYWRlcnMuIEl0IGhvbGRzIHRoZVxuXHQgKiBsb2dpYyBmb3IgcGFyc2luZyB0aGUgYXNzZXQgaW50byB0aHJlZS5qcyBlbnRpdGllcy5cblx0ICpcblx0ICogQHBhcmFtIHthbnl9IGRhdGEgLSBUaGUgZGF0YSB0byBwYXJzZS5cblx0ICovXG5cdHBhcnNlKCAvKiBkYXRhICovICkge31cblxuXHQvKipcblx0ICogU2V0cyB0aGUgYGNyb3NzT3JpZ2luYCBTdHJpbmcgdG8gaW1wbGVtZW50IENPUlMgZm9yIGxvYWRpbmcgdGhlIFVSTFxuXHQgKiBmcm9tIGEgZGlmZmVyZW50IGRvbWFpbiB0aGF0IGFsbG93cyBDT1JTLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY3Jvc3NPcmlnaW4gLSBUaGUgYGNyb3NzT3JpZ2luYCB2YWx1ZS5cblx0ICogQHJldHVybiB7TG9hZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0Q3Jvc3NPcmlnaW4oIGNyb3NzT3JpZ2luICkge1xuXG5cdFx0dGhpcy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogV2hldGhlciB0aGUgWE1MSHR0cFJlcXVlc3QgdXNlcyBjcmVkZW50aWFscyBzdWNoIGFzIGNvb2tpZXMsIGF1dGhvcml6YXRpb25cblx0ICogaGVhZGVycyBvciBUTFMgY2xpZW50IGNlcnRpZmljYXRlcywgc2VlIFtYTUxIdHRwUmVxdWVzdC53aXRoQ3JlZGVudGlhbHNde0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdC93aXRoQ3JlZGVudGlhbHN9LlxuXHQgKlxuXHQgKiBOb3RlOiBUaGlzIHNldHRpbmcgaGFzIG5vIGVmZmVjdCBpZiB5b3UgYXJlIGxvYWRpbmcgZmlsZXMgbG9jYWxseSBvciBmcm9tIHRoZSBzYW1lIGRvbWFpbi5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSBgd2l0aENyZWRlbnRpYWxzYCB2YWx1ZS5cblx0ICogQHJldHVybiB7TG9hZGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0V2l0aENyZWRlbnRpYWxzKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMud2l0aENyZWRlbnRpYWxzID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBiYXNlIHBhdGggZm9yIHRoZSBhc3NldC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgYmFzZSBwYXRoLlxuXHQgKiBAcmV0dXJuIHtMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRQYXRoKCBwYXRoICkge1xuXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGJhc2UgcGF0aCBmb3IgZGVwZW5kZW50IHJlc291cmNlcyBsaWtlIHRleHR1cmVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VQYXRoIC0gVGhlIHJlc291cmNlIHBhdGguXG5cdCAqIEByZXR1cm4ge0xvYWRlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldFJlc291cmNlUGF0aCggcmVzb3VyY2VQYXRoICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiByZXF1ZXN0IGhlYWRlci5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RIZWFkZXIgLSBBIFtyZXF1ZXN0IGhlYWRlcl17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9HbG9zc2FyeS9SZXF1ZXN0X2hlYWRlcn1cblx0ICogZm9yIGNvbmZpZ3VyaW5nIHRoZSBIVFRQIHJlcXVlc3QuXG5cdCAqIEByZXR1cm4ge0xvYWRlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldFJlcXVlc3RIZWFkZXIoIHJlcXVlc3RIZWFkZXIgKSB7XG5cblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSByZXF1ZXN0SGVhZGVyO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENhbGxiYWNrIGZvciBvblByb2dyZXNzIGluIGxvYWRlcnMuXG4gKlxuICogQGNhbGxiYWNrIG9uUHJvZ3Jlc3NDYWxsYmFja1xuICogQHBhcmFtIHtQcm9ncmVzc0V2ZW50fSBldmVudCAtIEFuIGluc3RhbmNlIG9mIGBQcm9ncmVzc0V2ZW50YCB0aGF0IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgbG9hZGluZyBzdGF0dXMuXG4gKi9cblxuLyoqXG4gKiBDYWxsYmFjayBmb3Igb25FcnJvciBpbiBsb2FkZXJzLlxuICpcbiAqIEBjYWxsYmFjayBvbkVycm9yQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIC0gVGhlIGVycm9yIHdoaWNoIG9jY3VycmVkIGR1cmluZyB0aGUgbG9hZGluZyBwcm9jZXNzLlxuICovXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbWF0ZXJpYWwgbmFtZSB0aGF0IGlzIHVzZWQgYnkgbG9hZGVyc1xuICogd2hlbiBjcmVhdGluZyBtYXRlcmlhbHMgZm9yIGxvYWRlZCAzRCBvYmplY3RzLlxuICpcbiAqIE5vdGU6IE5vdCBhbGwgbG9hZGVycyBtaWdodCBob25vciB0aGlzIHNldHRpbmcuXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge3N0cmluZ31cbiAqIEBkZWZhdWx0ICdfX0RFRkFVTFQnXG4gKi9cbkxvYWRlci5ERUZBVUxUX01BVEVSSUFMX05BTUUgPSAnX19ERUZBVUxUJztcblxuY29uc3QgbG9hZGluZyA9IHt9O1xuXG5jbGFzcyBIdHRwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cblx0Y29uc3RydWN0b3IoIG1lc3NhZ2UsIHJlc3BvbnNlICkge1xuXG5cdFx0c3VwZXIoIG1lc3NhZ2UgKTtcblx0XHR0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBsb3cgbGV2ZWwgY2xhc3MgZm9yIGxvYWRpbmcgcmVzb3VyY2VzIHdpdGggdGhlIEZldGNoIEFQSSwgdXNlZCBpbnRlcm5hbGx5IGJ5XG4gKiBtb3N0IGxvYWRlcnMuIEl0IGNhbiBhbHNvIGJlIHVzZWQgZGlyZWN0bHkgdG8gbG9hZCBhbnkgZmlsZSB0eXBlIHRoYXQgZG9lc1xuICogbm90IGhhdmUgYSBsb2FkZXIuXG4gKlxuICogVGhpcyBsb2FkZXIgc3VwcG9ydHMgY2FjaGluZy4gSWYgeW91IHdhbnQgdG8gdXNlIGl0LCBhZGQgYFRIUkVFLkNhY2hlLmVuYWJsZWQgPSB0cnVlO2BcbiAqIG9uY2UgdG8geW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoKTtcbiAqIGNvbnN0IGRhdGEgPSBhd2FpdCBsb2FkZXIubG9hZEFzeW5jKCAnZXhhbXBsZS50eHQnICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTG9hZGVyXG4gKi9cbmNsYXNzIEZpbGVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGZpbGUgbG9hZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBUaGUgbG9hZGluZyBtYW5hZ2VyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGV4cGVjdGVkIG1pbWUgdHlwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5taW1lVHlwZSA9ICcnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGV4cGVjdGVkIHJlc3BvbnNlIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KCdhcnJheWJ1ZmZlcid8J2Jsb2InfCdkb2N1bWVudCd8J2pzb24nfCcnKX1cblx0XHQgKiBAZGVmYXVsdCAnJ1xuXHRcdCAqL1xuXHRcdHRoaXMucmVzcG9uc2VUeXBlID0gJyc7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3MgdGhlIGxvYWRlZCByZXNwb25zZSB0byB0aGUgYG9uTG9hZCgpYCBjYWxsYmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihhbnkpfSBvbkxvYWQgLSBFeGVjdXRlZCB3aGVuIHRoZSBsb2FkaW5nIHByb2Nlc3MgaGFzIGJlZW4gZmluaXNoZWQuXG5cdCAqIEBwYXJhbSB7b25Qcm9ncmVzc0NhbGxiYWNrfSBbb25Qcm9ncmVzc10gLSBFeGVjdXRlZCB3aGlsZSB0aGUgbG9hZGluZyBpcyBpbiBwcm9ncmVzcy5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IFtvbkVycm9yXSAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKiBAcmV0dXJuIHthbnl8dW5kZWZpbmVkfSBUaGUgY2FjaGVkIHJlc291cmNlIGlmIGF2YWlsYWJsZS5cblx0ICovXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0aWYgKCB1cmwgPT09IHVuZGVmaW5lZCApIHVybCA9ICcnO1xuXG5cdFx0aWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHVybCA9IHRoaXMucGF0aCArIHVybDtcblxuXHRcdHVybCA9IHRoaXMubWFuYWdlci5yZXNvbHZlVVJMKCB1cmwgKTtcblxuXHRcdGNvbnN0IGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggKCkgPT4ge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHR0aGlzLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdC8vIENoZWNrIGlmIHJlcXVlc3QgaXMgZHVwbGljYXRlXG5cblx0XHRpZiAoIGxvYWRpbmdbIHVybCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGxvYWRpbmdbIHVybCBdLnB1c2goIHtcblxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcblx0XHRcdFx0b25FcnJvcjogb25FcnJvclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIEluaXRpYWxpc2UgYXJyYXkgZm9yIGR1cGxpY2F0ZSByZXF1ZXN0c1xuXHRcdGxvYWRpbmdbIHVybCBdID0gW107XG5cblx0XHRsb2FkaW5nWyB1cmwgXS5wdXNoKCB7XG5cdFx0XHRvbkxvYWQ6IG9uTG9hZCxcblx0XHRcdG9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsXG5cdFx0XHRvbkVycm9yOiBvbkVycm9yLFxuXHRcdH0gKTtcblxuXHRcdC8vIGNyZWF0ZSByZXF1ZXN0XG5cdFx0Y29uc3QgcmVxID0gbmV3IFJlcXVlc3QoIHVybCwge1xuXHRcdFx0aGVhZGVyczogbmV3IEhlYWRlcnMoIHRoaXMucmVxdWVzdEhlYWRlciApLFxuXHRcdFx0Y3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ3NhbWUtb3JpZ2luJyxcblx0XHRcdC8vIEFuIGFib3J0IGNvbnRyb2xsZXIgY291bGQgYmUgYWRkZWQgd2l0aGluIGEgZnV0dXJlIFBSXG5cdFx0fSApO1xuXG5cdFx0Ly8gcmVjb3JkIHN0YXRlcyAoIGF2b2lkIGRhdGEgcmFjZSApXG5cdFx0Y29uc3QgbWltZVR5cGUgPSB0aGlzLm1pbWVUeXBlO1xuXHRcdGNvbnN0IHJlc3BvbnNlVHlwZSA9IHRoaXMucmVzcG9uc2VUeXBlO1xuXG5cdFx0Ly8gc3RhcnQgdGhlIGZldGNoXG5cdFx0ZmV0Y2goIHJlcSApXG5cdFx0XHQudGhlbiggcmVzcG9uc2UgPT4ge1xuXG5cdFx0XHRcdGlmICggcmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAwICkge1xuXG5cdFx0XHRcdFx0Ly8gU29tZSBicm93c2VycyByZXR1cm4gSFRUUCBTdGF0dXMgMCB3aGVuIHVzaW5nIG5vbi1odHRwIHByb3RvY29sXG5cdFx0XHRcdFx0Ly8gZS5nLiAnZmlsZTovLycgb3IgJ2RhdGE6Ly8nLiBIYW5kbGUgYXMgc3VjY2Vzcy5cblxuXHRcdFx0XHRcdGlmICggcmVzcG9uc2Uuc3RhdHVzID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5GaWxlTG9hZGVyOiBIVFRQIFN0YXR1cyAwIHJlY2VpdmVkLicgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFdvcmthcm91bmQ6IENoZWNraW5nIGlmIHJlc3BvbnNlLmJvZHkgPT09IHVuZGVmaW5lZCBmb3IgQWxpcGF5IGJyb3dzZXIgIzIzNTQ4XG5cblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcgfHwgcmVzcG9uc2UuYm9keSA9PT0gdW5kZWZpbmVkIHx8IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXHRcdFx0XHRcdGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG5cblx0XHRcdFx0XHQvLyBOZ2lueCBuZWVkcyBYLUZpbGUtU2l6ZSBjaGVja1xuXHRcdFx0XHRcdC8vIGh0dHBzOi8vc2VydmVyZmF1bHQuY29tL3F1ZXN0aW9ucy80ODI4NzUvd2h5LWRvZXMtbmdpbngtcmVtb3ZlLWNvbnRlbnQtbGVuZ3RoLWhlYWRlci1mb3ItY2h1bmtlZC1jb250ZW50XG5cdFx0XHRcdFx0Y29uc3QgY29udGVudExlbmd0aCA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCAnWC1GaWxlLVNpemUnICkgfHwgcmVzcG9uc2UuaGVhZGVycy5nZXQoICdDb250ZW50LUxlbmd0aCcgKTtcblx0XHRcdFx0XHRjb25zdCB0b3RhbCA9IGNvbnRlbnRMZW5ndGggPyBwYXJzZUludCggY29udGVudExlbmd0aCApIDogMDtcblx0XHRcdFx0XHRjb25zdCBsZW5ndGhDb21wdXRhYmxlID0gdG90YWwgIT09IDA7XG5cdFx0XHRcdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRcdFx0XHQvLyBwZXJpb2RpY2FsbHkgcmVhZCBkYXRhIGludG8gdGhlIG5ldyBzdHJlYW0gdHJhY2tpbmcgd2hpbGUgZG93bmxvYWQgcHJvZ3Jlc3Ncblx0XHRcdFx0XHRjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oIHtcblx0XHRcdFx0XHRcdHN0YXJ0KCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlYWREYXRhKCk7XG5cblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24gcmVhZERhdGEoKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRyZWFkZXIucmVhZCgpLnRoZW4oICggeyBkb25lLCB2YWx1ZSB9ICkgPT4ge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRvbmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29udHJvbGxlci5jbG9zZSgpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxvYWRlZCArPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGV2ZW50ID0gbmV3IFByb2dyZXNzRXZlbnQoICdwcm9ncmVzcycsIHsgbGVuZ3RoQ29tcHV0YWJsZSwgbG9hZGVkLCB0b3RhbCB9ICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Qcm9ncmVzcyApIGNhbGxiYWNrLm9uUHJvZ3Jlc3MoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZW5xdWV1ZSggdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVhZERhdGEoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fSwgKCBlICkgPT4ge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRjb250cm9sbGVyLmVycm9yKCBlICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRyZXR1cm4gbmV3IFJlc3BvbnNlKCBzdHJlYW0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEh0dHBFcnJvciggYGZldGNoIGZvciBcIiR7cmVzcG9uc2UudXJsfVwiIHJlc3BvbmRlZCB3aXRoICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWAsIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IClcblx0XHRcdC50aGVuKCByZXNwb25zZSA9PiB7XG5cblx0XHRcdFx0c3dpdGNoICggcmVzcG9uc2VUeXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcblxuXHRcdFx0XHRcdGNhc2UgJ2Jsb2InOlxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UuYmxvYigpO1xuXG5cdFx0XHRcdFx0Y2FzZSAnZG9jdW1lbnQnOlxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2UudGV4dCgpXG5cdFx0XHRcdFx0XHRcdC50aGVuKCB0ZXh0ID0+IHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyggdGV4dCwgbWltZVR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRjYXNlICdqc29uJzpcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdGlmICggbWltZVR5cGUgPT09ICcnICkge1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZS50ZXh0KCk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gc25pZmYgZW5jb2Rpbmdcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmUgPSAvY2hhcnNldD1cIj8oW147XCJcXHNdKilcIj8vaTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZXhlYyA9IHJlLmV4ZWMoIG1pbWVUeXBlICk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGxhYmVsID0gZXhlYyAmJiBleGVjWyAxIF0gPyBleGVjWyAxIF0udG9Mb3dlckNhc2UoKSA6IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0Y29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlciggbGFiZWwgKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCkudGhlbiggYWIgPT4gZGVjb2Rlci5kZWNvZGUoIGFiICkgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSApXG5cdFx0XHQudGhlbiggZGF0YSA9PiB7XG5cblx0XHRcdFx0Ly8gQWRkIHRvIGNhY2hlIG9ubHkgb24gSFRUUCBzdWNjZXNzLCBzbyB0aGF0IHdlIGRvIG5vdCBjYWNoZVxuXHRcdFx0XHQvLyBlcnJvciByZXNwb25zZSBib2RpZXMgYXMgcHJvcGVyIHJlc3BvbnNlcyB0byByZXF1ZXN0cy5cblx0XHRcdFx0Q2FjaGUuYWRkKCB1cmwsIGRhdGEgKTtcblxuXHRcdFx0XHRjb25zdCBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Mb2FkICkgY2FsbGJhY2sub25Mb2FkKCBkYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IClcblx0XHRcdC5jYXRjaCggZXJyID0+IHtcblxuXHRcdFx0XHQvLyBBYm9ydCBlcnJvcnMgYW5kIG90aGVyIGVycm9ycyBhcmUgaGFuZGxlZCB0aGUgc2FtZVxuXG5cdFx0XHRcdGNvbnN0IGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGlmICggY2FsbGJhY2tzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXaGVuIG9uTG9hZCB3YXMgY2FsbGVkIGFuZCB1cmwgd2FzIGRlbGV0ZWQgaW4gYGxvYWRpbmdgXG5cdFx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdFx0dGhyb3cgZXJyO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjay5vbkVycm9yICkgY2FsbGJhY2sub25FcnJvciggZXJyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXG5cdFx0XHR9IClcblx0XHRcdC5maW5hbGx5KCAoKSA9PiB7XG5cblx0XHRcdFx0dGhpcy5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR0aGlzLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGV4cGVjdGVkIHJlc3BvbnNlIHR5cGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KCdhcnJheWJ1ZmZlcid8J2Jsb2InfCdkb2N1bWVudCd8J2pzb24nfCcnKX0gdmFsdWUgLSBUaGUgcmVzcG9uc2UgdHlwZS5cblx0ICogQHJldHVybiB7RmlsZUxvYWRlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBmaWxlIGxvYWRlci5cblx0ICovXG5cdHNldFJlc3BvbnNlVHlwZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnJlc3BvbnNlVHlwZSA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZXhwZWN0ZWQgbWltZSB0eXBlIG9mIHRoZSBsb2FkZWQgZmlsZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIG1pbWUgdHlwZS5cblx0ICogQHJldHVybiB7RmlsZUxvYWRlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBmaWxlIGxvYWRlci5cblx0ICovXG5cdHNldE1pbWVUeXBlKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMubWltZVR5cGUgPSB2YWx1ZTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgbG9hZGluZyBhbmltYXRpb24gY2xpcHMgaW4gdGhlIEpTT04gZm9ybWF0LiBUaGUgZmlsZXMgYXJlIGludGVybmFsbHlcbiAqIGxvYWRlZCB2aWEge0BsaW5rIEZpbGVMb2FkZXJ9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTG9hZGVyKCk7XG4gKiBjb25zdCBhbmltYXRpb25zID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggJ2FuaW1hdGlvbnMvYW5pbWF0aW9uLmpzJyApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIExvYWRlclxuICovXG5jbGFzcyBBbmltYXRpb25Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGFuaW1hdGlvbiBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3MgdGhlIGxvYWRlZCBhbmltYXRpb25zIGFzIGFuIGFycmF5XG5cdCAqIGhvbGRpbmcgaW5zdGFuY2VzIG9mIHtAbGluayBBbmltYXRpb25DbGlwfSB0byB0aGUgYG9uTG9hZCgpYCBjYWxsYmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihBcnJheTxBbmltYXRpb25DbGlwPil9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IG9uUHJvZ3Jlc3MgLSBFeGVjdXRlZCB3aGlsZSB0aGUgbG9hZGluZyBpcyBpbiBwcm9ncmVzcy5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IG9uRXJyb3IgLSBFeGVjdXRlZCB3aGVuIGVycm9ycyBvY2N1ci5cblx0ICovXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIHRoZSBnaXZlbiBKU09OIG9iamVjdCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbmltYXRpb24gY2xpcHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIHNlcmlhbGl6ZWQgYW5pbWF0aW9uIGNsaXBzLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxBbmltYXRpb25DbGlwPn0gVGhlIHBhcnNlZCBhbmltYXRpb24gY2xpcHMuXG5cdCAqL1xuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZSgganNvblsgaSBdICk7XG5cblx0XHRcdGFuaW1hdGlvbnMucHVzaCggY2xpcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFuaW1hdGlvbnM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgbG9hZGluZyBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0cyBTM1RDLCBBU1RDIG9yIEVUQy5cbiAqIFRleHR1cmVzIGFyZSBpbnRlcm5hbGx5IGxvYWRlZCB2aWEge0BsaW5rIEZpbGVMb2FkZXJ9LlxuICpcbiAqIERlcml2ZWQgY2xhc3NlcyBoYXZlIHRvIGltcGxlbWVudCB0aGUgYHBhcnNlKClgIG1ldGhvZCB3aGljaCBob2xkcyB0aGUgcGFyc2luZ1xuICogZm9yIHRoZSByZXNwZWN0aXZlIGZvcm1hdC5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGNvbXByZXNzZWQgdGV4dHVyZSBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3NlcyB0aGUgbG9hZGVkIGNvbXByZXNzZWQgdGV4dHVyZVxuXHQgKiB0byB0aGUgYG9uTG9hZCgpYCBjYWxsYmFjay4gVGhlIG1ldGhvZCBhbHNvIHJldHVybnMgYSBuZXcgdGV4dHVyZSBvYmplY3Qgd2hpY2ggY2FuXG5cdCAqIGRpcmVjdGx5IGJlIHVzZWQgZm9yIG1hdGVyaWFsIGNyZWF0aW9uLiBJZiB5b3UgZG8gaXQgdGhpcyB3YXksIHRoZSB0ZXh0dXJlXG5cdCAqIG1heSBwb3AgdXAgaW4geW91ciBzY2VuZSBvbmNlIHRoZSByZXNwZWN0aXZlIGxvYWRpbmcgcHJvY2VzcyBpcyBmaW5pc2hlZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihDb21wcmVzc2VkVGV4dHVyZSl9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IG9uUHJvZ3Jlc3MgLSBFeGVjdXRlZCB3aGlsZSB0aGUgbG9hZGluZyBpcyBpbiBwcm9ncmVzcy5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IG9uRXJyb3IgLSBFeGVjdXRlZCB3aGVuIGVycm9ycyBvY2N1ci5cblx0ICogQHJldHVybiB7Q29tcHJlc3NlZFRleHR1cmV9IFRoZSBjb21wcmVzc2VkIHRleHR1cmUuXG5cdCAqL1xuXHRsb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGltYWdlcyA9IFtdO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBDb21wcmVzc2VkVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHRoaXMucmVxdWVzdEhlYWRlciApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXG5cdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybFsgaSBdLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpbWFnZXNbIGkgXSA9IHtcblx0XHRcdFx0XHR3aWR0aDogdGV4RGF0YXMud2lkdGgsXG5cdFx0XHRcdFx0aGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsXG5cdFx0XHRcdFx0Zm9ybWF0OiB0ZXhEYXRhcy5mb3JtYXQsXG5cdFx0XHRcdFx0bWlwbWFwczogdGV4RGF0YXMubWlwbWFwc1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxvYWRlZCArPSAxO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSApIHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlcztcblx0XHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHVybCApICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdXJsLmxlbmd0aDsgaSA8IGlsOyArKyBpICkge1xuXG5cdFx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZVxuXG5cdFx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLmlzQ3ViZW1hcCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGZhY2VzID0gdGV4RGF0YXMubWlwbWFwcy5sZW5ndGggLyB0ZXhEYXRhcy5taXBtYXBDb3VudDtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBmID0gMDsgZiA8IGZhY2VzOyBmICsrICkge1xuXG5cdFx0XHRcdFx0XHRpbWFnZXNbIGYgXSA9IHsgbWlwbWFwczogW10gfTtcblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4RGF0YXMubWlwbWFwQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ubWlwbWFwcy5wdXNoKCB0ZXhEYXRhcy5taXBtYXBzWyBmICogdGV4RGF0YXMubWlwbWFwQ291bnQgKyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS53aWR0aCA9IHRleERhdGFzLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRpbWFnZXNbIGYgXS5oZWlnaHQgPSB0ZXhEYXRhcy5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblx0XHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGxvYWRlciBmb3IgbG9hZGluZyBpbWFnZXMuIFRoZSBjbGFzcyBsb2FkcyBpbWFnZXMgd2l0aCB0aGUgSFRNTCBgSW1hZ2VgIEFQSS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkltYWdlTG9hZGVyKCk7XG4gKiBjb25zdCBpbWFnZSA9IGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoICdpbWFnZS5wbmcnICk7XG4gKiBgYGBcbiAqIFBsZWFzZSBub3RlIHRoYXQgYEltYWdlTG9hZGVyYCBoYXMgZHJvcHBlZCBzdXBwb3J0IGZvciBwcm9ncmVzc1xuICogZXZlbnRzIGluIGByODRgLiBGb3IgYW4gYEltYWdlTG9hZGVyYCB0aGF0IHN1cHBvcnRzIHByb2dyZXNzIGV2ZW50cywgc2VlXG4gKiBbdGhpcyB0aHJlYWRde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzEwNDM5I2lzc3VlY29tbWVudC0yNzU3ODU2Mzl9LlxuICpcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgSW1hZ2VMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGltYWdlIGxvYWRlci5cblx0ICpcblx0ICogQHBhcmFtIHtMb2FkaW5nTWFuYWdlcn0gW21hbmFnZXJdIC0gVGhlIGxvYWRpbmcgbWFuYWdlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyBsb2FkaW5nIGZyb20gdGhlIGdpdmVuIFVSTCBhbmQgcGFzc2VzIHRoZSBsb2FkZWQgaW1hZ2Vcblx0ICogdG8gdGhlIGBvbkxvYWQoKWAgY2FsbGJhY2suIFRoZSBtZXRob2QgYWxzbyByZXR1cm5zIGEgbmV3IGBJbWFnZWAgb2JqZWN0IHdoaWNoIGNhblxuXHQgKiBkaXJlY3RseSBiZSB1c2VkIGZvciB0ZXh0dXJlIGNyZWF0aW9uLiBJZiB5b3UgZG8gaXQgdGhpcyB3YXksIHRoZSB0ZXh0dXJlXG5cdCAqIG1heSBwb3AgdXAgaW4geW91ciBzY2VuZSBvbmNlIHRoZSByZXNwZWN0aXZlIGxvYWRpbmcgcHJvY2VzcyBpcyBmaW5pc2hlZC5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihJbWFnZSl9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IG9uUHJvZ3Jlc3MgLSBVbnN1cHBvcnRlZCBpbiB0aGlzIGxvYWRlci5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IG9uRXJyb3IgLSBFeGVjdXRlZCB3aGVuIGVycm9ycyBvY2N1ci5cblx0ICogQHJldHVybiB7SW1hZ2V9IFRoZSBpbWFnZS5cblx0ICovXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0aWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHVybCA9IHRoaXMucGF0aCArIHVybDtcblxuXHRcdHVybCA9IHRoaXMubWFuYWdlci5yZXNvbHZlVVJMKCB1cmwgKTtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRcdGNvbnN0IGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgaW1hZ2UgPSBjcmVhdGVFbGVtZW50TlMoICdpbWcnICk7XG5cblx0XHRmdW5jdGlvbiBvbkltYWdlTG9hZCgpIHtcblxuXHRcdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblxuXHRcdFx0Q2FjaGUuYWRkKCB1cmwsIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRoaXMgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VFcnJvciggZXZlbnQgKSB7XG5cblx0XHRcdHJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG5cblx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcblxuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UgKTtcblxuXHRcdH1cblxuXHRcdGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0aWYgKCB1cmwuc2xpY2UoIDAsIDUgKSAhPT0gJ2RhdGE6JyApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmNyb3NzT3JpZ2luICE9PSB1bmRlZmluZWQgKSBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY3Jvc3NPcmlnaW47XG5cblx0XHR9XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRpbWFnZS5zcmMgPSB1cmw7XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIGxvYWRpbmcgY3ViZSB0ZXh0dXJlcy4gSW1hZ2VzIGFyZSBpbnRlcm5hbGx5IGxvYWRlZCB2aWEge0BsaW5rIEltYWdlTG9hZGVyfS5cbiAqXG4gKiBUaGUgbG9hZGVyIHJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEN1YmVUZXh0dXJlfSBhbmQgZXhwZWN0cyB0aGUgY3ViZSBtYXAgdG9cbiAqIGJlIGRlZmluZWQgYXMgc2l4IHNlcGFyYXRlIGltYWdlcyByZXByZXNlbnRpbmcgdGhlIHNpZGVzIG9mIGEgY3ViZS4gT3RoZXIgY3ViZSBtYXAgZGVmaW5pdGlvbnNcbiAqIGxpa2UgdmVydGljYWwgYW5kIGhvcml6b250YWwgY3Jvc3MsIGNvbHVtbiBhbmQgcm93IGxheW91dHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gKlxuICogTm90ZSB0aGF0LCBieSBjb252ZW50aW9uLCBjdWJlIG1hcHMgYXJlIHNwZWNpZmllZCBpbiBhIGNvb3JkaW5hdGUgc3lzdGVtXG4gKiBpbiB3aGljaCBwb3NpdGl2ZS14IGlzIHRvIHRoZSByaWdodCB3aGVuIGxvb2tpbmcgdXAgdGhlIHBvc2l0aXZlLXogYXhpcyAtLVxuICogaW4gb3RoZXIgd29yZHMsIHVzaW5nIGEgbGVmdC1oYW5kZWQgY29vcmRpbmF0ZSBzeXN0ZW0uIFNpbmNlIHRocmVlLmpzIHVzZXNcbiAqIGEgcmlnaHQtaGFuZGVkIGNvb3JkaW5hdGUgc3lzdGVtLCBlbnZpcm9ubWVudCBtYXBzIHVzZWQgaW4gdGhyZWUuanMgd2lsbFxuICogaGF2ZSBwb3MteCBhbmQgbmVnLXggc3dhcHBlZC5cbiAqXG4gKiBUaGUgbG9hZGVkIGN1YmUgdGV4dHVyZSBpcyBpbiBzUkdCIGNvbG9yIHNwYWNlLiBNZWFuaW5nIHtAbGluayBUZXh0dXJlI2NvbG9yU3BhY2V9XG4gKiBpcyBzZXQgdG8gYFNSR0JDb2xvclNwYWNlYCBieSBkZWZhdWx0LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKS5zZXRQYXRoKCAndGV4dHVyZXMvY3ViZU1hcHMvJyApO1xuICogY29uc3QgY3ViZVRleHR1cmUgPSBhd2FpdCBsb2FkZXIubG9hZEFzeW5jKCBbXG4gKiBcdCdweC5wbmcnLCAnbngucG5nJywgJ3B5LnBuZycsICdueS5wbmcnLCAncHoucG5nJywgJ256LnBuZydcbiAqIF0gKTtcbiAqIHNjZW5lLmJhY2tncm91bmQgPSBjdWJlVGV4dHVyZTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgQ3ViZVRleHR1cmVMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGN1YmUgdGV4dHVyZSBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3MgdGhlIGZ1bGx5IGxvYWRlZCBjdWJlIHRleHR1cmVcblx0ICogdG8gdGhlIGBvbkxvYWQoKWAgY2FsbGJhY2suIFRoZSBtZXRob2QgYWxzbyByZXR1cm5zIGEgbmV3IGN1YmUgdGV4dHVyZSBvYmplY3Qgd2hpY2ggY2FuXG5cdCAqIGRpcmVjdGx5IGJlIHVzZWQgZm9yIG1hdGVyaWFsIGNyZWF0aW9uLiBJZiB5b3UgZG8gaXQgdGhpcyB3YXksIHRoZSBjdWJlIHRleHR1cmVcblx0ICogbWF5IHBvcCB1cCBpbiB5b3VyIHNjZW5lIG9uY2UgdGhlIHJlc3BlY3RpdmUgbG9hZGluZyBwcm9jZXNzIGlzIGZpbmlzaGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHVybHMgLSBBcnJheSBvZiA2IFVSTHMgdG8gaW1hZ2VzLCBvbmUgZm9yIGVhY2ggc2lkZSBvZiB0aGVcblx0ICogY3ViZSB0ZXh0dXJlLiBUaGUgdXJscyBzaG91bGQgYmUgc3BlY2lmaWVkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6IHBvcy14LFxuXHQgKiBuZWcteCwgcG9zLXksIG5lZy15LCBwb3MteiwgbmVnLXouIEFuIGFycmF5IG9mIGRhdGEgVVJJcyBhcmUgYWxsb3dlZCBhcyB3ZWxsLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKEN1YmVUZXh0dXJlKX0gb25Mb2FkIC0gRXhlY3V0ZWQgd2hlbiB0aGUgbG9hZGluZyBwcm9jZXNzIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKiBAcGFyYW0ge29uUHJvZ3Jlc3NDYWxsYmFja30gb25Qcm9ncmVzcyAtIFVuc3VwcG9ydGVkIGluIHRoaXMgbG9hZGVyLlxuXHQgKiBAcGFyYW0ge29uRXJyb3JDYWxsYmFja30gb25FcnJvciAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKiBAcmV0dXJuIHtDdWJlVGV4dHVyZX0gVGhlIGN1YmUgdGV4dHVyZS5cblx0ICovXG5cdGxvYWQoIHVybHMsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblx0XHR0ZXh0dXJlLmNvbG9yU3BhY2UgPSBTUkdCQ29sb3JTcGFjZTtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXG5cdFx0bGV0IGxvYWRlZCA9IDA7XG5cblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZSggaSApIHtcblxuXHRcdFx0bG9hZGVyLmxvYWQoIHVybHNbIGkgXSwgZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlc1sgaSBdID0gaW1hZ2U7XG5cblx0XHRcdFx0bG9hZGVkICsrO1xuXG5cdFx0XHRcdGlmICggbG9hZGVkID09PSA2ICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0bG9hZFRleHR1cmUoIGkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGxvYWRpbmcgYmluYXJ5IHRleHR1cmUgZm9ybWF0cyBSR0JFLCBFWFIgb3IgVEdBLlxuICogVGV4dHVyZXMgYXJlIGludGVybmFsbHkgbG9hZGVkIHZpYSB7QGxpbmsgRmlsZUxvYWRlcn0uXG4gKlxuICogRGVyaXZlZCBjbGFzc2VzIGhhdmUgdG8gaW1wbGVtZW50IHRoZSBgcGFyc2UoKWAgbWV0aG9kIHdoaWNoIGhvbGRzIHRoZSBwYXJzaW5nXG4gKiBmb3IgdGhlIHJlc3BlY3RpdmUgZm9ybWF0LlxuICpcbiAqIEBhYnN0cmFjdFxuICogQGF1Z21lbnRzIExvYWRlclxuICovXG5jbGFzcyBEYXRhVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgZGF0YSB0ZXh0dXJlIGxvYWRlci5cblx0ICpcblx0ICogQHBhcmFtIHtMb2FkaW5nTWFuYWdlcn0gW21hbmFnZXJdIC0gVGhlIGxvYWRpbmcgbWFuYWdlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyBsb2FkaW5nIGZyb20gdGhlIGdpdmVuIFVSTCBhbmQgcGFzc2VzIHRoZSBsb2FkZWQgZGF0YSB0ZXh0dXJlXG5cdCAqIHRvIHRoZSBgb25Mb2FkKClgIGNhbGxiYWNrLiBUaGUgbWV0aG9kIGFsc28gcmV0dXJucyBhIG5ldyB0ZXh0dXJlIG9iamVjdCB3aGljaCBjYW5cblx0ICogZGlyZWN0bHkgYmUgdXNlZCBmb3IgbWF0ZXJpYWwgY3JlYXRpb24uIElmIHlvdSBkbyBpdCB0aGlzIHdheSwgdGhlIHRleHR1cmVcblx0ICogbWF5IHBvcCB1cCBpbiB5b3VyIHNjZW5lIG9uY2UgdGhlIHJlc3BlY3RpdmUgbG9hZGluZyBwcm9jZXNzIGlzIGZpbmlzaGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHBhdGgvVVJMIG9mIHRoZSBmaWxlIHRvIGJlIGxvYWRlZC4gVGhpcyBjYW4gYWxzbyBiZSBhIGRhdGEgVVJJLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKERhdGFUZXh0dXJlKX0gb25Mb2FkIC0gRXhlY3V0ZWQgd2hlbiB0aGUgbG9hZGluZyBwcm9jZXNzIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKiBAcGFyYW0ge29uUHJvZ3Jlc3NDYWxsYmFja30gb25Qcm9ncmVzcyAtIEV4ZWN1dGVkIHdoaWxlIHRoZSBsb2FkaW5nIGlzIGluIHByb2dyZXNzLlxuXHQgKiBAcGFyYW0ge29uRXJyb3JDYWxsYmFja30gb25FcnJvciAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKiBAcmV0dXJuIHtEYXRhVGV4dHVyZX0gVGhlIGRhdGEgdGV4dHVyZS5cblx0ICovXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5zZXRXaXRoQ3JlZGVudGlhbHMoIHNjb3BlLndpdGhDcmVkZW50aWFscyApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHRsZXQgdGV4RGF0YTtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHR0ZXhEYXRhID0gc2NvcGUucGFyc2UoIGJ1ZmZlciApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlcnJvciApO1xuXHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZSA9IHRleERhdGEuaW1hZ2U7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleERhdGEuZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhLndpZHRoO1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGEuaGVpZ2h0O1xuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmRhdGEgPSB0ZXhEYXRhLmRhdGE7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZS53cmFwUyA9IHRleERhdGEud3JhcFMgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXHRcdFx0dGV4dHVyZS53cmFwVCA9IHRleERhdGEud3JhcFQgIT09IHVuZGVmaW5lZCA/IHRleERhdGEud3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdFx0XHR0ZXh0dXJlLm1hZ0ZpbHRlciA9IHRleERhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1hZ0ZpbHRlciA6IExpbmVhckZpbHRlcjtcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gdGV4RGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSB0ZXhEYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IHRleERhdGEuYW5pc290cm9weSA6IDE7XG5cblx0XHRcdGlmICggdGV4RGF0YS5jb2xvclNwYWNlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5jb2xvclNwYWNlID0gdGV4RGF0YS5jb2xvclNwYWNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuZmxpcFkgPSB0ZXhEYXRhLmZsaXBZO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IHRleERhdGEuZm9ybWF0O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS50eXBlID0gdGV4RGF0YS50eXBlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YS5taXBtYXBzO1xuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhck1pcG1hcExpbmVhckZpbHRlcjsgLy8gcHJlc3VtYWJseS4uLlxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4RGF0YS5taXBtYXBDb3VudCA9PT0gMSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleERhdGEuZ2VuZXJhdGVNaXBtYXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB0ZXhEYXRhLmdlbmVyYXRlTWlwbWFwcztcblxuXHRcdFx0fVxuXG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUsIHRleERhdGEgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIGxvYWRpbmcgdGV4dHVyZXMuIEltYWdlcyBhcmUgaW50ZXJuYWxseVxuICogbG9hZGVkIHZpYSB7QGxpbmsgSW1hZ2VMb2FkZXJ9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xuICogY29uc3QgdGV4dHVyZSA9IGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoICd0ZXh0dXJlcy9sYW5kX29jZWFuX2ljZV9jbG91ZF8yMDQ4LmpwZycgKTtcbiAqXG4gKiBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBtYXA6dGV4dHVyZSB9ICk7XG4gKiBgYGBcbiAqIFBsZWFzZSBub3RlIHRoYXQgYFRleHR1cmVMb2FkZXJgIGhhcyBkcm9wcGVkIHN1cHBvcnQgZm9yIHByb2dyZXNzXG4gKiBldmVudHMgaW4gYHI4NGAuIEZvciBhIGBUZXh0dXJlTG9hZGVyYCB0aGF0IHN1cHBvcnRzIHByb2dyZXNzIGV2ZW50cywgc2VlXG4gKiBbdGhpcyB0aHJlYWRde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvaXNzdWVzLzEwNDM5I2lzc3VlY29tbWVudC0yOTMyNjAxNDV9LlxuICpcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgVGV4dHVyZUxvYWRlciBleHRlbmRzIExvYWRlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgdGV4dHVyZSBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3MgdGhlIGZ1bGx5IGxvYWRlZCB0ZXh0dXJlXG5cdCAqIHRvIHRoZSBgb25Mb2FkKClgIGNhbGxiYWNrLiBUaGUgbWV0aG9kIGFsc28gcmV0dXJucyBhIG5ldyB0ZXh0dXJlIG9iamVjdCB3aGljaCBjYW5cblx0ICogZGlyZWN0bHkgYmUgdXNlZCBmb3IgbWF0ZXJpYWwgY3JlYXRpb24uIElmIHlvdSBkbyBpdCB0aGlzIHdheSwgdGhlIHRleHR1cmVcblx0ICogbWF5IHBvcCB1cCBpbiB5b3VyIHNjZW5lIG9uY2UgdGhlIHJlc3BlY3RpdmUgbG9hZGluZyBwcm9jZXNzIGlzIGZpbmlzaGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHBhdGgvVVJMIG9mIHRoZSBmaWxlIHRvIGJlIGxvYWRlZC4gVGhpcyBjYW4gYWxzbyBiZSBhIGRhdGEgVVJJLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKFRleHR1cmUpfSBvbkxvYWQgLSBFeGVjdXRlZCB3aGVuIHRoZSBsb2FkaW5nIHByb2Nlc3MgaGFzIGJlZW4gZmluaXNoZWQuXG5cdCAqIEBwYXJhbSB7b25Qcm9ncmVzc0NhbGxiYWNrfSBvblByb2dyZXNzIC0gVW5zdXBwb3J0ZWQgaW4gdGhpcyBsb2FkZXIuXG5cdCAqIEBwYXJhbSB7b25FcnJvckNhbGxiYWNrfSBvbkVycm9yIC0gRXhlY3V0ZWQgd2hlbiBlcnJvcnMgb2NjdXIuXG5cdCAqIEByZXR1cm4ge1RleHR1cmV9IFRoZSB0ZXh0dXJlLlxuXHQgKi9cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdGNvbnN0IGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBpbWFnZSApIHtcblxuXHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlO1xuXHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0b25Mb2FkKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHRcdHJldHVybiB0ZXh0dXJlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGxpZ2h0cyAtIGFsbCBvdGhlciBsaWdodCB0eXBlcyBpbmhlcml0IHRoZVxuICogcHJvcGVydGllcyBhbmQgbWV0aG9kcyBkZXNjcmliZWQgaGVyZS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBMaWdodCBleHRlbmRzIE9iamVjdDNEIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaWdodC5cblx0ICpcblx0ICogQHBhcmFtIHsobnVtYmVyfENvbG9yfHN0cmluZyl9IFtjb2xvcj0weGZmZmZmZl0gLSBUaGUgbGlnaHQncyBjb2xvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlbnNpdHk9MV0gLSBUaGUgbGlnaHQncyBzdHJlbmd0aC9pbnRlbnNpdHkuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSA9IDEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0xpZ2h0ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdMaWdodCc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQncyBjb2xvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0J3MgaW50ZW5zaXR5LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0Ly8gRW1wdHkgaGVyZSBpbiBiYXNlIGNsYXNzOyBzb21lIHN1YmNsYXNzZXMgb3ZlcnJpZGUuXG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTiggbWV0YSApIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oIG1ldGEgKTtcblxuXHRcdGRhdGEub2JqZWN0LmNvbG9yID0gdGhpcy5jb2xvci5nZXRIZXgoKTtcblx0XHRkYXRhLm9iamVjdC5pbnRlbnNpdHkgPSB0aGlzLmludGVuc2l0eTtcblxuXHRcdGlmICggdGhpcy5ncm91bmRDb2xvciAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZ3JvdW5kQ29sb3IgPSB0aGlzLmdyb3VuZENvbG9yLmdldEhleCgpO1xuXG5cdFx0aWYgKCB0aGlzLmRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5kaXN0YW5jZSA9IHRoaXMuZGlzdGFuY2U7XG5cdFx0aWYgKCB0aGlzLmFuZ2xlICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5hbmdsZSA9IHRoaXMuYW5nbGU7XG5cdFx0aWYgKCB0aGlzLmRlY2F5ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5kZWNheSA9IHRoaXMuZGVjYXk7XG5cdFx0aWYgKCB0aGlzLnBlbnVtYnJhICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5wZW51bWJyYSA9IHRoaXMucGVudW1icmE7XG5cblx0XHRpZiAoIHRoaXMuc2hhZG93ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC5zaGFkb3cgPSB0aGlzLnNoYWRvdy50b0pTT04oKTtcblx0XHRpZiAoIHRoaXMudGFyZ2V0ICE9PSB1bmRlZmluZWQgKSBkYXRhLm9iamVjdC50YXJnZXQgPSB0aGlzLnRhcmdldC51dWlkO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBsaWdodCBzb3VyY2UgcG9zaXRpb25lZCBkaXJlY3RseSBhYm92ZSB0aGUgc2NlbmUsIHdpdGggY29sb3IgZmFkaW5nIGZyb21cbiAqIHRoZSBza3kgY29sb3IgdG8gdGhlIGdyb3VuZCBjb2xvci5cbiAqXG4gKiBUaGlzIGxpZ2h0IGNhbm5vdCBiZSB1c2VkIHRvIGNhc3Qgc2hhZG93cy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KCAweGZmZmZiYiwgMHgwODA4MjAsIDEgKTtcbiAqIHNjZW5lLmFkZCggbGlnaHQgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaWdodFxuICovXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgaGVtaXNwaGVyZSBsaWdodC5cblx0ICpcblx0ICogQHBhcmFtIHsobnVtYmVyfENvbG9yfHN0cmluZyl9IFtza3lDb2xvcj0weGZmZmZmZl0gLSBUaGUgbGlnaHQncyBza3kgY29sb3IuXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxDb2xvcnxzdHJpbmcpfSBbZ3JvdW5kQ29sb3I9MHhmZmZmZmZdIC0gVGhlIGxpZ2h0J3MgZ3JvdW5kIGNvbG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2ludGVuc2l0eT0xXSAtIFRoZSBsaWdodCdzIHN0cmVuZ3RoL2ludGVuc2l0eS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHtcblxuXHRcdHN1cGVyKCBza3lDb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSGVtaXNwaGVyZUxpZ2h0ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHQnO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5ERUZBVUxUX1VQICk7XG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaWdodCdzIGdyb3VuZCBjb2xvci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDb2xvcn1cblx0XHQgKi9cblx0XHR0aGlzLmdyb3VuZENvbG9yID0gbmV3IENvbG9yKCBncm91bmRDb2xvciApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoIHNvdXJjZS5ncm91bmRDb2xvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9wcm9qU2NyZWVuTWF0cml4JDEgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfbGlnaHRQb3NpdGlvbldvcmxkJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbG9va1RhcmdldCQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGxpZ2h0IHNoYWRvdyBjbGFzc2VzLiBUaGVzZSBjbGFzc2VzXG4gKiByZXByZXNlbnQgdGhlIHNoYWRvdyBjb25maWd1cmF0aW9uIGZvciBkaWZmZXJlbnQgbGlnaHQgdHlwZXMuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIExpZ2h0U2hhZG93IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBsaWdodCBzaGFkb3cuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgbGlnaHQncyB2aWV3IG9mIHRoZSB3b3JsZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjYW1lcmEgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQncyB2aWV3IG9mIHRoZSB3b3JsZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtDYW1lcmF9XG5cdFx0ICovXG5cdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW50ZW5zaXR5IG9mIHRoZSBzaGFkb3cuIFRoZSBkZWZhdWx0IGlzIGAxYC5cblx0XHQgKiBWYWxpZCB2YWx1ZXMgYXJlIGluIHRoZSByYW5nZSBgWzAsIDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuaW50ZW5zaXR5ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFNoYWRvdyBtYXAgYmlhcywgaG93IG11Y2ggdG8gYWRkIG9yIHN1YnRyYWN0IGZyb20gdGhlIG5vcm1hbGl6ZWQgZGVwdGhcblx0XHQgKiB3aGVuIGRlY2lkaW5nIHdoZXRoZXIgYSBzdXJmYWNlIGlzIGluIHNoYWRvdy5cblx0XHQgKlxuXHRcdCAqIFRoZSBkZWZhdWx0IGlzIGAwYC4gVmVyeSB0aW55IGFkanVzdG1lbnRzIGhlcmUgKGluIHRoZSBvcmRlciBvZiBgMC4wMDAxYClcblx0XHQgKiBtYXkgaGVscCByZWR1Y2UgYXJ0aWZhY3RzIGluIHNoYWRvd3MuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmJpYXMgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBob3cgbXVjaCB0aGUgcG9zaXRpb24gdXNlZCB0byBxdWVyeSB0aGUgc2hhZG93IG1hcCBpcyBvZmZzZXQgYWxvbmdcblx0XHQgKiB0aGUgb2JqZWN0IG5vcm1hbC4gVGhlIGRlZmF1bHQgaXMgYDBgLiBJbmNyZWFzaW5nIHRoaXMgdmFsdWUgY2FuIGJlIHVzZWQgdG9cblx0XHQgKiByZWR1Y2Ugc2hhZG93IGFjbmUgZXNwZWNpYWxseSBpbiBsYXJnZSBzY2VuZXMgd2hlcmUgbGlnaHQgc2hpbmVzIG9udG9cblx0XHQgKiBnZW9tZXRyeSBhdCBhIHNoYWxsb3cgYW5nbGUuIFRoZSBjb3N0IGlzIHRoYXQgc2hhZG93cyBtYXkgYXBwZWFyIGRpc3RvcnRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMubm9ybWFsQmlhcyA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBTZXR0aW5nIHRoaXMgdG8gdmFsdWVzIGdyZWF0ZXIgdGhhbiAxIHdpbGwgYmx1ciB0aGUgZWRnZXMgb2YgdGhlIHNoYWRvdy5cblx0XHQgKiBIaWdoIHZhbHVlcyB3aWxsIGNhdXNlIHVud2FudGVkIGJhbmRpbmcgZWZmZWN0cyBpbiB0aGUgc2hhZG93cyAtIGEgZ3JlYXRlclxuXHRcdCAqIG1hcCBzaXplIHdpbGwgYWxsb3cgZm9yIGEgaGlnaGVyIHZhbHVlIHRvIGJlIHVzZWQgaGVyZSBiZWZvcmUgdGhlc2UgZWZmZWN0c1xuXHRcdCAqIGJlY29tZSB2aXNpYmxlLlxuXHRcdCAqXG5cdFx0ICogVGhlIHByb3BlcnR5IGhhcyBubyBlZmZlY3Qgd2hlbiB0aGUgc2hhZG93IG1hcCB0eXBlIGlzIGBQQ0ZTb2Z0U2hhZG93TWFwYCBhbmRcblx0XHQgKiBhbmQgaXQgaXMgcmVjb21tZW5kZWQgdG8gaW5jcmVhc2Ugc29mdG5lc3MgYnkgZGVjcmVhc2luZyB0aGUgc2hhZG93IG1hcCBzaXplIGluc3RlYWQuXG5cdFx0ICpcblx0XHQgKiBUaGUgcHJvcGVydHkgaGFzIG5vIGVmZmVjdCB3aGVuIHRoZSBzaGFkb3cgbWFwIHR5cGUgaXMgYEJhc2ljU2hhZG93TWFwYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMucmFkaXVzID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbW91bnQgb2Ygc2FtcGxlcyB0byB1c2Ugd2hlbiBibHVycmluZyBhIFZTTSBzaGFkb3cgbWFwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCA4XG5cdFx0ICovXG5cdFx0dGhpcy5ibHVyU2FtcGxlcyA9IDg7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBzaGFkb3cgbWFwLiBIaWdoZXIgdmFsdWVzIGdpdmUgYmV0dGVyIHF1YWxpdHlcblx0XHQgKiBzaGFkb3dzIGF0IHRoZSBjb3N0IG9mIGNvbXB1dGF0aW9uIHRpbWUuIFZhbHVlcyBtdXN0IGJlIHBvd2VycyBvZiB0d28uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKiBAZGVmYXVsdCAoNTEyLDUxMilcblx0XHQgKi9cblx0XHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMiggNTEyLCA1MTIgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkZXB0aCBtYXAgZ2VuZXJhdGVkIHVzaW5nIHRoZSBpbnRlcm5hbCBjYW1lcmE7IGEgbG9jYXRpb24gYmV5b25kIGFcblx0XHQgKiBwaXhlbCdzIGRlcHRoIGlzIGluIHNoYWRvdy4gQ29tcHV0ZWQgaW50ZXJuYWxseSBkdXJpbmcgcmVuZGVyaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9SZW5kZXJUYXJnZXR9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXN0cmlidXRpb24gbWFwIGdlbmVyYXRlZCB1c2luZyB0aGUgaW50ZXJuYWwgY2FtZXJhOyBhbiBvY2NsdXNpb24gaXNcblx0XHQgKiBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBkaXN0cmlidXRpb24gb2YgZGVwdGhzLiBDb21wdXRlZCBpbnRlcm5hbGx5IGR1cmluZ1xuXHRcdCAqIHJlbmRlcmluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/UmVuZGVyVGFyZ2V0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1hcFBhc3MgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogTW9kZWwgdG8gc2hhZG93IGNhbWVyYSBzcGFjZSwgdG8gY29tcHV0ZSBsb2NhdGlvbiBhbmQgZGVwdGggaW4gc2hhZG93IG1hcC5cblx0XHQgKiBUaGlzIGlzIGNvbXB1dGVkIGludGVybmFsbHkgZHVyaW5nIHJlbmRlcmluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNYXRyaXg0fVxuXHRcdCAqL1xuXHRcdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZXMgYXV0b21hdGljIHVwZGF0ZXMgb2YgdGhlIGxpZ2h0J3Mgc2hhZG93LiBJZiB5b3UgZG8gbm90IHJlcXVpcmUgZHluYW1pY1xuXHRcdCAqIGxpZ2h0aW5nIC8gc2hhZG93cywgeW91IG1heSBzZXQgdGhpcyB0byBgZmFsc2VgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIHNoYWRvdyBtYXBzIHdpbGwgYmUgdXBkYXRlZCBpbiB0aGUgbmV4dCBgcmVuZGVyYCBjYWxsLlxuXHRcdCAqIElmIHlvdSBoYXZlIHNldCB7QGxpbmsgTGlnaHRTaGFkb3cjYXV0b1VwZGF0ZX0gdG8gYGZhbHNlYCwgeW91IHdpbGwgbmVlZCB0b1xuXHRcdCAqIHNldCB0aGlzIHByb3BlcnR5IHRvIGB0cnVlYCBhbmQgdGhlbiBtYWtlIGEgcmVuZGVyIGNhbGwgdG8gdXBkYXRlIHRoZSBsaWdodCdzIHNoYWRvdy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cdFx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSAxO1xuXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xuXG5cdFx0XHRuZXcgVmVjdG9yNCggMCwgMCwgMSwgMSApXG5cblx0XHRdO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSByZW5kZXJlciB0byBnZXQgdGhlIG51bWJlciBvZiB2aWV3cG9ydHMgdGhhdCBuZWVkXG5cdCAqIHRvIGJlIHJlbmRlcmVkIGZvciB0aGlzIHNoYWRvdy5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmlld3BvcnQgY291bnQuXG5cdCAqL1xuXHRnZXRWaWV3cG9ydENvdW50KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0Q291bnQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBzaGFkb3cgY2FtZXJhcyBmcnVzdHVtLiBVc2VkIGludGVybmFsbHkgYnkgdGhlIHJlbmRlcmVyIHRvIGN1bGwgb2JqZWN0cy5cblx0ICpcblx0ICogQHJldHVybiB7RnJ1c3R1bX0gVGhlIHNoYWRvdyBjYW1lcmEgZnJ1c3R1bS5cblx0ICovXG5cdGdldEZydXN0dW0oKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJ1c3R1bTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0aGUgbWF0cmljZXMgZm9yIHRoZSBjYW1lcmEgYW5kIHNoYWRvdywgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSByZW5kZXJlci5cblx0ICpcblx0ICogQHBhcmFtIHtMaWdodH0gbGlnaHQgLSBUaGUgbGlnaHQgZm9yIHdoaWNoIHRoZSBzaGFkb3cgaXMgYmVpbmcgcmVuZGVyZWQuXG5cdCAqL1xuXHR1cGRhdGVNYXRyaWNlcyggbGlnaHQgKSB7XG5cblx0XHRjb25zdCBzaGFkb3dDYW1lcmEgPSB0aGlzLmNhbWVyYTtcblx0XHRjb25zdCBzaGFkb3dNYXRyaXggPSB0aGlzLm1hdHJpeDtcblxuXHRcdF9saWdodFBvc2l0aW9uV29ybGQkMS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0c2hhZG93Q2FtZXJhLnBvc2l0aW9uLmNvcHkoIF9saWdodFBvc2l0aW9uV29ybGQkMSApO1xuXG5cdFx0X2xvb2tUYXJnZXQkMS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdHNoYWRvd0NhbWVyYS5sb29rQXQoIF9sb29rVGFyZ2V0JDEgKTtcblx0XHRzaGFkb3dDYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdF9wcm9qU2NyZWVuTWF0cml4JDEubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHR0aGlzLl9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCQxICk7XG5cblx0XHRzaGFkb3dNYXRyaXguc2V0KFxuXHRcdFx0MC41LCAwLjAsIDAuMCwgMC41LFxuXHRcdFx0MC4wLCAwLjUsIDAuMCwgMC41LFxuXHRcdFx0MC4wLCAwLjAsIDAuNSwgMC41LFxuXHRcdFx0MC4wLCAwLjAsIDAuMCwgMS4wXG5cdFx0KTtcblxuXHRcdHNoYWRvd01hdHJpeC5tdWx0aXBseSggX3Byb2pTY3JlZW5NYXRyaXgkMSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHZpZXdwb3J0IGRlZmluaXRpb24gZm9yIHRoZSBnaXZlbiB2aWV3cG9ydCBpbmRleC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZpZXdwb3J0SW5kZXggLSBUaGUgdmlld3BvcnQgaW5kZXguXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjR9IFRoZSB2aWV3cG9ydC5cblx0ICovXG5cdGdldFZpZXdwb3J0KCB2aWV3cG9ydEluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0c1sgdmlld3BvcnRJbmRleCBdO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZnJhbWUgZXh0ZW5kcy5cblx0ICpcblx0ICogQHJldHVybiB7VmVjdG9yMn0gVGhlIGZyYW1lIGV4dGVuZHMuXG5cdCAqL1xuXHRnZXRGcmFtZUV4dGVudHMoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdGlmICggdGhpcy5tYXAgKSB7XG5cblx0XHRcdHRoaXMubWFwLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXBQYXNzICkge1xuXG5cdFx0XHR0aGlzLm1hcFBhc3MuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGxpZ2h0IHNoYWRvdyBpbnN0YW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xpZ2h0U2hhZG93fSBzb3VyY2UgLSBUaGUgbGlnaHQgc2hhZG93IHRvIGNvcHkuXG5cdCAqIEByZXR1cm4ge0xpZ2h0U2hhZG93fSBBIHJlZmVyZW5jZSB0byB0aGlzIGxpZ2h0IHNoYWRvdyBpbnN0YW5jZS5cblx0ICovXG5cdGNvcHkoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuY2FtZXJhID0gc291cmNlLmNhbWVyYS5jbG9uZSgpO1xuXG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xuXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XG5cdFx0dGhpcy5yYWRpdXMgPSBzb3VyY2UucmFkaXVzO1xuXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoIHNvdXJjZS5tYXBTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgbGlnaHQgc2hhZG93IGluc3RhbmNlIHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0xpZ2h0U2hhZG93fSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIGxpZ2h0IHNoYWRvdyBpbnRvIEpTT04uXG5cdCAqXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQSBKU09OIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNlcmlhbGl6ZWQgbGlnaHQgc2hhZG93LlxuXHQgKiBAc2VlIHtAbGluayBPYmplY3RMb2FkZXIjcGFyc2V9XG5cdCAqL1xuXHR0b0pTT04oKSB7XG5cblx0XHRjb25zdCBvYmplY3QgPSB7fTtcblxuXHRcdGlmICggdGhpcy5pbnRlbnNpdHkgIT09IDEgKSBvYmplY3QuaW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHk7XG5cdFx0aWYgKCB0aGlzLmJpYXMgIT09IDAgKSBvYmplY3QuYmlhcyA9IHRoaXMuYmlhcztcblx0XHRpZiAoIHRoaXMubm9ybWFsQmlhcyAhPT0gMCApIG9iamVjdC5ub3JtYWxCaWFzID0gdGhpcy5ub3JtYWxCaWFzO1xuXHRcdGlmICggdGhpcy5yYWRpdXMgIT09IDEgKSBvYmplY3QucmFkaXVzID0gdGhpcy5yYWRpdXM7XG5cdFx0aWYgKCB0aGlzLm1hcFNpemUueCAhPT0gNTEyIHx8IHRoaXMubWFwU2l6ZS55ICE9PSA1MTIgKSBvYmplY3QubWFwU2l6ZSA9IHRoaXMubWFwU2l6ZS50b0FycmF5KCk7XG5cblx0XHRvYmplY3QuY2FtZXJhID0gdGhpcy5jYW1lcmEudG9KU09OKCBmYWxzZSApLm9iamVjdDtcblx0XHRkZWxldGUgb2JqZWN0LmNhbWVyYS5tYXRyaXg7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHNoYWRvdyBjb25maWd1cmF0aW9uIG9mIGRpcmVjdGlvbmFsIGxpZ2h0cy5cbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRTaGFkb3dcbiAqL1xuY2xhc3MgU3BvdExpZ2h0U2hhZG93IGV4dGVuZHMgTGlnaHRTaGFkb3cge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNwb3QgbGlnaHQgc2hhZG93LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA1MCwgMSwgMC41LCA1MDAgKSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1Nwb3RMaWdodFNoYWRvdyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIHRvIGZvY3VzIHRoZSBzaGFkb3cgY2FtZXJhLiBUaGUgY2FtZXJhJ3MgZmllbGQgb2YgdmlldyBpcyBzZXQgYXMgYVxuXHRcdCAqIHBlcmNlbnRhZ2Ugb2YgdGhlIHNwb3RsaWdodCdzIGZpZWxkLW9mLXZpZXcuIFJhbmdlIGlzIGBbMCwgMV1gLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5mb2N1cyA9IDE7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpY2VzKCBsaWdodCApIHtcblxuXHRcdGNvbnN0IGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG5cdFx0Y29uc3QgZm92ID0gUkFEMkRFRyAqIDIgKiBsaWdodC5hbmdsZSAqIHRoaXMuZm9jdXM7XG5cdFx0Y29uc3QgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDtcblx0XHRjb25zdCBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZvdiA9IGZvdjtcblx0XHRcdGNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0XHRjYW1lcmEuZmFyID0gZmFyO1xuXHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdH1cblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpY2VzKCBsaWdodCApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZm9jdXMgPSBzb3VyY2UuZm9jdXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGxpZ2h0IGdldHMgZW1pdHRlZCBmcm9tIGEgc2luZ2xlIHBvaW50IGluIG9uZSBkaXJlY3Rpb24sIGFsb25nIGEgY29uZVxuICogdGhhdCBpbmNyZWFzZXMgaW4gc2l6ZSB0aGUgZnVydGhlciBmcm9tIHRoZSBsaWdodCBpdCBnZXRzLlxuICpcbiAqIFRoaXMgbGlnaHQgY2FuIGNhc3Qgc2hhZG93cyAtIHNlZSB0aGUge0BsaW5rIFNwb3RMaWdodFNoYWRvd30gZm9yIGRldGFpbHMuXG4gKlxuICogYGBganNcbiAqIC8vIHdoaXRlIHNwb3RsaWdodCBzaGluaW5nIGZyb20gdGhlIHNpZGUsIG1vZHVsYXRlZCBieSBhIHRleHR1cmVcbiAqIGNvbnN0IHNwb3RMaWdodCA9IG5ldyBUSFJFRS5TcG90TGlnaHQoIDB4ZmZmZmZmICk7XG4gKiBzcG90TGlnaHQucG9zaXRpb24uc2V0KCAxMDAsIDEwMDAsIDEwMCApO1xuICogc3BvdExpZ2h0Lm1hcCA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZCggdXJsICk7XG4gKlxuICogc3BvdExpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuICogc3BvdExpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gMTAyNDtcbiAqIHNwb3RMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSAxMDI0O1xuICogc3BvdExpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDUwMDtcbiAqIHNwb3RMaWdodC5zaGFkb3cuY2FtZXJhLmZhciA9IDQwMDA7XG4gKiBzcG90TGlnaHQuc2hhZG93LmNhbWVyYS5mb3YgPSAzMDtzXG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRcbiAqL1xuY2xhc3MgU3BvdExpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNwb3QgbGlnaHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxDb2xvcnxzdHJpbmcpfSBbY29sb3I9MHhmZmZmZmZdIC0gVGhlIGxpZ2h0J3MgY29sb3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaW50ZW5zaXR5PTFdIC0gVGhlIGxpZ2h0J3Mgc3RyZW5ndGgvaW50ZW5zaXR5IG1lYXN1cmVkIGluIGNhbmRlbGEgKGNkKS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkaXN0YW5jZT0wXSAtIE1heGltdW0gcmFuZ2Ugb2YgdGhlIGxpZ2h0LiBgMGAgbWVhbnMgbm8gbGltaXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYW5nbGU9TWF0aC5QSS8zXSAtIE1heGltdW0gYW5nbGUgb2YgbGlnaHQgZGlzcGVyc2lvbiBmcm9tIGl0cyBkaXJlY3Rpb24gd2hvc2UgdXBwZXIgYm91bmQgaXMgYE1hdGguUEkvMmAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcGVudW1icmE9MF0gLSBQZXJjZW50IG9mIHRoZSBzcG90bGlnaHQgY29uZSB0aGF0IGlzIGF0dGVudWF0ZWQgZHVlIHRvIHBlbnVtYnJhLiBWYWx1ZSByYW5nZSBpcyBgWzAsMV1gLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RlY2F5PTJdIC0gVGhlIGFtb3VudCB0aGUgbGlnaHQgZGltcyBhbG9uZyB0aGUgZGlzdGFuY2Ugb2YgdGhlIGxpZ2h0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgYW5nbGUgPSBNYXRoLlBJIC8gMywgcGVudW1icmEgPSAwLCBkZWNheSA9IDIgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1Nwb3RMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0JztcblxuXHRcdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuREVGQVVMVF9VUCApO1xuXHRcdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc3BvdCBsaWdodCBwb2ludHMgZnJvbSBpdHMgcG9zaXRpb24gdG8gdGhlXG5cdFx0ICogdGFyZ2V0J3MgcG9zaXRpb24uXG5cdFx0ICpcblx0XHQgKiBGb3IgdGhlIHRhcmdldCdzIHBvc2l0aW9uIHRvIGJlIGNoYW5nZWQgdG8gYW55dGhpbmcgb3RoZXJcblx0XHQgKiB0aGFuIHRoZSBkZWZhdWx0LCBpdCBtdXN0IGJlIGFkZGVkIHRvIHRoZSBzY2VuZS5cblx0XHQgKlxuXHRcdCAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gc2V0IHRoZSB0YXJnZXQgdG8gYmUgYW5vdGhlciAzRCBvYmplY3Rcblx0XHQgKiBpbiB0aGUgc2NlbmUuIFRoZSBsaWdodCB3aWxsIG5vdyB0cmFjayB0aGUgdGFyZ2V0IG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3QzRH1cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogTWF4aW11bSByYW5nZSBvZiB0aGUgbGlnaHQuIGAwYCBtZWFucyBubyBsaW1pdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblxuXHRcdC8qKlxuXHRcdCAqIE1heGltdW0gYW5nbGUgb2YgbGlnaHQgZGlzcGVyc2lvbiBmcm9tIGl0cyBkaXJlY3Rpb24gd2hvc2UgdXBwZXIgYm91bmQgaXMgYE1hdGguUEkvMmAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IE1hdGguUEkvM1xuXHRcdCAqL1xuXHRcdHRoaXMuYW5nbGUgPSBhbmdsZTtcblxuXHRcdC8qKlxuXHRcdCAqIFBlcmNlbnQgb2YgdGhlIHNwb3RsaWdodCBjb25lIHRoYXQgaXMgYXR0ZW51YXRlZCBkdWUgdG8gcGVudW1icmEuXG5cdFx0ICogVmFsdWUgcmFuZ2UgaXMgYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMucGVudW1icmEgPSBwZW51bWJyYTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbW91bnQgdGhlIGxpZ2h0IGRpbXMgYWxvbmcgdGhlIGRpc3RhbmNlIG9mIHRoZSBsaWdodC4gSW4gY29udGV4dCBvZlxuXHRcdCAqIHBoeXNpY2FsbHktY29ycmVjdCByZW5kZXJpbmcgdGhlIGRlZmF1bHQgdmFsdWUgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAyXG5cdFx0ICovXG5cdFx0dGhpcy5kZWNheSA9IGRlY2F5O1xuXG5cdFx0LyoqXG5cdFx0ICogQSB0ZXh0dXJlIHVzZWQgdG8gbW9kdWxhdGUgdGhlIGNvbG9yIG9mIHRoZSBsaWdodC4gVGhlIHNwb3QgbGlnaHRcblx0XHQgKiBjb2xvciBpcyBtaXhlZCB3aXRoIHRoZSBSR0IgdmFsdWUgb2YgdGhpcyB0ZXh0dXJlLCB3aXRoIGEgcmF0aW9cblx0XHQgKiBjb3JyZXNwb25kaW5nIHRvIGl0cyBhbHBoYSB2YWx1ZS4gVGhlIGNvb2tpZS1saWtlIG1hc2tpbmcgZWZmZWN0IGlzXG5cdFx0ICogcmVwcm9kdWNlZCB1c2luZyBwaXhlbCB2YWx1ZXMgKDAsIDAsIDAsIDEtY29va2llX3ZhbHVlKS5cblx0XHQgKlxuXHRcdCAqICpXYXJuaW5nKjogVGhpcyBwcm9wZXJ0eSBpcyBkaXNhYmxlZCBpZiB7QGxpbmsgT2JqZWN0M0QjY2FzdFNoYWRvd30gaXMgc2V0IHRvIGBmYWxzZWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P1RleHR1cmV9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMubWFwID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgcHJvcGVydHkgaG9sZHMgdGhlIGxpZ2h0J3Mgc2hhZG93IGNvbmZpZ3VyYXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7U3BvdExpZ2h0U2hhZG93fVxuXHRcdCAqL1xuXHRcdHRoaXMuc2hhZG93ID0gbmV3IFNwb3RMaWdodFNoYWRvdygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGxpZ2h0J3MgcG93ZXIuIFBvd2VyIGlzIHRoZSBsdW1pbm91cyBwb3dlciBvZiB0aGUgbGlnaHQgbWVhc3VyZWQgaW4gbHVtZW5zIChsbSkuXG5cdCAqICBDaGFuZ2luZyB0aGUgcG93ZXIgd2lsbCBhbHNvIGNoYW5nZSB0aGUgbGlnaHQncyBpbnRlbnNpdHkuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXQgcG93ZXIoKSB7XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsaWdodCdzIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpIGZyb20gaXRzIGludGVuc2l0eSAoaW4gY2FuZGVsYSlcblx0XHQvLyBieSBjb252ZW50aW9uIGZvciBhIHNwb3RsaWdodCwgbHVtaW5vdXMgcG93ZXIgKGxtKSA9IM+AICogbHVtaW5vdXMgaW50ZW5zaXR5IChjZClcblx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xuXG5cdH1cblxuXHRzZXQgcG93ZXIoIHBvd2VyICkge1xuXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zaGFkb3cuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHN1cGVyLmNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuYW5nbGUgPSBzb3VyY2UuYW5nbGU7XG5cdFx0dGhpcy5wZW51bWJyYSA9IHNvdXJjZS5wZW51bWJyYTtcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xuXG5cdFx0dGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBfcHJvalNjcmVlbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcbmNvbnN0IF9saWdodFBvc2l0aW9uV29ybGQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfbG9va1RhcmdldCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzaGFkb3cgY29uZmlndXJhdGlvbiBvZiBwb2ludCBsaWdodHMuXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0U2hhZG93XG4gKi9cbmNsYXNzIFBvaW50TGlnaHRTaGFkb3cgZXh0ZW5kcyBMaWdodFNoYWRvdyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcG9pbnQgbGlnaHQgc2hhZG93LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlciggbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCA5MCwgMSwgMC41LCA1MDAgKSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1BvaW50TGlnaHRTaGFkb3cgPSB0cnVlO1xuXG5cdFx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoIDQsIDIgKTtcblxuXHRcdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSA2O1xuXG5cdFx0dGhpcy5fdmlld3BvcnRzID0gW1xuXHRcdFx0Ly8gVGhlc2Ugdmlld3BvcnRzIG1hcCBhIGN1YmUtbWFwIG9udG8gYSAyRCB0ZXh0dXJlIHdpdGggdGhlXG5cdFx0XHQvLyBmb2xsb3dpbmcgb3JpZW50YXRpb246XG5cdFx0XHQvL1xuXHRcdFx0Ly8gIHh6WFpcblx0XHRcdC8vICAgeSBZXG5cdFx0XHQvL1xuXHRcdFx0Ly8gWCAtIFBvc2l0aXZlIHggZGlyZWN0aW9uXG5cdFx0XHQvLyB4IC0gTmVnYXRpdmUgeCBkaXJlY3Rpb25cblx0XHRcdC8vIFkgLSBQb3NpdGl2ZSB5IGRpcmVjdGlvblxuXHRcdFx0Ly8geSAtIE5lZ2F0aXZlIHkgZGlyZWN0aW9uXG5cdFx0XHQvLyBaIC0gUG9zaXRpdmUgeiBkaXJlY3Rpb25cblx0XHRcdC8vIHogLSBOZWdhdGl2ZSB6IGRpcmVjdGlvblxuXG5cdFx0XHQvLyBwb3NpdGl2ZSBYXG5cdFx0XHRuZXcgVmVjdG9yNCggMiwgMSwgMSwgMSApLFxuXHRcdFx0Ly8gbmVnYXRpdmUgWFxuXHRcdFx0bmV3IFZlY3RvcjQoIDAsIDEsIDEsIDEgKSxcblx0XHRcdC8vIHBvc2l0aXZlIFpcblx0XHRcdG5ldyBWZWN0b3I0KCAzLCAxLCAxLCAxICksXG5cdFx0XHQvLyBuZWdhdGl2ZSBaXG5cdFx0XHRuZXcgVmVjdG9yNCggMSwgMSwgMSwgMSApLFxuXHRcdFx0Ly8gcG9zaXRpdmUgWVxuXHRcdFx0bmV3IFZlY3RvcjQoIDMsIDAsIDEsIDEgKSxcblx0XHRcdC8vIG5lZ2F0aXZlIFlcblx0XHRcdG5ldyBWZWN0b3I0KCAxLCAwLCAxLCAxIClcblx0XHRdO1xuXG5cdFx0dGhpcy5fY3ViZURpcmVjdGlvbnMgPSBbXG5cdFx0XHRuZXcgVmVjdG9yMyggMSwgMCwgMCApLCBuZXcgVmVjdG9yMyggLTEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDAsIDEgKSxcblx0XHRcdG5ldyBWZWN0b3IzKCAwLCAwLCAtMSApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgLTEsIDAgKVxuXHRcdF07XG5cblx0XHR0aGlzLl9jdWJlVXBzID0gW1xuXHRcdFx0bmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSxcblx0XHRcdG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAwLCAxICksXHRuZXcgVmVjdG9yMyggMCwgMCwgLTEgKVxuXHRcdF07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGUgdGhlIG1hdHJpY2VzIGZvciB0aGUgY2FtZXJhIGFuZCBzaGFkb3csIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgcmVuZGVyZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGlnaHR9IGxpZ2h0IC0gVGhlIGxpZ2h0IGZvciB3aGljaCB0aGUgc2hhZG93IGlzIGJlaW5nIHJlbmRlcmVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3ZpZXdwb3J0SW5kZXg9MF0gLSBUaGUgdmlld3BvcnQgaW5kZXguXG5cdCAqL1xuXHR1cGRhdGVNYXRyaWNlcyggbGlnaHQsIHZpZXdwb3J0SW5kZXggPSAwICkge1xuXG5cdFx0Y29uc3QgY2FtZXJhID0gdGhpcy5jYW1lcmE7XG5cdFx0Y29uc3Qgc2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXg7XG5cblx0XHRjb25zdCBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmYXIgIT09IGNhbWVyYS5mYXIgKSB7XG5cblx0XHRcdGNhbWVyYS5mYXIgPSBmYXI7XG5cdFx0XHRjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0fVxuXG5cdFx0X2xpZ2h0UG9zaXRpb25Xb3JsZC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0Y2FtZXJhLnBvc2l0aW9uLmNvcHkoIF9saWdodFBvc2l0aW9uV29ybGQgKTtcblxuXHRcdF9sb29rVGFyZ2V0LmNvcHkoIGNhbWVyYS5wb3NpdGlvbiApO1xuXHRcdF9sb29rVGFyZ2V0LmFkZCggdGhpcy5fY3ViZURpcmVjdGlvbnNbIHZpZXdwb3J0SW5kZXggXSApO1xuXHRcdGNhbWVyYS51cC5jb3B5KCB0aGlzLl9jdWJlVXBzWyB2aWV3cG9ydEluZGV4IF0gKTtcblx0XHRjYW1lcmEubG9va0F0KCBfbG9va1RhcmdldCApO1xuXHRcdGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0c2hhZG93TWF0cml4Lm1ha2VUcmFuc2xhdGlvbiggLSBfbGlnaHRQb3NpdGlvbldvcmxkLngsIC0gX2xpZ2h0UG9zaXRpb25Xb3JsZC55LCAtIF9saWdodFBvc2l0aW9uV29ybGQueiApO1xuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHR0aGlzLl9mcnVzdHVtLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgbGlnaHQgdGhhdCBnZXRzIGVtaXR0ZWQgZnJvbSBhIHNpbmdsZSBwb2ludCBpbiBhbGwgZGlyZWN0aW9ucy4gQSBjb21tb25cbiAqIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRvIHJlcGxpY2F0ZSB0aGUgbGlnaHQgZW1pdHRlZCBmcm9tIGEgYmFyZVxuICogbGlnaHRidWxiLlxuICpcbiAqIFRoaXMgbGlnaHQgY2FuIGNhc3Qgc2hhZG93cyAtIHNlZSB0aGUge0BsaW5rIFBvaW50TGlnaHRTaGFkb3d9IGZvciBkZXRhaWxzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KCAweGZmMDAwMCwgMSwgMTAwICk7XG4gKiBsaWdodC5wb3NpdGlvbi5zZXQoIDUwLCA1MCwgNTAgKTtcbiAqIHNjZW5lLmFkZCggbGlnaHQgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaWdodFxuICovXG5jbGFzcyBQb2ludExpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvaW50IGxpZ2h0LlxuXHQgKlxuXHQgKiBAcGFyYW0geyhudW1iZXJ8Q29sb3J8c3RyaW5nKX0gW2NvbG9yPTB4ZmZmZmZmXSAtIFRoZSBsaWdodCdzIGNvbG9yLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2ludGVuc2l0eT0xXSAtIFRoZSBsaWdodCdzIHN0cmVuZ3RoL2ludGVuc2l0eSBtZWFzdXJlZCBpbiBjYW5kZWxhIChjZCkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGlzdGFuY2U9MF0gLSBNYXhpbXVtIHJhbmdlIG9mIHRoZSBsaWdodC4gYDBgIG1lYW5zIG5vIGxpbWl0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RlY2F5PTJdIC0gVGhlIGFtb3VudCB0aGUgbGlnaHQgZGltcyBhbG9uZyB0aGUgZGlzdGFuY2Ugb2YgdGhlIGxpZ2h0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHksIGRpc3RhbmNlID0gMCwgZGVjYXkgPSAyICkge1xuXG5cdFx0c3VwZXIoIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNQb2ludExpZ2h0ID0gdHJ1ZTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRcdC8qKlxuXHRcdCAqIFdoZW4gZGlzdGFuY2UgaXMgemVybywgbGlnaHQgd2lsbCBhdHRlbnVhdGUgYWNjb3JkaW5nIHRvIGludmVyc2Utc3F1YXJlXG5cdFx0ICogbGF3IHRvIGluZmluaXRlIGRpc3RhbmNlLiBXaGVuIGRpc3RhbmNlIGlzIG5vbi16ZXJvLCBsaWdodCB3aWxsIGF0dGVudWF0ZVxuXHRcdCAqIGFjY29yZGluZyB0byBpbnZlcnNlLXNxdWFyZSBsYXcgdW50aWwgbmVhciB0aGUgZGlzdGFuY2UgY3V0b2ZmLCB3aGVyZSBpdFxuXHRcdCAqIHdpbGwgdGhlbiBhdHRlbnVhdGUgcXVpY2tseSBhbmQgc21vb3RobHkgdG8gMC4gSW5oZXJlbnRseSwgY3V0b2ZmcyBhcmUgbm90XG5cdFx0ICogcGh5c2ljYWxseSBjb3JyZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFtb3VudCB0aGUgbGlnaHQgZGltcyBhbG9uZyB0aGUgZGlzdGFuY2Ugb2YgdGhlIGxpZ2h0LiBJbiBjb250ZXh0IG9mXG5cdFx0ICogcGh5c2ljYWxseS1jb3JyZWN0IHJlbmRlcmluZyB0aGUgZGVmYXVsdCB2YWx1ZSBzaG91bGQgbm90IGJlIGNoYW5nZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDJcblx0XHQgKi9cblx0XHR0aGlzLmRlY2F5ID0gZGVjYXk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGhvbGRzIHRoZSBsaWdodCdzIHNoYWRvdyBjb25maWd1cmF0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1BvaW50TGlnaHRTaGFkb3d9XG5cdFx0ICovXG5cdFx0dGhpcy5zaGFkb3cgPSBuZXcgUG9pbnRMaWdodFNoYWRvdygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhlIGxpZ2h0J3MgcG93ZXIuIFBvd2VyIGlzIHRoZSBsdW1pbm91cyBwb3dlciBvZiB0aGUgbGlnaHQgbWVhc3VyZWQgaW4gbHVtZW5zIChsbSkuXG5cdCAqIENoYW5naW5nIHRoZSBwb3dlciB3aWxsIGFsc28gY2hhbmdlIHRoZSBsaWdodCdzIGludGVuc2l0eS5cblx0ICpcblx0ICogQHR5cGUge251bWJlcn1cblx0ICovXG5cdGdldCBwb3dlcigpIHtcblxuXHRcdC8vIGNvbXB1dGUgdGhlIGxpZ2h0J3MgbHVtaW5vdXMgcG93ZXIgKGluIGx1bWVucykgZnJvbSBpdHMgaW50ZW5zaXR5IChpbiBjYW5kZWxhKVxuXHRcdC8vIGZvciBhbiBpc290cm9waWMgbGlnaHQgc291cmNlLCBsdW1pbm91cyBwb3dlciAobG0pID0gNCDPgCBsdW1pbm91cyBpbnRlbnNpdHkgKGNkKVxuXHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIDQgKiBNYXRoLlBJO1xuXG5cdH1cblxuXHRzZXQgcG93ZXIoIHBvd2VyICkge1xuXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gY2FuZGVsYSkgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyAoIDQgKiBNYXRoLlBJICk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLnNoYWRvdy5kaXNwb3NlKCk7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZGlzdGFuY2UgPSBzb3VyY2UuZGlzdGFuY2U7XG5cdFx0dGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTtcblxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ2FtZXJhIHRoYXQgdXNlcyBbb3J0aG9ncmFwaGljIHByb2plY3Rpb25de0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL09ydGhvZ3JhcGhpY19wcm9qZWN0aW9ufS5cbiAqXG4gKiBJbiB0aGlzIHByb2plY3Rpb24gbW9kZSwgYW4gb2JqZWN0J3Mgc2l6ZSBpbiB0aGUgcmVuZGVyZWQgaW1hZ2Ugc3RheXNcbiAqIGNvbnN0YW50IHJlZ2FyZGxlc3Mgb2YgaXRzIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYS4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gKiBmb3IgcmVuZGVyaW5nIDJEIHNjZW5lcyBhbmQgVUkgZWxlbWVudHMsIGFtb25nc3Qgb3RoZXIgdGhpbmdzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKCB3aWR0aCAvIC0gMiwgd2lkdGggLyAyLCBoZWlnaHQgLyAyLCBoZWlnaHQgLyAtIDIsIDEsIDEwMDAgKTtcbiAqIHNjZW5lLmFkZCggY2FtZXJhICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgQ2FtZXJhXG4gKi9cbmNsYXNzIE9ydGhvZ3JhcGhpY0NhbWVyYSBleHRlbmRzIENhbWVyYSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgb3J0aG9ncmFwaGljIGNhbWVyYS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtsZWZ0PS0xXSAtIFRoZSBsZWZ0IHBsYW5lIG9mIHRoZSBjYW1lcmEncyBmcnVzdHVtLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JpZ2h0PTFdIC0gVGhlIHJpZ2h0IHBsYW5lIG9mIHRoZSBjYW1lcmEncyBmcnVzdHVtLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3RvcD0xXSAtIFRoZSB0b3AgcGxhbmUgb2YgdGhlIGNhbWVyYSdzIGZydXN0dW0uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbYm90dG9tPS0xXSAtIFRoZSBib3R0b20gcGxhbmUgb2YgdGhlIGNhbWVyYSdzIGZydXN0dW0uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbmVhcj0wLjFdIC0gVGhlIGNhbWVyYSdzIG5lYXIgcGxhbmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZmFyPTIwMDBdIC0gVGhlIGNhbWVyYSdzIGZhciBwbGFuZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsZWZ0ID0gLTEsIHJpZ2h0ID0gMSwgdG9wID0gMSwgYm90dG9tID0gLTEsIG5lYXIgPSAwLjEsIGZhciA9IDIwMDAgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc09ydGhvZ3JhcGhpY0NhbWVyYSA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnT3J0aG9ncmFwaGljQ2FtZXJhJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB6b29tIGZhY3RvciBvZiB0aGUgY2FtZXJhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy56b29tID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlcHJlc2VudHMgdGhlIGZydXN0dW0gd2luZG93IHNwZWNpZmljYXRpb24uIFRoaXMgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBlZGl0ZWRcblx0XHQgKiBkaXJlY3RseSBidXQgdmlhIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYSNzZXRWaWV3T2Zmc2V0fSBhbmQge0BsaW5rIFBlcnNwZWN0aXZlQ2FtZXJhI2NsZWFyVmlld09mZnNldH0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P09iamVjdH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsZWZ0IHBsYW5lIG9mIHRoZSBjYW1lcmEncyBmcnVzdHVtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtMVxuXHRcdCAqL1xuXHRcdHRoaXMubGVmdCA9IGxlZnQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmlnaHQgcGxhbmUgb2YgdGhlIGNhbWVyYSdzIGZydXN0dW0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnJpZ2h0ID0gcmlnaHQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdG9wIHBsYW5lIG9mIHRoZSBjYW1lcmEncyBmcnVzdHVtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy50b3AgPSB0b3A7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYm90dG9tIHBsYW5lIG9mIHRoZSBjYW1lcmEncyBmcnVzdHVtLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtMVxuXHRcdCAqL1xuXHRcdHRoaXMuYm90dG9tID0gYm90dG9tO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbWVyYSdzIG5lYXIgcGxhbmUuIFRoZSB2YWxpZCByYW5nZSBpcyBncmVhdGVyIHRoYW4gYDBgXG5cdFx0ICogYW5kIGxlc3MgdGhhbiB0aGUgY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgT3J0aG9ncmFwaGljQ2FtZXJhI2Zhcn0uXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQsIHVubGlrZSBmb3IgdGhlIHtAbGluayBQZXJzcGVjdGl2ZUNhbWVyYX0sIGAwYCBpcyBhXG5cdFx0ICogdmFsaWQgdmFsdWUgZm9yIGFuIG9ydGhvZ3JhcGhpYyBjYW1lcmEncyBuZWFyIHBsYW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwLjFcblx0XHQgKi9cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbWVyYSdzIGZhciBwbGFuZS4gTXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlXG5cdFx0ICogY3VycmVudCB2YWx1ZSBvZiB7QGxpbmsgT3J0aG9ncmFwaGljQ2FtZXJhI25lYXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAyMDAwXG5cdFx0ICovXG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5sZWZ0ID0gc291cmNlLmxlZnQ7XG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcblx0XHR0aGlzLnRvcCA9IHNvdXJjZS50b3A7XG5cdFx0dGhpcy5ib3R0b20gPSBzb3VyY2UuYm90dG9tO1xuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmdWxsV2lkdGggLSBUaGUgZnVsbCB3aWR0aCBvZiBtdWx0aXZpZXcgc2V0dXAuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmdWxsSGVpZ2h0IC0gVGhlIGZ1bGwgaGVpZ2h0IG9mIG11bHRpdmlldyBzZXR1cC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgaG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIHN1YmNhbWVyYS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgb2Zmc2V0IG9mIHRoZSBzdWJjYW1lcmEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiBzdWJjYW1lcmEuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHN1YmNhbWVyYS5cblx0ICogQHNlZSB7QGxpbmsgUGVyc3BlY3RpdmVDYW1lcmEjc2V0Vmlld09mZnNldH1cblx0ICovXG5cdHNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIHZpZXcgb2Zmc2V0IGZyb20gdGhlIHByb2plY3Rpb24gbWF0cml4LlxuXHQgKi9cblx0Y2xlYXJWaWV3T2Zmc2V0KCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNhbWVyYSdzIHByb2plY3Rpb24gbWF0cml4LiBNdXN0IGJlIGNhbGxlZCBhZnRlciBhbnkgY2hhbmdlIG9mXG5cdCAqIGNhbWVyYSBwcm9wZXJ0aWVzLlxuXHQgKi9cblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcblxuXHRcdGNvbnN0IGR4ID0gKCB0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0ICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHRjb25zdCBkeSA9ICggdGhpcy50b3AgLSB0aGlzLmJvdHRvbSApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0Y29uc3QgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7XG5cdFx0Y29uc3QgY3kgPSAoIHRoaXMudG9wICsgdGhpcy5ib3R0b20gKSAvIDI7XG5cblx0XHRsZXQgbGVmdCA9IGN4IC0gZHg7XG5cdFx0bGV0IHJpZ2h0ID0gY3ggKyBkeDtcblx0XHRsZXQgdG9wID0gY3kgKyBkeTtcblx0XHRsZXQgYm90dG9tID0gY3kgLSBkeTtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICYmIHRoaXMudmlldy5lbmFibGVkICkge1xuXG5cdFx0XHRjb25zdCBzY2FsZVcgPSAoIHRoaXMucmlnaHQgLSB0aGlzLmxlZnQgKSAvIHRoaXMudmlldy5mdWxsV2lkdGggLyB0aGlzLnpvb207XG5cdFx0XHRjb25zdCBzY2FsZUggPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvIHRoaXMudmlldy5mdWxsSGVpZ2h0IC8gdGhpcy56b29tO1xuXG5cdFx0XHRsZWZ0ICs9IHNjYWxlVyAqIHRoaXMudmlldy5vZmZzZXRYO1xuXHRcdFx0cmlnaHQgPSBsZWZ0ICsgc2NhbGVXICogdGhpcy52aWV3LndpZHRoO1xuXHRcdFx0dG9wIC09IHNjYWxlSCAqIHRoaXMudmlldy5vZmZzZXRZO1xuXHRcdFx0Ym90dG9tID0gdG9wIC0gc2NhbGVIICogdGhpcy52aWV3LmhlaWdodDtcblxuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIsIHRoaXMuY29vcmRpbmF0ZVN5c3RlbSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCB0aGlzLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHR9XG5cblx0dG9KU09OKCBtZXRhICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IHN1cGVyLnRvSlNPTiggbWV0YSApO1xuXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcblx0XHRkYXRhLm9iamVjdC5sZWZ0ID0gdGhpcy5sZWZ0O1xuXHRcdGRhdGEub2JqZWN0LnJpZ2h0ID0gdGhpcy5yaWdodDtcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcblx0XHRkYXRhLm9iamVjdC5ib3R0b20gPSB0aGlzLmJvdHRvbTtcblx0XHRkYXRhLm9iamVjdC5uZWFyID0gdGhpcy5uZWFyO1xuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSBkYXRhLm9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIHRoaXMudmlldyApO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgc2hhZG93IGNvbmZpZ3VyYXRpb24gb2YgZGlyZWN0aW9uYWwgbGlnaHRzLlxuICpcbiAqIEBhdWdtZW50cyBMaWdodFNoYWRvd1xuICovXG5jbGFzcyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGV4dGVuZHMgTGlnaHRTaGFkb3cge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGRpcmVjdGlvbmFsIGxpZ2h0IHNoYWRvdy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC01LCA1LCA1LCAtNSwgMC41LCA1MDAgKSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0RpcmVjdGlvbmFsTGlnaHRTaGFkb3cgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgbGlnaHQgdGhhdCBnZXRzIGVtaXR0ZWQgaW4gYSBzcGVjaWZpYyBkaXJlY3Rpb24uIFRoaXMgbGlnaHQgd2lsbCBiZWhhdmVcbiAqIGFzIHRob3VnaCBpdCBpcyBpbmZpbml0ZWx5IGZhciBhd2F5IGFuZCB0aGUgcmF5cyBwcm9kdWNlZCBmcm9tIGl0IGFyZSBhbGxcbiAqIHBhcmFsbGVsLiBUaGUgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRvIHNpbXVsYXRlIGRheWxpZ2h0OyB0aGUgc3VuIGlzXG4gKiBmYXIgZW5vdWdoIGF3YXkgdGhhdCBpdHMgcG9zaXRpb24gY2FuIGJlIGNvbnNpZGVyZWQgdG8gYmUgaW5maW5pdGUsIGFuZFxuICogYWxsIGxpZ2h0IHJheXMgY29taW5nIGZyb20gaXQgYXJlIHBhcmFsbGVsLlxuICpcbiAqIEEgY29tbW9uIHBvaW50IG9mIGNvbmZ1c2lvbiBmb3IgZGlyZWN0aW9uYWwgbGlnaHRzIGlzIHRoYXQgc2V0dGluZyB0aGVcbiAqIHJvdGF0aW9uIGhhcyBubyBlZmZlY3QuIFRoaXMgaXMgYmVjYXVzZSB0aHJlZS5qcydzIERpcmVjdGlvbmFsTGlnaHQgaXMgdGhlXG4gKiBlcXVpdmFsZW50IHRvIHdoYXQgaXMgb2Z0ZW4gY2FsbGVkIGEgJ1RhcmdldCBEaXJlY3QgTGlnaHQnIGluIG90aGVyXG4gKiBhcHBsaWNhdGlvbnMuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGl0cyBkaXJlY3Rpb24gaXMgY2FsY3VsYXRlZCBhcyBwb2ludGluZyBmcm9tIHRoZSBsaWdodCdzXG4gKiB7QGxpbmsgT2JqZWN0M0QjcG9zaXRpb259IHRvIHRoZSB7QGxpbmsgRGlyZWN0aW9uYWxMaWdodCN0YXJnZXR9IHBvc2l0aW9uXG4gKiAoYXMgb3Bwb3NlZCB0byBhICdGcmVlIERpcmVjdCBMaWdodCcgdGhhdCBqdXN0IGhhcyBhIHJvdGF0aW9uXG4gKiBjb21wb25lbnQpLlxuICpcbiAqIFRoaXMgbGlnaHQgY2FuIGNhc3Qgc2hhZG93cyAtIHNlZSB0aGUge0BsaW5rIERpcmVjdGlvbmFsTGlnaHRTaGFkb3d9IGZvciBkZXRhaWxzLlxuICpcbiAqIGBgYGpzXG4gKiAvLyBXaGl0ZSBkaXJlY3Rpb25hbCBsaWdodCBhdCBoYWxmIGludGVuc2l0eSBzaGluaW5nIGZyb20gdGhlIHRvcC5cbiAqIGNvbnN0IGRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCggMHhmZmZmZmYsIDAuNSApO1xuICogc2NlbmUuYWRkKCBkaXJlY3Rpb25hbExpZ2h0ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRcbiAqL1xuY2xhc3MgRGlyZWN0aW9uYWxMaWdodCBleHRlbmRzIExpZ2h0IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBkaXJlY3Rpb25hbCBsaWdodC5cblx0ICpcblx0ICogQHBhcmFtIHsobnVtYmVyfENvbG9yfHN0cmluZyl9IFtjb2xvcj0weGZmZmZmZl0gLSBUaGUgbGlnaHQncyBjb2xvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlbnNpdHk9MV0gLSBUaGUgbGlnaHQncyBzdHJlbmd0aC9pbnRlbnNpdHkuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRcdHN1cGVyKCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzRGlyZWN0aW9uYWxMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnRGlyZWN0aW9uYWxMaWdodCc7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRFRkFVTFRfVVAgKTtcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRpcmVjdGlvbmFsIGxpZ2h0IHBvaW50cyBmcm9tIGl0cyBwb3NpdGlvbiB0byB0aGVcblx0XHQgKiB0YXJnZXQncyBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqIEZvciB0aGUgdGFyZ2V0J3MgcG9zaXRpb24gdG8gYmUgY2hhbmdlZCB0byBhbnl0aGluZyBvdGhlclxuXHRcdCAqIHRoYW4gdGhlIGRlZmF1bHQsIGl0IG11c3QgYmUgYWRkZWQgdG8gdGhlIHNjZW5lLlxuXHRcdCAqXG5cdFx0ICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgdGhlIHRhcmdldCB0byBiZSBhbm90aGVyIDNEIG9iamVjdFxuXHRcdCAqIGluIHRoZSBzY2VuZS4gVGhlIGxpZ2h0IHdpbGwgbm93IHRyYWNrIHRoZSB0YXJnZXQgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDNEfVxuXHRcdCAqL1xuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIHByb3BlcnR5IGhvbGRzIHRoZSBsaWdodCdzIHNoYWRvdyBjb25maWd1cmF0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0RpcmVjdGlvbmFsTGlnaHRTaGFkb3d9XG5cdFx0ICovXG5cdFx0dGhpcy5zaGFkb3cgPSBuZXcgRGlyZWN0aW9uYWxMaWdodFNoYWRvdygpO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5zaGFkb3cuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpO1xuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhpcyBsaWdodCBnbG9iYWxseSBpbGx1bWluYXRlcyBhbGwgb2JqZWN0cyBpbiB0aGUgc2NlbmUgZXF1YWxseS5cbiAqXG4gKiBJdCBjYW5ub3QgYmUgdXNlZCB0byBjYXN0IHNoYWRvd3MgYXMgaXQgZG9lcyBub3QgaGF2ZSBhIGRpcmVjdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KCAweDQwNDA0MCApOyAvLyBzb2Z0IHdoaXRlIGxpZ2h0XG4gKiBzY2VuZS5hZGQoIGxpZ2h0ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTGlnaHRcbiAqL1xuY2xhc3MgQW1iaWVudExpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGFtYmllbnQgbGlnaHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxDb2xvcnxzdHJpbmcpfSBbY29sb3I9MHhmZmZmZmZdIC0gVGhlIGxpZ2h0J3MgY29sb3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaW50ZW5zaXR5PTFdIC0gVGhlIGxpZ2h0J3Mgc3RyZW5ndGgvaW50ZW5zaXR5LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0FtYmllbnRMaWdodCA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnQW1iaWVudExpZ2h0JztcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGVtaXRzIGxpZ2h0IHVuaWZvcm1seSBhY3Jvc3MgdGhlIGZhY2UgYSByZWN0YW5ndWxhciBwbGFuZS5cbiAqIFRoaXMgbGlnaHQgdHlwZSBjYW4gYmUgdXNlZCB0byBzaW11bGF0ZSBsaWdodCBzb3VyY2VzIHN1Y2ggYXMgYnJpZ2h0XG4gKiB3aW5kb3dzIG9yIHN0cmlwIGxpZ2h0aW5nLlxuICpcbiAqIEltcG9ydGFudCBOb3RlczpcbiAqXG4gKiAtIFRoZXJlIGlzIG5vIHNoYWRvdyBzdXBwb3J0LlxuICogLSBPbmx5IFBCUiBtYXRlcmlhbHMgYXJlIHN1cHBvcnRlZC5cbiAqIC0gWW91IGhhdmUgdG8gaW5jbHVkZSBgUmVjdEFyZWFMaWdodFVuaWZvcm1zTGliYCAoYFdlYkdMUmVuZGVyZXJgKSBvciBgUmVjdEFyZWFMaWdodFRleHR1cmVzTGliYCAoYFdlYkdQVVJlbmRlcmVyYClcbiAqIGludG8geW91ciBhcHAgYW5kIGluaXQgdGhlIHVuaWZvcm1zL3RleHR1cmVzLlxuICpcbiAqIGBgYGpzXG4gKiBSZWN0QXJlYUxpZ2h0VW5pZm9ybXNMaWIuaW5pdCgpOyAvLyBvbmx5IHJlbGV2YW50IGZvciBXZWJHTFJlbmRlcmVyXG4gKiBUSFJFRS5SZWN0QXJlYUxpZ2h0Tm9kZS5zZXRMVEMoIFJlY3RBcmVhTGlnaHRUZXh0dXJlc0xpYi5pbml0KCkgKTsgLy8gIG9ubHkgcmVsZXZhbnQgZm9yIFdlYkdQVVJlbmRlcmVyXG4gKlxuICogY29uc3QgaW50ZW5zaXR5ID0gMTsgY29uc3Qgd2lkdGggPSAxMDsgY29uc3QgaGVpZ2h0ID0gMTA7XG4gKiBjb25zdCByZWN0TGlnaHQgPSBuZXcgVEhSRUUuUmVjdEFyZWFMaWdodCggMHhmZmZmZmYsIGludGVuc2l0eSwgd2lkdGgsIGhlaWdodCApO1xuICogcmVjdExpZ2h0LnBvc2l0aW9uLnNldCggNSwgNSwgMCApO1xuICogcmVjdExpZ2h0Lmxvb2tBdCggMCwgMCwgMCApO1xuICogc2NlbmUuYWRkKCByZWN0TGlnaHQgKVxuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0XG4gKi9cbmNsYXNzIFJlY3RBcmVhTGlnaHQgZXh0ZW5kcyBMaWdodCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXJlYSBsaWdodC5cblx0ICpcblx0ICogQHBhcmFtIHsobnVtYmVyfENvbG9yfHN0cmluZyl9IFtjb2xvcj0weGZmZmZmZl0gLSBUaGUgbGlnaHQncyBjb2xvci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtpbnRlbnNpdHk9MV0gLSBUaGUgbGlnaHQncyBzdHJlbmd0aC9pbnRlbnNpdHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd2lkdGg9MTBdIC0gVGhlIHdpZHRoIG9mIHRoZSBsaWdodC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MTBdIC0gVGhlIGhlaWdodCBvZiB0aGUgbGlnaHQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggY29sb3IsIGludGVuc2l0eSwgd2lkdGggPSAxMCwgaGVpZ2h0ID0gMTAgKSB7XG5cblx0XHRzdXBlciggY29sb3IsIGludGVuc2l0eSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1JlY3RBcmVhTGlnaHQgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHQnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHdpZHRoIG9mIHRoZSBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMTBcblx0XHQgKi9cblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaGVpZ2h0IG9mIHRoZSBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMTBcblx0XHQgKi9cblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBsaWdodCdzIHBvd2VyLiBQb3dlciBpcyB0aGUgbHVtaW5vdXMgcG93ZXIgb2YgdGhlIGxpZ2h0IG1lYXN1cmVkIGluIGx1bWVucyAobG0pLlxuXHQgKiBDaGFuZ2luZyB0aGUgcG93ZXIgd2lsbCBhbHNvIGNoYW5nZSB0aGUgbGlnaHQncyBpbnRlbnNpdHkuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXQgcG93ZXIoKSB7XG5cblx0XHQvLyBjb21wdXRlIHRoZSBsaWdodCdzIGx1bWlub3VzIHBvd2VyIChpbiBsdW1lbnMpIGZyb20gaXRzIGludGVuc2l0eSAoaW4gbml0cylcblx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQgKiBNYXRoLlBJO1xuXG5cdH1cblxuXHRzZXQgcG93ZXIoIHBvd2VyICkge1xuXG5cdFx0Ly8gc2V0IHRoZSBsaWdodCdzIGludGVuc2l0eSAoaW4gbml0cykgZnJvbSB0aGUgZGVzaXJlZCBsdW1pbm91cyBwb3dlciAoaW4gbHVtZW5zKVxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyAoIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIE1hdGguUEkgKTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLndpZHRoID0gc291cmNlLndpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gc291cmNlLmhlaWdodDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC53aWR0aCA9IHRoaXMud2lkdGg7XG5cdFx0ZGF0YS5vYmplY3QuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgdGhpcmQtb3JkZXIgc3BoZXJpY2FsIGhhcm1vbmljcyAoU0gpLiBMaWdodCBwcm9iZXMgdXNlIHRoaXMgY2xhc3NcbiAqIHRvIGVuY29kZSBsaWdodGluZyBpbmZvcm1hdGlvbi5cbiAqXG4gKiAtIFByaW1hcnkgcmVmZXJlbmNlOiB7QGxpbmsgaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmfVxuICogLSBTZWNvbmRhcnkgcmVmZXJlbmNlOiB7QGxpbmsgaHR0cHM6Ly93d3cucHBzbG9hbi5vcmcvcHVibGljYXRpb25zL1N0dXBpZFNIMzYucGRmfVxuICovXG5jbGFzcyBTcGhlcmljYWxIYXJtb25pY3MzIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzcGhlcmljYWwgaGFybW9uaWNzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU3BoZXJpY2FsSGFybW9uaWNzMyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcnJheSBob2xkaW5nIHRoZSAoOSkgU0ggY29lZmZpY2llbnRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PFZlY3RvcjM+fVxuXHRcdCAqL1xuXHRcdHRoaXMuY29lZmZpY2llbnRzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50cy5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBTSCBjb2VmZmljaWVudHMgdG8gdGhpcyBpbnN0YW5jZSBieSBjb3B5aW5nXG5cdCAqIHRoZSB2YWx1ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMz59IGNvZWZmaWNpZW50cyAtIFRoZSBTSCBjb2VmZmljaWVudHMuXG5cdCAqIEByZXR1cm4ge1NwaGVyaWNhbEhhcm1vbmljczN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc3BoZXJpY2FsIGhhcm1vbmljcy5cblx0ICovXG5cdHNldCggY29lZmZpY2llbnRzICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5jb3B5KCBjb2VmZmljaWVudHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGFsbCBTSCBjb2VmZmljaWVudHMgdG8gYDBgLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTcGhlcmljYWxIYXJtb25pY3MzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbCBoYXJtb25pY3MuXG5cdCAqL1xuXHR6ZXJvKCkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgZ2l2ZW4gbm9ybWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IG5vcm1hbCAtIFRoZSBub3JtYWwgdmVjdG9yIChhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoKVxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgcmFkaWFuY2UuXG5cdCAqL1xuXHRnZXRBdCggbm9ybWFsLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0Y29uc3QgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdGNvbnN0IGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHQvLyBiYW5kIDBcblx0XHR0YXJnZXQuY29weSggY29lZmZbIDAgXSApLm11bHRpcGx5U2NhbGFyKCAwLjI4MjA5NSApO1xuXG5cdFx0Ly8gYmFuZCAxXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDEgXSwgMC40ODg2MDMgKiB5ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDIgXSwgMC40ODg2MDMgKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDMgXSwgMC40ODg2MDMgKiB4ICk7XG5cblx0XHQvLyBiYW5kIDJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNCBdLCAxLjA5MjU0OCAqICggeCAqIHkgKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA1IF0sIDEuMDkyNTQ4ICogKCB5ICogeiApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDYgXSwgMC4zMTUzOTIgKiAoIDMuMCAqIHogKiB6IC0gMS4wICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNyBdLCAxLjA5MjU0OCAqICggeCAqIHogKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA4IF0sIDAuNTQ2Mjc0ICogKCB4ICogeCAtIHkgKiB5ICkgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBpcnJhZGlhbmNlIChyYWRpYW5jZSBjb252b2x2ZWQgd2l0aCBjb3NpbmUgbG9iZSkgaW4gdGhlXG5cdCAqIGRpcmVjdGlvbiBvZiB0aGUgZ2l2ZW4gbm9ybWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IG5vcm1hbCAtIFRoZSBub3JtYWwgdmVjdG9yIChhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoKVxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgaXJyYWRpYW5jZS5cblx0ICovXG5cdGdldElycmFkaWFuY2VBdCggbm9ybWFsLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxuXG5cdFx0Y29uc3QgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdGNvbnN0IGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHQvLyBiYW5kIDBcblx0XHR0YXJnZXQuY29weSggY29lZmZbIDAgXSApLm11bHRpcGx5U2NhbGFyKCAwLjg4NjIyNyApOyAvLyDPgCAqIDAuMjgyMDk1XG5cblx0XHQvLyBiYW5kIDFcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMSBdLCAyLjAgKiAwLjUxMTY2NCAqIHkgKTsgLy8gKCAyICogz4AgLyAzICkgKiAwLjQ4ODYwM1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAyIF0sIDIuMCAqIDAuNTExNjY0ICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAzIF0sIDIuMCAqIDAuNTExNjY0ICogeCApO1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDQgXSwgMi4wICogMC40MjkwNDMgKiB4ICogeSApOyAvLyAoIM+AIC8gNCApICogMS4wOTI1NDhcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNSBdLCAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDYgXSwgMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4ICk7IC8vICggz4AgLyA0ICkgKiAwLjMxNTM5MiAqIDNcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNyBdLCAyLjAgKiAwLjQyOTA0MyAqIHggKiB6ICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDggXSwgMC40MjkwNDMgKiAoIHggKiB4IC0geSAqIHkgKSApOyAvLyAoIM+AIC8gNCApICogMC41NDYyNzRcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiBTSCB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NwaGVyaWNhbEhhcm1vbmljczN9IHNoIC0gVGhlIFNIIHRvIGFkZC5cblx0ICogQHJldHVybiB7U3BoZXJpY2FsSGFybW9uaWNzM30gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmljYWwgaGFybW9uaWNzLlxuXHQgKi9cblx0YWRkKCBzaCApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uYWRkKCBzaC5jb2VmZmljaWVudHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBIGNvbnZlbmllbmNlIG1ldGhvZCBmb3IgcGVyZm9ybWluZyB7QGxpbmsgU3BoZXJpY2FsSGFybW9uaWNzMyNhZGR9IGFuZFxuXHQgKiB7QGxpbmsgU3BoZXJpY2FsSGFybW9uaWNzMyNzY2FsZX0gYXQgb25jZS5cblx0ICpcblx0ICogQHBhcmFtIHtTcGhlcmljYWxIYXJtb25pY3MzfSBzaCAtIFRoZSBTSCB0byBhZGQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxlIGZhY3Rvci5cblx0ICogQHJldHVybiB7U3BoZXJpY2FsSGFybW9uaWNzM30gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmljYWwgaGFybW9uaWNzLlxuXHQgKi9cblx0YWRkU2NhbGVkU0goIHNoLCBzICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5hZGRTY2FsZWRWZWN0b3IoIHNoLmNvZWZmaWNpZW50c1sgaSBdLCBzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNjYWxlcyB0aGlzIFNIIGJ5IHRoZSBnaXZlbiBzY2FsZSBmYWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzIC0gVGhlIHNjYWxlIGZhY3Rvci5cblx0ICogQHJldHVybiB7U3BoZXJpY2FsSGFybW9uaWNzM30gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmljYWwgaGFybW9uaWNzLlxuXHQgKi9cblx0c2NhbGUoIHMgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLm11bHRpcGx5U2NhbGFyKCBzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIExpbmVhciBpbnRlcnBvbGF0ZXMgYmV0d2VlbiB0aGUgZ2l2ZW4gU0ggYW5kIHRoaXMgaW5zdGFuY2UgYnkgdGhlIGdpdmVuXG5cdCAqIGFscGhhIGZhY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtTcGhlcmljYWxIYXJtb25pY3MzfSBzaCAtIFRoZSBTSCB0byBpbnRlcnBvbGF0ZSB3aXRoLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWxwaGEgLSBUaGUgYWxwaGEgZmFjdG9yLlxuXHQgKiBAcmV0dXJuIHtTcGhlcmljYWxIYXJtb25pY3MzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbCBoYXJtb25pY3MuXG5cdCAqL1xuXHRsZXJwKCBzaCwgYWxwaGEgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLmxlcnAoIHNoLmNvZWZmaWNpZW50c1sgaSBdLCBhbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIHNwaGVyaWNhbCBoYXJtb25pY3MgaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NwaGVyaWNhbEhhcm1vbmljczN9IHNoIC0gVGhlIHNwaGVyaWNhbCBoYXJtb25pY3MgdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBzcGhlcmljYWwgaGFybW9uaWNzIGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggc2ggKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRpZiAoICEgdGhpcy5jb2VmZmljaWVudHNbIGkgXS5lcXVhbHMoIHNoLmNvZWZmaWNpZW50c1sgaSBdICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBzcGhlcmljYWwgaGFybW9uaWNzIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJpY2FsSGFybW9uaWNzM30gc2ggLSBUaGUgc3BoZXJpY2FsIGhhcm1vbmljcyB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtTcGhlcmljYWxIYXJtb25pY3MzfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbCBoYXJtb25pY3MuXG5cdCAqL1xuXHRjb3B5KCBzaCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggc2guY29lZmZpY2llbnRzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IHNwaGVyaWNhbCBoYXJtb25pY3Mgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7U3BoZXJpY2FsSGFybW9uaWNzM30gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBTSCBjb2VmZmljaWVudHMgb2YgdGhpcyBpbnN0YW5jZSBmcm9tIHRoZSBnaXZlbiBhcnJheS5cblx0ICpcblx0ICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBhcnJheSAtIEFuIGFycmF5IGhvbGRpbmcgdGhlIFNIIGNvZWZmaWNpZW50cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtvZmZzZXQ9MF0gLSBUaGUgYXJyYXkgb2Zmc2V0IHdoZXJlIHRvIHN0YXJ0IGNvcHlpbmcuXG5cdCAqIEByZXR1cm4ge1NwaGVyaWNhbEhhcm1vbmljczN9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHRjb25zdCBjb2VmZmljaWVudHMgPSB0aGlzLmNvZWZmaWNpZW50cztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGNvZWZmaWNpZW50c1sgaSBdLmZyb21BcnJheSggYXJyYXksIG9mZnNldCArICggaSAqIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIFNIIGNvZWZmaWNpZW50cywgb3IgY29waWVzIHRoZW0gaW50byB0aGUgcHJvdmlkZWRcblx0ICogYXJyYXkuIFRoZSBjb2VmZmljaWVudHMgYXJlIHJlcHJlc2VudGVkIGFzIG51bWJlcnMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW2FycmF5PVtdXSAtIFRoZSB0YXJnZXQgYXJyYXkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gVGhlIGFycmF5IG9mZnNldCB3aGVyZSB0byBzdGFydCBjb3B5aW5nLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBBbiBhcnJheSB3aXRoIGZsYXQgU0ggY29lZmZpY2llbnRzLlxuXHQgKi9cblx0dG9BcnJheSggYXJyYXkgPSBbXSwgb2Zmc2V0ID0gMCApIHtcblxuXHRcdGNvbnN0IGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0Y29lZmZpY2llbnRzWyBpIF0udG9BcnJheSggYXJyYXksIG9mZnNldCArICggaSAqIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIFNIIGJhc2lzIGZvciB0aGUgZ2l2ZW4gbm9ybWFsIHZlY3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBub3JtYWwgLSBUaGUgbm9ybWFsLlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHNoQmFzaXMgLSBUaGUgdGFyZ2V0IGFycmF5IGhvbGRpbmcgdGhlIFNIIGJhc2lzLlxuXHQgKi9cblx0c3RhdGljIGdldEJhc2lzQXQoIG5vcm1hbCwgc2hCYXNpcyApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHRjb25zdCB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xuXG5cdFx0Ly8gYmFuZCAwXG5cdFx0c2hCYXNpc1sgMCBdID0gMC4yODIwOTU7XG5cblx0XHQvLyBiYW5kIDFcblx0XHRzaEJhc2lzWyAxIF0gPSAwLjQ4ODYwMyAqIHk7XG5cdFx0c2hCYXNpc1sgMiBdID0gMC40ODg2MDMgKiB6O1xuXHRcdHNoQmFzaXNbIDMgXSA9IDAuNDg4NjAzICogeDtcblxuXHRcdC8vIGJhbmQgMlxuXHRcdHNoQmFzaXNbIDQgXSA9IDEuMDkyNTQ4ICogeCAqIHk7XG5cdFx0c2hCYXNpc1sgNSBdID0gMS4wOTI1NDggKiB5ICogejtcblx0XHRzaEJhc2lzWyA2IF0gPSAwLjMxNTM5MiAqICggMyAqIHogKiB6IC0gMSApO1xuXHRcdHNoQmFzaXNbIDcgXSA9IDEuMDkyNTQ4ICogeCAqIHo7XG5cdFx0c2hCYXNpc1sgOCBdID0gMC41NDYyNzQgKiAoIHggKiB4IC0geSAqIHkgKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBMaWdodCBwcm9iZXMgYXJlIGFuIGFsdGVybmF0aXZlIHdheSBvZiBhZGRpbmcgbGlnaHQgdG8gYSAzRCBzY2VuZS4gVW5saWtlXG4gKiBjbGFzc2ljYWwgbGlnaHQgc291cmNlcyAoZS5nLiBkaXJlY3Rpb25hbCwgcG9pbnQgb3Igc3BvdCBsaWdodHMpLCBsaWdodFxuICogcHJvYmVzIGRvIG5vdCBlbWl0IGxpZ2h0LiBJbnN0ZWFkIHRoZXkgc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgbGlnaHRcbiAqIHBhc3NpbmcgdGhyb3VnaCAzRCBzcGFjZS4gRHVyaW5nIHJlbmRlcmluZywgdGhlIGxpZ2h0IHRoYXQgaGl0cyBhIDNEXG4gKiBvYmplY3QgaXMgYXBwcm94aW1hdGVkIGJ5IHVzaW5nIHRoZSBkYXRhIGZyb20gdGhlIGxpZ2h0IHByb2JlLlxuICpcbiAqIExpZ2h0IHByb2JlcyBhcmUgdXN1YWxseSBjcmVhdGVkIGZyb20gKHJhZGlhbmNlKSBlbnZpcm9ubWVudCBtYXBzLiBUaGVcbiAqIGNsYXNzIHtAbGluayBMaWdodFByb2JlR2VuZXJhdG9yfSBjYW4gYmUgdXNlZCB0byBjcmVhdGUgbGlnaHQgcHJvYmVzIGZyb21cbiAqIGN1YmUgdGV4dHVyZXMgb3IgcmVuZGVyIHRhcmdldHMuIEhvd2V2ZXIsIGxpZ2h0IGVzdGltYXRpb24gZGF0YSBjb3VsZCBhbHNvXG4gKiBiZSBwcm92aWRlZCBpbiBvdGhlciBmb3JtcyBlLmcuIGJ5IFdlYlhSLiBUaGlzIGVuYWJsZXMgdGhlIHJlbmRlcmluZyBvZlxuICogYXVnbWVudGVkIHJlYWxpdHkgY29udGVudCB0aGF0IHJlYWN0cyB0byByZWFsIHdvcmxkIGxpZ2h0aW5nLlxuICpcbiAqIFRoZSBjdXJyZW50IHByb2JlIGltcGxlbWVudGF0aW9uIGluIHRocmVlLmpzIHN1cHBvcnRzIHNvLWNhbGxlZCBkaWZmdXNlXG4gKiBsaWdodCBwcm9iZXMuIFRoaXMgdHlwZSBvZiBsaWdodCBwcm9iZSBpcyBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBhblxuICogaXJyYWRpYW5jZSBlbnZpcm9ubWVudCBtYXAuXG4gKlxuICogQGF1Z21lbnRzIExpZ2h0XG4gKi9cbmNsYXNzIExpZ2h0UHJvYmUgZXh0ZW5kcyBMaWdodCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbGlnaHQgcHJvYmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJpY2FsSGFybW9uaWNzM30gc2ggLSBUaGUgc3BoZXJpY2FsIGhhcm1vbmljcyB3aGljaCByZXByZXNlbnRzIGVuY29kZWQgbGlnaHRpbmcgaW5mb3JtYXRpb24uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbaW50ZW5zaXR5PTFdIC0gVGhlIGxpZ2h0J3Mgc3RyZW5ndGgvaW50ZW5zaXR5LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNoID0gbmV3IFNwaGVyaWNhbEhhcm1vbmljczMoKSwgaW50ZW5zaXR5ID0gMSApIHtcblxuXHRcdHN1cGVyKCB1bmRlZmluZWQsIGludGVuc2l0eSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0xpZ2h0UHJvYmUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBsaWdodCBwcm9iZSB1c2VzIHNwaGVyaWNhbCBoYXJtb25pY3MgdG8gZW5jb2RlIGxpZ2h0aW5nIGluZm9ybWF0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1NwaGVyaWNhbEhhcm1vbmljczN9XG5cdFx0ICovXG5cdFx0dGhpcy5zaCA9IHNoO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuc2guY29weSggc291cmNlLnNoICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlc2VyaWFsaXplcyB0aGUgbGlnaHQgcHJvdmUgZnJvbSB0aGUgZ2l2ZW4gSlNPTi5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiBob2xkaW5nIHRoZSBzZXJpYWxpemVkIGxpZ2h0IHByb2JlLlxuXHQgKiBAcmV0dXJuIHtMaWdodFByb2JlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGxpZ2h0IHByb2JlLlxuXHQgKi9cblx0ZnJvbUpTT04oIGpzb24gKSB7XG5cblx0XHR0aGlzLmludGVuc2l0eSA9IGpzb24uaW50ZW5zaXR5OyAvLyBUT0RPOiBNb3ZlIHRoaXMgYml0IHRvIExpZ2h0LmZyb21KU09OKCk7XG5cdFx0dGhpcy5zaC5mcm9tQXJyYXkoIGpzb24uc2ggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR0b0pTT04oIG1ldGEgKSB7XG5cblx0XHRjb25zdCBkYXRhID0gc3VwZXIudG9KU09OKCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5zaCA9IHRoaXMuc2gudG9BcnJheSgpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQ2xhc3MgZm9yIGxvYWRpbmcgZ2VvbWV0cmllcy4gVGhlIGZpbGVzIGFyZSBpbnRlcm5hbGx5XG4gKiBsb2FkZWQgdmlhIHtAbGluayBGaWxlTG9hZGVyfS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLk1hdGVyaWFsTG9hZGVyKCk7XG4gKiBjb25zdCBtYXRlcmlhbCA9IGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoICdtYXRlcmlhbC5qc29uJyApO1xuICogYGBgXG4gKiBUaGlzIGxvYWRlciBkb2VzIG5vdCBzdXBwb3J0IG5vZGUgbWF0ZXJpYWxzLiBVc2Uge0BsaW5rIE5vZGVNYXRlcmlhbExvYWRlcn0gaW5zdGVhZC5cbiAqXG4gKiBAYXVnbWVudHMgTG9hZGVyXG4gKi9cbmNsYXNzIE1hdGVyaWFsTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBtYXRlcmlhbCBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0XHQvKipcblx0XHQgKiBBIGRpY3Rpb25hcnkgaG9sZGluZyB0ZXh0dXJlcyB1c2VkIGJ5IHRoZSBtYXRlcmlhbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLFRleHR1cmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZXMgPSB7fTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyBsb2FkaW5nIGZyb20gdGhlIGdpdmVuIFVSTCBhbmQgcGFzcyB0aGUgbG9hZGVkIG1hdGVyaWFsIHRvIHRoZSBgb25Mb2FkKClgIGNhbGxiYWNrLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHBhdGgvVVJMIG9mIHRoZSBmaWxlIHRvIGJlIGxvYWRlZC4gVGhpcyBjYW4gYWxzbyBiZSBhIGRhdGEgVVJJLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKE1hdGVyaWFsKX0gb25Mb2FkIC0gRXhlY3V0ZWQgd2hlbiB0aGUgbG9hZGluZyBwcm9jZXNzIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKiBAcGFyYW0ge29uUHJvZ3Jlc3NDYWxsYmFja30gb25Qcm9ncmVzcyAtIEV4ZWN1dGVkIHdoaWxlIHRoZSBsb2FkaW5nIGlzIGluIHByb2dyZXNzLlxuXHQgKiBAcGFyYW0ge29uRXJyb3JDYWxsYmFja30gb25FcnJvciAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKi9cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlcXVlc3RIZWFkZXIoIHNjb3BlLnJlcXVlc3RIZWFkZXIgKTtcblx0XHRsb2FkZXIuc2V0V2l0aENyZWRlbnRpYWxzKCBzY29wZS53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggSlNPTi5wYXJzZSggdGV4dCApICkgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGFyc2VzIHRoZSBnaXZlbiBKU09OIG9iamVjdCBhbmQgcmV0dXJucyBhIG1hdGVyaWFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0ganNvbiAtIFRoZSBzZXJpYWxpemVkIG1hdGVyaWFsLlxuXHQgKiBAcmV0dXJuIHtNYXRlcmlhbH0gVGhlIHBhcnNlZCBtYXRlcmlhbC5cblx0ICovXG5cdHBhcnNlKCBqc29uICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSB0aGlzLnRleHR1cmVzO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZSggbmFtZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSB0aGlzLmNyZWF0ZU1hdGVyaWFsRnJvbVR5cGUoIGpzb24udHlwZSApO1xuXG5cdFx0aWYgKCBqc29uLnV1aWQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnV1aWQgPSBqc29uLnV1aWQ7XG5cdFx0aWYgKCBqc29uLm5hbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5hbWUgPSBqc29uLm5hbWU7XG5cdFx0aWYgKCBqc29uLmNvbG9yICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuY29sb3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNvbG9yLnNldEhleCgganNvbi5jb2xvciApO1xuXHRcdGlmICgganNvbi5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzcyA9IGpzb24ucm91Z2huZXNzO1xuXHRcdGlmICgganNvbi5tZXRhbG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1ldGFsbmVzcyA9IGpzb24ubWV0YWxuZXNzO1xuXHRcdGlmICgganNvbi5zaGVlbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2hlZW4gPSBqc29uLnNoZWVuO1xuXHRcdGlmICgganNvbi5zaGVlbkNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGVlbkNvbG9yID0gbmV3IENvbG9yKCkuc2V0SGV4KCBqc29uLnNoZWVuQ29sb3IgKTtcblx0XHRpZiAoIGpzb24uc2hlZW5Sb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzID0ganNvbi5zaGVlblJvdWdobmVzcztcblx0XHRpZiAoIGpzb24uZW1pc3NpdmUgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbC5lbWlzc2l2ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmUuc2V0SGV4KCBqc29uLmVtaXNzaXZlICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuc3BlY3VsYXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyLnNldEhleCgganNvbi5zcGVjdWxhciApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhckludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHkgPSBqc29uLnNwZWN1bGFySW50ZW5zaXR5O1xuXHRcdGlmICgganNvbi5zcGVjdWxhckNvbG9yICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvci5zZXRIZXgoIGpzb24uc3BlY3VsYXJDb2xvciApO1xuXHRcdGlmICgganNvbi5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoaW5pbmVzcyA9IGpzb24uc2hpbmluZXNzO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdCA9IGpzb24uY2xlYXJjb2F0O1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IGpzb24uY2xlYXJjb2F0Um91Z2huZXNzO1xuXHRcdGlmICgganNvbi5kaXNwZXJzaW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwZXJzaW9uID0ganNvbi5kaXNwZXJzaW9uO1xuXHRcdGlmICgganNvbi5pcmlkZXNjZW5jZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSBqc29uLmlyaWRlc2NlbmNlO1xuXHRcdGlmICgganNvbi5pcmlkZXNjZW5jZUlPUiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuaXJpZGVzY2VuY2VJT1IgPSBqc29uLmlyaWRlc2NlbmNlSU9SO1xuXHRcdGlmICgganNvbi5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlID0ganNvbi5pcmlkZXNjZW5jZVRoaWNrbmVzc1JhbmdlO1xuXHRcdGlmICgganNvbi50cmFuc21pc3Npb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA9IGpzb24udHJhbnNtaXNzaW9uO1xuXHRcdGlmICgganNvbi50aGlja25lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRoaWNrbmVzcyA9IGpzb24udGhpY2tuZXNzO1xuXHRcdGlmICgganNvbi5hdHRlbnVhdGlvbkRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hdHRlbnVhdGlvbkRpc3RhbmNlID0ganNvbi5hdHRlbnVhdGlvbkRpc3RhbmNlO1xuXHRcdGlmICgganNvbi5hdHRlbnVhdGlvbkNvbG9yICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvci5zZXRIZXgoIGpzb24uYXR0ZW51YXRpb25Db2xvciApO1xuXHRcdGlmICgganNvbi5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbmlzb3Ryb3B5ID0ganNvbi5hbmlzb3Ryb3B5O1xuXHRcdGlmICgganNvbi5hbmlzb3Ryb3B5Um90YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFuaXNvdHJvcHlSb3RhdGlvbiA9IGpzb24uYW5pc290cm9weVJvdGF0aW9uO1xuXHRcdGlmICgganNvbi5mb2cgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZvZyA9IGpzb24uZm9nO1xuXHRcdGlmICgganNvbi5mbGF0U2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLmZsYXRTaGFkaW5nO1xuXHRcdGlmICgganNvbi5ibGVuZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRpbmcgPSBqc29uLmJsZW5kaW5nO1xuXHRcdGlmICgganNvbi5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb21iaW5lID0ganNvbi5jb21iaW5lO1xuXHRcdGlmICgganNvbi5zaWRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaWRlID0ganNvbi5zaWRlO1xuXHRcdGlmICgganNvbi5zaGFkb3dTaWRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaGFkb3dTaWRlID0ganNvbi5zaGFkb3dTaWRlO1xuXHRcdGlmICgganNvbi5vcGFjaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5vcGFjaXR5ID0ganNvbi5vcGFjaXR5O1xuXHRcdGlmICgganNvbi50cmFuc3BhcmVudCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBqc29uLnRyYW5zcGFyZW50O1xuXHRcdGlmICgganNvbi5hbHBoYVRlc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhVGVzdCA9IGpzb24uYWxwaGFUZXN0O1xuXHRcdGlmICgganNvbi5hbHBoYUhhc2ggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhSGFzaCA9IGpzb24uYWxwaGFIYXNoO1xuXHRcdGlmICgganNvbi5kZXB0aEZ1bmMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoRnVuYyA9IGpzb24uZGVwdGhGdW5jO1xuXHRcdGlmICgganNvbi5kZXB0aFRlc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoVGVzdCA9IGpzb24uZGVwdGhUZXN0O1xuXHRcdGlmICgganNvbi5kZXB0aFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFdyaXRlID0ganNvbi5kZXB0aFdyaXRlO1xuXHRcdGlmICgganNvbi5jb2xvcldyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb2xvcldyaXRlID0ganNvbi5jb2xvcldyaXRlO1xuXHRcdGlmICgganNvbi5ibGVuZFNyYyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRTcmMgPSBqc29uLmJsZW5kU3JjO1xuXHRcdGlmICgganNvbi5ibGVuZERzdCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmREc3QgPSBqc29uLmJsZW5kRHN0O1xuXHRcdGlmICgganNvbi5ibGVuZEVxdWF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uID0ganNvbi5ibGVuZEVxdWF0aW9uO1xuXHRcdGlmICgganNvbi5ibGVuZFNyY0FscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZFNyY0FscGhhID0ganNvbi5ibGVuZFNyY0FscGhhO1xuXHRcdGlmICgganNvbi5ibGVuZERzdEFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZERzdEFscGhhID0ganNvbi5ibGVuZERzdEFscGhhO1xuXHRcdGlmICgganNvbi5ibGVuZEVxdWF0aW9uQWxwaGEgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSA9IGpzb24uYmxlbmRFcXVhdGlvbkFscGhhO1xuXHRcdGlmICgganNvbi5ibGVuZENvbG9yICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWwuYmxlbmRDb2xvciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRDb2xvci5zZXRIZXgoIGpzb24uYmxlbmRDb2xvciApO1xuXHRcdGlmICgganNvbi5ibGVuZEFscGhhICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ibGVuZEFscGhhID0ganNvbi5ibGVuZEFscGhhO1xuXHRcdGlmICgganNvbi5zdGVuY2lsV3JpdGVNYXNrICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsV3JpdGVNYXNrID0ganNvbi5zdGVuY2lsV3JpdGVNYXNrO1xuXHRcdGlmICgganNvbi5zdGVuY2lsRnVuYyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbEZ1bmMgPSBqc29uLnN0ZW5jaWxGdW5jO1xuXHRcdGlmICgganNvbi5zdGVuY2lsUmVmICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsUmVmID0ganNvbi5zdGVuY2lsUmVmO1xuXHRcdGlmICgganNvbi5zdGVuY2lsRnVuY01hc2sgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxGdW5jTWFzayA9IGpzb24uc3RlbmNpbEZ1bmNNYXNrO1xuXHRcdGlmICgganNvbi5zdGVuY2lsRmFpbCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbEZhaWwgPSBqc29uLnN0ZW5jaWxGYWlsO1xuXHRcdGlmICgganNvbi5zdGVuY2lsWkZhaWwgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCA9IGpzb24uc3RlbmNpbFpGYWlsO1xuXHRcdGlmICgganNvbi5zdGVuY2lsWlBhc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxaUGFzcyA9IGpzb24uc3RlbmNpbFpQYXNzO1xuXHRcdGlmICgganNvbi5zdGVuY2lsV3JpdGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxXcml0ZSA9IGpzb24uc3RlbmNpbFdyaXRlO1xuXG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lID0ganNvbi53aXJlZnJhbWU7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoID0ganNvbi53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmVjYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVjYXAgPSBqc29uLndpcmVmcmFtZUxpbmVjYXA7XG5cdFx0aWYgKCBqc29uLndpcmVmcmFtZUxpbmVqb2luICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5lam9pbiA9IGpzb24ud2lyZWZyYW1lTGluZWpvaW47XG5cblx0XHRpZiAoIGpzb24ucm90YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdGF0aW9uID0ganNvbi5yb3RhdGlvbjtcblxuXHRcdGlmICgganNvbi5saW5ld2lkdGggIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpbmV3aWR0aCA9IGpzb24ubGluZXdpZHRoO1xuXHRcdGlmICgganNvbi5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplO1xuXHRcdGlmICgganNvbi5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5nYXBTaXplID0ganNvbi5nYXBTaXplO1xuXHRcdGlmICgganNvbi5zY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2NhbGUgPSBqc29uLnNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQgPSBqc29uLnBvbHlnb25PZmZzZXQ7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzID0ganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIGpzb24uZGl0aGVyaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXRoZXJpbmcgPSBqc29uLmRpdGhlcmluZztcblxuXHRcdGlmICgganNvbi5hbHBoYVRvQ292ZXJhZ2UgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSA9IGpzb24uYWxwaGFUb0NvdmVyYWdlO1xuXHRcdGlmICgganNvbi5wcmVtdWx0aXBsaWVkQWxwaGEgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSA9IGpzb24ucHJlbXVsdGlwbGllZEFscGhhO1xuXHRcdGlmICgganNvbi5mb3JjZVNpbmdsZVBhc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZvcmNlU2luZ2xlUGFzcyA9IGpzb24uZm9yY2VTaW5nbGVQYXNzO1xuXG5cdFx0aWYgKCBqc29uLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZpc2libGUgPSBqc29uLnZpc2libGU7XG5cblx0XHRpZiAoIGpzb24udG9uZU1hcHBlZCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudG9uZU1hcHBlZCA9IGpzb24udG9uZU1hcHBlZDtcblxuXHRcdGlmICgganNvbi51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xuXG5cdFx0aWYgKCBqc29uLnZlcnRleENvbG9ycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiBqc29uLnZlcnRleENvbG9ycyA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwudmVydGV4Q29sb3JzID0gKCBqc29uLnZlcnRleENvbG9ycyA+IDAgKSA/IHRydWUgOiBmYWxzZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBqc29uLnZlcnRleENvbG9ycztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gU2hhZGVyIE1hdGVyaWFsXG5cblx0XHRpZiAoIGpzb24udW5pZm9ybXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggY29uc3QgbmFtZSBpbiBqc29uLnVuaWZvcm1zICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm0gPSBqc29uLnVuaWZvcm1zWyBuYW1lIF07XG5cblx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXSA9IHt9O1xuXG5cdFx0XHRcdHN3aXRjaCAoIHVuaWZvcm0udHlwZSApIHtcblxuXHRcdFx0XHRcdGNhc2UgJ3QnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IGdldFRleHR1cmUoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnYyc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IENvbG9yKCkuc2V0SGV4KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3YyJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2Myc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjQnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ20zJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgTWF0cml4MygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdtNCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlZmluZXMgPSBqc29uLmRlZmluZXM7XG5cdFx0aWYgKCBqc29uLnZlcnRleFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmVydGV4U2hhZGVyID0ganNvbi52ZXJ0ZXhTaGFkZXI7XG5cdFx0aWYgKCBqc29uLmZyYWdtZW50U2hhZGVyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciA9IGpzb24uZnJhZ21lbnRTaGFkZXI7XG5cdFx0aWYgKCBqc29uLmdsc2xWZXJzaW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5nbHNsVmVyc2lvbiA9IGpzb24uZ2xzbFZlcnNpb247XG5cblx0XHRpZiAoIGpzb24uZXh0ZW5zaW9ucyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBjb25zdCBrZXkgaW4ganNvbi5leHRlbnNpb25zICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLmV4dGVuc2lvbnNbIGtleSBdID0ganNvbi5leHRlbnNpb25zWyBrZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmxpZ2h0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRzID0ganNvbi5saWdodHM7XG5cdFx0aWYgKCBqc29uLmNsaXBwaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGlwcGluZyA9IGpzb24uY2xpcHBpbmc7XG5cblx0XHQvLyBmb3IgUG9pbnRzTWF0ZXJpYWxcblxuXHRcdGlmICgganNvbi5zaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaXplID0ganNvbi5zaXplO1xuXHRcdGlmICgganNvbi5zaXplQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGpzb24uc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0Ly8gbWFwc1xuXG5cdFx0aWYgKCBqc29uLm1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZSgganNvbi5tYXAgKTtcblx0XHRpZiAoIGpzb24ubWF0Y2FwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tYXRjYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1hdGNhcCApO1xuXG5cdFx0aWYgKCBqc29uLmFscGhhTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hbHBoYU1hcCA9IGdldFRleHR1cmUoIGpzb24uYWxwaGFNYXAgKTtcblxuXHRcdGlmICgganNvbi5idW1wTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5idW1wTWFwID0gZ2V0VGV4dHVyZSgganNvbi5idW1wTWFwICk7XG5cdFx0aWYgKCBqc29uLmJ1bXBTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYnVtcFNjYWxlID0ganNvbi5idW1wU2NhbGU7XG5cblx0XHRpZiAoIGpzb24ubm9ybWFsTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm5vcm1hbE1hcCApO1xuXHRcdGlmICgganNvbi5ub3JtYWxNYXBUeXBlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID0ganNvbi5ub3JtYWxNYXBUeXBlO1xuXHRcdGlmICgganNvbi5ub3JtYWxTY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsZXQgbm9ybWFsU2NhbGUgPSBqc29uLm5vcm1hbFNjYWxlO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5vcm1hbFNjYWxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIEJsZW5kZXIgZXhwb3J0ZXIgdXNlZCB0byBleHBvcnQgYSBzY2FsYXIuIFNlZSAjNzQ1OVxuXG5cdFx0XHRcdG5vcm1hbFNjYWxlID0gWyBub3JtYWxTY2FsZSwgbm9ybWFsU2NhbGUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBub3JtYWxTY2FsZSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRpc3BsYWNlbWVudE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5kaXNwbGFjZW1lbnRNYXAgKTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50U2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlID0ganNvbi5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50QmlhcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IGpzb24uZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdGlmICgganNvbi5yb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24ucm91Z2huZXNzTWFwICk7XG5cdFx0aWYgKCBqc29uLm1ldGFsbmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubWV0YWxuZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5tZXRhbG5lc3NNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbWlzc2l2ZU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVtaXNzaXZlTWFwICk7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IGpzb24uZW1pc3NpdmVJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uc3BlY3VsYXJNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zcGVjdWxhck1hcCApO1xuXHRcdGlmICgganNvbi5zcGVjdWxhckludGVuc2l0eU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFySW50ZW5zaXR5TWFwICk7XG5cdFx0aWYgKCBqc29uLnNwZWN1bGFyQ29sb3JNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFyQ29sb3JNYXAgKTtcblxuXHRcdGlmICgganNvbi5lbnZNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcCA9IGdldFRleHR1cmUoIGpzb24uZW52TWFwICk7XG5cdFx0aWYgKCBqc29uLmVudk1hcFJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXBSb3RhdGlvbi5mcm9tQXJyYXkoIGpzb24uZW52TWFwUm90YXRpb24gKTtcblx0XHRpZiAoIGpzb24uZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHkgPSBqc29uLmVudk1hcEludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5yZWZsZWN0aXZpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJlZmxlY3Rpdml0eSA9IGpzb24ucmVmbGVjdGl2aXR5O1xuXHRcdGlmICgganNvbi5yZWZyYWN0aW9uUmF0aW8gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IGpzb24ucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0aWYgKCBqc29uLmxpZ2h0TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5saWdodE1hcCA9IGdldFRleHR1cmUoIGpzb24ubGlnaHRNYXAgKTtcblx0XHRpZiAoIGpzb24ubGlnaHRNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ID0ganNvbi5saWdodE1hcEludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5hb01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW9NYXAgPSBnZXRUZXh0dXJlKCBqc29uLmFvTWFwICk7XG5cdFx0aWYgKCBqc29uLmFvTWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hb01hcEludGVuc2l0eSA9IGpzb24uYW9NYXBJbnRlbnNpdHk7XG5cblx0XHRpZiAoIGpzb24uZ3JhZGllbnRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmdyYWRpZW50TWFwID0gZ2V0VGV4dHVyZSgganNvbi5ncmFkaWVudE1hcCApO1xuXG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0TWFwID0gZ2V0VGV4dHVyZSgganNvbi5jbGVhcmNvYXRNYXAgKTtcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Um91Z2huZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmNsZWFyY29hdFJvdWdobmVzc01hcCApO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXROb3JtYWxNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwICk7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdE5vcm1hbFNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCBqc29uLmNsZWFyY29hdE5vcm1hbFNjYWxlICk7XG5cblx0XHRpZiAoIGpzb24uaXJpZGVzY2VuY2VNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwID0gZ2V0VGV4dHVyZSgganNvbi5pcmlkZXNjZW5jZU1hcCApO1xuXHRcdGlmICgganNvbi5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwICk7XG5cblx0XHRpZiAoIGpzb24udHJhbnNtaXNzaW9uTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAgPSBnZXRUZXh0dXJlKCBqc29uLnRyYW5zbWlzc2lvbk1hcCApO1xuXHRcdGlmICgganNvbi50aGlja25lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnRoaWNrbmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24udGhpY2tuZXNzTWFwICk7XG5cblx0XHRpZiAoIGpzb24uYW5pc290cm9weU1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYW5pc290cm9weU1hcCA9IGdldFRleHR1cmUoIGpzb24uYW5pc290cm9weU1hcCApO1xuXG5cdFx0aWYgKCBqc29uLnNoZWVuQ29sb3JNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNoZWVuQ29sb3JNYXAgKTtcblx0XHRpZiAoIGpzb24uc2hlZW5Sb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5zaGVlblJvdWdobmVzc01hcCApO1xuXG5cdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGV4dHVyZXMgYXJlIG5vdCBlbWJlZGRlZCBpbiB0aGUgbWF0ZXJpYWwgSlNPTiBzbyB0aGV5IGhhdmVcblx0ICogdG8gYmUgaW5qZWN0ZWQgYmVmb3JlIHRoZSBsb2FkaW5nIHByb2Nlc3Mgc3RhcnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgLSBBIGRpY3Rpb25hcnkgaG9sZGluZyB0ZXh0dXJlcyBmb3IgbWF0ZXJpYWwgcHJvcGVydGllcy5cblx0ICogQHJldHVybiB7TWF0ZXJpYWxMb2FkZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbWF0ZXJpYWwgbG9hZGVyLlxuXHQgKi9cblx0c2V0VGV4dHVyZXMoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG1hdGVyaWFsIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgbWF0ZXJpYWwgdHlwZS5cblx0ICogQHJldHVybiB7TWF0ZXJpYWx9IFRoZSBuZXcgbWF0ZXJpYWwuXG5cdCAqL1xuXHRjcmVhdGVNYXRlcmlhbEZyb21UeXBlKCB0eXBlICkge1xuXG5cdFx0cmV0dXJuIE1hdGVyaWFsTG9hZGVyLmNyZWF0ZU1hdGVyaWFsRnJvbVR5cGUoIHR5cGUgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBtYXRlcmlhbCBmb3IgdGhlIGdpdmVuIHR5cGUuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgbWF0ZXJpYWwgdHlwZS5cblx0ICogQHJldHVybiB7TWF0ZXJpYWx9IFRoZSBuZXcgbWF0ZXJpYWwuXG5cdCAqL1xuXHRzdGF0aWMgY3JlYXRlTWF0ZXJpYWxGcm9tVHlwZSggdHlwZSApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsTGliID0ge1xuXHRcdFx0U2hhZG93TWF0ZXJpYWwsXG5cdFx0XHRTcHJpdGVNYXRlcmlhbCxcblx0XHRcdFJhd1NoYWRlck1hdGVyaWFsLFxuXHRcdFx0U2hhZGVyTWF0ZXJpYWwsXG5cdFx0XHRQb2ludHNNYXRlcmlhbCxcblx0XHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxuXHRcdFx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwsXG5cdFx0XHRNZXNoUGhvbmdNYXRlcmlhbCxcblx0XHRcdE1lc2hUb29uTWF0ZXJpYWwsXG5cdFx0XHRNZXNoTm9ybWFsTWF0ZXJpYWwsXG5cdFx0XHRNZXNoTGFtYmVydE1hdGVyaWFsLFxuXHRcdFx0TWVzaERlcHRoTWF0ZXJpYWwsXG5cdFx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbCxcblx0XHRcdE1lc2hCYXNpY01hdGVyaWFsLFxuXHRcdFx0TWVzaE1hdGNhcE1hdGVyaWFsLFxuXHRcdFx0TGluZURhc2hlZE1hdGVyaWFsLFxuXHRcdFx0TGluZUJhc2ljTWF0ZXJpYWwsXG5cdFx0XHRNYXRlcmlhbFxuXHRcdH07XG5cblx0XHRyZXR1cm4gbmV3IG1hdGVyaWFsTGliWyB0eXBlIF0oKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHdpdGggbG9hZGVyIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5jbGFzcyBMb2FkZXJVdGlscyB7XG5cblx0LyoqXG5cdCAqIEV4dHJhY3RzIHRoZSBiYXNlIFVSTCBmcm9tIHRoZSBnaXZlbiBVUkwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLVRoZSBVUkwgdG8gZXh0cmFjdCB0aGUgYmFzZSBVUkwgZnJvbS5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgZXh0cmFjdGVkIGJhc2UgVVJMLlxuXHQgKi9cblx0c3RhdGljIGV4dHJhY3RVcmxCYXNlKCB1cmwgKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IHVybC5sYXN0SW5kZXhPZiggJy8nICk7XG5cblx0XHRpZiAoIGluZGV4ID09PSAtMSApIHJldHVybiAnLi8nO1xuXG5cdFx0cmV0dXJuIHVybC5zbGljZSggMCwgaW5kZXggKyAxICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNvbHZlcyByZWxhdGl2ZSBVUkxzIGFnYWluc3QgdGhlIGdpdmVuIHBhdGguIEFic29sdXRlIHBhdGhzLCBkYXRhIHVybHMsXG5cdCAqIGFuZCBibG9iIFVSTHMgd2lsbCBiZSByZXR1cm5lZCBhcyBpcy4gSW52YWxpZCBVUkxzIHdpbGwgcmV0dXJuIGFuIGVtcHR5XG5cdCAqIHN0cmluZy5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtVGhlIFVSTCB0byByZXNvbHZlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBiYXNlIHBhdGggZm9yIHJlbGF0aXZlIFVSTHMgdG8gYmUgcmVzb2x2ZWQgYWdhaW5zdC5cblx0ICogQHJldHVybiB7c3RyaW5nfSBUaGUgcmVzb2x2ZWQgVVJMLlxuXHQgKi9cblx0c3RhdGljIHJlc29sdmVVUkwoIHVybCwgcGF0aCApIHtcblxuXHRcdC8vIEludmFsaWQgVVJMXG5cdFx0aWYgKCB0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwgPT09ICcnICkgcmV0dXJuICcnO1xuXG5cdFx0Ly8gSG9zdCBSZWxhdGl2ZSBVUkxcblx0XHRpZiAoIC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QoIHBhdGggKSAmJiAvXlxcLy8udGVzdCggdXJsICkgKSB7XG5cblx0XHRcdHBhdGggPSBwYXRoLnJlcGxhY2UoIC8oXmh0dHBzPzpcXC9cXC9bXlxcL10rKS4qL2ksICckMScgKTtcblxuXHRcdH1cblxuXHRcdC8vIEFic29sdXRlIFVSTCBodHRwOi8vLGh0dHBzOi8vLC8vXG5cdFx0aWYgKCAvXihodHRwcz86KT9cXC9cXC8vaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHQvLyBEYXRhIFVSSVxuXHRcdGlmICggL15kYXRhOi4qLC4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcblxuXHRcdC8vIEJsb2IgVVJMXG5cdFx0aWYgKCAvXmJsb2I6LiokL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0Ly8gUmVsYXRpdmUgVVJMXG5cdFx0cmV0dXJuIHBhdGggKyB1cmw7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQW4gaW5zdGFuY2VkIHZlcnNpb24gb2YgYSBnZW9tZXRyeS5cbiAqL1xuY2xhc3MgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgZXh0ZW5kcyBCdWZmZXJHZW9tZXRyeSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2VkIGJ1ZmZlciBnZW9tZXRyeS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9IHRydWU7XG5cblx0XHR0aGlzLnR5cGUgPSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGluc3RhbmNlIGNvdW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBJbmZpbml0eVxuXHRcdCAqL1xuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IEluZmluaXR5O1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuaW5zdGFuY2VDb3VudCA9IHNvdXJjZS5pbnN0YW5jZUNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHRvSlNPTigpIHtcblxuXHRcdGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcblxuXHRcdGRhdGEuaW5zdGFuY2VDb3VudCA9IHRoaXMuaW5zdGFuY2VDb3VudDtcblxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9IHRydWU7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3IgbG9hZGluZyBnZW9tZXRyaWVzLiBUaGUgZmlsZXMgYXJlIGludGVybmFsbHlcbiAqIGxvYWRlZCB2aWEge0BsaW5rIEZpbGVMb2FkZXJ9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcbiAqIGNvbnN0IGdlb21ldHJ5ID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggJ21vZGVscy9qc29uL3ByZXNzdXJlLmpzb24nICk7XG4gKlxuICogY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4RjVGNUY1IH0gKTtcbiAqIGNvbnN0IG9iamVjdCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggb2JqZWN0ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTG9hZGVyXG4gKi9cbmNsYXNzIEJ1ZmZlckdlb21ldHJ5TG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBnZW9tZXRyeSBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgbG9hZGluZyBmcm9tIHRoZSBnaXZlbiBVUkwgYW5kIHBhc3MgdGhlIGxvYWRlZCBnZW9tZXRyeSB0byB0aGUgYG9uTG9hZCgpYCBjYWxsYmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihCdWZmZXJHZW9tZXRyeSl9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IG9uUHJvZ3Jlc3MgLSBFeGVjdXRlZCB3aGlsZSB0aGUgbG9hZGluZyBpcyBpbiBwcm9ncmVzcy5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IG9uRXJyb3IgLSBFeGVjdXRlZCB3aGVuIGVycm9ycyBvY2N1ci5cblx0ICovXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggc2NvcGUucGF0aCApO1xuXHRcdGxvYWRlci5zZXRSZXF1ZXN0SGVhZGVyKCBzY29wZS5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggc2NvcGUud2l0aENyZWRlbnRpYWxzICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdG9uTG9hZCggc2NvcGUucGFyc2UoIEpTT04ucGFyc2UoIHRleHQgKSApICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciApIHtcblxuXHRcdFx0XHRcdG9uRXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyB0aGUgZ2l2ZW4gSlNPTiBvYmplY3QgYW5kIHJldHVybnMgYSBnZW9tZXRyeS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgc2VyaWFsaXplZCBnZW9tZXRyeS5cblx0ICogQHJldHVybiB7QnVmZmVyR2VvbWV0cnl9IFRoZSBwYXJzZWQgZ2VvbWV0cnkuXG5cdCAqL1xuXHRwYXJzZSgganNvbiApIHtcblxuXHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyTWFwID0ge307XG5cdFx0Y29uc3QgYXJyYXlCdWZmZXJNYXAgPSB7fTtcblxuXHRcdGZ1bmN0aW9uIGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIGludGVybGVhdmVkQnVmZmVyTWFwWyB1dWlkIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBpbnRlcmxlYXZlZEJ1ZmZlck1hcFsgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlcnMgPSBqc29uLmludGVybGVhdmVkQnVmZmVycztcblx0XHRcdGNvbnN0IGludGVybGVhdmVkQnVmZmVyID0gaW50ZXJsZWF2ZWRCdWZmZXJzWyB1dWlkIF07XG5cblx0XHRcdGNvbnN0IGJ1ZmZlciA9IGdldEFycmF5QnVmZmVyKCBqc29uLCBpbnRlcmxlYXZlZEJ1ZmZlci5idWZmZXIgKTtcblxuXHRcdFx0Y29uc3QgYXJyYXkgPSBnZXRUeXBlZEFycmF5KCBpbnRlcmxlYXZlZEJ1ZmZlci50eXBlLCBidWZmZXIgKTtcblx0XHRcdGNvbnN0IGliID0gbmV3IEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgaW50ZXJsZWF2ZWRCdWZmZXIuc3RyaWRlICk7XG5cdFx0XHRpYi51dWlkID0gaW50ZXJsZWF2ZWRCdWZmZXIudXVpZDtcblxuXHRcdFx0aW50ZXJsZWF2ZWRCdWZmZXJNYXBbIHV1aWQgXSA9IGliO1xuXG5cdFx0XHRyZXR1cm4gaWI7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRBcnJheUJ1ZmZlcigganNvbiwgdXVpZCApIHtcblxuXHRcdFx0aWYgKCBhcnJheUJ1ZmZlck1hcFsgdXVpZCBdICE9PSB1bmRlZmluZWQgKSByZXR1cm4gYXJyYXlCdWZmZXJNYXBbIHV1aWQgXTtcblxuXHRcdFx0Y29uc3QgYXJyYXlCdWZmZXJzID0ganNvbi5hcnJheUJ1ZmZlcnM7XG5cdFx0XHRjb25zdCBhcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyc1sgdXVpZCBdO1xuXG5cdFx0XHRjb25zdCBhYiA9IG5ldyBVaW50MzJBcnJheSggYXJyYXlCdWZmZXIgKS5idWZmZXI7XG5cblx0XHRcdGFycmF5QnVmZmVyTWFwWyB1dWlkIF0gPSBhYjtcblxuXHRcdFx0cmV0dXJuIGFiO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBqc29uLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgPyBuZXcgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBqc29uLmRhdGEuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IHR5cGVkQXJyYXkgPSBnZXRUeXBlZEFycmF5KCBpbmRleC50eXBlLCBpbmRleC5hcnJheSApO1xuXHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGpzb24uZGF0YS5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0bGV0IGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlciA9IGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLmRhdGEsIGF0dHJpYnV0ZS5kYXRhICk7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaW50ZXJsZWF2ZWRCdWZmZXIsIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm9mZnNldCwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCB0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheSggYXR0cmlidXRlLnR5cGUsIGF0dHJpYnV0ZS5hcnJheSApO1xuXHRcdFx0XHRjb25zdCBidWZmZXJBdHRyaWJ1dGVDb25zdHIgPSBhdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgOiBCdWZmZXJBdHRyaWJ1dGU7XG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBidWZmZXJBdHRyaWJ1dGVDb25zdHIoIHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQgKSBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xuXHRcdFx0aWYgKCBhdHRyaWJ1dGUudXNhZ2UgIT09IHVuZGVmaW5lZCApIGJ1ZmZlckF0dHJpYnV0ZS5zZXRVc2FnZSggYXR0cmlidXRlLnVzYWdlICk7XG5cblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgga2V5LCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGpzb24uZGF0YS5tb3JwaEF0dHJpYnV0ZXM7XG5cblx0XHRpZiAoIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Zm9yICggY29uc3Qga2V5IGluIG1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHRjb25zdCBhdHRyaWJ1dGVBcnJheSA9IG1vcnBoQXR0cmlidXRlc1sga2V5IF07XG5cblx0XHRcdFx0Y29uc3QgYXJyYXkgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gYXR0cmlidXRlQXJyYXkubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdO1xuXHRcdFx0XHRcdGxldCBidWZmZXJBdHRyaWJ1dGU7XG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlciA9IGdldEludGVybGVhdmVkQnVmZmVyKCBqc29uLmRhdGEsIGF0dHJpYnV0ZS5kYXRhICk7XG5cdFx0XHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5vZmZzZXQsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCB0eXBlZEFycmF5ID0gZ2V0VHlwZWRBcnJheSggYXR0cmlidXRlLnR5cGUsIGF0dHJpYnV0ZS5hcnJheSApO1xuXHRcdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUubmFtZSAhPT0gdW5kZWZpbmVkICkgYnVmZmVyQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGUubmFtZTtcblx0XHRcdFx0XHRhcnJheS5wdXNoKCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXSA9IGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRjb25zdCBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IGpzb24uZGF0YS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdGlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdGdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGdyb3VwcyA9IGpzb24uZGF0YS5ncm91cHMgfHwganNvbi5kYXRhLmRyYXdjYWxscyB8fCBqc29uLmRhdGEub2Zmc2V0cztcblxuXHRcdGlmICggZ3JvdXBzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGdyb3Vwcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblxuXHRcdFx0XHRnZW9tZXRyeS5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGJvdW5kaW5nU3BoZXJlID0ganNvbi5kYXRhLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHRpZiAoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNlbnRlci5mcm9tQXJyYXkoIGJvdW5kaW5nU3BoZXJlLmNlbnRlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSggY2VudGVyLCBib3VuZGluZ1NwaGVyZS5yYWRpdXMgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5uYW1lICkgZ2VvbWV0cnkubmFtZSA9IGpzb24ubmFtZTtcblx0XHRpZiAoIGpzb24udXNlckRhdGEgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBsb2FkZXIgZm9yIGxvYWRpbmcgYSBKU09OIHJlc291cmNlIGluIHRoZSBbSlNPTiBPYmplY3QvU2NlbmUgZm9ybWF0XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3dpa2kvSlNPTi1PYmplY3QtU2NlbmUtZm9ybWF0LTR9LlxuICogVGhlIGZpbGVzIGFyZSBpbnRlcm5hbGx5IGxvYWRlZCB2aWEge0BsaW5rIEZpbGVMb2FkZXJ9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuT2JqZWN0TG9hZGVyKCk7XG4gKiBjb25zdCBvYmogPSBhd2FpdCBsb2FkZXIubG9hZEFzeW5jKCAnbW9kZWxzL2pzb24vZXhhbXBsZS5qc29uJyApO1xuICogc2NlbmUuYWRkKCBvYmogKTtcbiAqXG4gKiAvLyBBbHRlcm5hdGl2ZWx5LCB0byBwYXJzZSBhIHByZXZpb3VzbHkgbG9hZGVkIEpTT04gc3RydWN0dXJlXG4gKiBjb25zdCBvYmplY3QgPSBhd2FpdCBsb2FkZXIucGFyc2VBc3luYyggYV9qc29uX29iamVjdCApO1xuICogc2NlbmUuYWRkKCBvYmplY3QgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgT2JqZWN0TG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBvYmplY3QgbG9hZGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0xvYWRpbmdNYW5hZ2VyfSBbbWFuYWdlcl0gLSBUaGUgbG9hZGluZyBtYW5hZ2VyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG1hbmFnZXIgKSB7XG5cblx0XHRzdXBlciggbWFuYWdlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIGxvYWRpbmcgZnJvbSB0aGUgZ2l2ZW4gVVJMIGFuZCBwYXNzIHRoZSBsb2FkZWQgM0Qgb2JqZWN0IHRvIHRoZSBgb25Mb2FkKClgIGNhbGxiYWNrLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHBhdGgvVVJMIG9mIHRoZSBmaWxlIHRvIGJlIGxvYWRlZC4gVGhpcyBjYW4gYWxzbyBiZSBhIGRhdGEgVVJJLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdDNEKX0gb25Mb2FkIC0gRXhlY3V0ZWQgd2hlbiB0aGUgbG9hZGluZyBwcm9jZXNzIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKiBAcGFyYW0ge29uUHJvZ3Jlc3NDYWxsYmFja30gb25Qcm9ncmVzcyAtIEV4ZWN1dGVkIHdoaWxlIHRoZSBsb2FkaW5nIGlzIGluIHByb2dyZXNzLlxuXHQgKiBAcGFyYW0ge29uRXJyb3JDYWxsYmFja30gb25FcnJvciAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKi9cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7XG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB0aGlzLnJlc291cmNlUGF0aCB8fCBwYXRoO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdGxldCBqc29uID0gbnVsbDtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICE9PSB1bmRlZmluZWQgKSBvbkVycm9yKCBlcnJvciApO1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRTpPYmplY3RMb2FkZXI6IENhblxcJ3QgcGFyc2UgJyArIHVybCArICcuJywgZXJyb3IubWVzc2FnZSApO1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtZXRhZGF0YSA9IGpzb24ubWV0YWRhdGE7XG5cblx0XHRcdGlmICggbWV0YWRhdGEgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZ2VvbWV0cnknICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgb25FcnJvciggbmV3IEVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBDYW5cXCd0IGxvYWQgJyArIHVybCApICk7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLnBhcnNlKCBqc29uLCBvbkxvYWQgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFzeW5jIHZlcnNpb24gb2Yge0BsaW5rIE9iamVjdExvYWRlciNsb2FkfS5cblx0ICpcblx0ICogQGFzeW5jXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgcGF0aC9VUkwgb2YgdGhlIGZpbGUgdG8gYmUgbG9hZGVkLiBUaGlzIGNhbiBhbHNvIGJlIGEgZGF0YSBVUkkuXG5cdCAqIEBwYXJhbSB7b25Qcm9ncmVzc0NhbGxiYWNrfSBvblByb2dyZXNzIC0gRXhlY3V0ZWQgd2hpbGUgdGhlIGxvYWRpbmcgaXMgaW4gcHJvZ3Jlc3MuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0M0Q+fSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBsb2FkZWQgM0Qgb2JqZWN0LlxuXHQgKi9cblx0YXN5bmMgbG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBwYXRoID0gKCB0aGlzLnBhdGggPT09ICcnICkgPyBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICkgOiB0aGlzLnBhdGg7XG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSB0aGlzLnJlc291cmNlUGF0aCB8fCBwYXRoO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblxuXHRcdGNvbnN0IHRleHQgPSBhd2FpdCBsb2FkZXIubG9hZEFzeW5jKCB1cmwsIG9uUHJvZ3Jlc3MgKTtcblxuXHRcdGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKCB0ZXh0ICk7XG5cblx0XHRjb25zdCBtZXRhZGF0YSA9IGpzb24ubWV0YWRhdGE7XG5cblx0XHRpZiAoIG1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2dlb21ldHJ5JyApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBDYW5cXCd0IGxvYWQgJyArIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGF3YWl0IHNjb3BlLnBhcnNlQXN5bmMoIGpzb24gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFBhcnNlcyB0aGUgZ2l2ZW4gSlNPTi4gVGhpcyBpcyB1c2VkIGludGVybmFsbHkgYnkge0BsaW5rIE9iamVjdExvYWRlciNsb2FkfVxuXHQgKiBidXQgY2FuIGFsc28gYmUgdXNlZCBkaXJlY3RseSB0byBwYXJzZSBhIHByZXZpb3VzbHkgbG9hZGVkIEpTT04gc3RydWN0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0ganNvbiAtIFRoZSBzZXJpYWxpemVkIDNEIG9iamVjdC5cblx0ICogQHBhcmFtIHtvbkxvYWR9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gYWxsIHJlc291cmNlcyAoZS5nLiB0ZXh0dXJlcykgaGF2ZSBiZWVuIGZ1bGx5IGxvYWRlZC5cblx0ICogQHJldHVybiB7T2JqZWN0M0R9IFRoZSBwYXJzZWQgM0Qgb2JqZWN0LlxuXHQgKi9cblx0cGFyc2UoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLnBhcnNlQW5pbWF0aW9ucygganNvbi5hbmltYXRpb25zICk7XG5cdFx0Y29uc3Qgc2hhcGVzID0gdGhpcy5wYXJzZVNoYXBlcygganNvbi5zaGFwZXMgKTtcblx0XHRjb25zdCBnZW9tZXRyaWVzID0gdGhpcy5wYXJzZUdlb21ldHJpZXMoIGpzb24uZ2VvbWV0cmllcywgc2hhcGVzICk7XG5cblx0XHRjb25zdCBpbWFnZXMgPSB0aGlzLnBhcnNlSW1hZ2VzKCBqc29uLmltYWdlcywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH0gKTtcblxuXHRcdGNvbnN0IHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKCBqc29uLnRleHR1cmVzLCBpbWFnZXMgKTtcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB0aGlzLnBhcnNlTWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGV4dHVyZXMgKTtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoIGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICk7XG5cdFx0Y29uc3Qgc2tlbGV0b25zID0gdGhpcy5wYXJzZVNrZWxldG9ucygganNvbi5za2VsZXRvbnMsIG9iamVjdCApO1xuXG5cdFx0dGhpcy5iaW5kU2tlbGV0b25zKCBvYmplY3QsIHNrZWxldG9ucyApO1xuXHRcdHRoaXMuYmluZExpZ2h0VGFyZ2V0cyggb2JqZWN0ICk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBvbkxvYWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGV0IGhhc0ltYWdlcyA9IGZhbHNlO1xuXG5cdFx0XHRmb3IgKCBjb25zdCB1dWlkIGluIGltYWdlcyApIHtcblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgdXVpZCBdLmRhdGEgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkge1xuXG5cdFx0XHRcdFx0aGFzSW1hZ2VzID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNJbWFnZXMgPT09IGZhbHNlICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBvYmplY3Q7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBc3luYyB2ZXJzaW9uIG9mIHtAbGluayBPYmplY3RMb2FkZXIjcGFyc2V9LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0ganNvbiAtIFRoZSBzZXJpYWxpemVkIDNEIG9iamVjdC5cblx0ICogQHJldHVybiB7UHJvbWlzZTxPYmplY3QzRD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHBhcnNlZCAzRCBvYmplY3QuXG5cdCAqL1xuXHRhc3luYyBwYXJzZUFzeW5jKCBqc29uICkge1xuXG5cdFx0Y29uc3QgYW5pbWF0aW9ucyA9IHRoaXMucGFyc2VBbmltYXRpb25zKCBqc29uLmFuaW1hdGlvbnMgKTtcblx0XHRjb25zdCBzaGFwZXMgPSB0aGlzLnBhcnNlU2hhcGVzKCBqc29uLnNoYXBlcyApO1xuXHRcdGNvbnN0IGdlb21ldHJpZXMgPSB0aGlzLnBhcnNlR2VvbWV0cmllcygganNvbi5nZW9tZXRyaWVzLCBzaGFwZXMgKTtcblxuXHRcdGNvbnN0IGltYWdlcyA9IGF3YWl0IHRoaXMucGFyc2VJbWFnZXNBc3luYygganNvbi5pbWFnZXMgKTtcblxuXHRcdGNvbnN0IHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKCBqc29uLnRleHR1cmVzLCBpbWFnZXMgKTtcblx0XHRjb25zdCBtYXRlcmlhbHMgPSB0aGlzLnBhcnNlTWF0ZXJpYWxzKCBqc29uLm1hdGVyaWFscywgdGV4dHVyZXMgKTtcblxuXHRcdGNvbnN0IG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoIGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICk7XG5cdFx0Y29uc3Qgc2tlbGV0b25zID0gdGhpcy5wYXJzZVNrZWxldG9ucygganNvbi5za2VsZXRvbnMsIG9iamVjdCApO1xuXG5cdFx0dGhpcy5iaW5kU2tlbGV0b25zKCBvYmplY3QsIHNrZWxldG9ucyApO1xuXHRcdHRoaXMuYmluZExpZ2h0VGFyZ2V0cyggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHQvLyBpbnRlcm5hbHNcblxuXHRwYXJzZVNoYXBlcygganNvbiApIHtcblxuXHRcdGNvbnN0IHNoYXBlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaGFwZSA9IG5ldyBTaGFwZSgpLmZyb21KU09OKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0XHRzaGFwZXNbIHNoYXBlLnV1aWQgXSA9IHNoYXBlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxuXHRwYXJzZVNrZWxldG9ucygganNvbiwgb2JqZWN0ICkge1xuXG5cdFx0Y29uc3Qgc2tlbGV0b25zID0ge307XG5cdFx0Y29uc3QgYm9uZXMgPSB7fTtcblxuXHRcdC8vIGdlbmVyYXRlIGJvbmUgbG9va3VwIHRhYmxlXG5cblx0XHRvYmplY3QudHJhdmVyc2UoIGZ1bmN0aW9uICggY2hpbGQgKSB7XG5cblx0XHRcdGlmICggY2hpbGQuaXNCb25lICkgYm9uZXNbIGNoaWxkLnV1aWQgXSA9IGNoaWxkO1xuXG5cdFx0fSApO1xuXG5cdFx0Ly8gY3JlYXRlIHNrZWxldG9uc1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBza2VsZXRvbiA9IG5ldyBTa2VsZXRvbigpLmZyb21KU09OKCBqc29uWyBpIF0sIGJvbmVzICk7XG5cblx0XHRcdFx0c2tlbGV0b25zWyBza2VsZXRvbi51dWlkIF0gPSBza2VsZXRvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNrZWxldG9ucztcblxuXHR9XG5cblx0cGFyc2VHZW9tZXRyaWVzKCBqc29uLCBzaGFwZXMgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgYnVmZmVyR2VvbWV0cnlMb2FkZXIgPSBuZXcgQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGxldCBnZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhLnR5cGUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdCdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5TG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YS50eXBlIGluIEdlb21ldHJpZXMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXS5mcm9tSlNPTiggZGF0YSwgc2hhcGVzICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCBgVEhSRUUuT2JqZWN0TG9hZGVyOiBVbnN1cHBvcnRlZCBnZW9tZXRyeSB0eXBlIFwiJHsgZGF0YS50eXBlIH1cImAgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRnZW9tZXRyeS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS5uYW1lID0gZGF0YS5uYW1lO1xuXHRcdFx0XHRpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHRnZW9tZXRyaWVzWyBkYXRhLnV1aWQgXSA9IGdlb21ldHJ5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cmllcztcblxuXHR9XG5cblx0cGFyc2VNYXRlcmlhbHMoIGpzb24sIHRleHR1cmVzICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB7fTsgLy8gTXVsdGlNYXRlcmlhbFxuXHRcdGNvbnN0IG1hdGVyaWFscyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGxvYWRlciA9IG5ldyBNYXRlcmlhbExvYWRlcigpO1xuXHRcdFx0bG9hZGVyLnNldFRleHR1cmVzKCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGF0YSA9IGpzb25bIGkgXTtcblxuXHRcdFx0XHRpZiAoIGNhY2hlWyBkYXRhLnV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVbIGRhdGEudXVpZCBdID0gbG9hZGVyLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGVyaWFsc1sgZGF0YS51dWlkIF0gPSBjYWNoZVsgZGF0YS51dWlkIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0fVxuXG5cdHBhcnNlQW5pbWF0aW9ucygganNvbiApIHtcblxuXHRcdGNvbnN0IGFuaW1hdGlvbnMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0YW5pbWF0aW9uc1sgY2xpcC51dWlkIF0gPSBjbGlwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cblx0cGFyc2VJbWFnZXMoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdGNvbnN0IHNjb3BlID0gdGhpcztcblx0XHRjb25zdCBpbWFnZXMgPSB7fTtcblxuXHRcdGxldCBsb2FkZXI7XG5cblx0XHRmdW5jdGlvbiBsb2FkSW1hZ2UoIHVybCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gbG9hZEltYWdlKCBwYXRoICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRhdGE6IGdldFR5cGVkQXJyYXkoIGltYWdlLnR5cGUsIGltYWdlLmRhdGEgKSxcblx0XHRcdFx0XHRcdHdpZHRoOiBpbWFnZS53aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogaW1hZ2UuaGVpZ2h0XG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGNvbnN0IG1hbmFnZXIgPSBuZXcgTG9hZGluZ01hbmFnZXIoIG9uTG9hZCApO1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbWFnZSA9IGpzb25bIGkgXTtcblx0XHRcdFx0Y29uc3QgdXJsID0gaW1hZ2UudXJsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdXJsICkgKSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIGFycmF5IG9mIGltYWdlcyBlLmcgQ3ViZVRleHR1cmVcblxuXHRcdFx0XHRcdGNvbnN0IGltYWdlQXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRVcmwgPSB1cmxbIGogXTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBjdXJyZW50VXJsICk7XG5cblx0XHRcdFx0XHRcdGlmICggZGVzZXJpYWxpemVkSW1hZ2UgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpbWFnZUFycmF5LnB1c2goIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIGFycmF5IG9mIGRhdGEgdGV4dHVyZXMgZm9yIGN1YmUgdGV4dHVyZXNcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggbmV3IERhdGFUZXh0dXJlKCBkZXNlcmlhbGl6ZWRJbWFnZS5kYXRhLCBkZXNlcmlhbGl6ZWRJbWFnZS53aWR0aCwgZGVzZXJpYWxpemVkSW1hZ2UuaGVpZ2h0ICkgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggaW1hZ2VBcnJheSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBsb2FkIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0Y29uc3QgZGVzZXJpYWxpemVkSW1hZ2UgPSBkZXNlcmlhbGl6ZUltYWdlKCBpbWFnZS51cmwgKTtcblx0XHRcdFx0XHRpbWFnZXNbIGltYWdlLnV1aWQgXSA9IG5ldyBTb3VyY2UoIGRlc2VyaWFsaXplZEltYWdlICk7XG5cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdGFzeW5jIHBhcnNlSW1hZ2VzQXN5bmMoIGpzb24gKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cdFx0Y29uc3QgaW1hZ2VzID0ge307XG5cblx0XHRsZXQgbG9hZGVyO1xuXG5cdFx0YXN5bmMgZnVuY3Rpb24gZGVzZXJpYWxpemVJbWFnZSggaW1hZ2UgKSB7XG5cblx0XHRcdGlmICggdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZTtcblxuXHRcdFx0XHRjb25zdCBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCB1cmwgKSA/IHVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIHVybDtcblxuXHRcdFx0XHRyZXR1cm4gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggcGF0aCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggaW1hZ2UuZGF0YSApIHtcblxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkYXRhOiBnZXRUeXBlZEFycmF5KCBpbWFnZS50eXBlLCBpbWFnZS5kYXRhICksXG5cdFx0XHRcdFx0XHR3aWR0aDogaW1hZ2Uud2lkdGgsXG5cdFx0XHRcdFx0XHRoZWlnaHQ6IGltYWdlLmhlaWdodFxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGltYWdlID0ganNvblsgaSBdO1xuXHRcdFx0XHRjb25zdCB1cmwgPSBpbWFnZS51cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2VBcnJheSA9IFtdO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVybC5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY3VycmVudFVybCA9IHVybFsgaiBdO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGN1cnJlbnRVcmwgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBkZXNlcmlhbGl6ZWRJbWFnZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRlc2VyaWFsaXplZEltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGltYWdlQXJyYXkucHVzaCggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3BlY2lhbCBjYXNlOiBoYW5kbGUgYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcyBmb3IgY3ViZSB0ZXh0dXJlc1xuXG5cdFx0XHRcdFx0XHRcdFx0aW1hZ2VBcnJheS5wdXNoKCBuZXcgRGF0YVRleHR1cmUoIGRlc2VyaWFsaXplZEltYWdlLmRhdGEsIGRlc2VyaWFsaXplZEltYWdlLndpZHRoLCBkZXNlcmlhbGl6ZWRJbWFnZS5oZWlnaHQgKSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBuZXcgU291cmNlKCBpbWFnZUFycmF5ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXG5cblx0XHRcdFx0XHRjb25zdCBkZXNlcmlhbGl6ZWRJbWFnZSA9IGF3YWl0IGRlc2VyaWFsaXplSW1hZ2UoIGltYWdlLnVybCApO1xuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbmV3IFNvdXJjZSggZGVzZXJpYWxpemVkSW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZXM7XG5cblx0fVxuXG5cdHBhcnNlVGV4dHVyZXMoIGpzb24sIGltYWdlcyApIHtcblxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQoIHZhbHVlLCB0eXBlICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSByZXR1cm4gdmFsdWU7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlci5wYXJzZVRleHR1cmU6IENvbnN0YW50IHNob3VsZCBiZSBpbiBudW1lcmljIGZvcm0uJywgdmFsdWUgKTtcblxuXHRcdFx0cmV0dXJuIHR5cGVbIHZhbHVlIF07XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZXh0dXJlcyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc291cmNlID0gaW1hZ2VzWyBkYXRhLmltYWdlIF07XG5cdFx0XHRcdGNvbnN0IGltYWdlID0gc291cmNlLmRhdGE7XG5cblx0XHRcdFx0bGV0IHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZSApICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZS5sZW5ndGggPT09IDYgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5kYXRhICkge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaW1hZ2UgKSB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTsgLy8gdGV4dHVyZXMgY2FuIGhhdmUgdW5kZWZpbmVkIGltYWdlIGRhdGFcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZS5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm5hbWUgPSBkYXRhLm5hbWU7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubWFwcGluZyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFwcGluZywgVEVYVFVSRV9NQVBQSU5HICk7XG5cdFx0XHRcdGlmICggZGF0YS5jaGFubmVsICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmNoYW5uZWwgPSBkYXRhLmNoYW5uZWw7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm9mZnNldCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5vZmZzZXQuZnJvbUFycmF5KCBkYXRhLm9mZnNldCApO1xuXHRcdFx0XHRpZiAoIGRhdGEucmVwZWF0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJlcGVhdC5mcm9tQXJyYXkoIGRhdGEucmVwZWF0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5jZW50ZXIgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY2VudGVyLmZyb21BcnJheSggZGF0YS5jZW50ZXIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLnJvdGF0aW9uICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnJvdGF0aW9uID0gZGF0YS5yb3RhdGlvbjtcblxuXHRcdFx0XHRpZiAoIGRhdGEud3JhcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwUyA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMCBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cdFx0XHRcdFx0dGV4dHVyZS53cmFwVCA9IHBhcnNlQ29uc3RhbnQoIGRhdGEud3JhcFsgMSBdLCBURVhUVVJFX1dSQVBQSU5HICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGF0YS5mb3JtYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7XG5cdFx0XHRcdGlmICggZGF0YS5pbnRlcm5hbEZvcm1hdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCA9IGRhdGEuaW50ZXJuYWxGb3JtYXQ7XG5cdFx0XHRcdGlmICggZGF0YS50eXBlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnR5cGUgPSBkYXRhLnR5cGU7XG5cdFx0XHRcdGlmICggZGF0YS5jb2xvclNwYWNlICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmNvbG9yU3BhY2UgPSBkYXRhLmNvbG9yU3BhY2U7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm1pbkZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5taW5GaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1pbkZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYWdGaWx0ZXIgPSBwYXJzZUNvbnN0YW50KCBkYXRhLm1hZ0ZpbHRlciwgVEVYVFVSRV9GSUxURVIgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuYW5pc290cm9weSA9IGRhdGEuYW5pc290cm9weTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuZmxpcFkgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZmxpcFkgPSBkYXRhLmZsaXBZO1xuXG5cdFx0XHRcdGlmICggZGF0YS5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZGF0YS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0XHRcdGlmICggZGF0YS5wcmVtdWx0aXBseUFscGhhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSBkYXRhLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0XHRcdGlmICggZGF0YS51bnBhY2tBbGlnbm1lbnQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ID0gZGF0YS51bnBhY2tBbGlnbm1lbnQ7XG5cdFx0XHRcdGlmICggZGF0YS5jb21wYXJlRnVuY3Rpb24gIT09IHVuZGVmaW5lZCApIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uID0gZGF0YS5jb21wYXJlRnVuY3Rpb247XG5cblx0XHRcdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgZGF0YS51dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZXM7XG5cblx0fVxuXG5cdHBhcnNlT2JqZWN0KCBkYXRhLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMsIHRleHR1cmVzLCBhbmltYXRpb25zICkge1xuXG5cdFx0bGV0IG9iamVjdDtcblxuXHRcdGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJpZXNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5JywgbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBnZW9tZXRyaWVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbCggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblxuXHRcdFx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHV1aWQgPSBuYW1lWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsc1sgdXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIG1hdGVyaWFsJywgdXVpZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YXJyYXkucHVzaCggbWF0ZXJpYWxzWyB1dWlkIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIG5hbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0ZXJpYWxzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCB1dWlkICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzWyB1dWlkIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlJywgdXVpZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZXh0dXJlc1sgdXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGdlb21ldHJ5LCBtYXRlcmlhbDtcblxuXHRcdHN3aXRjaCAoIGRhdGEudHlwZSApIHtcblxuXHRcdFx0Y2FzZSAnU2NlbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xuXG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIE51bWJlci5pc0ludGVnZXIoIGRhdGEuYmFja2dyb3VuZCApICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvciggZGF0YS5iYWNrZ3JvdW5kICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IGdldFRleHR1cmUoIGRhdGEuYmFja2dyb3VuZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGRhdGEuZW52aXJvbm1lbnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5lbnZpcm9ubWVudCA9IGdldFRleHR1cmUoIGRhdGEuZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy5uYW1lICE9PSAnJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZy5uYW1lID0gZGF0YS5mb2cubmFtZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmJhY2tncm91bmRCbHVycmluZXNzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmFja2dyb3VuZEJsdXJyaW5lc3MgPSBkYXRhLmJhY2tncm91bmRCbHVycmluZXNzO1xuXHRcdFx0XHRpZiAoIGRhdGEuYmFja2dyb3VuZEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmJhY2tncm91bmRJbnRlbnNpdHkgPSBkYXRhLmJhY2tncm91bmRJbnRlbnNpdHk7XG5cdFx0XHRcdGlmICggZGF0YS5iYWNrZ3JvdW5kUm90YXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5iYWNrZ3JvdW5kUm90YXRpb24uZnJvbUFycmF5KCBkYXRhLmJhY2tncm91bmRSb3RhdGlvbiApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5lbnZpcm9ubWVudEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmVudmlyb25tZW50SW50ZW5zaXR5ID0gZGF0YS5lbnZpcm9ubWVudEludGVuc2l0eTtcblx0XHRcdFx0aWYgKCBkYXRhLmVudmlyb25tZW50Um90YXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5lbnZpcm9ubWVudFJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5lbnZpcm9ubWVudFJvdGF0aW9uICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BlcnNwZWN0aXZlQ2FtZXJhJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGRhdGEuZm92LCBkYXRhLmFzcGVjdCwgZGF0YS5uZWFyLCBkYXRhLmZhciApO1xuXG5cdFx0XHRcdGlmICggZGF0YS5mb2N1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmZvY3VzID0gZGF0YS5mb2N1cztcblx0XHRcdFx0aWYgKCBkYXRhLnpvb20gIT09IHVuZGVmaW5lZCApIG9iamVjdC56b29tID0gZGF0YS56b29tO1xuXHRcdFx0XHRpZiAoIGRhdGEuZmlsbUdhdWdlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbUdhdWdlID0gZGF0YS5maWxtR2F1Z2U7XG5cdFx0XHRcdGlmICggZGF0YS5maWxtT2Zmc2V0ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZmlsbU9mZnNldCA9IGRhdGEuZmlsbU9mZnNldDtcblx0XHRcdFx0aWYgKCBkYXRhLnZpZXcgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbigge30sIGRhdGEudmlldyApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdPcnRob2dyYXBoaWNDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIGRhdGEubGVmdCwgZGF0YS5yaWdodCwgZGF0YS50b3AsIGRhdGEuYm90dG9tLCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLnpvb20gIT09IHVuZGVmaW5lZCApIG9iamVjdC56b29tID0gZGF0YS56b29tO1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0FtYmllbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEFtYmllbnRMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IERpcmVjdGlvbmFsTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cdFx0XHRcdG9iamVjdC50YXJnZXQgPSBkYXRhLnRhcmdldCB8fCAnJztcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBSZWN0QXJlYUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3BvdExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3BvdExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5hbmdsZSwgZGF0YS5wZW51bWJyYSwgZGF0YS5kZWNheSApO1xuXHRcdFx0XHRvYmplY3QudGFyZ2V0ID0gZGF0YS50YXJnZXQgfHwgJyc7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEhlbWlzcGhlcmVMaWdodCggZGF0YS5jb2xvciwgZGF0YS5ncm91bmRDb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGlnaHRQcm9iZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExpZ2h0UHJvYmUoKS5mcm9tSlNPTiggZGF0YSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdTa2lubmVkTWVzaCc6XG5cblx0XHRcdFx0Z2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xuXHRcdFx0IFx0bWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTa2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmJpbmRNb2RlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYmluZE1vZGUgPSBkYXRhLmJpbmRNb2RlO1xuXHRcdFx0XHRpZiAoIGRhdGEuYmluZE1hdHJpeCAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmJpbmRNYXRyaXguZnJvbUFycmF5KCBkYXRhLmJpbmRNYXRyaXggKTtcblx0XHRcdFx0aWYgKCBkYXRhLnNrZWxldG9uICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2tlbGV0b24gPSBkYXRhLnNrZWxldG9uO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdNZXNoJzpcblxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHRcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0luc3RhbmNlZE1lc2gnOlxuXG5cdFx0XHRcdGdlb21ldHJ5ID0gZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKTtcblx0XHRcdFx0bWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xuXHRcdFx0XHRjb25zdCBjb3VudCA9IGRhdGEuY291bnQ7XG5cdFx0XHRcdGNvbnN0IGluc3RhbmNlTWF0cml4ID0gZGF0YS5pbnN0YW5jZU1hdHJpeDtcblx0XHRcdFx0Y29uc3QgaW5zdGFuY2VDb2xvciA9IGRhdGEuaW5zdGFuY2VDb2xvcjtcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgSW5zdGFuY2VkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsLCBjb3VudCApO1xuXHRcdFx0XHRvYmplY3QuaW5zdGFuY2VNYXRyaXggPSBuZXcgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBpbnN0YW5jZU1hdHJpeC5hcnJheSApLCAxNiApO1xuXHRcdFx0XHRpZiAoIGluc3RhbmNlQ29sb3IgIT09IHVuZGVmaW5lZCApIG9iamVjdC5pbnN0YW5jZUNvbG9yID0gbmV3IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggaW5zdGFuY2VDb2xvci5hcnJheSApLCBpbnN0YW5jZUNvbG9yLml0ZW1TaXplICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0JhdGNoZWRNZXNoJzpcblxuXHRcdFx0XHRnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHRcdG1hdGVyaWFsID0gZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgQmF0Y2hlZE1lc2goIGRhdGEubWF4SW5zdGFuY2VDb3VudCwgZGF0YS5tYXhWZXJ0ZXhDb3VudCwgZGF0YS5tYXhJbmRleENvdW50LCBtYXRlcmlhbCApO1xuXHRcdFx0XHRvYmplY3QuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcblx0XHRcdFx0b2JqZWN0LnBlck9iamVjdEZydXN0dW1DdWxsZWQgPSBkYXRhLnBlck9iamVjdEZydXN0dW1DdWxsZWQ7XG5cdFx0XHRcdG9iamVjdC5zb3J0T2JqZWN0cyA9IGRhdGEuc29ydE9iamVjdHM7XG5cblx0XHRcdFx0b2JqZWN0Ll9kcmF3UmFuZ2VzID0gZGF0YS5kcmF3UmFuZ2VzO1xuXHRcdFx0XHRvYmplY3QuX3Jlc2VydmVkUmFuZ2VzID0gZGF0YS5yZXNlcnZlZFJhbmdlcztcblxuXHRcdFx0XHRvYmplY3QuX3Zpc2liaWxpdHkgPSBkYXRhLnZpc2liaWxpdHk7XG5cdFx0XHRcdG9iamVjdC5fYWN0aXZlID0gZGF0YS5hY3RpdmU7XG5cdFx0XHRcdG9iamVjdC5fYm91bmRzID0gZGF0YS5ib3VuZHMubWFwKCBib3VuZCA9PiB7XG5cblx0XHRcdFx0XHRjb25zdCBib3ggPSBuZXcgQm94MygpO1xuXHRcdFx0XHRcdGJveC5taW4uZnJvbUFycmF5KCBib3VuZC5ib3hNaW4gKTtcblx0XHRcdFx0XHRib3gubWF4LmZyb21BcnJheSggYm91bmQuYm94TWF4ICk7XG5cblx0XHRcdFx0XHRjb25zdCBzcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cdFx0XHRcdFx0c3BoZXJlLnJhZGl1cyA9IGJvdW5kLnNwaGVyZVJhZGl1cztcblx0XHRcdFx0XHRzcGhlcmUuY2VudGVyLmZyb21BcnJheSggYm91bmQuc3BoZXJlQ2VudGVyICk7XG5cblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0Ym94SW5pdGlhbGl6ZWQ6IGJvdW5kLmJveEluaXRpYWxpemVkLFxuXHRcdFx0XHRcdFx0Ym94OiBib3gsXG5cblx0XHRcdFx0XHRcdHNwaGVyZUluaXRpYWxpemVkOiBib3VuZC5zcGhlcmVJbml0aWFsaXplZCxcblx0XHRcdFx0XHRcdHNwaGVyZTogc3BoZXJlXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0b2JqZWN0Ll9tYXhJbnN0YW5jZUNvdW50ID0gZGF0YS5tYXhJbnN0YW5jZUNvdW50O1xuXHRcdFx0XHRvYmplY3QuX21heFZlcnRleENvdW50ID0gZGF0YS5tYXhWZXJ0ZXhDb3VudDtcblx0XHRcdFx0b2JqZWN0Ll9tYXhJbmRleENvdW50ID0gZGF0YS5tYXhJbmRleENvdW50O1xuXG5cdFx0XHRcdG9iamVjdC5fZ2VvbWV0cnlJbml0aWFsaXplZCA9IGRhdGEuZ2VvbWV0cnlJbml0aWFsaXplZDtcblx0XHRcdFx0b2JqZWN0Ll9nZW9tZXRyeUNvdW50ID0gZGF0YS5nZW9tZXRyeUNvdW50O1xuXG5cdFx0XHRcdG9iamVjdC5fbWF0cmljZXNUZXh0dXJlID0gZ2V0VGV4dHVyZSggZGF0YS5tYXRyaWNlc1RleHR1cmUudXVpZCApO1xuXHRcdFx0XHRpZiAoIGRhdGEuY29sb3JzVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Ll9jb2xvcnNUZXh0dXJlID0gZ2V0VGV4dHVyZSggZGF0YS5jb2xvcnNUZXh0dXJlLnV1aWQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTE9EJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTE9EKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBMaW5lKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmVMb29wJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZUxvb3AoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZVNlZ21lbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BvaW50Q2xvdWQnOlxuXHRcdFx0Y2FzZSAnUG9pbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUG9pbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1Nwcml0ZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNwcml0ZSggZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdHcm91cCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEdyb3VwKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0JvbmUnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBCb25lKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHR9XG5cblx0XHRvYmplY3QudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBvYmplY3QubmFtZSA9IGRhdGEubmFtZTtcblxuXHRcdGlmICggZGF0YS5tYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2JqZWN0Lm1hdHJpeC5mcm9tQXJyYXkoIGRhdGEubWF0cml4ICk7XG5cblx0XHRcdGlmICggZGF0YS5tYXRyaXhBdXRvVXBkYXRlICE9PSB1bmRlZmluZWQgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGRhdGEubWF0cml4QXV0b1VwZGF0ZTtcblx0XHRcdGlmICggb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgKSBvYmplY3QubWF0cml4LmRlY29tcG9zZSggb2JqZWN0LnBvc2l0aW9uLCBvYmplY3QucXVhdGVybmlvbiwgb2JqZWN0LnNjYWxlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRhdGEucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5wb3NpdGlvbi5mcm9tQXJyYXkoIGRhdGEucG9zaXRpb24gKTtcblx0XHRcdGlmICggZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5yb3RhdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnF1YXRlcm5pb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5xdWF0ZXJuaW9uLmZyb21BcnJheSggZGF0YS5xdWF0ZXJuaW9uICk7XG5cdFx0XHRpZiAoIGRhdGEuc2NhbGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zY2FsZS5mcm9tQXJyYXkoIGRhdGEuc2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS51cCAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnVwLmZyb21BcnJheSggZGF0YS51cCApO1xuXG5cdFx0aWYgKCBkYXRhLmNhc3RTaGFkb3cgIT09IHVuZGVmaW5lZCApIG9iamVjdC5jYXN0U2hhZG93ID0gZGF0YS5jYXN0U2hhZG93O1xuXHRcdGlmICggZGF0YS5yZWNlaXZlU2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IGRhdGEucmVjZWl2ZVNoYWRvdztcblxuXHRcdGlmICggZGF0YS5zaGFkb3cgKSB7XG5cblx0XHRcdGlmICggZGF0YS5zaGFkb3cuaW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LmludGVuc2l0eSA9IGRhdGEuc2hhZG93LmludGVuc2l0eTtcblx0XHRcdGlmICggZGF0YS5zaGFkb3cuYmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5iaWFzID0gZGF0YS5zaGFkb3cuYmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubm9ybWFsQmlhcyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5ub3JtYWxCaWFzID0gZGF0YS5zaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cucmFkaXVzICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LnJhZGl1cyA9IGRhdGEuc2hhZG93LnJhZGl1cztcblx0XHRcdGlmICggZGF0YS5zaGFkb3cubWFwU2l6ZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5tYXBTaXplLmZyb21BcnJheSggZGF0YS5zaGFkb3cubWFwU2l6ZSApO1xuXHRcdFx0aWYgKCBkYXRhLnNoYWRvdy5jYW1lcmEgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuY2FtZXJhID0gdGhpcy5wYXJzZU9iamVjdCggZGF0YS5zaGFkb3cuY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudmlzaWJsZSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpc2libGUgPSBkYXRhLnZpc2libGU7XG5cdFx0aWYgKCBkYXRhLmZydXN0dW1DdWxsZWQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZGF0YS5mcnVzdHVtQ3VsbGVkO1xuXHRcdGlmICggZGF0YS5yZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlbmRlck9yZGVyID0gZGF0YS5yZW5kZXJPcmRlcjtcblx0XHRpZiAoIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCApIG9iamVjdC51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cdFx0aWYgKCBkYXRhLmxheWVycyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LmxheWVycy5tYXNrID0gZGF0YS5sYXllcnM7XG5cblx0XHRpZiAoIGRhdGEuY2hpbGRyZW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0b2JqZWN0LmFkZCggdGhpcy5wYXJzZU9iamVjdCggY2hpbGRyZW5bIGkgXSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzLCB0ZXh0dXJlcywgYW5pbWF0aW9ucyApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5hbmltYXRpb25zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdEFuaW1hdGlvbnMgPSBkYXRhLmFuaW1hdGlvbnM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdEFuaW1hdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHV1aWQgPSBvYmplY3RBbmltYXRpb25zWyBpIF07XG5cblx0XHRcdFx0b2JqZWN0LmFuaW1hdGlvbnMucHVzaCggYW5pbWF0aW9uc1sgdXVpZCBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS50eXBlID09PSAnTE9EJyApIHtcblxuXHRcdFx0aWYgKCBkYXRhLmF1dG9VcGRhdGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5hdXRvVXBkYXRlID0gZGF0YS5hdXRvVXBkYXRlO1xuXG5cdFx0XHRjb25zdCBsZXZlbHMgPSBkYXRhLmxldmVscztcblxuXHRcdFx0Zm9yICggbGV0IGwgPSAwOyBsIDwgbGV2ZWxzLmxlbmd0aDsgbCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBsZXZlbCA9IGxldmVsc1sgbCBdO1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIGxldmVsLm9iamVjdCApO1xuXG5cdFx0XHRcdGlmICggY2hpbGQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG9iamVjdC5hZGRMZXZlbCggY2hpbGQsIGxldmVsLmRpc3RhbmNlLCBsZXZlbC5oeXN0ZXJlc2lzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxuXHRiaW5kU2tlbGV0b25zKCBvYmplY3QsIHNrZWxldG9ucyApIHtcblxuXHRcdGlmICggT2JqZWN0LmtleXMoIHNrZWxldG9ucyApLmxlbmd0aCA9PT0gMCApIHJldHVybjtcblxuXHRcdG9iamVjdC50cmF2ZXJzZSggZnVuY3Rpb24gKCBjaGlsZCApIHtcblxuXHRcdFx0aWYgKCBjaGlsZC5pc1NraW5uZWRNZXNoID09PSB0cnVlICYmIGNoaWxkLnNrZWxldG9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2tlbGV0b24gPSBza2VsZXRvbnNbIGNoaWxkLnNrZWxldG9uIF07XG5cblx0XHRcdFx0aWYgKCBza2VsZXRvbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBza2VsZXRvbiBmb3VuZCB3aXRoIFVVSUQ6JywgY2hpbGQuc2tlbGV0b24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y2hpbGQuYmluZCggc2tlbGV0b24sIGNoaWxkLmJpbmRNYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9XG5cblx0YmluZExpZ2h0VGFyZ2V0cyggb2JqZWN0ICkge1xuXG5cdFx0b2JqZWN0LnRyYXZlcnNlKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuXG5cdFx0XHRpZiAoIGNoaWxkLmlzRGlyZWN0aW9uYWxMaWdodCB8fCBjaGlsZC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1dWlkID0gY2hpbGQudGFyZ2V0O1xuXG5cdFx0XHRcdGNvbnN0IHRhcmdldCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCAndXVpZCcsIHV1aWQgKTtcblxuXHRcdFx0XHRpZiAoIHRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2hpbGQudGFyZ2V0ID0gdGFyZ2V0O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjaGlsZC50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9XG5cbn1cblxuY29uc3QgVEVYVFVSRV9NQVBQSU5HID0ge1xuXHRVVk1hcHBpbmc6IFVWTWFwcGluZyxcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEN1YmVSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nXG59O1xuXG5jb25zdCBURVhUVVJFX1dSQVBQSU5HID0ge1xuXHRSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsXG5cdENsYW1wVG9FZGdlV3JhcHBpbmc6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmdcbn07XG5cbmNvbnN0IFRFWFRVUkVfRklMVEVSID0ge1xuXHROZWFyZXN0RmlsdGVyOiBOZWFyZXN0RmlsdGVyLFxuXHROZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcjogTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXI6IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdExpbmVhckZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyOiBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI6IExpbmVhck1pcG1hcExpbmVhckZpbHRlclxufTtcblxuLyoqXG4gKiBBIGxvYWRlciBmb3IgbG9hZGluZyBpbWFnZXMgYXMgYW4gW0ltYWdlQml0bWFwXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSW1hZ2VCaXRtYXB9LlxuICogQW4gYEltYWdlQml0bWFwYCBwcm92aWRlcyBhbiBhc3luY2hyb25vdXMgYW5kIHJlc291cmNlIGVmZmljaWVudCBwYXRod2F5IHRvIHByZXBhcmVcbiAqIHRleHR1cmVzIGZvciByZW5kZXJpbmcuXG4gKlxuICogTm90ZSB0aGF0IHtAbGluayBUZXh0dXJlI2ZsaXBZfSBhbmQge0BsaW5rIFRleHR1cmUjcHJlbXVsdGlwbHlBbHBoYX0gYXJlIGlnbm9yZWQgd2l0aCBpbWFnZSBiaXRtYXBzLlxuICogVGhleSBuZWVkcyB0aGVzZSBjb25maWd1cmF0aW9uIG9uIGJpdG1hcCBjcmVhdGlvbiB1bmxpa2UgcmVndWxhciBpbWFnZXMgbmVlZCB0aGVtIG9uIHVwbG9hZGluZyB0byBHUFUuXG4gKlxuICogWW91IG5lZWQgdG8gc2V0IHRoZSBlcXVpdmFsZW50IG9wdGlvbnMgdmlhIHtAbGluayBJbWFnZUJpdG1hcExvYWRlciNzZXRPcHRpb25zfSBpbnN0ZWFkLlxuICpcbiAqIEFsc28gbm90ZSB0aGF0IHVubGlrZSB7QGxpbmsgRmlsZUxvYWRlcn0sIHRoaXMgbG9hZGVyIGRvZXMgbm90IGF2b2lkIG11bHRpcGxlIGNvbmN1cnJlbnQgcmVxdWVzdHMgdG8gdGhlIHNhbWUgVVJMLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXIoKTtcbiAqIGxvYWRlci5zZXRPcHRpb25zKCB7IGltYWdlT3JpZW50YXRpb246ICdmbGlwWScgfSApOyAvLyBzZXQgb3B0aW9ucyBpZiBuZWVkZWRcbiAqIGNvbnN0IGltYWdlQml0bWFwID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYyggJ2ltYWdlLnBuZycgKTtcbiAqXG4gKiBjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoIGltYWdlQml0bWFwICk7XG4gKiB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgSW1hZ2VCaXRtYXBMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGltYWdlIGJpdG1hcCBsb2FkZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TG9hZGluZ01hbmFnZXJ9IFttYW5hZ2VyXSAtIFRoZSBsb2FkaW5nIG1hbmFnZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSW1hZ2VCaXRtYXBMb2FkZXIgPSB0cnVlO1xuXG5cdFx0aWYgKCB0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGZldGNoKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSBsb2FkZXIgb3B0aW9ucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQGRlZmF1bHQge3ByZW11bHRpcGx5QWxwaGE6J25vbmUnfVxuXHRcdCAqL1xuXHRcdHRoaXMub3B0aW9ucyA9IHsgcHJlbXVsdGlwbHlBbHBoYTogJ25vbmUnIH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBsb2FkZXIgb3B0aW9ucy4gVGhlIHN0cnVjdHVyZSBvZiB0aGUgb2JqZWN0IG11c3QgbWF0Y2ggdGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIgb2Zcblx0ICogW2NyZWF0ZUltYWdlQml0bWFwXXtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2NyZWF0ZUltYWdlQml0bWFwfS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgbG9hZGVyIG9wdGlvbnMgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtJbWFnZUJpdG1hcExvYWRlcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbWFnZSBiaXRtYXAgbG9hZGVyLlxuXHQgKi9cblx0c2V0T3B0aW9ucyggb3B0aW9ucyApIHtcblxuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyBsb2FkaW5nIGZyb20gdGhlIGdpdmVuIFVSTCBhbmQgcGFzcyB0aGUgbG9hZGVkIGltYWdlIGJpdG1hcCB0byB0aGUgYG9uTG9hZCgpYCBjYWxsYmFjay5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBwYXRoL1VSTCBvZiB0aGUgZmlsZSB0byBiZSBsb2FkZWQuIFRoaXMgY2FuIGFsc28gYmUgYSBkYXRhIFVSSS5cblx0ICogQHBhcmFtIHtmdW5jdGlvbihJbWFnZUJpdG1hcCl9IG9uTG9hZCAtIEV4ZWN1dGVkIHdoZW4gdGhlIGxvYWRpbmcgcHJvY2VzcyBoYXMgYmVlbiBmaW5pc2hlZC5cblx0ICogQHBhcmFtIHtvblByb2dyZXNzQ2FsbGJhY2t9IG9uUHJvZ3Jlc3MgLSBVbnN1cHBvcnRlZCBpbiB0aGlzIGxvYWRlci5cblx0ICogQHBhcmFtIHtvbkVycm9yQ2FsbGJhY2t9IG9uRXJyb3IgLSBFeGVjdXRlZCB3aGVuIGVycm9ycyBvY2N1ci5cblx0ICogQHJldHVybiB7SW1hZ2VCaXRtYXB8dW5kZWZpbmVkfSBUaGUgaW1hZ2UgYml0bWFwLlxuXHQgKi9cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHVybCA9PT0gdW5kZWZpbmVkICkgdXJsID0gJyc7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0Ly8gSWYgY2FjaGVkIGlzIGEgcHJvbWlzZSwgd2FpdCBmb3IgaXQgdG8gcmVzb2x2ZVxuXHRcdFx0aWYgKCBjYWNoZWQudGhlbiApIHtcblxuXHRcdFx0XHRjYWNoZWQudGhlbiggaW1hZ2VCaXRtYXAgPT4ge1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGltYWdlQml0bWFwICk7XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHRcdH0gKS5jYXRjaCggZSA9PiB7XG5cblx0XHRcdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgY2FjaGVkIGlzIG5vdCBhIHByb21pc2UgKGkuZS4sIGl0J3MgYWxyZWFkeSBhbiBpbWFnZUJpdG1hcClcblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZmV0Y2hPcHRpb25zID0ge307XG5cdFx0ZmV0Y2hPcHRpb25zLmNyZWRlbnRpYWxzID0gKCB0aGlzLmNyb3NzT3JpZ2luID09PSAnYW5vbnltb3VzJyApID8gJ3NhbWUtb3JpZ2luJyA6ICdpbmNsdWRlJztcblx0XHRmZXRjaE9wdGlvbnMuaGVhZGVycyA9IHRoaXMucmVxdWVzdEhlYWRlcjtcblxuXHRcdGNvbnN0IHByb21pc2UgPSBmZXRjaCggdXJsLCBmZXRjaE9wdGlvbnMgKS50aGVuKCBmdW5jdGlvbiAoIHJlcyApIHtcblxuXHRcdFx0cmV0dXJuIHJlcy5ibG9iKCk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBibG9iICkge1xuXG5cdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IsIE9iamVjdC5hc3NpZ24oIHNjb3BlLm9wdGlvbnMsIHsgY29sb3JTcGFjZUNvbnZlcnNpb246ICdub25lJyB9ICkgKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGltYWdlQml0bWFwICkge1xuXG5cdFx0XHRDYWNoZS5hZGQoIHVybCwgaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGltYWdlQml0bWFwICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdHJldHVybiBpbWFnZUJpdG1hcDtcblxuXHRcdH0gKS5jYXRjaCggZnVuY3Rpb24gKCBlICkge1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdENhY2hlLnJlbW92ZSggdXJsICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICk7XG5cblx0XHRDYWNoZS5hZGQoIHVybCwgcHJvbWlzZSApO1xuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHR9XG5cbn1cblxubGV0IF9jb250ZXh0O1xuXG4vKipcbiAqIE1hbmFnZXMgdGhlIGdsb2JhbCBhdWRpbyBjb250ZXh0IGluIHRoZSBlbmdpbmUuXG4gKlxuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBBdWRpb0NvbnRleHQge1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBnbG9iYWwgbmF0aXZlIGF1ZGlvIGNvbnRleHQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0F1ZGlvQ29udGV4dH0gVGhlIG5hdGl2ZSBhdWRpbyBjb250ZXh0LlxuXHQgKi9cblx0c3RhdGljIGdldENvbnRleHQoKSB7XG5cblx0XHRpZiAoIF9jb250ZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9jb250ZXh0ID0gbmV3ICggd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0ICkoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBfY29udGV4dDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFsbG93cyB0byBzZXQgdGhlIGdsb2JhbCBuYXRpdmUgYXVkaW8gY29udGV4dCBmcm9tIG91dHNpZGUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXVkaW9Db250ZXh0fSB2YWx1ZSAtIFRoZSBuYXRpdmUgY29udGV4dCB0byBzZXQuXG5cdCAqL1xuXHRzdGF0aWMgc2V0Q29udGV4dCggdmFsdWUgKSB7XG5cblx0XHRfY29udGV4dCA9IHZhbHVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIENsYXNzIGZvciBsb2FkaW5nIGF1ZGlvIGJ1ZmZlcnMuIEF1ZGlvcyBhcmUgaW50ZXJuYWxseVxuICogbG9hZGVkIHZpYSB7QGxpbmsgRmlsZUxvYWRlcn0uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGF1ZGlvTGlzdGVuZXIgPSBuZXcgVEhSRUUuQXVkaW9MaXN0ZW5lcigpO1xuICogY29uc3QgYW1iaWVudFNvdW5kID0gbmV3IFRIUkVFLkF1ZGlvKCBhdWRpb0xpc3RlbmVyICk7XG4gKlxuICogY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLkF1ZGlvTG9hZGVyKCk7XG4gKiBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IGxvYWRlci5sb2FkQXN5bmMoICdhdWRpby9hbWJpZW50X29jZWFuLm9nZycgKTtcbiAqXG4gKiBhbWJpZW50U291bmQuc2V0QnVmZmVyKCBhdWRpb0J1ZmZlciApO1xuICogYW1iaWVudFNvdW5kLnBsYXkoKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMb2FkZXJcbiAqL1xuY2xhc3MgQXVkaW9Mb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGF1ZGlvIGxvYWRlci5cblx0ICpcblx0ICogQHBhcmFtIHtMb2FkaW5nTWFuYWdlcn0gW21hbmFnZXJdIC0gVGhlIGxvYWRpbmcgbWFuYWdlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBtYW5hZ2VyICkge1xuXG5cdFx0c3VwZXIoIG1hbmFnZXIgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyBsb2FkaW5nIGZyb20gdGhlIGdpdmVuIFVSTCBhbmQgcGFzc2VzIHRoZSBsb2FkZWQgYXVkaW8gYnVmZmVyXG5cdCAqIHRvIHRoZSBgb25Mb2FkKClgIGNhbGxiYWNrLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHBhdGgvVVJMIG9mIHRoZSBmaWxlIHRvIGJlIGxvYWRlZC4gVGhpcyBjYW4gYWxzbyBiZSBhIGRhdGEgVVJJLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9uKEF1ZGlvQnVmZmVyKX0gb25Mb2FkIC0gRXhlY3V0ZWQgd2hlbiB0aGUgbG9hZGluZyBwcm9jZXNzIGhhcyBiZWVuIGZpbmlzaGVkLlxuXHQgKiBAcGFyYW0ge29uUHJvZ3Jlc3NDYWxsYmFja30gb25Qcm9ncmVzcyAtIEV4ZWN1dGVkIHdoaWxlIHRoZSBsb2FkaW5nIGlzIGluIHByb2dyZXNzLlxuXHQgKiBAcGFyYW0ge29uRXJyb3JDYWxsYmFja30gb25FcnJvciAtIEV4ZWN1dGVkIHdoZW4gZXJyb3JzIG9jY3VyLlxuXHQgKi9cblx0bG9hZCggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2Rcblx0XHRcdFx0Ly8gZGV0YWNoZXMgdGhlIGJ1ZmZlciB3aGVuIGNvbXBsZXRlLCBwcmV2ZW50aW5nIHJldXNlLlxuXHRcdFx0XHRjb25zdCBidWZmZXJDb3B5ID0gYnVmZmVyLnNsaWNlKCAwICk7XG5cblx0XHRcdFx0Y29uc3QgY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cdFx0XHRcdGNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBidWZmZXJDb3B5LCBmdW5jdGlvbiAoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0b25Mb2FkKCBhdWRpb0J1ZmZlciApO1xuXG5cdFx0XHRcdH0gKS5jYXRjaCggaGFuZGxlRXJyb3IgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0aGFuZGxlRXJyb3IoIGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlRXJyb3IoIGUgKSB7XG5cblx0XHRcdGlmICggb25FcnJvciApIHtcblxuXHRcdFx0XHRvbkVycm9yKCBlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY29uc3QgX2V5ZVJpZ2h0ID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4NCgpO1xuY29uc3QgX2V5ZUxlZnQgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfcHJvamVjdGlvbk1hdHJpeCA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuLyoqXG4gKiBBIHNwZWNpYWwgdHlwZSBvZiBjYW1lcmEgdGhhdCB1c2VzIHR3byBwZXJzcGVjdGl2ZSBjYW1lcmFzIHdpdGhcbiAqIHN0ZXJlb3Njb3BpYyBwcm9qZWN0aW9uLiBDYW4gYmUgdXNlZCBmb3IgcmVuZGVyaW5nIHN0ZXJlbyBlZmZlY3RzXG4gKiBsaWtlIFszRCBBbmFnbHlwaF17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQW5hZ2x5cGhfM0R9IG9yXG4gKiBbUGFyYWxsYXggQmFycmllcl17QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvcGFyYWxsYXhfYmFycmllcn0uXG4gKi9cbmNsYXNzIFN0ZXJlb0NhbWVyYSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3RlcmVvIGNhbWVyYS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgcHJvcGVydHkgaXMgdXNlZCBmb3IgZGV0ZWN0aW5nIHRoZSBvYmplY3QgdHlwZVxuXHRcdCAqIGluIGNvbnRleHQgb2Ygc2VyaWFsaXphdGlvbi9kZXNlcmlhbGl6YXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMudHlwZSA9ICdTdGVyZW9DYW1lcmEnO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGFzcGVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMuYXNwZWN0ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBleWUgc2VwYXJhdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBkaXN0YW5jZVxuXHRcdCAqIGJldHdlZW4gdGhlIGxlZnQgYW5kIHJpZ2h0IGNhbWVyYS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMC4wNjRcblx0XHQgKi9cblx0XHR0aGlzLmV5ZVNlcCA9IDAuMDY0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhbWVyYSByZXByZXNlbnRpbmcgdGhlIGxlZnQgZXllLiBUaGlzIGlzIGFkZGVkIHRvIGxheWVyIGAxYCBzbyBvYmplY3RzIHRvIGJlXG5cdFx0ICogcmVuZGVyZWQgYnkgdGhlIGxlZnQgY2FtZXJhIG11c3QgYWxzbyBiZSBhZGRlZCB0byB0aGlzIGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1BlcnNwZWN0aXZlQ2FtZXJhfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuY2FtZXJhTC5sYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjYW1lcmEgcmVwcmVzZW50aW5nIHRoZSByaWdodCBleWUuIFRoaXMgaXMgYWRkZWQgdG8gbGF5ZXIgYDJgIHNvIG9iamVjdHMgdG8gYmVcblx0XHQgKiByZW5kZXJlZCBieSB0aGUgcmlnaHQgY2FtZXJhIG11c3QgYWxzbyBiZSBhZGRlZCB0byB0aGlzIGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1BlcnNwZWN0aXZlQ2FtZXJhfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdHRoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cdFx0dGhpcy5jYW1lcmFSLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHRcdHRoaXMuX2NhY2hlID0ge1xuXHRcdFx0Zm9jdXM6IG51bGwsXG5cdFx0XHRmb3Y6IG51bGwsXG5cdFx0XHRhc3BlY3Q6IG51bGwsXG5cdFx0XHRuZWFyOiBudWxsLFxuXHRcdFx0ZmFyOiBudWxsLFxuXHRcdFx0em9vbTogbnVsbCxcblx0XHRcdGV5ZVNlcDogbnVsbFxuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBzdGVyZW8gY2FtZXJhIGJhc2VkIG9uIHRoZSBnaXZlbiBwZXJzcGVjdGl2ZSBjYW1lcmEuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UGVyc3BlY3RpdmVDYW1lcmF9IGNhbWVyYSAtIFRoZSBwZXJzcGVjdGl2ZSBjYW1lcmEuXG5cdCAqL1xuXHR1cGRhdGUoIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGU7XG5cblx0XHRjb25zdCBuZWVkc1VwZGF0ZSA9IGNhY2hlLmZvY3VzICE9PSBjYW1lcmEuZm9jdXMgfHwgY2FjaGUuZm92ICE9PSBjYW1lcmEuZm92IHx8XG5cdFx0XHRjYWNoZS5hc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdCB8fCBjYWNoZS5uZWFyICE9PSBjYW1lcmEubmVhciB8fFxuXHRcdFx0Y2FjaGUuZmFyICE9PSBjYW1lcmEuZmFyIHx8IGNhY2hlLnpvb20gIT09IGNhbWVyYS56b29tIHx8IGNhY2hlLmV5ZVNlcCAhPT0gdGhpcy5leWVTZXA7XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRjYWNoZS5mb2N1cyA9IGNhbWVyYS5mb2N1cztcblx0XHRcdGNhY2hlLmZvdiA9IGNhbWVyYS5mb3Y7XG5cdFx0XHRjYWNoZS5hc3BlY3QgPSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3Q7XG5cdFx0XHRjYWNoZS5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRjYWNoZS5mYXIgPSBjYW1lcmEuZmFyO1xuXHRcdFx0Y2FjaGUuem9vbSA9IGNhbWVyYS56b29tO1xuXHRcdFx0Y2FjaGUuZXllU2VwID0gdGhpcy5leWVTZXA7XG5cblx0XHRcdC8vIE9mZi1heGlzIHN0ZXJlb3Njb3BpYyBlZmZlY3QgYmFzZWQgb25cblx0XHRcdC8vIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9zdGVyZW9ncmFwaGljcy9zdGVyZW9yZW5kZXIvXG5cblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRjb25zdCBleWVTZXBIYWxmID0gY2FjaGUuZXllU2VwIC8gMjtcblx0XHRcdGNvbnN0IGV5ZVNlcE9uUHJvamVjdGlvbiA9IGV5ZVNlcEhhbGYgKiBjYWNoZS5uZWFyIC8gY2FjaGUuZm9jdXM7XG5cdFx0XHRjb25zdCB5bWF4ID0gKCBjYWNoZS5uZWFyICogTWF0aC50YW4oIERFRzJSQUQgKiBjYWNoZS5mb3YgKiAwLjUgKSApIC8gY2FjaGUuem9vbTtcblx0XHRcdGxldCB4bWluLCB4bWF4O1xuXG5cdFx0XHQvLyB0cmFuc2xhdGUgeE9mZnNldFxuXG5cdFx0XHRfZXllTGVmdC5lbGVtZW50c1sgMTIgXSA9IC0gZXllU2VwSGFsZjtcblx0XHRcdF9leWVSaWdodC5lbGVtZW50c1sgMTIgXSA9IGV5ZVNlcEhhbGY7XG5cblx0XHRcdC8vIGZvciBsZWZ0IGV5ZVxuXG5cdFx0XHR4bWluID0gLSB5bWF4ICogY2FjaGUuYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0eG1heCA9IHltYXggKiBjYWNoZS5hc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogY2FjaGUubmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdF9wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA4IF0gPSAoIHhtYXggKyB4bWluICkgLyAoIHhtYXggLSB4bWluICk7XG5cblx0XHRcdHRoaXMuY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIF9wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdC8vIGZvciByaWdodCBleWVcblxuXHRcdFx0eG1pbiA9IC0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblx0XHRcdHhtYXggPSB5bWF4ICogY2FjaGUuYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgMCBdID0gMiAqIGNhY2hlLm5lYXIgLyAoIHhtYXggLSB4bWluICk7XG5cdFx0XHRfcHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHR0aGlzLmNhbWVyYVIucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBfcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLm11bHRpcGx5KCBfZXllTGVmdCApO1xuXHRcdHRoaXMuY2FtZXJhUi5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggX2V5ZVJpZ2h0ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhpcyB0eXBlIG9mIGNhbWVyYSBjYW4gYmUgdXNlZCBpbiBvcmRlciB0byBlZmZpY2llbnRseSByZW5kZXIgYSBzY2VuZSB3aXRoIGFcbiAqIHByZWRlZmluZWQgc2V0IG9mIGNhbWVyYXMuIFRoaXMgaXMgYW4gaW1wb3J0YW50IHBlcmZvcm1hbmNlIGFzcGVjdCBmb3JcbiAqIHJlbmRlcmluZyBWUiBzY2VuZXMuXG4gKlxuICogQW4gaW5zdGFuY2Ugb2YgYEFycmF5Q2FtZXJhYCBhbHdheXMgaGFzIGFuIGFycmF5IG9mIHN1YiBjYW1lcmFzLiBJdCdzIG1hbmRhdG9yeVxuICogdG8gZGVmaW5lIGZvciBlYWNoIHN1YiBjYW1lcmEgdGhlIGB2aWV3cG9ydGAgcHJvcGVydHkgd2hpY2ggZGV0ZXJtaW5lcyB0aGVcbiAqIHBhcnQgb2YgdGhlIHZpZXdwb3J0IHRoYXQgaXMgcmVuZGVyZWQgd2l0aCB0aGlzIGNhbWVyYS5cbiAqXG4gKiBAYXVnbWVudHMgUGVyc3BlY3RpdmVDYW1lcmFcbiAqL1xuY2xhc3MgQXJyYXlDYW1lcmEgZXh0ZW5kcyBQZXJzcGVjdGl2ZUNhbWVyYSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXJyYXkgY2FtZXJhLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PFBlcnNwZWN0aXZlQ2FtZXJhPn0gW2FycmF5PVtdXSAtIEFuIGFycmF5IG9mIHBlcnNwZWN0aXZlIHN1YiBjYW1lcmFzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGFycmF5ID0gW10gKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc0FycmF5Q2FtZXJhID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIGFycmF5IG9mIHBlcnNwZWN0aXZlIHN1YiBjYW1lcmFzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PFBlcnNwZWN0aXZlQ2FtZXJhPn1cblx0XHQgKi9cblx0XHR0aGlzLmNhbWVyYXMgPSBhcnJheTtcblx0XHR0aGlzLmluZGV4ID0gMDtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBDbGFzcyBmb3Iga2VlcGluZyB0cmFjayBvZiB0aW1lLlxuICovXG5jbGFzcyBDbG9jayB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY2xvY2suXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2F1dG9TdGFydD10cnVlXSAtIFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSBzdGFydCB0aGUgY2xvY2sgd2hlblxuXHQgKiBgZ2V0RGVsdGEoKWAgaXMgY2FsbGVkIGZvciB0aGUgZmlyc3QgdGltZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhdXRvU3RhcnQgPSB0cnVlICkge1xuXG5cdFx0LyoqXG5cdFx0ICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIGNsb2NrIHN0YXJ0cyBhdXRvbWF0aWNhbGx5IHdoZW4gYGdldERlbHRhKClgIGlzIGNhbGxlZFxuXHRcdCAqIGZvciB0aGUgZmlyc3QgdGltZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmF1dG9TdGFydCA9IGF1dG9TdGFydDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvbGRzIHRoZSB0aW1lIGF0IHdoaWNoIHRoZSBjbG9jaydzIGBzdGFydCgpYCBtZXRob2Qgd2FzIGxhc3QgY2FsbGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5zdGFydFRpbWUgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIHRpbWUgYXQgd2hpY2ggdGhlIGNsb2NrJ3MgYHN0YXJ0KClgLCBgZ2V0RWxhcHNlZFRpbWUoKWAgb3Jcblx0XHQgKiBgZ2V0RGVsdGEoKWAgbWV0aG9kcyB3ZXJlIGxhc3QgY2FsbGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5vbGRUaW1lID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEtlZXBzIHRyYWNrIG9mIHRoZSB0b3RhbCB0aW1lIHRoYXQgdGhlIGNsb2NrIGhhcyBiZWVuIHJ1bm5pbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGNsb2NrIGlzIHJ1bm5pbmcgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIHRoZSBjbG9jay4gV2hlbiBgYXV0b1N0YXJ0YCBpcyBzZXQgdG8gYHRydWVgLCB0aGUgbWV0aG9kIGlzIGF1dG9tYXRpY2FsbHlcblx0ICogY2FsbGVkIGJ5IHRoZSBjbGFzcy5cblx0ICovXG5cdHN0YXJ0KCkge1xuXG5cdFx0dGhpcy5zdGFydFRpbWUgPSBub3coKTtcblxuXHRcdHRoaXMub2xkVGltZSA9IHRoaXMuc3RhcnRUaW1lO1xuXHRcdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuXHRcdHRoaXMucnVubmluZyA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdG9wcyB0aGUgY2xvY2suXG5cdCAqL1xuXHRzdG9wKCkge1xuXG5cdFx0dGhpcy5nZXRFbGFwc2VkVGltZSgpO1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBlbGFwc2VkIHRpbWUgaW4gc2Vjb25kcy5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgZWxhcHNlZCB0aW1lLlxuXHQgKi9cblx0Z2V0RWxhcHNlZFRpbWUoKSB7XG5cblx0XHR0aGlzLmdldERlbHRhKCk7XG5cdFx0cmV0dXJuIHRoaXMuZWxhcHNlZFRpbWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBkZWx0YSB0aW1lIGluIHNlY29uZHMuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRlbHRhIHRpbWUuXG5cdCAqL1xuXHRnZXREZWx0YSgpIHtcblxuXHRcdGxldCBkaWZmID0gMDtcblxuXHRcdGlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdGNvbnN0IG5ld1RpbWUgPSBub3coKTtcblxuXHRcdFx0ZGlmZiA9ICggbmV3VGltZSAtIHRoaXMub2xkVGltZSApIC8gMTAwMDtcblx0XHRcdHRoaXMub2xkVGltZSA9IG5ld1RpbWU7XG5cblx0XHRcdHRoaXMuZWxhcHNlZFRpbWUgKz0gZGlmZjtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkaWZmO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBub3coKSB7XG5cblx0cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuXG59XG5cbmNvbnN0IF9wb3NpdGlvbiQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3F1YXRlcm5pb24kMSA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcbmNvbnN0IF9zY2FsZSQxID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX29yaWVudGF0aW9uJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogVGhlIGNsYXNzIHJlcHJlc2VudHMgYSB2aXJ0dWFsIGxpc3RlbmVyIG9mIHRoZSBhbGwgcG9zaXRpb25hbCBhbmQgbm9uLXBvc2l0aW9uYWwgYXVkaW8gZWZmZWN0c1xuICogaW4gdGhlIHNjZW5lLiBBIHRocmVlLmpzIGFwcGxpY2F0aW9uIHVzdWFsbHkgY3JlYXRlcyBhIHNpbmdsZSBsaXN0ZW5lci4gSXQgaXMgYSBtYW5kYXRvcnlcbiAqIGNvbnN0cnVjdG9yIHBhcmFtZXRlciBmb3IgYXVkaW9zIGVudGl0aWVzIGxpa2Uge0BsaW5rIEF1ZGlvfSBhbmQge0BsaW5rIFBvc2l0aW9uYWxBdWRpb30uXG4gKlxuICogSW4gbW9zdCBjYXNlcywgdGhlIGxpc3RlbmVyIG9iamVjdCBpcyBhIGNoaWxkIG9mIHRoZSBjYW1lcmEuIFNvIHRoZSAzRCB0cmFuc2Zvcm1hdGlvbiBvZiB0aGVcbiAqIGNhbWVyYSByZXByZXNlbnRzIHRoZSAzRCB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gKlxuICogQGF1Z21lbnRzIE9iamVjdDNEXG4gKi9cbmNsYXNzIEF1ZGlvTGlzdGVuZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXVkaW8gbGlzdGVuZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXVkaW9MaXN0ZW5lcic7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmF0aXZlIGF1ZGlvIGNvbnRleHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXVkaW9Db250ZXh0fVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuY29udGV4dCA9IEF1ZGlvQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ2FpbiBub2RlIHVzZWQgZm9yIHZvbHVtZSBjb250cm9sLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0dhaW5Ob2RlfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb3B0aW9uYWwgZmlsdGVyLlxuXHRcdCAqXG5cdFx0ICogRGVmaW5lZCB2aWEge0BsaW5rIEF1ZGlvTGlzdGVuZXIjc2V0RmlsdGVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/QXVkaW9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaW1lIGRlbHRhIHZhbHVlcyByZXF1aXJlZCBmb3IgYGxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKClgIHVzYWdlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy50aW1lRGVsdGEgPSAwO1xuXG5cdFx0Ly8gcHJpdmF0ZVxuXG5cdFx0dGhpcy5fY2xvY2sgPSBuZXcgQ2xvY2soKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxpc3RlbmVyJ3MgaW5wdXQgbm9kZS5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgaXMgdXNlZCBieSBvdGhlciBhdWRpbyBub2RlcyB0byBjb25uZWN0IHRvIHRoaXMgbGlzdGVuZXIuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0dhaW5Ob2RlfSBUaGUgaW5wdXQgbm9kZS5cblx0ICovXG5cdGdldElucHV0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgZmlsdGVyIGZyb20gdGhpcyBsaXN0ZW5lci5cblx0ICpcblx0ICogQHJldHVybiB7QXVkaW9MaXN0ZW5lcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBsaXN0ZW5lci5cblx0ICovXG5cdHJlbW92ZUZpbHRlcigpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgc2V0IGZpbHRlci5cblx0ICpcblx0ICogQHJldHVybiB7P0F1ZGlvTm9kZX0gVGhlIGZpbHRlci5cblx0ICovXG5cdGdldEZpbHRlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIGZpbHRlciB0byB0aGlzIGxpc3RlbmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0F1ZGlvTm9kZX0gdmFsdWUgLSBUaGUgZmlsdGVyIHRvIHNldC5cblx0ICogQHJldHVybiB7QXVkaW9MaXN0ZW5lcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBsaXN0ZW5lci5cblx0ICovXG5cdHNldEZpbHRlciggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVyICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHRcdHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5maWx0ZXIgPSB2YWx1ZTtcblx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5maWx0ZXIgKTtcblx0XHR0aGlzLmZpbHRlci5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYXBwbGljYXRpb25zIG1hc3RlciB2b2x1bWUuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1hc3RlciB2b2x1bWUuXG5cdCAqL1xuXHRnZXRNYXN0ZXJWb2x1bWUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBhcHBsaWNhdGlvbnMgbWFzdGVyIHZvbHVtZS4gVGhpcyB2b2x1bWUgc2V0dGluZyBhZmZlY3RzXG5cdCAqIGFsbCBhdWRpbyBub2RlcyBpbiB0aGUgc2NlbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBtYXN0ZXIgdm9sdW1lIHRvIHNldC5cblx0ICogQHJldHVybiB7QXVkaW9MaXN0ZW5lcn0gQSByZWZlcmVuY2UgdG8gdGhpcyBsaXN0ZW5lci5cblx0ICovXG5cdHNldE1hc3RlclZvbHVtZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoIHZhbHVlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHRcdGNvbnN0IGxpc3RlbmVyID0gdGhpcy5jb250ZXh0Lmxpc3RlbmVyO1xuXHRcdGNvbnN0IHVwID0gdGhpcy51cDtcblxuXHRcdHRoaXMudGltZURlbHRhID0gdGhpcy5fY2xvY2suZ2V0RGVsdGEoKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMSwgX3F1YXRlcm5pb24kMSwgX3NjYWxlJDEgKTtcblxuXHRcdF9vcmllbnRhdGlvbiQxLnNldCggMCwgMCwgLTEgKS5hcHBseVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDEgKTtcblxuXHRcdGlmICggbGlzdGVuZXIucG9zaXRpb25YICkge1xuXG5cdFx0XHQvLyBjb2RlIHBhdGggZm9yIENocm9tZSAoc2VlICMxNDM5MylcblxuXHRcdFx0Y29uc3QgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMudGltZURlbHRhO1xuXG5cdFx0XHRsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbiQxLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uJDEueSwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMS56LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uJDEueCwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbiQxLnksIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS56LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnVwWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueSwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIudXBaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC56LCBlbmRUaW1lICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsaXN0ZW5lci5zZXRQb3NpdGlvbiggX3Bvc2l0aW9uJDEueCwgX3Bvc2l0aW9uJDEueSwgX3Bvc2l0aW9uJDEueiApO1xuXHRcdFx0bGlzdGVuZXIuc2V0T3JpZW50YXRpb24oIF9vcmllbnRhdGlvbiQxLngsIF9vcmllbnRhdGlvbiQxLnksIF9vcmllbnRhdGlvbiQxLnosIHVwLngsIHVwLnksIHVwLnogKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbm9uLXBvc2l0aW9uYWwgKCBnbG9iYWwgKSBhdWRpbyBvYmplY3QuXG4gKlxuICogVGhpcyBhbmQgcmVsYXRlZCBhdWRpbyBtb2R1bGVzIG1ha2UgdXNlIG9mIHRoZSBbV2ViIEF1ZGlvIEFQSV17QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmF1ZGlvLTEuMS99LlxuICpcbiAqIGBgYGpzXG4gKiAvLyBjcmVhdGUgYW4gQXVkaW9MaXN0ZW5lciBhbmQgYWRkIGl0IHRvIHRoZSBjYW1lcmFcbiAqIGNvbnN0IGxpc3RlbmVyID0gbmV3IFRIUkVFLkF1ZGlvTGlzdGVuZXIoKTtcbiAqIGNhbWVyYS5hZGQoIGxpc3RlbmVyICk7XG4gKlxuICogLy8gY3JlYXRlIGEgZ2xvYmFsIGF1ZGlvIHNvdXJjZVxuICogY29uc3Qgc291bmQgPSBuZXcgVEhSRUUuQXVkaW8oIGxpc3RlbmVyICk7XG4gKlxuICogLy8gbG9hZCBhIHNvdW5kIGFuZCBzZXQgaXQgYXMgdGhlIEF1ZGlvIG9iamVjdCdzIGJ1ZmZlclxuICogY29uc3QgYXVkaW9Mb2FkZXIgPSBuZXcgVEhSRUUuQXVkaW9Mb2FkZXIoKTtcbiAqIGF1ZGlvTG9hZGVyLmxvYWQoICdzb3VuZHMvYW1iaWVudC5vZ2cnLCBmdW5jdGlvbiggYnVmZmVyICkge1xuICogXHRzb3VuZC5zZXRCdWZmZXIoIGJ1ZmZlciApO1xuICogXHRzb3VuZC5zZXRMb29wKCB0cnVlICk7XG4gKiBcdHNvdW5kLnNldFZvbHVtZSggMC41ICk7XG4gKiBcdHNvdW5kLnBsYXkoKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIE9iamVjdDNEXG4gKi9cbmNsYXNzIEF1ZGlvIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGF1ZGlvLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0F1ZGlvTGlzdGVuZXJ9IGxpc3RlbmVyIC0gVGhlIGdsb2JhbCBhdWRpbyBsaXN0ZW5lci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaXN0ZW5lciApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXVkaW8nO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGdsb2JhbCBhdWRpbyBsaXN0ZW5lci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBdWRpb0xpc3RlbmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBhdWRpbyBjb250ZXh0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0F1ZGlvQ29udGV4dH1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmNvbnRleHQgPSBsaXN0ZW5lci5jb250ZXh0O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGdhaW4gbm9kZSB1c2VkIGZvciB2b2x1bWUgY29udHJvbC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtHYWluTm9kZX1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHRcdHRoaXMuZ2Fpbi5jb25uZWN0KCBsaXN0ZW5lci5nZXRJbnB1dCgpICk7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRvIHN0YXJ0IHBsYXliYWNrIGF1dG9tYXRpY2FsbHkgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmF1dG9wbGF5ID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhbiBhdWRpbyBidWZmZXIuXG5cdFx0ICpcblx0XHQgKiBEZWZpbmVkIHZpYSB7QGxpbmsgQXVkaW8jc2V0QnVmZmVyfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/QXVkaW9CdWZmZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuYnVmZmVyID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE1vZGlmeSBwaXRjaCwgbWVhc3VyZWQgaW4gY2VudHMuICsvLSAxMDAgaXMgYSBzZW1pdG9uZS5cblx0XHQgKiArLy0gMTIwMCBpcyBhbiBvY3RhdmUuXG5cdFx0ICpcblx0XHQgKiBEZWZpbmVkIHZpYSB7QGxpbmsgQXVkaW8jc2V0RGV0dW5lfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuZGV0dW5lID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGF1ZGlvIHNob3VsZCBsb29wIG9yIG5vdC5cblx0XHQgKlxuXHRcdCAqIERlZmluZWQgdmlhIHtAbGluayBBdWRpbyNzZXRMb29wfS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5sb29wID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIHdoZXJlIGluIHRoZSBhdWRpbyBidWZmZXIgdGhlIHJlcGxheSBzaG91bGRcblx0XHQgKiBzdGFydCwgaW4gc2Vjb25kcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMubG9vcFN0YXJ0ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgd2hlcmUgaW4gdGhlIGF1ZGlvIGJ1ZmZlciB0aGUgcmVwbGF5IHNob3VsZFxuXHRcdCAqIHN0b3AsIGluIHNlY29uZHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmxvb3BFbmQgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gb2Zmc2V0IHRvIHRoZSB0aW1lIHdpdGhpbiB0aGUgYXVkaW8gYnVmZmVyIHRoZSBwbGF5YmFja1xuXHRcdCAqIHNob3VsZCBiZWdpbiwgaW4gc2Vjb25kcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMub2Zmc2V0ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIE92ZXJyaWRlcyB0aGUgZGVmYXVsdCBkdXJhdGlvbiBvZiB0aGUgYXVkaW8uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7dW5kZWZpbmVkfG51bWJlcn1cblx0XHQgKiBAZGVmYXVsdCB1bmRlZmluZWRcblx0XHQgKi9cblx0XHR0aGlzLmR1cmF0aW9uID0gdW5kZWZpbmVkO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBsYXliYWNrIHNwZWVkLlxuXHRcdCAqXG5cdFx0ICogRGVmaW5lZCB2aWEge0BsaW5rIEF1ZGlvI3NldFBsYXliYWNrUmF0ZX0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYXVkaW8gaXMgcGxheWluZyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBUaGlzIGZsYWcgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHNldCB3aGVuIHVzaW5nIHtAbGluayBBdWRpbyNwbGF5fSxcblx0XHQgKiB7QGxpbmsgQXVkaW8jcGF1c2V9LCB7QGxpbmsgQXVkaW8jc3RvcH0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgYXVkaW8gcGxheWJhY2sgY2FuIGJlIGNvbnRyb2xsZWRcblx0XHQgKiB3aXRoIG1ldGhvZCBsaWtlIHtAbGluayBBdWRpbyNwbGF5fSBvciB7QGxpbmsgQXVkaW8jcGF1c2V9LlxuXHRcdCAqXG5cdFx0ICogVGhpcyBmbGFnIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgd2hlbiBhdWRpbyBzb3VyY2VzIGFyZVxuXHRcdCAqIGRlZmluZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgYXVkaW8gc291cmNlLlxuXHRcdCAqXG5cdFx0ICogVGhlIHByb3BlcnR5IGlzIGF1dG9tYXRpY2FsbHkgYnkgb25lIG9mIHRoZSBgc2V0KigpYCBtZXRob2RzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9BdWRpb05vZGV9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc291cmNlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgdGhlIHNvdXJjZSB0eXBlLlxuXHRcdCAqXG5cdFx0ICogVGhlIHByb3BlcnR5IGlzIGF1dG9tYXRpY2FsbHkgYnkgb25lIG9mIHRoZSBgc2V0KigpYCBtZXRob2RzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeygnZW1wdHknfCdhdWRpb05vZGUnfCdtZWRpYU5vZGUnfCdtZWRpYVN0cmVhbU5vZGUnfCdidWZmZXInKX1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCAnZW1wdHknXG5cdFx0ICovXG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JztcblxuXHRcdHRoaXMuX3N0YXJ0ZWRBdCA9IDA7XG5cdFx0dGhpcy5fcHJvZ3Jlc3MgPSAwO1xuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FuIGJlIHVzZWQgdG8gYXBwbHkgYSB2YXJpZXR5IG9mIGxvdy1vcmRlciBmaWx0ZXJzIHRvIGNyZWF0ZVxuXHRcdCAqIG1vcmUgY29tcGxleCBzb3VuZCBlZmZlY3RzIGUuZy4gdmlhIGBCaXF1YWRGaWx0ZXJOb2RlYC5cblx0XHQgKlxuXHRcdCAqIFRoZSBwcm9wZXJ0eSBpcyBhdXRvbWF0aWNhbGx5IHNldCBieSB7QGxpbmsgQXVkaW8jc2V0RmlsdGVyc30uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8QXVkaW9Ob2RlPn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHR0aGlzLmZpbHRlcnMgPSBbXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG91dHB1dCBhdWRpbyBub2RlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtHYWluTm9kZX0gVGhlIG91dHB1dCBub2RlLlxuXHQgKi9cblx0Z2V0T3V0cHV0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIGF1ZGlvIG5vZGUgYXMgdGhlIHNvdXJjZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiB7QGxpbmsgQXVkaW8jc291cmNlVHlwZX0gaXMgc2V0IHRvIGBhdWRpb05vZGVgIGFuZCB7QGxpbmsgQXVkaW8jaGFzUGxheWJhY2tDb250cm9sfSB0byBgZmFsc2VgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0F1ZGlvTm9kZX0gYXVkaW9Ob2RlIC0gVGhlIGF1ZGlvIG5vZGUgbGlrZSBhbiBpbnN0YW5jZSBvZiBgT3NjaWxsYXRvck5vZGVgLlxuXHQgKiBAcmV0dXJuIHtBdWRpb30gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldE5vZGVTb3VyY2UoIGF1ZGlvTm9kZSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2F1ZGlvTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSBhdWRpb05vZGU7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIG1lZGlhIGVsZW1lbnQgYXMgdGhlIHNvdXJjZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiB7QGxpbmsgQXVkaW8jc291cmNlVHlwZX0gaXMgc2V0IHRvIGBtZWRpYU5vZGVgIGFuZCB7QGxpbmsgQXVkaW8jaGFzUGxheWJhY2tDb250cm9sfSB0byBgZmFsc2VgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0hUTUxNZWRpYUVsZW1lbnR9IG1lZGlhRWxlbWVudCAtIFRoZSBtZWRpYSBlbGVtZW50LlxuXHQgKiBAcmV0dXJuIHtBdWRpb30gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldE1lZGlhRWxlbWVudFNvdXJjZSggbWVkaWFFbGVtZW50ICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFOb2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBnaXZlbiBtZWRpYSBzdHJlYW0gYXMgdGhlIHNvdXJjZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiB7QGxpbmsgQXVkaW8jc291cmNlVHlwZX0gaXMgc2V0IHRvIGBtZWRpYVN0cmVhbU5vZGVgIGFuZCB7QGxpbmsgQXVkaW8jaGFzUGxheWJhY2tDb250cm9sfSB0byBgZmFsc2VgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge01lZGlhU3RyZWFtfSBtZWRpYVN0cmVhbSAtIFRoZSBtZWRpYSBzdHJlYW0uXG5cdCAqIEByZXR1cm4ge0F1ZGlvfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0TWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFTdHJlYW1Ob2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZSggbWVkaWFTdHJlYW0gKTtcblx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gYXVkaW8gYnVmZmVyIGFzIHRoZSBzb3VyY2Ugb2YgdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICoge0BsaW5rIEF1ZGlvI3NvdXJjZVR5cGV9IGlzIHNldCB0byBgYnVmZmVyYCBhbmQge0BsaW5rIEF1ZGlvI2hhc1BsYXliYWNrQ29udHJvbH0gdG8gYHRydWVgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0F1ZGlvQnVmZmVyfSBhdWRpb0J1ZmZlciAtIFRoZSBhdWRpbyBidWZmZXIuXG5cdCAqIEByZXR1cm4ge0F1ZGlvfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0QnVmZmVyKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdHRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XG5cblx0XHRpZiAoIHRoaXMuYXV0b3BsYXkgKSB0aGlzLnBsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIHRoZSBwbGF5YmFjayBvZiB0aGUgYXVkaW8uXG5cdCAqXG5cdCAqIENhbiBvbmx5IGJlIHVzZWQgd2l0aCBjb21wYXRpYmxlIGF1ZGlvIHNvdXJjZXMgdGhhdCBhbGxvdyBwbGF5YmFjayBjb250cm9sLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RlbGF5PTBdIC0gVGhlIGRlbGF5LCBpbiBzZWNvbmRzLCBhdCB3aGljaCB0aGUgYXVkaW8gc2hvdWxkIHN0YXJ0IHBsYXlpbmcuXG5cdCAqIEByZXR1cm4ge0F1ZGlvfHVuZGVmaW5lZH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHBsYXkoIGRlbGF5ID0gMCApIHtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiBBdWRpbyBpcyBhbHJlYWR5IHBsYXlpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3N0YXJ0ZWRBdCA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGRlbGF5O1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXHRcdHNvdXJjZS5idWZmZXIgPSB0aGlzLmJ1ZmZlcjtcblx0XHRzb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblx0XHRzb3VyY2UubG9vcFN0YXJ0ID0gdGhpcy5sb29wU3RhcnQ7XG5cdFx0c291cmNlLmxvb3BFbmQgPSB0aGlzLmxvb3BFbmQ7XG5cdFx0c291cmNlLm9uZW5kZWQgPSB0aGlzLm9uRW5kZWQuYmluZCggdGhpcyApO1xuXHRcdHNvdXJjZS5zdGFydCggdGhpcy5fc3RhcnRlZEF0LCB0aGlzLl9wcm9ncmVzcyArIHRoaXMub2Zmc2V0LCB0aGlzLmR1cmF0aW9uICk7XG5cblx0XHR0aGlzLmlzUGxheWluZyA9IHRydWU7XG5cblx0XHR0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblxuXHRcdHRoaXMuc2V0RGV0dW5lKCB0aGlzLmRldHVuZSApO1xuXHRcdHRoaXMuc2V0UGxheWJhY2tSYXRlKCB0aGlzLnBsYXliYWNrUmF0ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29ubmVjdCgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogUGF1c2VzIHRoZSBwbGF5YmFjayBvZiB0aGUgYXVkaW8uXG5cdCAqXG5cdCAqIENhbiBvbmx5IGJlIHVzZWQgd2l0aCBjb21wYXRpYmxlIGF1ZGlvIHNvdXJjZXMgdGhhdCBhbGxvdyBwbGF5YmFjayBjb250cm9sLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBdWRpb3x1bmRlZmluZWR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRwYXVzZSgpIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHQvLyB1cGRhdGUgY3VycmVudCBwcm9ncmVzc1xuXG5cdFx0XHR0aGlzLl9wcm9ncmVzcyArPSBNYXRoLm1heCggdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lIC0gdGhpcy5fc3RhcnRlZEF0LCAwICkgKiB0aGlzLnBsYXliYWNrUmF0ZTtcblxuXHRcdFx0aWYgKCB0aGlzLmxvb3AgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Ly8gZW5zdXJlIF9wcm9ncmVzcyBkb2VzIG5vdCBleGNlZWQgZHVyYXRpb24gd2l0aCBsb29wZWQgYXVkaW9zXG5cblx0XHRcdFx0dGhpcy5fcHJvZ3Jlc3MgPSB0aGlzLl9wcm9ncmVzcyAlICggdGhpcy5kdXJhdGlvbiB8fCB0aGlzLmJ1ZmZlci5kdXJhdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXG5cdFx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdG9wcyB0aGUgcGxheWJhY2sgb2YgdGhlIGF1ZGlvLlxuXHQgKlxuXHQgKiBDYW4gb25seSBiZSB1c2VkIHdpdGggY29tcGF0aWJsZSBhdWRpbyBzb3VyY2VzIHRoYXQgYWxsb3cgcGxheWJhY2sgY29udHJvbC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkZWxheT0wXSAtIFRoZSBkZWxheSwgaW4gc2Vjb25kcywgYXQgd2hpY2ggdGhlIGF1ZGlvIHNob3VsZCBzdG9wIHBsYXlpbmcuXG5cdCAqIEByZXR1cm4ge0F1ZGlvfHVuZGVmaW5lZH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHN0b3AoIGRlbGF5ID0gMCApIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLl9wcm9ncmVzcyA9IDA7XG5cblx0XHRpZiAoIHRoaXMuc291cmNlICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5zdG9wKCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyBkZWxheSApO1xuXHRcdFx0dGhpcy5zb3VyY2Uub25lbmRlZCA9IG51bGw7XG5cblx0XHR9XG5cblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25uZWN0cyB0byB0aGUgYXVkaW8gc291cmNlLiBUaGlzIGlzIHVzZWQgaW50ZXJuYWxseSBvblxuXHQgKiBpbml0aWFsaXNhdGlvbiBhbmQgd2hlbiBzZXR0aW5nIC8gcmVtb3ZpbmcgZmlsdGVycy5cblx0ICpcblx0ICogQHJldHVybiB7QXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjb25uZWN0KCkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlcnMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuY29ubmVjdCggdGhpcy5maWx0ZXJzWyAwIF0gKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAxLCBsID0gdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5maWx0ZXJzWyBpIC0gMSBdLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5maWx0ZXJzWyB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMSBdLmNvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZ2V0T3V0cHV0KCkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERpc2Nvbm5lY3RzIHRvIHRoZSBhdWRpbyBzb3VyY2UuIFRoaXMgaXMgdXNlZCBpbnRlcm5hbGx5IG9uXG5cdCAqIGluaXRpYWxpc2F0aW9uIGFuZCB3aGVuIHNldHRpbmcgLyByZW1vdmluZyBmaWx0ZXJzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBdWRpb3x1bmRlZmluZWR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRkaXNjb25uZWN0KCkge1xuXG5cdFx0aWYgKCB0aGlzLl9jb25uZWN0ZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmlsdGVycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIDAgXSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDEsIGwgPSB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR0aGlzLmZpbHRlcnNbIGkgLSAxIF0uZGlzY29ubmVjdCggdGhpcy5maWx0ZXJzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZpbHRlcnNbIHRoaXMuZmlsdGVycy5sZW5ndGggLSAxIF0uZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UuZGlzY29ubmVjdCggdGhpcy5nZXRPdXRwdXQoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgc2V0IGZpbHRlcnMuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FycmF5PEF1ZGlvTm9kZT59IFRoZSBsaXN0IG9mIGZpbHRlcnMuXG5cdCAqL1xuXHRnZXRGaWx0ZXJzKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVycztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgYW4gYXJyYXkgb2YgZmlsdGVycyBhbmQgY29ubmVjdHMgdGhlbSB3aXRoIHRoZSBhdWRpbyBzb3VyY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8QXVkaW9Ob2RlPn0gW3ZhbHVlXSAtIEEgbGlzdCBvZiBmaWx0ZXJzLlxuXHQgKiBAcmV0dXJuIHtBdWRpb30gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldEZpbHRlcnMoIHZhbHVlICkge1xuXG5cdFx0aWYgKCAhIHZhbHVlICkgdmFsdWUgPSBbXTtcblxuXHRcdGlmICggdGhpcy5fY29ubmVjdGVkID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLmRpc2Nvbm5lY3QoKTtcblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlLnNsaWNlKCk7XG5cdFx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlLnNsaWNlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGRldHVuaW5nIG9mIG9zY2lsbGF0aW9uIGluIGNlbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgZGV0dW5pbmcgb2Ygb3NjaWxsYXRpb24gaW4gY2VudHMuXG5cdCAqIEByZXR1cm4ge0F1ZGlvfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0RGV0dW5lKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuZGV0dW5lID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICYmIHRoaXMuc291cmNlLmRldHVuZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kZXR1bmUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRldHVuaW5nIG9mIG9zY2lsbGF0aW9uIGluIGNlbnRzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkZXR1bmluZyBvZiBvc2NpbGxhdGlvbiBpbiBjZW50cy5cblx0ICovXG5cdGdldERldHVuZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRldHVuZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGZpcnN0IGZpbHRlciBpbiB0aGUgbGlzdCBvZiBmaWx0ZXJzLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBdWRpb05vZGV8dW5kZWZpbmVkfSBUaGUgZmlyc3QgZmlsdGVyIGluIHRoZSBsaXN0IG9mIGZpbHRlcnMuXG5cdCAqL1xuXHRnZXRGaWx0ZXIoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRGaWx0ZXJzKClbIDAgXTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgYSBzaW5nbGUgZmlsdGVyIG5vZGUgdG8gdGhlIGF1ZGlvLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0F1ZGlvTm9kZX0gW2ZpbHRlcl0gLSBUaGUgZmlsdGVyIHRvIHNldC5cblx0ICogQHJldHVybiB7QXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRGaWx0ZXIoIGZpbHRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZpbHRlcnMoIGZpbHRlciA/IFsgZmlsdGVyIF0gOiBbXSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgcGxheWJhY2sgcmF0ZS5cblx0ICpcblx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIGNvbXBhdGlibGUgYXVkaW8gc291cmNlcyB0aGF0IGFsbG93IHBsYXliYWNrIGNvbnRyb2wuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdmFsdWVdIC0gVGhlIHBsYXliYWNrIHJhdGUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtBdWRpb3x1bmRlZmluZWR9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRQbGF5YmFja1JhdGUoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMucGxheWJhY2tSYXRlID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5wbGF5YmFja1JhdGUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLnBsYXliYWNrUmF0ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgcGxheWJhY2sgcmF0ZS5cblxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBwbGF5YmFjayByYXRlLlxuXHQgKi9cblx0Z2V0UGxheWJhY2tSYXRlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGxheWJhY2tSYXRlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQXV0b21hdGljYWxseSBjYWxsZWQgd2hlbiBwbGF5YmFjayBmaW5pc2hlZC5cblx0ICovXG5cdG9uRW5kZWQoKSB7XG5cblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXHRcdHRoaXMuX3Byb2dyZXNzID0gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxvb3AgZmxhZy5cblx0ICpcblx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIGNvbXBhdGlibGUgYXVkaW8gc291cmNlcyB0aGF0IGFsbG93IHBsYXliYWNrIGNvbnRyb2wuXG5cdCAqXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGF1ZGlvIHNob3VsZCBsb29wIG9yIG5vdC5cblx0ICovXG5cdGdldExvb3AoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubG9vcDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGxvb3AgZmxhZy5cblx0ICpcblx0ICogQ2FuIG9ubHkgYmUgdXNlZCB3aXRoIGNvbXBhdGlibGUgYXVkaW8gc291cmNlcyB0aGF0IGFsbG93IHBsYXliYWNrIGNvbnRyb2wuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgLSBXaGV0aGVyIHRoZSBhdWRpbyBzaG91bGQgbG9vcCBvciBub3QuXG5cdCAqIEByZXR1cm4ge0F1ZGlvfHVuZGVmaW5lZH0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldExvb3AoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMubG9vcCA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgbG9vcCBzdGFydCB2YWx1ZSB3aGljaCBkZWZpbmVzIHdoZXJlIGluIHRoZSBhdWRpbyBidWZmZXIgdGhlIHJlcGxheSBzaG91bGRcblx0ICogc3RhcnQsIGluIHNlY29uZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBsb29wIHN0YXJ0IHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtBdWRpb30gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldExvb3BTdGFydCggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmxvb3BTdGFydCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBsb29wIGVuZCB2YWx1ZSB3aGljaCBkZWZpbmVzIHdoZXJlIGluIHRoZSBhdWRpbyBidWZmZXIgdGhlIHJlcGxheSBzaG91bGRcblx0ICogc3RvcCwgaW4gc2Vjb25kcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGxvb3AgZW5kIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtBdWRpb30gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldExvb3BFbmQoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5sb29wRW5kID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHZvbHVtZS5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgdm9sdW1lLlxuXHQgKi9cblx0Z2V0Vm9sdW1lKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdm9sdW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdm9sdW1lIHRvIHNldC5cblx0ICogQHJldHVybiB7QXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRWb2x1bWUoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y29weSggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aWYgKCBzb3VyY2Uuc291cmNlVHlwZSAhPT0gJ2J1ZmZlcicgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiBBdWRpbyBzb3VyY2UgdHlwZSBjYW5ub3QgYmUgY29waWVkLicgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF1dG9wbGF5ID0gc291cmNlLmF1dG9wbGF5O1xuXG5cdFx0dGhpcy5idWZmZXIgPSBzb3VyY2UuYnVmZmVyO1xuXHRcdHRoaXMuZGV0dW5lID0gc291cmNlLmRldHVuZTtcblx0XHR0aGlzLmxvb3AgPSBzb3VyY2UubG9vcDtcblx0XHR0aGlzLmxvb3BTdGFydCA9IHNvdXJjZS5sb29wU3RhcnQ7XG5cdFx0dGhpcy5sb29wRW5kID0gc291cmNlLmxvb3BFbmQ7XG5cdFx0dGhpcy5vZmZzZXQgPSBzb3VyY2Uub2Zmc2V0O1xuXHRcdHRoaXMuZHVyYXRpb24gPSBzb3VyY2UuZHVyYXRpb247XG5cdFx0dGhpcy5wbGF5YmFja1JhdGUgPSBzb3VyY2UucGxheWJhY2tSYXRlO1xuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gc291cmNlLmhhc1BsYXliYWNrQ29udHJvbDtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSBzb3VyY2Uuc291cmNlVHlwZTtcblxuXHRcdHRoaXMuZmlsdGVycyA9IHNvdXJjZS5maWx0ZXJzLnNsaWNlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0Y2xvbmUoIHJlY3Vyc2l2ZSApIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5saXN0ZW5lciApLmNvcHkoIHRoaXMsIHJlY3Vyc2l2ZSApO1xuXG5cdH1cblxufVxuXG5jb25zdCBfcG9zaXRpb24gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfcXVhdGVybmlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFF1YXRlcm5pb24oKTtcbmNvbnN0IF9zY2FsZSA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9vcmllbnRhdGlvbiA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcG9zaXRpb25hbCBhdWRpbyBvYmplY3QuXG4gKlxuICogYGBganNcbiAqIC8vIGNyZWF0ZSBhbiBBdWRpb0xpc3RlbmVyIGFuZCBhZGQgaXQgdG8gdGhlIGNhbWVyYVxuICogY29uc3QgbGlzdGVuZXIgPSBuZXcgVEhSRUUuQXVkaW9MaXN0ZW5lcigpO1xuICogY2FtZXJhLmFkZCggbGlzdGVuZXIgKTtcbiAqXG4gKiAvLyBjcmVhdGUgdGhlIFBvc2l0aW9uYWxBdWRpbyBvYmplY3QgKHBhc3NpbmcgaW4gdGhlIGxpc3RlbmVyKVxuICogY29uc3Qgc291bmQgPSBuZXcgVEhSRUUuUG9zaXRpb25hbEF1ZGlvKCBsaXN0ZW5lciApO1xuICpcbiAqIC8vIGxvYWQgYSBzb3VuZCBhbmQgc2V0IGl0IGFzIHRoZSBQb3NpdGlvbmFsQXVkaW8gb2JqZWN0J3MgYnVmZmVyXG4gKiBjb25zdCBhdWRpb0xvYWRlciA9IG5ldyBUSFJFRS5BdWRpb0xvYWRlcigpO1xuICogYXVkaW9Mb2FkZXIubG9hZCggJ3NvdW5kcy9zb25nLm9nZycsIGZ1bmN0aW9uKCBidWZmZXIgKSB7XG4gKiBcdHNvdW5kLnNldEJ1ZmZlciggYnVmZmVyICk7XG4gKiBcdHNvdW5kLnNldFJlZkRpc3RhbmNlKCAyMCApO1xuICogXHRzb3VuZC5wbGF5KCk7XG4gKiB9KTtcbiAqXG4gKiAvLyBjcmVhdGUgYW4gb2JqZWN0IGZvciB0aGUgc291bmQgdG8gcGxheSBmcm9tXG4gKiBjb25zdCBzcGhlcmUgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoIDIwLCAzMiwgMTYgKTtcbiAqIGNvbnN0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCB7IGNvbG9yOiAweGZmMjIwMCB9ICk7XG4gKiBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goIHNwaGVyZSwgbWF0ZXJpYWwgKTtcbiAqIHNjZW5lLmFkZCggbWVzaCApO1xuICpcbiAqIC8vIGZpbmFsbHkgYWRkIHRoZSBzb3VuZCB0byB0aGUgbWVzaFxuICogbWVzaC5hZGQoIHNvdW5kICk7XG4gKlxuICogQGF1Z21lbnRzIEF1ZGlvXG4gKi9cbmNsYXNzIFBvc2l0aW9uYWxBdWRpbyBleHRlbmRzIEF1ZGlvIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIHBvc2l0aW9uYWwgYXVkaW8uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXVkaW9MaXN0ZW5lcn0gbGlzdGVuZXIgLSBUaGUgZ2xvYmFsIGF1ZGlvIGxpc3RlbmVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpc3RlbmVyICkge1xuXG5cdFx0c3VwZXIoIGxpc3RlbmVyICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcGFubmVyIG5vZGUgcmVwcmVzZW50cyB0aGUgbG9jYXRpb24sIGRpcmVjdGlvbiwgYW5kIGJlaGF2aW9yIG9mIGFuIGF1ZGlvXG5cdFx0ICogc291cmNlIGluIDNEIHNwYWNlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1Bhbm5lck5vZGV9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy5wYW5uZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlUGFubmVyKCk7XG5cdFx0dGhpcy5wYW5uZXIucGFubmluZ01vZGVsID0gJ0hSVEYnO1xuXHRcdHRoaXMucGFubmVyLmNvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG5cdH1cblxuXHRjb25uZWN0KCkge1xuXG5cdFx0c3VwZXIuY29ubmVjdCgpO1xuXG5cdFx0dGhpcy5wYW5uZXIuY29ubmVjdCggdGhpcy5nYWluICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0ZGlzY29ubmVjdCgpIHtcblxuXHRcdHN1cGVyLmRpc2Nvbm5lY3QoKTtcblxuXHRcdHRoaXMucGFubmVyLmRpc2Nvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGdldE91dHB1dCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgcmVmZXJlbmNlIGRpc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByZWZlcmVuY2UgZGlzdGFuY2UuXG5cdCAqL1xuXHRnZXRSZWZEaXN0YW5jZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5yZWZEaXN0YW5jZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHJlZmVyZW5jZSBkaXN0YW5jZSBmb3IgcmVkdWNpbmcgdm9sdW1lIGFzIHRoZSBhdWRpbyBzb3VyY2UgbW92ZXNcblx0ICogZnVydGhlciBmcm9tIHRoZSBsaXN0ZW5lciDigJMgaS5lLiB0aGUgZGlzdGFuY2UgYXQgd2hpY2ggdGhlIHZvbHVtZSByZWR1Y3Rpb25cblx0ICogc3RhcnRzIHRha2luZyBlZmZlY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSByZWZlcmVuY2UgZGlzdGFuY2UgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtQb3NpdGlvbmFsQXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRSZWZEaXN0YW5jZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yZWZEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHJvbGxvZmYgZmFjdG9yLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByb2xsb2ZmIGZhY3Rvci5cblx0ICovXG5cdGdldFJvbGxvZmZGYWN0b3IoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgaG93IHF1aWNrbHkgdGhlIHZvbHVtZSBpcyByZWR1Y2VkIGFzIHRoZSBzb3VyY2UgbW92ZXMgYXdheSBmcm9tIHRoZSBsaXN0ZW5lci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHJvbGxvZmYgZmFjdG9yLlxuXHQgKiBAcmV0dXJuIHtQb3NpdGlvbmFsQXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRSb2xsb2ZmRmFjdG9yKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3IgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCBkaXN0YW5jZSBtb2RlbC5cblx0ICpcblx0ICogQHJldHVybiB7KCdsaW5lYXInfCdpbnZlcnNlJ3wnZXhwb25lbnRpYWwnKX0gVGhlIGRpc3RhbmNlIG1vZGVsLlxuXHQgKi9cblx0Z2V0RGlzdGFuY2VNb2RlbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB3aGljaCBhbGdvcml0aG0gdG8gdXNlIHRvIHJlZHVjZSB0aGUgdm9sdW1lIG9mIHRoZSBhdWRpbyBzb3VyY2Vcblx0ICogYXMgaXQgbW92ZXMgYXdheSBmcm9tIHRoZSBsaXN0ZW5lci5cblx0ICpcblx0ICogUmVhZCBbdGhlIHNwZWNde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJhdWRpby0xLjEvI2VudW1kZWYtZGlzdGFuY2Vtb2RlbHR5cGV9XG5cdCAqIGZvciBtb3JlIGRldGFpbHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KCdsaW5lYXInfCdpbnZlcnNlJ3wnZXhwb25lbnRpYWwnKX0gdmFsdWUgLSBUaGUgZGlzdGFuY2UgbW9kZWwgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtQb3NpdGlvbmFsQXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXREaXN0YW5jZU1vZGVsKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWwgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY3VycmVudCBtYXggZGlzdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIG1heCBkaXN0YW5jZS5cblx0ICovXG5cdGdldE1heERpc3RhbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgbWF4aW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBhdWRpbyBzb3VyY2UgYW5kIHRoZSBsaXN0ZW5lcixcblx0ICogYWZ0ZXIgd2hpY2ggdGhlIHZvbHVtZSBpcyBub3QgcmVkdWNlZCBhbnkgZnVydGhlci5cblx0ICpcblx0ICogVGhpcyB2YWx1ZSBpcyB1c2VkIG9ubHkgYnkgdGhlIGBsaW5lYXJgIGRpc3RhbmNlIG1vZGVsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgbWF4IGRpc3RhbmNlLlxuXHQgKiBAcmV0dXJuIHtQb3NpdGlvbmFsQXVkaW99IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRNYXhEaXN0YW5jZSggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5tYXhEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBkaXJlY3Rpb25hbCBjb25lIGluIHdoaWNoIHRoZSBhdWRpbyBjYW4gYmUgbGlzdGVuZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb25lSW5uZXJBbmdsZSAtIEFuIGFuZ2xlLCBpbiBkZWdyZWVzLCBvZiBhIGNvbmUgaW5zaWRlIG9mIHdoaWNoIHRoZXJlIHdpbGwgYmUgbm8gdm9sdW1lIHJlZHVjdGlvbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGNvbmVPdXRlckFuZ2xlIC0gQW4gYW5nbGUsIGluIGRlZ3JlZXMsIG9mIGEgY29uZSBvdXRzaWRlIG9mIHdoaWNoIHRoZSB2b2x1bWUgd2lsbCBiZSByZWR1Y2VkIGJ5IGEgY29uc3RhbnQgdmFsdWUsIGRlZmluZWQgYnkgdGhlIGBjb25lT3V0ZXJHYWluYCBwYXJhbWV0ZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb25lT3V0ZXJHYWluIC0gVGhlIGFtb3VudCBvZiB2b2x1bWUgcmVkdWN0aW9uIG91dHNpZGUgdGhlIGNvbmUgZGVmaW5lZCBieSB0aGUgYGNvbmVPdXRlckFuZ2xlYC4gV2hlbiBzZXQgdG8gYDBgLCBubyBzb3VuZCBjYW4gYmUgaGVhcmQuXG5cdCAqIEByZXR1cm4ge1Bvc2l0aW9uYWxBdWRpb30gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldERpcmVjdGlvbmFsQ29uZSggY29uZUlubmVyQW5nbGUsIGNvbmVPdXRlckFuZ2xlLCBjb25lT3V0ZXJHYWluICkge1xuXG5cdFx0dGhpcy5wYW5uZXIuY29uZUlubmVyQW5nbGUgPSBjb25lSW5uZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IGNvbmVPdXRlckFuZ2xlO1xuXHRcdHRoaXMucGFubmVyLmNvbmVPdXRlckdhaW4gPSBjb25lT3V0ZXJHYWluO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdHN1cGVyLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gdHJ1ZSAmJiB0aGlzLmlzUGxheWluZyA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiwgX3NjYWxlICk7XG5cblx0XHRfb3JpZW50YXRpb24uc2V0KCAwLCAwLCAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiApO1xuXG5cdFx0Y29uc3QgcGFubmVyID0gdGhpcy5wYW5uZXI7XG5cblx0XHRpZiAoIHBhbm5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIGFuZCBGaXJlZm94IChzZWUgIzE0MzkzKVxuXG5cdFx0XHRjb25zdCBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy5saXN0ZW5lci50aW1lRGVsdGE7XG5cblx0XHRcdHBhbm5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLnBvc2l0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uLnosIGVuZFRpbWUgKTtcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi54LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0cGFubmVyLm9yaWVudGF0aW9uWi5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLnosIGVuZFRpbWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHBhbm5lci5zZXRQb3NpdGlvbiggX3Bvc2l0aW9uLngsIF9wb3NpdGlvbi55LCBfcG9zaXRpb24ueiApO1xuXHRcdFx0cGFubmVyLnNldE9yaWVudGF0aW9uKCBfb3JpZW50YXRpb24ueCwgX29yaWVudGF0aW9uLnksIF9vcmllbnRhdGlvbi56ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBhbmFseXNlIGF1ZGlvIGRhdGEuXG4gKlxuICogYGBganNcbiAqIC8vIGNyZWF0ZSBhbiBBdWRpb0xpc3RlbmVyIGFuZCBhZGQgaXQgdG8gdGhlIGNhbWVyYVxuICogY29uc3QgbGlzdGVuZXIgPSBuZXcgVEhSRUUuQXVkaW9MaXN0ZW5lcigpO1xuICogY2FtZXJhLmFkZCggbGlzdGVuZXIgKTtcbiAqXG4gKiAvLyBjcmVhdGUgYW4gQXVkaW8gc291cmNlXG4gKiBjb25zdCBzb3VuZCA9IG5ldyBUSFJFRS5BdWRpbyggbGlzdGVuZXIgKTtcbiAqXG4gKiAvLyBsb2FkIGEgc291bmQgYW5kIHNldCBpdCBhcyB0aGUgQXVkaW8gb2JqZWN0J3MgYnVmZmVyXG4gKiBjb25zdCBhdWRpb0xvYWRlciA9IG5ldyBUSFJFRS5BdWRpb0xvYWRlcigpO1xuICogYXVkaW9Mb2FkZXIubG9hZCggJ3NvdW5kcy9hbWJpZW50Lm9nZycsIGZ1bmN0aW9uKCBidWZmZXIgKSB7XG4gKiBcdHNvdW5kLnNldEJ1ZmZlciggYnVmZmVyICk7XG4gKiBcdHNvdW5kLnNldExvb3AodHJ1ZSk7XG4gKiBcdHNvdW5kLnNldFZvbHVtZSgwLjUpO1xuICogXHRzb3VuZC5wbGF5KCk7XG4gKiB9KTtcbiAqXG4gKiAvLyBjcmVhdGUgYW4gQXVkaW9BbmFseXNlciwgcGFzc2luZyBpbiB0aGUgc291bmQgYW5kIGRlc2lyZWQgZmZ0U2l6ZVxuICogY29uc3QgYW5hbHlzZXIgPSBuZXcgVEhSRUUuQXVkaW9BbmFseXNlciggc291bmQsIDMyICk7XG4gKlxuICogLy8gZ2V0IHRoZSBhdmVyYWdlIGZyZXF1ZW5jeSBvZiB0aGUgc291bmRcbiAqIGNvbnN0IGRhdGEgPSBhbmFseXNlci5nZXRBdmVyYWdlRnJlcXVlbmN5KCk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgQXVkaW9BbmFseXNlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXVkaW8gYW5hbHl6ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXVkaW99IGF1ZGlvIC0gVGhlIGF1ZGlvIHRvIGFuYWx5emUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZmZ0U2l6ZT0yMDQ4XSAtIFRoZSB3aW5kb3cgc2l6ZSBpbiBzYW1wbGVzIHRoYXQgaXMgdXNlZCB3aGVuIHBlcmZvcm1pbmcgYSBGYXN0IEZvdXJpZXIgVHJhbnNmb3JtIChGRlQpIHRvIGdldCBmcmVxdWVuY3kgZG9tYWluIGRhdGEuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggYXVkaW8sIGZmdFNpemUgPSAyMDQ4ICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGdsb2JhbCBhdWRpbyBsaXN0ZW5lci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBbmFseXNlck5vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5hbmFseXNlciA9IGF1ZGlvLmNvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcblx0XHR0aGlzLmFuYWx5c2VyLmZmdFNpemUgPSBmZnRTaXplO1xuXG5cdFx0LyoqXG5cdFx0ICogSG9sZHMgdGhlIGFuYWx5emVkIGRhdGEuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VWludDhBcnJheX1cblx0XHQgKi9cblx0XHR0aGlzLmRhdGEgPSBuZXcgVWludDhBcnJheSggdGhpcy5hbmFseXNlci5mcmVxdWVuY3lCaW5Db3VudCApO1xuXG5cdFx0YXVkaW8uZ2V0T3V0cHV0KCkuY29ubmVjdCggdGhpcy5hbmFseXNlciApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBhcnJheSB3aXRoIGZyZXF1ZW5jeSBkYXRhIG9mIHRoZSBhdWRpby5cblx0ICpcblx0ICogRWFjaCBpdGVtIGluIHRoZSBhcnJheSByZXByZXNlbnRzIHRoZSBkZWNpYmVsIHZhbHVlIGZvciBhIHNwZWNpZmljIGZyZXF1ZW5jeS5cblx0ICogVGhlIGZyZXF1ZW5jaWVzIGFyZSBzcHJlYWQgbGluZWFybHkgZnJvbSAwIHRvIDEvMiBvZiB0aGUgc2FtcGxlIHJhdGUuXG5cdCAqIEZvciBleGFtcGxlLCBmb3IgNDgwMDAgc2FtcGxlIHJhdGUsIHRoZSBsYXN0IGl0ZW0gb2YgdGhlIGFycmF5IHdpbGwgcmVwcmVzZW50XG5cdCAqIHRoZSBkZWNpYmVsIHZhbHVlIGZvciAyNDAwMCBIei5cblx0ICpcblx0ICogQHJldHVybiB7VWludDhBcnJheX0gVGhlIGZyZXF1ZW5jeSBkYXRhLlxuXHQgKi9cblx0Z2V0RnJlcXVlbmN5RGF0YSgpIHtcblxuXHRcdHRoaXMuYW5hbHlzZXIuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEoIHRoaXMuZGF0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGF2ZXJhZ2Ugb2YgdGhlIGZyZXF1ZW5jaWVzIHJldHVybmVkIGJ5IHtAbGluayBBdWRpb0FuYWx5c2VyI2dldEZyZXF1ZW5jeURhdGF9LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhdmVyYWdlIGZyZXF1ZW5jeS5cblx0ICovXG5cdGdldEF2ZXJhZ2VGcmVxdWVuY3koKSB7XG5cblx0XHRsZXQgdmFsdWUgPSAwO1xuXHRcdGNvbnN0IGRhdGEgPSB0aGlzLmdldEZyZXF1ZW5jeURhdGEoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YWx1ZSArPSBkYXRhWyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWUgLyBkYXRhLmxlbmd0aDtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBCdWZmZXJlZCBzY2VuZSBncmFwaCBwcm9wZXJ0eSB0aGF0IGFsbG93cyB3ZWlnaHRlZCBhY2N1bXVsYXRpb247IHVzZWQgaW50ZXJuYWxseS5cbiAqL1xuY2xhc3MgUHJvcGVydHlNaXhlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcHJvcGVydHkgbWl4ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UHJvcGVydHlCaW5kaW5nfSBiaW5kaW5nIC0gVGhlIHByb3BlcnR5IGJpbmRpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlTmFtZSAtIFRoZSBrZXlmcmFtZSB0cmFjayB0eXBlIG5hbWUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVNpemUgLSBUaGUga2V5ZnJhbWUgdHJhY2sgdmFsdWUgc2l6ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBiaW5kaW5nLCB0eXBlTmFtZSwgdmFsdWVTaXplICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHByb3BlcnR5IGJpbmRpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7UHJvcGVydHlCaW5kaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZGluZyA9IGJpbmRpbmc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUga2V5ZnJhbWUgdHJhY2sgdmFsdWUgc2l6ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy52YWx1ZVNpemUgPSB2YWx1ZVNpemU7XG5cblx0XHRsZXQgbWl4RnVuY3Rpb24sXG5cdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlLFxuXHRcdFx0c2V0SWRlbnRpdHk7XG5cblx0XHQvLyBidWZmZXIgbGF5b3V0OiBbIGluY29taW5nIHwgYWNjdTAgfCBhY2N1MSB8IG9yaWcgfCBhZGRBY2N1IHwgKG9wdGlvbmFsIHdvcmspIF1cblx0XHQvL1xuXHRcdC8vIGludGVycG9sYXRvcnMgY2FuIHVzZSAuYnVmZmVyIGFzIHRoZWlyIC5yZXN1bHRcblx0XHQvLyB0aGUgZGF0YSB0aGVuIGdvZXMgdG8gJ2luY29taW5nJ1xuXHRcdC8vXG5cdFx0Ly8gJ2FjY3UwJyBhbmQgJ2FjY3UxJyBhcmUgdXNlZCBmcmFtZS1pbnRlcmxlYXZlZCBmb3Jcblx0XHQvLyB0aGUgY3VtdWxhdGl2ZSByZXN1bHQgYW5kIGFyZSBjb21wYXJlZCB0byBkZXRlY3Rcblx0XHQvLyBjaGFuZ2VzXG5cdFx0Ly9cblx0XHQvLyAnb3JpZycgc3RvcmVzIHRoZSBvcmlnaW5hbCBzdGF0ZSBvZiB0aGUgcHJvcGVydHlcblx0XHQvL1xuXHRcdC8vICdhZGQnIGlzIHVzZWQgZm9yIGFkZGl0aXZlIGN1bXVsYXRpdmUgcmVzdWx0c1xuXHRcdC8vXG5cdFx0Ly8gJ3dvcmsnIGlzIG9wdGlvbmFsIGFuZCBpcyBvbmx5IHByZXNlbnQgZm9yIHF1YXRlcm5pb24gdHlwZXMuIEl0IGlzIHVzZWRcblx0XHQvLyB0byBzdG9yZSBpbnRlcm1lZGlhdGUgcXVhdGVybmlvbiBtdWx0aXBsaWNhdGlvbiByZXN1bHRzXG5cblx0XHRzd2l0Y2ggKCB0eXBlTmFtZSApIHtcblxuXHRcdFx0Y2FzZSAncXVhdGVybmlvbic6XG5cdFx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2xlcnA7XG5cdFx0XHRcdG1peEZ1bmN0aW9uQWRkaXRpdmUgPSB0aGlzLl9zbGVycEFkZGl0aXZlO1xuXHRcdFx0XHRzZXRJZGVudGl0eSA9IHRoaXMuX3NldEFkZGl0aXZlSWRlbnRpdHlRdWF0ZXJuaW9uO1xuXG5cdFx0XHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheSggdmFsdWVTaXplICogNiApO1xuXHRcdFx0XHR0aGlzLl93b3JrSW5kZXggPSA1O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnc3RyaW5nJzpcblx0XHRcdGNhc2UgJ2Jvb2wnOlxuXHRcdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NlbGVjdDtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIHJlZ3VsYXIgbWl4IGZ1bmN0aW9uIGFuZCBmb3IgYWRkaXRpdmUgb24gdGhlc2UgdHlwZXMsXG5cdFx0XHRcdC8vIGFkZGl0aXZlIGlzIG5vdCByZWxldmFudCBmb3Igbm9uLW51bWVyaWMgdHlwZXNcblx0XHRcdFx0bWl4RnVuY3Rpb25BZGRpdGl2ZSA9IHRoaXMuX3NlbGVjdDtcblxuXHRcdFx0XHRzZXRJZGVudGl0eSA9IHRoaXMuX3NldEFkZGl0aXZlSWRlbnRpdHlPdGhlcjtcblxuXHRcdFx0XHR0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheSggdmFsdWVTaXplICogNSApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9sZXJwO1xuXHRcdFx0XHRtaXhGdW5jdGlvbkFkZGl0aXZlID0gdGhpcy5fbGVycEFkZGl0aXZlO1xuXHRcdFx0XHRzZXRJZGVudGl0eSA9IHRoaXMuX3NldEFkZGl0aXZlSWRlbnRpdHlOdW1lcmljO1xuXG5cdFx0XHRcdHRoaXMuYnVmZmVyID0gbmV3IEZsb2F0NjRBcnJheSggdmFsdWVTaXplICogNSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uID0gbWl4RnVuY3Rpb247XG5cdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uQWRkaXRpdmUgPSBtaXhGdW5jdGlvbkFkZGl0aXZlO1xuXHRcdHRoaXMuX3NldElkZW50aXR5ID0gc2V0SWRlbnRpdHk7XG5cdFx0dGhpcy5fb3JpZ0luZGV4ID0gMztcblx0XHR0aGlzLl9hZGRJbmRleCA9IDQ7XG5cblx0XHQvKipcblx0XHQgKiBUT0RPXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVE9ET1xuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy51c2VDb3VudCA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBUT0RPXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnJlZmVyZW5jZUNvdW50ID0gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFjY3VtdWxhdGVzIGRhdGEgaW4gdGhlIGBpbmNvbWluZ2AgcmVnaW9uIGludG8gYGFjY3U8aT5gLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWNjdUluZGV4IC0gVGhlIGFjY3VtdWxhdGlvbiBpbmRleC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdlaWdodCAtIFRoZSB3ZWlnaHQuXG5cdCAqL1xuXHRhY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApIHtcblxuXHRcdC8vIG5vdGU6IGhhcHBpbHkgYWNjdW11bGF0aW5nIG5vdGhpbmcgd2hlbiB3ZWlnaHQgPSAwLCB0aGUgY2FsbGVyIGtub3dzXG5cdFx0Ly8gdGhlIHdlaWdodCBhbmQgc2hvdWxkbid0IGhhdmUgbWFkZSB0aGUgY2FsbCBpbiB0aGUgZmlyc3QgcGxhY2VcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGU7XG5cblx0XHRsZXQgY3VycmVudFdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodDtcblxuXHRcdGlmICggY3VycmVudFdlaWdodCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBpIF0gPSBidWZmZXJbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBpbmNvbWluZyAqIHdlaWdodFxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ICs9IHdlaWdodDtcblx0XHRcdGNvbnN0IG1peCA9IHdlaWdodCAvIGN1cnJlbnRXZWlnaHQ7XG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb24oIGJ1ZmZlciwgb2Zmc2V0LCAwLCBtaXgsIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gY3VycmVudFdlaWdodDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFjY3VtdWxhdGVzIGRhdGEgaW4gdGhlIGBpbmNvbWluZ2AgcmVnaW9uIGludG8gYGFkZGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBUaGUgd2VpZ2h0LlxuXHQgKi9cblx0YWNjdW11bGF0ZUFkZGl0aXZlKCB3ZWlnaHQgKSB7XG5cblx0XHRjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gc3RyaWRlICogdGhpcy5fYWRkSW5kZXg7XG5cblx0XHRpZiAoIHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID09PSAwICkge1xuXG5cdFx0XHQvLyBhZGQgPSBpZGVudGl0eVxuXG5cdFx0XHR0aGlzLl9zZXRJZGVudGl0eSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYWRkIDo9IGFkZCArIGluY29taW5nICogd2VpZ2h0XG5cblx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb25BZGRpdGl2ZSggYnVmZmVyLCBvZmZzZXQsIDAsIHdlaWdodCwgc3RyaWRlICk7XG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0QWRkaXRpdmUgKz0gd2VpZ2h0O1xuXG5cdH1cblxuXHQvKipcblx0ICogQXBwbGllcyB0aGUgc3RhdGUgb2YgYGFjY3U8aT5gIHRvIHRoZSBiaW5kaW5nIHdoZW4gYWNjdXMgZGlmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYWNjdUluZGV4IC0gVGhlIGFjY3VtdWxhdGlvbiBpbmRleC5cblx0ICovXG5cdGFwcGx5KCBhY2N1SW5kZXggKSB7XG5cblx0XHRjb25zdCBzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0b2Zmc2V0ID0gYWNjdUluZGV4ICogc3RyaWRlICsgc3RyaWRlLFxuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQsXG5cdFx0XHR3ZWlnaHRBZGRpdGl2ZSA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlLFxuXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHRBZGRpdGl2ZSA9IDA7XG5cblx0XHRpZiAoIHdlaWdodCA8IDEgKSB7XG5cblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgb3JpZ2luYWwgKiAoIDEgLSBjdW11bGF0aXZlV2VpZ2h0IClcblxuXHRcdFx0Y29uc3Qgb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIHRoaXMuX29yaWdJbmRleDtcblxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKFxuXHRcdFx0XHRidWZmZXIsIG9mZnNldCwgb3JpZ2luYWxWYWx1ZU9mZnNldCwgMSAtIHdlaWdodCwgc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHdlaWdodEFkZGl0aXZlID4gMCApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBhZGRpdGl2ZSBhY2N1TlxuXG5cdFx0XHR0aGlzLl9taXhCdWZmZXJSZWdpb25BZGRpdGl2ZSggYnVmZmVyLCBvZmZzZXQsIHRoaXMuX2FkZEluZGV4ICogc3RyaWRlLCAxLCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gc3RyaWRlLCBlID0gc3RyaWRlICsgc3RyaWRlOyBpICE9PSBlOyArKyBpICkge1xuXG5cdFx0XHRpZiAoIGJ1ZmZlclsgaSBdICE9PSBidWZmZXJbIGkgKyBzdHJpZGUgXSApIHtcblxuXHRcdFx0XHQvLyB2YWx1ZSBoYXMgY2hhbmdlZCAtPiB1cGRhdGUgc2NlbmUgZ3JhcGhcblxuXHRcdFx0XHRiaW5kaW5nLnNldFZhbHVlKCBidWZmZXIsIG9mZnNldCApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXG5cdC8qKlxuXHQgKiBSZW1lbWJlcnMgdGhlIHN0YXRlIG9mIHRoZSBib3VuZCBwcm9wZXJ0eSBhbmQgY29weSBpdCB0byBib3RoIGFjY3VzLlxuXHQgKi9cblx0c2F2ZU9yaWdpbmFsU3RhdGUoKSB7XG5cblx0XHRjb25zdCBiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIHRoaXMuX29yaWdJbmRleDtcblxuXHRcdGJpbmRpbmcuZ2V0VmFsdWUoIGJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCApO1xuXG5cdFx0Ly8gYWNjdVswLi4xXSA6PSBvcmlnIC0tIGluaXRpYWxseSBkZXRlY3QgY2hhbmdlcyBhZ2FpbnN0IHRoZSBvcmlnaW5hbFxuXHRcdGZvciAoIGxldCBpID0gc3RyaWRlLCBlID0gb3JpZ2luYWxWYWx1ZU9mZnNldDsgaSAhPT0gZTsgKysgaSApIHtcblxuXHRcdFx0YnVmZmVyWyBpIF0gPSBidWZmZXJbIG9yaWdpbmFsVmFsdWVPZmZzZXQgKyAoIGkgJSBzdHJpZGUgKSBdO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRvIGlkZW50aXR5IGZvciBhZGRpdGl2ZVxuXHRcdHRoaXMuX3NldElkZW50aXR5KCk7XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodEFkZGl0aXZlID0gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFwcGxpZXMgdGhlIHN0YXRlIHByZXZpb3VzbHkgdGFrZW4gdmlhIHtAbGluayBQcm9wZXJ0eU1peGVyI3NhdmVPcmlnaW5hbFN0YXRlfSB0byB0aGUgYmluZGluZy5cblx0ICovXG5cdHJlc3RvcmVPcmlnaW5hbFN0YXRlKCkge1xuXG5cdFx0Y29uc3Qgb3JpZ2luYWxWYWx1ZU9mZnNldCA9IHRoaXMudmFsdWVTaXplICogMztcblx0XHR0aGlzLmJpbmRpbmcuc2V0VmFsdWUoIHRoaXMuYnVmZmVyLCBvcmlnaW5hbFZhbHVlT2Zmc2V0ICk7XG5cblx0fVxuXG5cdC8vIGludGVybmFsc1xuXG5cdF9zZXRBZGRpdGl2ZUlkZW50aXR5TnVtZXJpYygpIHtcblxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplO1xuXHRcdGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHRoaXMudmFsdWVTaXplO1xuXG5cdFx0Zm9yICggbGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYnVmZmVyWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2V0QWRkaXRpdmVJZGVudGl0eVF1YXRlcm5pb24oKSB7XG5cblx0XHR0aGlzLl9zZXRBZGRpdGl2ZUlkZW50aXR5TnVtZXJpYygpO1xuXHRcdHRoaXMuYnVmZmVyWyB0aGlzLl9hZGRJbmRleCAqIHRoaXMudmFsdWVTaXplICsgMyBdID0gMTtcblxuXHR9XG5cblx0X3NldEFkZGl0aXZlSWRlbnRpdHlPdGhlcigpIHtcblxuXHRcdGNvbnN0IHN0YXJ0SW5kZXggPSB0aGlzLl9vcmlnSW5kZXggKiB0aGlzLnZhbHVlU2l6ZTtcblx0XHRjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2FkZEluZGV4ICogdGhpcy52YWx1ZVNpemU7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5idWZmZXJbIHRhcmdldEluZGV4ICsgaSBdID0gdGhpcy5idWZmZXJbIHN0YXJ0SW5kZXggKyBpIF07XG5cblx0XHR9XG5cblx0fVxuXG5cblx0Ly8gbWl4IGZ1bmN0aW9uc1xuXG5cdF9zZWxlY3QoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGlmICggdCA+PSAwLjUgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRcdGJ1ZmZlclsgZHN0T2Zmc2V0ICsgaSBdID0gYnVmZmVyWyBzcmNPZmZzZXQgKyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0X3NsZXJwKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0ICkge1xuXG5cdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQsIHQgKTtcblxuXHR9XG5cblx0X3NsZXJwQWRkaXRpdmUoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGNvbnN0IHdvcmtPZmZzZXQgPSB0aGlzLl93b3JrSW5kZXggKiBzdHJpZGU7XG5cblx0XHQvLyBTdG9yZSByZXN1bHQgaW4gaW50ZXJtZWRpYXRlIGJ1ZmZlciBvZmZzZXRcblx0XHRRdWF0ZXJuaW9uLm11bHRpcGx5UXVhdGVybmlvbnNGbGF0KCBidWZmZXIsIHdvcmtPZmZzZXQsIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIHNyY09mZnNldCApO1xuXG5cdFx0Ly8gU2xlcnAgdG8gdGhlIGludGVybWVkaWF0ZSByZXN1bHRcblx0XHRRdWF0ZXJuaW9uLnNsZXJwRmxhdCggYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIHdvcmtPZmZzZXQsIHQgKTtcblxuXHR9XG5cblx0X2xlcnAoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGNvbnN0IHMgPSAxIC0gdDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBqID0gZHN0T2Zmc2V0ICsgaTtcblxuXHRcdFx0YnVmZmVyWyBqIF0gPSBidWZmZXJbIGogXSAqIHMgKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9sZXJwQWRkaXRpdmUoIGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCBqID0gZHN0T2Zmc2V0ICsgaTtcblxuXHRcdFx0YnVmZmVyWyBqIF0gPSBidWZmZXJbIGogXSArIGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdICogdDtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gQ2hhcmFjdGVycyBbXS46LyBhcmUgcmVzZXJ2ZWQgZm9yIHRyYWNrIGJpbmRpbmcgc3ludGF4LlxuY29uc3QgX1JFU0VSVkVEX0NIQVJTX1JFID0gJ1xcXFxbXFxcXF1cXFxcLjpcXFxcLyc7XG5jb25zdCBfcmVzZXJ2ZWRSZSA9IG5ldyBSZWdFeHAoICdbJyArIF9SRVNFUlZFRF9DSEFSU19SRSArICddJywgJ2cnICk7XG5cbi8vIEF0dGVtcHRzIHRvIGFsbG93IG5vZGUgbmFtZXMgZnJvbSBhbnkgbGFuZ3VhZ2UuIEVTNSdzIGBcXHdgIHJlZ2V4cCBtYXRjaGVzXG4vLyBvbmx5IGxhdGluIGNoYXJhY3RlcnMsIGFuZCB0aGUgdW5pY29kZSBcXHB7TH0gaXMgbm90IHlldCBzdXBwb3J0ZWQuIFNvXG4vLyBpbnN0ZWFkLCB3ZSBleGNsdWRlIHJlc2VydmVkIGNoYXJhY3RlcnMgYW5kIG1hdGNoIGV2ZXJ5dGhpbmcgZWxzZS5cbmNvbnN0IF93b3JkQ2hhciA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUgKyAnXSc7XG5jb25zdCBfd29yZENoYXJPckRvdCA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUucmVwbGFjZSggJ1xcXFwuJywgJycgKSArICddJztcblxuLy8gUGFyZW50IGRpcmVjdG9yaWVzLCBkZWxpbWl0ZWQgYnkgJy8nIG9yICc6Jy4gQ3VycmVudGx5IHVudXNlZCwgYnV0IG11c3Rcbi8vIGJlIG1hdGNoZWQgdG8gcGFyc2UgdGhlIHJlc3Qgb2YgdGhlIHRyYWNrIG5hbWUuXG5jb25zdCBfZGlyZWN0b3J5UmUgPSAvKkBfX1BVUkVfXyovIC8oKD86V0MrW1xcLzpdKSopLy5zb3VyY2UucmVwbGFjZSggJ1dDJywgX3dvcmRDaGFyICk7XG5cbi8vIFRhcmdldCBub2RlLiBNYXkgY29udGFpbiB3b3JkIGNoYXJhY3RlcnMgKGEtekEtWjAtOV8pIGFuZCAnLicgb3IgJy0nLlxuY29uc3QgX25vZGVSZSA9IC8qQF9fUFVSRV9fKi8gLyhXQ09EKyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDT0QnLCBfd29yZENoYXJPckRvdCApO1xuXG4vLyBPYmplY3Qgb24gdGFyZ2V0IG5vZGUsIGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkXG4vLyBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXkgY29udGFpbiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBjbG9zaW5nIGJyYWNrZXQuXG5jb25zdCBfb2JqZWN0UmUgPSAvKkBfX1BVUkVfXyovIC8oPzpcXC4oV0MrKSg/OlxcWyguKylcXF0pPyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDJywgX3dvcmRDaGFyICk7XG5cbi8vIFByb3BlcnR5IGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heVxuLy8gY29udGFpbiBhbnkgbm9uLWJyYWNrZXQgY2hhcmFjdGVycy5cbmNvbnN0IF9wcm9wZXJ0eVJlID0gLypAX19QVVJFX18qLyAvXFwuKFdDKykoPzpcXFsoLispXFxdKT8vLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcblxuY29uc3QgX3RyYWNrUmUgPSBuZXcgUmVnRXhwKCAnJ1xuXHQrICdeJ1xuXHQrIF9kaXJlY3RvcnlSZVxuXHQrIF9ub2RlUmVcblx0KyBfb2JqZWN0UmVcblx0KyBfcHJvcGVydHlSZVxuXHQrICckJ1xuKTtcblxuY29uc3QgX3N1cHBvcnRlZE9iamVjdE5hbWVzID0gWyAnbWF0ZXJpYWwnLCAnbWF0ZXJpYWxzJywgJ2JvbmVzJywgJ21hcCcgXTtcblxuY2xhc3MgQ29tcG9zaXRlIHtcblxuXHRjb25zdHJ1Y3RvciggdGFyZ2V0R3JvdXAsIHBhdGgsIG9wdGlvbmFsUGFyc2VkUGF0aCApIHtcblxuXHRcdGNvbnN0IHBhcnNlZFBhdGggPSBvcHRpb25hbFBhcnNlZFBhdGggfHwgUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKCBwYXRoICk7XG5cblx0XHR0aGlzLl90YXJnZXRHcm91cCA9IHRhcmdldEdyb3VwO1xuXHRcdHRoaXMuX2JpbmRpbmdzID0gdGFyZ2V0R3JvdXAuc3Vic2NyaWJlXyggcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdH1cblxuXHRnZXRWYWx1ZSggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpOyAvLyBiaW5kIGFsbCBiaW5kaW5nXG5cblx0XHRjb25zdCBmaXJzdFZhbGlkSW5kZXggPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5fYmluZGluZ3NbIGZpcnN0VmFsaWRJbmRleCBdO1xuXG5cdFx0Ly8gYW5kIG9ubHkgY2FsbCAuZ2V0VmFsdWUgb24gdGhlIGZpcnN0XG5cdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSBiaW5kaW5nLmdldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fVxuXG5cdHNldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnNldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGJpbmQoKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0uYmluZCgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR1bmJpbmQoKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggbGV0IGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0udW5iaW5kKCk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIE5vdGU6IFRoaXMgY2xhc3MgdXNlcyBhIFN0YXRlIHBhdHRlcm4gb24gYSBwZXItbWV0aG9kIGJhc2lzOlxuLy8gJ2JpbmQnIHNldHMgJ3RoaXMuZ2V0VmFsdWUnIC8gJ3NldFZhbHVlJyBhbmQgc2hhZG93cyB0aGVcbi8vIHByb3RvdHlwZSB2ZXJzaW9uIG9mIHRoZXNlIG1ldGhvZHMgd2l0aCBvbmUgdGhhdCByZXByZXNlbnRzXG4vLyB0aGUgYm91bmQgc3RhdGUuIFdoZW4gdGhlIHByb3BlcnR5IGlzIG5vdCBmb3VuZCwgdGhlIG1ldGhvZHNcbi8vIGJlY29tZSBuby1vcHMuXG5cblxuLyoqXG4gKiBUaGlzIGhvbGRzIGEgcmVmZXJlbmNlIHRvIGEgcmVhbCBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGg7IHVzZWQgaW50ZXJuYWxseS5cbiAqL1xuY2xhc3MgUHJvcGVydHlCaW5kaW5nIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwcm9wZXJ0eSBiaW5kaW5nLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcm9vdE5vZGUgLSBUaGUgcm9vdCBub2RlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoLlxuXHQgKiBAcGFyYW0gez9PYmplY3R9IFtwYXJzZWRQYXRoXSAtIFRoZSBwYXJzZWQgcGF0aC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByb290Tm9kZSwgcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvYmplY3QgcGF0aCB0byB0aGUgYW5pbWF0ZWQgcHJvcGVydHkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMucGF0aCA9IHBhdGg7XG5cblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3QgaG9sZGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGF0aC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJzZWRQYXRoID0gcGFyc2VkUGF0aCB8fCBQcm9wZXJ0eUJpbmRpbmcucGFyc2VUcmFja05hbWUoIHBhdGggKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvYmplY3Qgb3ducyB0aGUgYW5pbWF0ZWQgcHJvcGVydHkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7P09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUoIHJvb3ROb2RlLCB0aGlzLnBhcnNlZFBhdGgubm9kZU5hbWUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByb290IG5vZGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0M0R8U2tlbGV0b259XG5cdFx0ICovXG5cdFx0dGhpcy5yb290Tm9kZSA9IHJvb3ROb2RlO1xuXG5cdFx0Ly8gaW5pdGlhbCBzdGF0ZSBvZiB0aGVzZSBtZXRob2RzIHRoYXQgY2FsbHMgJ2JpbmQnXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuX2dldFZhbHVlX3VuYm91bmQ7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7XG5cblx0fVxuXG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBhIHByb3BlcnR5IGJpbmRpbmcgZnJvbSB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cblx0ICpcblx0ICogQHN0YXRpY1xuXHQgKiBAcGFyYW0ge09iamVjdH0gcm9vdCAtIFRoZSByb290IG5vZGUuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGguXG5cdCAqIEBwYXJhbSB7P09iamVjdH0gW3BhcnNlZFBhdGhdIC0gVGhlIHBhcnNlZCBwYXRoLlxuXHQgKiBAcmV0dXJuIHtQcm9wZXJ0eUJpbmRpbmd8Q29tcG9zaXRlfSBUaGUgY3JlYXRlZCBwcm9wZXJ0eSBiaW5kaW5nIG9yIGNvbXBvc2l0ZS5cblx0ICovXG5cdHN0YXRpYyBjcmVhdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKSB7XG5cblx0XHRpZiAoICEgKCByb290ICYmIHJvb3QuaXNBbmltYXRpb25PYmplY3RHcm91cCApICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmQgcmVtb3ZlcyB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzIGZyb21cblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5vZGUgbmFtZSB0byBiZSBzYW5pdGl6ZWQuXG5cdCAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHNhbml0aXplZCBub2RlIG5hbWUuXG5cdCAqL1xuXHRzdGF0aWMgc2FuaXRpemVOb2RlTmFtZSggbmFtZSApIHtcblxuXHRcdHJldHVybiBuYW1lLnJlcGxhY2UoIC9cXHMvZywgJ18nICkucmVwbGFjZSggX3Jlc2VydmVkUmUsICcnICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgdGhlIGdpdmVuIHRyYWNrIG5hbWUgKGFuIG9iamVjdCBwYXRoIHRvIGFuIGFuaW1hdGVkIHByb3BlcnR5KSBhbmRcblx0ICogcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGF0aC4gTWF0Y2hlcyBzdHJpbmdzIGluIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG5cdCAqXG5cdCAqIC0gbm9kZU5hbWUucHJvcGVydHlcblx0ICogLSBub2RlTmFtZS5wcm9wZXJ0eVthY2Nlc3Nvcl1cblx0ICogLSBub2RlTmFtZS5tYXRlcmlhbC5wcm9wZXJ0eVthY2Nlc3Nvcl1cblx0ICogLSB1dWlkLnByb3BlcnR5W2FjY2Vzc29yXVxuXHQgKiAtIHV1aWQub2JqZWN0TmFtZVtvYmplY3RJbmRleF0ucHJvcGVydHlOYW1lW3Byb3BlcnR5SW5kZXhdXG5cdCAqIC0gcGFyZW50TmFtZS9ub2RlTmFtZS5wcm9wZXJ0eVxuXHQgKiAtIHBhcmVudE5hbWUvcGFyZW50TmFtZS9ub2RlTmFtZS5wcm9wZXJ0eVtpbmRleF1cblx0ICogLSAuYm9uZVtBcm1hdHVyZS5ERUZfY29nXS5wb3NpdGlvblxuXHQgKiAtIHNjZW5lOmhlbGl1bV9iYWxsb29uX21vZGVsOmhlbGl1bV9iYWxsb29uX21vZGVsLnBvc2l0aW9uXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRyYWNrTmFtZSAtIFRoZSB0cmFjayBuYW1lIHRvIHBhcnNlLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBwYXJzZWQgdHJhY2sgbmFtZSBhcyBhbiBvYmplY3QuXG5cdCAqL1xuXHRzdGF0aWMgcGFyc2VUcmFja05hbWUoIHRyYWNrTmFtZSApIHtcblxuXHRcdGNvbnN0IG1hdGNoZXMgPSBfdHJhY2tSZS5leGVjKCB0cmFja05hbWUgKTtcblxuXHRcdGlmICggbWF0Y2hlcyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBDYW5ub3QgcGFyc2UgdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCByZXN1bHRzID0ge1xuXHRcdFx0Ly8gZGlyZWN0b3J5TmFtZTogbWF0Y2hlc1sgMSBdLCAvLyAodHNjaHcpIGN1cnJlbnRseSB1bnVzZWRcblx0XHRcdG5vZGVOYW1lOiBtYXRjaGVzWyAyIF0sXG5cdFx0XHRvYmplY3ROYW1lOiBtYXRjaGVzWyAzIF0sXG5cdFx0XHRvYmplY3RJbmRleDogbWF0Y2hlc1sgNCBdLFxuXHRcdFx0cHJvcGVydHlOYW1lOiBtYXRjaGVzWyA1IF0sIC8vIHJlcXVpcmVkXG5cdFx0XHRwcm9wZXJ0eUluZGV4OiBtYXRjaGVzWyA2IF1cblx0XHR9O1xuXG5cdFx0Y29uc3QgbGFzdERvdCA9IHJlc3VsdHMubm9kZU5hbWUgJiYgcmVzdWx0cy5ub2RlTmFtZS5sYXN0SW5kZXhPZiggJy4nICk7XG5cblx0XHRpZiAoIGxhc3REb3QgIT09IHVuZGVmaW5lZCAmJiBsYXN0RG90ICE9PSAtMSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0TmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCBsYXN0RG90ICsgMSApO1xuXG5cdFx0XHQvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYW4gYWxsb3dsaXN0LiBPdGhlcndpc2UsIHRoZXJlXG5cdFx0XHQvLyBpcyBubyB3YXkgdG8gcGFyc2UgJ2Zvby5iYXIuYmF6JzogJ2JheicgbXVzdCBiZSBhIHByb3BlcnR5LCBidXRcblx0XHRcdC8vICdiYXInIGNvdWxkIGJlIHRoZSBvYmplY3ROYW1lLCBvciBwYXJ0IG9mIGEgbm9kZU5hbWUgKHdoaWNoIGNhblxuXHRcdFx0Ly8gaW5jbHVkZSAnLicgY2hhcmFjdGVycykuXG5cdFx0XHRpZiAoIF9zdXBwb3J0ZWRPYmplY3ROYW1lcy5pbmRleE9mKCBvYmplY3ROYW1lICkgIT09IC0xICkge1xuXG5cdFx0XHRcdHJlc3VsdHMubm9kZU5hbWUgPSByZXN1bHRzLm5vZGVOYW1lLnN1YnN0cmluZyggMCwgbGFzdERvdCApO1xuXHRcdFx0XHRyZXN1bHRzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlc3VsdHMucHJvcGVydHlOYW1lID09PSBudWxsIHx8IHJlc3VsdHMucHJvcGVydHlOYW1lLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBjYW4gbm90IHBhcnNlIHByb3BlcnR5TmFtZSBmcm9tIHRyYWNrTmFtZTogJyArIHRyYWNrTmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2hlcyBmb3IgYSBub2RlIGluIHRoZSBoaWVyYXJjaHkgb2YgdGhlIGdpdmVuIHJvb3Qgb2JqZWN0IGJ5IHRoZSBnaXZlblxuXHQgKiBub2RlIG5hbWUuXG5cdCAqXG5cdCAqIEBzdGF0aWNcblx0ICogQHBhcmFtIHtPYmplY3R9IHJvb3QgLSBUaGUgcm9vdCBvYmplY3QuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbm9kZU5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgbm9kZS5cblx0ICogQHJldHVybiB7P09iamVjdH0gVGhlIGZvdW5kIG5vZGUuIFJldHVybnMgYG51bGxgIGlmIG5vIG9iamVjdCB3YXMgZm91bmQuXG5cdCAqL1xuXHRzdGF0aWMgZmluZE5vZGUoIHJvb3QsIG5vZGVOYW1lICkge1xuXG5cdFx0aWYgKCBub2RlTmFtZSA9PT0gdW5kZWZpbmVkIHx8IG5vZGVOYW1lID09PSAnJyB8fCBub2RlTmFtZSA9PT0gJy4nIHx8IG5vZGVOYW1lID09PSAtMSB8fCBub2RlTmFtZSA9PT0gcm9vdC5uYW1lIHx8IG5vZGVOYW1lID09PSByb290LnV1aWQgKSB7XG5cblx0XHRcdHJldHVybiByb290O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VhcmNoIGludG8gc2tlbGV0b24gYm9uZXMuXG5cdFx0aWYgKCByb290LnNrZWxldG9uICkge1xuXG5cdFx0XHRjb25zdCBib25lID0gcm9vdC5za2VsZXRvbi5nZXRCb25lQnlOYW1lKCBub2RlTmFtZSApO1xuXG5cdFx0XHRpZiAoIGJvbmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gc2VhcmNoIGludG8gbm9kZSBzdWJ0cmVlLlxuXHRcdGlmICggcm9vdC5jaGlsZHJlbiApIHtcblxuXHRcdFx0Y29uc3Qgc2VhcmNoTm9kZVN1YnRyZWUgPSBmdW5jdGlvbiAoIGNoaWxkcmVuICkge1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNoaWxkTm9kZSA9IGNoaWxkcmVuWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIGNoaWxkTm9kZS5uYW1lID09PSBub2RlTmFtZSB8fCBjaGlsZE5vZGUudXVpZCA9PT0gbm9kZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZE5vZGU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCByZXN1bHQgPSBzZWFyY2hOb2RlU3VidHJlZSggY2hpbGROb2RlLmNoaWxkcmVuICk7XG5cblx0XHRcdFx0XHRpZiAoIHJlc3VsdCApIHJldHVybiByZXN1bHQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9O1xuXG5cdFx0XHRjb25zdCBzdWJUcmVlTm9kZSA9IHNlYXJjaE5vZGVTdWJ0cmVlKCByb290LmNoaWxkcmVuICk7XG5cblx0XHRcdGlmICggc3ViVHJlZU5vZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHN1YlRyZWVOb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9XG5cblx0Ly8gdGhlc2UgYXJlIHVzZWQgdG8gXCJiaW5kXCIgYSBub25leGlzdGVudCBwcm9wZXJ0eVxuXHRfZ2V0VmFsdWVfdW5hdmFpbGFibGUoKSB7fVxuXHRfc2V0VmFsdWVfdW5hdmFpbGFibGUoKSB7fVxuXG5cdC8vIEdldHRlcnNcblxuXHRfZ2V0VmFsdWVfZGlyZWN0KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGJ1ZmZlclsgb2Zmc2V0IF0gPSB0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXTtcblxuXHR9XG5cblx0X2dldFZhbHVlX2FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IHNvdXJjZSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHNvdXJjZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJ1ZmZlclsgb2Zmc2V0ICsrIF0gPSBzb3VyY2VbIGkgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2dldFZhbHVlX2FycmF5RWxlbWVudCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXTtcblxuXHR9XG5cblx0X2dldFZhbHVlX3RvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LnRvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cblx0fVxuXG5cdC8vIERpcmVjdFxuXG5cdF9zZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9kaXJlY3Rfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdFsgdGhpcy5wcm9wZXJ0eU5hbWUgXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdC8vIEVudGlyZUFycmF5XG5cblx0X3NldFZhbHVlX2FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0X3NldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdGNvbnN0IGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X3NldFZhbHVlX2FycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc3QgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdC8vIEFycmF5RWxlbWVudFxuXG5cdF9zZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXSA9IGJ1ZmZlclsgb2Zmc2V0IF07XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdC8vIEhhc1RvRnJvbUFycmF5XG5cblx0X3NldFZhbHVlX2Zyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfZnJvbUFycmF5X3NldE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRfc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHR9XG5cblx0X2dldFZhbHVlX3VuYm91bmQoIHRhcmdldEFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTtcblx0XHR0aGlzLmdldFZhbHVlKCB0YXJnZXRBcnJheSwgb2Zmc2V0ICk7XG5cblx0fVxuXG5cdF9zZXRWYWx1ZV91bmJvdW5kKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7XG5cdFx0dGhpcy5zZXRWYWx1ZSggc291cmNlQXJyYXksIG9mZnNldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGdldHRlciAvIHNldHRlciBwYWlyIGZvciB0aGUgcHJvcGVydHkgdHJhY2tlZCBieSB0aGlzIGJpbmRpbmcuXG5cdCAqL1xuXHRiaW5kKCkge1xuXG5cdFx0bGV0IHRhcmdldE9iamVjdCA9IHRoaXMubm9kZTtcblx0XHRjb25zdCBwYXJzZWRQYXRoID0gdGhpcy5wYXJzZWRQYXRoO1xuXG5cdFx0Y29uc3Qgb2JqZWN0TmFtZSA9IHBhcnNlZFBhdGgub2JqZWN0TmFtZTtcblx0XHRjb25zdCBwcm9wZXJ0eU5hbWUgPSBwYXJzZWRQYXRoLnByb3BlcnR5TmFtZTtcblx0XHRsZXQgcHJvcGVydHlJbmRleCA9IHBhcnNlZFBhdGgucHJvcGVydHlJbmRleDtcblxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdHRhcmdldE9iamVjdCA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggdGhpcy5yb290Tm9kZSwgcGFyc2VkUGF0aC5ub2RlTmFtZSApO1xuXG5cdFx0XHR0aGlzLm5vZGUgPSB0YXJnZXRPYmplY3Q7XG5cblx0XHR9XG5cblx0XHQvLyBzZXQgZmFpbCBzdGF0ZSBzbyB3ZSBjYW4ganVzdCAncmV0dXJuJyBvbiBlcnJvclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmF2YWlsYWJsZTtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5hdmFpbGFibGU7XG5cblx0XHQvLyBlbnN1cmUgdGhlcmUgaXMgYSB2YWx1ZSBub2RlXG5cdFx0aWYgKCAhIHRhcmdldE9iamVjdCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBObyB0YXJnZXQgbm9kZSBmb3VuZCBmb3IgdHJhY2s6ICcgKyB0aGlzLnBhdGggKyAnLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0TmFtZSApIHtcblxuXHRcdFx0bGV0IG9iamVjdEluZGV4ID0gcGFyc2VkUGF0aC5vYmplY3RJbmRleDtcblxuXHRcdFx0Ly8gc3BlY2lhbCBjYXNlcyB3ZXJlIHdlIG5lZWQgdG8gcmVhY2ggZGVlcGVyIGludG8gdGhlIGhpZXJhcmNoeSB0byBnZXQgdGhlIGZhY2UgbWF0ZXJpYWxzLi4uLlxuXHRcdFx0c3dpdGNoICggb2JqZWN0TmFtZSApIHtcblxuXHRcdFx0XHRjYXNlICdtYXRlcmlhbHMnOlxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5tYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFsLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWF0ZXJpYWxzICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwubWF0ZXJpYWxzIGFzIG5vZGUubWF0ZXJpYWwgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFscyBhcnJheS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3QubWF0ZXJpYWwubWF0ZXJpYWxzO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYm9uZXMnOlxuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5za2VsZXRvbiApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIGJvbmVzIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIHNrZWxldG9uLicsIHRoaXMgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHBvdGVudGlhbCBmdXR1cmUgb3B0aW1pemF0aW9uOiBza2lwIHRoaXMgaWYgcHJvcGVydHlJbmRleCBpcyBhbHJlYWR5IGFuIGludGVnZXJcblx0XHRcdFx0XHQvLyBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXG5cblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Quc2tlbGV0b24uYm9uZXM7XG5cblx0XHRcdFx0XHQvLyBzdXBwb3J0IHJlc29sdmluZyBtb3JwaFRhcmdldCBuYW1lcyBpbnRvIGluZGljZXMuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGFyZ2V0T2JqZWN0Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIGkgXS5uYW1lID09PSBvYmplY3RJbmRleCApIHtcblxuXHRcdFx0XHRcdFx0XHRvYmplY3RJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdtYXAnOlxuXG5cdFx0XHRcdFx0aWYgKCAnbWFwJyBpbiB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdC5tYXA7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QubWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsLm1hcCBhcyBub2RlLm1hdGVyaWFsIGRvZXMgbm90IGhhdmUgYSBtYXAuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hcDtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdE5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gb2JqZWN0TmFtZSBvZiBub2RlIHVuZGVmaW5lZC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdE5hbWUgXTtcblxuXHRcdFx0fVxuXG5cblx0XHRcdGlmICggb2JqZWN0SW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdFsgb2JqZWN0SW5kZXggXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIGJpbmQgdG8gb2JqZWN0SW5kZXggb2Ygb2JqZWN0TmFtZSwgYnV0IGlzIHVuZGVmaW5lZC4nLCB0aGlzLCB0YXJnZXRPYmplY3QgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFsgb2JqZWN0SW5kZXggXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gcmVzb2x2ZSBwcm9wZXJ0eVxuXHRcdGNvbnN0IG5vZGVQcm9wZXJ0eSA9IHRhcmdldE9iamVjdFsgcHJvcGVydHlOYW1lIF07XG5cblx0XHRpZiAoIG5vZGVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBub2RlTmFtZSA9IHBhcnNlZFBhdGgubm9kZU5hbWU7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgcHJvcGVydHkgZm9yIHRyYWNrOiAnICsgbm9kZU5hbWUgK1xuXHRcdFx0XHQnLicgKyBwcm9wZXJ0eU5hbWUgKyAnIGJ1dCBpdCB3YXNuXFwndCBmb3VuZC4nLCB0YXJnZXRPYmplY3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIGRldGVybWluZSB2ZXJzaW9uaW5nIHNjaGVtZVxuXHRcdGxldCB2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5vbmU7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdDtcblxuXHRcdGlmICggdGFyZ2V0T2JqZWN0LmlzTWF0ZXJpYWwgPT09IHRydWUgKSB7XG5cblx0XHRcdHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTmVlZHNVcGRhdGU7XG5cblx0XHR9IGVsc2UgaWYgKCB0YXJnZXRPYmplY3QuaXNPYmplY3QzRCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZXJtaW5lIGhvdyB0aGUgcHJvcGVydHkgZ2V0cyBib3VuZFxuXHRcdGxldCBiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRGlyZWN0O1xuXG5cdFx0aWYgKCBwcm9wZXJ0eUluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGFjY2VzcyBhIHN1YiBlbGVtZW50IG9mIHRoZSBwcm9wZXJ0eSBhcnJheSAob25seSBwcmltaXRpdmVzIGFyZSBzdXBwb3J0ZWQgcmlnaHQgbm93KVxuXG5cdFx0XHRpZiAoIHByb3BlcnR5TmFtZSA9PT0gJ21vcnBoVGFyZ2V0SW5mbHVlbmNlcycgKSB7XG5cblx0XHRcdFx0Ly8gcG90ZW50aWFsIG9wdGltaXphdGlvbiwgc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyLCBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXG5cblx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxuXHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LicsIHRoaXMgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IHRhcmdldE9iamVjdC5tb3JwaFRhcmdldERpY3Rpb25hcnlbIHByb3BlcnR5SW5kZXggXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkFycmF5RWxlbWVudDtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXHRcdFx0dGhpcy5wcm9wZXJ0eUluZGV4ID0gcHJvcGVydHlJbmRleDtcblxuXHRcdH0gZWxzZSBpZiAoIG5vZGVQcm9wZXJ0eS5mcm9tQXJyYXkgIT09IHVuZGVmaW5lZCAmJiBub2RlUHJvcGVydHkudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBtdXN0IHVzZSBjb3B5IGZvciBPYmplY3QzRC5FdWxlci9RdWF0ZXJuaW9uXG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5IYXNGcm9tVG9BcnJheTtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggbm9kZVByb3BlcnR5ICkgKSB7XG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5FbnRpcmVBcnJheTtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG5cblx0XHR9XG5cblx0XHQvLyBzZWxlY3QgZ2V0dGVyIC8gc2V0dGVyXG5cdFx0dGhpcy5nZXRWYWx1ZSA9IHRoaXMuR2V0dGVyQnlCaW5kaW5nVHlwZVsgYmluZGluZ1R5cGUgXTtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5TZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZ1sgYmluZGluZ1R5cGUgXVsgdmVyc2lvbmluZyBdO1xuXG5cdH1cblxuXHQvKipcblx0ICogVW5iaW5kcyB0aGUgcHJvcGVydHkuXG5cdCAqL1xuXHR1bmJpbmQoKSB7XG5cblx0XHR0aGlzLm5vZGUgPSBudWxsO1xuXG5cdFx0Ly8gYmFjayB0byB0aGUgcHJvdG90eXBlIHZlcnNpb24gb2YgZ2V0VmFsdWUgLyBzZXRWYWx1ZVxuXHRcdC8vIG5vdGU6IGF2b2lkaW5nIHRvIG11dGF0ZSB0aGUgc2hhcGUgb2YgJ3RoaXMnIHZpYSAnZGVsZXRlJ1xuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmJvdW5kO1xuXG5cdH1cblxufVxuXG5Qcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlID0gQ29tcG9zaXRlO1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLkJpbmRpbmdUeXBlID0ge1xuXHREaXJlY3Q6IDAsXG5cdEVudGlyZUFycmF5OiAxLFxuXHRBcnJheUVsZW1lbnQ6IDIsXG5cdEhhc0Zyb21Ub0FycmF5OiAzXG59O1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLlZlcnNpb25pbmcgPSB7XG5cdE5vbmU6IDAsXG5cdE5lZWRzVXBkYXRlOiAxLFxuXHRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlOiAyXG59O1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLkdldHRlckJ5QmluZGluZ1R5cGUgPSBbXG5cblx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fZ2V0VmFsdWVfZGlyZWN0LFxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV9hcnJheSxcblx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fZ2V0VmFsdWVfYXJyYXlFbGVtZW50LFxuXHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9nZXRWYWx1ZV90b0FycmF5LFxuXG5dO1xuXG5Qcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nID0gW1xuXG5cdFtcblx0XHQvLyBEaXJlY3Rcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9kaXJlY3QsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlLFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxuXG5cdF0sIFtcblxuXHRcdC8vIEVudGlyZUFycmF5XG5cblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxuXG5cdF0sIFtcblxuXHRcdC8vIEFycmF5RWxlbWVudFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2FycmF5RWxlbWVudCxcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUsXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsXG5cblx0XSwgW1xuXG5cdFx0Ly8gSGFzVG9Gcm9tQXJyYXlcblx0XHRQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLl9zZXRWYWx1ZV9mcm9tQXJyYXksXG5cdFx0UHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5fc2V0VmFsdWVfZnJvbUFycmF5X3NldE5lZWRzVXBkYXRlLFxuXHRcdFByb3BlcnR5QmluZGluZy5wcm90b3R5cGUuX3NldFZhbHVlX2Zyb21BcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlLFxuXG5cdF1cblxuXTtcblxuLyoqXG4gKiBBIGdyb3VwIG9mIG9iamVjdHMgdGhhdCByZWNlaXZlcyBhIHNoYXJlZCBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogLSBBZGQgb2JqZWN0cyB5b3Ugd291bGQgb3RoZXJ3aXNlIHBhc3MgYXMgJ3Jvb3QnIHRvIHRoZVxuICogY29uc3RydWN0b3Igb3IgdGhlIC5jbGlwQWN0aW9uIG1ldGhvZCBvZiBBbmltYXRpb25NaXhlci5cbiAqIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cbiAqIC0gWW91IGNhbiBhbHNvIGFkZCBhbmQgcmVtb3ZlIG9iamVjdHMgbGF0ZXIgd2hlbiB0aGUgbWl4ZXIgaXMgcnVubmluZy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqIC0gT2JqZWN0cyBvZiB0aGlzIGNsYXNzIGFwcGVhciBhcyBvbmUgb2JqZWN0IHRvIHRoZSBtaXhlcixcbiAqIHNvIGNhY2hlIGNvbnRyb2wgb2YgdGhlIGluZGl2aWR1YWwgb2JqZWN0cyBtdXN0IGJlIGRvbmUgb24gdGhlIGdyb3VwLlxuICpcbiAqIExpbWl0YXRpb246XG4gKlxuICogLSBUaGUgYW5pbWF0ZWQgcHJvcGVydGllcyBtdXN0IGJlIGNvbXBhdGlibGUgYW1vbmcgdGhlIGFsbCBvYmplY3RzIGluIHRoZSBncm91cC5cbiAqIC0gQSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYSB0YXJnZXQgZ3JvdXAgb3IgZGlyZWN0bHksIGJ1dCBub3QgYm90aC5cbiAqL1xuY2xhc3MgQW5pbWF0aW9uT2JqZWN0R3JvdXAge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGFuaW1hdGlvbiBncm91cC5cblx0ICpcblx0ICogQHBhcmFtIHsuLi5PYmplY3QzRH0gYXJndW1lbnRzIC0gQW4gYXJiaXRyYXJ5IG51bWJlciBvZiAzRCBvYmplY3RzIHRoYXQgc2hhcmUgdGhlIHNhbWUgYW5pbWF0aW9uIHN0YXRlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQW5pbWF0aW9uT2JqZWN0R3JvdXAgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIFVVSUQgb2YgdGhlIDNEIG9iamVjdC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0dGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKCk7XG5cblx0XHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSAwOyAvLyB0aHJlc2hvbGRcblx0XHQvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGVcblxuXHRcdGNvbnN0IGluZGljZXMgPSB7fTtcblx0XHR0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRpbmRpY2VzWyBhcmd1bWVudHNbIGkgXS51dWlkIF0gPSBpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGF0aHMgPSBbXTsgLy8gaW5zaWRlOiBzdHJpbmdcblx0XHR0aGlzLl9wYXJzZWRQYXRocyA9IFtdOyAvLyBpbnNpZGU6IHsgd2UgZG9uJ3QgY2FyZSwgaGVyZSB9XG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gaW5zaWRlOiBBcnJheTwgUHJvcGVydHlCaW5kaW5nID5cblx0XHR0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGggPSB7fTsgLy8gaW5zaWRlOiBpbmRpY2VzIGluIHRoZXNlIGFycmF5c1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dGhpcy5zdGF0cyA9IHtcblxuXHRcdFx0b2JqZWN0czoge1xuXHRcdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX29iamVjdHMubGVuZ3RoO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRcdHJldHVybiB0aGlzLnRvdGFsIC0gc2NvcGUubkNhY2hlZE9iamVjdHNfO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRnZXQgYmluZGluZ3NQZXJPYmplY3QoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGFuIGFyYml0cmFyeSBudW1iZXIgb2Ygb2JqZWN0cyB0byB0aGlzIGFuaW1hdGlvbiBncm91cC5cblx0ICpcblx0ICogQHBhcmFtIHsuLi5PYmplY3QzRH0gYXJndW1lbnRzIC0gVGhlIDNEIG9iamVjdHMgdG8gYWRkLlxuXHQgKi9cblx0YWRkKCkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcblx0XHRcdHBhdGhzID0gdGhpcy5fcGF0aHMsXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGxldCBrbm93bk9iamVjdCA9IHVuZGVmaW5lZCxcblx0XHRcdG5PYmplY3RzID0gb2JqZWN0cy5sZW5ndGgsXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZDtcblx0XHRcdGxldCBpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIHVua25vd24gb2JqZWN0IC0+IGFkZCBpdCB0byB0aGUgQUNUSVZFIHJlZ2lvblxuXG5cdFx0XHRcdGluZGV4ID0gbk9iamVjdHMgKys7XG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRvYmplY3RzLnB1c2goIG9iamVjdCApO1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRiaW5kaW5nc1sgaiBdLnB1c2goIG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBpbmRleCA8IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdGtub3duT2JqZWN0ID0gb2JqZWN0c1sgaW5kZXggXTtcblxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCB0byB0aGUgQUNUSVZFIHJlZ2lvblxuXG5cdFx0XHRcdGNvbnN0IGZpcnN0QWN0aXZlSW5kZXggPSAtLSBuQ2FjaGVkT2JqZWN0cyxcblx0XHRcdFx0XHRsYXN0Q2FjaGVkT2JqZWN0ID0gb2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RDYWNoZWRPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0O1xuXG5cdFx0XHRcdGluZGljZXNCeVVVSURbIHV1aWQgXSA9IGZpcnN0QWN0aXZlSW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSA9IG9iamVjdDtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXTtcblxuXHRcdFx0XHRcdGxldCBiaW5kaW5nID0gYmluZGluZ3NGb3JQYXRoWyBpbmRleCBdO1xuXG5cdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpbmRleCBdID0gbGFzdENhY2hlZDtcblxuXHRcdFx0XHRcdGlmICggYmluZGluZyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHQvLyBzaW5jZSB3ZSBkbyBub3QgYm90aGVyIHRvIGNyZWF0ZSBuZXcgYmluZGluZ3Ncblx0XHRcdFx0XHRcdC8vIGZvciBvYmplY3RzIHRoYXQgYXJlIGNhY2hlZCwgdGhlIGJpbmRpbmcgbWF5XG5cdFx0XHRcdFx0XHQvLyBvciBtYXkgbm90IGV4aXN0XG5cblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgZmlyc3RBY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdHNbIGluZGV4IF0gIT09IGtub3duT2JqZWN0ICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5BbmltYXRpb25PYmplY3RHcm91cDogRGlmZmVyZW50IG9iamVjdHMgd2l0aCB0aGUgc2FtZSBVVUlEICcgK1xuXHRcdFx0XHRcdCdkZXRlY3RlZC4gQ2xlYW4gdGhlIGNhY2hlcyBvciByZWNyZWF0ZSB5b3VyIGluZnJhc3RydWN0dXJlIHdoZW4gcmVsb2FkaW5nIHNjZW5lcy4nICk7XG5cblx0XHRcdH0gLy8gZWxzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgd2hlcmUgd2Ugd2FudCBpdCB0byBiZVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIG9iamVjdHMgdG8gdGhpcyBhbmltYXRpb24gZ3JvdXBcblx0ICpcblx0ICogQHBhcmFtIHsuLi5PYmplY3QzRH0gYXJndW1lbnRzIC0gVGhlIDNEIG9iamVjdHMgdG8gcmVtb3ZlLlxuXHQgKi9cblx0cmVtb3ZlKCkge1xuXG5cdFx0Y29uc3Qgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRsZXQgbkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPj0gbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgaW50byB0aGUgQ0FDSEVEIHJlZ2lvblxuXG5cdFx0XHRcdGNvbnN0IGxhc3RDYWNoZWRJbmRleCA9IG5DYWNoZWRPYmplY3RzICsrLFxuXHRcdFx0XHRcdGZpcnN0QWN0aXZlT2JqZWN0ID0gb2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZU9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGxhc3RDYWNoZWRJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0Zmlyc3RBY3RpdmUgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdLFxuXHRcdFx0XHRcdFx0YmluZGluZyA9IGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXTtcblxuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGZpcnN0QWN0aXZlO1xuXHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgbGFzdENhY2hlZEluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVhbGxvY2F0ZXMgYWxsIG1lbW9yeSByZXNvdXJjZXMgZm9yIHRoZSBwYXNzZWQgM0Qgb2JqZWN0cyBvZiB0aGlzIGFuaW1hdGlvbiBncm91cC5cblx0ICpcblx0ICogQHBhcmFtIHsuLi5PYmplY3QzRH0gYXJndW1lbnRzIC0gVGhlIDNEIG9iamVjdHMgdG8gdW5jYWNoZS5cblx0ICovXG5cdHVuY2FjaGUoKSB7XG5cblx0XHRjb25zdCBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGxldCBuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aDtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IG9iamVjdCA9IGFyZ3VtZW50c1sgaSBdLFxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXG5cdFx0XHRcdGluZGV4ID0gaW5kaWNlc0J5VVVJRFsgdXVpZCBdO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZGVsZXRlIGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgbkNhY2hlZE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cblxuXHRcdFx0XHRcdGNvbnN0IGZpcnN0QWN0aXZlSW5kZXggPSAtLSBuQ2FjaGVkT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0sXG5cdFx0XHRcdFx0XHRsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdC8vIGxhc3QgY2FjaGVkIG9iamVjdCB0YWtlcyB0aGlzIG9iamVjdCdzIHBsYWNlXG5cdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0XHRvYmplY3RzWyBpbmRleCBdID0gbGFzdENhY2hlZE9iamVjdDtcblxuXHRcdFx0XHRcdC8vIGxhc3Qgb2JqZWN0IGdvZXMgdG8gdGhlIGFjdGl2YXRlZCBzbG90IGFuZCBwb3Bcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGZpcnN0QWN0aXZlSW5kZXg7XG5cdFx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gbGFzdE9iamVjdDtcblx0XHRcdFx0XHRvYmplY3RzLnBvcCgpO1xuXG5cdFx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0sXG5cdFx0XHRcdFx0XHRcdGxhc3QgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0O1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgYWN0aXZlLCBqdXN0IHN3YXAgd2l0aCB0aGUgbGFzdCBhbmQgcG9wXG5cblx0XHRcdFx0XHRjb25zdCBsYXN0SW5kZXggPSAtLSBuT2JqZWN0cyxcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzWyBsYXN0SW5kZXggXTtcblxuXHRcdFx0XHRcdGlmICggbGFzdEluZGV4ID4gMCApIHtcblxuXHRcdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdE9iamVjdC51dWlkIF0gPSBpbmRleDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzWyBqIF07XG5cblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaW5kZXggXSA9IGJpbmRpbmdzRm9yUGF0aFsgbGFzdEluZGV4IF07XG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGgucG9wKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSAvLyBjYWNoZWQgb3IgYWN0aXZlXG5cblx0XHRcdH0gLy8gaWYgb2JqZWN0IGlzIGtub3duXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fVxuXG5cdC8vIEludGVybmFsIGludGVyZmFjZSB1c2VkIGJ5IGJlZnJpZW5kZWQgUHJvcGVydHlCaW5kaW5nLkNvbXBvc2l0ZTpcblxuXHRzdWJzY3JpYmVfKCBwYXRoLCBwYXJzZWRQYXRoICkge1xuXG5cdFx0Ly8gcmV0dXJucyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHBhdGggdGhhdCBpcyBjaGFuZ2VkXG5cdFx0Ly8gYWNjb3JkaW5nIHRvIHRoZSBjb250YWluZWQgb2JqZWN0cyBpbiB0aGUgZ3JvdXBcblxuXHRcdGNvbnN0IGluZGljZXNCeVBhdGggPSB0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGg7XG5cdFx0bGV0IGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSByZXR1cm4gYmluZGluZ3NbIGluZGV4IF07XG5cblx0XHRjb25zdCBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nc0ZvclBhdGggPSBuZXcgQXJyYXkoIG5PYmplY3RzICk7XG5cblx0XHRpbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGluZGljZXNCeVBhdGhbIHBhdGggXSA9IGluZGV4O1xuXG5cdFx0cGF0aHMucHVzaCggcGF0aCApO1xuXHRcdHBhcnNlZFBhdGhzLnB1c2goIHBhcnNlZFBhdGggKTtcblx0XHRiaW5kaW5ncy5wdXNoKCBiaW5kaW5nc0ZvclBhdGggKTtcblxuXHRcdGZvciAoIGxldCBpID0gbkNhY2hlZE9iamVjdHMsIG4gPSBvYmplY3RzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3Qgb2JqZWN0ID0gb2JqZWN0c1sgaSBdO1xuXHRcdFx0YmluZGluZ3NGb3JQYXRoWyBpIF0gPSBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBiaW5kaW5nc0ZvclBhdGg7XG5cblx0fVxuXG5cdHVuc3Vic2NyaWJlXyggcGF0aCApIHtcblxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcblx0XHQvLyB1cGRhdGUgdGhlIGFycmF5IHByZXZpb3VzbHkgb2J0YWluZWQgd2l0aCAnc3Vic2NyaWJlXydcblxuXHRcdGNvbnN0IGluZGljZXNCeVBhdGggPSB0aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGgsXG5cdFx0XHRpbmRleCA9IGluZGljZXNCeVBhdGhbIHBhdGggXTtcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgcGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdFx0bGFzdEJpbmRpbmdzSW5kZXggPSBiaW5kaW5ncy5sZW5ndGggLSAxLFxuXHRcdFx0XHRsYXN0QmluZGluZ3MgPSBiaW5kaW5nc1sgbGFzdEJpbmRpbmdzSW5kZXggXSxcblx0XHRcdFx0bGFzdEJpbmRpbmdzUGF0aCA9IHBhdGhbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cblx0XHRcdGluZGljZXNCeVBhdGhbIGxhc3RCaW5kaW5nc1BhdGggXSA9IGluZGV4O1xuXG5cdFx0XHRiaW5kaW5nc1sgaW5kZXggXSA9IGxhc3RCaW5kaW5ncztcblx0XHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0XHRwYXJzZWRQYXRoc1sgaW5kZXggXSA9IHBhcnNlZFBhdGhzWyBsYXN0QmluZGluZ3NJbmRleCBdO1xuXHRcdFx0cGFyc2VkUGF0aHMucG9wKCk7XG5cblx0XHRcdHBhdGhzWyBpbmRleCBdID0gcGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXRocy5wb3AoKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiBgQW5pbWF0aW9uQWN0aW9uYCBzY2hlZHVsZXMgdGhlIHBsYXliYWNrIG9mIGFuIGFuaW1hdGlvbiB3aGljaCBpc1xuICogc3RvcmVkIGluIHtAbGluayBBbmltYXRpb25DbGlwfS5cbiAqL1xuY2xhc3MgQW5pbWF0aW9uQWN0aW9uIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FuaW1hdGlvbk1peGVyfSBtaXhlciAtIFRoZSBtaXhlciB0aGF0IGlzIGNvbnRyb2xsZWQgYnkgdGhpcyBhY3Rpb24uXG5cdCAqIEBwYXJhbSB7QW5pbWF0aW9uQ2xpcH0gY2xpcCAtIFRoZSBhbmltYXRpb24gY2xpcCB0aGF0IGhvbGRzIHRoZSBhY3R1YWwga2V5ZnJhbWVzLlxuXHQgKiBAcGFyYW0gez9PYmplY3QzRH0gW2xvY2FsUm9vdD1udWxsXSAtIFRoZSByb290IG9iamVjdCBvbiB3aGljaCB0aGlzIGFjdGlvbiBpcyBwZXJmb3JtZWQuXG5cdCAqIEBwYXJhbSB7KE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZXxBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSl9IFtibGVuZE1vZGVdIC0gVGhlIGJsZW5kIG1vZGUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggbWl4ZXIsIGNsaXAsIGxvY2FsUm9vdCA9IG51bGwsIGJsZW5kTW9kZSA9IGNsaXAuYmxlbmRNb2RlICkge1xuXG5cdFx0dGhpcy5fbWl4ZXIgPSBtaXhlcjtcblx0XHR0aGlzLl9jbGlwID0gY2xpcDtcblx0XHR0aGlzLl9sb2NhbFJvb3QgPSBsb2NhbFJvb3Q7XG5cblx0XHQvKipcblx0XHQgKiBEZWZpbmVzIGhvdyB0aGUgYW5pbWF0aW9uIGlzIGJsZW5kZWQvY29tYmluZWQgd2hlbiB0d28gb3IgbW9yZSBhbmltYXRpb25zXG5cdFx0ICogYXJlIHNpbXVsdGFuZW91c2x5IHBsYXllZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHsoTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlfEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlKX1cblx0XHQgKi9cblx0XHR0aGlzLmJsZW5kTW9kZSA9IGJsZW5kTW9kZTtcblxuXHRcdGNvbnN0IHRyYWNrcyA9IGNsaXAudHJhY2tzLFxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXG5cdFx0XHRpbnRlcnBvbGFudHMgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHRcdGNvbnN0IGludGVycG9sYW50U2V0dGluZ3MgPSB7XG5cdFx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRcdGVuZGluZ0VuZDogWmVyb0N1cnZhdHVyZUVuZGluZ1xuXHRcdH07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5UcmFja3M7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IGludGVycG9sYW50ID0gdHJhY2tzWyBpIF0uY3JlYXRlSW50ZXJwb2xhbnQoIG51bGwgKTtcblx0XHRcdGludGVycG9sYW50c1sgaSBdID0gaW50ZXJwb2xhbnQ7XG5cdFx0XHRpbnRlcnBvbGFudC5zZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5ncztcblxuXHRcdHRoaXMuX2ludGVycG9sYW50cyA9IGludGVycG9sYW50czsgLy8gYm91bmQgYnkgdGhlIG1peGVyXG5cblx0XHQvLyBpbnNpZGU6IFByb3BlcnR5TWl4ZXIgKG1hbmFnZWQgYnkgdGhlIG1peGVyKVxuXHRcdHRoaXMuX3Byb3BlcnR5QmluZGluZ3MgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHRcdHRoaXMuX2NhY2hlSW5kZXggPSBudWxsOyAvLyBmb3IgdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdFx0dGhpcy5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7IC8vIGZvciB0aGUgbWVtb3J5IG1hbmFnZXJcblxuXHRcdHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gbnVsbDtcblx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbG9vcCBtb2RlLCBzZXQgdmlhIHtAbGluayBBbmltYXRpb25BY3Rpb24jc2V0TG9vcH0uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KExvb3BSZXBlYXR8TG9vcE9uY2V8TG9vcFBpbmdQb25nKX1cblx0XHQgKiBAZGVmYXVsdCBMb29wUmVwZWF0XG5cdFx0ICovXG5cdFx0dGhpcy5sb29wID0gTG9vcFJlcGVhdDtcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtMTtcblxuXHRcdC8vIGdsb2JhbCBtaXhlciB0aW1lIHdoZW4gdGhlIGFjdGlvbiBpcyB0byBiZSBzdGFydGVkXG5cdFx0Ly8gaXQncyBzZXQgYmFjayB0byAnbnVsbCcgdXBvbiBzdGFydCBvZiB0aGUgYWN0aW9uXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsb2NhbCB0aW1lIG9mIHRoaXMgYWN0aW9uIChpbiBzZWNvbmRzLCBzdGFydGluZyB3aXRoIGAwYCkuXG5cdFx0ICpcblx0XHQgKiBUaGUgdmFsdWUgZ2V0cyBjbGFtcGVkIG9yIHdyYXBwZWQgdG8gYFswLGNsaXAuZHVyYXRpb25dYCAoYWNjb3JkaW5nIHRvIHRoZVxuXHRcdCAqIGxvb3Agc3RhdGUpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBJbmZpbml0eVxuXHRcdCAqL1xuXHRcdHRoaXMudGltZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBTY2FsaW5nIGZhY3RvciBmb3IgdGhlIHtAbGluayBBbmltYXRpb25BY3Rpb24jdGltZX0uIEEgdmFsdWUgb2YgYDBgIGNhdXNlcyB0aGVcblx0XHQgKiBhbmltYXRpb24gdG8gcGF1c2UuIE5lZ2F0aXZlIHZhbHVlcyBjYXVzZSB0aGUgYW5pbWF0aW9uIHRvIHBsYXkgYmFja3dhcmRzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy50aW1lU2NhbGUgPSAxO1xuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGVncmVlIG9mIGluZmx1ZW5jZSBvZiB0aGlzIGFjdGlvbiAoaW4gdGhlIGludGVydmFsIGBbMCwgMV1gKS4gVmFsdWVzXG5cdFx0ICogYmV0d2VlbiBgMGAgKG5vIGltcGFjdCkgYW5kIGAxYCAoZnVsbCBpbXBhY3QpIGNhbiBiZSB1c2VkIHRvIGJsZW5kIGJldHdlZW5cblx0XHQgKiBzZXZlcmFsIGFjdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLndlaWdodCA9IDE7XG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBudW1iZXIgb2YgcmVwZXRpdGlvbnMgb2YgdGhlIHBlcmZvcm1lZCBjbGlwIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGlzIGFjdGlvbi5cblx0XHQgKiBDYW4gYmUgc2V0IHZpYSB7QGxpbmsgQW5pbWF0aW9uQWN0aW9uI3NldExvb3B9LlxuXHRcdCAqXG5cdFx0ICogU2V0dGluZyB0aGlzIG51bWJlciBoYXMgbm8gZWZmZWN0IGlmIHtAbGluayBBbmltYXRpb25BY3Rpb24jbG9vcH0gaXMgc2V0IHRvXG5cdFx0ICogYFRIUkVFOkxvb3BPbmNlYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLnJlcGV0aXRpb25zID0gSW5maW5pdHk7XG5cblx0XHQvKipcblx0XHQgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgcGxheWJhY2sgb2YgdGhlIGFjdGlvbiBpcyBwYXVzZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMucGF1c2VkID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBJZiBzZXQgdG8gYGZhbHNlYCwgdGhlIGFjdGlvbiBpcyBkaXNhYmxlZCBzbyBpdCBoYXMgbm8gaW1wYWN0LlxuXHRcdCAqXG5cdFx0ICogV2hlbiB0aGUgYWN0aW9uIGlzIHJlLWVuYWJsZWQsIHRoZSBhbmltYXRpb24gY29udGludWVzIGZyb20gaXRzIGN1cnJlbnRcblx0XHQgKiB0aW1lIChzZXR0aW5nIGBlbmFibGVkYCB0byBgZmFsc2VgIGRvZXNuJ3QgcmVzZXQgdGhlIGFjdGlvbikuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIElmIHNldCB0byB0cnVlIHRoZSBhbmltYXRpb24gd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHBhdXNlZCBvbiBpdHMgbGFzdCBmcmFtZS5cblx0XHQgKlxuXHRcdCAqIElmIHNldCB0byBmYWxzZSwge0BsaW5rIEFuaW1hdGlvbkFjdGlvbiNlbmFibGVkfSB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc3dpdGNoZWRcblx0XHQgKiB0byBgZmFsc2VgIHdoZW4gdGhlIGxhc3QgbG9vcCBvZiB0aGUgYWN0aW9uIGhhcyBmaW5pc2hlZCwgc28gdGhhdCB0aGlzIGFjdGlvbiBoYXNcblx0XHQgKiBubyBmdXJ0aGVyIGltcGFjdC5cblx0XHQgKlxuXHRcdCAqIE5vdGU6IFRoaXMgbWVtYmVyIGhhcyBubyBpbXBhY3QgaWYgdGhlIGFjdGlvbiBpcyBpbnRlcnJ1cHRlZCAoaXRcblx0XHQgKiBoYXMgb25seSBhbiBlZmZlY3QgaWYgaXRzIGxhc3QgbG9vcCBoYXMgcmVhbGx5IGZpbmlzaGVkKS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy5jbGFtcFdoZW5GaW5pc2hlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogRW5hYmxlcyBzbW9vdGggaW50ZXJwb2xhdGlvbiB3aXRob3V0IHNlcGFyYXRlIGNsaXBzIGZvciBzdGFydCwgbG9vcCBhbmQgZW5kLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuemVyb1Nsb3BlQXRTdGFydCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGVzIHNtb290aCBpbnRlcnBvbGF0aW9uIHdpdGhvdXQgc2VwYXJhdGUgY2xpcHMgZm9yIHN0YXJ0LCBsb29wIGFuZCBlbmQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy56ZXJvU2xvcGVBdEVuZCA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydHMgdGhlIHBsYXliYWNrIG9mIHRoZSBhbmltYXRpb24uXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkFjdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKi9cblx0cGxheSgpIHtcblxuXHRcdHRoaXMuX21peGVyLl9hY3RpdmF0ZUFjdGlvbiggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdG9wcyB0aGUgcGxheWJhY2sgb2YgdGhlIGFuaW1hdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRzdG9wKCkge1xuXG5cdFx0dGhpcy5fbWl4ZXIuX2RlYWN0aXZhdGVBY3Rpb24oIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzLnJlc2V0KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIHBsYXliYWNrIG9mIHRoZSBhbmltYXRpb24uXG5cdCAqXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkFjdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKi9cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHR0aGlzLnRpbWUgPSAwOyAvLyByZXN0YXJ0IGNsaXBcblx0XHR0aGlzLl9sb29wQ291bnQgPSAtMTsvLyBmb3JnZXQgcHJldmlvdXMgbG9vcHNcblx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsOy8vIGZvcmdldCBzY2hlZHVsaW5nXG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCkuc3RvcFdhcnBpbmcoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBhbmltYXRpb24gaXMgcnVubmluZy5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYW5pbWF0aW9uIGlzIHJ1bm5pbmcgb3Igbm90LlxuXHQgKi9cblx0aXNSdW5uaW5nKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZW5hYmxlZCAmJiAhIHRoaXMucGF1c2VkICYmIHRoaXMudGltZVNjYWxlICE9PSAwICYmXG5cdFx0XHR0aGlzLl9zdGFydFRpbWUgPT09IG51bGwgJiYgdGhpcy5fbWl4ZXIuX2lzQWN0aXZlQWN0aW9uKCB0aGlzICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCB3aGVuIHtAbGluayBBbmltYXRpb25BY3Rpb24jcGxheX0gaGFzIGJlZW4gY2FsbGVkLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSBhbmltYXRpb24gaXMgc2NoZWR1bGVkIG9yIG5vdC5cblx0ICovXG5cdGlzU2NoZWR1bGVkKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbiggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgdGltZSB3aGVuIHRoZSBhbmltYXRpb24gc2hvdWxkIHN0YXJ0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGltZSAtIFRoZSBzdGFydCB0aW1lIGluIHNlY29uZHMuXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkFjdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKi9cblx0c3RhcnRBdCggdGltZSApIHtcblxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbmZpZ3VyZXMgdGhlIGxvb3Agc2V0dGluZ3MgZm9yIHRoaXMgYWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0geyhMb29wUmVwZWF0fExvb3BPbmNlfExvb3BQaW5nUG9uZyl9IG1vZGUgLSBUaGUgbG9vcCBtb2RlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmVwZXRpdGlvbnMgLSBUaGUgbnVtYmVyIG9mIHJlcGV0aXRpb25zLlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25BY3Rpb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgYW5pbWF0aW9uIGFjdGlvbi5cblx0ICovXG5cdHNldExvb3AoIG1vZGUsIHJlcGV0aXRpb25zICkge1xuXG5cdFx0dGhpcy5sb29wID0gbW9kZTtcblx0XHR0aGlzLnJlcGV0aXRpb25zID0gcmVwZXRpdGlvbnM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgdGhpcyBhY3Rpb24uXG5cdCAqXG5cdCAqIEFuIGFjdGlvbiBoYXMgbm8gZWZmZWN0IGFuZCB0aHVzIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgemVybyB3aGVuIHRoZVxuXHQgKiBhY3Rpb24gaXMgZGlzYWJsZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBUaGUgd2VpZ2h0IHRvIHNldC5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRzZXRFZmZlY3RpdmVXZWlnaHQoIHdlaWdodCApIHtcblxuXHRcdHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHRoaXMuZW5hYmxlZCA/IHdlaWdodCA6IDA7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBlZmZlY3RpdmUgd2VpZ2h0IG9mIHRoaXMgYWN0aW9uLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlZmZlY3RpdmUgd2VpZ2h0LlxuXHQgKi9cblx0Z2V0RWZmZWN0aXZlV2VpZ2h0KCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZhZGVzIHRoZSBhbmltYXRpb24gaW4gYnkgaW5jcmVhc2luZyBpdHMgd2VpZ2h0IGdyYWR1YWxseSBmcm9tIGAwYCB0byBgMWAsXG5cdCAqIHdpdGhpbiB0aGUgcGFzc2VkIHRpbWUgaW50ZXJ2YWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgZmFkZS5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRmYWRlSW4oIGR1cmF0aW9uICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKCBkdXJhdGlvbiwgMCwgMSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmFkZXMgdGhlIGFuaW1hdGlvbiBvdXQgYnkgZGVjcmVhc2luZyBpdHMgd2VpZ2h0IGdyYWR1YWxseSBmcm9tIGAxYCB0byBgMGAsXG5cdCAqIHdpdGhpbiB0aGUgcGFzc2VkIHRpbWUgaW50ZXJ2YWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgZmFkZS5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRmYWRlT3V0KCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDEsIDAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhdXNlcyB0aGlzIGFjdGlvbiB0byBmYWRlIGluIGFuZCB0aGUgZ2l2ZW4gYWN0aW9uIHRvIGZhZGUgb3V0LFxuXHQgKiB3aXRoaW4gdGhlIHBhc3NlZCB0aW1lIGludGVydmFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FuaW1hdGlvbkFjdGlvbn0gZmFkZU91dEFjdGlvbiAtIFRoZSBhbmltYXRpb24gYWN0aW9uIHRvIGZhZGUgb3V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIGZhZGUuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3dhcnA9ZmFsc2VdIC0gV2hldGhlciB3YXJwaW5nIHNob3VsZCBiZSB1c2VkIG9yIG5vdC5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRjcm9zc0ZhZGVGcm9tKCBmYWRlT3V0QWN0aW9uLCBkdXJhdGlvbiwgd2FycCA9IGZhbHNlICkge1xuXG5cdFx0ZmFkZU91dEFjdGlvbi5mYWRlT3V0KCBkdXJhdGlvbiApO1xuXHRcdHRoaXMuZmFkZUluKCBkdXJhdGlvbiApO1xuXG5cdFx0aWYgKCB3YXJwID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBmYWRlSW5EdXJhdGlvbiA9IHRoaXMuX2NsaXAuZHVyYXRpb24sXG5cdFx0XHRcdGZhZGVPdXREdXJhdGlvbiA9IGZhZGVPdXRBY3Rpb24uX2NsaXAuZHVyYXRpb24sXG5cblx0XHRcdFx0c3RhcnRFbmRSYXRpbyA9IGZhZGVPdXREdXJhdGlvbiAvIGZhZGVJbkR1cmF0aW9uLFxuXHRcdFx0XHRlbmRTdGFydFJhdGlvID0gZmFkZUluRHVyYXRpb24gLyBmYWRlT3V0RHVyYXRpb247XG5cblx0XHRcdGZhZGVPdXRBY3Rpb24ud2FycCggMS4wLCBzdGFydEVuZFJhdGlvLCBkdXJhdGlvbiApO1xuXHRcdFx0dGhpcy53YXJwKCBlbmRTdGFydFJhdGlvLCAxLjAsIGR1cmF0aW9uICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENhdXNlcyB0aGlzIGFjdGlvbiB0byBmYWRlIG91dCBhbmQgdGhlIGdpdmVuIGFjdGlvbiB0byBmYWRlIGluLFxuXHQgKiB3aXRoaW4gdGhlIHBhc3NlZCB0aW1lIGludGVydmFsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FuaW1hdGlvbkFjdGlvbn0gZmFkZUluQWN0aW9uIC0gVGhlIGFuaW1hdGlvbiBhY3Rpb24gdG8gZmFkZSBpbi5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGR1cmF0aW9uIG9mIHRoZSBmYWRlLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFt3YXJwPWZhbHNlXSAtIFdoZXRoZXIgd2FycGluZyBzaG91bGQgYmUgdXNlZCBvciBub3QuXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkFjdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKi9cblx0Y3Jvc3NGYWRlVG8oIGZhZGVJbkFjdGlvbiwgZHVyYXRpb24sIHdhcnAgPSBmYWxzZSApIHtcblxuXHRcdHJldHVybiBmYWRlSW5BY3Rpb24uY3Jvc3NGYWRlRnJvbSggdGhpcywgZHVyYXRpb24sIHdhcnAgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0b3BzIGFueSBmYWRpbmcgd2hpY2ggaXMgYXBwbGllZCB0byB0aGlzIGFjdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRzdG9wRmFkaW5nKCkge1xuXG5cdFx0Y29uc3Qgd2VpZ2h0SW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcblxuXHRcdGlmICggd2VpZ2h0SW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gbnVsbDtcblx0XHRcdHRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCggd2VpZ2h0SW50ZXJwb2xhbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZWZmZWN0aXZlIHRpbWUgc2NhbGUgb2YgdGhpcyBhY3Rpb24uXG5cdCAqXG5cdCAqIEFuIGFjdGlvbiBoYXMgbm8gZWZmZWN0IGFuZCB0aHVzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8gd2hlbiB0aGVcblx0ICogYWN0aW9uIGlzIHBhdXNlZC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZSAtIFRoZSB0aW1lIHNjYWxlIHRvIHNldC5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRzZXRFZmZlY3RpdmVUaW1lU2NhbGUoIHRpbWVTY2FsZSApIHtcblxuXHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRoaXMucGF1c2VkID8gMCA6IHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBlZmZlY3RpdmUgdGltZSBzY2FsZSBvZiB0aGlzIGFjdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgZWZmZWN0aXZlIHRpbWUgc2NhbGUuXG5cdCAqL1xuXHRnZXRFZmZlY3RpdmVUaW1lU2NhbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZHVyYXRpb24gZm9yIGEgc2luZ2xlIGxvb3Agb2YgdGhpcyBhY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkFjdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKi9cblx0c2V0RHVyYXRpb24oIGR1cmF0aW9uICkge1xuXG5cdFx0dGhpcy50aW1lU2NhbGUgPSB0aGlzLl9jbGlwLmR1cmF0aW9uIC8gZHVyYXRpb247XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH1cblxuXHQvKipcblx0ICogU3luY2hyb25pemVzIHRoaXMgYWN0aW9uIHdpdGggdGhlIHBhc3NlZCBvdGhlciBhY3Rpb24uXG5cdCAqXG5cdCAqIEBwYXJhbSB7QW5pbWF0aW9uQWN0aW9ufSBhY3Rpb24gLSBUaGUgYWN0aW9uIHRvIHN5bmMgd2l0aC5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRzeW5jV2l0aCggYWN0aW9uICkge1xuXG5cdFx0dGhpcy50aW1lID0gYWN0aW9uLnRpbWU7XG5cdFx0dGhpcy50aW1lU2NhbGUgPSBhY3Rpb24udGltZVNjYWxlO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlY2VsZXJhdGVzIHRoaXMgYW5pbWF0aW9uJ3Mgc3BlZWQgdG8gYDBgIHdpdGhpbiB0aGUgcGFzc2VkIHRpbWUgaW50ZXJ2YWwuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbi5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uQWN0aW9ufSBBIHJlZmVyZW5jZSB0byB0aGlzIGFuaW1hdGlvbiBhY3Rpb24uXG5cdCAqL1xuXHRoYWx0KCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENoYW5nZXMgdGhlIHBsYXliYWNrIHNwZWVkLCB3aXRoaW4gdGhlIHBhc3NlZCB0aW1lIGludGVydmFsLCBieSBtb2RpZnlpbmdcblx0ICoge0BsaW5rIEFuaW1hdGlvbkFjdGlvbiN0aW1lU2NhbGV9IGdyYWR1YWxseSBmcm9tIGBzdGFydFRpbWVTY2FsZWAgdG9cblx0ICogYGVuZFRpbWVTY2FsZWAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFRpbWVTY2FsZSAtIFRoZSBzdGFydCB0aW1lIHNjYWxlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZW5kVGltZVNjYWxlIC0gVGhlIGVuZCB0aW1lIHNjYWxlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBUaGUgZHVyYXRpb24uXG5cdCAqIEByZXR1cm4ge0FuaW1hdGlvbkFjdGlvbn0gQSByZWZlcmVuY2UgdG8gdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKi9cblx0d2FycCggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLFxuXHRcdFx0bm93ID0gbWl4ZXIudGltZSxcblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0bGV0IGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIGludGVycG9sYW50ID09PSBudWxsICkge1xuXG5cdFx0XHRpbnRlcnBvbGFudCA9IG1peGVyLl9sZW5kQ29udHJvbEludGVycG9sYW50KCk7XG5cdFx0XHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IGludGVycG9sYW50O1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XG5cblx0XHR0aW1lc1sgMCBdID0gbm93O1xuXHRcdHRpbWVzWyAxIF0gPSBub3cgKyBkdXJhdGlvbjtcblxuXHRcdHZhbHVlc1sgMCBdID0gc3RhcnRUaW1lU2NhbGUgLyB0aW1lU2NhbGU7XG5cdFx0dmFsdWVzWyAxIF0gPSBlbmRUaW1lU2NhbGUgLyB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFN0b3BzIGFueSBzY2hlZHVsZWQgd2FycGluZyB3aGljaCBpcyBhcHBsaWVkIHRvIHRoaXMgYWN0aW9uLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25BY3Rpb259IEEgcmVmZXJlbmNlIHRvIHRoaXMgYW5pbWF0aW9uIGFjdGlvbi5cblx0ICovXG5cdHN0b3BXYXJwaW5nKCkge1xuXG5cdFx0Y29uc3QgdGltZVNjYWxlSW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtcblxuXHRcdGlmICggdGltZVNjYWxlSW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gbnVsbDtcblx0XHRcdHRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCggdGltZVNjYWxlSW50ZXJwb2xhbnQgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgYW5pbWF0aW9uIG1peGVyIG9mIHRoaXMgYW5pbWF0aW9uIGFjdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7QW5pbWF0aW9uTWl4ZXJ9IFRoZSBhbmltYXRpb24gbWl4ZXIuXG5cdCAqL1xuXHRnZXRNaXhlcigpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFuaW1hdGlvbiBjbGlwIG9mIHRoaXMgYW5pbWF0aW9uIGFjdGlvbi5cblx0ICpcblx0ICogQHJldHVybiB7QW5pbWF0aW9uQ2xpcH0gVGhlIGFuaW1hdGlvbiBjbGlwLlxuXHQgKi9cblx0Z2V0Q2xpcCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcm9vdCBvYmplY3Qgb2YgdGhpcyBhbmltYXRpb24gYWN0aW9uLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtPYmplY3QzRH0gVGhlIHJvb3Qgb2JqZWN0LlxuXHQgKi9cblx0Z2V0Um9vdCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9sb2NhbFJvb3QgfHwgdGhpcy5fbWl4ZXIuX3Jvb3Q7XG5cblx0fVxuXG5cdC8vIEludGVybmFcblxuXHRfdXBkYXRlKCB0aW1lLCBkZWx0YVRpbWUsIHRpbWVEaXJlY3Rpb24sIGFjY3VJbmRleCApIHtcblxuXHRcdC8vIGNhbGxlZCBieSB0aGUgbWl4ZXJcblxuXHRcdGlmICggISB0aGlzLmVuYWJsZWQgKSB7XG5cblx0XHRcdC8vIGNhbGwgLl91cGRhdGVXZWlnaHQoKSB0byB1cGRhdGUgLl9lZmZlY3RpdmVXZWlnaHRcblxuXHRcdFx0dGhpcy5fdXBkYXRlV2VpZ2h0KCB0aW1lICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRjb25zdCBzdGFydFRpbWUgPSB0aGlzLl9zdGFydFRpbWU7XG5cblx0XHRpZiAoIHN0YXJ0VGltZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIHNjaGVkdWxlZCBzdGFydCBvZiBhY3Rpb25cblxuXHRcdFx0Y29uc3QgdGltZVJ1bm5pbmcgPSAoIHRpbWUgLSBzdGFydFRpbWUgKSAqIHRpbWVEaXJlY3Rpb247XG5cdFx0XHRpZiAoIHRpbWVSdW5uaW5nIDwgMCB8fCB0aW1lRGlyZWN0aW9uID09PSAwICkge1xuXG5cdFx0XHRcdGRlbHRhVGltZSA9IDA7XG5cblx0XHRcdH0gZWxzZSB7XG5cblxuXHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgPSBudWxsOyAvLyB1bnNjaGVkdWxlXG5cdFx0XHRcdGRlbHRhVGltZSA9IHRpbWVEaXJlY3Rpb24gKiB0aW1lUnVubmluZztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gYXBwbHkgdGltZSBzY2FsZSBhbmQgYWR2YW5jZSB0aW1lXG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy5fdXBkYXRlVGltZVNjYWxlKCB0aW1lICk7XG5cdFx0Y29uc3QgY2xpcFRpbWUgPSB0aGlzLl91cGRhdGVUaW1lKCBkZWx0YVRpbWUgKTtcblxuXHRcdC8vIG5vdGU6IF91cGRhdGVUaW1lIG1heSBkaXNhYmxlIHRoZSBhY3Rpb24gcmVzdWx0aW5nIGluXG5cdFx0Ly8gYW4gZWZmZWN0aXZlIHdlaWdodCBvZiAwXG5cblx0XHRjb25zdCB3ZWlnaHQgPSB0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblxuXHRcdGlmICggd2VpZ2h0ID4gMCApIHtcblxuXHRcdFx0Y29uc3QgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzO1xuXHRcdFx0Y29uc3QgcHJvcGVydHlNaXhlcnMgPSB0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmJsZW5kTW9kZSApIHtcblxuXHRcdFx0XHRjYXNlIEFkZGl0aXZlQW5pbWF0aW9uQmxlbmRNb2RlOlxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwLCBtID0gaW50ZXJwb2xhbnRzLmxlbmd0aDsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRcdFx0aW50ZXJwb2xhbnRzWyBqIF0uZXZhbHVhdGUoIGNsaXBUaW1lICk7XG5cdFx0XHRcdFx0XHRwcm9wZXJ0eU1peGVyc1sgaiBdLmFjY3VtdWxhdGVBZGRpdGl2ZSggd2VpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE5vcm1hbEFuaW1hdGlvbkJsZW5kTW9kZTpcblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdGZvciAoIGxldCBqID0gMCwgbSA9IGludGVycG9sYW50cy5sZW5ndGg7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdGludGVycG9sYW50c1sgaiBdLmV2YWx1YXRlKCBjbGlwVGltZSApO1xuXHRcdFx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF91cGRhdGVXZWlnaHQoIHRpbWUgKSB7XG5cblx0XHRsZXQgd2VpZ2h0ID0gMDtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLndlaWdodDtcblx0XHRcdGNvbnN0IGludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW50ZXJwb2xhbnRWYWx1ZSA9IGludGVycG9sYW50LmV2YWx1YXRlKCB0aW1lIClbIDAgXTtcblxuXHRcdFx0XHR3ZWlnaHQgKj0gaW50ZXJwb2xhbnRWYWx1ZTtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPiBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnNbIDEgXSApIHtcblxuXHRcdFx0XHRcdHRoaXMuc3RvcEZhZGluZygpO1xuXG5cdFx0XHRcdFx0aWYgKCBpbnRlcnBvbGFudFZhbHVlID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHQvLyBmYWRlZCBvdXQsIGRpc2FibGVcblx0XHRcdFx0XHRcdHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gd2VpZ2h0O1xuXHRcdHJldHVybiB3ZWlnaHQ7XG5cblx0fVxuXG5cdF91cGRhdGVUaW1lU2NhbGUoIHRpbWUgKSB7XG5cblx0XHRsZXQgdGltZVNjYWxlID0gMDtcblxuXHRcdGlmICggISB0aGlzLnBhdXNlZCApIHtcblxuXHRcdFx0dGltZVNjYWxlID0gdGhpcy50aW1lU2NhbGU7XG5cblx0XHRcdGNvbnN0IGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW50ZXJwb2xhbnRWYWx1ZSA9IGludGVycG9sYW50LmV2YWx1YXRlKCB0aW1lIClbIDAgXTtcblxuXHRcdFx0XHR0aW1lU2NhbGUgKj0gaW50ZXJwb2xhbnRWYWx1ZTtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPiBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnNbIDEgXSApIHtcblxuXHRcdFx0XHRcdHRoaXMuc3RvcFdhcnBpbmcoKTtcblxuXHRcdFx0XHRcdGlmICggdGltZVNjYWxlID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHQvLyBtb3Rpb24gaGFzIGhhbHRlZCwgcGF1c2Vcblx0XHRcdFx0XHRcdHRoaXMucGF1c2VkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHdhcnAgZG9uZSAtIGFwcGx5IGZpbmFsIHRpbWUgc2NhbGVcblx0XHRcdFx0XHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gdGltZVNjYWxlO1xuXHRcdHJldHVybiB0aW1lU2NhbGU7XG5cblx0fVxuXG5cdF91cGRhdGVUaW1lKCBkZWx0YVRpbWUgKSB7XG5cblx0XHRjb25zdCBkdXJhdGlvbiA9IHRoaXMuX2NsaXAuZHVyYXRpb247XG5cdFx0Y29uc3QgbG9vcCA9IHRoaXMubG9vcDtcblxuXHRcdGxldCB0aW1lID0gdGhpcy50aW1lICsgZGVsdGFUaW1lO1xuXHRcdGxldCBsb29wQ291bnQgPSB0aGlzLl9sb29wQ291bnQ7XG5cblx0XHRjb25zdCBwaW5nUG9uZyA9ICggbG9vcCA9PT0gTG9vcFBpbmdQb25nICk7XG5cblx0XHRpZiAoIGRlbHRhVGltZSA9PT0gMCApIHtcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0xICkgcmV0dXJuIHRpbWU7XG5cblx0XHRcdHJldHVybiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsb29wID09PSBMb29wT25jZSApIHtcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0xICkge1xuXG5cdFx0XHRcdC8vIGp1c3Qgc3RhcnRlZFxuXG5cdFx0XHRcdHRoaXMuX2xvb3BDb3VudCA9IDA7XG5cdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRydWUsIGZhbHNlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aGFuZGxlX3N0b3A6IHtcblxuXHRcdFx0XHRpZiAoIHRpbWUgPj0gZHVyYXRpb24gKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gZHVyYXRpb247XG5cblx0XHRcdFx0fSBlbHNlIGlmICggdGltZSA8IDAgKSB7XG5cblx0XHRcdFx0XHR0aW1lID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdGJyZWFrIGhhbmRsZV9zdG9wO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRoaXMuY2xhbXBXaGVuRmluaXNoZWQgKSB0aGlzLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdGRpcmVjdGlvbjogZGVsdGFUaW1lIDwgMCA/IC0xIDogMVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7IC8vIHJlcGV0aXRpdmUgUmVwZWF0IG9yIFBpbmdQb25nXG5cblx0XHRcdGlmICggbG9vcENvdW50ID09PSAtMSApIHtcblxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcblxuXHRcdFx0XHRpZiAoIGRlbHRhVGltZSA+PSAwICkge1xuXG5cdFx0XHRcdFx0bG9vcENvdW50ID0gMDtcblxuXHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRoaXMucmVwZXRpdGlvbnMgPT09IDAsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHdoZW4gbG9vcGluZyBpbiByZXZlcnNlIGRpcmVjdGlvbiwgdGhlIGluaXRpYWxcblx0XHRcdFx0XHQvLyB0cmFuc2l0aW9uIHRocm91Z2ggemVybyBjb3VudHMgYXMgYSByZXBldGl0aW9uLFxuXHRcdFx0XHRcdC8vIHNvIGxlYXZlIGxvb3BDb3VudCBhdCAtMVxuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgdHJ1ZSwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uIHx8IHRpbWUgPCAwICkge1xuXG5cdFx0XHRcdC8vIHdyYXAgYXJvdW5kXG5cblx0XHRcdFx0Y29uc3QgbG9vcERlbHRhID0gTWF0aC5mbG9vciggdGltZSAvIGR1cmF0aW9uICk7IC8vIHNpZ25lZFxuXHRcdFx0XHR0aW1lIC09IGR1cmF0aW9uICogbG9vcERlbHRhO1xuXG5cdFx0XHRcdGxvb3BDb3VudCArPSBNYXRoLmFicyggbG9vcERlbHRhICk7XG5cblx0XHRcdFx0Y29uc3QgcGVuZGluZyA9IHRoaXMucmVwZXRpdGlvbnMgLSBsb29wQ291bnQ7XG5cblx0XHRcdFx0aWYgKCBwZW5kaW5nIDw9IDAgKSB7XG5cblx0XHRcdFx0XHQvLyBoYXZlIHRvIHN0b3AgKHN3aXRjaCBzdGF0ZSwgY2xhbXAgdGltZSwgZmlyZSBldmVudClcblxuXHRcdFx0XHRcdGlmICggdGhpcy5jbGFtcFdoZW5GaW5pc2hlZCApIHRoaXMucGF1c2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRlbHNlIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0dGltZSA9IGRlbHRhVGltZSA+IDAgPyBkdXJhdGlvbiA6IDA7XG5cblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2ZpbmlzaGVkJywgYWN0aW9uOiB0aGlzLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBkZWx0YVRpbWUgPiAwID8gMSA6IC0xXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBrZWVwIHJ1bm5pbmdcblxuXHRcdFx0XHRcdGlmICggcGVuZGluZyA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZW50ZXJpbmcgdGhlIGxhc3Qgcm91bmRcblxuXHRcdFx0XHRcdFx0Y29uc3QgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBhdFN0YXJ0LCAhIGF0U3RhcnQsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCBmYWxzZSwgZmFsc2UsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSBsb29wQ291bnQ7XG5cblx0XHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ2xvb3AnLCBhY3Rpb246IHRoaXMsIGxvb3BEZWx0YTogbG9vcERlbHRhXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLnRpbWUgPSB0aW1lO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcGluZ1BvbmcgJiYgKCBsb29wQ291bnQgJiAxICkgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gaW52ZXJ0IHRpbWUgZm9yIHRoZSBcInBvbmcgcm91bmRcIlxuXG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbiAtIHRpbWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aW1lO1xuXG5cdH1cblxuXHRfc2V0RW5kaW5ncyggYXRTdGFydCwgYXRFbmQsIHBpbmdQb25nICkge1xuXG5cdFx0Y29uc3Qgc2V0dGluZ3MgPSB0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdFx0aWYgKCBwaW5nUG9uZyApIHtcblxuXHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSBaZXJvU2xvcGVFbmRpbmc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBhc3N1bWluZyBmb3IgTG9vcE9uY2UgYXRTdGFydCA9PSBhdEVuZCA9PSB0cnVlXG5cblx0XHRcdGlmICggYXRTdGFydCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IHRoaXMuemVyb1Nsb3BlQXRTdGFydCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nU3RhcnQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXRFbmQgKSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kID0gdGhpcy56ZXJvU2xvcGVBdEVuZCA/IFplcm9TbG9wZUVuZGluZyA6IFplcm9DdXJ2YXR1cmVFbmRpbmc7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dGluZ3MuZW5kaW5nRW5kIFx0ID0gV3JhcEFyb3VuZEVuZGluZztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCB3ZWlnaHROb3csIHdlaWdodFRoZW4gKSB7XG5cblx0XHRjb25zdCBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lO1xuXHRcdGxldCBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xuXG5cdFx0dGltZXNbIDAgXSA9IG5vdztcblx0XHR2YWx1ZXNbIDAgXSA9IHdlaWdodE5vdztcblx0XHR0aW1lc1sgMSBdID0gbm93ICsgZHVyYXRpb247XG5cdFx0dmFsdWVzWyAxIF0gPSB3ZWlnaHRUaGVuO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheSggMSApO1xuXG4vKipcbiAqIGBBbmltYXRpb25NaXhlcmAgaXMgYSBwbGF5ZXIgZm9yIGFuaW1hdGlvbnMgb24gYSBwYXJ0aWN1bGFyIG9iamVjdCBpblxuICogdGhlIHNjZW5lLiBXaGVuIG11bHRpcGxlIG9iamVjdHMgaW4gdGhlIHNjZW5lIGFyZSBhbmltYXRlZCBpbmRlcGVuZGVudGx5LFxuICogb25lIGBBbmltYXRpb25NaXhlcmAgbWF5IGJlIHVzZWQgZm9yIGVhY2ggb2JqZWN0LlxuICovXG5jbGFzcyBBbmltYXRpb25NaXhlciBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYW5pbWF0aW9uIG1peGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSByb290IC0gVGhlIG9iamVjdCB3aG9zZSBhbmltYXRpb25zIHNoYWxsIGJlIHBsYXllZCBieSB0aGlzIG1peGVyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJvb3QgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fcm9vdCA9IHJvb3Q7XG5cdFx0dGhpcy5faW5pdE1lbW9yeU1hbmFnZXIoKTtcblx0XHR0aGlzLl9hY2N1SW5kZXggPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGdsb2JhbCBtaXhlciB0aW1lIChpbiBzZWNvbmRzOyBzdGFydGluZyB3aXRoIGAwYCBvbiB0aGUgbWl4ZXIncyBjcmVhdGlvbikuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnRpbWUgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBzY2FsaW5nIGZhY3RvciBmb3IgdGhlIGdsb2JhbCB0aW1lLlxuXHRcdCAqXG5cdFx0ICogTm90ZTogU2V0dGluZyB0aGlzIG1lbWJlciB0byBgMGAgYW5kIGxhdGVyIGJhY2sgdG8gYDFgIGlzIGFcblx0XHQgKiBwb3NzaWJpbGl0eSB0byBwYXVzZS91bnBhdXNlIGFsbCBhY3Rpb25zIHRoYXQgYXJlIGNvbnRyb2xsZWQgYnkgdGhpc1xuXHRcdCAqIG1peGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy50aW1lU2NhbGUgPSAxLjA7XG5cblx0fVxuXG5cdF9iaW5kQWN0aW9uKCBhY3Rpb24sIHByb3RvdHlwZUFjdGlvbiApIHtcblxuXHRcdGNvbnN0IHJvb3QgPSBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0dHJhY2tzID0gYWN0aW9uLl9jbGlwLnRyYWNrcyxcblx0XHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdFx0YmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3MsXG5cdFx0XHRpbnRlcnBvbGFudHMgPSBhY3Rpb24uX2ludGVycG9sYW50cyxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWU7XG5cblx0XHRsZXQgYmluZGluZ3NCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICggYmluZGluZ3NCeU5hbWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YmluZGluZ3NCeU5hbWUgPSB7fTtcblx0XHRcdGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdID0gYmluZGluZ3NCeU5hbWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG5UcmFja3M7ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHRyYWNrID0gdHJhY2tzWyBpIF0sXG5cdFx0XHRcdHRyYWNrTmFtZSA9IHRyYWNrLm5hbWU7XG5cblx0XHRcdGxldCBiaW5kaW5nID0gYmluZGluZ3NCeU5hbWVbIHRyYWNrTmFtZSBdO1xuXG5cdFx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHRiaW5kaW5nc1sgaSBdID0gYmluZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0XHRpZiAoIGJpbmRpbmcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIGV4aXN0aW5nIGJpbmRpbmcsIG1ha2Ugc3VyZSB0aGUgY2FjaGUga25vd3NcblxuXHRcdFx0XHRcdGlmICggYmluZGluZy5fY2FjaGVJbmRleCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0KysgYmluZGluZy5yZWZlcmVuY2VDb3VudDtcblx0XHRcdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHBhdGggPSBwcm90b3R5cGVBY3Rpb24gJiYgcHJvdG90eXBlQWN0aW9uLlxuXHRcdFx0XHRcdF9wcm9wZXJ0eUJpbmRpbmdzWyBpIF0uYmluZGluZy5wYXJzZWRQYXRoO1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBuZXcgUHJvcGVydHlNaXhlcihcblx0XHRcdFx0XHRQcm9wZXJ0eUJpbmRpbmcuY3JlYXRlKCByb290LCB0cmFja05hbWUsIHBhdGggKSxcblx0XHRcdFx0XHR0cmFjay5WYWx1ZVR5cGVOYW1lLCB0cmFjay5nZXRWYWx1ZVNpemUoKSApO1xuXG5cdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApO1xuXG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGludGVycG9sYW50c1sgaSBdLnJlc3VsdEJ1ZmZlciA9IGJpbmRpbmcuYnVmZmVyO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApIHtcblxuXHRcdGlmICggISB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdGlmICggYWN0aW9uLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIHRoaXMgYWN0aW9uIGhhcyBiZWVuIGZvcmdvdHRlbiBieSB0aGUgY2FjaGUsIGJ1dCB0aGUgdXNlclxuXHRcdFx0XHQvLyBhcHBlYXJzIHRvIGJlIHN0aWxsIHVzaW5nIGl0IC0+IHJlYmluZFxuXG5cdFx0XHRcdGNvbnN0IHJvb3RVdWlkID0gKCBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290ICkudXVpZCxcblx0XHRcdFx0XHRjbGlwVXVpZCA9IGFjdGlvbi5fY2xpcC51dWlkLFxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdFx0XHR0aGlzLl9iaW5kQWN0aW9uKCBhY3Rpb24sXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgJiYgYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWyAwIF0gKTtcblxuXHRcdFx0XHR0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbiggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Ly8gaW5jcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZy51c2VDb3VudCArKyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2xlbmRCaW5kaW5nKCBiaW5kaW5nICk7XG5cdFx0XHRcdFx0YmluZGluZy5zYXZlT3JpZ2luYWxTdGF0ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9sZW5kQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApIHtcblxuXHRcdGlmICggdGhpcy5faXNBY3RpdmVBY3Rpb24oIGFjdGlvbiApICkge1xuXG5cdFx0XHRjb25zdCBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Ly8gZGVjcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggLS0gYmluZGluZy51c2VDb3VudCA9PT0gMCApIHtcblxuXHRcdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcblx0XHRcdFx0XHR0aGlzLl90YWtlQmFja0JpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fdGFrZUJhY2tBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBNZW1vcnkgbWFuYWdlclxuXG5cdF9pbml0TWVtb3J5TWFuYWdlcigpIHtcblxuXHRcdHRoaXMuX2FjdGlvbnMgPSBbXTsgLy8gJ25BY3RpdmVBY3Rpb25zJyBmb2xsb3dlZCBieSBpbmFjdGl2ZSBvbmVzXG5cdFx0dGhpcy5fbkFjdGl2ZUFjdGlvbnMgPSAwO1xuXG5cdFx0dGhpcy5fYWN0aW9uc0J5Q2xpcCA9IHt9O1xuXHRcdC8vIGluc2lkZTpcblx0XHQvLyB7XG5cdFx0Ly8gXHRrbm93bkFjdGlvbnM6IEFycmF5PCBBbmltYXRpb25BY3Rpb24gPiAtIHVzZWQgYXMgcHJvdG90eXBlc1xuXHRcdC8vIFx0YWN0aW9uQnlSb290OiBBbmltYXRpb25BY3Rpb24gLSBsb29rdXBcblx0XHQvLyB9XG5cblxuXHRcdHRoaXMuX2JpbmRpbmdzID0gW107IC8vICduQWN0aXZlQmluZGluZ3MnIGZvbGxvd2VkIGJ5IGluYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9uQWN0aXZlQmluZGluZ3MgPSAwO1xuXG5cdFx0dGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lID0ge307IC8vIGluc2lkZTogTWFwPCBuYW1lLCBQcm9wZXJ0eU1peGVyID5cblxuXG5cdFx0dGhpcy5fY29udHJvbEludGVycG9sYW50cyA9IFtdOyAvLyBzYW1lIGdhbWUgYXMgYWJvdmVcblx0XHR0aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyA9IDA7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHR0aGlzLnN0YXRzID0ge1xuXG5cdFx0XHRhY3Rpb25zOiB7XG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fYWN0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQWN0aW9ucztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YmluZGluZ3M6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNvbnRyb2xJbnRlcnBvbGFudHM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9jb250cm9sSW50ZXJwb2xhbnRzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IGZvciBBbmltYXRpb25BY3Rpb24gb2JqZWN0c1xuXG5cdF9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0Y29uc3QgaW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cdFx0cmV0dXJuIGluZGV4ICE9PSBudWxsICYmIGluZGV4IDwgdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XG5cblx0fVxuXG5cdF9hZGRJbmFjdGl2ZUFjdGlvbiggYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwO1xuXG5cdFx0bGV0IGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB7XG5cblx0XHRcdFx0a25vd25BY3Rpb25zOiBbIGFjdGlvbiBdLFxuXHRcdFx0XHRhY3Rpb25CeVJvb3Q6IHt9XG5cblx0XHRcdH07XG5cblx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IDA7XG5cblx0XHRcdGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF0gPSBhY3Rpb25zRm9yQ2xpcDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IGtub3duQWN0aW9ucyA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9ucztcblxuXHRcdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0ga25vd25BY3Rpb25zLmxlbmd0aDtcblx0XHRcdGtub3duQWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IGFjdGlvbnMubGVuZ3RoO1xuXHRcdGFjdGlvbnMucHVzaCggYWN0aW9uICk7XG5cblx0XHRhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3RbIHJvb3RVdWlkIF0gPSBhY3Rpb247XG5cblx0fVxuXG5cdF9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0Y29uc3QgY2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLFxuXHRcdFx0a25vd25BY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9ucyxcblxuXHRcdFx0bGFzdEtub3duQWN0aW9uID1cblx0XHRcdFx0a25vd25BY3Rpb25zRm9yQ2xpcFsga25vd25BY3Rpb25zRm9yQ2xpcC5sZW5ndGggLSAxIF0sXG5cblx0XHRcdGJ5Q2xpcENhY2hlSW5kZXggPSBhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXg7XG5cblx0XHRsYXN0S25vd25BY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBieUNsaXBDYWNoZUluZGV4O1xuXHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGJ5Q2xpcENhY2hlSW5kZXggXSA9IGxhc3RLbm93bkFjdGlvbjtcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0Y29uc3QgYWN0aW9uQnlSb290ID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290LFxuXHRcdFx0cm9vdFV1aWQgPSAoIGFjdGlvbi5fbG9jYWxSb290IHx8IHRoaXMuX3Jvb3QgKS51dWlkO1xuXG5cdFx0ZGVsZXRlIGFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICgga25vd25BY3Rpb25zRm9yQ2xpcC5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGRlbGV0ZSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiggYWN0aW9uICk7XG5cblx0fVxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdGlmICggLS0gYmluZGluZy5yZWZlcmVuY2VDb3VudCA9PT0gMCApIHtcblxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfbGVuZEFjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8ICBpbmFjdGl2ZSBhY3Rpb25zICBdXG5cdFx0Ly8gWyAgYWN0aXZlIGFjdGlvbnMgPnwgaW5hY3RpdmUgYWN0aW9ucyBdXG5cdFx0Ly8gICAgICAgICAgICAgICAgIHMgICAgICAgIGFcblx0XHQvLyAgICAgICAgICAgICAgICAgIDwtc3dhcC0+XG5cdFx0Ly8gICAgICAgICAgICAgICAgIGEgICAgICAgIHNcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVBY3Rpb247XG5cblx0fVxuXG5cdF90YWtlQmFja0FjdGlvbiggYWN0aW9uICkge1xuXG5cdFx0Ly8gWyAgYWN0aXZlIGFjdGlvbnMgIHwgaW5hY3RpdmUgYWN0aW9ucyBdXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8PCBpbmFjdGl2ZSBhY3Rpb25zICBdXG5cdFx0Ly8gICAgICAgIGEgICAgICAgIHNcblx0XHQvLyAgICAgICAgIDwtc3dhcC0+XG5cdFx0Ly8gICAgICAgIHMgICAgICAgIGFcblxuXHRcdGNvbnN0IGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcblxuXHRcdFx0bGFzdEFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0bGFzdEFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGxhc3RBY3RpdmVBY3Rpb247XG5cblx0fVxuXG5cdC8vIE1lbW9yeSBtYW5hZ2VtZW50IGZvciBQcm9wZXJ0eU1peGVyIG9iamVjdHNcblxuXHRfYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0bGV0IGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0ge307XG5cdFx0XHRiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSA9IGJpbmRpbmdCeU5hbWU7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXSA9IGJpbmRpbmc7XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmcgKTtcblxuXHR9XG5cblx0X3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApIHtcblxuXHRcdGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcm9wQmluZGluZyA9IGJpbmRpbmcuYmluZGluZyxcblx0XHRcdHJvb3RVdWlkID0gcHJvcEJpbmRpbmcucm9vdE5vZGUudXVpZCxcblx0XHRcdHRyYWNrTmFtZSA9IHByb3BCaW5kaW5nLnBhdGgsXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSxcblxuXHRcdFx0bGFzdEluYWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBiaW5kaW5ncy5sZW5ndGggLSAxIF0sXG5cdFx0XHRjYWNoZUluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleDtcblxuXHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBjYWNoZUluZGV4IF0gPSBsYXN0SW5hY3RpdmVCaW5kaW5nO1xuXHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0ZGVsZXRlIGJpbmRpbmdCeU5hbWVbIHRyYWNrTmFtZSBdO1xuXG5cdFx0aWYgKCBPYmplY3Qua2V5cyggYmluZGluZ0J5TmFtZSApLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfbGVuZEJpbmRpbmcoIGJpbmRpbmcgKSB7XG5cblx0XHRjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJldkluZGV4ID0gYmluZGluZy5fY2FjaGVJbmRleCxcblxuXHRcdFx0bGFzdEFjdGl2ZUluZGV4ID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzICsrLFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlQmluZGluZyA9IGJpbmRpbmdzWyBsYXN0QWN0aXZlSW5kZXggXTtcblxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0YmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdID0gYmluZGluZztcblxuXHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGJpbmRpbmdzWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVCaW5kaW5nO1xuXG5cdH1cblxuXHRfdGFrZUJhY2tCaW5kaW5nKCBiaW5kaW5nICkge1xuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVCaW5kaW5ncyxcblxuXHRcdFx0bGFzdEFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRsYXN0QWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRiaW5kaW5nc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQmluZGluZztcblxuXHR9XG5cblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBvZiBJbnRlcnBvbGFudHMgZm9yIHdlaWdodCBhbmQgdGltZSBzY2FsZVxuXG5cdF9sZW5kQ29udHJvbEludGVycG9sYW50KCkge1xuXG5cdFx0Y29uc3QgaW50ZXJwb2xhbnRzID0gdGhpcy5fY29udHJvbEludGVycG9sYW50cyxcblx0XHRcdGxhc3RBY3RpdmVJbmRleCA9IHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzICsrO1xuXG5cdFx0bGV0IGludGVycG9sYW50ID0gaW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXTtcblxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBuZXcgTGluZWFySW50ZXJwb2xhbnQoXG5cdFx0XHRcdG5ldyBGbG9hdDMyQXJyYXkoIDIgKSwgbmV3IEZsb2F0MzJBcnJheSggMiApLFxuXHRcdFx0XHQxLCBfY29udHJvbEludGVycG9sYW50c1Jlc3VsdEJ1ZmZlciApO1xuXG5cdFx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XG5cdFx0XHRpbnRlcnBvbGFudHNbIGxhc3RBY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW50ZXJwb2xhbnQ7XG5cblx0fVxuXG5cdF90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudCggaW50ZXJwb2xhbnQgKSB7XG5cblx0XHRjb25zdCBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxuXHRcdFx0cHJldkluZGV4ID0gaW50ZXJwb2xhbnQuX19jYWNoZUluZGV4LFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLSB0aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyxcblxuXHRcdFx0bGFzdEFjdGl2ZUludGVycG9sYW50ID0gaW50ZXJwb2xhbnRzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcblx0XHRpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7XG5cblx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGludGVycG9sYW50c1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlSW50ZXJwb2xhbnQ7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIHtAbGluayBBbmltYXRpb25BY3Rpb259IGZvciB0aGUgcGFzc2VkIGNsaXAuXG5cdCAqXG5cdCAqIElmIGFuIGFjdGlvbiBmaXR0aW5nIHRoZSBjbGlwIGFuZCByb290IHBhcmFtZXRlcnMgZG9lc24ndCB5ZXQgZXhpc3QsIGl0XG5cdCAqIHdpbGwgYmUgY3JlYXRlZCBieSB0aGlzIG1ldGhvZC4gQ2FsbGluZyB0aGlzIG1ldGhvZCBzZXZlcmFsIHRpbWVzIHdpdGggdGhlXG5cdCAqIHNhbWUgY2xpcCBhbmQgcm9vdCBwYXJhbWV0ZXJzIGFsd2F5cyByZXR1cm5zIHRoZSBzYW1lIGFjdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtBbmltYXRpb25DbGlwfHN0cmluZ30gY2xpcCAtIEFuIGFuaW1hdGlvbiBjbGlwIG9yIGFsdGVybmF0aXZlbHkgdGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiBjbGlwLlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBbb3B0aW9uYWxSb290XSAtIEFuIGFsdGVybmF0aXZlIHJvb3Qgb2JqZWN0LlxuXHQgKiBAcGFyYW0geyhOb3JtYWxBbmltYXRpb25CbGVuZE1vZGV8QWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUpfSBbYmxlbmRNb2RlXSAtIFRoZSBibGVuZCBtb2RlLlxuXHQgKiBAcmV0dXJuIHs/QW5pbWF0aW9uQWN0aW9ufSBUaGUgYW5pbWF0aW9uIGFjdGlvbi5cblx0ICovXG5cdGNsaXBBY3Rpb24oIGNsaXAsIG9wdGlvbmFsUm9vdCwgYmxlbmRNb2RlICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQ7XG5cblx0XHRsZXQgY2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/IEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcDtcblxuXHRcdGNvbnN0IGNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXA7XG5cblx0XHRjb25zdCBhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cdFx0bGV0IHByb3RvdHlwZUFjdGlvbiA9IG51bGw7XG5cblx0XHRpZiAoIGJsZW5kTW9kZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIGNsaXBPYmplY3QgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0YmxlbmRNb2RlID0gY2xpcE9iamVjdC5ibGVuZE1vZGU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0YmxlbmRNb2RlID0gTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnN0IGV4aXN0aW5nQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGV4aXN0aW5nQWN0aW9uICE9PSB1bmRlZmluZWQgJiYgZXhpc3RpbmdBY3Rpb24uYmxlbmRNb2RlID09PSBibGVuZE1vZGUgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nQWN0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHdlIGtub3cgdGhlIGNsaXAsIHNvIHdlIGRvbid0IGhhdmUgdG8gcGFyc2UgYWxsXG5cdFx0XHQvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHlcblx0XHRcdHByb3RvdHlwZUFjdGlvbiA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdO1xuXG5cdFx0XHQvLyBhbHNvLCB0YWtlIHRoZSBjbGlwIGZyb20gdGhlIHByb3RvdHlwZSBhY3Rpb25cblx0XHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApXG5cdFx0XHRcdGNsaXBPYmplY3QgPSBwcm90b3R5cGVBY3Rpb24uX2NsaXA7XG5cblx0XHR9XG5cblx0XHQvLyBjbGlwIG11c3QgYmUga25vd24gd2hlbiBzcGVjaWZpZWQgdmlhIHN0cmluZ1xuXHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gYWxsb2NhdGUgYWxsIHJlc291cmNlcyByZXF1aXJlZCB0byBydW4gaXRcblx0XHRjb25zdCBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKCB0aGlzLCBjbGlwT2JqZWN0LCBvcHRpb25hbFJvb3QsIGJsZW5kTW9kZSApO1xuXG5cdFx0dGhpcy5fYmluZEFjdGlvbiggbmV3QWN0aW9uLCBwcm90b3R5cGVBY3Rpb24gKTtcblxuXHRcdC8vIGFuZCBtYWtlIHRoZSBhY3Rpb24ga25vd24gdG8gdGhlIG1lbW9yeSBtYW5hZ2VyXG5cdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIG5ld0FjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XG5cblx0XHRyZXR1cm4gbmV3QWN0aW9uO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbiBleGlzdGluZyBhbmltYXRpb24gYWN0aW9uIGZvciB0aGUgcGFzc2VkIGNsaXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QW5pbWF0aW9uQ2xpcHxzdHJpbmd9IGNsaXAgLSBBbiBhbmltYXRpb24gY2xpcCBvciBhbHRlcm5hdGl2ZWx5IHRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24gY2xpcC5cblx0ICogQHBhcmFtIHtPYmplY3QzRH0gW29wdGlvbmFsUm9vdF0gLSBBbiBhbHRlcm5hdGl2ZSByb290IG9iamVjdC5cblx0ICogQHJldHVybiB7P0FuaW1hdGlvbkFjdGlvbn0gVGhlIGFuaW1hdGlvbiBhY3Rpb24uIFJldHVybnMgYG51bGxgIGlmIG5vIGFjdGlvbiB3YXMgZm91bmQuXG5cdCAqL1xuXHRleGlzdGluZ0FjdGlvbiggY2xpcCwgb3B0aW9uYWxSb290ICkge1xuXG5cdFx0Y29uc3Qgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cblx0XHRcdGNsaXBPYmplY3QgPSB0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRBbmltYXRpb25DbGlwLmZpbmRCeU5hbWUoIHJvb3QsIGNsaXAgKSA6IGNsaXAsXG5cblx0XHRcdGNsaXBVdWlkID0gY2xpcE9iamVjdCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsXG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSB8fCBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWFjdGl2YXRlcyBhbGwgcHJldmlvdXNseSBzY2hlZHVsZWQgYWN0aW9ucyBvbiB0aGlzIG1peGVyLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25NaXhlcn0gQSByZWZlcmVuY2UgdG8gdGhpIGFuaW1hdGlvbiBtaXhlci5cblx0ICovXG5cdHN0b3BBbGxBY3Rpb24oKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IG5BY3Rpb25zIC0gMTsgaSA+PSAwOyAtLSBpICkge1xuXG5cdFx0XHRhY3Rpb25zWyBpIF0uc3RvcCgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZHZhbmNlcyB0aGUgZ2xvYmFsIG1peGVyIHRpbWUgYW5kIHVwZGF0ZXMgdGhlIGFuaW1hdGlvbi5cblx0ICpcblx0ICogVGhpcyBpcyB1c3VhbGx5IGRvbmUgaW4gdGhlIHJlbmRlciBsb29wIGJ5IHBhc3NpbmcgdGhlIGRlbHRhXG5cdCAqIHRpbWUgZnJvbSB7QGxpbmsgQ2xvY2t9IG9yIHtAbGluayBUaW1lcn0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVRpbWUgLSBUaGUgZGVsdGEgdGltZSBpbiBzZWNvbmRzLlxuXHQgKiBAcmV0dXJuIHtBbmltYXRpb25NaXhlcn0gQSByZWZlcmVuY2UgdG8gdGhpIGFuaW1hdGlvbiBtaXhlci5cblx0ICovXG5cdHVwZGF0ZSggZGVsdGFUaW1lICkge1xuXG5cdFx0ZGVsdGFUaW1lICo9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRuQWN0aW9ucyA9IHRoaXMuX25BY3RpdmVBY3Rpb25zLFxuXG5cdFx0XHR0aW1lID0gdGhpcy50aW1lICs9IGRlbHRhVGltZSxcblx0XHRcdHRpbWVEaXJlY3Rpb24gPSBNYXRoLnNpZ24oIGRlbHRhVGltZSApLFxuXG5cdFx0XHRhY2N1SW5kZXggPSB0aGlzLl9hY2N1SW5kZXggXj0gMTtcblxuXHRcdC8vIHJ1biBhY3RpdmUgYWN0aW9uc1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpICE9PSBuQWN0aW9uczsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgYWN0aW9uID0gYWN0aW9uc1sgaSBdO1xuXG5cdFx0XHRhY3Rpb24uX3VwZGF0ZSggdGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0Y29uc3QgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IHRoaXMuX25BY3RpdmVCaW5kaW5ncztcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLmFwcGx5KCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2xvYmFsIG1peGVyIHRvIGEgc3BlY2lmaWMgdGltZSBhbmQgdXBkYXRlcyB0aGUgYW5pbWF0aW9uIGFjY29yZGluZ2x5LlxuXHQgKlxuXHQgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBuZWVkIHRvIGp1bXAgdG8gYW4gZXhhY3QgdGltZSBpbiBhbiBhbmltYXRpb24uIFRoZVxuXHQgKiBpbnB1dCBwYXJhbWV0ZXIgd2lsbCBiZSBzY2FsZWQgYnkge0BsaW5rIEFuaW1hdGlvbk1peGVyI3RpbWVTY2FsZX1cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBUaGUgdGltZSB0byBzZXQgaW4gc2Vjb25kcy5cblx0ICogQHJldHVybiB7QW5pbWF0aW9uTWl4ZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaSBhbmltYXRpb24gbWl4ZXIuXG5cdCAqL1xuXHRzZXRUaW1lKCB0aW1lICkge1xuXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIEFuaW1hdGlvbk1peGVyIG9iamVjdDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9hY3Rpb25zLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5fYWN0aW9uc1sgaSBdLnRpbWUgPSAwOyAvLyBaZXJvIG91dCB0aW1lIGF0dHJpYnV0ZSBmb3IgYWxsIGFzc29jaWF0ZWQgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHMuXG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoIHRpbWUgKTsgLy8gVXBkYXRlIHVzZWQgdG8gc2V0IGV4YWN0IHRpbWUuIFJldHVybnMgXCJ0aGlzXCIgQW5pbWF0aW9uTWl4ZXIgb2JqZWN0LlxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGlzIG1peGVyJ3Mgcm9vdCBvYmplY3QuXG5cdCAqXG5cdCAqIEByZXR1cm4ge09iamVjdDNEfSBUaGUgbWl4ZXIncyByb290IG9iamVjdC5cblx0ICovXG5cdGdldFJvb3QoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fcm9vdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlYWxsb2NhdGVzIGFsbCBtZW1vcnkgcmVzb3VyY2VzIGZvciBhIGNsaXAuIEJlZm9yZSB1c2luZyB0aGlzIG1ldGhvZCBtYWtlXG5cdCAqIHN1cmUgdG8gY2FsbCB7QGxpbmsgQW5pbWF0aW9uQWN0aW9uI3N0b3B9IGZvciBhbGwgcmVsYXRlZCBhY3Rpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB9IGNsaXAgLSBUaGUgY2xpcCB0byB1bmNhY2hlLlxuXHQgKi9cblx0dW5jYWNoZUNsaXAoIGNsaXAgKSB7XG5cblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdGNsaXBVdWlkID0gY2xpcC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5vdGU6IGp1c3QgY2FsbGluZyBfcmVtb3ZlSW5hY3RpdmVBY3Rpb24gd291bGQgbWVzcyB1cCB0aGVcblx0XHRcdC8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW5cblx0XHRcdC8vIGp1c3QgdGhyb3cgYXdheVxuXG5cdFx0XHRjb25zdCBhY3Rpb25zVG9SZW1vdmUgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbiA9IGFjdGlvbnNUb1JlbW92ZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0Y29uc3QgYWN0aW9uID0gYWN0aW9uc1RvUmVtb3ZlWyBpIF07XG5cblx0XHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdFx0Y29uc3QgY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblx0XHRcdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXTtcblxuXHRcdFx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBudWxsO1xuXHRcdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xuXG5cdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XG5cdFx0XHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcblxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIERlYWxsb2NhdGVzIGFsbCBtZW1vcnkgcmVzb3VyY2VzIGZvciBhIHJvb3Qgb2JqZWN0LiBCZWZvcmUgdXNpbmcgdGhpc1xuXHQgKiBtZXRob2QgbWFrZSBzdXJlIHRvIGNhbGwge0BsaW5rIEFuaW1hdGlvbkFjdGlvbiNzdG9wfSBmb3IgYWxsIHJlbGF0ZWRcblx0ICogYWN0aW9ucyBvciBhbHRlcm5hdGl2ZWx5IHtAbGluayBBbmltYXRpb25NaXhlciNzdG9wQWxsQWN0aW9ufSB3aGVuIHRoZVxuXHQgKiBtaXhlciBvcGVyYXRlcyBvbiBhIHNpbmdsZSByb290LlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSByb290IC0gVGhlIHJvb3Qgb2JqZWN0IHRvIHVuY2FjaGUuXG5cdCAqL1xuXHR1bmNhY2hlUm9vdCggcm9vdCApIHtcblxuXHRcdGNvbnN0IHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXA7XG5cblx0XHRmb3IgKCBjb25zdCBjbGlwVXVpZCBpbiBhY3Rpb25zQnlDbGlwICkge1xuXG5cdFx0XHRjb25zdCBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLmFjdGlvbkJ5Um9vdCxcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGFjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nQnlOYW1lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lICkge1xuXG5cdFx0XHRcdGNvbnN0IGJpbmRpbmcgPSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGVhbGxvY2F0ZXMgYWxsIG1lbW9yeSByZXNvdXJjZXMgZm9yIGFuIGFjdGlvbi4gVGhlIGFjdGlvbiBpcyBpZGVudGlmaWVkIGJ5IHRoZVxuXHQgKiBnaXZlbiBjbGlwIGFuZCBhbiBvcHRpb25hbCByb290IG9iamVjdC4gQmVmb3JlIHVzaW5nIHRoaXMgbWV0aG9kIG1ha2Vcblx0ICogc3VyZSB0byBjYWxsIHtAbGluayBBbmltYXRpb25BY3Rpb24jc3RvcH0gdG8gZGVhY3RpdmF0ZSB0aGUgYWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FuaW1hdGlvbkNsaXB8c3RyaW5nfSBjbGlwIC0gQW4gYW5pbWF0aW9uIGNsaXAgb3IgYWx0ZXJuYXRpdmVseSB0aGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uIGNsaXAuXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IFtvcHRpb25hbFJvb3RdIC0gQW4gYWx0ZXJuYXRpdmUgcm9vdCBvYmplY3QuXG5cdCAqL1xuXHR1bmNhY2hlQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHRjb25zdCBhY3Rpb24gPSB0aGlzLmV4aXN0aW5nQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdGlmICggYWN0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgM0QgcmVuZGVyIHRhcmdldC5cbiAqXG4gKiBAYXVnbWVudHMgUmVuZGVyVGFyZ2V0XG4gKi9cbmNsYXNzIFJlbmRlclRhcmdldDNEIGV4dGVuZHMgUmVuZGVyVGFyZ2V0IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyAzRCByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTFdIC0gVGhlIHdpZHRoIG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge1JlbmRlclRhcmdldH5PcHRpb25zfSBbb3B0aW9uc10gLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzUmVuZGVyVGFyZ2V0M0QgPSB0cnVlO1xuXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcndyaXR0ZW4gd2l0aCBhIGRpZmZlcmVudCB0ZXh0dXJlIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RGF0YTNEVGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YTNEVGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYXJyYXkgcmVuZGVyIHRhcmdldC5cbiAqXG4gKiBAYXVnbWVudHMgUmVuZGVyVGFyZ2V0XG4gKi9cbmNsYXNzIFJlbmRlclRhcmdldEFycmF5IGV4dGVuZHMgUmVuZGVyVGFyZ2V0IHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyAzRCByZW5kZXIgdGFyZ2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3dpZHRoPTFdIC0gVGhlIHdpZHRoIG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlaWdodD0xXSAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0YXJnZXQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gLSBUaGUgaGVpZ2h0IG9mIHRoZSByZW5kZXIgdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge1JlbmRlclRhcmdldH5PcHRpb25zfSBbb3B0aW9uc10gLSBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggd2lkdGggPSAxLCBoZWlnaHQgPSAxLCBkZXB0aCA9IDEsIG9wdGlvbnMgPSB7fSApIHtcblxuXHRcdHN1cGVyKCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zICk7XG5cblx0XHR0aGlzLmlzUmVuZGVyVGFyZ2V0QXJyYXkgPSB0cnVlO1xuXG5cdFx0dGhpcy5kZXB0aCA9IGRlcHRoO1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcndyaXR0ZW4gd2l0aCBhIGRpZmZlcmVudCB0ZXh0dXJlIHR5cGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RGF0YUFycmF5VGV4dHVyZX1cblx0XHQgKi9cblx0XHR0aGlzLnRleHR1cmUgPSBuZXcgRGF0YUFycmF5VGV4dHVyZSggbnVsbCwgd2lkdGgsIGhlaWdodCwgZGVwdGggKTtcblxuXHRcdHRoaXMudGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPSB0cnVlO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSB1bmlmb3JtIHdoaWNoIGlzIGEgZ2xvYmFsIHNoYWRlciB2YXJpYWJsZS4gVGhleSBhcmUgcGFzc2VkIHRvIHNoYWRlciBwcm9ncmFtcy5cbiAqXG4gKiBXaGVuIGRlY2xhcmluZyBhIHVuaWZvcm0gb2YgYSB7QGxpbmsgU2hhZGVyTWF0ZXJpYWx9LCBpdCBpcyBkZWNsYXJlZCBieSB2YWx1ZSBvciBieSBvYmplY3QuXG4gKiBgYGBqc1xuICogdW5pZm9ybXM6IHtcbiAqIFx0dGltZTogeyB2YWx1ZTogMS4wIH0sXG4gKiBcdHJlc29sdXRpb246IG5ldyBVbmlmb3JtKCBuZXcgVmVjdG9yMigpIClcbiAqIH07XG4gKiBgYGBcbiAqIFNpbmNlIHRoaXMgY2xhc3MgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb250ZXh0IG9mIHtAbGluayBTaGFkZXJNYXRlcmlhbH0sIGl0IGlzIG9ubHkgc3VwcG9ydGVkXG4gKiBpbiB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG4gKi9cbmNsYXNzIFVuaWZvcm0ge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHVuaWZvcm0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7YW55fSB2YWx1ZSAtIFRoZSB1bmlmb3JtIHZhbHVlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHZhbHVlICkge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVuaWZvcm0gdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7YW55fVxuXHRcdCAqL1xuXHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgdW5pZm9ybSB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKiBJZiB0aGUgdmFsdWUgaGFzIGEgYGNsb25lKClgIG1ldGhvZCwgdGhlIHZhbHVlIGlzIGNsb25lZCBhcyB3ZWxsLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtVbmlmb3JtfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgVW5pZm9ybSggdGhpcy52YWx1ZS5jbG9uZSA9PT0gdW5kZWZpbmVkID8gdGhpcy52YWx1ZSA6IHRoaXMudmFsdWUuY2xvbmUoKSApO1xuXG5cdH1cblxufVxuXG5sZXQgX2lkID0gMDtcblxuLyoqXG4gKiBBIGNsYXNzIGZvciBtYW5hZ2luZyBtdWx0aXBsZSB1bmlmb3JtcyBpbiBhIHNpbmdsZSBncm91cC4gVGhlIHJlbmRlcmVyIHdpbGwgcHJvY2Vzc1xuICogc3VjaCBhIGRlZmluaXRpb24gYXMgYSBzaW5nbGUgVUJPLlxuICpcbiAqIFNpbmNlIHRoaXMgY2xhc3MgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb250ZXh0IG9mIHtAbGluayBTaGFkZXJNYXRlcmlhbH0sIGl0IGlzIG9ubHkgc3VwcG9ydGVkXG4gKiBpbiB7QGxpbmsgV2ViR0xSZW5kZXJlcn0uXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBVbmlmb3Jtc0dyb3VwIGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB1bmlmb3JtcyBncm91cC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNVbmlmb3Jtc0dyb3VwID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBJRCBvZiB0aGUgM0Qgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogQG5hbWUgVW5pZm9ybXNHcm91cCNpZFxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiBfaWQgKysgfSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG5hbWUgb2YgdGhlIHVuaWZvcm1zIGdyb3VwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLm5hbWUgPSAnJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBidWZmZXIgdXNhZ2UuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7KFN0YXRpY0RyYXdVc2FnZXxEeW5hbWljRHJhd1VzYWdlfFN0cmVhbURyYXdVc2FnZXxTdGF0aWNSZWFkVXNhZ2V8RHluYW1pY1JlYWRVc2FnZXxTdHJlYW1SZWFkVXNhZ2V8U3RhdGljQ29weVVzYWdlfER5bmFtaWNDb3B5VXNhZ2V8U3RyZWFtQ29weVVzYWdlKX1cblx0XHQgKiBAZGVmYXVsdCBTdGF0aWNEcmF3VXNhZ2Vcblx0XHQgKi9cblx0XHR0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlO1xuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXkgaG9sZGluZyB0aGUgdW5pZm9ybXMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7QXJyYXk8VW5pZm9ybT59XG5cdFx0ICovXG5cdFx0dGhpcy51bmlmb3JtcyA9IFtdO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgZ2l2ZW4gdW5pZm9ybSB0byB0aGlzIHVuaWZvcm1zIGdyb3VwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm19IHVuaWZvcm0gLSBUaGUgdW5pZm9ybSB0byBhZGQuXG5cdCAqIEByZXR1cm4ge1VuaWZvcm1zR3JvdXB9IEEgcmVmZXJlbmNlIHRvIHRoaXMgdW5pZm9ybXMgZ3JvdXAuXG5cdCAqL1xuXHRhZGQoIHVuaWZvcm0gKSB7XG5cblx0XHR0aGlzLnVuaWZvcm1zLnB1c2goIHVuaWZvcm0gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgZ2l2ZW4gdW5pZm9ybSBmcm9tIHRoaXMgdW5pZm9ybXMgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VW5pZm9ybX0gdW5pZm9ybSAtIFRoZSB1bmlmb3JtIHRvIHJlbW92ZS5cblx0ICogQHJldHVybiB7VW5pZm9ybXNHcm91cH0gQSByZWZlcmVuY2UgdG8gdGhpcyB1bmlmb3JtcyBncm91cC5cblx0ICovXG5cdHJlbW92ZSggdW5pZm9ybSApIHtcblxuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy51bmlmb3Jtcy5pbmRleE9mKCB1bmlmb3JtICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtMSApIHRoaXMudW5pZm9ybXMuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBuYW1lIG9mIHRoaXMgdW5pZm9ybXMgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtVbmlmb3Jtc0dyb3VwfSBBIHJlZmVyZW5jZSB0byB0aGlzIHVuaWZvcm1zIGdyb3VwLlxuXHQgKi9cblx0c2V0TmFtZSggbmFtZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHVzYWdlIG9mIHRoaXMgdW5pZm9ybXMgZ3JvdXAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7KFN0YXRpY0RyYXdVc2FnZXxEeW5hbWljRHJhd1VzYWdlfFN0cmVhbURyYXdVc2FnZXxTdGF0aWNSZWFkVXNhZ2V8RHluYW1pY1JlYWRVc2FnZXxTdHJlYW1SZWFkVXNhZ2V8U3RhdGljQ29weVVzYWdlfER5bmFtaWNDb3B5VXNhZ2V8U3RyZWFtQ29weVVzYWdlKX0gdmFsdWUgLSBUaGUgdXNhZ2UgdG8gc2V0LlxuXHQgKiBAcmV0dXJuIHtVbmlmb3Jtc0dyb3VwfSBBIHJlZmVyZW5jZSB0byB0aGlzIHVuaWZvcm1zIGdyb3VwLlxuXHQgKi9cblx0c2V0VXNhZ2UoIHZhbHVlICkge1xuXG5cdFx0dGhpcy51c2FnZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqXG5cdCAqIEBmaXJlcyBUZXh0dXJlI2Rpc3Bvc2Vcblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiB1bmlmb3JtcyBncm91cCB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1VuaWZvcm1zR3JvdXB9IHNvdXJjZSAtIFRoZSB1bmlmb3JtcyBncm91cCB0byBjb3B5LlxuXHQgKiBAcmV0dXJuIHtVbmlmb3Jtc0dyb3VwfSBBIHJlZmVyZW5jZSB0byB0aGlzIHVuaWZvcm1zIGdyb3VwLlxuXHQgKi9cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cdFx0dGhpcy51c2FnZSA9IHNvdXJjZS51c2FnZTtcblxuXHRcdGNvbnN0IHVuaWZvcm1zU291cmNlID0gc291cmNlLnVuaWZvcm1zO1xuXG5cdFx0dGhpcy51bmlmb3Jtcy5sZW5ndGggPSAwO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdW5pZm9ybXNTb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBBcnJheS5pc0FycmF5KCB1bmlmb3Jtc1NvdXJjZVsgaSBdICkgPyB1bmlmb3Jtc1NvdXJjZVsgaSBdIDogWyB1bmlmb3Jtc1NvdXJjZVsgaSBdIF07XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IHVuaWZvcm1zLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHR0aGlzLnVuaWZvcm1zLnB1c2goIHVuaWZvcm1zWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgdW5pZm9ybXMgZ3JvdXAgd2l0aCBjb3BpZWQgdmFsdWVzIGZyb20gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHJldHVybiB7VW5pZm9ybXNHcm91cH0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQW4gaW5zdGFuY2VkIHZlcnNpb24gb2YgYW4gaW50ZXJsZWF2ZWQgYnVmZmVyLlxuICpcbiAqIEBhdWdtZW50cyBJbnRlcmxlYXZlZEJ1ZmZlclxuICovXG5jbGFzcyBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciBleHRlbmRzIEludGVybGVhdmVkQnVmZmVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBpbnN0YW5jZWQgaW50ZXJsZWF2ZWQgYnVmZmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGFycmF5IC0gQSB0eXBlZCBhcnJheSB3aXRoIGEgc2hhcmVkIGJ1ZmZlciBzdG9yaW5nIGF0dHJpYnV0ZSBkYXRhLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RyaWRlIC0gVGhlIG51bWJlciBvZiB0eXBlZC1hcnJheSBlbGVtZW50cyBwZXIgdmVydGV4LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW21lc2hQZXJBdHRyaWJ1dGU9MV0gLSBEZWZpbmVzIGhvdyBvZnRlbiBhIHZhbHVlIG9mIHRoaXMgaW50ZXJsZWF2ZWQgYnVmZmVyIHNob3VsZCBiZSByZXBlYXRlZC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBhcnJheSwgc3RyaWRlLCBtZXNoUGVyQXR0cmlidXRlID0gMSApIHtcblxuXHRcdHN1cGVyKCBhcnJheSwgc3RyaWRlICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogRGVmaW5lcyBob3cgb2Z0ZW4gYSB2YWx1ZSBvZiB0aGlzIGJ1ZmZlciBhdHRyaWJ1dGUgc2hvdWxkIGJlIHJlcGVhdGVkLFxuXHRcdCAqIHNlZSB7QGxpbmsgSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlI21lc2hQZXJBdHRyaWJ1dGV9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gbWVzaFBlckF0dHJpYnV0ZTtcblxuXHR9XG5cblx0Y29weSggc291cmNlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlICk7XG5cblx0XHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBzb3VyY2UubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRjbG9uZSggZGF0YSApIHtcblxuXHRcdGNvbnN0IGliID0gc3VwZXIuY2xvbmUoIGRhdGEgKTtcblxuXHRcdGliLm1lc2hQZXJBdHRyaWJ1dGUgPSB0aGlzLm1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHRyZXR1cm4gaWI7XG5cblx0fVxuXG5cdHRvSlNPTiggZGF0YSApIHtcblxuXHRcdGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oIGRhdGEgKTtcblxuXHRcdGpzb24uaXNJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciA9IHRydWU7XG5cdFx0anNvbi5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIGpzb247XG5cblx0fVxuXG59XG5cbi8qKlxuICogQW4gYWx0ZXJuYXRpdmUgdmVyc2lvbiBvZiBhIGJ1ZmZlciBhdHRyaWJ1dGUgd2l0aCBtb3JlIGNvbnRyb2wgb3ZlciB0aGUgVkJPLlxuICpcbiAqIFRoZSByZW5kZXJlciBkb2VzIG5vdCBjb25zdHJ1Y3QgYSBWQk8gZm9yIHRoaXMga2luZCBvZiBhdHRyaWJ1dGUuIEluc3RlYWQsIGl0IHVzZXNcbiAqIHdoYXRldmVyIFZCTyBpcyBwYXNzZWQgaW4gY29uc3RydWN0b3IgYW5kIGNhbiBsYXRlciBiZSBhbHRlcmVkIHZpYSB0aGUgYGJ1ZmZlcmAgcHJvcGVydHkuXG4gKlxuICogVGhlIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGNsYXNzIGlzIHdoZW4gc29tZSBraW5kIG9mIEdQR1BVIGNhbGN1bGF0aW9uIGludGVyZmVyZXNcbiAqIG9yIGV2ZW4gcHJvZHVjZXMgdGhlIFZCT3MgaW4gcXVlc3Rpb24uXG4gKlxuICogTm90aWNlIHRoYXQgdGhpcyBjbGFzcyBjYW4gb25seSBiZSB1c2VkIHdpdGgge0BsaW5rIFdlYkdMUmVuZGVyZXJ9LlxuICovXG5jbGFzcyBHTEJ1ZmZlckF0dHJpYnV0ZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgR0wgYnVmZmVyIGF0dHJpYnV0ZS5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTEJ1ZmZlcn0gYnVmZmVyIC0gVGhlIG5hdGl2ZSBXZWJHTCBidWZmZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlIC0gVGhlIG5hdGl2ZSBkYXRhIHR5cGUgKGUuZy4gYGdsLkZMT0FUYCkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpdGVtU2l6ZSAtIFRoZSBpdGVtIHNpemUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBlbGVtZW50U2l6ZSAtIFRoZSBjb3JyZXNwb25kaW5nIHNpemUgKGluIGJ5dGVzKSBmb3IgdGhlIGdpdmVuIGB0eXBlYCBwYXJhbWV0ZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBleHBlY3RlZCBudW1iZXIgb2YgdmVydGljZXMgaW4gVkJPLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGJ1ZmZlciwgdHlwZSwgaXRlbVNpemUsIGVsZW1lbnRTaXplLCBjb3VudCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBjYW4gYmUgdXNlZCBmb3IgdHlwZSB0ZXN0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNHTEJ1ZmZlckF0dHJpYnV0ZSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmFtZSBvZiB0aGUgYnVmZmVyIGF0dHJpYnV0ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5uYW1lID0gJyc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbmF0aXZlIFdlYkdMIGJ1ZmZlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtXZWJHTEJ1ZmZlcn1cblx0XHQgKi9cblx0XHR0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBuYXRpdmUgZGF0YSB0eXBlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGl0ZW0gc2l6ZSwgc2VlIHtAbGluayBCdWZmZXJBdHRyaWJ1dGUjaXRlbVNpemV9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29ycmVzcG9uZGluZyBzaXplIChpbiBieXRlcykgZm9yIHRoZSBnaXZlbiBgdHlwZWAgcGFyYW1ldGVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmVsZW1lbnRTaXplID0gZWxlbWVudFNpemU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHZlcnRpY2VzIGluIFZCTy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0LyoqXG5cdFx0ICogQSB2ZXJzaW9uIG51bWJlciwgaW5jcmVtZW50ZWQgZXZlcnkgdGltZSB0aGUgYG5lZWRzVXBkYXRlYCBpcyBzZXQgdG8gYHRydWVgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnZlcnNpb24gPSAwO1xuXG5cdH1cblxuXHQvKipcblx0ICogRmxhZyB0byBpbmRpY2F0ZSB0aGF0IHRoaXMgYXR0cmlidXRlIGhhcyBjaGFuZ2VkIGFuZCBzaG91bGQgYmUgcmUtc2VudCB0b1xuXHQgKiB0aGUgR1BVLiBTZXQgdGhpcyB0byBgdHJ1ZWAgd2hlbiB5b3UgbW9kaWZ5IHRoZSB2YWx1ZSBvZiB0aGUgYXJyYXkuXG5cdCAqXG5cdCAqIEB0eXBlIHtudW1iZXJ9XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcblx0ICovXG5cdHNldCBuZWVkc1VwZGF0ZSggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgZ2l2ZW4gbmF0aXZlIFdlYkdMIGJ1ZmZlci5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTEJ1ZmZlcn0gYnVmZmVyIC0gVGhlIGJ1ZmZlciB0byBzZXQuXG5cdCAqIEByZXR1cm4ge0J1ZmZlckF0dHJpYnV0ZX0gQSByZWZlcmVuY2UgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdHNldEJ1ZmZlciggYnVmZmVyICkge1xuXG5cdFx0dGhpcy5idWZmZXIgPSBidWZmZXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGdpdmVuIG5hdGl2ZSBkYXRhIHR5cGUgYW5kIGVsZW1lbnQgc2l6ZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHR5cGUgLSBUaGUgbmF0aXZlIGRhdGEgdHlwZSAoZS5nLiBgZ2wuRkxPQVRgKS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGVsZW1lbnRTaXplIC0gVGhlIGNvcnJlc3BvbmRpbmcgc2l6ZSAoaW4gYnl0ZXMpIGZvciB0aGUgZ2l2ZW4gYHR5cGVgIHBhcmFtZXRlci5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0VHlwZSggdHlwZSwgZWxlbWVudFNpemUgKSB7XG5cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuZWxlbWVudFNpemUgPSBlbGVtZW50U2l6ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaXRlbSBzaXplLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaXRlbVNpemUgLSBUaGUgaXRlbSBzaXplLlxuXHQgKiBAcmV0dXJuIHtCdWZmZXJBdHRyaWJ1dGV9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRJdGVtU2l6ZSggaXRlbVNpemUgKSB7XG5cblx0XHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvdW50ICh0aGUgZXhwZWN0ZWQgbnVtYmVyIG9mIHZlcnRpY2VzIGluIFZCTykuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCAtIFRoZSBjb3VudC5cblx0ICogQHJldHVybiB7QnVmZmVyQXR0cmlidXRlfSBBIHJlZmVyZW5jZSB0byB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0c2V0Q291bnQoIGNvdW50ICkge1xuXG5cdFx0dGhpcy5jb3VudCA9IGNvdW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9tYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyBkZXNpZ25lZCB0byBhc3Npc3Qgd2l0aCByYXljYXN0aW5nLiBSYXljYXN0aW5nIGlzIHVzZWQgZm9yXG4gKiBtb3VzZSBwaWNraW5nICh3b3JraW5nIG91dCB3aGF0IG9iamVjdHMgaW4gdGhlIDNkIHNwYWNlIHRoZSBtb3VzZSBpcyBvdmVyKVxuICogYW1vbmdzdCBvdGhlciB0aGluZ3MuXG4gKi9cbmNsYXNzIFJheWNhc3RlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcmF5Y2FzdGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IG9yaWdpbiAtIFRoZSBvcmlnaW4gdmVjdG9yIHdoZXJlIHRoZSByYXkgY2FzdHMgZnJvbS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBkaXJlY3Rpb24gLSBUaGUgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IgdGhhdCBnaXZlcyBkaXJlY3Rpb24gdG8gdGhlIHJheS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuZWFyPTBdIC0gQWxsIHJlc3VsdHMgcmV0dXJuZWQgYXJlIGZ1cnRoZXIgYXdheSB0aGFuIG5lYXIuIE5lYXIgY2FuJ3QgYmUgbmVnYXRpdmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZmFyPUluZmluaXR5XSAtIEFsbCByZXN1bHRzIHJldHVybmVkIGFyZSBjbG9zZXIgdGhhbiBmYXIuIEZhciBjYW4ndCBiZSBsb3dlciB0aGFuIG5lYXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvciggb3JpZ2luLCBkaXJlY3Rpb24sIG5lYXIgPSAwLCBmYXIgPSBJbmZpbml0eSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByYXkgdXNlZCBmb3IgcmF5Y2FzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtSYXl9XG5cdFx0ICovXG5cdFx0dGhpcy5yYXkgPSBuZXcgUmF5KCBvcmlnaW4sIGRpcmVjdGlvbiApO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIHJlc3VsdHMgcmV0dXJuZWQgYXJlIGZ1cnRoZXIgYXdheSB0aGFuIG5lYXIuIE5lYXIgY2FuJ3QgYmUgbmVnYXRpdmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLm5lYXIgPSBuZWFyO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIHJlc3VsdHMgcmV0dXJuZWQgYXJlIGZ1cnRoZXIgYXdheSB0aGFuIG5lYXIuIE5lYXIgY2FuJ3QgYmUgbmVnYXRpdmUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IEluZmluaXR5XG5cdFx0ICovXG5cdFx0dGhpcy5mYXIgPSBmYXI7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2FtZXJhIHRvIHVzZSB3aGVuIHJheWNhc3RpbmcgYWdhaW5zdCB2aWV3LWRlcGVuZGVudCBvYmplY3RzIHN1Y2ggYXNcblx0XHQgKiBiaWxsYm9hcmRlZCBvYmplY3RzIGxpa2Ugc3ByaXRlcy4gVGhpcyBmaWVsZCBjYW4gYmUgc2V0IG1hbnVhbGx5IG9yXG5cdFx0ICogaXMgc2V0IHdoZW4gY2FsbGluZyBgc2V0RnJvbUNhbWVyYSgpYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/Q2FtZXJhfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmNhbWVyYSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbGxvd3MgdG8gc2VsZWN0aXZlbHkgaWdub3JlIDNEIG9iamVjdHMgd2hlbiBwZXJmb3JtaW5nIGludGVyc2VjdGlvbiB0ZXN0cy5cblx0XHQgKiBUaGUgZm9sbG93aW5nIGNvZGUgZXhhbXBsZSBlbnN1cmVzIHRoYXQgb25seSAzRCBvYmplY3RzIG9uIGxheWVyIGAxYCB3aWxsIGJlXG5cdFx0ICogaG9ub3JlZCBieSByYXljYXN0ZXIuXG5cdFx0ICogYGBganNcblx0XHQgKiByYXljYXN0ZXIubGF5ZXJzLnNldCggMSApO1xuXHRcdCAqIG9iamVjdC5sYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0ICogYGBgXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TGF5ZXJzfVxuXHRcdCAqL1xuXHRcdHRoaXMubGF5ZXJzID0gbmV3IExheWVycygpO1xuXG5cblx0XHQvKipcblx0XHQgKiBBIHBhcmFtZXRlciBvYmplY3QgdGhhdCBjb25maWd1cmVzIHRoZSByYXljYXN0aW5nLiBJdCBoYXMgdGhlIHN0cnVjdHVyZTpcblx0XHQgKlxuXHRcdCAqIGBgYFxuXHRcdCAqIHtcblx0XHQgKiBcdE1lc2g6IHt9LFxuXHRcdCAqIFx0TGluZTogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHQgKiBcdExPRDoge30sXG5cdFx0ICogXHRQb2ludHM6IHsgdGhyZXNob2xkOiAxIH0sXG5cdFx0ICogXHRTcHJpdGU6IHt9XG5cdFx0ICogfVxuXHRcdCAqIGBgYFxuXHRcdCAqIFdoZXJlIGB0aHJlc2hvbGRgIGlzIHRoZSBwcmVjaXNpb24gb2YgdGhlIHJheWNhc3RlciB3aGVuIGludGVyc2VjdGluZyBvYmplY3RzLCBpbiB3b3JsZCB1bml0cy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5wYXJhbXMgPSB7XG5cdFx0XHRNZXNoOiB7fSxcblx0XHRcdExpbmU6IHsgdGhyZXNob2xkOiAxIH0sXG5cdFx0XHRMT0Q6IHt9LFxuXHRcdFx0UG9pbnRzOiB7IHRocmVzaG9sZDogMSB9LFxuXHRcdFx0U3ByaXRlOiB7fVxuXHRcdH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSByYXkgd2l0aCBhIG5ldyBvcmlnaW4gYW5kIGRpcmVjdGlvbiBieSBjb3B5aW5nIHRoZSB2YWx1ZXMgZnJvbSB0aGUgYXJndW1lbnRzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IG9yaWdpbiAtIFRoZSBvcmlnaW4gdmVjdG9yIHdoZXJlIHRoZSByYXkgY2FzdHMgZnJvbS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBkaXJlY3Rpb24gLSBUaGUgKG5vcm1hbGl6ZWQpIGRpcmVjdGlvbiB2ZWN0b3IgdGhhdCBnaXZlcyBkaXJlY3Rpb24gdG8gdGhlIHJheS5cblx0ICovXG5cdHNldCggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdFx0dGhpcy5yYXkuc2V0KCBvcmlnaW4sIGRpcmVjdGlvbiApO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXNlcyB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMgYW5kIGNhbWVyYSB0byBjb21wdXRlIGEgbmV3IG9yaWdpbiBhbmQgZGlyZWN0aW9uIGZvciB0aGUgaW50ZXJuYWwgcmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IGNvb3JkcyAtIDJEIGNvb3JkaW5hdGVzIG9mIHRoZSBtb3VzZSwgaW4gbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZXMgKE5EQykuXG5cdCAqIFggYW5kIFkgY29tcG9uZW50cyBzaG91bGQgYmUgYmV0d2VlbiBgLTFgIGFuZCBgMWAuXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIGZyb20gd2hpY2ggdGhlIHJheSBzaG91bGQgb3JpZ2luYXRlLlxuXHQgKi9cblx0c2V0RnJvbUNhbWVyYSggY29vcmRzLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIGNvb3Jkcy54LCBjb29yZHMueSwgMC41ICkudW5wcm9qZWN0KCBjYW1lcmEgKS5zdWIoIHRoaXMucmF5Lm9yaWdpbiApLm5vcm1hbGl6ZSgpO1xuXHRcdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHR9IGVsc2UgaWYgKCBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHRoaXMucmF5Lm9yaWdpbi5zZXQoIGNvb3Jkcy54LCBjb29yZHMueSwgKCBjYW1lcmEubmVhciArIGNhbWVyYS5mYXIgKSAvICggY2FtZXJhLm5lYXIgLSBjYW1lcmEuZmFyICkgKS51bnByb2plY3QoIGNhbWVyYSApOyAvLyBzZXQgb3JpZ2luIGluIHBsYW5lIG9mIGNhbWVyYVxuXHRcdFx0dGhpcy5yYXkuZGlyZWN0aW9uLnNldCggMCwgMCwgLTEgKS50cmFuc2Zvcm1EaXJlY3Rpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUmF5Y2FzdGVyOiBVbnN1cHBvcnRlZCBjYW1lcmEgdHlwZTogJyArIGNhbWVyYS50eXBlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVc2VzIHRoZSBnaXZlbiBXZWJYUiBjb250cm9sbGVyIHRvIGNvbXB1dGUgYSBuZXcgb3JpZ2luIGFuZCBkaXJlY3Rpb24gZm9yIHRoZSBpbnRlcm5hbCByYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViWFJDb250cm9sbGVyfSBjb250cm9sbGVyIC0gVGhlIGNvbnRyb2xsZXIgdG8gY29weSB0aGUgcG9zaXRpb24gYW5kIGRpcmVjdGlvbiBmcm9tLlxuXHQgKiBAcmV0dXJuIHtSYXljYXN0ZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgcmF5Y2FzdGVyLlxuXHQgKi9cblx0c2V0RnJvbVhSQ29udHJvbGxlciggY29udHJvbGxlciApIHtcblxuXHRcdF9tYXRyaXguaWRlbnRpdHkoKS5leHRyYWN0Um90YXRpb24oIGNvbnRyb2xsZXIubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNvbnRyb2xsZXIubWF0cml4V29ybGQgKTtcblx0XHR0aGlzLnJheS5kaXJlY3Rpb24uc2V0KCAwLCAwLCAtMSApLmFwcGx5TWF0cml4NCggX21hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgaW50ZXJzZWN0aW9uIHBvaW50IG9mIGEgcmF5Y2FzdGVyIGludGVyc2VjdGlvbiB0ZXN0LlxuXHQgKiBAdHlwZWRlZiB7T2JqZWN0fSBSYXljYXN0ZXJ+SW50ZXJzZWN0aW9uXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkaXN0YW5jZSAtIFRoZSBkaXN0YW5jZSBmcm9tIHRoZSByYXkncyBvcmlnaW4gdG8gdGhlIGludGVyc2VjdGlvbiBwb2ludC5cblx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGRpc3RhbmNlVG9SYXkgLSAgU29tZSAzRCBvYmplY3RzIGUuZy4ge0BsaW5rIFBvaW50c30gcHJvdmlkZSB0aGUgZGlzdGFuY2Ugb2YgdGhlXG5cdCAqIGludGVyc2VjdGlvbiB0byB0aGUgbmVhcmVzdCBwb2ludCBvbiB0aGUgcmF5LiBGb3Igb3RoZXIgb2JqZWN0cyBpdCB3aWxsIGJlIGB1bmRlZmluZWRgLlxuXHQgKiBAcHJvcGVydHkge1ZlY3RvcjN9IHBvaW50IC0gVGhlIGludGVyc2VjdGlvbiBwb2ludCwgaW4gd29ybGQgY29vcmRpbmF0ZXMuXG5cdCAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBmYWNlIC0gVGhlIGZhY2UgdGhhdCBoYXMgYmVlbiBpbnRlcnNlY3RlZC5cblx0ICogQHByb3BlcnR5IHtudW1iZXJ9IGZhY2VJbmRleCAtIFRoZSBmYWNlIGluZGV4LlxuXHQgKiBAcHJvcGVydHkge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0IHRoYXQgaGFzIGJlZW4gaW50ZXJzZWN0ZWQuXG5cdCAqIEBwcm9wZXJ0eSB7VmVjdG9yMn0gdXYgLSBVLFYgY29vcmRpbmF0ZXMgYXQgcG9pbnQgb2YgaW50ZXJzZWN0aW9uLlxuXHQgKiBAcHJvcGVydHkge1ZlY3RvcjJ9IHV2MSAtIFNlY29uZCBzZXQgb2YgVSxWIGNvb3JkaW5hdGVzIGF0IHBvaW50IG9mIGludGVyc2VjdGlvbi5cblx0ICogQHByb3BlcnR5IHtWZWN0b3IzfSB1djEgLSBJbnRlcnBvbGF0ZWQgbm9ybWFsIHZlY3RvciBhdCBwb2ludCBvZiBpbnRlcnNlY3Rpb24uXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbnN0YW5jZUlkIC0gVGhlIGluZGV4IG51bWJlciBvZiB0aGUgaW5zdGFuY2Ugd2hlcmUgdGhlIHJheVxuXHQgKiBpbnRlcnNlY3RzIHRoZSB7QGxpbmsgSW5zdGFuY2VkTWVzaH0uXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBDaGVja3MgYWxsIGludGVyc2VjdGlvbiBiZXR3ZWVuIHRoZSByYXkgYW5kIHRoZSBvYmplY3Qgd2l0aCBvciB3aXRob3V0IHRoZVxuXHQgKiBkZXNjZW5kYW50cy4gSW50ZXJzZWN0aW9ucyBhcmUgcmV0dXJuZWQgc29ydGVkIGJ5IGRpc3RhbmNlLCBjbG9zZXN0IGZpcnN0LlxuXHQgKlxuXHQgKiBgUmF5Y2FzdGVyYCBkZWxlZ2F0ZXMgdG8gdGhlIGByYXljYXN0KClgIG1ldGhvZCBvZiB0aGUgcGFzc2VkIDNEIG9iamVjdCwgd2hlblxuXHQgKiBldmFsdWF0aW5nIHdoZXRoZXIgdGhlIHJheSBpbnRlcnNlY3RzIHRoZSBvYmplY3Qgb3Igbm90LiBUaGlzIGFsbG93cyBtZXNoZXMgdG8gcmVzcG9uZFxuXHQgKiBkaWZmZXJlbnRseSB0byByYXkgY2FzdGluZyB0aGFuIGxpbmVzIG9yIHBvaW50cy5cblx0ICpcblx0ICogTm90ZSB0aGF0IGZvciBtZXNoZXMsIGZhY2VzIG11c3QgYmUgcG9pbnRlZCB0b3dhcmRzIHRoZSBvcmlnaW4gb2YgdGhlIHJheSBpbiBvcmRlclxuXHQgKiB0byBiZSBkZXRlY3RlZDsgaW50ZXJzZWN0aW9ucyBvZiB0aGUgcmF5IHBhc3NpbmcgdGhyb3VnaCB0aGUgYmFjayBvZiBhIGZhY2Ugd2lsbCBub3Rcblx0ICogYmUgZGV0ZWN0ZWQuIFRvIHJheWNhc3QgYWdhaW5zdCBib3RoIGZhY2VzIG9mIGFuIG9iamVjdCwgeW91J2xsIHdhbnQgdG8gc2V0ICB7QGxpbmsgTWF0ZXJpYWwjc2lkZX1cblx0ICogdG8gYFRIUkVFLkRvdWJsZVNpZGVgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSBUaGUgM0Qgb2JqZWN0IHRvIGNoZWNrIGZvciBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgcmF5LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWN1cnNpdmU9dHJ1ZV0gLSBJZiBzZXQgdG8gYHRydWVgLCBpdCBhbHNvIGNoZWNrcyBhbGwgZGVzY2VuZGFudHMuXG5cdCAqIE90aGVyd2lzZSBpdCBvbmx5IGNoZWNrcyBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5PFJheWNhc3Rlcn5JbnRlcnNlY3Rpb24+fSBbaW50ZXJzZWN0cz1bXV0gVGhlIHRhcmdldCBhcnJheSB0aGF0IGhvbGRzIHRoZSByZXN1bHQgb2YgdGhlIG1ldGhvZC5cblx0ICogQHJldHVybiB7QXJyYXk8UmF5Y2FzdGVyfkludGVyc2VjdGlvbj59IEFuIGFycmF5IGhvbGRpbmcgdGhlIGludGVyc2VjdGlvbiBwb2ludHMuXG5cdCAqL1xuXHRpbnRlcnNlY3RPYmplY3QoIG9iamVjdCwgcmVjdXJzaXZlID0gdHJ1ZSwgaW50ZXJzZWN0cyA9IFtdICkge1xuXG5cdFx0aW50ZXJzZWN0KCBvYmplY3QsIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBhbGwgaW50ZXJzZWN0aW9uIGJldHdlZW4gdGhlIHJheSBhbmQgdGhlIG9iamVjdHMgd2l0aCBvciB3aXRob3V0XG5cdCAqIHRoZSBkZXNjZW5kYW50cy4gSW50ZXJzZWN0aW9ucyBhcmUgcmV0dXJuZWQgc29ydGVkIGJ5IGRpc3RhbmNlLCBjbG9zZXN0IGZpcnN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PE9iamVjdDNEPn0gb2JqZWN0cyAtIFRoZSAzRCBvYmplY3RzIHRvIGNoZWNrIGZvciBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgcmF5LlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZWN1cnNpdmU9dHJ1ZV0gLSBJZiBzZXQgdG8gYHRydWVgLCBpdCBhbHNvIGNoZWNrcyBhbGwgZGVzY2VuZGFudHMuXG5cdCAqIE90aGVyd2lzZSBpdCBvbmx5IGNoZWNrcyBpbnRlcnNlY3Rpb24gd2l0aCB0aGUgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0FycmF5PFJheWNhc3Rlcn5JbnRlcnNlY3Rpb24+fSBbaW50ZXJzZWN0cz1bXV0gVGhlIHRhcmdldCBhcnJheSB0aGF0IGhvbGRzIHRoZSByZXN1bHQgb2YgdGhlIG1ldGhvZC5cblx0ICogQHJldHVybiB7QXJyYXk8UmF5Y2FzdGVyfkludGVyc2VjdGlvbj59IEFuIGFycmF5IGhvbGRpbmcgdGhlIGludGVyc2VjdGlvbiBwb2ludHMuXG5cdCAqL1xuXHRpbnRlcnNlY3RPYmplY3RzKCBvYmplY3RzLCByZWN1cnNpdmUgPSB0cnVlLCBpbnRlcnNlY3RzID0gW10gKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGludGVyc2VjdCggb2JqZWN0c1sgaSBdLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKTtcblxuXHRcdH1cblxuXHRcdGludGVyc2VjdHMuc29ydCggYXNjU29ydCApO1xuXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGFzY1NvcnQoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCggb2JqZWN0LCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApIHtcblxuXHRsZXQgcHJvcGFnYXRlID0gdHJ1ZTtcblxuXHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggcmF5Y2FzdGVyLmxheWVycyApICkge1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gb2JqZWN0LnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xuXG5cdFx0aWYgKCByZXN1bHQgPT09IGZhbHNlICkgcHJvcGFnYXRlID0gZmFsc2U7XG5cblx0fVxuXG5cdGlmICggcHJvcGFnYXRlID09PSB0cnVlICYmIHJlY3Vyc2l2ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aW50ZXJzZWN0KCBjaGlsZHJlblsgaSBdLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRydWUgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBwb2ludHMgaW4gM0Qgc3BhY2UgYXNcbiAqIFtTcGhlcmljYWwgY29vcmRpbmF0ZXNde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwaGVyaWNhbF9jb29yZGluYXRlX3N5c3RlbX0uXG4gKi9cbmNsYXNzIFNwaGVyaWNhbCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgc3BoZXJpY2FsLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0xXSAtIFRoZSByYWRpdXMsIG9yIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2UgKHN0cmFpZ2h0LWxpbmUgZGlzdGFuY2UpIGZyb20gdGhlIHBvaW50IHRvIHRoZSBvcmlnaW4uXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbcGhpPTBdIC0gVGhlIHBvbGFyIGFuZ2xlIGluIHJhZGlhbnMgZnJvbSB0aGUgeSAodXApIGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbdGhldGE9MF0gLSBUaGUgZXF1YXRvci9hemltdXRoYWwgYW5nbGUgaW4gcmFkaWFucyBhcm91bmQgdGhlIHkgKHVwKSBheGlzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJhZGl1cyA9IDEsIHBoaSA9IDAsIHRoZXRhID0gMCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByYWRpdXMsIG9yIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2UgKHN0cmFpZ2h0LWxpbmUgZGlzdGFuY2UpIGZyb20gdGhlIHBvaW50IHRvIHRoZSBvcmlnaW4uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwb2xhciBhbmdsZSBpbiByYWRpYW5zIGZyb20gdGhlIHkgKHVwKSBheGlzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5waGkgPSBwaGk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZXF1YXRvci9hemltdXRoYWwgYW5nbGUgaW4gcmFkaWFucyBhcm91bmQgdGhlIHkgKHVwKSBheGlzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc3BoZXJpY2FsIGNvbXBvbmVudHMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gVGhlIHJhZGl1cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHBoaSAtIFRoZSBwb2xhciBhbmdsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRoZXRhIC0gVGhlIGF6aW11dGhhbCBhbmdsZS5cblx0ICogQHJldHVybiB7U3BoZXJpY2FsfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbC5cblx0ICovXG5cdHNldCggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBwaGk7XG5cdFx0dGhpcy50aGV0YSA9IHRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gc3BoZXJpY2FsIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3BoZXJpY2FsfSBvdGhlciAtIFRoZSBzcGhlcmljYWwgdG8gY29weS5cblx0ICogQHJldHVybiB7U3BoZXJpY2FsfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbC5cblx0ICovXG5cdGNvcHkoIG90aGVyICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBvdGhlci5waGk7XG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXN0cmljdHMgdGhlIHBvbGFyIGFuZ2xlIFtwYWdlOi5waGkgcGhpXSB0byBiZSBiZXR3ZWVuIGAwLjAwMDAwMWAgYW5kIHBpIC1cblx0ICogYDAuMDAwMDAxYC5cblx0ICpcblx0ICogQHJldHVybiB7U3BoZXJpY2FsfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbC5cblx0ICovXG5cdG1ha2VTYWZlKCkge1xuXG5cdFx0Y29uc3QgRVBTID0gMC4wMDAwMDE7XG5cdFx0dGhpcy5waGkgPSBjbGFtcCggdGhpcy5waGksIEVQUywgTWF0aC5QSSAtIEVQUyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBzcGhlcmljYWwgY29tcG9uZW50cyBmcm9tIHRoZSBnaXZlbiB2ZWN0b3Igd2hpY2ggaXMgYXNzdW1lZCB0byBob2xkXG5cdCAqIENhcnRlc2lhbiBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSB2IC0gVGhlIHZlY3RvciB0byBzZXQuXG5cdCAqIEByZXR1cm4ge1NwaGVyaWNhbH0gQSByZWZlcmVuY2UgdG8gdGhpcyBzcGhlcmljYWwuXG5cdCAqL1xuXHRzZXRGcm9tVmVjdG9yMyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHNwaGVyaWNhbCBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIENhcnRlc2lhbiBjb29yZGluYXRlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHogLSBUaGUgeCB2YWx1ZS5cblx0ICogQHJldHVybiB7U3BoZXJpY2FsfSBBIHJlZmVyZW5jZSB0byB0aGlzIHNwaGVyaWNhbC5cblx0ICovXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggeCAqIHggKyB5ICogeSArIHogKiB6ICk7XG5cblx0XHRpZiAoIHRoaXMucmFkaXVzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnRoZXRhID0gMDtcblx0XHRcdHRoaXMucGhpID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB4LCB6ICk7XG5cdFx0XHR0aGlzLnBoaSA9IE1hdGguYWNvcyggY2xhbXAoIHkgLyB0aGlzLnJhZGl1cywgLTEsIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbmV3IHNwaGVyaWNhbCB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtTcGhlcmljYWx9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IHBvaW50cyBpbiAzRCBzcGFjZSBhc1xuICogW0N5bGluZHJpY2FsIGNvb3JkaW5hdGVzXXtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DeWxpbmRyaWNhbF9jb29yZGluYXRlX3N5c3RlbX0uXG4gKi9cbmNsYXNzIEN5bGluZHJpY2FsIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBjeWxpbmRyaWNhbC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpdXM9MV0gLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgb3JpZ2luIHRvIGEgcG9pbnQgaW4gdGhlIHgteiBwbGFuZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFt0aGV0YT0wXSAtIEEgY291bnRlcmNsb2Nrd2lzZSBhbmdsZSBpbiB0aGUgeC16IHBsYW5lIG1lYXN1cmVkIGluIHJhZGlhbnMgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3k9MF0gLSBUaGUgaGVpZ2h0IGFib3ZlIHRoZSB4LXogcGxhbmUuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmFkaXVzID0gMSwgdGhldGEgPSAwLCB5ID0gMCApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBwb2ludCBpbiB0aGUgeC16IHBsYW5lLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cblx0XHQvKipcblx0XHQgKiBBIGNvdW50ZXJjbG9ja3dpc2UgYW5nbGUgaW4gdGhlIHgteiBwbGFuZSBtZWFzdXJlZCBpbiByYWRpYW5zIGZyb20gdGhlIHBvc2l0aXZlIHotYXhpcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBoZWlnaHQgYWJvdmUgdGhlIHgteiBwbGFuZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMueSA9IHk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjeWxpbmRyaWNhbCBjb21wb25lbnRzIGJ5IGNvcHlpbmcgdGhlIGdpdmVuIHZhbHVlcy5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyAtIFRoZSByYWRpdXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0aGV0YSAtIFRoZSB0aGV0YSBhbmdsZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgaGVpZ2h0IHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtDeWxpbmRyaWNhbH0gQSByZWZlcmVuY2UgdG8gdGhpcyBjeWxpbmRyaWNhbC5cblx0ICovXG5cdHNldCggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gY3lsaW5kcmljYWwgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtDeWxpbmRyaWNhbH0gb3RoZXIgLSBUaGUgY3lsaW5kcmljYWwgdG8gY29weS5cblx0ICogQHJldHVybiB7Q3lsaW5kcmljYWx9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY3lsaW5kcmljYWwuXG5cdCAqL1xuXHRjb3B5KCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblx0XHR0aGlzLnkgPSBvdGhlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjeWxpbmRyaWNhbCBjb21wb25lbnRzIGZyb20gdGhlIGdpdmVuIHZlY3RvciB3aGljaCBpcyBhc3N1bWVkIHRvIGhvbGRcblx0ICogQ2FydGVzaWFuIGNvb3JkaW5hdGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgLSBUaGUgdmVjdG9yIHRvIHNldC5cblx0ICogQHJldHVybiB7Q3lsaW5kcmljYWx9IEEgcmVmZXJlbmNlIHRvIHRoaXMgY3lsaW5kcmljYWwuXG5cdCAqL1xuXHRzZXRGcm9tVmVjdG9yMyggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHYueCwgdi55LCB2LnogKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGN5bGluZHJpY2FsIGNvbXBvbmVudHMgZnJvbSB0aGUgZ2l2ZW4gQ2FydGVzaWFuIGNvb3JkaW5hdGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4IHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB4IHZhbHVlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geiAtIFRoZSB4IHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtDeWxpbmRyaWNhbH0gQSByZWZlcmVuY2UgdG8gdGhpcyBjeWxpbmRyaWNhbC5cblx0ICovXG5cdHNldEZyb21DYXJ0ZXNpYW5Db29yZHMoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCggeCAqIHggKyB6ICogeiApO1xuXHRcdHRoaXMudGhldGEgPSBNYXRoLmF0YW4yKCB4LCB6ICk7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIG5ldyBjeWxpbmRyaWNhbCB3aXRoIGNvcGllZCB2YWx1ZXMgZnJvbSB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtDeWxpbmRyaWNhbH0gQSBjbG9uZSBvZiB0aGlzIGluc3RhbmNlLlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIDJ4MiBtYXRyaXguXG4gKlxuICogQSBOb3RlIG9uIFJvdy1NYWpvciBhbmQgQ29sdW1uLU1ham9yIE9yZGVyaW5nOlxuICpcbiAqIFRoZSBjb25zdHJ1Y3RvciBhbmQge0BsaW5rIE1hdHJpeDIjc2V0fSBtZXRob2QgdGFrZSBhcmd1bWVudHMgaW5cbiAqIFtyb3ctbWFqb3Jde0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Jvdy1fYW5kX2NvbHVtbi1tYWpvcl9vcmRlciNDb2x1bW4tbWFqb3Jfb3JkZXJ9XG4gKiBvcmRlciwgd2hpbGUgaW50ZXJuYWxseSB0aGV5IGFyZSBzdG9yZWQgaW4gdGhlIHtAbGluayBNYXRyaXgyI2VsZW1lbnRzfSBhcnJheSBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuXG4gKiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZzpcbiAqIGBgYGpzXG4gKiBjb25zdCBtID0gbmV3IFRIUkVFLk1hdHJpeDIoKTtcbiAqIG0uc2V0KCAxMSwgMTIsXG4gKiAgICAgICAgMjEsIDIyICk7XG4gKiBgYGBcbiAqIHdpbGwgcmVzdWx0IGluIHRoZSBlbGVtZW50cyBhcnJheSBjb250YWluaW5nOlxuICogYGBganNcbiAqIG0uZWxlbWVudHMgPSBbIDExLCAyMSxcbiAqICAgICAgICAgICAgICAgIDEyLCAyMiBdO1xuICogYGBgXG4gKiBhbmQgaW50ZXJuYWxseSBhbGwgY2FsY3VsYXRpb25zIGFyZSBwZXJmb3JtZWQgdXNpbmcgY29sdW1uLW1ham9yIG9yZGVyaW5nLlxuICogSG93ZXZlciwgYXMgdGhlIGFjdHVhbCBvcmRlcmluZyBtYWtlcyBubyBkaWZmZXJlbmNlIG1hdGhlbWF0aWNhbGx5IGFuZFxuICogbW9zdCBwZW9wbGUgYXJlIHVzZWQgdG8gdGhpbmtpbmcgYWJvdXQgbWF0cmljZXMgaW4gcm93LW1ham9yIG9yZGVyLCB0aGVcbiAqIHRocmVlLmpzIGRvY3VtZW50YXRpb24gc2hvd3MgbWF0cmljZXMgaW4gcm93LW1ham9yIG9yZGVyLiBKdXN0IGJlYXIgaW5cbiAqIG1pbmQgdGhhdCBpZiB5b3UgYXJlIHJlYWRpbmcgdGhlIHNvdXJjZSBjb2RlLCB5b3UnbGwgaGF2ZSB0byB0YWtlIHRoZVxuICogdHJhbnNwb3NlIG9mIGFueSBtYXRyaWNlcyBvdXRsaW5lZCBoZXJlIHRvIG1ha2Ugc2Vuc2Ugb2YgdGhlIGNhbGN1bGF0aW9ucy5cbiAqL1xuY2xhc3MgTWF0cml4MiB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgMngyIG1hdHJpeC4gVGhlIGFyZ3VtZW50cyBhcmUgc3VwcG9zZWQgdG8gYmVcblx0ICogaW4gcm93LW1ham9yIG9yZGVyLiBJZiBubyBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0b3Jcblx0ICogaW5pdGlhbGl6ZXMgdGhlIG1hdHJpeCBhcyBhbiBpZGVudGl0eSBtYXRyaXguXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjExXSAtIDEtMSBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtuMTJdIC0gMS0yIG1hdHJpeCBlbGVtZW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW24yMV0gLSAyLTEgbWF0cml4IGVsZW1lbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbjIyXSAtIDItMiBtYXRyaXggZWxlbWVudC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBuMTEsIG4xMiwgbjIxLCBuMjIgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHRNYXRyaXgyLnByb3RvdHlwZS5pc01hdHJpeDIgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBjb2x1bW4tbWFqb3IgbGlzdCBvZiBtYXRyaXggdmFsdWVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PG51bWJlcj59XG5cdFx0ICovXG5cdFx0dGhpcy5lbGVtZW50cyA9IFtcblx0XHRcdDEsIDAsXG5cdFx0XHQwLCAxLFxuXHRcdF07XG5cblx0XHRpZiAoIG4xMSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnNldCggbjExLCBuMTIsIG4yMSwgbjIyICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoaXMgbWF0cml4IHRvIHRoZSAyeDIgaWRlbnRpdHkgbWF0cml4LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgyfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGlkZW50aXR5KCkge1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHQxLCAwLFxuXHRcdFx0MCwgMSxcblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBlbGVtZW50cyBvZiB0aGUgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFycmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGFycmF5IC0gVGhlIG1hdHJpeCBlbGVtZW50cyBpbiBjb2x1bW4tbWFqb3Igb3JkZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gSW5kZXggb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGFycmF5LlxuXHQgKiBAcmV0dXJuIHtNYXRyaXgyfSBBIHJlZmVyZW5jZSB0byB0aGlzIG1hdHJpeC5cblx0ICovXG5cdGZyb21BcnJheSggYXJyYXksIG9mZnNldCA9IDAgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA0OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBlbGVtZW50cyBvZiB0aGUgbWF0cml4LlRoZSBhcmd1bWVudHMgYXJlIHN1cHBvc2VkIHRvIGJlXG5cdCAqIGluIHJvdy1tYWpvciBvcmRlci5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IG4xMSAtIDEtMSBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG4xMiAtIDEtMiBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG4yMSAtIDItMSBtYXRyaXggZWxlbWVudC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IG4yMiAtIDItMiBtYXRyaXggZWxlbWVudC5cblx0ICogQHJldHVybiB7TWF0cml4Mn0gQSByZWZlcmVuY2UgdG8gdGhpcyBtYXRyaXguXG5cdCAqL1xuXHRzZXQoIG4xMSwgbjEyLCBuMjEsIG4yMiApIHtcblxuXHRcdGNvbnN0IHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyAyIF0gPSBuMTI7XG5cdFx0dGVbIDEgXSA9IG4yMTsgdGVbIDMgXSA9IG4yMjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJDQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBheGlzLWFsaWduZWQgYm91bmRpbmcgYm94IChBQUJCKSBpbiAyRCBzcGFjZS5cbiAqL1xuY2xhc3MgQm94MiB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYm91bmRpbmcgYm94LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IFttaW49KEluZmluaXR5LEluZmluaXR5KV0gLSBBIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBib3guXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gW21heD0oLUluZmluaXR5LC1JbmZpbml0eSldIC0gQSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgYm94LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG1pbiA9IG5ldyBWZWN0b3IyKCArIEluZmluaXR5LCArIEluZmluaXR5ICksIG1heCA9IG5ldyBWZWN0b3IyKCAtIEluZmluaXR5LCAtIEluZmluaXR5ICkgKSB7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzQm94MiA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIGJveC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IyfVxuXHRcdCAqL1xuXHRcdHRoaXMubWluID0gbWluO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBib3guXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yMn1cblx0XHQgKi9cblx0XHR0aGlzLm1heCA9IG1heDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGxvd2VyIGFuZCB1cHBlciBib3VuZGFyaWVzIG9mIHRoaXMgYm94LlxuXHQgKiBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgbWV0aG9kIG9ubHkgY29waWVzIHRoZSB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gb2JqZWN0cy5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSBtaW4gLSBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIGJveC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBtYXggLSBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIGJveC5cblx0ICogQHJldHVybiB7Qm94Mn0gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRzZXQoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHVwcGVyIGFuZCBsb3dlciBib3VuZHMgb2YgdGhpcyBib3ggc28gaXQgZW5jbG9zZXMgdGhlIHBvc2l0aW9uIGRhdGFcblx0ICogaW4gdGhlIGdpdmVuIGFycmF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5PFZlY3RvcjI+fSBwb2ludHMgLSBBbiBhcnJheSBob2xkaW5nIDJEIHBvc2l0aW9uIGRhdGEgYXMgaW5zdGFuY2VzIG9mIHtAbGluayBWZWN0b3IyfS5cblx0ICogQHJldHVybiB7Qm94Mn0gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRzZXRGcm9tUG9pbnRzKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KCBwb2ludHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDZW50ZXJzIHRoaXMgYm94IG9uIHRoZSBnaXZlbiBjZW50ZXIgdmVjdG9yIGFuZCBzZXRzIHRoaXMgYm94J3Mgd2lkdGgsIGhlaWdodCBhbmRcblx0ICogZGVwdGggdG8gdGhlIGdpdmVuIHNpemUgdmFsdWVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IGNlbnRlciAtIFRoZSBjZW50ZXIgb2YgdGhlIGJveC5cblx0ICogQHBhcmFtIHtWZWN0b3IyfSBzaXplIC0gVGhlIHggYW5kIHkgZGltZW5zaW9ucyBvZiB0aGUgYm94LlxuXHQgKiBAcmV0dXJuIHtCb3gyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICovXG5cdHNldEZyb21DZW50ZXJBbmRTaXplKCBjZW50ZXIsIHNpemUgKSB7XG5cblx0XHRjb25zdCBoYWxmU2l6ZSA9IF92ZWN0b3IkNC5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXHRcdHRoaXMubWluLmNvcHkoIGNlbnRlciApLnN1YiggaGFsZlNpemUgKTtcblx0XHR0aGlzLm1heC5jb3B5KCBjZW50ZXIgKS5hZGQoIGhhbGZTaXplICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgYm94IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0JveDJ9IEEgY2xvbmUgb2YgdGhpcyBpbnN0YW5jZS5cblx0ICovXG5cdGNsb25lKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgdGhlIGdpdmVuIGJveCB0byB0aGlzIGluc3RhbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDJ9IGJveCAtIFRoZSBib3ggdG8gY29weS5cblx0ICogQHJldHVybiB7Qm94Mn0gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRjb3B5KCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5jb3B5KCBib3gubWluICk7XG5cdFx0dGhpcy5tYXguY29weSggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBNYWtlcyB0aGlzIGJveCBlbXB0eSB3aGljaCBtZWFucyBpbiBlbmNsb3NlcyBhIHplcm8gc3BhY2UgaW4gMkQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0JveDJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0bWFrZUVtcHR5KCkge1xuXG5cdFx0dGhpcy5taW4ueCA9IHRoaXMubWluLnkgPSArIEluZmluaXR5O1xuXHRcdHRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gLSBJbmZpbml0eTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoaXMgYm94IGluY2x1ZGVzIHplcm8gcG9pbnRzIHdpdGhpbiBpdHMgYm91bmRzLlxuXHQgKiBOb3RlIHRoYXQgYSBib3ggd2l0aCBlcXVhbCBsb3dlciBhbmQgdXBwZXIgYm91bmRzIHN0aWxsIGluY2x1ZGVzIG9uZVxuXHQgKiBwb2ludCwgdGhlIG9uZSBib3RoIGJvdW5kcyBzaGFyZS5cblx0ICpcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGJveCBpcyBlbXB0eSBvciBub3QuXG5cdCAqL1xuXHRpc0VtcHR5KCkge1xuXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcblxuXHRcdHJldHVybiAoIHRoaXMubWF4LnggPCB0aGlzLm1pbi54ICkgfHwgKCB0aGlzLm1heC55IDwgdGhpcy5taW4ueSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgY2VudGVyIHBvaW50IG9mIHRoaXMgYm94LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBUaGUgY2VudGVyIHBvaW50LlxuXHQgKi9cblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5taW4sIHRoaXMubWF4ICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGltZW5zaW9ucyBvZiB0aGlzIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yMn0gVGhlIHNpemUuXG5cdCAqL1xuXHRnZXRTaXplKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KCAwLCAwICkgOiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5tYXgsIHRoaXMubWluICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHBhbmRzIHRoZSBib3VuZGFyaWVzIG9mIHRoaXMgYm94IHRvIGluY2x1ZGUgdGhlIGdpdmVuIHBvaW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBvaW50IC0gVGhlIHBvaW50IHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGJ5IHRoZSBib3VuZGluZyBib3guXG5cdCAqIEByZXR1cm4ge0JveDJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0ZXhwYW5kQnlQb2ludCggcG9pbnQgKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIHBvaW50ICk7XG5cdFx0dGhpcy5tYXgubWF4KCBwb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBFeHBhbmRzIHRoaXMgYm94IGVxdWlsYXRlcmFsbHkgYnkgdGhlIGdpdmVuIHZlY3Rvci4gVGhlIHdpZHRoIG9mIHRoaXNcblx0ICogYm94IHdpbGwgYmUgZXhwYW5kZWQgYnkgdGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWN0b3IgaW4gYm90aFxuXHQgKiBkaXJlY3Rpb25zLiBUaGUgaGVpZ2h0IG9mIHRoaXMgYm94IHdpbGwgYmUgZXhwYW5kZWQgYnkgdGhlIHkgY29tcG9uZW50IG9mXG5cdCAqIHRoZSB2ZWN0b3IgaW4gYm90aCBkaXJlY3Rpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHZlY3RvciAtIFRoZSB2ZWN0b3IgdGhhdCBzaG91bGQgZXhwYW5kIHRoZSBib3VuZGluZyBib3guXG5cdCAqIEByZXR1cm4ge0JveDJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0ZXhwYW5kQnlWZWN0b3IoIHZlY3RvciApIHtcblxuXHRcdHRoaXMubWluLnN1YiggdmVjdG9yICk7XG5cdFx0dGhpcy5tYXguYWRkKCB2ZWN0b3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRXhwYW5kcyBlYWNoIGRpbWVuc2lvbiBvZiB0aGUgYm94IGJ5IHRoZSBnaXZlbiBzY2FsYXIuIElmIG5lZ2F0aXZlLCB0aGVcblx0ICogZGltZW5zaW9ucyBvZiB0aGUgYm94IHdpbGwgYmUgY29udHJhY3RlZC5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhciAtIFRoZSBzY2FsYXIgdmFsdWUgdGhhdCBzaG91bGQgZXhwYW5kIHRoZSBib3VuZGluZyBib3guXG5cdCAqIEByZXR1cm4ge0JveDJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0ZXhwYW5kQnlTY2FsYXIoIHNjYWxhciApIHtcblxuXHRcdHRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTtcblx0XHR0aGlzLm1heC5hZGRTY2FsYXIoIHNjYWxhciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gcG9pbnQgbGllcyB3aXRoaW4gb3Igb24gdGhlIGJvdW5kYXJpZXMgb2YgdGhpcyBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gdGVzdC5cblx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB0aGUgYm91bmRpbmcgYm94IGNvbnRhaW5zIHRoZSBnaXZlbiBwb2ludCBvciBub3QuXG5cdCAqL1xuXHRjb250YWluc1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54ID49IHRoaXMubWluLnggJiYgcG9pbnQueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHRwb2ludC55ID49IHRoaXMubWluLnkgJiYgcG9pbnQueSA8PSB0aGlzLm1heC55O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBib3VuZGluZyBib3ggaW5jbHVkZXMgdGhlIGVudGlyZXR5IG9mIHRoZSBnaXZlbiBib3VuZGluZyBib3guXG5cdCAqIElmIHRoaXMgYm94IGFuZCB0aGUgZ2l2ZW4gb25lIGFyZSBpZGVudGljYWwsIHRoaXMgZnVuY3Rpb24gYWxzbyByZXR1cm5zIGB0cnVlYC5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gyfSBib3ggLSBUaGUgYm91bmRpbmcgYm94IHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGJvdW5kaW5nIGJveCBjb250YWlucyB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94IG9yIG5vdC5cblx0ICovXG5cdGNvbnRhaW5zQm94KCBib3ggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcblx0XHRcdHRoaXMubWluLnkgPD0gYm94Lm1pbi55ICYmIGJveC5tYXgueSA8PSB0aGlzLm1heC55O1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBvaW50IGFzIGEgcHJvcG9ydGlvbiBvZiB0aGlzIGJveCdzIHdpZHRoIGFuZCBoZWlnaHQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gcG9pbnQgLSBBIHBvaW50IGluIDJEIHNwYWNlLlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IyfSBBIHBvaW50IGFzIGEgcHJvcG9ydGlvbiBvZiB0aGlzIGJveCdzIHdpZHRoIGFuZCBoZWlnaHQuXG5cdCAqL1xuXHRnZXRQYXJhbWV0ZXIoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHQvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveFxuXHRcdC8vIGhhcyBhIHNpemUgZGltZW5zaW9uIG9mIDAuXG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldChcblx0XHRcdCggcG9pbnQueCAtIHRoaXMubWluLnggKSAvICggdGhpcy5tYXgueCAtIHRoaXMubWluLnggKSxcblx0XHRcdCggcG9pbnQueSAtIHRoaXMubWluLnkgKSAvICggdGhpcy5tYXgueSAtIHRoaXMubWluLnkgKVxuXHRcdCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gYm91bmRpbmcgYm94IGludGVyc2VjdHMgd2l0aCB0aGlzIGJvdW5kaW5nIGJveC5cblx0ICpcblx0ICogQHBhcmFtIHtCb3gyfSBib3ggLSBUaGUgYm91bmRpbmcgYm94IHRvIHRlc3QuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGdpdmVuIGJvdW5kaW5nIGJveCBpbnRlcnNlY3RzIHdpdGggdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRpbnRlcnNlY3RzQm94KCBib3ggKSB7XG5cblx0XHQvLyB1c2luZyA0IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9uc1xuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA+PSB0aGlzLm1pbi54ICYmIGJveC5taW4ueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHRib3gubWF4LnkgPj0gdGhpcy5taW4ueSAmJiBib3gubWluLnkgPD0gdGhpcy5tYXgueTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENsYW1wcyB0aGUgZ2l2ZW4gcG9pbnQgd2l0aGluIHRoZSBib3VuZHMgb2YgdGhpcyBib3guXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gY2xhbXAuXG5cdCAqIEBwYXJhbSB7VmVjdG9yMn0gdGFyZ2V0IC0gVGhlIHRhcmdldCB2ZWN0b3IgdGhhdCBpcyB1c2VkIHRvIHN0b3JlIHRoZSBtZXRob2QncyByZXN1bHQuXG5cdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IFRoZSBjbGFtcGVkIHBvaW50LlxuXHQgKi9cblx0Y2xhbXBQb2ludCggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBldWNsaWRlYW4gZGlzdGFuY2UgZnJvbSBhbnkgZWRnZSBvZiB0aGlzIGJveCB0byB0aGUgc3BlY2lmaWVkIHBvaW50LiBJZlxuXHQgKiB0aGUgZ2l2ZW4gcG9pbnQgbGllcyBpbnNpZGUgb2YgdGhpcyBib3gsIHRoZSBkaXN0YW5jZSB3aWxsIGJlIGAwYC5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IyfSBwb2ludCAtIFRoZSBwb2ludCB0byBjb21wdXRlIHRoZSBkaXN0YW5jZSB0by5cblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgZXVjbGlkZWFuIGRpc3RhbmNlLlxuXHQgKi9cblx0ZGlzdGFuY2VUb1BvaW50KCBwb2ludCApIHtcblxuXHRcdHJldHVybiB0aGlzLmNsYW1wUG9pbnQoIHBvaW50LCBfdmVjdG9yJDQgKS5kaXN0YW5jZVRvKCBwb2ludCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIGJvdW5kaW5nIGJveCBhbmQgdGhlIGdpdmVuIG9uZSwgc2V0dGluZyB0aGUgdXBwZXJcblx0ICogYm91bmQgb2YgdGhpcyBib3ggdG8gdGhlIGxlc3NlciBvZiB0aGUgdHdvIGJveGVzJyB1cHBlciBib3VuZHMgYW5kIHRoZVxuXHQgKiBsb3dlciBib3VuZCBvZiB0aGlzIGJveCB0byB0aGUgZ3JlYXRlciBvZiB0aGUgdHdvIGJveGVzJyBsb3dlciBib3VuZHMuIElmXG5cdCAqIHRoZXJlJ3Mgbm8gb3ZlcmxhcCwgbWFrZXMgdGhpcyBib3ggZW1wdHkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm94Mn0gYm94IC0gVGhlIGJvdW5kaW5nIGJveCB0byBpbnRlcnNlY3Qgd2l0aC5cblx0ICogQHJldHVybiB7Qm94Mn0gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHRpbnRlcnNlY3QoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0aWYgKCB0aGlzLmlzRW1wdHkoKSApIHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbXB1dGVzIHRoZSB1bmlvbiBvZiB0aGlzIGJveCBhbmQgYW5vdGhlciBhbmQgdGhlIGdpdmVuIG9uZSwgc2V0dGluZyB0aGUgdXBwZXJcblx0ICogYm91bmQgb2YgdGhpcyBib3ggdG8gdGhlIGdyZWF0ZXIgb2YgdGhlIHR3byBib3hlcycgdXBwZXIgYm91bmRzIGFuZCB0aGVcblx0ICogbG93ZXIgYm91bmQgb2YgdGhpcyBib3ggdG8gdGhlIGxlc3NlciBvZiB0aGUgdHdvIGJveGVzJyBsb3dlciBib3VuZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm94Mn0gYm94IC0gVGhlIGJvdW5kaW5nIGJveCB0aGF0IHdpbGwgYmUgdW5pb25lZCB3aXRoIHRoaXMgaW5zdGFuY2UuXG5cdCAqIEByZXR1cm4ge0JveDJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgYm91bmRpbmcgYm94LlxuXHQgKi9cblx0dW5pb24oIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1pbiggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1heCggYm94Lm1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBnaXZlbiBvZmZzZXQgdG8gYm90aCB0aGUgdXBwZXIgYW5kIGxvd2VyIGJvdW5kcyBvZiB0aGlzIGJvdW5kaW5nIGJveCxcblx0ICogZWZmZWN0aXZlbHkgbW92aW5nIGl0IGluIDJEIHNwYWNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IG9mZnNldCAtIFRoZSBvZmZzZXQgdGhhdCBzaG91bGQgYmUgdXNlZCB0byB0cmFuc2xhdGUgdGhlIGJvdW5kaW5nIGJveC5cblx0ICogQHJldHVybiB7Qm94Mn0gQSByZWZlcmVuY2UgdG8gdGhpcyBib3VuZGluZyBib3guXG5cdCAqL1xuXHR0cmFuc2xhdGUoIG9mZnNldCApIHtcblxuXHRcdHRoaXMubWluLmFkZCggb2Zmc2V0ICk7XG5cdFx0dGhpcy5tYXguYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhpcyBib3VuZGluZyBib3ggaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0JveDJ9IGJveCAtIFRoZSBib3ggdG8gdGVzdCBmb3IgZXF1YWxpdHkuXG5cdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhpcyBib3VuZGluZyBib3ggaXMgZXF1YWwgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKi9cblx0ZXF1YWxzKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59XG5cbmNvbnN0IF9zdGFydFAgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfc3RhcnRFbmQgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogQW4gYW5hbHl0aWNhbCBsaW5lIHNlZ21lbnQgaW4gM0Qgc3BhY2UgcmVwcmVzZW50ZWQgYnkgYSBzdGFydCBhbmQgZW5kIHBvaW50LlxuICovXG5jbGFzcyBMaW5lMyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgbGluZSBzZWdtZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFtzdGFydD0oMCwwLDApXSAtIFN0YXJ0IG9mIHRoZSBsaW5lIHNlZ21lbnQuXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW2VuZD0oMCwwLDApXSAtIEVuZCBvZiB0aGUgbGluZSBzZWdtZW50LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHN0YXJ0ID0gbmV3IFZlY3RvcjMoKSwgZW5kID0gbmV3IFZlY3RvcjMoKSApIHtcblxuXHRcdC8qKlxuXHRcdCAqIFN0YXJ0IG9mIHRoZSBsaW5lIHNlZ21lbnQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnN0YXJ0ID0gc3RhcnQ7XG5cblx0XHQvKipcblx0XHQgKiBFbmQgb2YgdGhlIGxpbmUgc2VnbWVudC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgc3RhcnQgYW5kIGVuZCB2YWx1ZXMgYnkgY29weWluZyB0aGUgZ2l2ZW4gdmVjdG9ycy5cblx0ICpcblx0ICogQHBhcmFtIHtWZWN0b3IzfSBzdGFydCAtIFRoZSBzdGFydCBwb2ludC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBlbmQgLSBUaGUgZW5kIHBvaW50LlxuXHQgKiBAcmV0dXJuIHtMaW5lM30gQSByZWZlcmVuY2UgdG8gdGhpcyBsaW5lIHNlZ21lbnQuXG5cdCAqL1xuXHRzZXQoIHN0YXJ0LCBlbmQgKSB7XG5cblx0XHR0aGlzLnN0YXJ0LmNvcHkoIHN0YXJ0ICk7XG5cdFx0dGhpcy5lbmQuY29weSggZW5kICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvcGllcyB0aGUgdmFsdWVzIG9mIHRoZSBnaXZlbiBsaW5lIHNlZ21lbnQgdG8gdGhpcyBpbnN0YW5jZS5cblx0ICpcblx0ICogQHBhcmFtIHtMaW5lM30gbGluZSAtIFRoZSBsaW5lIHNlZ21lbnQgdG8gY29weS5cblx0ICogQHJldHVybiB7TGluZTN9IEEgcmVmZXJlbmNlIHRvIHRoaXMgbGluZSBzZWdtZW50LlxuXHQgKi9cblx0Y29weSggbGluZSApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggbGluZS5zdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGxpbmUuZW5kICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNlbnRlciBvZiB0aGUgbGluZSBzZWdtZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgY2VudGVyIHBvaW50LlxuXHQgKi9cblx0Z2V0Q2VudGVyKCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMuc3RhcnQsIHRoaXMuZW5kICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGVsdGEgdmVjdG9yIG9mIHRoZSBsaW5lIHNlZ21lbnQncyBzdGFydCBhbmQgZW5kIHBvaW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtIFRoZSB0YXJnZXQgdmVjdG9yIHRoYXQgaXMgdXNlZCB0byBzdG9yZSB0aGUgbWV0aG9kJ3MgcmVzdWx0LlxuXHQgKiBAcmV0dXJuIHtWZWN0b3IzfSBUaGUgZGVsdGEgdmVjdG9yLlxuXHQgKi9cblx0ZGVsdGEoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHNxdWFyZWQgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhlIGxpbmUnIHN0YXJ0IGFuZCBlbmQgcG9pbnQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgRXVjbGlkZWFuIGRpc3RhbmNlLlxuXHQgKi9cblx0ZGlzdGFuY2VTcSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmVuZCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgRXVjbGlkZWFuIGRpc3RhbmNlIGJldHdlZW4gdGhlIGxpbmUnIHN0YXJ0IGFuZCBlbmQgcG9pbnQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIEV1Y2xpZGVhbiBkaXN0YW5jZS5cblx0ICovXG5cdGRpc3RhbmNlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyggdGhpcy5lbmQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB2ZWN0b3IgYXQgYSBjZXJ0YWluIHBvc2l0aW9uIGFsb25nIHRoZSBsaW5lIHNlZ21lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gQSB2YWx1ZSBiZXR3ZWVuIGBbMCwxXWAgdG8gcmVwcmVzZW50IGEgcG9zaXRpb24gYWxvbmcgdGhlIGxpbmUgc2VnbWVudC5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIGRlbHRhIHZlY3Rvci5cblx0ICovXG5cdGF0KCB0LCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBwb2ludCBwYXJhbWV0ZXIgYmFzZWQgb24gdGhlIGNsb3Nlc3QgcG9pbnQgYXMgcHJvamVjdGVkIG9uIHRoZSBsaW5lIHNlZ21lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcG9pbnQgZm9yIHdoaWNoIHRvIHJldHVybiBhIHBvaW50IHBhcmFtZXRlci5cblx0ICogQHBhcmFtIHtib29sZWFufSBjbGFtcFRvTGluZSAtIFdoZXRoZXIgdG8gY2xhbXAgdGhlIHJlc3VsdCB0byB0aGUgcmFuZ2UgYFswLDFdYCBvciBub3QuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBvaW50IHBhcmFtZXRlci5cblx0ICovXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoIHBvaW50LCBjbGFtcFRvTGluZSApIHtcblxuXHRcdF9zdGFydFAuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMuc3RhcnQgKTtcblx0XHRfc3RhcnRFbmQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHRcdGNvbnN0IHN0YXJ0RW5kMiA9IF9zdGFydEVuZC5kb3QoIF9zdGFydEVuZCApO1xuXHRcdGNvbnN0IHN0YXJ0RW5kX3N0YXJ0UCA9IF9zdGFydEVuZC5kb3QoIF9zdGFydFAgKTtcblxuXHRcdGxldCB0ID0gc3RhcnRFbmRfc3RhcnRQIC8gc3RhcnRFbmQyO1xuXG5cdFx0aWYgKCBjbGFtcFRvTGluZSApIHtcblxuXHRcdFx0dCA9IGNsYW1wKCB0LCAwLCAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGNsb3NldHMgcG9pbnQgb24gdGhlIGxpbmUgZm9yIGEgZ2l2ZW4gcG9pbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gcG9pbnQgLSBUaGUgcG9pbnQgdG8gY29tcHV0ZSB0aGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgbGluZSBmb3IuXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xhbXBUb0xpbmUgLSBXaGV0aGVyIHRvIGNsYW1wIHRoZSByZXN1bHQgdG8gdGhlIHJhbmdlIGBbMCwxXWAgb3Igbm90LlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IHRhcmdldCAtICBUaGUgdGFyZ2V0IHZlY3RvciB0aGF0IGlzIHVzZWQgdG8gc3RvcmUgdGhlIG1ldGhvZCdzIHJlc3VsdC5cblx0ICogQHJldHVybiB7VmVjdG9yM30gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIGxpbmUuXG5cdCAqL1xuXHRjbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgY2xhbXBUb0xpbmUsIHRhcmdldCApIHtcblxuXHRcdGNvbnN0IHQgPSB0aGlzLmNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIoIHBvaW50LCBjbGFtcFRvTGluZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGVsdGEoIHRhcmdldCApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnN0YXJ0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIGEgNHg0IHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byB0aGlzIGxpbmUgc2VnbWVudC5cblx0ICpcblx0ICogQHBhcmFtIHtNYXRyaXg0fSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuXHQgKiBAcmV0dXJuIHtMaW5lM30gQSByZWZlcmVuY2UgdG8gdGhpcyBsaW5lIHNlZ21lbnQuXG5cdCAqL1xuXHRhcHBseU1hdHJpeDQoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuc3RhcnQuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblx0XHR0aGlzLmVuZC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGlzIGxpbmUgc2VnbWVudCBpcyBlcXVhbCB3aXRoIHRoZSBnaXZlbiBvbmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGluZTN9IGxpbmUgLSBUaGUgbGluZSBzZWdtZW50IHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoaXMgbGluZSBzZWdtZW50IGlzIGVxdWFsIHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICovXG5cdGVxdWFscyggbGluZSApIHtcblxuXHRcdHJldHVybiBsaW5lLnN0YXJ0LmVxdWFscyggdGhpcy5zdGFydCApICYmIGxpbmUuZW5kLmVxdWFscyggdGhpcy5lbmQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBuZXcgbGluZSBzZWdtZW50IHdpdGggY29waWVkIHZhbHVlcyBmcm9tIHRoaXMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEByZXR1cm4ge0xpbmUzfSBBIGNsb25lIG9mIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRjbG9uZSgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3ZlY3RvciQzID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuXG4vKipcbiAqIFRoaXMgZGlzcGxheXMgYSBjb25lIHNoYXBlZCBoZWxwZXIgb2JqZWN0IGZvciBhIHtAbGluayBTcG90TGlnaHR9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBzcG90TGlnaHQgPSBuZXcgVEhSRUUuU3BvdExpZ2h0KCAweGZmZmZmZiApO1xuICogc3BvdExpZ2h0LnBvc2l0aW9uLnNldCggMTAsIDEwLCAxMCApO1xuICogc2NlbmUuYWRkKCBzcG90TGlnaHQgKTtcbiAqXG4gKiBjb25zdCBzcG90TGlnaHRIZWxwZXIgPSBuZXcgVEhSRUUuU3BvdExpZ2h0SGVscGVyKCBzcG90TGlnaHQgKTtcbiAqIHNjZW5lLmFkZCggc3BvdExpZ2h0SGVscGVyICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgT2JqZWN0M0RcbiAqL1xuY2xhc3MgU3BvdExpZ2h0SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHNwb3QgbGlnaHQgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0hlbWlzcGhlcmVMaWdodH0gbGlnaHQgLSBUaGUgbGlnaHQgdG8gYmUgdmlzdWFsaXplZC5cblx0ICogQHBhcmFtIHtudW1iZXJ8Q29sb3J8c3RyaW5nfSBbY29sb3JdIC0gVGhlIGhlbHBlcidzIGNvbG9yLiBJZiBub3Qgc2V0LCB0aGUgaGVscGVyIHdpbGwgdGFrZVxuXHQgKiB0aGUgY29sb3Igb2YgdGhlIGxpZ2h0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIGxpZ2h0LCBjb2xvciApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbGlnaHQgYmVpbmcgdmlzdWFsaXplZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtTcG90TGlnaHR9XG5cdFx0ICovXG5cdFx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgcGFyYW1ldGVyIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IuXG5cdFx0ICogSWYgbm90IHNldCwgdGhlIGhlbHBlciB3aWxsIHRha2UgdGhlIGNvbG9yIG9mIHRoZSBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ8Q29sb3J8c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdHRoaXMudHlwZSA9ICdTcG90TGlnaHRIZWxwZXInO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFtcblx0XHRcdDAsIDAsIDAsIFx0MCwgMCwgMSxcblx0XHRcdDAsIDAsIDAsIFx0MSwgMCwgMSxcblx0XHRcdDAsIDAsIDAsXHQtMSwgMCwgMSxcblx0XHRcdDAsIDAsIDAsIFx0MCwgMSwgMSxcblx0XHRcdDAsIDAsIDAsIFx0MCwgLTEsIDFcblx0XHRdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMSwgbCA9IDMyOyBpIDwgbDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0Y29uc3QgcDEgPSAoIGkgLyBsICkgKiBNYXRoLlBJICogMjtcblx0XHRcdGNvbnN0IHAyID0gKCBqIC8gbCApICogTWF0aC5QSSAqIDI7XG5cblx0XHRcdHBvc2l0aW9ucy5wdXNoKFxuXHRcdFx0XHRNYXRoLmNvcyggcDEgKSwgTWF0aC5zaW4oIHAxICksIDEsXG5cdFx0XHRcdE1hdGguY29zKCBwMiApLCBNYXRoLnNpbiggcDIgKSwgMVxuXHRcdFx0KTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHR0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0XHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGhlbHBlciB0byBtYXRjaCB0aGUgcG9zaXRpb24gYW5kIGRpcmVjdGlvbiBvZiB0aGVcblx0ICogbGlnaHQgYmVpbmcgdmlzdWFsaXplZC5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblxuXHRcdHRoaXMubGlnaHQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cdFx0dGhpcy5saWdodC50YXJnZXQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHQvLyB1cGRhdGUgdGhlIGxvY2FsIG1hdHJpeCBiYXNlZCBvbiB0aGUgcGFyZW50IGFuZCBsaWdodCB0YXJnZXQgdHJhbnNmb3Jtc1xuXHRcdGlmICggdGhpcy5wYXJlbnQgKSB7XG5cblx0XHRcdHRoaXMucGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlICk7XG5cblx0XHRcdHRoaXMubWF0cml4XG5cdFx0XHRcdC5jb3B5KCB0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdC5pbnZlcnQoKVxuXHRcdFx0XHQubXVsdGlwbHkoIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubWF0cml4LmNvcHkoIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0Y29uc3QgY29uZUxlbmd0aCA9IHRoaXMubGlnaHQuZGlzdGFuY2UgPyB0aGlzLmxpZ2h0LmRpc3RhbmNlIDogMTAwMDtcblx0XHRjb25zdCBjb25lV2lkdGggPSBjb25lTGVuZ3RoICogTWF0aC50YW4oIHRoaXMubGlnaHQuYW5nbGUgKTtcblxuXHRcdHRoaXMuY29uZS5zY2FsZS5zZXQoIGNvbmVXaWR0aCwgY29uZVdpZHRoLCBjb25lTGVuZ3RoICk7XG5cblx0XHRfdmVjdG9yJDMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0dGhpcy5jb25lLmxvb2tBdCggX3ZlY3RvciQzICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY29uc3QgX3ZlY3RvciQyID0gLypAX19QVVJFX18qLyBuZXcgVmVjdG9yMygpO1xuY29uc3QgX2JvbmVNYXRyaXggPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5jb25zdCBfbWF0cml4V29ybGRJbnYgPSAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXg0KCk7XG5cbi8qKlxuICogQSBoZWxwZXIgb2JqZWN0IHRvIGFzc2lzdCB3aXRoIHZpc3VhbGl6aW5nIGEge0BsaW5rIFNrZWxldG9ufS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgaGVscGVyID0gbmV3IFRIUkVFLlNrZWxldG9uSGVscGVyKCBza2lubmVkTWVzaCApO1xuICogc2NlbmUuYWRkKCBoZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaW5lU2VnbWVudHNcbiAqL1xuY2xhc3MgU2tlbGV0b25IZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGhlbWlzcGhlcmUgbGlnaHQgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgLSAgVXN1YWxseSBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgU2tpbm5lZE1lc2h9LiBIb3dldmVyLCBhbnkgM0Qgb2JqZWN0XG5cdCAqIGNhbiBiZSB1c2VkIGlmIGl0IHJlcHJlc2VudHMgYSBoaWVyYXJjaHkgb2YgYm9uZXMgKHNlZSB7QGxpbmsgQm9uZX0pLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGJvbmVzID0gZ2V0Qm9uZUxpc3QoIG9iamVjdCApO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW107XG5cdFx0Y29uc3QgY29sb3JzID0gW107XG5cblx0XHRjb25zdCBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTtcblx0XHRjb25zdCBjb2xvcjIgPSBuZXcgQ29sb3IoIDAsIDEsIDAgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgYm9uZSA9IGJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgZGVwdGhUZXN0OiBmYWxzZSwgZGVwdGhXcml0ZTogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIGZsYWcgY2FuIGJlIHVzZWQgZm9yIHR5cGUgdGVzdGluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmlzU2tlbGV0b25IZWxwZXIgPSB0cnVlO1xuXG5cdFx0dGhpcy50eXBlID0gJ1NrZWxldG9uSGVscGVyJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvYmplY3QgYmVpbmcgdmlzdWFsaXplZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3QzRH1cblx0XHQgKi9cblx0XHR0aGlzLnJvb3QgPSBvYmplY3Q7XG5cblx0XHQvKipcblx0XHQgKiBoZSBsaXN0IG9mIGJvbmVzIHRoYXQgdGhlIGhlbHBlciB2aXN1YWxpemVzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0FycmF5PEJvbmU+fVxuXHRcdCAqL1xuXHRcdHRoaXMuYm9uZXMgPSBib25lcztcblxuXHRcdHRoaXMubWF0cml4ID0gb2JqZWN0Lm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdH1cblxuXHR1cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKSB7XG5cblx0XHRjb25zdCBib25lcyA9IHRoaXMuYm9uZXM7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblxuXHRcdF9tYXRyaXhXb3JsZEludi5jb3B5KCB0aGlzLnJvb3QubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaiA9IDA7IGkgPCBib25lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGJvbmUgPSBib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0XHRfYm9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBfbWF0cml4V29ybGRJbnYsIGJvbmUubWF0cml4V29ybGQgKTtcblx0XHRcdFx0X3ZlY3RvciQyLnNldEZyb21NYXRyaXhQb3NpdGlvbiggX2JvbmVNYXRyaXggKTtcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqLCBfdmVjdG9yJDIueCwgX3ZlY3RvciQyLnksIF92ZWN0b3IkMi56ICk7XG5cblx0XHRcdFx0X2JvbmVNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggX21hdHJpeFdvcmxkSW52LCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHRfdmVjdG9yJDIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBfYm9uZU1hdHJpeCApO1xuXHRcdFx0XHRwb3NpdGlvbi5zZXRYWVooIGogKyAxLCBfdmVjdG9yJDIueCwgX3ZlY3RvciQyLnksIF92ZWN0b3IkMi56ICk7XG5cblx0XHRcdFx0aiArPSAyO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRzdXBlci51cGRhdGVNYXRyaXhXb3JsZCggZm9yY2UgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuXG5mdW5jdGlvbiBnZXRCb25lTGlzdCggb2JqZWN0ICkge1xuXG5cdGNvbnN0IGJvbmVMaXN0ID0gW107XG5cblx0aWYgKCBvYmplY3QuaXNCb25lID09PSB0cnVlICkge1xuXG5cdFx0Ym9uZUxpc3QucHVzaCggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IG9iamVjdC5jaGlsZHJlbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRib25lTGlzdC5wdXNoKCAuLi5nZXRCb25lTGlzdCggb2JqZWN0LmNoaWxkcmVuWyBpIF0gKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYm9uZUxpc3Q7XG5cbn1cblxuLyoqXG4gKiBUaGlzIGRpc3BsYXlzIGEgaGVscGVyIG9iamVjdCBjb25zaXN0aW5nIG9mIGEgc3BoZXJpY2FsIG1lc2ggZm9yXG4gKiB2aXN1YWxpemluZyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgUG9pbnRMaWdodH0uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBvaW50TGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCggMHhmZjAwMDAsIDEsIDEwMCApO1xuICogcG9pbnRMaWdodC5wb3NpdGlvbi5zZXQoIDEwLCAxMCwgMTAgKTtcbiAqIHNjZW5lLmFkZCggcG9pbnRMaWdodCApO1xuICpcbiAqIGNvbnN0IHNwaGVyZVNpemUgPSAxO1xuICogY29uc3QgcG9pbnRMaWdodEhlbHBlciA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0SGVscGVyKCBwb2ludExpZ2h0LCBzcGhlcmVTaXplICk7XG4gKiBzY2VuZS5hZGQoIHBvaW50TGlnaHRIZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBNZXNoXG4gKi9cbmNsYXNzIFBvaW50TGlnaHRIZWxwZXIgZXh0ZW5kcyBNZXNoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBwb2ludCBsaWdodCBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7UG9pbnRMaWdodH0gbGlnaHQgLSBUaGUgbGlnaHQgdG8gYmUgdmlzdWFsaXplZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzcGhlcmVTaXplPTFdIC0gVGhlIHNpemUgb2YgdGhlIHNwaGVyZSBoZWxwZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gW2NvbG9yXSAtIFRoZSBoZWxwZXIncyBjb2xvci4gSWYgbm90IHNldCwgdGhlIGhlbHBlciB3aWxsIHRha2Vcblx0ICogdGhlIGNvbG9yIG9mIHRoZSBsaWdodC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc3BoZXJlU2l6ZSwgY29sb3IgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBTcGhlcmVHZW9tZXRyeSggc3BoZXJlU2l6ZSwgNCwgMiApO1xuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0IGJlaW5nIHZpc3VhbGl6ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7SGVtaXNwaGVyZUxpZ2h0fVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHQgPSBsaWdodDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb2xvciBwYXJhbWV0ZXIgcGFzc2VkIGluIHRoZSBjb25zdHJ1Y3Rvci5cblx0XHQgKiBJZiBub3Qgc2V0LCB0aGUgaGVscGVyIHdpbGwgdGFrZSB0aGUgY29sb3Igb2YgdGhlIGxpZ2h0LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcnxDb2xvcnxzdHJpbmd9XG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvciA9IGNvbG9yO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BvaW50TGlnaHRIZWxwZXInO1xuXG5cdFx0dGhpcy5tYXRyaXggPSB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXG5cdFx0Lypcblx0Ly8gVE9ETzogZGVsZXRlIHRoaXMgY29tbWVudD9cblx0Y29uc3QgZGlzdGFuY2VHZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KCAxLCAyICk7XG5cdGNvbnN0IGRpc3RhbmNlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleENvbG9yLCBmb2c6IGZhbHNlLCB3aXJlZnJhbWU6IHRydWUsIG9wYWNpdHk6IDAuMSwgdHJhbnNwYXJlbnQ6IHRydWUgfSApO1xuXG5cdHRoaXMubGlnaHRTcGhlcmUgPSBuZXcgVEhSRUUuTWVzaCggYnVsYkdlb21ldHJ5LCBidWxiTWF0ZXJpYWwgKTtcblx0dGhpcy5saWdodERpc3RhbmNlID0gbmV3IFRIUkVFLk1lc2goIGRpc3RhbmNlR2VvbWV0cnksIGRpc3RhbmNlTWF0ZXJpYWwgKTtcblxuXHRjb25zdCBkID0gbGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7XG5cblx0fVxuXG5cdHRoaXMuYWRkKCB0aGlzLmxpZ2h0RGlzdGFuY2UgKTtcblx0Ki9cblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGhlbHBlciB0byBtYXRjaCB0aGUgcG9zaXRpb24gb2YgdGhlXG5cdCAqIGxpZ2h0IGJlaW5nIHZpc3VhbGl6ZWQuXG5cdCAqL1xuXHR1cGRhdGUoKSB7XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdC8qXG5cdFx0Y29uc3QgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7XG5cblx0XHRpZiAoIGQgPT09IDAuMCApIHtcblxuXHRcdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gdHJ1ZTtcblx0XHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHRcdH1cblx0XHQqL1xuXG5cdH1cblxufVxuXG5jb25zdCBfdmVjdG9yJDEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfY29sb3IxID0gLypAX19QVVJFX18qLyBuZXcgQ29sb3IoKTtcbmNvbnN0IF9jb2xvcjIgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvcigpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB2aXN1YWwgYWlkIGNvbnNpc3Rpbmcgb2YgYSBzcGhlcmljYWwgbWVzaCBmb3IgYVxuICogZ2l2ZW4ge0BsaW5rIEhlbWlzcGhlcmVMaWdodH0uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGxpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCggMHhmZmZmYmIsIDB4MDgwODIwLCAxICk7XG4gKiBjb25zdCBoZWxwZXIgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0SGVscGVyKCBsaWdodCwgNSApO1xuICogc2NlbmUuYWRkKCBoZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBIZW1pc3BoZXJlTGlnaHRIZWxwZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgaGVtaXNwaGVyZSBsaWdodCBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7SGVtaXNwaGVyZUxpZ2h0fSBsaWdodCAtIFRoZSBsaWdodCB0byBiZSB2aXN1YWxpemVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gLSBUaGUgc2l6ZSBvZiB0aGUgbWVzaCB1c2VkIHRvIHZpc3VhbGl6ZSB0aGUgbGlnaHQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gW2NvbG9yXSAtIFRoZSBoZWxwZXIncyBjb2xvci4gSWYgbm90IHNldCwgdGhlIGhlbHBlciB3aWxsIHRha2Vcblx0ICogdGhlIGNvbG9yIG9mIHRoZSBsaWdodC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0IGJlaW5nIHZpc3VhbGl6ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7SGVtaXNwaGVyZUxpZ2h0fVxuXHRcdCAqL1xuXHRcdHRoaXMubGlnaHQgPSBsaWdodDtcblxuXHRcdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY29sb3IgcGFyYW1ldGVyIHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IuXG5cdFx0ICogSWYgbm90IHNldCwgdGhlIGhlbHBlciB3aWxsIHRha2UgdGhlIGNvbG9yIG9mIHRoZSBsaWdodC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ8Q29sb3J8c3RyaW5nfVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRcdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHRIZWxwZXInO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBuZXcgT2N0YWhlZHJvbkdlb21ldHJ5KCBzaXplICk7XG5cdFx0Z2VvbWV0cnkucm90YXRlWSggTWF0aC5QSSAqIDAuNSApO1xuXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyB3aXJlZnJhbWU6IHRydWUsIGZvZzogZmFsc2UsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblx0XHRpZiAoIHRoaXMuY29sb3IgPT09IHVuZGVmaW5lZCApIHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzID0gdHJ1ZTtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICk7XG5cdFx0Y29uc3QgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggcG9zaXRpb24uY291bnQgKiAzICk7XG5cblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgaGVscGVyIHRvIG1hdGNoIHRoZSBwb3NpdGlvbiBhbmQgZGlyZWN0aW9uIG9mIHRoZVxuXHQgKiBsaWdodCBiZWluZyB2aXN1YWxpemVkLlxuXHQgKi9cblx0dXBkYXRlKCkge1xuXG5cdFx0Y29uc3QgbWVzaCA9IHRoaXMuY2hpbGRyZW5bIDAgXTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgY29sb3JzID0gbWVzaC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdjb2xvcicgKTtcblxuXHRcdFx0X2NvbG9yMS5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cdFx0XHRfY29sb3IyLmNvcHkoIHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY29sb3JzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBjb2xvciA9ICggaSA8ICggbCAvIDIgKSApID8gX2NvbG9yMSA6IF9jb2xvcjI7XG5cblx0XHRcdFx0Y29sb3JzLnNldFhZWiggaSwgY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbG9ycy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHR0aGlzLmxpZ2h0LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0bWVzaC5sb29rQXQoIF92ZWN0b3IkMS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKS5uZWdhdGUoKSApO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoZSBoZWxwZXIgaXMgYW4gb2JqZWN0IHRvIGRlZmluZSBncmlkcy4gR3JpZHMgYXJlIHR3by1kaW1lbnNpb25hbFxuICogYXJyYXlzIG9mIGxpbmVzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBzaXplID0gMTA7XG4gKiBjb25zdCBkaXZpc2lvbnMgPSAxMDtcbiAqXG4gKiBjb25zdCBncmlkSGVscGVyID0gbmV3IFRIUkVFLkdyaWRIZWxwZXIoIHNpemUsIGRpdmlzaW9ucyApO1xuICogc2NlbmUuYWRkKCBncmlkSGVscGVyICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTGluZVNlZ21lbnRzXG4gKi9cbmNsYXNzIEdyaWRIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGdyaWQgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MTBdIC0gVGhlIHNpemUgb2YgdGhlIGdyaWQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbZGl2aXNpb25zPTEwXSAtIFRoZSBudW1iZXIgb2YgZGl2aXNpb25zIGFjcm9zcyB0aGUgZ3JpZC5cblx0ICogQHBhcmFtIHtudW1iZXJ8Q29sb3J8c3RyaW5nfSBbY29sb3IxPTB4NDQ0NDQ0XSAtIFRoZSBjb2xvciBvZiB0aGUgY2VudGVyIGxpbmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gW2NvbG9yMj0weDg4ODg4OF0gLSBUaGUgY29sb3Igb2YgdGhlIGxpbmVzIG9mIHRoZSBncmlkLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHNpemUgPSAxMCwgZGl2aXNpb25zID0gMTAsIGNvbG9yMSA9IDB4NDQ0NDQ0LCBjb2xvcjIgPSAweDg4ODg4OCApIHtcblxuXHRcdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICk7XG5cdFx0Y29sb3IyID0gbmV3IENvbG9yKCBjb2xvcjIgKTtcblxuXHRcdGNvbnN0IGNlbnRlciA9IGRpdmlzaW9ucyAvIDI7XG5cdFx0Y29uc3Qgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XG5cdFx0Y29uc3QgaGFsZlNpemUgPSBzaXplIC8gMjtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW10sIGNvbG9ycyA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBqID0gMCwgayA9IC0gaGFsZlNpemU7IGkgPD0gZGl2aXNpb25zOyBpICsrLCBrICs9IHN0ZXAgKSB7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIC0gaGFsZlNpemUsIDAsIGssIGhhbGZTaXplLCAwLCBrICk7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCBrLCAwLCAtIGhhbGZTaXplLCBrLCAwLCBoYWxmU2l6ZSApO1xuXG5cdFx0XHRjb25zdCBjb2xvciA9IGkgPT09IGNlbnRlciA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblxuXHRcdH1cblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdHcmlkSGVscGVyJztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBUaGlzIGhlbHBlciBpcyBhbiBvYmplY3QgdG8gZGVmaW5lIHBvbGFyIGdyaWRzLiBHcmlkcyBhcmVcbiAqIHR3by1kaW1lbnNpb25hbCBhcnJheXMgb2YgbGluZXMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHJhZGl1cyA9IDEwO1xuICogY29uc3Qgc2VjdG9ycyA9IDE2O1xuICogY29uc3QgcmluZ3MgPSA4O1xuICogY29uc3QgZGl2aXNpb25zID0gNjQ7XG4gKlxuICogY29uc3QgaGVscGVyID0gbmV3IFRIUkVFLlBvbGFyR3JpZEhlbHBlciggcmFkaXVzLCBzZWN0b3JzLCByaW5ncywgZGl2aXNpb25zICk7XG4gKiBzY2VuZS5hZGQoIGhlbHBlciApO1xuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIExpbmVTZWdtZW50c1xuICovXG5jbGFzcyBQb2xhckdyaWRIZWxwZXIgZXh0ZW5kcyBMaW5lU2VnbWVudHMge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IHBvbGFyIGdyaWQgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1cz0xMF0gLSBUaGUgcmFkaXVzIG9mIHRoZSBwb2xhciBncmlkLiBUaGlzIGNhbiBiZSBhbnkgcG9zaXRpdmUgbnVtYmVyLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NlY3RvcnM9MTZdIC0gVGhlIG51bWJlciBvZiBzZWN0b3JzIHRoZSBncmlkIHdpbGwgYmUgZGl2aWRlZCBpbnRvLiBUaGlzIGNhbiBiZSBhbnkgcG9zaXRpdmUgaW50ZWdlci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtyaW5ncz0xNl0gLSBUaGUgbnVtYmVyIG9mIHJpbmdzLiBUaGlzIGNhbiBiZSBhbnkgcG9zaXRpdmUgaW50ZWdlci5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkaXZpc2lvbnM9NjRdIC0gVGhlIG51bWJlciBvZiBsaW5lIHNlZ21lbnRzIHVzZWQgZm9yIGVhY2ggY2lyY2xlLiBUaGlzIGNhbiBiZSBhbnkgcG9zaXRpdmUgaW50ZWdlci5cblx0ICogQHBhcmFtIHtudW1iZXJ8Q29sb3J8c3RyaW5nfSBbY29sb3IxPTB4NDQ0NDQ0XSAtIFRoZSBmaXJzdCBjb2xvciB1c2VkIGZvciBncmlkIGVsZW1lbnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcnxDb2xvcnxzdHJpbmd9IFtjb2xvcjI9MHg4ODg4ODhdIC0gIFRoZSBzZWNvbmQgY29sb3IgdXNlZCBmb3IgZ3JpZCBlbGVtZW50cy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCByYWRpdXMgPSAxMCwgc2VjdG9ycyA9IDE2LCByaW5ncyA9IDgsIGRpdmlzaW9ucyA9IDY0LCBjb2xvcjEgPSAweDQ0NDQ0NCwgY29sb3IyID0gMHg4ODg4ODggKSB7XG5cblx0XHRjb2xvcjEgPSBuZXcgQ29sb3IoIGNvbG9yMSApO1xuXHRcdGNvbG9yMiA9IG5ldyBDb2xvciggY29sb3IyICk7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IGNvbG9ycyA9IFtdO1xuXG5cdFx0Ly8gY3JlYXRlIHRoZSBzZWN0b3JzXG5cblx0XHRpZiAoIHNlY3RvcnMgPiAxICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBzZWN0b3JzOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHYgPSAoIGkgLyBzZWN0b3JzICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdFx0Y29uc3QgeCA9IE1hdGguc2luKCB2ICkgKiByYWRpdXM7XG5cdFx0XHRcdGNvbnN0IHogPSBNYXRoLmNvcyggdiApICogcmFkaXVzO1xuXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXG5cdFx0XHRcdGNvbnN0IGNvbG9yID0gKCBpICYgMSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGNyZWF0ZSB0aGUgcmluZ3NcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHJpbmdzOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdFx0Y29uc3QgciA9IHJhZGl1cyAtICggcmFkaXVzIC8gcmluZ3MgKiBpICk7XG5cblx0XHRcdGZvciAoIGxldCBqID0gMDsgaiA8IGRpdmlzaW9uczsgaiArKyApIHtcblxuXHRcdFx0XHQvLyBmaXJzdCB2ZXJ0ZXhcblxuXHRcdFx0XHRsZXQgdiA9ICggaiAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHRcdGxldCB4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHRcdGxldCB6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXHRcdFx0XHRjb2xvcnMucHVzaCggY29sb3IuciwgY29sb3IuZywgY29sb3IuYiApO1xuXG5cdFx0XHRcdC8vIHNlY29uZCB2ZXJ0ZXhcblxuXHRcdFx0XHR2ID0gKCAoIGogKyAxICkgLyBkaXZpc2lvbnMgKSAqICggTWF0aC5QSSAqIDIgKTtcblxuXHRcdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHRcdHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cdFx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdHRoaXMudHlwZSA9ICdQb2xhckdyaWRIZWxwZXInO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG5jb25zdCBfdjEgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjIgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdjMgPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogSGVscGVyIG9iamVjdCB0byBhc3Npc3Qgd2l0aCB2aXN1YWxpemluZyBhIHtAbGluayBEaXJlY3Rpb25hbExpZ2h0fSdzXG4gKiBlZmZlY3Qgb24gdGhlIHNjZW5lLiBUaGlzIGNvbnNpc3RzIG9mIHBsYW5lIGFuZCBhIGxpbmUgcmVwcmVzZW50aW5nIHRoZVxuICogbGlnaHQncyBwb3NpdGlvbiBhbmQgZGlyZWN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBsaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCAweEZGRkZGRiApO1xuICogc2NlbmUuYWRkKCBsaWdodCApO1xuICpcbiAqIGNvbnN0IGhlbHBlciA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyKCBsaWdodCwgNSApO1xuICogc2NlbmUuYWRkKCBoZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBPYmplY3QzRFxuICovXG5jbGFzcyBEaXJlY3Rpb25hbExpZ2h0SGVscGVyIGV4dGVuZHMgT2JqZWN0M0Qge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGRpcmVjdGlvbmFsIGxpZ2h0IGhlbHBlci5cblx0ICpcblx0ICogQHBhcmFtIHtEaXJlY3Rpb25hbExpZ2h0fSBsaWdodCAtIFRoZSBsaWdodCB0byBiZSB2aXN1YWxpemVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gLSBUaGUgZGltZW5zaW9ucyBvZiB0aGUgcGxhbmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gW2NvbG9yXSAtIFRoZSBoZWxwZXIncyBjb2xvci4gSWYgbm90IHNldCwgdGhlIGhlbHBlciB3aWxsIHRha2Vcblx0ICogdGhlIGNvbG9yIG9mIHRoZSBsaWdodC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxpZ2h0IGJlaW5nIHZpc3VhbGl6ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7RGlyZWN0aW9uYWxMaWdodH1cblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XG5cblx0XHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNvbG9yIHBhcmFtZXRlciBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuXHRcdCAqIElmIG5vdCBzZXQsIHRoZSBoZWxwZXIgd2lsbCB0YWtlIHRoZSBjb2xvciBvZiB0aGUgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfENvbG9yfHN0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLmNvbG9yID0gY29sb3I7XG5cblx0XHR0aGlzLnR5cGUgPSAnRGlyZWN0aW9uYWxMaWdodEhlbHBlcic7XG5cblx0XHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xuXG5cdFx0bGV0IGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggW1xuXHRcdFx0LSBzaXplLCBzaXplLCAwLFxuXHRcdFx0c2l6ZSwgc2l6ZSwgMCxcblx0XHRcdHNpemUsIC0gc2l6ZSwgMCxcblx0XHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxuXHRcdFx0LSBzaXplLCBzaXplLCAwXG5cdFx0XSwgMyApICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHQvKipcblx0XHQgKiBDb250YWlucyB0aGUgbGluZSBzaG93aW5nIHRoZSBsb2NhdGlvbiBvZiB0aGUgZGlyZWN0aW9uYWwgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TGluZX1cblx0XHQgKi9cblx0XHR0aGlzLmxpZ2h0UGxhbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0dGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApO1xuXG5cdFx0Z2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDAsIDEgXSwgMyApICk7XG5cblx0XHQvKipcblx0XHQgKiBSZXByZXNlbnRzIHRoZSB0YXJnZXQgbGluZSBvZiB0aGUgZGlyZWN0aW9uYWwgbGlnaHQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7TGluZX1cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0dGhpcy5hZGQoIHRoaXMudGFyZ2V0TGluZSApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHQgKiBtZXRob2Qgd2hlbmV2ZXIgdGhpcyBpbnN0YW5jZSBpcyBubyBsb25nZXIgdXNlZCBpbiB5b3VyIGFwcC5cblx0ICovXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLmxpZ2h0UGxhbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgaGVscGVyIHRvIG1hdGNoIHRoZSBwb3NpdGlvbiBhbmQgZGlyZWN0aW9uIG9mIHRoZVxuXHQgKiBsaWdodCBiZWluZyB2aXN1YWxpemVkLlxuXHQgKi9cblx0dXBkYXRlKCkge1xuXG5cdFx0dGhpcy5saWdodC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblx0XHR0aGlzLmxpZ2h0LnRhcmdldC51cGRhdGVXb3JsZE1hdHJpeCggdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdF92MS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRfdjIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdF92My5zdWJWZWN0b3JzKCBfdjIsIF92MSApO1xuXG5cdFx0dGhpcy5saWdodFBsYW5lLmxvb2tBdCggX3YyICk7XG5cblx0XHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXHRcdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmNvbG9yLmNvcHkoIHRoaXMubGlnaHQuY29sb3IgKTtcblx0XHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnRhcmdldExpbmUubG9va0F0KCBfdjIgKTtcblx0XHR0aGlzLnRhcmdldExpbmUuc2NhbGUueiA9IF92My5sZW5ndGgoKTtcblxuXHR9XG5cbn1cblxuY29uc3QgX3ZlY3RvciA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF9jYW1lcmEgPSAvKkBfX1BVUkVfXyovIG5ldyBDYW1lcmEoKTtcblxuLyoqXG4gKiBUaGlzIGhlbHBzIHdpdGggdmlzdWFsaXppbmcgd2hhdCBhIGNhbWVyYSBjb250YWlucyBpbiBpdHMgZnJ1c3R1bS4gSXRcbiAqIHZpc3VhbGl6ZXMgdGhlIGZydXN0dW0gb2YgYSBjYW1lcmEgdXNpbmcgYSBsaW5lIHNlZ21lbnRzLlxuICpcbiAqIEJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBbbGlnaHRnbC5qcyBzaGFkb3dtYXAgZXhhbXBsZV17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2xpZ2h0Z2wuanMvYmxvYi9tYXN0ZXIvdGVzdHMvc2hhZG93bWFwLmh0bWx9LlxuICpcbiAqIGBDYW1lcmFIZWxwZXJgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgc2NlbmUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggNzUsIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LCAwLjEsIDEwMDAgKTtcbiAqIGNvbnN0IGhlbHBlciA9IG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoIGNhbWVyYSApO1xuICogc2NlbmUuYWRkKCBoZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaW5lU2VnbWVudHNcbiAqL1xuY2xhc3MgQ2FtZXJhSGVscGVyIGV4dGVuZHMgTGluZVNlZ21lbnRzIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBhcnJvdyBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhIHRvIHZpc3VhbGl6ZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBjYW1lcmEgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGNvbnN0IG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiAweGZmZmZmZiwgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuXHRcdGNvbnN0IGNvbG9ycyA9IFtdO1xuXG5cdFx0Y29uc3QgcG9pbnRNYXAgPSB7fTtcblxuXHRcdC8vIG5lYXJcblxuXHRcdGFkZExpbmUoICduMScsICduMicgKTtcblx0XHRhZGRMaW5lKCAnbjInLCAnbjQnICk7XG5cdFx0YWRkTGluZSggJ240JywgJ24zJyApO1xuXHRcdGFkZExpbmUoICduMycsICduMScgKTtcblxuXHRcdC8vIGZhclxuXG5cdFx0YWRkTGluZSggJ2YxJywgJ2YyJyApO1xuXHRcdGFkZExpbmUoICdmMicsICdmNCcgKTtcblx0XHRhZGRMaW5lKCAnZjQnLCAnZjMnICk7XG5cdFx0YWRkTGluZSggJ2YzJywgJ2YxJyApO1xuXG5cdFx0Ly8gc2lkZXNcblxuXHRcdGFkZExpbmUoICduMScsICdmMScgKTtcblx0XHRhZGRMaW5lKCAnbjInLCAnZjInICk7XG5cdFx0YWRkTGluZSggJ24zJywgJ2YzJyApO1xuXHRcdGFkZExpbmUoICduNCcsICdmNCcgKTtcblxuXHRcdC8vIGNvbmVcblxuXHRcdGFkZExpbmUoICdwJywgJ24xJyApO1xuXHRcdGFkZExpbmUoICdwJywgJ24yJyApO1xuXHRcdGFkZExpbmUoICdwJywgJ24zJyApO1xuXHRcdGFkZExpbmUoICdwJywgJ240JyApO1xuXG5cdFx0Ly8gdXBcblxuXHRcdGFkZExpbmUoICd1MScsICd1MicgKTtcblx0XHRhZGRMaW5lKCAndTInLCAndTMnICk7XG5cdFx0YWRkTGluZSggJ3UzJywgJ3UxJyApO1xuXG5cdFx0Ly8gdGFyZ2V0XG5cblx0XHRhZGRMaW5lKCAnYycsICd0JyApO1xuXHRcdGFkZExpbmUoICdwJywgJ2MnICk7XG5cblx0XHQvLyBjcm9zc1xuXG5cdFx0YWRkTGluZSggJ2NuMScsICdjbjInICk7XG5cdFx0YWRkTGluZSggJ2NuMycsICdjbjQnICk7XG5cblx0XHRhZGRMaW5lKCAnY2YxJywgJ2NmMicgKTtcblx0XHRhZGRMaW5lKCAnY2YzJywgJ2NmNCcgKTtcblxuXHRcdGZ1bmN0aW9uIGFkZExpbmUoIGEsIGIgKSB7XG5cblx0XHRcdGFkZFBvaW50KCBhICk7XG5cdFx0XHRhZGRQb2ludCggYiApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkUG9pbnQoIGlkICkge1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHRjb2xvcnMucHVzaCggMCwgMCwgMCApO1xuXG5cdFx0XHRpZiAoIHBvaW50TWFwWyBpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cG9pbnRNYXBbIGlkIF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwb2ludE1hcFsgaWQgXS5wdXNoKCAoIHZlcnRpY2VzLmxlbmd0aCAvIDMgKSAtIDEgKTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0c3VwZXIoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0dGhpcy50eXBlID0gJ0NhbWVyYUhlbHBlcic7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2FtZXJhIGJlaW5nIHZpc3VhbGl6ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q2FtZXJhfVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXHRcdGlmICggdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCApIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdHRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBjb250YWlucyB0aGUgcG9pbnRzIHVzZWQgdG8gdmlzdWFsaXplIHRoZSBjYW1lcmEuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7T2JqZWN0PHN0cmluZyxBcnJheTxudW1iZXI+Pn1cblx0XHQgKi9cblx0XHR0aGlzLnBvaW50TWFwID0gcG9pbnRNYXA7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHRjb25zdCBjb2xvckZydXN0dW0gPSBuZXcgQ29sb3IoIDB4ZmZhYTAwICk7XG5cdFx0Y29uc3QgY29sb3JDb25lID0gbmV3IENvbG9yKCAweGZmMDAwMCApO1xuXHRcdGNvbnN0IGNvbG9yVXAgPSBuZXcgQ29sb3IoIDB4MDBhYWZmICk7XG5cdFx0Y29uc3QgY29sb3JUYXJnZXQgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cdFx0Y29uc3QgY29sb3JDcm9zcyA9IG5ldyBDb2xvciggMHgzMzMzMzMgKTtcblxuXHRcdHRoaXMuc2V0Q29sb3JzKCBjb2xvckZydXN0dW0sIGNvbG9yQ29uZSwgY29sb3JVcCwgY29sb3JUYXJnZXQsIGNvbG9yQ3Jvc3MgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIGNvbG9ycyBvZiB0aGUgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0NvbG9yfSBmcnVzdHVtIC0gVGhlIGZydXN0dW0gbGluZSBjb2xvci5cblx0ICogQHBhcmFtIHtDb2xvcn0gY29uZSAtIFRoZSBjb25lIGxpbmUgY29sb3IuXG5cdCAqIEBwYXJhbSB7Q29sb3J9IHVwIC0gVGhlIHVwIGxpbmUgY29sb3IuXG5cdCAqIEBwYXJhbSB7Q29sb3J9IHRhcmdldCAtIFRoZSB0YXJnZXQgbGluZSBjb2xvci5cblx0ICogQHBhcmFtIHtDb2xvcn0gY3Jvc3MgLSBUaGUgY3Jvc3MgbGluZSBjb2xvci5cblx0ICovXG5cdHNldENvbG9ycyggZnJ1c3R1bSwgY29uZSwgdXAsIHRhcmdldCwgY3Jvc3MgKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cblx0XHRjb25zdCBjb2xvckF0dHJpYnV0ZSA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ2NvbG9yJyApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAwLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMSwgbjJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDIsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIG4yLCBuNFxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNCwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDUsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjQsIG4zXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA2LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggNywgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMywgbjFcblxuXHRcdC8vIGZhclxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA4LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggOSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMSwgZjJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDEwLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTEsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gZjIsIGY0XG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxMiwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDEzLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIGY0LCBmM1xuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTQsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxNSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBmMywgZjFcblxuXHRcdC8vIHNpZGVzXG5cblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDE2LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMTcsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjEsIGYxXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAxOCwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDE5LCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IC8vIG4yLCBmMlxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjAsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAyMSwgZnJ1c3R1bS5yLCBmcnVzdHVtLmcsIGZydXN0dW0uYiApOyAvLyBuMywgZjNcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDIyLCBmcnVzdHVtLnIsIGZydXN0dW0uZywgZnJ1c3R1bS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjMsIGZydXN0dW0uciwgZnJ1c3R1bS5nLCBmcnVzdHVtLmIgKTsgLy8gbjQsIGY0XG5cblx0XHQvLyBjb25lXG5cblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI0LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjUsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjFcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI2LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjcsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjJcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDI4LCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMjksIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjNcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDMwLCBjb25lLnIsIGNvbmUuZywgY29uZS5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzEsIGNvbmUuciwgY29uZS5nLCBjb25lLmIgKTsgLy8gcCwgbjRcblxuXHRcdC8vIHVwXG5cblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDMyLCB1cC5yLCB1cC5nLCB1cC5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzMsIHVwLnIsIHVwLmcsIHVwLmIgKTsgLy8gdTEsIHUyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzNCwgdXAuciwgdXAuZywgdXAuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM1LCB1cC5yLCB1cC5nLCB1cC5iICk7IC8vIHUyLCB1M1xuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggMzYsIHVwLnIsIHVwLmcsIHVwLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzNywgdXAuciwgdXAuZywgdXAuYiApOyAvLyB1MywgdTFcblxuXHRcdC8vIHRhcmdldFxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCAzOCwgdGFyZ2V0LnIsIHRhcmdldC5nLCB0YXJnZXQuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDM5LCB0YXJnZXQuciwgdGFyZ2V0LmcsIHRhcmdldC5iICk7IC8vIGMsIHRcblx0XHRjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQwLCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDEsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgLy8gcCwgY1xuXG5cdFx0Ly8gY3Jvc3NcblxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDIsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0MywgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBjbjEsIGNuMlxuXHRcdGNvbG9yQXR0cmlidXRlLnNldFhZWiggNDQsIGNyb3NzLnIsIGNyb3NzLmcsIGNyb3NzLmIgKTsgY29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0NSwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyAvLyBjbjMsIGNuNFxuXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0NiwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQ3LCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IC8vIGNmMSwgY2YyXG5cdFx0Y29sb3JBdHRyaWJ1dGUuc2V0WFlaKCA0OCwgY3Jvc3MuciwgY3Jvc3MuZywgY3Jvc3MuYiApOyBjb2xvckF0dHJpYnV0ZS5zZXRYWVooIDQ5LCBjcm9zcy5yLCBjcm9zcy5nLCBjcm9zcy5iICk7IC8vIGNmMywgY2Y0XG5cblx0XHRjb2xvckF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBoZWxwZXIgYmFzZWQgb24gdGhlIHByb2plY3Rpb24gbWF0cml4IG9mIHRoZSBjYW1lcmEuXG5cdCAqL1xuXHR1cGRhdGUoKSB7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgcG9pbnRNYXAgPSB0aGlzLnBvaW50TWFwO1xuXG5cdFx0Y29uc3QgdyA9IDEsIGggPSAxO1xuXG5cdFx0Ly8gd2UgbmVlZCBqdXN0IGNhbWVyYSBwcm9qZWN0aW9uIG1hdHJpeCBpbnZlcnNlXG5cdFx0Ly8gd29ybGQgbWF0cml4IG11c3QgYmUgaWRlbnRpdHlcblxuXHRcdF9jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRcdC8vIEFkanVzdCB6IHZhbHVlcyBiYXNlZCBvbiBjb29yZGluYXRlIHN5c3RlbVxuXHRcdGNvbnN0IG5lYXJaID0gdGhpcy5jYW1lcmEuY29vcmRpbmF0ZVN5c3RlbSA9PT0gV2ViR0xDb29yZGluYXRlU3lzdGVtID8gLTEgOiAwO1xuXG5cdFx0Ly8gY2VudGVyIC8gdGFyZ2V0XG5cdFx0c2V0UG9pbnQoICdjJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAwLCBuZWFyWiApO1xuXHRcdHNldFBvaW50KCAndCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgMCwgMSApO1xuXG5cdFx0Ly8gbmVhclxuXG5cdFx0c2V0UG9pbnQoICduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLTEsIC0xLCBuZWFyWiApO1xuXHRcdHNldFBvaW50KCAnbjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIC0xLCBuZWFyWiApO1xuXHRcdHNldFBvaW50KCAnbjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0xLCBoLCBuZWFyWiApO1xuXHRcdHNldFBvaW50KCAnbjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIGgsIG5lYXJaICk7XG5cblx0XHQvLyBmYXJcblxuXHRcdHNldFBvaW50KCAnZjEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIC0xLCAtMSwgMSApO1xuXHRcdHNldFBvaW50KCAnZjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIC0xLCAxICk7XG5cdFx0c2V0UG9pbnQoICdmMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLTEsIGgsIDEgKTtcblx0XHRzZXRQb2ludCggJ2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAxICk7XG5cblx0XHQvLyB1cFxuXG5cdFx0c2V0UG9pbnQoICd1MScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdyAqIDAuNywgaCAqIDEuMSwgbmVhclogKTtcblx0XHRzZXRQb2ludCggJ3UyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtMSAqIDAuNywgaCAqIDEuMSwgbmVhclogKTtcblx0XHRzZXRQb2ludCggJ3UzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoICogMiwgbmVhclogKTtcblxuXHRcdC8vIGNyb3NzXG5cblx0XHRzZXRQb2ludCggJ2NmMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLTEsIDAsIDEgKTtcblx0XHRzZXRQb2ludCggJ2NmMicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgMCwgMSApO1xuXHRcdHNldFBvaW50KCAnY2YzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAtMSwgMSApO1xuXHRcdHNldFBvaW50KCAnY2Y0JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCAxICk7XG5cblx0XHRzZXRQb2ludCggJ2NuMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLTEsIDAsIG5lYXJaICk7XG5cdFx0c2V0UG9pbnQoICdjbjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIDAsIG5lYXJaICk7XG5cdFx0c2V0UG9pbnQoICdjbjMnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIC0xLCBuZWFyWiApO1xuXHRcdHNldFBvaW50KCAnY240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoLCBuZWFyWiApO1xuXG5cdFx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCAncG9zaXRpb24nICkubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG5cbmZ1bmN0aW9uIHNldFBvaW50KCBwb2ludCwgcG9pbnRNYXAsIGdlb21ldHJ5LCBjYW1lcmEsIHgsIHksIHogKSB7XG5cblx0X3ZlY3Rvci5zZXQoIHgsIHksIHogKS51bnByb2plY3QoIGNhbWVyYSApO1xuXG5cdGNvbnN0IHBvaW50cyA9IHBvaW50TWFwWyBwb2ludCBdO1xuXG5cdGlmICggcG9pbnRzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHBvc2l0aW9uLnNldFhZWiggcG9pbnRzWyBpIF0sIF92ZWN0b3IueCwgX3ZlY3Rvci55LCBfdmVjdG9yLnogKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuY29uc3QgX2JveCA9IC8qQF9fUFVSRV9fKi8gbmV3IEJveDMoKTtcblxuLyoqXG4gKiBIZWxwZXIgb2JqZWN0IHRvIGdyYXBoaWNhbGx5IHNob3cgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3hcbiAqIGFyb3VuZCBhbiBvYmplY3QuIFRoZSBhY3R1YWwgYm91bmRpbmcgYm94IGlzIGhhbmRsZWQgd2l0aCB7QGxpbmsgQm94M30sXG4gKiB0aGlzIGlzIGp1c3QgYSB2aXN1YWwgaGVscGVyIGZvciBkZWJ1Z2dpbmcuIEl0IGNhbiBiZSBhdXRvbWF0aWNhbGx5XG4gKiByZXNpemVkIHdpdGgge0BsaW5rIEJveEhlbHBlciN1cGRhdGV9IHdoZW4gdGhlIG9iamVjdCBpdCdzIGNyZWF0ZWQgZnJvbVxuICogaXMgdHJhbnNmb3JtZWQuIE5vdGUgdGhhdCB0aGUgb2JqZWN0IG11c3QgaGF2ZSBhIGdlb21ldHJ5IGZvciB0aGlzIHRvIHdvcmssXG4gKiBzbyBpdCB3b24ndCB3b3JrIHdpdGggc3ByaXRlcy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3Qgc3BoZXJlID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KCk7XG4gKiBjb25zdCBvYmplY3QgPSBuZXcgVEhSRUUuTWVzaCggc3BoZXJlLCBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIDB4ZmYwMDAwICkgKTtcbiAqIGNvbnN0IGJveCA9IG5ldyBUSFJFRS5Cb3hIZWxwZXIoIG9iamVjdCwgMHhmZmZmMDAgKTtcbiAqIHNjZW5lLmFkZCggYm94ICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgTGluZVNlZ21lbnRzXG4gKi9cbmNsYXNzIEJveEhlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYm94IGhlbHBlci5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3QzRH0gW29iamVjdF0gLSBUaGUgM0Qgb2JqZWN0IHRvIHNob3cgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3guXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gW2NvbG9yPTB4ZmZmZjAwXSAtIFRoZSBib3gncyBjb2xvci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGNvbG9yID0gMHhmZmZmMDAgKSB7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KCBbIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDcgXSApO1xuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKiAzICk7XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIDNEIG9iamVjdCBiZWluZyB2aXN1YWxpemVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdDNEfVxuXHRcdCAqL1xuXHRcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXHRcdHRoaXMudHlwZSA9ICdCb3hIZWxwZXInO1xuXG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgaGVscGVyJ3MgZ2VvbWV0cnkgdG8gbWF0Y2ggdGhlIGRpbWVuc2lvbnMgb2YgdGhlIG9iamVjdCxcblx0ICogaW5jbHVkaW5nIGFueSBjaGlsZHJlbi5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblxuXHRcdGlmICggdGhpcy5vYmplY3QgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2JveC5zZXRGcm9tT2JqZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfYm94LmlzRW1wdHkoKSApIHJldHVybjtcblxuXHRcdGNvbnN0IG1pbiA9IF9ib3gubWluO1xuXHRcdGNvbnN0IG1heCA9IF9ib3gubWF4O1xuXG5cdFx0Lypcblx0XHRcdDVfX19fNFxuXHRcdDEvX19fMC98XG5cdFx0fCA2X198Xzdcblx0XHQyL19fXzMvXG5cblx0XHQwOiBtYXgueCwgbWF4LnksIG1heC56XG5cdFx0MTogbWluLngsIG1heC55LCBtYXguelxuXHRcdDI6IG1pbi54LCBtaW4ueSwgbWF4Lnpcblx0XHQzOiBtYXgueCwgbWluLnksIG1heC56XG5cdFx0NDogbWF4LngsIG1heC55LCBtaW4uelxuXHRcdDU6IG1pbi54LCBtYXgueSwgbWluLnpcblx0XHQ2OiBtaW4ueCwgbWluLnksIG1pbi56XG5cdFx0NzogbWF4LngsIG1pbi55LCBtaW4uelxuXHRcdCovXG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRjb25zdCBhcnJheSA9IHBvc2l0aW9uLmFycmF5O1xuXG5cdFx0YXJyYXlbIDAgXSA9IG1heC54OyBhcnJheVsgMSBdID0gbWF4Lnk7IGFycmF5WyAyIF0gPSBtYXguejtcblx0XHRhcnJheVsgMyBdID0gbWluLng7IGFycmF5WyA0IF0gPSBtYXgueTsgYXJyYXlbIDUgXSA9IG1heC56O1xuXHRcdGFycmF5WyA2IF0gPSBtaW4ueDsgYXJyYXlbIDcgXSA9IG1pbi55OyBhcnJheVsgOCBdID0gbWF4Lno7XG5cdFx0YXJyYXlbIDkgXSA9IG1heC54OyBhcnJheVsgMTAgXSA9IG1pbi55OyBhcnJheVsgMTEgXSA9IG1heC56O1xuXHRcdGFycmF5WyAxMiBdID0gbWF4Lng7IGFycmF5WyAxMyBdID0gbWF4Lnk7IGFycmF5WyAxNCBdID0gbWluLno7XG5cdFx0YXJyYXlbIDE1IF0gPSBtaW4ueDsgYXJyYXlbIDE2IF0gPSBtYXgueTsgYXJyYXlbIDE3IF0gPSBtaW4uejtcblx0XHRhcnJheVsgMTggXSA9IG1pbi54OyBhcnJheVsgMTkgXSA9IG1pbi55OyBhcnJheVsgMjAgXSA9IG1pbi56O1xuXHRcdGFycmF5WyAyMSBdID0gbWF4Lng7IGFycmF5WyAyMiBdID0gbWluLnk7IGFycmF5WyAyMyBdID0gbWluLno7XG5cblx0XHRwb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgd2lyZWZyYW1lIGJveCBmb3IgdGhlIHBhc3NlZCBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSAzRCBvYmplY3QgdG8gY3JlYXRlIHRoZSBoZWxwZXIgZm9yLlxuXHQgKiBAcmV0dXJuIHtCb3hIZWxwZXJ9IEEgcmVmZXJlbmNlIHRvIHRoaXMgaW5zdGFuY2UuXG5cdCAqL1xuXHRzZXRGcm9tT2JqZWN0KCBvYmplY3QgKSB7XG5cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGNvcHkoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0c3VwZXIuY29weSggc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMub2JqZWN0ID0gc291cmNlLm9iamVjdDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEEgaGVscGVyIG9iamVjdCB0byB2aXN1YWxpemUgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEJveDN9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBib3ggPSBuZXcgVEhSRUUuQm94MygpO1xuICogYm94LnNldEZyb21DZW50ZXJBbmRTaXplKCBuZXcgVEhSRUUuVmVjdG9yMyggMSwgMSwgMSApLCBuZXcgVEhSRUUuVmVjdG9yMyggMiwgMSwgMyApICk7XG4gKlxuICogY29uc3QgaGVscGVyID0gbmV3IFRIUkVFLkJveDNIZWxwZXIoIGJveCwgMHhmZmZmMDAgKTtcbiAqIHNjZW5lLmFkZCggaGVscGVyIClcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaW5lU2VnbWVudHNcbiAqL1xuY2xhc3MgQm94M0hlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYm94MyBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Qm94M30gYm94IC0gVGhlIGJveCB0byB2aXN1YWxpemUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gW2NvbG9yPTB4ZmZmZjAwXSAtIFRoZSBib3gncyBjb2xvci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBib3gsIGNvbG9yID0gMHhmZmZmMDAgKSB7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KCBbIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDcgXSApO1xuXG5cdFx0Y29uc3QgcG9zaXRpb25zID0gWyAxLCAxLCAxLCAtMSwgMSwgMSwgLTEsIC0xLCAxLCAxLCAtMSwgMSwgMSwgMSwgLTEsIC0xLCAxLCAtMSwgLTEsIC0xLCAtMSwgMSwgLTEsIC0xIF07XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGluZGljZXMsIDEgKSApO1xuXG5cdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHRcdHN1cGVyKCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYm94IGJlaW5nIHZpc3VhbGl6ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Qm94M31cblx0XHQgKi9cblx0XHR0aGlzLmJveCA9IGJveDtcblxuXHRcdHRoaXMudHlwZSA9ICdCb3gzSGVscGVyJztcblxuXHRcdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0fVxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApIHtcblxuXHRcdGNvbnN0IGJveCA9IHRoaXMuYm94O1xuXG5cdFx0aWYgKCBib3guaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdFx0Ym94LmdldENlbnRlciggdGhpcy5wb3NpdGlvbiApO1xuXG5cdFx0Ym94LmdldFNpemUoIHRoaXMuc2NhbGUgKTtcblxuXHRcdHRoaXMuc2NhbGUubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBGcmVlcyB0aGUgR1BVLXJlbGF0ZWQgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSB0aGlzIGluc3RhbmNlLiBDYWxsIHRoaXNcblx0ICogbWV0aG9kIHdoZW5ldmVyIHRoaXMgaW5zdGFuY2UgaXMgbm8gbG9uZ2VyIHVzZWQgaW4geW91ciBhcHAuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQSBoZWxwZXIgb2JqZWN0IHRvIHZpc3VhbGl6ZSBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgUGxhbmV9LlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSggbmV3IFRIUkVFLlZlY3RvcjMoIDEsIDEsIDAuMiApLCAzICk7XG4gKiBjb25zdCBoZWxwZXIgPSBuZXcgVEhSRUUuUGxhbmVIZWxwZXIoIHBsYW5lLCAxLCAweGZmZmYwMCApO1xuICogc2NlbmUuYWRkKCBoZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaW5lXG4gKi9cbmNsYXNzIFBsYW5lSGVscGVyIGV4dGVuZHMgTGluZSB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgcGxhbmUgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1BsYW5lfSBwbGFuZSAtIFRoZSBwbGFuZSB0byBiZSB2aXN1YWxpemVkLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gLSBUaGUgc2lkZSBsZW5ndGggb2YgcGxhbmUgaGVscGVyLlxuXHQgKiBAcGFyYW0ge251bWJlcnxDb2xvcnxzdHJpbmd9IFtoZXg9MHhmZmZmMDBdIC0gVGhlIGhlbHBlcidzIGNvbG9yLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHBsYW5lLCBzaXplID0gMSwgaGV4ID0gMHhmZmZmMDAgKSB7XG5cblx0XHRjb25zdCBjb2xvciA9IGhleDtcblxuXHRcdGNvbnN0IHBvc2l0aW9ucyA9IFsgMSwgLTEsIDAsIC0xLCAxLCAwLCAtMSwgLTEsIDAsIDEsIDEsIDAsIC0xLCAxLCAwLCAtMSwgLTEsIDAsIDEsIC0xLCAwLCAxLCAxLCAwIF07XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cdFx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdFx0dGhpcy50eXBlID0gJ1BsYW5lSGVscGVyJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwbGFuZSBiZWluZyB2aXN1YWxpemVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1BsYW5lfVxuXHRcdCAqL1xuXHRcdHRoaXMucGxhbmUgPSBwbGFuZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBzaWRlIGxlbmd0aCBvZiBwbGFuZSBoZWxwZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnNpemUgPSBzaXplO1xuXG5cdFx0Y29uc3QgcG9zaXRpb25zMiA9IFsgMSwgMSwgMCwgLTEsIDEsIDAsIC0xLCAtMSwgMCwgMSwgMSwgMCwgLTEsIC0xLCAwLCAxLCAtMSwgMCBdO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0Z2VvbWV0cnkyLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uczIsIDMgKSApO1xuXHRcdGdlb21ldHJ5Mi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnkyLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApICkgKTtcblxuXHR9XG5cblx0dXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICkge1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgMSApO1xuXG5cdFx0dGhpcy5sb29rQXQoIHRoaXMucGxhbmUubm9ybWFsICk7XG5cblx0XHR0aGlzLnRyYW5zbGF0ZVooIC0gdGhpcy5wbGFuZS5jb25zdGFudCApO1xuXG5cdFx0c3VwZXIudXBkYXRlTWF0cml4V29ybGQoIGZvcmNlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBoZWxwZXIgdG8gbWF0Y2ggdGhlIHBvc2l0aW9uIGFuZCBkaXJlY3Rpb24gb2YgdGhlXG5cdCAqIGxpZ2h0IGJlaW5nIHZpc3VhbGl6ZWQuXG5cdCAqL1xuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0dGhpcy5jaGlsZHJlblsgMCBdLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG5jb25zdCBfYXhpcyA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcbmxldCBfbGluZUdlb21ldHJ5LCBfY29uZUdlb21ldHJ5O1xuXG4vKipcbiAqIEFuIDNEIGFycm93IG9iamVjdCBmb3IgdmlzdWFsaXppbmcgZGlyZWN0aW9ucy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZGlyID0gbmV3IFRIUkVFLlZlY3RvcjMoIDEsIDIsIDAgKTtcbiAqXG4gKiAvL25vcm1hbGl6ZSB0aGUgZGlyZWN0aW9uIHZlY3RvciAoY29udmVydCB0byB2ZWN0b3Igb2YgbGVuZ3RoIDEpXG4gKiBkaXIubm9ybWFsaXplKCk7XG4gKlxuICogY29uc3Qgb3JpZ2luID0gbmV3IFRIUkVFLlZlY3RvcjMoIDAsIDAsIDAgKTtcbiAqIGNvbnN0IGxlbmd0aCA9IDE7XG4gKiBjb25zdCBoZXggPSAweGZmZmYwMDtcbiAqXG4gKiBjb25zdCBhcnJvd0hlbHBlciA9IG5ldyBUSFJFRS5BcnJvd0hlbHBlciggZGlyLCBvcmlnaW4sIGxlbmd0aCwgaGV4ICk7XG4gKiBzY2VuZS5hZGQoIGFycm93SGVscGVyICk7XG4gKiBgYGBcbiAqXG4gKiBAYXVnbWVudHMgT2JqZWN0M0RcbiAqL1xuY2xhc3MgQXJyb3dIZWxwZXIgZXh0ZW5kcyBPYmplY3QzRCB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXJyb3cgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IFtkaXI9KDAsIDAsIDEpXSAtIFRoZSAobm9ybWFsaXplZCkgZGlyZWN0aW9uIHZlY3Rvci5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3JpZ2luPSgwLCAwLCAwKV0gLSBQb2ludCBhdCB3aGljaCB0aGUgYXJyb3cgc3RhcnRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0xXSAtIExlbmd0aCBvZiB0aGUgYXJyb3cgaW4gd29ybGQgdW5pdHMuXG5cdCAqIEBwYXJhbSB7KG51bWJlcnxDb2xvcnxzdHJpbmcpfSBbY29sb3I9MHhmZmZmMDBdIC0gQ29sb3Igb2YgdGhlIGFycm93LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlYWRMZW5ndGg9bGVuZ3RoKjAuMl0gLSBUaGUgbGVuZ3RoIG9mIHRoZSBoZWFkIG9mIHRoZSBhcnJvdy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWFkV2lkdGg9aGVhZExlbmd0aCowLjJdIC0gVGhlIHdpZHRoIG9mIHRoZSBoZWFkIG9mIHRoZSBhcnJvdy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBkaXIgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApLCBvcmlnaW4gPSBuZXcgVmVjdG9yMyggMCwgMCwgMCApLCBsZW5ndGggPSAxLCBjb2xvciA9IDB4ZmZmZjAwLCBoZWFkTGVuZ3RoID0gbGVuZ3RoICogMC4yLCBoZWFkV2lkdGggPSBoZWFkTGVuZ3RoICogMC4yICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdBcnJvd0hlbHBlcic7XG5cblx0XHRpZiAoIF9saW5lR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2xpbmVHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdFx0X2xpbmVHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDAsIDAsIDAsIDEsIDAgXSwgMyApICk7XG5cblx0XHRcdF9jb25lR2VvbWV0cnkgPSBuZXcgQ3lsaW5kZXJHZW9tZXRyeSggMCwgMC41LCAxLCA1LCAxICk7XG5cdFx0XHRfY29uZUdlb21ldHJ5LnRyYW5zbGF0ZSggMCwgLTAuNSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5wb3NpdGlvbi5jb3B5KCBvcmlnaW4gKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaW5lIHBhcnQgb2YgdGhlIGFycm93IGhlbHBlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtMaW5lfVxuXHRcdCAqL1xuXHRcdHRoaXMubGluZSA9IG5ldyBMaW5lKCBfbGluZUdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblx0XHR0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYWRkKCB0aGlzLmxpbmUgKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb25lIHBhcnQgb2YgdGhlIGFycm93IGhlbHBlci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtNZXNofVxuXHRcdCAqL1xuXHRcdHRoaXMuY29uZSA9IG5ldyBNZXNoKCBfY29uZUdlb21ldHJ5LCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCB0b25lTWFwcGVkOiBmYWxzZSB9ICkgKTtcblx0XHR0aGlzLmNvbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYWRkKCB0aGlzLmNvbmUgKTtcblxuXHRcdHRoaXMuc2V0RGlyZWN0aW9uKCBkaXIgKTtcblx0XHR0aGlzLnNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1ZlY3RvcjN9IGRpciAtIFRoZSBub3JtYWxpemVkIGRpcmVjdGlvbiB2ZWN0b3IuXG5cdCAqL1xuXHRzZXREaXJlY3Rpb24oIGRpciApIHtcblxuXHRcdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdGlmICggZGlyLnkgPiAwLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAwLCAwLCAwLCAxICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkaXIueSA8IC0wLjk5OTk5ICkge1xuXG5cdFx0XHR0aGlzLnF1YXRlcm5pb24uc2V0KCAxLCAwLCAwLCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfYXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdGNvbnN0IHJhZGlhbnMgPSBNYXRoLmFjb3MoIGRpci55ICk7XG5cblx0XHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBfYXhpcywgcmFkaWFucyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgbGVuZ3RoIG9mIHRoZSBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBMZW5ndGggb2YgdGhlIGFycm93IGluIHdvcmxkIHVuaXRzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2hlYWRMZW5ndGg9bGVuZ3RoKjAuMl0gLSBUaGUgbGVuZ3RoIG9mIHRoZSBoZWFkIG9mIHRoZSBhcnJvdy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtoZWFkV2lkdGg9aGVhZExlbmd0aCowLjJdIC0gVGhlIHdpZHRoIG9mIHRoZSBoZWFkIG9mIHRoZSBhcnJvdy5cblx0ICovXG5cdHNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoID0gbGVuZ3RoICogMC4yLCBoZWFkV2lkdGggPSBoZWFkTGVuZ3RoICogMC4yICkge1xuXG5cdFx0dGhpcy5saW5lLnNjYWxlLnNldCggMSwgTWF0aC5tYXgoIDAuMDAwMSwgbGVuZ3RoIC0gaGVhZExlbmd0aCApLCAxICk7IC8vIHNlZSAjMTc0NThcblx0XHR0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLmNvbmUuc2NhbGUuc2V0KCBoZWFkV2lkdGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCApO1xuXHRcdHRoaXMuY29uZS5wb3NpdGlvbi55ID0gbGVuZ3RoO1xuXHRcdHRoaXMuY29uZS51cGRhdGVNYXRyaXgoKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIGNvbG9yIG9mIHRoZSBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30gY29sb3IgLSBUaGUgY29sb3IgdG8gc2V0LlxuXHQgKi9cblx0c2V0Q29sb3IoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLnNldCggY29sb3IgKTtcblx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCBjb2xvciApO1xuXG5cdH1cblxuXHRjb3B5KCBzb3VyY2UgKSB7XG5cblx0XHRzdXBlci5jb3B5KCBzb3VyY2UsIGZhbHNlICk7XG5cblx0XHR0aGlzLmxpbmUuY29weSggc291cmNlLmxpbmUgKTtcblx0XHR0aGlzLmNvbmUuY29weSggc291cmNlLmNvbmUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMubGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5saW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHR0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQW4gYXhpcyBvYmplY3QgdG8gdmlzdWFsaXplIHRoZSAzIGF4ZXMgaW4gYSBzaW1wbGUgd2F5LlxuICogVGhlIFggYXhpcyBpcyByZWQuIFRoZSBZIGF4aXMgaXMgZ3JlZW4uIFRoZSBaIGF4aXMgaXMgYmx1ZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYXhlc0hlbHBlciA9IG5ldyBUSFJFRS5BeGVzSGVscGVyKCA1ICk7XG4gKiBzY2VuZS5hZGQoIGF4ZXNIZWxwZXIgKTtcbiAqIGBgYFxuICpcbiAqIEBhdWdtZW50cyBMaW5lU2VnbWVudHNcbiAqL1xuY2xhc3MgQXhlc0hlbHBlciBleHRlbmRzIExpbmVTZWdtZW50cyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgYXhlcyBoZWxwZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSAtIFNpemUgb2YgdGhlIGxpbmVzIHJlcHJlc2VudGluZyB0aGUgYXhlcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBzaXplID0gMSApIHtcblxuXHRcdGNvbnN0IHZlcnRpY2VzID0gW1xuXHRcdFx0MCwgMCwgMCxcdHNpemUsIDAsIDAsXG5cdFx0XHQwLCAwLCAwLFx0MCwgc2l6ZSwgMCxcblx0XHRcdDAsIDAsIDAsXHQwLCAwLCBzaXplXG5cdFx0XTtcblxuXHRcdGNvbnN0IGNvbG9ycyA9IFtcblx0XHRcdDEsIDAsIDAsXHQxLCAwLjYsIDAsXG5cdFx0XHQwLCAxLCAwLFx0MC42LCAxLCAwLFxuXHRcdFx0MCwgMCwgMSxcdDAsIDAuNiwgMVxuXHRcdF07XG5cblx0XHRjb25zdCBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0XHRzdXBlciggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQXhlc0hlbHBlcic7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBjb2xvcnMgb2YgdGhlIGF4ZXMgaGVscGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcnxDb2xvcnxzdHJpbmd9IHhBeGlzQ29sb3IgLSBUaGUgY29sb3IgZm9yIHRoZSB4IGF4aXMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfENvbG9yfHN0cmluZ30geUF4aXNDb2xvciAtIFRoZSBjb2xvciBmb3IgdGhlIHkgYXhpcy5cblx0ICogQHBhcmFtIHtudW1iZXJ8Q29sb3J8c3RyaW5nfSB6QXhpc0NvbG9yIC0gVGhlIGNvbG9yIGZvciB0aGUgeiBheGlzLlxuXHQgKiBAcmV0dXJuIHtBeGVzSGVscGVyfSBBIHJlZmVyZW5jZSB0byB0aGlzIGF4ZXMgaGVscGVyLlxuXHQgKi9cblx0c2V0Q29sb3JzKCB4QXhpc0NvbG9yLCB5QXhpc0NvbG9yLCB6QXhpc0NvbG9yICkge1xuXG5cdFx0Y29uc3QgY29sb3IgPSBuZXcgQ29sb3IoKTtcblx0XHRjb25zdCBhcnJheSA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvci5hcnJheTtcblxuXHRcdGNvbG9yLnNldCggeEF4aXNDb2xvciApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAwICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDMgKTtcblxuXHRcdGNvbG9yLnNldCggeUF4aXNDb2xvciApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCA2ICk7XG5cdFx0Y29sb3IudG9BcnJheSggYXJyYXksIDkgKTtcblxuXHRcdGNvbG9yLnNldCggekF4aXNDb2xvciApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAxMiApO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGFycmF5LCAxNSApO1xuXG5cdFx0dGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogRnJlZXMgdGhlIEdQVS1yZWxhdGVkIHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgdGhpcyBpbnN0YW5jZS4gQ2FsbCB0aGlzXG5cdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgdXNlZCB0byBjb252ZXJ0IGEgc2VyaWVzIG9mIHBhdGhzIHRvIGFuIGFycmF5IG9mXG4gKiBzaGFwZXMuIEl0IGlzIHNwZWNpZmljYWxseSB1c2VkIGluIGNvbnRleHQgb2YgZm9udHMgYW5kIFNWRy5cbiAqL1xuY2xhc3MgU2hhcGVQYXRoIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBzaGFwZSBwYXRoLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHR0aGlzLnR5cGUgPSAnU2hhcGVQYXRoJztcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjb2xvciBvZiB0aGUgc2hhcGUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Q29sb3J9XG5cdFx0ICovXG5cdFx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBhdGhzIHRoYXQgaGF2ZSBiZWVuIGdlbmVyYXRlZCBmb3IgdGhpcyBzaGFwZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxQYXRoPn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zdWJQYXRocyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgcGF0aCB0aGF0IGlzIGJlaW5nIGdlbmVyYXRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHs/UGF0aH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jdXJyZW50UGF0aCA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IHBhdGggYW5kIG1vdmVzIGl0IGN1cnJlbnQgcG9pbnQgdG8gdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBjb29yZGluYXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5IGNvb3JkaW5hdGUuXG5cdCAqIEByZXR1cm4ge1NoYXBlUGF0aH0gQSByZWZlcmVuY2UgdG8gdGhpcyBzaGFwZSBwYXRoLlxuXHQgKi9cblx0bW92ZVRvKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aCA9IG5ldyBQYXRoKCk7XG5cdFx0dGhpcy5zdWJQYXRocy5wdXNoKCB0aGlzLmN1cnJlbnRQYXRoICk7XG5cdFx0dGhpcy5jdXJyZW50UGF0aC5tb3ZlVG8oIHgsIHkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgTGluZUN1cnZlfSB0byB0aGUgcGF0aCBieSBjb25uZWN0aW5nXG5cdCAqIHRoZSBjdXJyZW50IHBvaW50IHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBlbmQgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50LlxuXHQgKiBAcmV0dXJuIHtTaGFwZVBhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc2hhcGUgcGF0aC5cblx0ICovXG5cdGxpbmVUbyggeCwgeSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgubGluZVRvKCB4LCB5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFF1YWRyYXRpY0JlemllckN1cnZlfSB0byB0aGUgcGF0aCBieSBjb25uZWN0aW5nXG5cdCAqIHRoZSBjdXJyZW50IHBvaW50IHdpdGggdGhlIGdpdmVuIG9uZS5cblx0ICpcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFDUHggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBjb250cm9sIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUNQeSAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhWCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFZIC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50LlxuXHQgKiBAcmV0dXJuIHtTaGFwZVBhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc2hhcGUgcGF0aC5cblx0ICovXG5cdHF1YWRyYXRpY0N1cnZlVG8oIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEN1YmljQmV6aWVyQ3VydmV9IHRvIHRoZSBwYXRoIGJ5IGNvbm5lY3Rpbmdcblx0ICogdGhlIGN1cnJlbnQgcG9pbnQgd2l0aCB0aGUgZ2l2ZW4gb25lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUNQMXggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBmaXJzdCBjb250cm9sIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUNQMXkgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBmaXJzdCBjb250cm9sIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gYUNQMnggLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFDUDJ5IC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhWCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGFZIC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50LlxuXHQgKiBAcmV0dXJuIHtTaGFwZVBhdGh9IEEgcmVmZXJlbmNlIHRvIHRoaXMgc2hhcGUgcGF0aC5cblx0ICovXG5cdGJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLmJlemllckN1cnZlVG8oIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgU3BsaW5lQ3VydmV9IHRvIHRoZSBwYXRoIGJ5IGNvbm5lY3Rpbmdcblx0ICogdGhlIGN1cnJlbnQgcG9pbnQgd2l0aCB0aGUgZ2l2ZW4gbGlzdCBvZiBwb2ludHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8VmVjdG9yMj59IHB0cyAtIEFuIGFycmF5IG9mIHBvaW50cyBpbiAyRCBzcGFjZS5cblx0ICogQHJldHVybiB7U2hhcGVQYXRofSBBIHJlZmVyZW5jZSB0byB0aGlzIHNoYXBlIHBhdGguXG5cdCAqL1xuXHRzcGxpbmVUaHJ1KCBwdHMgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLnNwbGluZVRocnUoIHB0cyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGUgcGF0aHMgaW50byBhbiBhcnJheSBvZiBzaGFwZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNDQ1cgLSBCeSBkZWZhdWx0IHNvbGlkIHNoYXBlcyBhcmUgIGRlZmluZWQgY2xvY2t3aXNlIChDVykgYW5kIGhvbGVzIGFyZSBkZWZpbmVkIGNvdW50ZXJjbG9ja3dpc2UgKENDVykuXG5cdCAqIElmIHRoaXMgZmxhZyBpcyBzZXQgdG8gYHRydWVgLCB0aGVuIHRob3NlIGFyZSBmbGlwcGVkLlxuXHQgKiBAcmV0dXJuIHtBcnJheTxTaGFwZT59IEFuIGFycmF5IG9mIHNoYXBlcy5cblx0ICovXG5cdHRvU2hhcGVzKCBpc0NDVyApIHtcblxuXHRcdGZ1bmN0aW9uIHRvU2hhcGVzTm9Ib2xlcyggaW5TdWJwYXRocyApIHtcblxuXHRcdFx0Y29uc3Qgc2hhcGVzID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGluU3VicGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB0bXBQYXRoID0gaW5TdWJwYXRoc1sgaSBdO1xuXG5cdFx0XHRcdGNvbnN0IHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzaGFwZXM7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpc1BvaW50SW5zaWRlUG9seWdvbiggaW5QdCwgaW5Qb2x5Z29uICkge1xuXG5cdFx0XHRjb25zdCBwb2x5TGVuID0gaW5Qb2x5Z29uLmxlbmd0aDtcblxuXHRcdFx0Ly8gaW5QdCBvbiBwb2x5Z29uIGNvbnRvdXIgPT4gaW1tZWRpYXRlIHN1Y2Nlc3MgICAgb3Jcblx0XHRcdC8vIHRvZ2dsaW5nIG9mIGluc2lkZS9vdXRzaWRlIGF0IGV2ZXJ5IHNpbmdsZSEgaW50ZXJzZWN0aW9uIHBvaW50IG9mIGFuIGVkZ2Vcblx0XHRcdC8vICB3aXRoIHRoZSBob3Jpem9udGFsIGxpbmUgdGhyb3VnaCBpblB0LCBsZWZ0IG9mIGluUHRcblx0XHRcdC8vICBub3QgY291bnRpbmcgbG93ZXJZIGVuZHBvaW50cyBvZiBlZGdlcyBhbmQgd2hvbGUgZWRnZXMgb24gdGhhdCBsaW5lXG5cdFx0XHRsZXQgaW5zaWRlID0gZmFsc2U7XG5cdFx0XHRmb3IgKCBsZXQgcCA9IHBvbHlMZW4gLSAxLCBxID0gMDsgcSA8IHBvbHlMZW47IHAgPSBxICsrICkge1xuXG5cdFx0XHRcdGxldCBlZGdlTG93UHQgPSBpblBvbHlnb25bIHAgXTtcblx0XHRcdFx0bGV0IGVkZ2VIaWdoUHQgPSBpblBvbHlnb25bIHEgXTtcblxuXHRcdFx0XHRsZXQgZWRnZUR4ID0gZWRnZUhpZ2hQdC54IC0gZWRnZUxvd1B0Lng7XG5cdFx0XHRcdGxldCBlZGdlRHkgPSBlZGdlSGlnaFB0LnkgLSBlZGdlTG93UHQueTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBlZGdlRHkgKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0Ly8gbm90IHBhcmFsbGVsXG5cdFx0XHRcdFx0aWYgKCBlZGdlRHkgPCAwICkge1xuXG5cdFx0XHRcdFx0XHRlZGdlTG93UHQgPSBpblBvbHlnb25bIHEgXTsgZWRnZUR4ID0gLSBlZGdlRHg7XG5cdFx0XHRcdFx0XHRlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBwIF07IGVkZ2VEeSA9IC0gZWRnZUR5O1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAoIGluUHQueSA8IGVkZ2VMb3dQdC55ICkgfHwgKCBpblB0LnkgPiBlZGdlSGlnaFB0LnkgKSApIFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHRcdGlmICggaW5QdC55ID09PSBlZGdlTG93UHQueSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBpblB0LnggPT09IGVkZ2VMb3dQdC54IClcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0Ly8gY29udGludWU7XHRcdFx0XHQvLyBubyBpbnRlcnNlY3Rpb24gb3IgZWRnZUxvd1B0ID0+IGRvZXNuJ3QgY291bnQgISEhXG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBwZXJwRWRnZSA9IGVkZ2VEeSAqICggaW5QdC54IC0gZWRnZUxvd1B0LnggKSAtIGVkZ2VEeCAqICggaW5QdC55IC0gZWRnZUxvd1B0LnkgKTtcblx0XHRcdFx0XHRcdGlmICggcGVycEVkZ2UgPT09IDAgKVx0XHRcdFx0cmV0dXJuXHR0cnVlO1x0XHQvLyBpblB0IGlzIG9uIGNvbnRvdXIgP1xuXHRcdFx0XHRcdFx0aWYgKCBwZXJwRWRnZSA8IDAgKSBcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0aW5zaWRlID0gISBpbnNpZGU7XHRcdC8vIHRydWUgaW50ZXJzZWN0aW9uIGxlZnQgb2YgaW5QdFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwYXJhbGxlbCBvciBjb2xsaW5lYXJcblx0XHRcdFx0XHRpZiAoIGluUHQueSAhPT0gZWRnZUxvd1B0LnkgKSBcdFx0Y29udGludWU7XHRcdFx0Ly8gcGFyYWxsZWxcblx0XHRcdFx0XHQvLyBlZGdlIGxpZXMgb24gdGhlIHNhbWUgaG9yaXpvbnRhbCBsaW5lIGFzIGluUHRcblx0XHRcdFx0XHRpZiAoICggKCBlZGdlSGlnaFB0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUxvd1B0LnggKSApIHx8XG5cdFx0XHRcdFx0XHQgKCAoIGVkZ2VMb3dQdC54IDw9IGluUHQueCApICYmICggaW5QdC54IDw9IGVkZ2VIaWdoUHQueCApICkgKVx0XHRyZXR1cm5cdHRydWU7XHQvLyBpblB0OiBQb2ludCBvbiBjb250b3VyICFcblx0XHRcdFx0XHQvLyBjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuXHRpbnNpZGU7XG5cblx0XHR9XG5cblx0XHRjb25zdCBpc0Nsb2NrV2lzZSA9IFNoYXBlVXRpbHMuaXNDbG9ja1dpc2U7XG5cblx0XHRjb25zdCBzdWJQYXRocyA9IHRoaXMuc3ViUGF0aHM7XG5cdFx0aWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDAgKSByZXR1cm4gW107XG5cblx0XHRsZXQgc29saWQsIHRtcFBhdGgsIHRtcFNoYXBlO1xuXHRcdGNvbnN0IHNoYXBlcyA9IFtdO1xuXG5cdFx0aWYgKCBzdWJQYXRocy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1sgMCBdO1xuXHRcdFx0dG1wU2hhcGUgPSBuZXcgU2hhcGUoKTtcblx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cdFx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGhvbGVzRmlyc3QgPSAhIGlzQ2xvY2tXaXNlKCBzdWJQYXRoc1sgMCBdLmdldFBvaW50cygpICk7XG5cdFx0aG9sZXNGaXJzdCA9IGlzQ0NXID8gISBob2xlc0ZpcnN0IDogaG9sZXNGaXJzdDtcblxuXHRcdC8vIGNvbnNvbGUubG9nKFwiSG9sZXMgZmlyc3RcIiwgaG9sZXNGaXJzdCk7XG5cblx0XHRjb25zdCBiZXR0ZXJTaGFwZUhvbGVzID0gW107XG5cdFx0Y29uc3QgbmV3U2hhcGVzID0gW107XG5cdFx0bGV0IG5ld1NoYXBlSG9sZXMgPSBbXTtcblx0XHRsZXQgbWFpbklkeCA9IDA7XG5cdFx0bGV0IHRtcFBvaW50cztcblxuXHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdID0gdW5kZWZpbmVkO1xuXHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gc3ViUGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyBpIF07XG5cdFx0XHR0bXBQb2ludHMgPSB0bXBQYXRoLmdldFBvaW50cygpO1xuXHRcdFx0c29saWQgPSBpc0Nsb2NrV2lzZSggdG1wUG9pbnRzICk7XG5cdFx0XHRzb2xpZCA9IGlzQ0NXID8gISBzb2xpZCA6IHNvbGlkO1xuXG5cdFx0XHRpZiAoIHNvbGlkICkge1xuXG5cdFx0XHRcdGlmICggKCAhIGhvbGVzRmlyc3QgKSAmJiAoIG5ld1NoYXBlc1sgbWFpbklkeCBdICkgKVx0bWFpbklkeCArKztcblxuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHsgczogbmV3IFNoYXBlKCksIHA6IHRtcFBvaW50cyB9O1xuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXS5zLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdGlmICggaG9sZXNGaXJzdCApXHRtYWluSWR4ICsrO1xuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjdycsIGkpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXS5wdXNoKCB7IGg6IHRtcFBhdGgsIHA6IHRtcFBvaW50c1sgMCBdIH0gKTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjY3cnLCBpKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gb25seSBIb2xlcz8gLT4gcHJvYmFibHkgYWxsIFNoYXBlcyB3aXRoIHdyb25nIG9yaWVudGF0aW9uXG5cdFx0aWYgKCAhIG5ld1NoYXBlc1sgMCBdIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHRpZiAoIG5ld1NoYXBlcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRsZXQgYW1iaWd1b3VzID0gZmFsc2U7XG5cdFx0XHRsZXQgdG9DaGFuZ2UgPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcblxuXHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzSWR4IF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBsZXQgc0lkeCA9IDAsIHNMZW4gPSBuZXdTaGFwZXMubGVuZ3RoOyBzSWR4IDwgc0xlbjsgc0lkeCArKyApIHtcblxuXHRcdFx0XHRjb25zdCBzaG8gPSBuZXdTaGFwZUhvbGVzWyBzSWR4IF07XG5cblx0XHRcdFx0Zm9yICggbGV0IGhJZHggPSAwOyBoSWR4IDwgc2hvLmxlbmd0aDsgaElkeCArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGhvID0gc2hvWyBoSWR4IF07XG5cdFx0XHRcdFx0bGV0IGhvbGVfdW5hc3NpZ25lZCA9IHRydWU7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgczJJZHggPSAwOyBzMklkeCA8IG5ld1NoYXBlcy5sZW5ndGg7IHMySWR4ICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBoby5wLCBuZXdTaGFwZXNbIHMySWR4IF0ucCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggc0lkeCAhPT0gczJJZHggKVx0dG9DaGFuZ2UgKys7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBob2xlX3VuYXNzaWduZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRob2xlX3VuYXNzaWduZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzMklkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGFtYmlndW91cyA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhvbGVfdW5hc3NpZ25lZCApIHtcblxuXHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdLnB1c2goIGhvICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdG9DaGFuZ2UgPiAwICYmIGFtYmlndW91cyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bmV3U2hhcGVIb2xlcyA9IGJldHRlclNoYXBlSG9sZXM7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldCB0bXBIb2xlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBuZXdTaGFwZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRtcFNoYXBlID0gbmV3U2hhcGVzWyBpIF0ucztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0dG1wSG9sZXMgPSBuZXdTaGFwZUhvbGVzWyBpIF07XG5cblx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB0bXBIb2xlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHR0bXBTaGFwZS5ob2xlcy5wdXNoKCB0bXBIb2xlc1sgaiBdLmggKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9jb25zb2xlLmxvZyhcInNoYXBlXCIsIHNoYXBlcyk7XG5cblx0XHRyZXR1cm4gc2hhcGVzO1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGNvbnRyb2xzLlxuICpcbiAqIEBhYnN0cmFjdFxuICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlclxuICovXG5jbGFzcyBDb250cm9scyBleHRlbmRzIEV2ZW50RGlzcGF0Y2hlciB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29udHJvbHMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSBvYmplY3QgdGhhdCBpcyBtYW5hZ2VkIGJ5IHRoZSBjb250cm9scy5cblx0ICogQHBhcmFtIHs/SFRNTERPTUVsZW1lbnR9IGRvbUVsZW1lbnQgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgZm9yIGV2ZW50IGxpc3RlbmVycy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGRvbUVsZW1lbnQgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvYmplY3QgdGhhdCBpcyBtYW5hZ2VkIGJ5IHRoZSBjb250cm9scy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3QzRH1cblx0XHQgKi9cblx0XHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBmb3IgZXZlbnQgbGlzdGVuZXJzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9IVE1MRE9NRWxlbWVudH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudDtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIGNvbnRyb2xzIHJlc3BvbmRzIHRvIHVzZXIgaW5wdXQgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xzLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtMVxuXHRcdCAqL1xuXHRcdHRoaXMuc3RhdGUgPSAtMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgb2JqZWN0IGRlZmluZXMgdGhlIGtleWJvYXJkIGlucHV0IG9mIHRoZSBjb250cm9scy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5rZXlzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIG9iamVjdCBkZWZpbmVzIHdoYXQgdHlwZSBvZiBhY3Rpb25zIGFyZSBhc3NpZ25lZCB0byB0aGUgYXZhaWxhYmxlIG1vdXNlIGJ1dHRvbnMuXG5cdFx0ICogSXQgZGVwZW5kcyBvbiB0aGUgY29udHJvbCBpbXBsZW1lbnRhdGlvbiB3aGF0IGtpbmQgb2YgbW91c2UgYnV0dG9ucyBhbmQgYWN0aW9ucyBhcmUgc3VwcG9ydGVkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3tMRUZUOiA/bnVtYmVyLCBNSURETEU6ID9udW1iZXIsIFJJR0hUOiA/bnVtYmVyfX1cblx0XHQgKi9cblx0XHR0aGlzLm1vdXNlQnV0dG9ucyA9IHsgTEVGVDogbnVsbCwgTUlERExFOiBudWxsLCBSSUdIVDogbnVsbCB9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBvYmplY3QgZGVmaW5lcyB3aGF0IHR5cGUgb2YgYWN0aW9ucyBhcmUgYXNzaWduZWQgdG8gd2hhdCBraW5kIG9mIHRvdWNoIGludGVyYWN0aW9uLlxuXHRcdCAqIEl0IGRlcGVuZHMgb24gdGhlIGNvbnRyb2wgaW1wbGVtZW50YXRpb24gd2hhdCBraW5kIG9mIHRvdWNoIGludGVyYWN0aW9uIGFuZCBhY3Rpb25zIGFyZSBzdXBwb3J0ZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7e09ORTogP251bWJlciwgVFdPOiA/bnVtYmVyfX1cblx0XHQgKi9cblx0XHR0aGlzLnRvdWNoZXMgPSB7IE9ORTogbnVsbCwgVFdPOiBudWxsIH07XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBDb25uZWN0cyB0aGUgY29udHJvbHMgdG8gdGhlIERPTS4gVGhpcyBtZXRob2QgaGFzIHNvIGNhbGxlZCBcInNpZGUgZWZmZWN0c1wiIHNpbmNlXG5cdCAqIGl0IGFkZHMgdGhlIG1vZHVsZSdzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgRE9NLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0hUTUxET01FbGVtZW50fSBlbGVtZW50IC0gVGhlIERPTSBlbGVtZW50IHRvIGNvbm5lY3QgdG8uXG5cdCAqL1xuXHRjb25uZWN0KCBlbGVtZW50ICkge1xuXG5cdFx0aWYgKCBlbGVtZW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbnRyb2xzOiBjb25uZWN0KCkgbm93IHJlcXVpcmVzIGFuIGVsZW1lbnQuJyApOyAvLyBAZGVwcmVjYXRlZCwgdGhlIHdhcm5pbmcgY2FuIGJlIHJlbW92ZWQgd2l0aCByMTg1XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZG9tRWxlbWVudCAhPT0gbnVsbCApIHRoaXMuZGlzY29ubmVjdCgpO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gZWxlbWVudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIERpc2Nvbm5lY3RzIHRoZSBjb250cm9scyBmcm9tIHRoZSBET00uXG5cdCAqL1xuXHRkaXNjb25uZWN0KCkge31cblxuXHQvKipcblx0ICogQ2FsbCB0aGlzIG1ldGhvZCBpZiB5b3Ugbm8gbG9uZ2VyIHdhbnQgdXNlIHRvIHRoZSBjb250cm9scy4gSXQgZnJlZXMgYWxsIGludGVybmFsXG5cdCAqIHJlc291cmNlcyBhbmQgcmVtb3ZlcyBhbGwgZXZlbnQgbGlzdGVuZXJzLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHt9XG5cblx0LyoqXG5cdCAqIENvbnRyb2xzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QgaWYgdGhleSBoYXZlIHRvIHVwZGF0ZSB0aGVpciBpbnRlcm5hbCBzdGF0ZVxuXHQgKiBwZXIgc2ltdWxhdGlvbiBzdGVwLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2RlbHRhXSAtIFRoZSB0aW1lIGRlbHRhIGluIHNlY29uZHMuXG5cdCAqL1xuXHR1cGRhdGUoIC8qIGRlbHRhICovICkge31cblxufVxuXG4vKipcbiAqIFNjYWxlcyB0aGUgdGV4dHVyZSBhcyBsYXJnZSBhcyBwb3NzaWJsZSB3aXRoaW4gaXRzIHN1cmZhY2Ugd2l0aG91dCBjcm9wcGluZ1xuICogb3Igc3RyZXRjaGluZyB0aGUgdGV4dHVyZS4gVGhlIG1ldGhvZCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIGFzcGVjdCByYXRpbyBvZlxuICogdGhlIHRleHR1cmUuIEFraW4gdG8gQ1NTIGBvYmplY3QtZml0OiBjb250YWluYFxuICpcbiAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdCAtIFRoZSB0ZXh0dXJlJ3MgYXNwZWN0IHJhdGlvLlxuICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHVwZGF0ZWQgdGV4dHVyZS5cbiAqL1xuZnVuY3Rpb24gY29udGFpbiggdGV4dHVyZSwgYXNwZWN0ICkge1xuXG5cdGNvbnN0IGltYWdlQXNwZWN0ID0gKCB0ZXh0dXJlLmltYWdlICYmIHRleHR1cmUuaW1hZ2Uud2lkdGggKSA/IHRleHR1cmUuaW1hZ2Uud2lkdGggLyB0ZXh0dXJlLmltYWdlLmhlaWdodCA6IDE7XG5cblx0aWYgKCBpbWFnZUFzcGVjdCA+IGFzcGVjdCApIHtcblxuXHRcdHRleHR1cmUucmVwZWF0LnggPSAxO1xuXHRcdHRleHR1cmUucmVwZWF0LnkgPSBpbWFnZUFzcGVjdCAvIGFzcGVjdDtcblxuXHRcdHRleHR1cmUub2Zmc2V0LnggPSAwO1xuXHRcdHRleHR1cmUub2Zmc2V0LnkgPSAoIDEgLSB0ZXh0dXJlLnJlcGVhdC55ICkgLyAyO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0ZXh0dXJlLnJlcGVhdC54ID0gYXNwZWN0IC8gaW1hZ2VBc3BlY3Q7XG5cdFx0dGV4dHVyZS5yZXBlYXQueSA9IDE7XG5cblx0XHR0ZXh0dXJlLm9mZnNldC54ID0gKCAxIC0gdGV4dHVyZS5yZXBlYXQueCApIC8gMjtcblx0XHR0ZXh0dXJlLm9mZnNldC55ID0gMDtcblxuXHR9XG5cblx0cmV0dXJuIHRleHR1cmU7XG5cbn1cblxuLyoqXG4gKiBTY2FsZXMgdGhlIHRleHR1cmUgdG8gdGhlIHNtYWxsZXN0IHBvc3NpYmxlIHNpemUgdG8gZmlsbCB0aGUgc3VyZmFjZSwgbGVhdmluZ1xuICogbm8gZW1wdHkgc3BhY2UuIFRoZSBtZXRob2QgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBhc3BlY3QgcmF0aW8gb2YgdGhlIHRleHR1cmUuXG4gKiBBa2luIHRvIENTUyBgb2JqZWN0LWZpdDogY292ZXJgLlxuICpcbiAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdCAtIFRoZSB0ZXh0dXJlJ3MgYXNwZWN0IHJhdGlvLlxuICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHVwZGF0ZWQgdGV4dHVyZS5cbiAqL1xuZnVuY3Rpb24gY292ZXIoIHRleHR1cmUsIGFzcGVjdCApIHtcblxuXHRjb25zdCBpbWFnZUFzcGVjdCA9ICggdGV4dHVyZS5pbWFnZSAmJiB0ZXh0dXJlLmltYWdlLndpZHRoICkgPyB0ZXh0dXJlLmltYWdlLndpZHRoIC8gdGV4dHVyZS5pbWFnZS5oZWlnaHQgOiAxO1xuXG5cdGlmICggaW1hZ2VBc3BlY3QgPiBhc3BlY3QgKSB7XG5cblx0XHR0ZXh0dXJlLnJlcGVhdC54ID0gYXNwZWN0IC8gaW1hZ2VBc3BlY3Q7XG5cdFx0dGV4dHVyZS5yZXBlYXQueSA9IDE7XG5cblx0XHR0ZXh0dXJlLm9mZnNldC54ID0gKCAxIC0gdGV4dHVyZS5yZXBlYXQueCApIC8gMjtcblx0XHR0ZXh0dXJlLm9mZnNldC55ID0gMDtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGV4dHVyZS5yZXBlYXQueCA9IDE7XG5cdFx0dGV4dHVyZS5yZXBlYXQueSA9IGltYWdlQXNwZWN0IC8gYXNwZWN0O1xuXG5cdFx0dGV4dHVyZS5vZmZzZXQueCA9IDA7XG5cdFx0dGV4dHVyZS5vZmZzZXQueSA9ICggMSAtIHRleHR1cmUucmVwZWF0LnkgKSAvIDI7XG5cblx0fVxuXG5cdHJldHVybiB0ZXh0dXJlO1xuXG59XG5cbi8qKlxuICogQ29uZmlndXJlcyB0aGUgdGV4dHVyZSB0byB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbi4gQWtpbiB0byBDU1MgYG9iamVjdC1maXQ6IGZpbGxgLlxuICpcbiAqIEBwYXJhbSB7VGV4dHVyZX0gdGV4dHVyZSAtIFRoZSB0ZXh0dXJlLlxuICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHVwZGF0ZWQgdGV4dHVyZS5cbiAqL1xuZnVuY3Rpb24gZmlsbCggdGV4dHVyZSApIHtcblxuXHR0ZXh0dXJlLnJlcGVhdC54ID0gMTtcblx0dGV4dHVyZS5yZXBlYXQueSA9IDE7XG5cblx0dGV4dHVyZS5vZmZzZXQueCA9IDA7XG5cdHRleHR1cmUub2Zmc2V0LnkgPSAwO1xuXG5cdHJldHVybiB0ZXh0dXJlO1xuXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBob3cgbWFueSBieXRlcyBtdXN0IGJlIHVzZWQgdG8gcmVwcmVzZW50IHRoZSB0ZXh0dXJlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSB0ZXh0dXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGZvcm1hdCAtIFRoZSB0ZXh0dXJlJ3MgZm9ybWF0LlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGUgLSBUaGUgdGV4dHVyZSdzIHR5cGUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBieXRlIGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24gZ2V0Qnl0ZUxlbmd0aCggd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlICkge1xuXG5cdGNvbnN0IHR5cGVCeXRlTGVuZ3RoID0gZ2V0VGV4dHVyZVR5cGVCeXRlTGVuZ3RoKCB0eXBlICk7XG5cblx0c3dpdGNoICggZm9ybWF0ICkge1xuXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy9PcGVuR0wtUmVmcGFnZXMvZXMzLjAvaHRtbC9nbFRleEltYWdlMkQueGh0bWxcblx0XHRjYXNlIEFscGhhRm9ybWF0OlxuXHRcdFx0cmV0dXJuIHdpZHRoICogaGVpZ2h0O1xuXHRcdGNhc2UgTHVtaW5hbmNlRm9ybWF0OlxuXHRcdFx0cmV0dXJuIHdpZHRoICogaGVpZ2h0O1xuXHRcdGNhc2UgTHVtaW5hbmNlQWxwaGFGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gd2lkdGggKiBoZWlnaHQgKiAyO1xuXHRcdGNhc2UgUmVkRm9ybWF0OlxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcblx0XHRjYXNlIFJlZEludGVnZXJGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xuXHRcdGNhc2UgUkdGb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCAoIHdpZHRoICogaGVpZ2h0ICogMiApIC8gdHlwZUJ5dGVMZW5ndGguY29tcG9uZW50cyApICogdHlwZUJ5dGVMZW5ndGguYnl0ZUxlbmd0aDtcblx0XHRjYXNlIFJHSW50ZWdlckZvcm1hdDpcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiAyICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xuXHRcdGNhc2UgUkdCRm9ybWF0OlxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDMgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7XG5cdFx0Y2FzZSBSR0JBRm9ybWF0OlxuXHRcdFx0cmV0dXJuICggKCB3aWR0aCAqIGhlaWdodCAqIDQgKSAvIHR5cGVCeXRlTGVuZ3RoLmNvbXBvbmVudHMgKSAqIHR5cGVCeXRlTGVuZ3RoLmJ5dGVMZW5ndGg7XG5cdFx0Y2FzZSBSR0JBSW50ZWdlckZvcm1hdDpcblx0XHRcdHJldHVybiAoICggd2lkdGggKiBoZWlnaHQgKiA0ICkgLyB0eXBlQnl0ZUxlbmd0aC5jb21wb25lbnRzICkgKiB0eXBlQnl0ZUxlbmd0aC5ieXRlTGVuZ3RoO1xuXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2IvXG5cdFx0Y2FzZSBSR0JfUzNUQ19EWFQxX0Zvcm1hdDpcblx0XHRjYXNlIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgMyApIC8gNCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyAzICkgLyA0ICkgKiA4O1xuXHRcdGNhc2UgUkdCQV9TM1RDX0RYVDNfRm9ybWF0OlxuXHRcdGNhc2UgUkdCQV9TM1RDX0RYVDVfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDE2O1xuXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Yy9cblx0XHRjYXNlIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0OlxuXHRcdGNhc2UgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0OlxuXHRcdFx0cmV0dXJuICggTWF0aC5tYXgoIHdpZHRoLCAxNiApICogTWF0aC5tYXgoIGhlaWdodCwgOCApICkgLyA0O1xuXHRcdGNhc2UgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQ6XG5cdFx0Y2FzZSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gKCBNYXRoLm1heCggd2lkdGgsIDggKSAqIE1hdGgubWF4KCBoZWlnaHQsIDggKSApIC8gMjtcblxuXHRcdC8vIGh0dHBzOi8vcmVnaXN0cnkua2hyb25vcy5vcmcvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjL1xuXHRcdGNhc2UgUkdCX0VUQzFfRm9ybWF0OlxuXHRcdGNhc2UgUkdCX0VUQzJfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDg7XG5cdFx0Y2FzZSBSR0JBX0VUQzJfRUFDX0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgMyApIC8gNCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyAzICkgLyA0ICkgKiAxNjtcblxuXHRcdC8vIGh0dHBzOi8vcmVnaXN0cnkua2hyb25vcy5vcmcvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0Yy9cblx0XHRjYXNlIFJHQkFfQVNUQ180eDRfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAzICkgLyA0ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDMgKSAvIDQgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzV4NF9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDQgKSAvIDUgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgMyApIC8gNCApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfNXg1X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgNCApIC8gNSApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA0ICkgLyA1ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ182eDVfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA1ICkgLyA2ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDUgKSAvIDYgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNSApIC8gNiApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfOHg1X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgNyApIC8gOCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA0ICkgLyA1ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ184eDZfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA3ICkgLyA4ICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDUgKSAvIDYgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzh4OF9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDcgKSAvIDggKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNyApIC8gOCApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vciggKCB3aWR0aCArIDkgKSAvIDEwICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDQgKSAvIDUgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzEweDZfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA5ICkgLyAxMCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA1ICkgLyA2ICkgKiAxNjtcblx0XHRjYXNlIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgOSApIC8gMTAgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgNyApIC8gOCApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyA5ICkgLyAxMCApICogTWF0aC5mbG9vciggKCBoZWlnaHQgKyA5ICkgLyAxMCApICogMTY7XG5cdFx0Y2FzZSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguZmxvb3IoICggd2lkdGggKyAxMSApIC8gMTIgKSAqIE1hdGguZmxvb3IoICggaGVpZ2h0ICsgOSApIC8gMTAgKSAqIDE2O1xuXHRcdGNhc2UgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKCAoIHdpZHRoICsgMTEgKSAvIDEyICkgKiBNYXRoLmZsb29yKCAoIGhlaWdodCArIDExICkgLyAxMiApICogMTY7XG5cblx0XHQvLyBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL3dlYmdsL2V4dGVuc2lvbnMvRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0Yy9cblx0XHRjYXNlIFJHQkFfQlBUQ19Gb3JtYXQ6XG5cdFx0Y2FzZSBSR0JfQlBUQ19TSUdORURfRm9ybWF0OlxuXHRcdGNhc2UgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0OlxuXHRcdFx0cmV0dXJuIE1hdGguY2VpbCggd2lkdGggLyA0ICkgKiBNYXRoLmNlaWwoIGhlaWdodCAvIDQgKSAqIDE2O1xuXG5cdFx0Ly8gaHR0cHM6Ly9yZWdpc3RyeS5raHJvbm9zLm9yZy93ZWJnbC9leHRlbnNpb25zL0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX3JndGMvXG5cdFx0Y2FzZSBSRURfUkdUQzFfRm9ybWF0OlxuXHRcdGNhc2UgU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQ6XG5cdFx0XHRyZXR1cm4gTWF0aC5jZWlsKCB3aWR0aCAvIDQgKSAqIE1hdGguY2VpbCggaGVpZ2h0IC8gNCApICogODtcblx0XHRjYXNlIFJFRF9HUkVFTl9SR1RDMl9Gb3JtYXQ6XG5cdFx0Y2FzZSBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdDpcblx0XHRcdHJldHVybiBNYXRoLmNlaWwoIHdpZHRoIC8gNCApICogTWF0aC5jZWlsKCBoZWlnaHQgLyA0ICkgKiAxNjtcblxuXHR9XG5cblx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdGBVbmFibGUgdG8gZGV0ZXJtaW5lIHRleHR1cmUgYnl0ZSBsZW5ndGggZm9yICR7Zm9ybWF0fSBmb3JtYXQuYCxcblx0KTtcblxufVxuXG5mdW5jdGlvbiBnZXRUZXh0dXJlVHlwZUJ5dGVMZW5ndGgoIHR5cGUgKSB7XG5cblx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdGNhc2UgVW5zaWduZWRCeXRlVHlwZTpcblx0XHRjYXNlIEJ5dGVUeXBlOlxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogMSwgY29tcG9uZW50czogMSB9O1xuXHRcdGNhc2UgVW5zaWduZWRTaG9ydFR5cGU6XG5cdFx0Y2FzZSBTaG9ydFR5cGU6XG5cdFx0Y2FzZSBIYWxmRmxvYXRUeXBlOlxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogMiwgY29tcG9uZW50czogMSB9O1xuXHRcdGNhc2UgVW5zaWduZWRTaG9ydDQ0NDRUeXBlOlxuXHRcdGNhc2UgVW5zaWduZWRTaG9ydDU1NTFUeXBlOlxuXHRcdFx0cmV0dXJuIHsgYnl0ZUxlbmd0aDogMiwgY29tcG9uZW50czogNCB9O1xuXHRcdGNhc2UgVW5zaWduZWRJbnRUeXBlOlxuXHRcdGNhc2UgSW50VHlwZTpcblx0XHRjYXNlIEZsb2F0VHlwZTpcblx0XHRcdHJldHVybiB7IGJ5dGVMZW5ndGg6IDQsIGNvbXBvbmVudHM6IDEgfTtcblx0XHRjYXNlIFVuc2lnbmVkSW50NTk5OVR5cGU6XG5cdFx0XHRyZXR1cm4geyBieXRlTGVuZ3RoOiA0LCBjb21wb25lbnRzOiAzIH07XG5cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvciggYFVua25vd24gdGV4dHVyZSB0eXBlICR7dHlwZX0uYCApO1xuXG59XG5cbi8qKlxuICogQSBjbGFzcyBjb250YWluaW5nIHV0aWxpdHkgZnVuY3Rpb25zIGZvciB0ZXh0dXJlcy5cbiAqXG4gKiBAaGlkZWNvbnN0cnVjdG9yXG4gKi9cbmNsYXNzIFRleHR1cmVVdGlscyB7XG5cblx0LyoqXG5cdCAqIFNjYWxlcyB0aGUgdGV4dHVyZSBhcyBsYXJnZSBhcyBwb3NzaWJsZSB3aXRoaW4gaXRzIHN1cmZhY2Ugd2l0aG91dCBjcm9wcGluZ1xuXHQgKiBvciBzdHJldGNoaW5nIHRoZSB0ZXh0dXJlLiBUaGUgbWV0aG9kIHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgYXNwZWN0IHJhdGlvIG9mXG5cdCAqIHRoZSB0ZXh0dXJlLiBBa2luIHRvIENTUyBgb2JqZWN0LWZpdDogY29udGFpbmBcblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgLSBUaGUgdGV4dHVyZSdzIGFzcGVjdCByYXRpby5cblx0ICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHVwZGF0ZWQgdGV4dHVyZS5cblx0ICovXG5cdHN0YXRpYyBjb250YWluKCB0ZXh0dXJlLCBhc3BlY3QgKSB7XG5cblx0XHRyZXR1cm4gY29udGFpbiggdGV4dHVyZSwgYXNwZWN0ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTY2FsZXMgdGhlIHRleHR1cmUgdG8gdGhlIHNtYWxsZXN0IHBvc3NpYmxlIHNpemUgdG8gZmlsbCB0aGUgc3VyZmFjZSwgbGVhdmluZ1xuXHQgKiBubyBlbXB0eSBzcGFjZS4gVGhlIG1ldGhvZCBwcmVzZXJ2ZXMgdGhlIG9yaWdpbmFsIGFzcGVjdCByYXRpbyBvZiB0aGUgdGV4dHVyZS5cblx0ICogQWtpbiB0byBDU1MgYG9iamVjdC1maXQ6IGNvdmVyYC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgLSBUaGUgdGV4dHVyZSdzIGFzcGVjdCByYXRpby5cblx0ICogQHJldHVybiB7VGV4dHVyZX0gVGhlIHVwZGF0ZWQgdGV4dHVyZS5cblx0ICovXG5cdHN0YXRpYyBjb3ZlciggdGV4dHVyZSwgYXNwZWN0ICkge1xuXG5cdFx0cmV0dXJuIGNvdmVyKCB0ZXh0dXJlLCBhc3BlY3QgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIENvbmZpZ3VyZXMgdGhlIHRleHR1cmUgdG8gdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb24uIEFraW4gdG8gQ1NTIGBvYmplY3QtZml0OiBmaWxsYC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUuXG5cdCAqIEByZXR1cm4ge1RleHR1cmV9IFRoZSB1cGRhdGVkIHRleHR1cmUuXG5cdCAqL1xuXHRzdGF0aWMgZmlsbCggdGV4dHVyZSApIHtcblxuXHRcdHJldHVybiBmaWxsKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGhvdyBtYW55IGJ5dGVzIG11c3QgYmUgdXNlZCB0byByZXByZXNlbnQgdGhlIHRleHR1cmUuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgdGV4dHVyZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHRleHR1cmUuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBmb3JtYXQgLSBUaGUgdGV4dHVyZSdzIGZvcm1hdC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHR5cGUgLSBUaGUgdGV4dHVyZSdzIHR5cGUuXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGJ5dGUgbGVuZ3RoLlxuXHQgKi9cblx0c3RhdGljIGdldEJ5dGVMZW5ndGgoIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgdHlwZSApIHtcblxuXHRcdHJldHVybiBnZXRCeXRlTGVuZ3RoKCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUgKTtcblxuXHR9XG5cbn1cblxuaWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAncmVnaXN0ZXInLCB7IGRldGFpbDoge1xuXHRcdHJldmlzaW9uOiBSRVZJU0lPTixcblx0fSB9ICkgKTtcblxufVxuXG5pZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdGlmICggd2luZG93Ll9fVEhSRUVfXyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE11bHRpcGxlIGluc3RhbmNlcyBvZiBUaHJlZS5qcyBiZWluZyBpbXBvcnRlZC4nICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHdpbmRvdy5fX1RIUkVFX18gPSBSRVZJU0lPTjtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nLCBBZGRFcXVhdGlvbiwgQWRkT3BlcmF0aW9uLCBBZGRpdGl2ZUFuaW1hdGlvbkJsZW5kTW9kZSwgQWRkaXRpdmVCbGVuZGluZywgQWdYVG9uZU1hcHBpbmcsIEFscGhhRm9ybWF0LCBBbHdheXNDb21wYXJlLCBBbHdheXNEZXB0aCwgQWx3YXlzU3RlbmNpbEZ1bmMsIEFtYmllbnRMaWdodCwgQW5pbWF0aW9uQWN0aW9uLCBBbmltYXRpb25DbGlwLCBBbmltYXRpb25Mb2FkZXIsIEFuaW1hdGlvbk1peGVyLCBBbmltYXRpb25PYmplY3RHcm91cCwgQW5pbWF0aW9uVXRpbHMsIEFyY0N1cnZlLCBBcnJheUNhbWVyYSwgQXJyb3dIZWxwZXIsIEF0dGFjaGVkQmluZE1vZGUsIEF1ZGlvLCBBdWRpb0FuYWx5c2VyLCBBdWRpb0NvbnRleHQsIEF1ZGlvTGlzdGVuZXIsIEF1ZGlvTG9hZGVyLCBBeGVzSGVscGVyLCBCYWNrU2lkZSwgQmFzaWNEZXB0aFBhY2tpbmcsIEJhc2ljU2hhZG93TWFwLCBCYXRjaGVkTWVzaCwgQm9uZSwgQm9vbGVhbktleWZyYW1lVHJhY2ssIEJveDIsIEJveDMsIEJveDNIZWxwZXIsIEJveEdlb21ldHJ5LCBCb3hIZWxwZXIsIEJ1ZmZlckF0dHJpYnV0ZSwgQnVmZmVyR2VvbWV0cnksIEJ1ZmZlckdlb21ldHJ5TG9hZGVyLCBCeXRlVHlwZSwgQ2FjaGUsIENhbWVyYSwgQ2FtZXJhSGVscGVyLCBDYW52YXNUZXh0dXJlLCBDYXBzdWxlR2VvbWV0cnksIENhdG11bGxSb21DdXJ2ZTMsIENpbmVvblRvbmVNYXBwaW5nLCBDaXJjbGVHZW9tZXRyeSwgQ2xhbXBUb0VkZ2VXcmFwcGluZywgQ2xvY2ssIENvbG9yLCBDb2xvcktleWZyYW1lVHJhY2ssIENvbG9yTWFuYWdlbWVudCwgQ29tcHJlc3NlZEFycmF5VGV4dHVyZSwgQ29tcHJlc3NlZEN1YmVUZXh0dXJlLCBDb21wcmVzc2VkVGV4dHVyZSwgQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIsIENvbmVHZW9tZXRyeSwgQ29uc3RhbnRBbHBoYUZhY3RvciwgQ29uc3RhbnRDb2xvckZhY3RvciwgQ29udHJvbHMsIEN1YmVDYW1lcmEsIEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBDdWJlVGV4dHVyZSwgQ3ViZVRleHR1cmVMb2FkZXIsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBDdWJpY0JlemllckN1cnZlLCBDdWJpY0JlemllckN1cnZlMywgQ3ViaWNJbnRlcnBvbGFudCwgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdWxsRmFjZUZyb250QmFjaywgQ3VsbEZhY2VOb25lLCBDdXJ2ZSwgQ3VydmVQYXRoLCBDdXN0b21CbGVuZGluZywgQ3VzdG9tVG9uZU1hcHBpbmcsIEN5bGluZGVyR2VvbWV0cnksIEN5bGluZHJpY2FsLCBEYXRhM0RUZXh0dXJlLCBEYXRhQXJyYXlUZXh0dXJlLCBEYXRhVGV4dHVyZSwgRGF0YVRleHR1cmVMb2FkZXIsIERhdGFVdGlscywgRGVjcmVtZW50U3RlbmNpbE9wLCBEZWNyZW1lbnRXcmFwU3RlbmNpbE9wLCBEZWZhdWx0TG9hZGluZ01hbmFnZXIsIERlcHRoRm9ybWF0LCBEZXB0aFN0ZW5jaWxGb3JtYXQsIERlcHRoVGV4dHVyZSwgRGV0YWNoZWRCaW5kTW9kZSwgRGlyZWN0aW9uYWxMaWdodCwgRGlyZWN0aW9uYWxMaWdodEhlbHBlciwgRGlzY3JldGVJbnRlcnBvbGFudCwgRG9kZWNhaGVkcm9uR2VvbWV0cnksIERvdWJsZVNpZGUsIERzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgRHluYW1pY0NvcHlVc2FnZSwgRHluYW1pY0RyYXdVc2FnZSwgRHluYW1pY1JlYWRVc2FnZSwgRWRnZXNHZW9tZXRyeSwgRWxsaXBzZUN1cnZlLCBFcXVhbENvbXBhcmUsIEVxdWFsRGVwdGgsIEVxdWFsU3RlbmNpbEZ1bmMsIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLCBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZywgRXVsZXIsIEV2ZW50RGlzcGF0Y2hlciwgRXh0cnVkZUdlb21ldHJ5LCBGaWxlTG9hZGVyLCBGbG9hdDE2QnVmZmVyQXR0cmlidXRlLCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlLCBGbG9hdFR5cGUsIEZvZywgRm9nRXhwMiwgRnJhbWVidWZmZXJUZXh0dXJlLCBGcm9udFNpZGUsIEZydXN0dW0sIEdMQnVmZmVyQXR0cmlidXRlLCBHTFNMMSwgR0xTTDMsIEdyZWF0ZXJDb21wYXJlLCBHcmVhdGVyRGVwdGgsIEdyZWF0ZXJFcXVhbENvbXBhcmUsIEdyZWF0ZXJFcXVhbERlcHRoLCBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYywgR3JlYXRlclN0ZW5jaWxGdW5jLCBHcmlkSGVscGVyLCBHcm91cCwgSGFsZkZsb2F0VHlwZSwgSGVtaXNwaGVyZUxpZ2h0LCBIZW1pc3BoZXJlTGlnaHRIZWxwZXIsIEljb3NhaGVkcm9uR2VvbWV0cnksIEltYWdlQml0bWFwTG9hZGVyLCBJbWFnZUxvYWRlciwgSW1hZ2VVdGlscywgSW5jcmVtZW50U3RlbmNpbE9wLCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wLCBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LCBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciwgSW5zdGFuY2VkTWVzaCwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIEludDMyQnVmZmVyQXR0cmlidXRlLCBJbnQ4QnVmZmVyQXR0cmlidXRlLCBJbnRUeXBlLCBJbnRlcmxlYXZlZEJ1ZmZlciwgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsIEludGVycG9sYW50LCBJbnRlcnBvbGF0ZURpc2NyZXRlLCBJbnRlcnBvbGF0ZUxpbmVhciwgSW50ZXJwb2xhdGVTbW9vdGgsIEludmVydFN0ZW5jaWxPcCwgS2VlcFN0ZW5jaWxPcCwgS2V5ZnJhbWVUcmFjaywgTE9ELCBMYXRoZUdlb21ldHJ5LCBMYXllcnMsIExlc3NDb21wYXJlLCBMZXNzRGVwdGgsIExlc3NFcXVhbENvbXBhcmUsIExlc3NFcXVhbERlcHRoLCBMZXNzRXF1YWxTdGVuY2lsRnVuYywgTGVzc1N0ZW5jaWxGdW5jLCBMaWdodCwgTGlnaHRQcm9iZSwgTGluZSwgTGluZTMsIExpbmVCYXNpY01hdGVyaWFsLCBMaW5lQ3VydmUsIExpbmVDdXJ2ZTMsIExpbmVEYXNoZWRNYXRlcmlhbCwgTGluZUxvb3AsIExpbmVTZWdtZW50cywgTGluZWFyRmlsdGVyLCBMaW5lYXJJbnRlcnBvbGFudCwgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyLCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsIExpbmVhclNSR0JDb2xvclNwYWNlLCBMaW5lYXJUb25lTWFwcGluZywgTGluZWFyVHJhbnNmZXIsIExvYWRlciwgTG9hZGVyVXRpbHMsIExvYWRpbmdNYW5hZ2VyLCBMb29wT25jZSwgTG9vcFBpbmdQb25nLCBMb29wUmVwZWF0LCBMdW1pbmFuY2VBbHBoYUZvcm1hdCwgTHVtaW5hbmNlRm9ybWF0LCBNT1VTRSwgTWF0ZXJpYWwsIE1hdGVyaWFsTG9hZGVyLCBNYXRoVXRpbHMsIE1hdHJpeDIsIE1hdHJpeDMsIE1hdHJpeDQsIE1heEVxdWF0aW9uLCBNZXNoLCBNZXNoQmFzaWNNYXRlcmlhbCwgTWVzaERlcHRoTWF0ZXJpYWwsIE1lc2hEaXN0YW5jZU1hdGVyaWFsLCBNZXNoTGFtYmVydE1hdGVyaWFsLCBNZXNoTWF0Y2FwTWF0ZXJpYWwsIE1lc2hOb3JtYWxNYXRlcmlhbCwgTWVzaFBob25nTWF0ZXJpYWwsIE1lc2hQaHlzaWNhbE1hdGVyaWFsLCBNZXNoU3RhbmRhcmRNYXRlcmlhbCwgTWVzaFRvb25NYXRlcmlhbCwgTWluRXF1YXRpb24sIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE1peE9wZXJhdGlvbiwgTXVsdGlwbHlCbGVuZGluZywgTXVsdGlwbHlPcGVyYXRpb24sIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwgTmV1dHJhbFRvbmVNYXBwaW5nLCBOZXZlckNvbXBhcmUsIE5ldmVyRGVwdGgsIE5ldmVyU3RlbmNpbEZ1bmMsIE5vQmxlbmRpbmcsIE5vQ29sb3JTcGFjZSwgTm9Ub25lTWFwcGluZywgTm9ybWFsQW5pbWF0aW9uQmxlbmRNb2RlLCBOb3JtYWxCbGVuZGluZywgTm90RXF1YWxDb21wYXJlLCBOb3RFcXVhbERlcHRoLCBOb3RFcXVhbFN0ZW5jaWxGdW5jLCBOdW1iZXJLZXlmcmFtZVRyYWNrLCBPYmplY3QzRCwgT2JqZWN0TG9hZGVyLCBPYmplY3RTcGFjZU5vcm1hbE1hcCwgT2N0YWhlZHJvbkdlb21ldHJ5LCBPbmVGYWN0b3IsIE9uZU1pbnVzQ29uc3RhbnRBbHBoYUZhY3RvciwgT25lTWludXNDb25zdGFudENvbG9yRmFjdG9yLCBPbmVNaW51c0RzdEFscGhhRmFjdG9yLCBPbmVNaW51c0RzdENvbG9yRmFjdG9yLCBPbmVNaW51c1NyY0FscGhhRmFjdG9yLCBPbmVNaW51c1NyY0NvbG9yRmFjdG9yLCBPcnRob2dyYXBoaWNDYW1lcmEsIFBDRlNoYWRvd01hcCwgUENGU29mdFNoYWRvd01hcCwgUGF0aCwgUGVyc3BlY3RpdmVDYW1lcmEsIFBsYW5lLCBQbGFuZUdlb21ldHJ5LCBQbGFuZUhlbHBlciwgUG9pbnRMaWdodCwgUG9pbnRMaWdodEhlbHBlciwgUG9pbnRzLCBQb2ludHNNYXRlcmlhbCwgUG9sYXJHcmlkSGVscGVyLCBQb2x5aGVkcm9uR2VvbWV0cnksIFBvc2l0aW9uYWxBdWRpbywgUHJvcGVydHlCaW5kaW5nLCBQcm9wZXJ0eU1peGVyLCBRdWFkcmF0aWNCZXppZXJDdXJ2ZSwgUXVhZHJhdGljQmV6aWVyQ3VydmUzLCBRdWF0ZXJuaW9uLCBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaywgUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LCBSQUQyREVHLCBSRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBSRURfUkdUQzFfRm9ybWF0LCBSRVZJU0lPTiwgUkdCQURlcHRoUGFja2luZywgUkdCQUZvcm1hdCwgUkdCQUludGVnZXJGb3JtYXQsIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDZfRm9ybWF0LCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQsIFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9CUFRDX0Zvcm1hdCwgUkdCQV9FVEMyX0VBQ19Gb3JtYXQsIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBSR0JEZXB0aFBhY2tpbmcsIFJHQkZvcm1hdCwgUkdCSW50ZWdlckZvcm1hdCwgUkdCX0JQVENfU0lHTkVEX0Zvcm1hdCwgUkdCX0JQVENfVU5TSUdORURfRm9ybWF0LCBSR0JfRVRDMV9Gb3JtYXQsIFJHQl9FVEMyX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgUkdEZXB0aFBhY2tpbmcsIFJHRm9ybWF0LCBSR0ludGVnZXJGb3JtYXQsIFJhd1NoYWRlck1hdGVyaWFsLCBSYXksIFJheWNhc3RlciwgUmVjdEFyZWFMaWdodCwgUmVkRm9ybWF0LCBSZWRJbnRlZ2VyRm9ybWF0LCBSZWluaGFyZFRvbmVNYXBwaW5nLCBSZW5kZXJUYXJnZXQsIFJlbmRlclRhcmdldDNELCBSZW5kZXJUYXJnZXRBcnJheSwgUmVwZWF0V3JhcHBpbmcsIFJlcGxhY2VTdGVuY2lsT3AsIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBSaW5nR2VvbWV0cnksIFNJR05FRF9SRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCwgU1JHQkNvbG9yU3BhY2UsIFNSR0JUcmFuc2ZlciwgU2NlbmUsIFNoYWRlck1hdGVyaWFsLCBTaGFkb3dNYXRlcmlhbCwgU2hhcGUsIFNoYXBlR2VvbWV0cnksIFNoYXBlUGF0aCwgU2hhcGVVdGlscywgU2hvcnRUeXBlLCBTa2VsZXRvbiwgU2tlbGV0b25IZWxwZXIsIFNraW5uZWRNZXNoLCBTb3VyY2UsIFNwaGVyZSwgU3BoZXJlR2VvbWV0cnksIFNwaGVyaWNhbCwgU3BoZXJpY2FsSGFybW9uaWNzMywgU3BsaW5lQ3VydmUsIFNwb3RMaWdodCwgU3BvdExpZ2h0SGVscGVyLCBTcHJpdGUsIFNwcml0ZU1hdGVyaWFsLCBTcmNBbHBoYUZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgU3JjQ29sb3JGYWN0b3IsIFN0YXRpY0NvcHlVc2FnZSwgU3RhdGljRHJhd1VzYWdlLCBTdGF0aWNSZWFkVXNhZ2UsIFN0ZXJlb0NhbWVyYSwgU3RyZWFtQ29weVVzYWdlLCBTdHJlYW1EcmF3VXNhZ2UsIFN0cmVhbVJlYWRVc2FnZSwgU3RyaW5nS2V5ZnJhbWVUcmFjaywgU3VidHJhY3RFcXVhdGlvbiwgU3VidHJhY3RpdmVCbGVuZGluZywgVE9VQ0gsIFRhbmdlbnRTcGFjZU5vcm1hbE1hcCwgVGV0cmFoZWRyb25HZW9tZXRyeSwgVGV4dHVyZSwgVGV4dHVyZUxvYWRlciwgVGV4dHVyZVV0aWxzLCBUaW1lc3RhbXBRdWVyeSwgVG9ydXNHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnksIFRyaWFuZ2xlLCBUcmlhbmdsZUZhbkRyYXdNb2RlLCBUcmlhbmdsZVN0cmlwRHJhd01vZGUsIFRyaWFuZ2xlc0RyYXdNb2RlLCBUdWJlR2VvbWV0cnksIFVWTWFwcGluZywgVWludDE2QnVmZmVyQXR0cmlidXRlLCBVaW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4QnVmZmVyQXR0cmlidXRlLCBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUsIFVuaWZvcm0sIFVuaWZvcm1zR3JvdXAsIFVuaWZvcm1zVXRpbHMsIFVuc2lnbmVkQnl0ZVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgVW5zaWduZWRJbnQ1OTk5VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIFZTTVNoYWRvd01hcCwgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCwgVmVjdG9yS2V5ZnJhbWVUcmFjaywgVmlkZW9GcmFtZVRleHR1cmUsIFZpZGVvVGV4dHVyZSwgV2ViR0wzRFJlbmRlclRhcmdldCwgV2ViR0xBcnJheVJlbmRlclRhcmdldCwgV2ViR0xDb29yZGluYXRlU3lzdGVtLCBXZWJHTEN1YmVSZW5kZXJUYXJnZXQsIFdlYkdMUmVuZGVyVGFyZ2V0LCBXZWJHUFVDb29yZGluYXRlU3lzdGVtLCBXZWJYUkNvbnRyb2xsZXIsIFdpcmVmcmFtZUdlb21ldHJ5LCBXcmFwQXJvdW5kRW5kaW5nLCBaZXJvQ3VydmF0dXJlRW5kaW5nLCBaZXJvRmFjdG9yLCBaZXJvU2xvcGVFbmRpbmcsIFplcm9TdGVuY2lsT3AsIGFycmF5TmVlZHNVaW50MzIsIGNsb25lVW5pZm9ybXMsIGNyZWF0ZUNhbnZhc0VsZW1lbnQsIGNyZWF0ZUVsZW1lbnROUywgZ2V0Qnl0ZUxlbmd0aCwgZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSwgbWVyZ2VVbmlmb3JtcywgcHJvYmVBc3luYywgdG9Ob3JtYWxpemVkUHJvamVjdGlvbk1hdHJpeCwgdG9SZXZlcnNlZFByb2plY3Rpb25NYXRyaXgsIHdhcm5PbmNlIH07XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxMC0yMDI1IFRocmVlLmpzIEF1dGhvcnNcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbiAqL1xuaW1wb3J0IHsgTWF0cml4MywgVmVjdG9yMiwgQ29sb3IsIG1lcmdlVW5pZm9ybXMsIFZlY3RvcjMsIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLCBNZXNoLCBCb3hHZW9tZXRyeSwgU2hhZGVyTWF0ZXJpYWwsIEJhY2tTaWRlLCBjbG9uZVVuaWZvcm1zLCBFdWxlciwgTWF0cml4NCwgQ29sb3JNYW5hZ2VtZW50LCBTUkdCVHJhbnNmZXIsIFBsYW5lR2VvbWV0cnksIEZyb250U2lkZSwgZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSwgSW50VHlwZSwgSGFsZkZsb2F0VHlwZSwgVW5zaWduZWRCeXRlVHlwZSwgRmxvYXRUeXBlLCBSR0JBRm9ybWF0LCBQbGFuZSwgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLCBXZWJHTEN1YmVSZW5kZXJUYXJnZXQsIEN1YmVSZWZsZWN0aW9uTWFwcGluZywgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nLCBPcnRob2dyYXBoaWNDYW1lcmEsIFBlcnNwZWN0aXZlQ2FtZXJhLCBOb1RvbmVNYXBwaW5nLCBNZXNoQmFzaWNNYXRlcmlhbCwgTm9CbGVuZGluZywgV2ViR0xSZW5kZXJUYXJnZXQsIEJ1ZmZlckdlb21ldHJ5LCBCdWZmZXJBdHRyaWJ1dGUsIExpbmVhclNSR0JDb2xvclNwYWNlLCBMaW5lYXJGaWx0ZXIsIHdhcm5PbmNlLCBVaW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgYXJyYXlOZWVkc1VpbnQzMiwgVmVjdG9yNCwgRGF0YUFycmF5VGV4dHVyZSwgQ3ViZVRleHR1cmUsIERhdGEzRFRleHR1cmUsIExlc3NFcXVhbENvbXBhcmUsIERlcHRoVGV4dHVyZSwgVGV4dHVyZSwgR0xTTDMsIFBDRlNoYWRvd01hcCwgUENGU29mdFNoYWRvd01hcCwgVlNNU2hhZG93TWFwLCBDdXN0b21Ub25lTWFwcGluZywgTmV1dHJhbFRvbmVNYXBwaW5nLCBBZ1hUb25lTWFwcGluZywgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nLCBDaW5lb25Ub25lTWFwcGluZywgUmVpbmhhcmRUb25lTWFwcGluZywgTGluZWFyVG9uZU1hcHBpbmcsIExpbmVhclRyYW5zZmVyLCBBZGRPcGVyYXRpb24sIE1peE9wZXJhdGlvbiwgTXVsdGlwbHlPcGVyYXRpb24sIFVuaWZvcm1zVXRpbHMsIERvdWJsZVNpZGUsIE5vcm1hbEJsZW5kaW5nLCBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIE9iamVjdFNwYWNlTm9ybWFsTWFwLCBMYXllcnMsIEZydXN0dW0sIE1lc2hEZXB0aE1hdGVyaWFsLCBSR0JBRGVwdGhQYWNraW5nLCBNZXNoRGlzdGFuY2VNYXRlcmlhbCwgTmVhcmVzdEZpbHRlciwgTGVzc0VxdWFsRGVwdGgsIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBTdWJ0cmFjdEVxdWF0aW9uLCBBZGRFcXVhdGlvbiwgT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yLCBDb25zdGFudEFscGhhRmFjdG9yLCBPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IsIENvbnN0YW50Q29sb3JGYWN0b3IsIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IsIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IsIERzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciwgU3JjQWxwaGFGYWN0b3IsIFNyY0NvbG9yRmFjdG9yLCBPbmVGYWN0b3IsIFplcm9GYWN0b3IsIE5vdEVxdWFsRGVwdGgsIEdyZWF0ZXJEZXB0aCwgR3JlYXRlckVxdWFsRGVwdGgsIEVxdWFsRGVwdGgsIExlc3NEZXB0aCwgQWx3YXlzRGVwdGgsIE5ldmVyRGVwdGgsIEN1bGxGYWNlTm9uZSwgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdXN0b21CbGVuZGluZywgTXVsdGlwbHlCbGVuZGluZywgU3VidHJhY3RpdmVCbGVuZGluZywgQWRkaXRpdmVCbGVuZGluZywgTWluRXF1YXRpb24sIE1heEVxdWF0aW9uLCBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nLCBDbGFtcFRvRWRnZVdyYXBwaW5nLCBSZXBlYXRXcmFwcGluZywgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwgTm90RXF1YWxDb21wYXJlLCBHcmVhdGVyQ29tcGFyZSwgR3JlYXRlckVxdWFsQ29tcGFyZSwgRXF1YWxDb21wYXJlLCBMZXNzQ29tcGFyZSwgQWx3YXlzQ29tcGFyZSwgTmV2ZXJDb21wYXJlLCBOb0NvbG9yU3BhY2UsIERlcHRoU3RlbmNpbEZvcm1hdCwgZ2V0Qnl0ZUxlbmd0aCwgRGVwdGhGb3JtYXQsIFVuc2lnbmVkSW50VHlwZSwgVW5zaWduZWRJbnQyNDhUeXBlLCBVbnNpZ25lZFNob3J0VHlwZSwgY3JlYXRlRWxlbWVudE5TLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRJbnQ1OTk5VHlwZSwgQnl0ZVR5cGUsIFNob3J0VHlwZSwgQWxwaGFGb3JtYXQsIFJHQkZvcm1hdCwgTHVtaW5hbmNlRm9ybWF0LCBMdW1pbmFuY2VBbHBoYUZvcm1hdCwgUmVkRm9ybWF0LCBSZWRJbnRlZ2VyRm9ybWF0LCBSR0Zvcm1hdCwgUkdJbnRlZ2VyRm9ybWF0LCBSR0JBSW50ZWdlckZvcm1hdCwgUkdCX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDNfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9FVEMxX0Zvcm1hdCwgUkdCX0VUQzJfRm9ybWF0LCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCwgUkdCQV9BU1RDXzR4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDhfRm9ybWF0LCBSR0JBX0FTVENfMTB4NV9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDhfRm9ybWF0LCBSR0JBX0FTVENfMTB4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0LCBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0LCBSR0JBX0JQVENfRm9ybWF0LCBSR0JfQlBUQ19TSUdORURfRm9ybWF0LCBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQsIFJFRF9SR1RDMV9Gb3JtYXQsIFNJR05FRF9SRURfUkdUQzFfRm9ybWF0LCBSRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCwgRXZlbnREaXNwYXRjaGVyLCBBcnJheUNhbWVyYSwgV2ViWFJDb250cm9sbGVyLCBSQUQyREVHLCBjcmVhdGVDYW52YXNFbGVtZW50LCBTUkdCQ29sb3JTcGFjZSwgUkVWSVNJT04sIHRvTm9ybWFsaXplZFByb2plY3Rpb25NYXRyaXgsIHRvUmV2ZXJzZWRQcm9qZWN0aW9uTWF0cml4LCBwcm9iZUFzeW5jLCBXZWJHTENvb3JkaW5hdGVTeXN0ZW0gfSBmcm9tICcuL3RocmVlLmNvcmUuanMnO1xuZXhwb3J0IHsgQWRkaXRpdmVBbmltYXRpb25CbGVuZE1vZGUsIEFsd2F5c1N0ZW5jaWxGdW5jLCBBbWJpZW50TGlnaHQsIEFuaW1hdGlvbkFjdGlvbiwgQW5pbWF0aW9uQ2xpcCwgQW5pbWF0aW9uTG9hZGVyLCBBbmltYXRpb25NaXhlciwgQW5pbWF0aW9uT2JqZWN0R3JvdXAsIEFuaW1hdGlvblV0aWxzLCBBcmNDdXJ2ZSwgQXJyb3dIZWxwZXIsIEF0dGFjaGVkQmluZE1vZGUsIEF1ZGlvLCBBdWRpb0FuYWx5c2VyLCBBdWRpb0NvbnRleHQsIEF1ZGlvTGlzdGVuZXIsIEF1ZGlvTG9hZGVyLCBBeGVzSGVscGVyLCBCYXNpY0RlcHRoUGFja2luZywgQmFzaWNTaGFkb3dNYXAsIEJhdGNoZWRNZXNoLCBCb25lLCBCb29sZWFuS2V5ZnJhbWVUcmFjaywgQm94MiwgQm94MywgQm94M0hlbHBlciwgQm94SGVscGVyLCBCdWZmZXJHZW9tZXRyeUxvYWRlciwgQ2FjaGUsIENhbWVyYSwgQ2FtZXJhSGVscGVyLCBDYW52YXNUZXh0dXJlLCBDYXBzdWxlR2VvbWV0cnksIENhdG11bGxSb21DdXJ2ZTMsIENpcmNsZUdlb21ldHJ5LCBDbG9jaywgQ29sb3JLZXlmcmFtZVRyYWNrLCBDb21wcmVzc2VkQXJyYXlUZXh0dXJlLCBDb21wcmVzc2VkQ3ViZVRleHR1cmUsIENvbXByZXNzZWRUZXh0dXJlLCBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciwgQ29uZUdlb21ldHJ5LCBDb250cm9scywgQ3ViZUNhbWVyYSwgQ3ViZVRleHR1cmVMb2FkZXIsIEN1YmljQmV6aWVyQ3VydmUsIEN1YmljQmV6aWVyQ3VydmUzLCBDdWJpY0ludGVycG9sYW50LCBDdWxsRmFjZUZyb250QmFjaywgQ3VydmUsIEN1cnZlUGF0aCwgQ3lsaW5kZXJHZW9tZXRyeSwgQ3lsaW5kcmljYWwsIERhdGFUZXh0dXJlLCBEYXRhVGV4dHVyZUxvYWRlciwgRGF0YVV0aWxzLCBEZWNyZW1lbnRTdGVuY2lsT3AsIERlY3JlbWVudFdyYXBTdGVuY2lsT3AsIERlZmF1bHRMb2FkaW5nTWFuYWdlciwgRGV0YWNoZWRCaW5kTW9kZSwgRGlyZWN0aW9uYWxMaWdodCwgRGlyZWN0aW9uYWxMaWdodEhlbHBlciwgRGlzY3JldGVJbnRlcnBvbGFudCwgRG9kZWNhaGVkcm9uR2VvbWV0cnksIER5bmFtaWNDb3B5VXNhZ2UsIER5bmFtaWNEcmF3VXNhZ2UsIER5bmFtaWNSZWFkVXNhZ2UsIEVkZ2VzR2VvbWV0cnksIEVsbGlwc2VDdXJ2ZSwgRXF1YWxTdGVuY2lsRnVuYywgRXh0cnVkZUdlb21ldHJ5LCBGaWxlTG9hZGVyLCBGbG9hdDE2QnVmZmVyQXR0cmlidXRlLCBGbG9hdDMyQnVmZmVyQXR0cmlidXRlLCBGb2csIEZvZ0V4cDIsIEZyYW1lYnVmZmVyVGV4dHVyZSwgR0xCdWZmZXJBdHRyaWJ1dGUsIEdMU0wxLCBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYywgR3JlYXRlclN0ZW5jaWxGdW5jLCBHcmlkSGVscGVyLCBHcm91cCwgSGVtaXNwaGVyZUxpZ2h0LCBIZW1pc3BoZXJlTGlnaHRIZWxwZXIsIEljb3NhaGVkcm9uR2VvbWV0cnksIEltYWdlQml0bWFwTG9hZGVyLCBJbWFnZUxvYWRlciwgSW1hZ2VVdGlscywgSW5jcmVtZW50U3RlbmNpbE9wLCBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wLCBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUsIEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LCBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciwgSW5zdGFuY2VkTWVzaCwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIEludDMyQnVmZmVyQXR0cmlidXRlLCBJbnQ4QnVmZmVyQXR0cmlidXRlLCBJbnRlcmxlYXZlZEJ1ZmZlciwgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUsIEludGVycG9sYW50LCBJbnRlcnBvbGF0ZURpc2NyZXRlLCBJbnRlcnBvbGF0ZUxpbmVhciwgSW50ZXJwb2xhdGVTbW9vdGgsIEludmVydFN0ZW5jaWxPcCwgS2VlcFN0ZW5jaWxPcCwgS2V5ZnJhbWVUcmFjaywgTE9ELCBMYXRoZUdlb21ldHJ5LCBMZXNzRXF1YWxTdGVuY2lsRnVuYywgTGVzc1N0ZW5jaWxGdW5jLCBMaWdodCwgTGlnaHRQcm9iZSwgTGluZSwgTGluZTMsIExpbmVCYXNpY01hdGVyaWFsLCBMaW5lQ3VydmUsIExpbmVDdXJ2ZTMsIExpbmVEYXNoZWRNYXRlcmlhbCwgTGluZUxvb3AsIExpbmVTZWdtZW50cywgTGluZWFySW50ZXJwb2xhbnQsIExpbmVhck1pcE1hcExpbmVhckZpbHRlciwgTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciwgTG9hZGVyLCBMb2FkZXJVdGlscywgTG9hZGluZ01hbmFnZXIsIExvb3BPbmNlLCBMb29wUGluZ1BvbmcsIExvb3BSZXBlYXQsIE1PVVNFLCBNYXRlcmlhbCwgTWF0ZXJpYWxMb2FkZXIsIE1hdGhVdGlscywgTWF0cml4MiwgTWVzaExhbWJlcnRNYXRlcmlhbCwgTWVzaE1hdGNhcE1hdGVyaWFsLCBNZXNoTm9ybWFsTWF0ZXJpYWwsIE1lc2hQaG9uZ01hdGVyaWFsLCBNZXNoUGh5c2ljYWxNYXRlcmlhbCwgTWVzaFN0YW5kYXJkTWF0ZXJpYWwsIE1lc2hUb29uTWF0ZXJpYWwsIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLCBOZXZlclN0ZW5jaWxGdW5jLCBOb3JtYWxBbmltYXRpb25CbGVuZE1vZGUsIE5vdEVxdWFsU3RlbmNpbEZ1bmMsIE51bWJlcktleWZyYW1lVHJhY2ssIE9iamVjdDNELCBPYmplY3RMb2FkZXIsIE9jdGFoZWRyb25HZW9tZXRyeSwgUGF0aCwgUGxhbmVIZWxwZXIsIFBvaW50TGlnaHQsIFBvaW50TGlnaHRIZWxwZXIsIFBvaW50cywgUG9pbnRzTWF0ZXJpYWwsIFBvbGFyR3JpZEhlbHBlciwgUG9seWhlZHJvbkdlb21ldHJ5LCBQb3NpdGlvbmFsQXVkaW8sIFByb3BlcnR5QmluZGluZywgUHJvcGVydHlNaXhlciwgUXVhZHJhdGljQmV6aWVyQ3VydmUsIFF1YWRyYXRpY0JlemllckN1cnZlMywgUXVhdGVybmlvbiwgUXVhdGVybmlvbktleWZyYW1lVHJhY2ssIFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCwgUkdCRGVwdGhQYWNraW5nLCBSR0JJbnRlZ2VyRm9ybWF0LCBSR0RlcHRoUGFja2luZywgUmF3U2hhZGVyTWF0ZXJpYWwsIFJheSwgUmF5Y2FzdGVyLCBSZWN0QXJlYUxpZ2h0LCBSZW5kZXJUYXJnZXQsIFJlbmRlclRhcmdldDNELCBSZW5kZXJUYXJnZXRBcnJheSwgUmVwbGFjZVN0ZW5jaWxPcCwgUmluZ0dlb21ldHJ5LCBTY2VuZSwgU2hhZG93TWF0ZXJpYWwsIFNoYXBlLCBTaGFwZUdlb21ldHJ5LCBTaGFwZVBhdGgsIFNoYXBlVXRpbHMsIFNrZWxldG9uLCBTa2VsZXRvbkhlbHBlciwgU2tpbm5lZE1lc2gsIFNvdXJjZSwgU3BoZXJlLCBTcGhlcmVHZW9tZXRyeSwgU3BoZXJpY2FsLCBTcGhlcmljYWxIYXJtb25pY3MzLCBTcGxpbmVDdXJ2ZSwgU3BvdExpZ2h0LCBTcG90TGlnaHRIZWxwZXIsIFNwcml0ZSwgU3ByaXRlTWF0ZXJpYWwsIFN0YXRpY0NvcHlVc2FnZSwgU3RhdGljRHJhd1VzYWdlLCBTdGF0aWNSZWFkVXNhZ2UsIFN0ZXJlb0NhbWVyYSwgU3RyZWFtQ29weVVzYWdlLCBTdHJlYW1EcmF3VXNhZ2UsIFN0cmVhbVJlYWRVc2FnZSwgU3RyaW5nS2V5ZnJhbWVUcmFjaywgVE9VQ0gsIFRldHJhaGVkcm9uR2VvbWV0cnksIFRleHR1cmVMb2FkZXIsIFRleHR1cmVVdGlscywgVGltZXN0YW1wUXVlcnksIFRvcnVzR2VvbWV0cnksIFRvcnVzS25vdEdlb21ldHJ5LCBUcmlhbmdsZSwgVHJpYW5nbGVGYW5EcmF3TW9kZSwgVHJpYW5nbGVTdHJpcERyYXdNb2RlLCBUcmlhbmdsZXNEcmF3TW9kZSwgVHViZUdlb21ldHJ5LCBVVk1hcHBpbmcsIFVpbnQ4QnVmZmVyQXR0cmlidXRlLCBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUsIFVuaWZvcm0sIFVuaWZvcm1zR3JvdXAsIFZlY3RvcktleWZyYW1lVHJhY2ssIFZpZGVvRnJhbWVUZXh0dXJlLCBWaWRlb1RleHR1cmUsIFdlYkdMM0RSZW5kZXJUYXJnZXQsIFdlYkdMQXJyYXlSZW5kZXJUYXJnZXQsIFdlYkdQVUNvb3JkaW5hdGVTeXN0ZW0sIFdpcmVmcmFtZUdlb21ldHJ5LCBXcmFwQXJvdW5kRW5kaW5nLCBaZXJvQ3VydmF0dXJlRW5kaW5nLCBaZXJvU2xvcGVFbmRpbmcsIFplcm9TdGVuY2lsT3AgfSBmcm9tICcuL3RocmVlLmNvcmUuanMnO1xuXG5mdW5jdGlvbiBXZWJHTEFuaW1hdGlvbigpIHtcblxuXHRsZXQgY29udGV4dCA9IG51bGw7XG5cdGxldCBpc0FuaW1hdGluZyA9IGZhbHNlO1xuXHRsZXQgYW5pbWF0aW9uTG9vcCA9IG51bGw7XG5cdGxldCByZXF1ZXN0SWQgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0YW5pbWF0aW9uTG9vcCggdGltZSwgZnJhbWUgKTtcblxuXHRcdHJlcXVlc3RJZCA9IGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzdGFydDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIGlzQW5pbWF0aW5nID09PSB0cnVlICkgcmV0dXJuO1xuXHRcdFx0aWYgKCBhbmltYXRpb25Mb29wID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRyZXF1ZXN0SWQgPSBjb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZSggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdFx0XHRpc0FuaW1hdGluZyA9IHRydWU7XG5cblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb250ZXh0LmNhbmNlbEFuaW1hdGlvbkZyYW1lKCByZXF1ZXN0SWQgKTtcblxuXHRcdFx0aXNBbmltYXRpbmcgPSBmYWxzZTtcblxuXHRcdH0sXG5cblx0XHRzZXRBbmltYXRpb25Mb29wOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0XHRhbmltYXRpb25Mb29wID0gY2FsbGJhY2s7XG5cblx0XHR9LFxuXG5cdFx0c2V0Q29udGV4dDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29udGV4dCA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xBdHRyaWJ1dGVzKCBnbCApIHtcblxuXHRjb25zdCBidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IHVzYWdlID0gYXR0cmlidXRlLnVzYWdlO1xuXHRcdGNvbnN0IHNpemUgPSBhcnJheS5ieXRlTGVuZ3RoO1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKTtcblxuXHRcdGF0dHJpYnV0ZS5vblVwbG9hZENhbGxiYWNrKCk7XG5cblx0XHRsZXQgdHlwZTtcblxuXHRcdGlmICggYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSBnbC5GTE9BVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmlzRmxvYXQxNkJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHR0eXBlID0gZ2wuSEFMRl9GTE9BVDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfU0hPUlQ7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlNIT1JUO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlVOU0lHTkVEX0lOVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLklOVDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuQllURTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG5cblx0XHR9IGVsc2UgaWYgKCBhcnJheSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gZ2wuVU5TSUdORURfQllURTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMQXR0cmlidXRlczogVW5zdXBwb3J0ZWQgYnVmZmVyIGRhdGEgZm9ybWF0OiAnICsgYXJyYXkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRidWZmZXI6IGJ1ZmZlcixcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRieXRlc1BlckVsZW1lbnQ6IGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0dmVyc2lvbjogYXR0cmlidXRlLnZlcnNpb24sXG5cdFx0XHRzaXplOiBzaXplXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gYXR0cmlidXRlLmFycmF5O1xuXHRcdGNvbnN0IHVwZGF0ZVJhbmdlcyA9IGF0dHJpYnV0ZS51cGRhdGVSYW5nZXM7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblxuXHRcdGlmICggdXBkYXRlUmFuZ2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXNcblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIDAsIGFycmF5ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBCZWZvcmUgYXBwbHlpbmcgdXBkYXRlIHJhbmdlcywgd2UgbWVyZ2UgYW55IGFkamFjZW50IC8gb3ZlcmxhcHBpbmdcblx0XHRcdC8vIHJhbmdlcyB0byByZWR1Y2UgbG9hZCBvbiBgZ2wuYnVmZmVyU3ViRGF0YWAuIEVtcGlyaWNhbGx5LCB0aGlzIGhhcyBsZWRcblx0XHRcdC8vIHRvIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyBmb3IgYXBwbGljYXRpb25zIHdoaWNoIG1ha2UgaGVhdnkgdXNlIG9mXG5cdFx0XHQvLyB1cGRhdGUgcmFuZ2VzLiBMaWtlbHkgZHVlIHRvIEdQVSBjb21tYW5kIG92ZXJoZWFkLlxuXHRcdFx0Ly9cblx0XHRcdC8vIE5vdGUgdGhhdCB0byByZWR1Y2UgZ2FyYmFnZSBjb2xsZWN0aW9uIGJldHdlZW4gZnJhbWVzLCB3ZSBtZXJnZSB0aGVcblx0XHRcdC8vIHVwZGF0ZSByYW5nZXMgaW4tcGxhY2UuIFRoaXMgaXMgc2FmZSBiZWNhdXNlIHRoaXMgbWV0aG9kIHdpbGwgY2xlYXIgdGhlXG5cdFx0XHQvLyB1cGRhdGUgcmFuZ2VzIG9uY2UgdXBkYXRlZC5cblxuXHRcdFx0dXBkYXRlUmFuZ2VzLnNvcnQoICggYSwgYiApID0+IGEuc3RhcnQgLSBiLnN0YXJ0ICk7XG5cblx0XHRcdC8vIFRvIG1lcmdlIHRoZSB1cGRhdGUgcmFuZ2VzIGluLXBsYWNlLCB3ZSB3b3JrIGZyb20gbGVmdCB0byByaWdodCBpbiB0aGVcblx0XHRcdC8vIGV4aXN0aW5nIHVwZGF0ZVJhbmdlcyBhcnJheSwgbWVyZ2luZyByYW5nZXMuIFRoaXMgbWF5IHJlc3VsdCBpbiBhIGZpbmFsXG5cdFx0XHQvLyBhcnJheSB3aGljaCBpcyBzbWFsbGVyIHRoYW4gdGhlIG9yaWdpbmFsLiBUaGlzIGluZGV4IHRyYWNrcyB0aGUgbGFzdFxuXHRcdFx0Ly8gaW5kZXggcmVwcmVzZW50aW5nIGEgbWVyZ2VkIHJhbmdlLCBhbnkgZGF0YSBhZnRlciB0aGlzIGluZGV4IGNhbiBiZVxuXHRcdFx0Ly8gdHJpbW1lZCBvbmNlIHRoZSBtZXJnZSBhbGdvcml0aG0gaXMgY29tcGxldGVkLlxuXHRcdFx0bGV0IG1lcmdlSW5kZXggPSAwO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDE7IGkgPCB1cGRhdGVSYW5nZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHByZXZpb3VzUmFuZ2UgPSB1cGRhdGVSYW5nZXNbIG1lcmdlSW5kZXggXTtcblx0XHRcdFx0Y29uc3QgcmFuZ2UgPSB1cGRhdGVSYW5nZXNbIGkgXTtcblxuXHRcdFx0XHQvLyBXZSBhZGQgb25lIGhlcmUgdG8gbWVyZ2UgYWRqYWNlbnQgcmFuZ2VzLiBUaGlzIGlzIHNhZmUgYmVjYXVzZSByYW5nZXNcblx0XHRcdFx0Ly8gb3BlcmF0ZSBvdmVyIHBvc2l0aXZlIGludGVnZXJzLlxuXHRcdFx0XHRpZiAoIHJhbmdlLnN0YXJ0IDw9IHByZXZpb3VzUmFuZ2Uuc3RhcnQgKyBwcmV2aW91c1JhbmdlLmNvdW50ICsgMSApIHtcblxuXHRcdFx0XHRcdHByZXZpb3VzUmFuZ2UuY291bnQgPSBNYXRoLm1heChcblx0XHRcdFx0XHRcdHByZXZpb3VzUmFuZ2UuY291bnQsXG5cdFx0XHRcdFx0XHRyYW5nZS5zdGFydCArIHJhbmdlLmNvdW50IC0gcHJldmlvdXNSYW5nZS5zdGFydFxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdCsrIG1lcmdlSW5kZXg7XG5cdFx0XHRcdFx0dXBkYXRlUmFuZ2VzWyBtZXJnZUluZGV4IF0gPSByYW5nZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJpbSB0aGUgYXJyYXkgdG8gb25seSBjb250YWluIHRoZSBtZXJnZWQgcmFuZ2VzLlxuXHRcdFx0dXBkYXRlUmFuZ2VzLmxlbmd0aCA9IG1lcmdlSW5kZXggKyAxO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSB1cGRhdGVSYW5nZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCByYW5nZSA9IHVwZGF0ZVJhbmdlc1sgaSBdO1xuXG5cdFx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoIGJ1ZmZlclR5cGUsIHJhbmdlLnN0YXJ0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0YXJyYXksIHJhbmdlLnN0YXJ0LCByYW5nZS5jb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGF0dHJpYnV0ZS5jbGVhclVwZGF0ZVJhbmdlcygpO1xuXG5cdFx0fVxuXG5cdFx0YXR0cmlidXRlLm9uVXBsb2FkQ2FsbGJhY2soKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBnZXQoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdHJldHVybiBidWZmZXJzLmdldCggYXR0cmlidXRlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbW92ZSggYXR0cmlidXRlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0Y29uc3QgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSApIHtcblxuXHRcdFx0Z2wuZGVsZXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciApO1xuXG5cdFx0XHRidWZmZXJzLmRlbGV0ZSggYXR0cmlidXRlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggYXR0cmlidXRlLCBidWZmZXJUeXBlICkge1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhO1xuXG5cdFx0aWYgKCBhdHRyaWJ1dGUuaXNHTEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc3QgY2FjaGVkID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHRpZiAoICEgY2FjaGVkIHx8IGNhY2hlZC52ZXJzaW9uIDwgYXR0cmlidXRlLnZlcnNpb24gKSB7XG5cblx0XHRcdFx0YnVmZmVycy5zZXQoIGF0dHJpYnV0ZSwge1xuXHRcdFx0XHRcdGJ1ZmZlcjogYXR0cmlidXRlLmJ1ZmZlcixcblx0XHRcdFx0XHR0eXBlOiBhdHRyaWJ1dGUudHlwZSxcblx0XHRcdFx0XHRieXRlc1BlckVsZW1lbnQ6IGF0dHJpYnV0ZS5lbGVtZW50U2l6ZSxcblx0XHRcdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkYXRhLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0aWYgKCBkYXRhLnNpemUgIT09IGF0dHJpYnV0ZS5hcnJheS5ieXRlTGVuZ3RoICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMQXR0cmlidXRlczogVGhlIHNpemUgb2YgdGhlIGJ1ZmZlciBhdHRyaWJ1dGVcXCdzIGFycmF5IGJ1ZmZlciBkb2VzIG5vdCBtYXRjaCB0aGUgb3JpZ2luYWwgc2l6ZS4gUmVzaXppbmcgYnVmZmVyIGF0dHJpYnV0ZXMgaXMgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICk7XG5cblx0XHRcdGRhdGEudmVyc2lvbiA9IGF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbnZhciBhbHBoYWhhc2hfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFIQVNIXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IGdldEFscGhhSGFzaFRocmVzaG9sZCggdlBvc2l0aW9uICkgKSBkaXNjYXJkO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFIQVNIXFxuXFx0Y29uc3QgZmxvYXQgQUxQSEFfSEFTSF9TQ0FMRSA9IDAuMDU7XFxuXFx0ZmxvYXQgaGFzaDJEKCB2ZWMyIHZhbHVlICkge1xcblxcdFxcdHJldHVybiBmcmFjdCggMS4wZTQgKiBzaW4oIDE3LjAgKiB2YWx1ZS54ICsgMC4xICogdmFsdWUueSApICogKCAwLjEgKyBhYnMoIHNpbiggMTMuMCAqIHZhbHVlLnkgKyB2YWx1ZS54ICkgKSApICk7XFxuXFx0fVxcblxcdGZsb2F0IGhhc2gzRCggdmVjMyB2YWx1ZSApIHtcXG5cXHRcXHRyZXR1cm4gaGFzaDJEKCB2ZWMyKCBoYXNoMkQoIHZhbHVlLnh5ICksIHZhbHVlLnogKSApO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRBbHBoYUhhc2hUaHJlc2hvbGQoIHZlYzMgcG9zaXRpb24gKSB7XFxuXFx0XFx0ZmxvYXQgbWF4RGVyaXYgPSBtYXgoXFxuXFx0XFx0XFx0bGVuZ3RoKCBkRmR4KCBwb3NpdGlvbi54eXogKSApLFxcblxcdFxcdFxcdGxlbmd0aCggZEZkeSggcG9zaXRpb24ueHl6ICkgKVxcblxcdFxcdCk7XFxuXFx0XFx0ZmxvYXQgcGl4U2NhbGUgPSAxLjAgLyAoIEFMUEhBX0hBU0hfU0NBTEUgKiBtYXhEZXJpdiApO1xcblxcdFxcdHZlYzIgcGl4U2NhbGVzID0gdmVjMihcXG5cXHRcXHRcXHRleHAyKCBmbG9vciggbG9nMiggcGl4U2NhbGUgKSApICksXFxuXFx0XFx0XFx0ZXhwMiggY2VpbCggbG9nMiggcGl4U2NhbGUgKSApIClcXG5cXHRcXHQpO1xcblxcdFxcdHZlYzIgYWxwaGEgPSB2ZWMyKFxcblxcdFxcdFxcdGhhc2gzRCggZmxvb3IoIHBpeFNjYWxlcy54ICogcG9zaXRpb24ueHl6ICkgKSxcXG5cXHRcXHRcXHRoYXNoM0QoIGZsb29yKCBwaXhTY2FsZXMueSAqIHBvc2l0aW9uLnh5eiApIClcXG5cXHRcXHQpO1xcblxcdFxcdGZsb2F0IGxlcnBGYWN0b3IgPSBmcmFjdCggbG9nMiggcGl4U2NhbGUgKSApO1xcblxcdFxcdGZsb2F0IHggPSAoIDEuMCAtIGxlcnBGYWN0b3IgKSAqIGFscGhhLnggKyBsZXJwRmFjdG9yICogYWxwaGEueTtcXG5cXHRcXHRmbG9hdCBhID0gbWluKCBsZXJwRmFjdG9yLCAxLjAgLSBsZXJwRmFjdG9yICk7XFxuXFx0XFx0dmVjMyBjYXNlcyA9IHZlYzMoXFxuXFx0XFx0XFx0eCAqIHggLyAoIDIuMCAqIGEgKiAoIDEuMCAtIGEgKSApLFxcblxcdFxcdFxcdCggeCAtIDAuNSAqIGEgKSAvICggMS4wIC0gYSApLFxcblxcdFxcdFxcdDEuMCAtICggKCAxLjAgLSB4ICkgKiAoIDEuMCAtIHggKSAvICggMi4wICogYSAqICggMS4wIC0gYSApICkgKVxcblxcdFxcdCk7XFxuXFx0XFx0ZmxvYXQgdGhyZXNob2xkID0gKCB4IDwgKCAxLjAgLSBhICkgKVxcblxcdFxcdFxcdD8gKCAoIHggPCBhICkgPyBjYXNlcy54IDogY2FzZXMueSApXFxuXFx0XFx0XFx0OiBjYXNlcy56O1xcblxcdFxcdHJldHVybiBjbGFtcCggdGhyZXNob2xkICwgMS4wZS02LCAxLjAgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBhbHBoYW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHZBbHBoYU1hcFV2ICkuZztcXG4jZW5kaWZcIjtcblxudmFyIGFscGhhbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBhbHBoYU1hcDtcXG4jZW5kaWZcIjtcblxudmFyIGFscGhhdGVzdF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQVRFU1RcXG5cXHQjaWZkZWYgQUxQSEFfVE9fQ09WRVJBR0VcXG5cXHRkaWZmdXNlQ29sb3IuYSA9IHNtb290aHN0ZXAoIGFscGhhVGVzdCwgYWxwaGFUZXN0ICsgZndpZHRoKCBkaWZmdXNlQ29sb3IuYSApLCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdGlmICggZGlmZnVzZUNvbG9yLmEgPT0gMC4wICkgZGlzY2FyZDtcXG5cXHQjZWxzZVxcblxcdGlmICggZGlmZnVzZUNvbG9yLmEgPCBhbHBoYVRlc3QgKSBkaXNjYXJkO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFURVNUXFxuXFx0dW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7XFxuI2VuZGlmXCI7XG5cbnZhciBhb21hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZBb01hcFV2ICkuciAtIDEuMCApICogYW9NYXBJbnRlbnNpdHkgKyAxLjA7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGFtYmllbnRPY2NsdXNpb247XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9DTEVBUkNPQVQgKSBcXG5cXHRcXHRjbGVhcmNvYXRTcGVjdWxhckluZGlyZWN0ICo9IGFtYmllbnRPY2NsdXNpb247XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9TSEVFTiApIFxcblxcdFxcdHNoZWVuU3BlY3VsYXJJbmRpcmVjdCAqPSBhbWJpZW50T2NjbHVzaW9uO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggU1RBTkRBUkQgKVxcblxcdFxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5yb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGFvbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQU9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBhb01hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGFvTWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgYmF0Y2hpbmdfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQkFUQ0hJTkdcXG5cXHQjaWYgISBkZWZpbmVkKCBHTF9BTkdMRV9tdWx0aV9kcmF3IClcXG5cXHQjZGVmaW5lIGdsX0RyYXdJRCBfZ2xfRHJhd0lEXFxuXFx0dW5pZm9ybSBpbnQgX2dsX0RyYXdJRDtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBiYXRjaGluZ1RleHR1cmU7XFxuXFx0dW5pZm9ybSBoaWdocCB1c2FtcGxlcjJEIGJhdGNoaW5nSWRUZXh0dXJlO1xcblxcdG1hdDQgZ2V0QmF0Y2hpbmdNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0aW50IHNpemUgPSB0ZXh0dXJlU2l6ZSggYmF0Y2hpbmdUZXh0dXJlLCAwICkueDtcXG5cXHRcXHRpbnQgaiA9IGludCggaSApICogNDtcXG5cXHRcXHRpbnQgeCA9IGogJSBzaXplO1xcblxcdFxcdGludCB5ID0gaiAvIHNpemU7XFxuXFx0XFx0dmVjNCB2MSA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApO1xcblxcdFxcdHZlYzQgdjIgPSB0ZXhlbEZldGNoKCBiYXRjaGluZ1RleHR1cmUsIGl2ZWMyKCB4ICsgMSwgeSApLCAwICk7XFxuXFx0XFx0dmVjNCB2MyA9IHRleGVsRmV0Y2goIGJhdGNoaW5nVGV4dHVyZSwgaXZlYzIoIHggKyAyLCB5ICksIDAgKTtcXG5cXHRcXHR2ZWM0IHY0ID0gdGV4ZWxGZXRjaCggYmF0Y2hpbmdUZXh0dXJlLCBpdmVjMiggeCArIDMsIHkgKSwgMCApO1xcblxcdFxcdHJldHVybiBtYXQ0KCB2MSwgdjIsIHYzLCB2NCApO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRJbmRpcmVjdEluZGV4KCBjb25zdCBpbiBpbnQgaSApIHtcXG5cXHRcXHRpbnQgc2l6ZSA9IHRleHR1cmVTaXplKCBiYXRjaGluZ0lkVGV4dHVyZSwgMCApLng7XFxuXFx0XFx0aW50IHggPSBpICUgc2l6ZTtcXG5cXHRcXHRpbnQgeSA9IGkgLyBzaXplO1xcblxcdFxcdHJldHVybiBmbG9hdCggdGV4ZWxGZXRjaCggYmF0Y2hpbmdJZFRleHR1cmUsIGl2ZWMyKCB4LCB5ICksIDAgKS5yICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQkFUQ0hJTkdfQ09MT1JcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBiYXRjaGluZ0NvbG9yVGV4dHVyZTtcXG5cXHR2ZWMzIGdldEJhdGNoaW5nQ29sb3IoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0aW50IHNpemUgPSB0ZXh0dXJlU2l6ZSggYmF0Y2hpbmdDb2xvclRleHR1cmUsIDAgKS54O1xcblxcdFxcdGludCBqID0gaW50KCBpICk7XFxuXFx0XFx0aW50IHggPSBqICUgc2l6ZTtcXG5cXHRcXHRpbnQgeSA9IGogLyBzaXplO1xcblxcdFxcdHJldHVybiB0ZXhlbEZldGNoKCBiYXRjaGluZ0NvbG9yVGV4dHVyZSwgaXZlYzIoIHgsIHkgKSwgMCApLnJnYjtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBiYXRjaGluZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQkFUQ0hJTkdcXG5cXHRtYXQ0IGJhdGNoaW5nTWF0cml4ID0gZ2V0QmF0Y2hpbmdNYXRyaXgoIGdldEluZGlyZWN0SW5kZXgoIGdsX0RyYXdJRCApICk7XFxuI2VuZGlmXCI7XG5cbnZhciBiZWdpbl92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1xcbiNpZmRlZiBVU0VfQUxQSEFIQVNIXFxuXFx0dlBvc2l0aW9uID0gdmVjMyggcG9zaXRpb24gKTtcXG4jZW5kaWZcIjtcblxudmFyIGJlZ2lubm9ybWFsX3ZlcnRleCA9IFwidmVjMyBvYmplY3ROb3JtYWwgPSB2ZWMzKCBub3JtYWwgKTtcXG4jaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHR2ZWMzIG9iamVjdFRhbmdlbnQgPSB2ZWMzKCB0YW5nZW50Lnh5eiApO1xcbiNlbmRpZlwiO1xuXG52YXIgYnNkZnMgPSBcImZsb2F0IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKSB7XFxuXFx0cmV0dXJuIDAuMjU7XFxufVxcbmZsb2F0IERfQmxpbm5QaG9uZyggY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROSCApIHtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqICggc2hpbmluZXNzICogMC41ICsgMS4wICkgKiBwb3coIGRvdE5ILCBzaGluaW5lc3MgKTtcXG59XFxudmVjMyBCUkRGX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgbGlnaHREaXIsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzICkge1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggbGlnaHREaXIgKyB2aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdFZIID0gc2F0dXJhdGUoIGRvdCggdmlld0RpciwgaGFsZkRpciApICk7XFxuXFx0dmVjMyBGID0gRl9TY2hsaWNrKCBzcGVjdWxhckNvbG9yLCAxLjAsIGRvdFZIICk7XFxuXFx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcXG5cXHRmbG9hdCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufSAvLyB2YWxpZGF0ZWRcIjtcblxudmFyIGlyaWRlc2NlbmNlX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0lSSURFU0NFTkNFXFxuXFx0Y29uc3QgbWF0MyBYWVpfVE9fUkVDNzA5ID0gbWF0MyhcXG5cXHRcXHQgMy4yNDA0NTQyLCAtMC45NjkyNjYwLCAgMC4wNTU2NDM0LFxcblxcdFxcdC0xLjUzNzEzODUsICAxLjg3NjAxMDgsIC0wLjIwNDAyNTksXFxuXFx0XFx0LTAuNDk4NTMxNCwgIDAuMDQxNTU2MCwgIDEuMDU3MjI1MlxcblxcdCk7XFxuXFx0dmVjMyBGcmVzbmVsMFRvSW9yKCB2ZWMzIGZyZXNuZWwwICkge1xcblxcdFxcdHZlYzMgc3FydEYwID0gc3FydCggZnJlc25lbDAgKTtcXG5cXHRcXHRyZXR1cm4gKCB2ZWMzKCAxLjAgKSArIHNxcnRGMCApIC8gKCB2ZWMzKCAxLjAgKSAtIHNxcnRGMCApO1xcblxcdH1cXG5cXHR2ZWMzIElvclRvRnJlc25lbDAoIHZlYzMgdHJhbnNtaXR0ZWRJb3IsIGZsb2F0IGluY2lkZW50SW9yICkge1xcblxcdFxcdHJldHVybiBwb3cyKCAoIHRyYW5zbWl0dGVkSW9yIC0gdmVjMyggaW5jaWRlbnRJb3IgKSApIC8gKCB0cmFuc21pdHRlZElvciArIHZlYzMoIGluY2lkZW50SW9yICkgKSApO1xcblxcdH1cXG5cXHRmbG9hdCBJb3JUb0ZyZXNuZWwwKCBmbG9hdCB0cmFuc21pdHRlZElvciwgZmxvYXQgaW5jaWRlbnRJb3IgKSB7XFxuXFx0XFx0cmV0dXJuIHBvdzIoICggdHJhbnNtaXR0ZWRJb3IgLSBpbmNpZGVudElvciApIC8gKCB0cmFuc21pdHRlZElvciArIGluY2lkZW50SW9yICkpO1xcblxcdH1cXG5cXHR2ZWMzIGV2YWxTZW5zaXRpdml0eSggZmxvYXQgT1BELCB2ZWMzIHNoaWZ0ICkge1xcblxcdFxcdGZsb2F0IHBoYXNlID0gMi4wICogUEkgKiBPUEQgKiAxLjBlLTk7XFxuXFx0XFx0dmVjMyB2YWwgPSB2ZWMzKCA1LjQ4NTZlLTEzLCA0LjQyMDFlLTEzLCA1LjI0ODFlLTEzICk7XFxuXFx0XFx0dmVjMyBwb3MgPSB2ZWMzKCAxLjY4MTBlKzA2LCAxLjc5NTNlKzA2LCAyLjIwODRlKzA2ICk7XFxuXFx0XFx0dmVjMyB2YXIgPSB2ZWMzKCA0LjMyNzhlKzA5LCA5LjMwNDZlKzA5LCA2LjYxMjFlKzA5ICk7XFxuXFx0XFx0dmVjMyB4eXogPSB2YWwgKiBzcXJ0KCAyLjAgKiBQSSAqIHZhciApICogY29zKCBwb3MgKiBwaGFzZSArIHNoaWZ0ICkgKiBleHAoIC0gcG93MiggcGhhc2UgKSAqIHZhciApO1xcblxcdFxcdHh5ei54ICs9IDkuNzQ3MGUtMTQgKiBzcXJ0KCAyLjAgKiBQSSAqIDQuNTI4MmUrMDkgKSAqIGNvcyggMi4yMzk5ZSswNiAqIHBoYXNlICsgc2hpZnRbIDAgXSApICogZXhwKCAtIDQuNTI4MmUrMDkgKiBwb3cyKCBwaGFzZSApICk7XFxuXFx0XFx0eHl6IC89IDEuMDY4NWUtNztcXG5cXHRcXHR2ZWMzIHJnYiA9IFhZWl9UT19SRUM3MDkgKiB4eXo7XFxuXFx0XFx0cmV0dXJuIHJnYjtcXG5cXHR9XFxuXFx0dmVjMyBldmFsSXJpZGVzY2VuY2UoIGZsb2F0IG91dHNpZGVJT1IsIGZsb2F0IGV0YTIsIGZsb2F0IGNvc1RoZXRhMSwgZmxvYXQgdGhpbkZpbG1UaGlja25lc3MsIHZlYzMgYmFzZUYwICkge1xcblxcdFxcdHZlYzMgSTtcXG5cXHRcXHRmbG9hdCBpcmlkZXNjZW5jZUlPUiA9IG1peCggb3V0c2lkZUlPUiwgZXRhMiwgc21vb3Roc3RlcCggMC4wLCAwLjAzLCB0aGluRmlsbVRoaWNrbmVzcyApICk7XFxuXFx0XFx0ZmxvYXQgc2luVGhldGEyU3EgPSBwb3cyKCBvdXRzaWRlSU9SIC8gaXJpZGVzY2VuY2VJT1IgKSAqICggMS4wIC0gcG93MiggY29zVGhldGExICkgKTtcXG5cXHRcXHRmbG9hdCBjb3NUaGV0YTJTcSA9IDEuMCAtIHNpblRoZXRhMlNxO1xcblxcdFxcdGlmICggY29zVGhldGEyU3EgPCAwLjAgKSB7XFxuXFx0XFx0XFx0cmV0dXJuIHZlYzMoIDEuMCApO1xcblxcdFxcdH1cXG5cXHRcXHRmbG9hdCBjb3NUaGV0YTIgPSBzcXJ0KCBjb3NUaGV0YTJTcSApO1xcblxcdFxcdGZsb2F0IFIwID0gSW9yVG9GcmVzbmVsMCggaXJpZGVzY2VuY2VJT1IsIG91dHNpZGVJT1IgKTtcXG5cXHRcXHRmbG9hdCBSMTIgPSBGX1NjaGxpY2soIFIwLCAxLjAsIGNvc1RoZXRhMSApO1xcblxcdFxcdGZsb2F0IFQxMjEgPSAxLjAgLSBSMTI7XFxuXFx0XFx0ZmxvYXQgcGhpMTIgPSAwLjA7XFxuXFx0XFx0aWYgKCBpcmlkZXNjZW5jZUlPUiA8IG91dHNpZGVJT1IgKSBwaGkxMiA9IFBJO1xcblxcdFxcdGZsb2F0IHBoaTIxID0gUEkgLSBwaGkxMjtcXG5cXHRcXHR2ZWMzIGJhc2VJT1IgPSBGcmVzbmVsMFRvSW9yKCBjbGFtcCggYmFzZUYwLCAwLjAsIDAuOTk5OSApICk7XFx0XFx0dmVjMyBSMSA9IElvclRvRnJlc25lbDAoIGJhc2VJT1IsIGlyaWRlc2NlbmNlSU9SICk7XFxuXFx0XFx0dmVjMyBSMjMgPSBGX1NjaGxpY2soIFIxLCAxLjAsIGNvc1RoZXRhMiApO1xcblxcdFxcdHZlYzMgcGhpMjMgPSB2ZWMzKCAwLjAgKTtcXG5cXHRcXHRpZiAoIGJhc2VJT1JbIDAgXSA8IGlyaWRlc2NlbmNlSU9SICkgcGhpMjNbIDAgXSA9IFBJO1xcblxcdFxcdGlmICggYmFzZUlPUlsgMSBdIDwgaXJpZGVzY2VuY2VJT1IgKSBwaGkyM1sgMSBdID0gUEk7XFxuXFx0XFx0aWYgKCBiYXNlSU9SWyAyIF0gPCBpcmlkZXNjZW5jZUlPUiApIHBoaTIzWyAyIF0gPSBQSTtcXG5cXHRcXHRmbG9hdCBPUEQgPSAyLjAgKiBpcmlkZXNjZW5jZUlPUiAqIHRoaW5GaWxtVGhpY2tuZXNzICogY29zVGhldGEyO1xcblxcdFxcdHZlYzMgcGhpID0gdmVjMyggcGhpMjEgKSArIHBoaTIzO1xcblxcdFxcdHZlYzMgUjEyMyA9IGNsYW1wKCBSMTIgKiBSMjMsIDFlLTUsIDAuOTk5OSApO1xcblxcdFxcdHZlYzMgcjEyMyA9IHNxcnQoIFIxMjMgKTtcXG5cXHRcXHR2ZWMzIFJzID0gcG93MiggVDEyMSApICogUjIzIC8gKCB2ZWMzKCAxLjAgKSAtIFIxMjMgKTtcXG5cXHRcXHR2ZWMzIEMwID0gUjEyICsgUnM7XFxuXFx0XFx0SSA9IEMwO1xcblxcdFxcdHZlYzMgQ20gPSBScyAtIFQxMjE7XFxuXFx0XFx0Zm9yICggaW50IG0gPSAxOyBtIDw9IDI7ICsrIG0gKSB7XFxuXFx0XFx0XFx0Q20gKj0gcjEyMztcXG5cXHRcXHRcXHR2ZWMzIFNtID0gMi4wICogZXZhbFNlbnNpdGl2aXR5KCBmbG9hdCggbSApICogT1BELCBmbG9hdCggbSApICogcGhpICk7XFxuXFx0XFx0XFx0SSArPSBDbSAqIFNtO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gbWF4KCBJLCB2ZWMzKCAwLjAgKSApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGJ1bXBtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9CVU1QTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYnVtcE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGJ1bXBTY2FsZTtcXG5cXHR2ZWMyIGRIZHh5X2Z3ZCgpIHtcXG5cXHRcXHR2ZWMyIGRTVGR4ID0gZEZkeCggdkJ1bXBNYXBVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2QnVtcE1hcFV2ICk7XFxuXFx0XFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2QnVtcE1hcFV2ICkueDtcXG5cXHRcXHRmbG9hdCBkQnggPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZCdW1wTWFwVXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2QnVtcE1hcFV2ICsgZFNUZHkgKS54IC0gSGxsO1xcblxcdFxcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xcblxcdH1cXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5LCBmbG9hdCBmYWNlRGlyZWN0aW9uICkge1xcblxcdFxcdHZlYzMgdlNpZ21hWCA9IG5vcm1hbGl6ZSggZEZkeCggc3VyZl9wb3MueHl6ICkgKTtcXG5cXHRcXHR2ZWMzIHZTaWdtYVkgPSBub3JtYWxpemUoIGRGZHkoIHN1cmZfcG9zLnh5eiApICk7XFxuXFx0XFx0dmVjMyB2TiA9IHN1cmZfbm9ybTtcXG5cXHRcXHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XFxuXFx0XFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xcblxcdFxcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICkgKiBmYWNlRGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgdkdyYWQgPSBzaWduKCBmRGV0ICkgKiAoIGRIZHh5LnggKiBSMSArIGRIZHh5LnkgKiBSMiApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIGFicyggZkRldCApICogc3VyZl9ub3JtIC0gdkdyYWQgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZlYzQgcGxhbmU7XFxuXFx0I2lmZGVmIEFMUEhBX1RPX0NPVkVSQUdFXFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2VUb1BsYW5lLCBkaXN0YW5jZUdyYWRpZW50O1xcblxcdFxcdGZsb2F0IGNsaXBPcGFjaXR5ID0gMS4wO1xcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBVTklPTl9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdFxcdGRpc3RhbmNlVG9QbGFuZSA9IC0gZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSArIHBsYW5lLnc7XFxuXFx0XFx0XFx0ZGlzdGFuY2VHcmFkaWVudCA9IGZ3aWR0aCggZGlzdGFuY2VUb1BsYW5lICkgLyAyLjA7XFxuXFx0XFx0XFx0Y2xpcE9wYWNpdHkgKj0gc21vb3Roc3RlcCggLSBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZUdyYWRpZW50LCBkaXN0YW5jZVRvUGxhbmUgKTtcXG5cXHRcXHRcXHRpZiAoIGNsaXBPcGFjaXR5ID09IDAuMCApIGRpc2NhcmQ7XFxuXFx0XFx0fVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0XFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcXG5cXHRcXHRcXHRmbG9hdCB1bmlvbkNsaXBPcGFjaXR5ID0gMS4wO1xcblxcdFxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRcXHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0XFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdFxcdFxcdGRpc3RhbmNlVG9QbGFuZSA9IC0gZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSArIHBsYW5lLnc7XFxuXFx0XFx0XFx0XFx0ZGlzdGFuY2VHcmFkaWVudCA9IGZ3aWR0aCggZGlzdGFuY2VUb1BsYW5lICkgLyAyLjA7XFxuXFx0XFx0XFx0XFx0dW5pb25DbGlwT3BhY2l0eSAqPSAxLjAgLSBzbW9vdGhzdGVwKCAtIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlR3JhZGllbnQsIGRpc3RhbmNlVG9QbGFuZSApO1xcblxcdFxcdFxcdH1cXG5cXHRcXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdFxcdFxcdGNsaXBPcGFjaXR5ICo9IDEuMCAtIHVuaW9uQ2xpcE9wYWNpdHk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgKj0gY2xpcE9wYWNpdHk7XFxuXFx0XFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA9PSAwLjAgKSBkaXNjYXJkO1xcblxcdCNlbHNlXFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0aWYgKCBkb3QoIHZDbGlwUG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApIGRpc2NhcmQ7XFxuXFx0XFx0fVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0XFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcXG5cXHRcXHRcXHRib29sIGNsaXBwZWQgPSB0cnVlO1xcblxcdFxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRcXHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0XFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdFxcdFxcdGNsaXBwZWQgPSAoIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgJiYgY2xpcHBlZDtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHRcXHRcXHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZhcnlpbmcgdmVjMyB2Q2xpcFBvc2l0aW9uO1xcblxcdHVuaWZvcm0gdmVjNCBjbGlwcGluZ1BsYW5lc1sgTlVNX0NMSVBQSU5HX1BMQU5FUyBdO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4ID0gXCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHR2YXJ5aW5nIHZlYzMgdkNsaXBQb3NpdGlvbjtcXG4jZW5kaWZcIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZDbGlwUG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdGRpZmZ1c2VDb2xvciAqPSB2Q29sb3I7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcXG5cXHRkaWZmdXNlQ29sb3IucmdiICo9IHZDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdHZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SIClcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdHZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuI2VsaWYgZGVmaW5lZCggVVNFX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0lOU1RBTkNJTkdfQ09MT1IgKSB8fCBkZWZpbmVkKCBVU0VfQkFUQ0hJTkdfQ09MT1IgKVxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl92ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfQ09MT1JfQUxQSEEgKVxcblxcdHZDb2xvciA9IHZlYzQoIDEuMCApO1xcbiNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApIHx8IGRlZmluZWQoIFVTRV9JTlNUQU5DSU5HX0NPTE9SICkgfHwgZGVmaW5lZCggVVNFX0JBVENISU5HX0NPTE9SIClcXG5cXHR2Q29sb3IgPSB2ZWMzKCAxLjAgKTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NPTE9SXFxuXFx0dkNvbG9yICo9IGNvbG9yO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR19DT0xPUlxcblxcdHZDb2xvci54eXogKj0gaW5zdGFuY2VDb2xvci54eXo7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9CQVRDSElOR19DT0xPUlxcblxcdHZlYzMgYmF0Y2hpbmdDb2xvciA9IGdldEJhdGNoaW5nQ29sb3IoIGdldEluZGlyZWN0SW5kZXgoIGdsX0RyYXdJRCApICk7XFxuXFx0dkNvbG9yLnh5eiAqPSBiYXRjaGluZ0NvbG9yLnh5ejtcXG4jZW5kaWZcIjtcblxudmFyIGNvbW1vbiA9IFwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU4OTc5M1xcbiNkZWZpbmUgUEkyIDYuMjgzMTg1MzA3MTc5NTg2XFxuI2RlZmluZSBQSV9IQUxGIDEuNTcwNzk2MzI2Nzk0ODk2NlxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NjE4Mzc5MDdcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTQzMDkxODk1MzVcXG4jZGVmaW5lIEVQU0lMT04gMWUtNlxcbiNpZm5kZWYgc2F0dXJhdGVcXG4jZGVmaW5lIHNhdHVyYXRlKCBhICkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZW5kaWZcXG4jZGVmaW5lIHdoaXRlQ29tcGxlbWVudCggYSApICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbnZlYzMgcG93MiggY29uc3QgaW4gdmVjMyB4ICkgeyByZXR1cm4geCp4OyB9XFxuZmxvYXQgcG93MyggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeCp4OyB9XFxuZmxvYXQgcG93NCggY29uc3QgaW4gZmxvYXQgeCApIHsgZmxvYXQgeDIgPSB4Kng7IHJldHVybiB4Mip4MjsgfVxcbmZsb2F0IG1heDMoIGNvbnN0IGluIHZlYzMgdiApIHsgcmV0dXJuIG1heCggbWF4KCB2LngsIHYueSApLCB2LnogKTsgfVxcbmZsb2F0IGF2ZXJhZ2UoIGNvbnN0IGluIHZlYzMgdiApIHsgcmV0dXJuIGRvdCggdiwgdmVjMyggMC4zMzMzMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdCggc2luKCBzbiApICogYyApO1xcbn1cXG4jaWZkZWYgSElHSF9QUkVDSVNJT05cXG5cXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7IHJldHVybiBsZW5ndGgoIHYgKTsgfVxcbiNlbHNlXFxuXFx0ZmxvYXQgcHJlY2lzaW9uU2FmZUxlbmd0aCggdmVjMyB2ICkge1xcblxcdFxcdGZsb2F0IG1heENvbXBvbmVudCA9IG1heDMoIGFicyggdiApICk7XFxuXFx0XFx0cmV0dXJuIGxlbmd0aCggdiAvIG1heENvbXBvbmVudCApICogbWF4Q29tcG9uZW50O1xcblxcdH1cXG4jZW5kaWZcXG5zdHJ1Y3QgSW5jaWRlbnRMaWdodCB7XFxuXFx0dmVjMyBjb2xvcjtcXG5cXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRib29sIHZpc2libGU7XFxufTtcXG5zdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1xcblxcdHZlYzMgZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIGRpcmVjdFNwZWN1bGFyO1xcblxcdHZlYzMgaW5kaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcXG59O1xcbiNpZmRlZiBVU0VfQUxQSEFIQVNIXFxuXFx0dmFyeWluZyB2ZWMzIHZQb3NpdGlvbjtcXG4jZW5kaWZcXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggZGlyLCAwLjAgKSApLnh5eiApO1xcbn1cXG52ZWMzIGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIHZlYzQoIGRpciwgMC4wICkgKiBtYXRyaXggKS54eXogKTtcXG59XFxubWF0MyB0cmFuc3Bvc2VNYXQzKCBjb25zdCBpbiBtYXQzIG0gKSB7XFxuXFx0bWF0MyB0bXA7XFxuXFx0dG1wWyAwIF0gPSB2ZWMzKCBtWyAwIF0ueCwgbVsgMSBdLngsIG1bIDIgXS54ICk7XFxuXFx0dG1wWyAxIF0gPSB2ZWMzKCBtWyAwIF0ueSwgbVsgMSBdLnksIG1bIDIgXS55ICk7XFxuXFx0dG1wWyAyIF0gPSB2ZWMzKCBtWyAwIF0ueiwgbVsgMSBdLnosIG1bIDIgXS56ICk7XFxuXFx0cmV0dXJuIHRtcDtcXG59XFxuYm9vbCBpc1BlcnNwZWN0aXZlTWF0cml4KCBtYXQ0IG0gKSB7XFxuXFx0cmV0dXJuIG1bIDIgXVsgMyBdID09IC0gMS4wO1xcbn1cXG52ZWMyIGVxdWlyZWN0VXYoIGluIHZlYzMgZGlyICkge1xcblxcdGZsb2F0IHUgPSBhdGFuKCBkaXIueiwgZGlyLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdGZsb2F0IHYgPSBhc2luKCBjbGFtcCggZGlyLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRyZXR1cm4gdmVjMiggdSwgdiApO1xcbn1cXG52ZWMzIEJSREZfTGFtYmVydCggY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IgKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBkaWZmdXNlQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrKCBjb25zdCBpbiB2ZWMzIGYwLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC0gNS41NTQ3MyAqIGRvdFZIIC0gNi45ODMxNiApICogZG90VkggKTtcXG5cXHRyZXR1cm4gZjAgKiAoIDEuMCAtIGZyZXNuZWwgKSArICggZjkwICogZnJlc25lbCApO1xcbn1cXG5mbG9hdCBGX1NjaGxpY2soIGNvbnN0IGluIGZsb2F0IGYwLCBjb25zdCBpbiBmbG9hdCBmOTAsIGNvbnN0IGluIGZsb2F0IGRvdFZIICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC0gNS41NTQ3MyAqIGRvdFZIIC0gNi45ODMxNiApICogZG90VkggKTtcXG5cXHRyZXR1cm4gZjAgKiAoIDEuMCAtIGZyZXNuZWwgKSArICggZjkwICogZnJlc25lbCApO1xcbn0gLy8gdmFsaWRhdGVkXCI7XG5cbnZhciBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQgPSBcIiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuXFx0I2RlZmluZSBjdWJlVVZfbWluTWlwTGV2ZWwgNC4wXFxuXFx0I2RlZmluZSBjdWJlVVZfbWluVGlsZVNpemUgMTYuMFxcblxcdGZsb2F0IGdldEZhY2UoIHZlYzMgZGlyZWN0aW9uICkge1xcblxcdFxcdHZlYzMgYWJzRGlyZWN0aW9uID0gYWJzKCBkaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBmYWNlID0gLSAxLjA7XFxuXFx0XFx0aWYgKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi56ICkge1xcblxcdFxcdFxcdGlmICggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi54ID4gMC4wID8gMC4wIDogMy4wO1xcblxcdFxcdFxcdGVsc2VcXG5cXHRcXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxLjAgOiA0LjA7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRpZiAoIGFic0RpcmVjdGlvbi56ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueiA+IDAuMCA/IDIuMCA6IDUuMDtcXG5cXHRcXHRcXHRlbHNlXFxuXFx0XFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMS4wIDogNC4wO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gZmFjZTtcXG5cXHR9XFxuXFx0dmVjMiBnZXRVViggdmVjMyBkaXJlY3Rpb24sIGZsb2F0IGZhY2UgKSB7XFxuXFx0XFx0dmVjMiB1djtcXG5cXHRcXHRpZiAoIGZhY2UgPT0gMC4wICkge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55ICkgLyBhYnMoIGRpcmVjdGlvbi54ICk7XFxuXFx0XFx0fSBlbHNlIGlmICggZmFjZSA9PSAxLjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi54LCAtIGRpcmVjdGlvbi56ICkgLyBhYnMoIGRpcmVjdGlvbi55ICk7XFxuXFx0XFx0fSBlbHNlIGlmICggZmFjZSA9PSAyLjAgKSB7XFxuXFx0XFx0XFx0dXYgPSB2ZWMyKCAtIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueiApO1xcblxcdFxcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMy4wICkge1xcblxcdFxcdFxcdHV2ID0gdmVjMiggLSBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkgKSAvIGFicyggZGlyZWN0aW9uLnggKTtcXG5cXHRcXHR9IGVsc2UgaWYgKCBmYWNlID09IDQuMCApIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIC0gZGlyZWN0aW9uLngsIGRpcmVjdGlvbi56ICkgLyBhYnMoIGRpcmVjdGlvbi55ICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHR1diA9IHZlYzIoIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSApIC8gYWJzKCBkaXJlY3Rpb24ueiApO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gMC41ICogKCB1diArIDEuMCApO1xcblxcdH1cXG5cXHR2ZWMzIGJpbGluZWFyQ3ViZVVWKCBzYW1wbGVyMkQgZW52TWFwLCB2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgbWlwSW50ICkge1xcblxcdFxcdGZsb2F0IGZhY2UgPSBnZXRGYWNlKCBkaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBmaWx0ZXJJbnQgPSBtYXgoIGN1YmVVVl9taW5NaXBMZXZlbCAtIG1pcEludCwgMC4wICk7XFxuXFx0XFx0bWlwSW50ID0gbWF4KCBtaXBJbnQsIGN1YmVVVl9taW5NaXBMZXZlbCApO1xcblxcdFxcdGZsb2F0IGZhY2VTaXplID0gZXhwMiggbWlwSW50ICk7XFxuXFx0XFx0aGlnaHAgdmVjMiB1diA9IGdldFVWKCBkaXJlY3Rpb24sIGZhY2UgKSAqICggZmFjZVNpemUgLSAyLjAgKSArIDEuMDtcXG5cXHRcXHRpZiAoIGZhY2UgPiAyLjAgKSB7XFxuXFx0XFx0XFx0dXYueSArPSBmYWNlU2l6ZTtcXG5cXHRcXHRcXHRmYWNlIC09IDMuMDtcXG5cXHRcXHR9XFxuXFx0XFx0dXYueCArPSBmYWNlICogZmFjZVNpemU7XFxuXFx0XFx0dXYueCArPSBmaWx0ZXJJbnQgKiAzLjAgKiBjdWJlVVZfbWluVGlsZVNpemU7XFxuXFx0XFx0dXYueSArPSA0LjAgKiAoIGV4cDIoIENVQkVVVl9NQVhfTUlQICkgLSBmYWNlU2l6ZSApO1xcblxcdFxcdHV2LnggKj0gQ1VCRVVWX1RFWEVMX1dJRFRIO1xcblxcdFxcdHV2LnkgKj0gQ1VCRVVWX1RFWEVMX0hFSUdIVDtcXG5cXHRcXHQjaWZkZWYgdGV4dHVyZTJER3JhZEVYVFxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkRHcmFkRVhUKCBlbnZNYXAsIHV2LCB2ZWMyKCAwLjAgKSwgdmVjMiggMC4wICkgKS5yZ2I7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEKCBlbnZNYXAsIHV2ICkucmdiO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHQjZGVmaW5lIGN1YmVVVl9yMCAxLjBcXG5cXHQjZGVmaW5lIGN1YmVVVl9tMCAtIDIuMFxcblxcdCNkZWZpbmUgY3ViZVVWX3IxIDAuOFxcblxcdCNkZWZpbmUgY3ViZVVWX20xIC0gMS4wXFxuXFx0I2RlZmluZSBjdWJlVVZfcjQgMC40XFxuXFx0I2RlZmluZSBjdWJlVVZfbTQgMi4wXFxuXFx0I2RlZmluZSBjdWJlVVZfcjUgMC4zMDVcXG5cXHQjZGVmaW5lIGN1YmVVVl9tNSAzLjBcXG5cXHQjZGVmaW5lIGN1YmVVVl9yNiAwLjIxXFxuXFx0I2RlZmluZSBjdWJlVVZfbTYgNC4wXFxuXFx0ZmxvYXQgcm91Z2huZXNzVG9NaXAoIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRcXHRmbG9hdCBtaXAgPSAwLjA7XFxuXFx0XFx0aWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3IxICkge1xcblxcdFxcdFxcdG1pcCA9ICggY3ViZVVWX3IwIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tMSAtIGN1YmVVVl9tMCApIC8gKCBjdWJlVVZfcjAgLSBjdWJlVVZfcjEgKSArIGN1YmVVVl9tMDtcXG5cXHRcXHR9IGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I0ICkge1xcblxcdFxcdFxcdG1pcCA9ICggY3ViZVVWX3IxIC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNCAtIGN1YmVVVl9tMSApIC8gKCBjdWJlVVZfcjEgLSBjdWJlVVZfcjQgKSArIGN1YmVVVl9tMTtcXG5cXHRcXHR9IGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I1ICkge1xcblxcdFxcdFxcdG1pcCA9ICggY3ViZVVWX3I0IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNSAtIGN1YmVVVl9tNCApIC8gKCBjdWJlVVZfcjQgLSBjdWJlVVZfcjUgKSArIGN1YmVVVl9tNDtcXG5cXHRcXHR9IGVsc2UgaWYgKCByb3VnaG5lc3MgPj0gY3ViZVVWX3I2ICkge1xcblxcdFxcdFxcdG1pcCA9ICggY3ViZVVWX3I1IC0gcm91Z2huZXNzICkgKiAoIGN1YmVVVl9tNiAtIGN1YmVVVl9tNSApIC8gKCBjdWJlVVZfcjUgLSBjdWJlVVZfcjYgKSArIGN1YmVVVl9tNTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdG1pcCA9IC0gMi4wICogbG9nMiggMS4xNiAqIHJvdWdobmVzcyApO1xcdFxcdH1cXG5cXHRcXHRyZXR1cm4gbWlwO1xcblxcdH1cXG5cXHR2ZWM0IHRleHR1cmVDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgc2FtcGxlRGlyLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0XFx0ZmxvYXQgbWlwID0gY2xhbXAoIHJvdWdobmVzc1RvTWlwKCByb3VnaG5lc3MgKSwgY3ViZVVWX20wLCBDVUJFVVZfTUFYX01JUCApO1xcblxcdFxcdGZsb2F0IG1pcEYgPSBmcmFjdCggbWlwICk7XFxuXFx0XFx0ZmxvYXQgbWlwSW50ID0gZmxvb3IoIG1pcCApO1xcblxcdFxcdHZlYzMgY29sb3IwID0gYmlsaW5lYXJDdWJlVVYoIGVudk1hcCwgc2FtcGxlRGlyLCBtaXBJbnQgKTtcXG5cXHRcXHRpZiAoIG1pcEYgPT0gMC4wICkge1xcblxcdFxcdFxcdHJldHVybiB2ZWM0KCBjb2xvcjAsIDEuMCApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0dmVjMyBjb2xvcjEgPSBiaWxpbmVhckN1YmVVViggZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCArIDEuMCApO1xcblxcdFxcdFxcdHJldHVybiB2ZWM0KCBtaXgoIGNvbG9yMCwgY29sb3IxLCBtaXBGICksIDEuMCApO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBkZWZhdWx0bm9ybWFsX3ZlcnRleCA9IFwidmVjMyB0cmFuc2Zvcm1lZE5vcm1hbCA9IG9iamVjdE5vcm1hbDtcXG4jaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHR2ZWMzIHRyYW5zZm9ybWVkVGFuZ2VudCA9IG9iamVjdFRhbmdlbnQ7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9CQVRDSElOR1xcblxcdG1hdDMgYm0gPSBtYXQzKCBiYXRjaGluZ01hdHJpeCApO1xcblxcdHRyYW5zZm9ybWVkTm9ybWFsIC89IHZlYzMoIGRvdCggYm1bIDAgXSwgYm1bIDAgXSApLCBkb3QoIGJtWyAxIF0sIGJtWyAxIF0gKSwgZG90KCBibVsgMiBdLCBibVsgMiBdICkgKTtcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCA9IGJtICogdHJhbnNmb3JtZWROb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dHJhbnNmb3JtZWRUYW5nZW50ID0gYm0gKiB0cmFuc2Zvcm1lZFRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HXFxuXFx0bWF0MyBpbSA9IG1hdDMoIGluc3RhbmNlTWF0cml4ICk7XFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgLz0gdmVjMyggZG90KCBpbVsgMCBdLCBpbVsgMCBdICksIGRvdCggaW1bIDEgXSwgaW1bIDEgXSApLCBkb3QoIGltWyAyIF0sIGltWyAyIF0gKSApO1xcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gaW0gKiB0cmFuc2Zvcm1lZE5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSBpbSAqIHRyYW5zZm9ybWVkVGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG50cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIHRyYW5zZm9ybWVkTm9ybWFsO1xcbiNpZmRlZiBGTElQX1NJREVEXFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSAtIHRyYW5zZm9ybWVkTm9ybWFsO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHRyYW5zZm9ybWVkVGFuZ2VudCA9ICggbW9kZWxWaWV3TWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWRUYW5nZW50LCAwLjAgKSApLnh5ejtcXG5cXHQjaWZkZWYgRkxJUF9TSURFRFxcblxcdFxcdHRyYW5zZm9ybWVkVGFuZ2VudCA9IC0gdHJhbnNmb3JtZWRUYW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpc3BsYWNlbWVudE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudFNjYWxlO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50QmlhcztcXG4jZW5kaWZcIjtcblxudmFyIGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dHJhbnNmb3JtZWQgKz0gbm9ybWFsaXplKCBvYmplY3ROb3JtYWwgKSAqICggdGV4dHVyZTJEKCBkaXNwbGFjZW1lbnRNYXAsIHZEaXNwbGFjZW1lbnRNYXBVdiApLnggKiBkaXNwbGFjZW1lbnRTY2FsZSArIGRpc3BsYWNlbWVudEJpYXMgKTtcXG4jZW5kaWZcIjtcblxudmFyIGVtaXNzaXZlbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dmVjNCBlbWlzc2l2ZUNvbG9yID0gdGV4dHVyZTJEKCBlbWlzc2l2ZU1hcCwgdkVtaXNzaXZlTWFwVXYgKTtcXG5cXHQjaWZkZWYgREVDT0RFX1ZJREVPX1RFWFRVUkVfRU1JU1NJVkVcXG5cXHRcXHRlbWlzc2l2ZUNvbG9yID0gc1JHQlRyYW5zZmVyRU9URiggZW1pc3NpdmVDb2xvciApO1xcblxcdCNlbmRpZlxcblxcdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcXG4jZW5kaWZcIjtcblxudmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcXG4jZW5kaWZcIjtcblxudmFyIGNvbG9yc3BhY2VfZnJhZ21lbnQgPSBcImdsX0ZyYWdDb2xvciA9IGxpbmVhclRvT3V0cHV0VGV4ZWwoIGdsX0ZyYWdDb2xvciApO1wiO1xuXG52YXIgY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50ID0gXCJ2ZWM0IExpbmVhclRyYW5zZmVyT0VURiggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgc1JHQlRyYW5zZmVyRU9URiggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB2YWx1ZS5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgc1JHQlRyYW5zZmVyT0VURiggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggMC40MTY2NiApICkgKiAxLjA1NSAtIHZlYzMoIDAuMDU1ICksIHZhbHVlLnJnYiAqIDEyLjkyLCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDAzMTMwOCApICkgKSApLCB2YWx1ZS5hICk7XFxufVwiO1xuXG52YXIgZW52bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvRnJhZztcXG5cXHRcXHRpZiAoIGlzT3J0aG9ncmFwaGljICkge1xcblxcdFxcdFxcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRjYW1lcmFUb0ZyYWcgPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uIC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR9XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggY2FtZXJhVG9GcmFnLCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBlbnZNYXBSb3RhdGlvbiAqIHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHZlYzQoIDAuMCApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFlcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBvdXRnb2luZ0xpZ2h0ICogZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX01JWCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgZW52Q29sb3IueHl6LCBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5ICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX0JMRU5ESU5HX0FERCApXFxuXFx0XFx0b3V0Z29pbmdMaWdodCArPSBlbnZDb2xvci54eXogKiBzcGVjdWxhclN0cmVuZ3RoICogcmVmbGVjdGl2aXR5O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXHR1bmlmb3JtIG1hdDMgZW52TWFwUm90YXRpb247XFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcXG5cXHQjZW5kaWZcXG5cXHRcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApIHx8IGRlZmluZWQoIExBTUJFUlQgKVxcblxcdFxcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBMQU1CRVJUIClcXG5cXHRcXHQjZGVmaW5lIEVOVl9XT1JMRFBPU1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyBjYW1lcmFUb1ZlcnRleDtcXG5cXHRcXHRpZiAoIGlzT3J0aG9ncmFwaGljICkge1xcblxcdFxcdFxcdGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2ZWMzKCAtIHZpZXdNYXRyaXhbIDAgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDEgXVsgMiBdLCAtIHZpZXdNYXRyaXhbIDIgXVsgMiBdICkgKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB3b3JsZFBvc2l0aW9uLnh5eiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0fVxcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCB0cmFuc2Zvcm1lZE5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZSZWZsZWN0ID0gcmVmcmFjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsLCByZWZyYWN0aW9uUmF0aW8gKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGZvZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dkZvZ0RlcHRoID0gLSBtdlBvc2l0aW9uLno7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dmFyeWluZyBmbG9hdCB2Rm9nRGVwdGg7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gMS4wIC0gZXhwKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogdkZvZ0RlcHRoICogdkZvZ0RlcHRoICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIHZGb2dEZXB0aCApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgoIGdsX0ZyYWdDb2xvci5yZ2IsIGZvZ0NvbG9yLCBmb2dGYWN0b3IgKTtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGb2dEZXB0aDtcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0RlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZ3JhZGllbnRNYXA7XFxuI2VuZGlmXFxudmVjMyBnZXRHcmFkaWVudElycmFkaWFuY2UoIHZlYzMgbm9ybWFsLCB2ZWMzIGxpZ2h0RGlyZWN0aW9uICkge1xcblxcdGZsb2F0IGRvdE5MID0gZG90KCBub3JtYWwsIGxpZ2h0RGlyZWN0aW9uICk7XFxuXFx0dmVjMiBjb29yZCA9IHZlYzIoIGRvdE5MICogMC41ICsgMC41LCAwLjAgKTtcXG5cXHQjaWZkZWYgVVNFX0dSQURJRU5UTUFQXFxuXFx0XFx0cmV0dXJuIHZlYzMoIHRleHR1cmUyRCggZ3JhZGllbnRNYXAsIGNvb3JkICkuciApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMiBmdyA9IGZ3aWR0aCggY29vcmQgKSAqIDAuNTtcXG5cXHRcXHRyZXR1cm4gbWl4KCB2ZWMzKCAwLjcgKSwgdmVjMyggMS4wICksIHNtb290aHN0ZXAoIDAuNyAtIGZ3LngsIDAuNyArIGZ3LngsIGNvb3JkLnggKSApO1xcblxcdCNlbmRpZlxcbn1cIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfZnJhZ21lbnQgPSBcIkxhbWJlcnRNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1wiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCA9IFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuc3RydWN0IExhbWJlcnRNYXRlcmlhbCB7XFxuXFx0dmVjMyBkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG59O1xcbnZvaWQgUkVfRGlyZWN0X0xhbWJlcnQoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIExhbWJlcnRNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gTGFtYmVydE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X0xhbWJlcnRcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9MYW1iZXJ0XCI7XG5cbnZhciBsaWdodHNfcGFyc19iZWdpbiA9IFwidW5pZm9ybSBib29sIHJlY2VpdmVTaGFkb3c7XFxudW5pZm9ybSB2ZWMzIGFtYmllbnRMaWdodENvbG9yO1xcbiNpZiBkZWZpbmVkKCBVU0VfTElHSFRfUFJPQkVTIClcXG5cXHR1bmlmb3JtIHZlYzMgbGlnaHRQcm9iZVsgOSBdO1xcbiNlbmRpZlxcbnZlYzMgc2hHZXRJcnJhZGlhbmNlQXQoIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIHNoQ29lZmZpY2llbnRzWyA5IF0gKSB7XFxuXFx0ZmxvYXQgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcXG5cXHR2ZWMzIHJlc3VsdCA9IHNoQ29lZmZpY2llbnRzWyAwIF0gKiAwLjg4NjIyNztcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDEgXSAqIDIuMCAqIDAuNTExNjY0ICogeTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDIgXSAqIDIuMCAqIDAuNTExNjY0ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDMgXSAqIDIuMCAqIDAuNTExNjY0ICogeDtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDQgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHk7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA1IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNiBdICogKCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDcgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA4IF0gKiAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApO1xcblxcdHJldHVybiByZXN1bHQ7XFxufVxcbnZlYzMgZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbGlnaHRQcm9iZVsgOSBdLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBsaWdodFByb2JlICk7XFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbnZlYzMgZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gdmVjMyBhbWJpZW50TGlnaHRDb2xvciApIHtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBhbWJpZW50TGlnaHRDb2xvcjtcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxuZmxvYXQgZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbiggY29uc3QgaW4gZmxvYXQgbGlnaHREaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuXFx0ZmxvYXQgZGlzdGFuY2VGYWxsb2ZmID0gMS4wIC8gbWF4KCBwb3coIGxpZ2h0RGlzdGFuY2UsIGRlY2F5RXhwb25lbnQgKSwgMC4wMSApO1xcblxcdGlmICggY3V0b2ZmRGlzdGFuY2UgPiAwLjAgKSB7XFxuXFx0XFx0ZGlzdGFuY2VGYWxsb2ZmICo9IHBvdzIoIHNhdHVyYXRlKCAxLjAgLSBwb3c0KCBsaWdodERpc3RhbmNlIC8gY3V0b2ZmRGlzdGFuY2UgKSApICk7XFxuXFx0fVxcblxcdHJldHVybiBkaXN0YW5jZUZhbGxvZmY7XFxufVxcbmZsb2F0IGdldFNwb3RBdHRlbnVhdGlvbiggY29uc3QgaW4gZmxvYXQgY29uZUNvc2luZSwgY29uc3QgaW4gZmxvYXQgcGVudW1icmFDb3NpbmUsIGNvbnN0IGluIGZsb2F0IGFuZ2xlQ29zaW5lICkge1xcblxcdHJldHVybiBzbW9vdGhzdGVwKCBjb25lQ29zaW5lLCBwZW51bWJyYUNvc2luZSwgYW5nbGVDb3NpbmUgKTtcXG59XFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdHN0cnVjdCBEaXJlY3Rpb25hbExpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHRzWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGNvbnN0IGluIERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodCwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0bGlnaHQuY29sb3IgPSBkaXJlY3Rpb25hbExpZ2h0LmNvbG9yO1xcblxcdFxcdGxpZ2h0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbmFsTGlnaHQuZGlyZWN0aW9uO1xcblxcdFxcdGxpZ2h0LnZpc2libGUgPSB0cnVlO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUG9pbnRMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdH07XFxuXFx0dW5pZm9ybSBQb2ludExpZ2h0IHBvaW50TGlnaHRzWyBOVU1fUE9JTlRfTElHSFRTIF07XFxuXFx0dm9pZCBnZXRQb2ludExpZ2h0SW5mbyggY29uc3QgaW4gUG9pbnRMaWdodCBwb2ludExpZ2h0LCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIG91dCBJbmNpZGVudExpZ2h0IGxpZ2h0ICkge1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IHBvaW50TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeVBvc2l0aW9uO1xcblxcdFxcdGxpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRsaWdodC5jb2xvciA9IHBvaW50TGlnaHQuY29sb3I7XFxuXFx0XFx0bGlnaHQuY29sb3IgKj0gZ2V0RGlzdGFuY2VBdHRlbnVhdGlvbiggbGlnaHREaXN0YW5jZSwgcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSApO1xcblxcdFxcdGxpZ2h0LnZpc2libGUgPSAoIGxpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFNwb3RMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdFxcdGZsb2F0IGNvbmVDb3M7XFxuXFx0XFx0ZmxvYXQgcGVudW1icmFDb3M7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFNwb3RMaWdodEluZm8oIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgb3V0IEluY2lkZW50TGlnaHQgbGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gc3BvdExpZ2h0LnBvc2l0aW9uIC0gZ2VvbWV0cnlQb3NpdGlvbjtcXG5cXHRcXHRsaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBhbmdsZUNvcyA9IGRvdCggbGlnaHQuZGlyZWN0aW9uLCBzcG90TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZmxvYXQgc3BvdEF0dGVudWF0aW9uID0gZ2V0U3BvdEF0dGVudWF0aW9uKCBzcG90TGlnaHQuY29uZUNvcywgc3BvdExpZ2h0LnBlbnVtYnJhQ29zLCBhbmdsZUNvcyApO1xcblxcdFxcdGlmICggc3BvdEF0dGVudWF0aW9uID4gMC4wICkge1xcblxcdFxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRcXHRsaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvciAqIHNwb3RBdHRlbnVhdGlvbjtcXG5cXHRcXHRcXHRsaWdodC5jb2xvciAqPSBnZXREaXN0YW5jZUF0dGVudWF0aW9uKCBsaWdodERpc3RhbmNlLCBzcG90TGlnaHQuZGlzdGFuY2UsIHNwb3RMaWdodC5kZWNheSApO1xcblxcdFxcdFxcdGxpZ2h0LnZpc2libGUgPSAoIGxpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHRsaWdodC5jb2xvciA9IHZlYzMoIDAuMCApO1xcblxcdFxcdFxcdGxpZ2h0LnZpc2libGUgPSBmYWxzZTtcXG5cXHRcXHR9XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgUmVjdEFyZWFMaWdodCB7XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoO1xcblxcdFxcdHZlYzMgaGFsZkhlaWdodDtcXG5cXHR9O1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18xO1xcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y18yO1xcblxcdHVuaWZvcm0gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0c1sgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgXTtcXG4jZW5kaWZcXG4jaWYgTlVNX0hFTUlfTElHSFRTID4gMFxcblxcdHN0cnVjdCBIZW1pc3BoZXJlTGlnaHQge1xcblxcdFxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdFxcdHZlYzMgc2t5Q29sb3I7XFxuXFx0XFx0dmVjMyBncm91bmRDb2xvcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gSGVtaXNwaGVyZUxpZ2h0IGhlbWlzcGhlcmVMaWdodHNbIE5VTV9IRU1JX0xJR0hUUyBdO1xcblxcdHZlYzMgZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggY29uc3QgaW4gSGVtaXNwaGVyZUxpZ2h0IGhlbWlMaWdodCwgY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBkb3QoIG5vcm1hbCwgaGVtaUxpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90TkwgKyAwLjU7XFxuXFx0XFx0dmVjMyBpcnJhZGlhbmNlID0gbWl4KCBoZW1pTGlnaHQuZ3JvdW5kQ29sb3IsIGhlbWlMaWdodC5za3lDb2xvciwgaGVtaURpZmZ1c2VXZWlnaHQgKTtcXG5cXHRcXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHR2ZWMzIGdldElCTElycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbm9ybWFsICkge1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuXFx0XFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZVVWKCBlbnZNYXAsIGVudk1hcFJvdGF0aW9uICogd29ybGROb3JtYWwsIDEuMCApO1xcblxcdFxcdFxcdHJldHVybiBQSSAqIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB2ZWMzKCAwLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuXFx0dmVjMyBnZXRJQkxSYWRpYW5jZSggY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggLSB2aWV3RGlyLCBub3JtYWwgKTtcXG5cXHRcXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCBtaXgoIHJlZmxlY3RWZWMsIG5vcm1hbCwgcm91Z2huZXNzICogcm91Z2huZXNzKSApO1xcblxcdFxcdFxcdHJlZmxlY3RWZWMgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCByZWZsZWN0VmVjLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgZW52TWFwUm90YXRpb24gKiByZWZsZWN0VmVjLCByb3VnaG5lc3MgKTtcXG5cXHRcXHRcXHRyZXR1cm4gZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlcXG5cXHRcXHR2ZWMzIGdldElCTEFuaXNvdHJvcHlSYWRpYW5jZSggY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiB2ZWMzIGJpdGFuZ2VudCwgY29uc3QgaW4gZmxvYXQgYW5pc290cm9weSApIHtcXG5cXHRcXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcblxcdFxcdFxcdFxcdHZlYzMgYmVudE5vcm1hbCA9IGNyb3NzKCBiaXRhbmdlbnQsIHZpZXdEaXIgKTtcXG5cXHRcXHRcXHRcXHRiZW50Tm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggYmVudE5vcm1hbCwgYml0YW5nZW50ICkgKTtcXG5cXHRcXHRcXHRcXHRiZW50Tm9ybWFsID0gbm9ybWFsaXplKCBtaXgoIGJlbnROb3JtYWwsIG5vcm1hbCwgcG93MiggcG93MiggMS4wIC0gYW5pc290cm9weSAqICggMS4wIC0gcm91Z2huZXNzICkgKSApICkgKTtcXG5cXHRcXHRcXHRcXHRyZXR1cm4gZ2V0SUJMUmFkaWFuY2UoIHZpZXdEaXIsIGJlbnROb3JtYWwsIHJvdWdobmVzcyApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0cmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c190b29uX2ZyYWdtZW50ID0gXCJUb29uTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcIjtcblxudmFyIGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbnN0cnVjdCBUb29uTWF0ZXJpYWwge1xcblxcdHZlYzMgZGlmZnVzZUNvbG9yO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfVG9vbiggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gVG9vbk1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX1Rvb24oIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gVG9vbk1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X1Rvb25cXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9Ub29uXCI7XG5cbnZhciBsaWdodHNfcGhvbmdfZnJhZ21lbnQgPSBcIkJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiO1xcbm1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhcjtcXG5tYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyA9IHNoaW5pbmVzcztcXG5tYXRlcmlhbC5zcGVjdWxhclN0cmVuZ3RoID0gc3BlY3VsYXJTdHJlbmd0aDtcIjtcblxudmFyIGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5zdHJ1Y3QgQmxpbm5QaG9uZ01hdGVyaWFsIHtcXG5cXHR2ZWMzIGRpZmZ1c2VDb2xvcjtcXG5cXHR2ZWMzIHNwZWN1bGFyQ29sb3I7XFxuXFx0ZmxvYXQgc3BlY3VsYXJTaGluaW5lc3M7XFxuXFx0ZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG59O1xcbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfQmxpbm5QaG9uZyggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Tm9ybWFsLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyApICogbWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aDtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5UG9zaXRpb24sIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlOb3JtYWwsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlWaWV3RGlyLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmdcIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCA9IFwiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcXG52ZWMzIGR4eSA9IG1heCggYWJzKCBkRmR4KCBub25QZXJ0dXJiZWROb3JtYWwgKSApLCBhYnMoIGRGZHkoIG5vblBlcnR1cmJlZE5vcm1hbCApICkgKTtcXG5mbG9hdCBnZW9tZXRyeVJvdWdobmVzcyA9IG1heCggbWF4KCBkeHkueCwgZHh5LnkgKSwgZHh5LnogKTtcXG5tYXRlcmlhbC5yb3VnaG5lc3MgPSBtYXgoIHJvdWdobmVzc0ZhY3RvciwgMC4wNTI1ICk7bWF0ZXJpYWwucm91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzO1xcbm1hdGVyaWFsLnJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwucm91Z2huZXNzLCAxLjAgKTtcXG4jaWZkZWYgSU9SXFxuXFx0bWF0ZXJpYWwuaW9yID0gaW9yO1xcblxcdCNpZmRlZiBVU0VfU1BFQ1VMQVJcXG5cXHRcXHRmbG9hdCBzcGVjdWxhckludGVuc2l0eUZhY3RvciA9IHNwZWN1bGFySW50ZW5zaXR5O1xcblxcdFxcdHZlYzMgc3BlY3VsYXJDb2xvckZhY3RvciA9IHNwZWN1bGFyQ29sb3I7XFxuXFx0XFx0I2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxcblxcdFxcdFxcdHNwZWN1bGFyQ29sb3JGYWN0b3IgKj0gdGV4dHVyZTJEKCBzcGVjdWxhckNvbG9yTWFwLCB2U3BlY3VsYXJDb2xvck1hcFV2ICkucmdiO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdCNpZmRlZiBVU0VfU1BFQ1VMQVJfSU5URU5TSVRZTUFQXFxuXFx0XFx0XFx0c3BlY3VsYXJJbnRlbnNpdHlGYWN0b3IgKj0gdGV4dHVyZTJEKCBzcGVjdWxhckludGVuc2l0eU1hcCwgdlNwZWN1bGFySW50ZW5zaXR5TWFwVXYgKS5hO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gbWl4KCBzcGVjdWxhckludGVuc2l0eUZhY3RvciwgMS4wLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IHNwZWN1bGFySW50ZW5zaXR5RmFjdG9yID0gMS4wO1xcblxcdFxcdHZlYzMgc3BlY3VsYXJDb2xvckZhY3RvciA9IHZlYzMoIDEuMCApO1xcblxcdFxcdG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gMS4wO1xcblxcdCNlbmRpZlxcblxcdG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBtaXgoIG1pbiggcG93MiggKCBtYXRlcmlhbC5pb3IgLSAxLjAgKSAvICggbWF0ZXJpYWwuaW9yICsgMS4wICkgKSAqIHNwZWN1bGFyQ29sb3JGYWN0b3IsIHZlYzMoIDEuMCApICkgKiBzcGVjdWxhckludGVuc2l0eUZhY3RvciwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuI2Vsc2VcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCAwLjA0ICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcblxcdG1hdGVyaWFsLnNwZWN1bGFyRjkwID0gMS4wO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gY2xlYXJjb2F0O1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IGNsZWFyY29hdFJvdWdobmVzcztcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRGMCA9IHZlYzMoIDAuMDQgKTtcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRGOTAgPSAxLjA7XFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRNQVBcXG5cXHRcXHRtYXRlcmlhbC5jbGVhcmNvYXQgKj0gdGV4dHVyZTJEKCBjbGVhcmNvYXRNYXAsIHZDbGVhcmNvYXRNYXBVdiApLng7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXFxuXFx0XFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICo9IHRleHR1cmUyRCggY2xlYXJjb2F0Um91Z2huZXNzTWFwLCB2Q2xlYXJjb2F0Um91Z2huZXNzTWFwVXYgKS55O1xcblxcdCNlbmRpZlxcblxcdG1hdGVyaWFsLmNsZWFyY29hdCA9IHNhdHVyYXRlKCBtYXRlcmlhbC5jbGVhcmNvYXQgKTtcXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBtYXgoIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgMC4wNTI1ICk7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzICs9IGdlb21ldHJ5Um91Z2huZXNzO1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1pbiggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAxLjAgKTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0RJU1BFUlNJT05cXG5cXHRtYXRlcmlhbC5kaXNwZXJzaW9uID0gZGlzcGVyc2lvbjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFXFxuXFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2UgPSBpcmlkZXNjZW5jZTtcXG5cXHRtYXRlcmlhbC5pcmlkZXNjZW5jZUlPUiA9IGlyaWRlc2NlbmNlSU9SO1xcblxcdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VNQVBcXG5cXHRcXHRtYXRlcmlhbC5pcmlkZXNjZW5jZSAqPSB0ZXh0dXJlMkQoIGlyaWRlc2NlbmNlTWFwLCB2SXJpZGVzY2VuY2VNYXBVdiApLnI7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVBcXG5cXHRcXHRtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzcyA9IChpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW0gLSBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW0pICogdGV4dHVyZTJEKCBpcmlkZXNjZW5jZVRoaWNrbmVzc01hcCwgdklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXYgKS5nICsgaXJpZGVzY2VuY2VUaGlja25lc3NNaW5pbXVtO1xcblxcdCNlbHNlXFxuXFx0XFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3MgPSBpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTlxcblxcdG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBzaGVlbkNvbG9yO1xcblxcdCNpZmRlZiBVU0VfU0hFRU5fQ09MT1JNQVBcXG5cXHRcXHRtYXRlcmlhbC5zaGVlbkNvbG9yICo9IHRleHR1cmUyRCggc2hlZW5Db2xvck1hcCwgdlNoZWVuQ29sb3JNYXBVdiApLnJnYjtcXG5cXHQjZW5kaWZcXG5cXHRtYXRlcmlhbC5zaGVlblJvdWdobmVzcyA9IGNsYW1wKCBzaGVlblJvdWdobmVzcywgMC4wNywgMS4wICk7XFxuXFx0I2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcXG5cXHRcXHRtYXRlcmlhbC5zaGVlblJvdWdobmVzcyAqPSB0ZXh0dXJlMkQoIHNoZWVuUm91Z2huZXNzTWFwLCB2U2hlZW5Sb3VnaG5lc3NNYXBVdiApLmE7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTklTT1RST1BZXFxuXFx0I2lmZGVmIFVTRV9BTklTT1RST1BZTUFQXFxuXFx0XFx0bWF0MiBhbmlzb3Ryb3B5TWF0ID0gbWF0MiggYW5pc290cm9weVZlY3Rvci54LCBhbmlzb3Ryb3B5VmVjdG9yLnksIC0gYW5pc290cm9weVZlY3Rvci55LCBhbmlzb3Ryb3B5VmVjdG9yLnggKTtcXG5cXHRcXHR2ZWMzIGFuaXNvdHJvcHlQb2xhciA9IHRleHR1cmUyRCggYW5pc290cm9weU1hcCwgdkFuaXNvdHJvcHlNYXBVdiApLnJnYjtcXG5cXHRcXHR2ZWMyIGFuaXNvdHJvcHlWID0gYW5pc290cm9weU1hdCAqIG5vcm1hbGl6ZSggMi4wICogYW5pc290cm9weVBvbGFyLnJnIC0gdmVjMiggMS4wICkgKSAqIGFuaXNvdHJvcHlQb2xhci5iO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMiBhbmlzb3Ryb3B5ViA9IGFuaXNvdHJvcHlWZWN0b3I7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuYW5pc290cm9weSA9IGxlbmd0aCggYW5pc290cm9weVYgKTtcXG5cXHRpZiggbWF0ZXJpYWwuYW5pc290cm9weSA9PSAwLjAgKSB7XFxuXFx0XFx0YW5pc290cm9weVYgPSB2ZWMyKCAxLjAsIDAuMCApO1xcblxcdH0gZWxzZSB7XFxuXFx0XFx0YW5pc290cm9weVYgLz0gbWF0ZXJpYWwuYW5pc290cm9weTtcXG5cXHRcXHRtYXRlcmlhbC5hbmlzb3Ryb3B5ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKTtcXG5cXHR9XFxuXFx0bWF0ZXJpYWwuYWxwaGFUID0gbWl4KCBwb3cyKCBtYXRlcmlhbC5yb3VnaG5lc3MgKSwgMS4wLCBwb3cyKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ICkgKTtcXG5cXHRtYXRlcmlhbC5hbmlzb3Ryb3B5VCA9IHRiblsgMCBdICogYW5pc290cm9weVYueCArIHRiblsgMSBdICogYW5pc290cm9weVYueTtcXG5cXHRtYXRlcmlhbC5hbmlzb3Ryb3B5QiA9IHRiblsgMSBdICogYW5pc290cm9weVYueCAtIHRiblsgMCBdICogYW5pc290cm9weVYueTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50ID0gXCJzdHJ1Y3QgUGh5c2ljYWxNYXRlcmlhbCB7XFxuXFx0dmVjMyBkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXQgcm91Z2huZXNzO1xcblxcdHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdCBzcGVjdWxhckY5MDtcXG5cXHRmbG9hdCBkaXNwZXJzaW9uO1xcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgY2xlYXJjb2F0O1xcblxcdFxcdGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcXG5cXHRcXHR2ZWMzIGNsZWFyY29hdEYwO1xcblxcdFxcdGZsb2F0IGNsZWFyY29hdEY5MDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXFxuXFx0XFx0ZmxvYXQgaXJpZGVzY2VuY2U7XFxuXFx0XFx0ZmxvYXQgaXJpZGVzY2VuY2VJT1I7XFxuXFx0XFx0ZmxvYXQgaXJpZGVzY2VuY2VUaGlja25lc3M7XFxuXFx0XFx0dmVjMyBpcmlkZXNjZW5jZUZyZXNuZWw7XFxuXFx0XFx0dmVjMyBpcmlkZXNjZW5jZUYwO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHR2ZWMzIHNoZWVuQ29sb3I7XFxuXFx0XFx0ZmxvYXQgc2hlZW5Sb3VnaG5lc3M7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIElPUlxcblxcdFxcdGZsb2F0IGlvcjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcblxcdFxcdGZsb2F0IHRyYW5zbWlzc2lvbjtcXG5cXHRcXHRmbG9hdCB0cmFuc21pc3Npb25BbHBoYTtcXG5cXHRcXHRmbG9hdCB0aGlja25lc3M7XFxuXFx0XFx0ZmxvYXQgYXR0ZW51YXRpb25EaXN0YW5jZTtcXG5cXHRcXHR2ZWMzIGF0dGVudWF0aW9uQ29sb3I7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9BTklTT1RST1BZXFxuXFx0XFx0ZmxvYXQgYW5pc290cm9weTtcXG5cXHRcXHRmbG9hdCBhbHBoYVQ7XFxuXFx0XFx0dmVjMyBhbmlzb3Ryb3B5VDtcXG5cXHRcXHR2ZWMzIGFuaXNvdHJvcHlCO1xcblxcdCNlbmRpZlxcbn07XFxudmVjMyBjbGVhcmNvYXRTcGVjdWxhckRpcmVjdCA9IHZlYzMoIDAuMCApO1xcbnZlYzMgY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCA9IHZlYzMoIDAuMCApO1xcbnZlYzMgc2hlZW5TcGVjdWxhckRpcmVjdCA9IHZlYzMoIDAuMCApO1xcbnZlYzMgc2hlZW5TcGVjdWxhckluZGlyZWN0ID0gdmVjMygwLjAgKTtcXG52ZWMzIFNjaGxpY2tfdG9fRjAoIGNvbnN0IGluIHZlYzMgZiwgY29uc3QgaW4gZmxvYXQgZjkwLCBjb25zdCBpbiBmbG9hdCBkb3RWSCApIHtcXG4gICAgZmxvYXQgeCA9IGNsYW1wKCAxLjAgLSBkb3RWSCwgMC4wLCAxLjAgKTtcXG4gICAgZmxvYXQgeDIgPSB4ICogeDtcXG4gICAgZmxvYXQgeDUgPSBjbGFtcCggeCAqIHgyICogeDIsIDAuMCwgMC45OTk5ICk7XFxuICAgIHJldHVybiAoIGYgLSB2ZWMzKCBmOTAgKSAqIHg1ICkgLyAoIDEuMCAtIHg1ICk7XFxufVxcbmZsb2F0IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxuI2lmZGVmIFVTRV9BTklTT1RST1BZXFxuXFx0ZmxvYXQgVl9HR1hfU21pdGhDb3JyZWxhdGVkX0FuaXNvdHJvcGljKCBjb25zdCBpbiBmbG9hdCBhbHBoYVQsIGNvbnN0IGluIGZsb2F0IGFscGhhQiwgY29uc3QgaW4gZmxvYXQgZG90VFYsIGNvbnN0IGluIGZsb2F0IGRvdEJWLCBjb25zdCBpbiBmbG9hdCBkb3RUTCwgY29uc3QgaW4gZmxvYXQgZG90QkwsIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBkb3ROTCApIHtcXG5cXHRcXHRmbG9hdCBndiA9IGRvdE5MICogbGVuZ3RoKCB2ZWMzKCBhbHBoYVQgKiBkb3RUViwgYWxwaGFCICogZG90QlYsIGRvdE5WICkgKTtcXG5cXHRcXHRmbG9hdCBnbCA9IGRvdE5WICogbGVuZ3RoKCB2ZWMzKCBhbHBoYVQgKiBkb3RUTCwgYWxwaGFCICogZG90QkwsIGRvdE5MICkgKTtcXG5cXHRcXHRmbG9hdCB2ID0gMC41IC8gKCBndiArIGdsICk7XFxuXFx0XFx0cmV0dXJuIHNhdHVyYXRlKHYpO1xcblxcdH1cXG5cXHRmbG9hdCBEX0dHWF9Bbmlzb3Ryb3BpYyggY29uc3QgaW4gZmxvYXQgYWxwaGFULCBjb25zdCBpbiBmbG9hdCBhbHBoYUIsIGNvbnN0IGluIGZsb2F0IGRvdE5ILCBjb25zdCBpbiBmbG9hdCBkb3RUSCwgY29uc3QgaW4gZmxvYXQgZG90QkggKSB7XFxuXFx0XFx0ZmxvYXQgYTIgPSBhbHBoYVQgKiBhbHBoYUI7XFxuXFx0XFx0aGlnaHAgdmVjMyB2ID0gdmVjMyggYWxwaGFCICogZG90VEgsIGFscGhhVCAqIGRvdEJILCBhMiAqIGRvdE5IICk7XFxuXFx0XFx0aGlnaHAgZmxvYXQgdjIgPSBkb3QoIHYsIHYgKTtcXG5cXHRcXHRmbG9hdCB3MiA9IGEyIC8gdjI7XFxuXFx0XFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAqIHBvdzIgKCB3MiApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdHZlYzMgQlJERl9HR1hfQ2xlYXJjb2F0KCBjb25zdCBpbiB2ZWMzIGxpZ2h0RGlyLCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsKSB7XFxuXFx0XFx0dmVjMyBmMCA9IG1hdGVyaWFsLmNsZWFyY29hdEYwO1xcblxcdFxcdGZsb2F0IGY5MCA9IG1hdGVyaWFsLmNsZWFyY29hdEY5MDtcXG5cXHRcXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3M7XFxuXFx0XFx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcXG5cXHRcXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xcblxcdFxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdFxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRcXHRmbG9hdCBkb3RWSCA9IHNhdHVyYXRlKCBkb3QoIHZpZXdEaXIsIGhhbGZEaXIgKSApO1xcblxcdFxcdHZlYzMgRiA9IEZfU2NobGljayggZjAsIGY5MCwgZG90VkggKTtcXG5cXHRcXHRmbG9hdCBWID0gVl9HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0XFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRcXHRyZXR1cm4gRiAqICggViAqIEQgKTtcXG5cXHR9XFxuI2VuZGlmXFxudmVjMyBCUkRGX0dHWCggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCApIHtcXG5cXHR2ZWMzIGYwID0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdCBmOTAgPSBtYXRlcmlhbC5zcGVjdWxhckY5MDtcXG5cXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5yb3VnaG5lc3M7XFxuXFx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RWSCA9IHNhdHVyYXRlKCBkb3QoIHZpZXdEaXIsIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggZjAsIGY5MCwgZG90VkggKTtcXG5cXHQjaWZkZWYgVVNFX0lSSURFU0NFTkNFXFxuXFx0XFx0RiA9IG1peCggRiwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCBtYXRlcmlhbC5pcmlkZXNjZW5jZSApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfQU5JU09UUk9QWVxcblxcdFxcdGZsb2F0IGRvdFRMID0gZG90KCBtYXRlcmlhbC5hbmlzb3Ryb3B5VCwgbGlnaHREaXIgKTtcXG5cXHRcXHRmbG9hdCBkb3RUViA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weVQsIHZpZXdEaXIgKTtcXG5cXHRcXHRmbG9hdCBkb3RUSCA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weVQsIGhhbGZEaXIgKTtcXG5cXHRcXHRmbG9hdCBkb3RCTCA9IGRvdCggbWF0ZXJpYWwuYW5pc290cm9weUIsIGxpZ2h0RGlyICk7XFxuXFx0XFx0ZmxvYXQgZG90QlYgPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlCLCB2aWV3RGlyICk7XFxuXFx0XFx0ZmxvYXQgZG90QkggPSBkb3QoIG1hdGVyaWFsLmFuaXNvdHJvcHlCLCBoYWxmRGlyICk7XFxuXFx0XFx0ZmxvYXQgViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyggbWF0ZXJpYWwuYWxwaGFULCBhbHBoYSwgZG90VFYsIGRvdEJWLCBkb3RUTCwgZG90QkwsIGRvdE5WLCBkb3ROTCApO1xcblxcdFxcdGZsb2F0IEQgPSBEX0dHWF9Bbmlzb3Ryb3BpYyggbWF0ZXJpYWwuYWxwaGFULCBhbHBoYSwgZG90TkgsIGRvdFRILCBkb3RCSCApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgViA9IFZfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xcblxcdFxcdGZsb2F0IEQgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIEYgKiAoIFYgKiBEICk7XFxufVxcbnZlYzIgTFRDX1V2KCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGNvbnN0IGZsb2F0IExVVF9TSVpFID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyA9IDAuNSAvIExVVF9TSVpFO1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggTiwgViApICk7XFxuXFx0dmVjMiB1diA9IHZlYzIoIHJvdWdobmVzcywgc3FydCggMS4wIC0gZG90TlYgKSApO1xcblxcdHV2ID0gdXYgKiBMVVRfU0NBTEUgKyBMVVRfQklBUztcXG5cXHRyZXR1cm4gdXY7XFxufVxcbmZsb2F0IExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyBmICkge1xcblxcdGZsb2F0IGwgPSBsZW5ndGgoIGYgKTtcXG5cXHRyZXR1cm4gbWF4KCAoIGwgKiBsICsgZi56ICkgLyAoIGwgKyAxLjAgKSwgMC4wICk7XFxufVxcbnZlYzMgTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIHYxLCBjb25zdCBpbiB2ZWMzIHYyICkge1xcblxcdGZsb2F0IHggPSBkb3QoIHYxLCB2MiApO1xcblxcdGZsb2F0IHkgPSBhYnMoIHggKTtcXG5cXHRmbG9hdCBhID0gMC44NTQzOTg1ICsgKCAwLjQ5NjUxNTUgKyAwLjAxNDUyMDYgKiB5ICkgKiB5O1xcblxcdGZsb2F0IGIgPSAzLjQxNzU5NDAgKyAoIDQuMTYxNjcyNCArIHkgKSAqIHk7XFxuXFx0ZmxvYXQgdiA9IGEgLyBiO1xcblxcdGZsb2F0IHRoZXRhX3NpbnRoZXRhID0gKCB4ID4gMC4wICkgPyB2IDogMC41ICogaW52ZXJzZXNxcnQoIG1heCggMS4wIC0geCAqIHgsIDFlLTcgKSApIC0gdjtcXG5cXHRyZXR1cm4gY3Jvc3MoIHYxLCB2MiApICogdGhldGFfc2ludGhldGE7XFxufVxcbnZlYzMgTFRDX0V2YWx1YXRlKCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gdmVjMyBQLCBjb25zdCBpbiBtYXQzIG1JbnYsIGNvbnN0IGluIHZlYzMgcmVjdENvb3Jkc1sgNCBdICkge1xcblxcdHZlYzMgdjEgPSByZWN0Q29vcmRzWyAxIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyB2MiA9IHJlY3RDb29yZHNbIDMgXSAtIHJlY3RDb29yZHNbIDAgXTtcXG5cXHR2ZWMzIGxpZ2h0Tm9ybWFsID0gY3Jvc3MoIHYxLCB2MiApO1xcblxcdGlmKCBkb3QoIGxpZ2h0Tm9ybWFsLCBQIC0gcmVjdENvb3Jkc1sgMCBdICkgPCAwLjAgKSByZXR1cm4gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBUMSwgVDI7XFxuXFx0VDEgPSBub3JtYWxpemUoIFYgLSBOICogZG90KCBWLCBOICkgKTtcXG5cXHRUMiA9IC0gY3Jvc3MoIE4sIFQxICk7XFxuXFx0bWF0MyBtYXQgPSBtSW52ICogdHJhbnNwb3NlTWF0MyggbWF0MyggVDEsIFQyLCBOICkgKTtcXG5cXHR2ZWMzIGNvb3Jkc1sgNCBdO1xcblxcdGNvb3Jkc1sgMCBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAwIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAxIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDEgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDIgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMiBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMyBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAzIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAwIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMCBdICk7XFxuXFx0Y29vcmRzWyAxIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMSBdICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMiBdICk7XFxuXFx0Y29vcmRzWyAzIF0gPSBub3JtYWxpemUoIGNvb3Jkc1sgMyBdICk7XFxuXFx0dmVjMyB2ZWN0b3JGb3JtRmFjdG9yID0gdmVjMyggMC4wICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMCBdLCBjb29yZHNbIDEgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDEgXSwgY29vcmRzWyAyIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAyIF0sIGNvb3Jkc1sgMyBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMyBdLCBjb29yZHNbIDAgXSApO1xcblxcdGZsb2F0IHJlc3VsdCA9IExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggdmVjdG9yRm9ybUZhY3RvciApO1xcblxcdHJldHVybiB2ZWMzKCByZXN1bHQgKTtcXG59XFxuI2lmIGRlZmluZWQoIFVTRV9TSEVFTiApXFxuZmxvYXQgRF9DaGFybGllKCBmbG9hdCByb3VnaG5lc3MsIGZsb2F0IGRvdE5IICkge1xcblxcdGZsb2F0IGFscGhhID0gcG93Miggcm91Z2huZXNzICk7XFxuXFx0ZmxvYXQgaW52QWxwaGEgPSAxLjAgLyBhbHBoYTtcXG5cXHRmbG9hdCBjb3MyaCA9IGRvdE5IICogZG90Tkg7XFxuXFx0ZmxvYXQgc2luMmggPSBtYXgoIDEuMCAtIGNvczJoLCAwLjAwNzgxMjUgKTtcXG5cXHRyZXR1cm4gKCAyLjAgKyBpbnZBbHBoYSApICogcG93KCBzaW4yaCwgaW52QWxwaGEgKiAwLjUgKSAvICggMi4wICogUEkgKTtcXG59XFxuZmxvYXQgVl9OZXViZWx0KCBmbG9hdCBkb3ROViwgZmxvYXQgZG90TkwgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCAxLjAgLyAoIDQuMCAqICggZG90TkwgKyBkb3ROViAtIGRvdE5MICogZG90TlYgKSApICk7XFxufVxcbnZlYzMgQlJERl9TaGVlbiggY29uc3QgaW4gdmVjMyBsaWdodERpciwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgdmVjMyBzaGVlbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBzaGVlblJvdWdobmVzcyApIHtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGxpZ2h0RGlyICsgdmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBsaWdodERpciApICk7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBEID0gRF9DaGFybGllKCBzaGVlblJvdWdobmVzcywgZG90TkggKTtcXG5cXHRmbG9hdCBWID0gVl9OZXViZWx0KCBkb3ROViwgZG90TkwgKTtcXG5cXHRyZXR1cm4gc2hlZW5Db2xvciAqICggRCAqIFYgKTtcXG59XFxuI2VuZGlmXFxuZmxvYXQgSUJMU2hlZW5CUkRGKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGZsb2F0IHIyID0gcm91Z2huZXNzICogcm91Z2huZXNzO1xcblxcdGZsb2F0IGEgPSByb3VnaG5lc3MgPCAwLjI1ID8gLTMzOS4yICogcjIgKyAxNjEuNCAqIHJvdWdobmVzcyAtIDI1LjkgOiAtOC40OCAqIHIyICsgMTQuMyAqIHJvdWdobmVzcyAtIDkuOTU7XFxuXFx0ZmxvYXQgYiA9IHJvdWdobmVzcyA8IDAuMjUgPyA0NC4wICogcjIgLSAyMy43ICogcm91Z2huZXNzICsgMy4yNiA6IDEuOTcgKiByMiAtIDMuMjcgKiByb3VnaG5lc3MgKyAwLjcyO1xcblxcdGZsb2F0IERHID0gZXhwKCBhICogZG90TlYgKyBiICkgKyAoIHJvdWdobmVzcyA8IDAuMjUgPyAwLjAgOiAwLjEgKiAoIHJvdWdobmVzcyAtIDAuMjUgKSApO1xcblxcdHJldHVybiBzYXR1cmF0ZSggREcgKiBSRUNJUFJPQ0FMX1BJICk7XFxufVxcbnZlYzIgREZHQXBwcm94KCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGNvbnN0IHZlYzQgYzAgPSB2ZWM0KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xcblxcdGNvbnN0IHZlYzQgYzEgPSB2ZWM0KCAxLCAwLjA0MjUsIDEuMDQsIC0gMC4wNCApO1xcblxcdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XFxuXFx0ZmxvYXQgYTAwNCA9IG1pbiggci54ICogci54LCBleHAyKCAtIDkuMjggKiBkb3ROViApICkgKiByLnggKyByLnk7XFxuXFx0dmVjMiBmYWIgPSB2ZWMyKCAtIDEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xcblxcdHJldHVybiBmYWI7XFxufVxcbnZlYzMgRW52aXJvbm1lbnRCUkRGKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0dmVjMiBmYWIgPSBERkdBcHByb3goIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBmYWIueCArIHNwZWN1bGFyRjkwICogZmFiLnk7XFxufVxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG52b2lkIGNvbXB1dGVNdWx0aXNjYXR0ZXJpbmdJcmlkZXNjZW5jZSggY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gZmxvYXQgaXJpZGVzY2VuY2UsIGNvbnN0IGluIHZlYzMgaXJpZGVzY2VuY2VGMCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBpbm91dCB2ZWMzIHNpbmdsZVNjYXR0ZXIsIGlub3V0IHZlYzMgbXVsdGlTY2F0dGVyICkge1xcbiNlbHNlXFxudm9pZCBjb21wdXRlTXVsdGlzY2F0dGVyaW5nKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNwZWN1bGFyRjkwLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGlub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXIgKSB7XFxuI2VuZGlmXFxuXFx0dmVjMiBmYWIgPSBERkdBcHByb3goIG5vcm1hbCwgdmlld0Rpciwgcm91Z2huZXNzICk7XFxuXFx0I2lmZGVmIFVTRV9JUklERVNDRU5DRVxcblxcdFxcdHZlYzMgRnIgPSBtaXgoIHNwZWN1bGFyQ29sb3IsIGlyaWRlc2NlbmNlRjAsIGlyaWRlc2NlbmNlICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIEZyID0gc3BlY3VsYXJDb2xvcjtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIEZzc0VzcyA9IEZyICogZmFiLnggKyBzcGVjdWxhckY5MCAqIGZhYi55O1xcblxcdGZsb2F0IEVzcyA9IGZhYi54ICsgZmFiLnk7XFxuXFx0ZmxvYXQgRW1zID0gMS4wIC0gRXNzO1xcblxcdHZlYzMgRmF2ZyA9IEZyICsgKCAxLjAgLSBGciApICogMC4wNDc2MTk7XFx0dmVjMyBGbXMgPSBGc3NFc3MgKiBGYXZnIC8gKCAxLjAgLSBFbXMgKiBGYXZnICk7XFxuXFx0c2luZ2xlU2NhdHRlciArPSBGc3NFc3M7XFxuXFx0bXVsdGlTY2F0dGVyICs9IEZtcyAqIEVtcztcXG59XFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHZvaWQgUkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsKCBjb25zdCBpbiBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlQb3NpdGlvbiwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeU5vcm1hbCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVZpZXdEaXIsIGNvbnN0IGluIHZlYzMgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbm9ybWFsID0gZ2VvbWV0cnlOb3JtYWw7XFxuXFx0XFx0dmVjMyB2aWV3RGlyID0gZ2VvbWV0cnlWaWV3RGlyO1xcblxcdFxcdHZlYzMgcG9zaXRpb24gPSBnZW9tZXRyeVBvc2l0aW9uO1xcblxcdFxcdHZlYzMgbGlnaHRQb3MgPSByZWN0QXJlYUxpZ2h0LnBvc2l0aW9uO1xcblxcdFxcdHZlYzMgaGFsZldpZHRoID0gcmVjdEFyZWFMaWdodC5oYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0ID0gcmVjdEFyZWFMaWdodC5oYWxmSGVpZ2h0O1xcblxcdFxcdHZlYzMgbGlnaHRDb2xvciA9IHJlY3RBcmVhTGlnaHQuY29sb3I7XFxuXFx0XFx0ZmxvYXQgcm91Z2huZXNzID0gbWF0ZXJpYWwucm91Z2huZXNzO1xcblxcdFxcdHZlYzMgcmVjdENvb3Jkc1sgNCBdO1xcblxcdFxcdHJlY3RDb29yZHNbIDAgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXHRcXHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyAtIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zICsgaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdFxcdHZlYzQgdDEgPSB0ZXh0dXJlMkQoIGx0Y18xLCB1diApO1xcblxcdFxcdHZlYzQgdDIgPSB0ZXh0dXJlMkQoIGx0Y18yLCB1diApO1xcblxcdFxcdG1hdDMgbUludiA9IG1hdDMoXFxuXFx0XFx0XFx0dmVjMyggdDEueCwgMCwgdDEueSApLFxcblxcdFxcdFxcdHZlYzMoICAgIDAsIDEsICAgIDAgKSxcXG5cXHRcXHRcXHR2ZWMzKCB0MS56LCAwLCB0MS53IClcXG5cXHRcXHQpO1xcblxcdFxcdHZlYzMgZnJlc25lbCA9ICggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHQyLnggKyAoIHZlYzMoIDEuMCApIC0gbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciApICogdDIueSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBmcmVzbmVsICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtSW52LCByZWN0Q29vcmRzICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBsaWdodENvbG9yICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICogTFRDX0V2YWx1YXRlKCBub3JtYWwsIHZpZXdEaXIsIHBvc2l0aW9uLCBtYXQzKCAxLjAgKSwgcmVjdENvb3JkcyApO1xcblxcdH1cXG4jZW5kaWZcXG52b2lkIFJFX0RpcmVjdF9QaHlzaWNhbCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeU5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgZG90TkxjYyA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdFxcdHZlYzMgY2NJcnJhZGlhbmNlID0gZG90TkxjYyAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ICs9IGNjSXJyYWRpYW5jZSAqIEJSREZfR0dYX0NsZWFyY29hdCggZGlyZWN0TGlnaHQuZGlyZWN0aW9uLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHRzaGVlblNwZWN1bGFyRGlyZWN0ICs9IGlycmFkaWFuY2UgKiBCUkRGX1NoZWVuKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlOb3JtYWwsIG1hdGVyaWFsLnNoZWVuQ29sb3IsIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfR0dYKCBkaXJlY3RMaWdodC5kaXJlY3Rpb24sIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlOb3JtYWwsIG1hdGVyaWFsICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgcmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBjbGVhcmNvYXRSYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeVBvc2l0aW9uLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Tm9ybWFsLCBjb25zdCBpbiB2ZWMzIGdlb21ldHJ5Vmlld0RpciwgY29uc3QgaW4gdmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQpIHtcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdFxcdGNsZWFyY29hdFNwZWN1bGFySW5kaXJlY3QgKz0gY2xlYXJjb2F0UmFkaWFuY2UgKiBFbnZpcm9ubWVudEJSREYoIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHRzaGVlblNwZWN1bGFySW5kaXJlY3QgKz0gaXJyYWRpYW5jZSAqIG1hdGVyaWFsLnNoZWVuQ29sb3IgKiBJQkxTaGVlbkJSREYoIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzICk7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMyBzaW5nbGVTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBtdWx0aVNjYXR0ZXJpbmcgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGNvc2luZVdlaWdodGVkSXJyYWRpYW5jZSA9IGlycmFkaWFuY2UgKiBSRUNJUFJPQ0FMX1BJO1xcblxcdCNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHRcXHRjb21wdXRlTXVsdGlzY2F0dGVyaW5nSXJpZGVzY2VuY2UoIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyRjkwLCBtYXRlcmlhbC5pcmlkZXNjZW5jZSwgbWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsLCBtYXRlcmlhbC5yb3VnaG5lc3MsIHNpbmdsZVNjYXR0ZXJpbmcsIG11bHRpU2NhdHRlcmluZyApO1xcblxcdCNlbHNlXFxuXFx0XFx0Y29tcHV0ZU11bHRpc2NhdHRlcmluZyggZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsIG1hdGVyaWFsLnJvdWdobmVzcywgc2luZ2xlU2NhdHRlcmluZywgbXVsdGlTY2F0dGVyaW5nICk7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMyB0b3RhbFNjYXR0ZXJpbmcgPSBzaW5nbGVTY2F0dGVyaW5nICsgbXVsdGlTY2F0dGVyaW5nO1xcblxcdHZlYzMgZGlmZnVzZSA9IG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqICggMS4wIC0gbWF4KCBtYXgoIHRvdGFsU2NhdHRlcmluZy5yLCB0b3RhbFNjYXR0ZXJpbmcuZyApLCB0b3RhbFNjYXR0ZXJpbmcuYiApICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSByYWRpYW5jZSAqIHNpbmdsZVNjYXR0ZXJpbmc7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGRpZmZ1c2UgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X1BoeXNpY2FsXFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclxcdFxcdFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWxcXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcXG59XCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfYmVnaW4gPSBcIlxcbnZlYzMgZ2VvbWV0cnlQb3NpdGlvbiA9IC0gdlZpZXdQb3NpdGlvbjtcXG52ZWMzIGdlb21ldHJ5Tm9ybWFsID0gbm9ybWFsO1xcbnZlYzMgZ2VvbWV0cnlWaWV3RGlyID0gKCBpc09ydGhvZ3JhcGhpYyApID8gdmVjMyggMCwgMCwgMSApIDogbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxudmVjMyBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCA9IHZlYzMoIDAuMCApO1xcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0Z2VvbWV0cnlDbGVhcmNvYXROb3JtYWwgPSBjbGVhcmNvYXROb3JtYWw7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9JUklERVNDRU5DRVxcblxcdGZsb2F0IGRvdE5WaSA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyICkgKTtcXG5cXHRpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzID09IDAuMCApIHtcXG5cXHRcXHRtYXRlcmlhbC5pcmlkZXNjZW5jZSA9IDAuMDtcXG5cXHR9IGVsc2Uge1xcblxcdFxcdG1hdGVyaWFsLmlyaWRlc2NlbmNlID0gc2F0dXJhdGUoIG1hdGVyaWFsLmlyaWRlc2NlbmNlICk7XFxuXFx0fVxcblxcdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPiAwLjAgKSB7XFxuXFx0XFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2VGcmVzbmVsID0gZXZhbElyaWRlc2NlbmNlKCAxLjAsIG1hdGVyaWFsLmlyaWRlc2NlbmNlSU9SLCBkb3ROVmksIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzLCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICk7XFxuXFx0XFx0bWF0ZXJpYWwuaXJpZGVzY2VuY2VGMCA9IFNjaGxpY2tfdG9fRjAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlRnJlc25lbCwgMS4wLCBkb3ROVmkgKTtcXG5cXHR9XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG4jaWYgKCBOVU1fUE9JTlRfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93O1xcblxcdCNlbmRpZlxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFBvaW50TGlnaHRJbmZvKCBwb2ludExpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdHBvaW50TGlnaHRTaGFkb3cgPSBwb2ludExpZ2h0U2hhZG93c1sgaSBdO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9ICggZGlyZWN0TGlnaHQudmlzaWJsZSAmJiByZWNlaXZlU2hhZG93ICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0ludGVuc2l0eSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGdlb21ldHJ5Tm9ybWFsLCBnZW9tZXRyeVZpZXdEaXIsIGdlb21ldHJ5Q2xlYXJjb2F0Tm9ybWFsLCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgKCBOVU1fU1BPVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xcblxcdHZlYzQgc3BvdENvbG9yO1xcblxcdHZlYzMgc3BvdExpZ2h0Q29vcmQ7XFxuXFx0Ym9vbCBpblNwb3RMaWdodE1hcDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0U3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvdztcXG5cXHQjZW5kaWZcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRTcG90TGlnaHRJbmZvKCBzcG90TGlnaHQsIGdlb21ldHJ5UG9zaXRpb24sIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1NfV0lUSF9NQVBTIClcXG5cXHRcXHQjZGVmaW5lIFNQT1RfTElHSFRfTUFQX0lOREVYIFVOUk9MTEVEX0xPT1BfSU5ERVhcXG5cXHRcXHQjZWxpZiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIClcXG5cXHRcXHQjZGVmaW5lIFNQT1RfTElHSFRfTUFQX0lOREVYIE5VTV9TUE9UX0xJR0hUX01BUFNcXG5cXHRcXHQjZWxzZVxcblxcdFxcdCNkZWZpbmUgU1BPVF9MSUdIVF9NQVBfSU5ERVggKCBVTlJPTExFRF9MT09QX0lOREVYIC0gTlVNX1NQT1RfTElHSFRfU0hBRE9XUyArIE5VTV9TUE9UX0xJR0hUX1NIQURPV1NfV0lUSF9NQVBTIClcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHQjaWYgKCBTUE9UX0xJR0hUX01BUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX01BUFMgKVxcblxcdFxcdFxcdHNwb3RMaWdodENvb3JkID0gdlNwb3RMaWdodENvb3JkWyBpIF0ueHl6IC8gdlNwb3RMaWdodENvb3JkWyBpIF0udztcXG5cXHRcXHRcXHRpblNwb3RMaWdodE1hcCA9IGFsbCggbGVzc1RoYW4oIGFicyggc3BvdExpZ2h0Q29vcmQgKiAyLiAtIDEuICksIHZlYzMoIDEuMCApICkgKTtcXG5cXHRcXHRcXHRzcG90Q29sb3IgPSB0ZXh0dXJlMkQoIHNwb3RMaWdodE1hcFsgU1BPVF9MSUdIVF9NQVBfSU5ERVggXSwgc3BvdExpZ2h0Q29vcmQueHkgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IGluU3BvdExpZ2h0TWFwID8gZGlyZWN0TGlnaHQuY29sb3IgKiBzcG90Q29sb3IucmdiIDogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0I3VuZGVmIFNQT1RfTElHSFRfTUFQX0lOREVYXFxuXFx0XFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIClcXG5cXHRcXHRzcG90TGlnaHRTaGFkb3cgPSBzcG90TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gKCBkaXJlY3RMaWdodC52aXNpYmxlICYmIHJlY2VpdmVTaGFkb3cgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0U2hhZG93LnNoYWRvd0ludGVuc2l0eSwgc3BvdExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZTcG90TGlnaHRDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdERpcmVjdGlvbmFsTGlnaHRTaGFkb3cgZGlyZWN0aW9uYWxMaWdodFNoYWRvdztcXG5cXHQjZW5kaWZcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxMaWdodEluZm8oIGRpcmVjdGlvbmFsTGlnaHQsIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fRElSX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cgPSBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgaSBdO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9ICggZGlyZWN0TGlnaHQudmlzaWJsZSAmJiByZWNlaXZlU2hhZG93ICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dJbnRlbnNpdHksIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmICggTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0X1JlY3RBcmVhIClcXG5cXHRSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9SRUNUX0FSRUFfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHJlY3RBcmVhTGlnaHQgPSByZWN0QXJlYUxpZ2h0c1sgaSBdO1xcblxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYSggcmVjdEFyZWFMaWdodCwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdHZlYzMgaWJsSXJyYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9MSUdIVF9QUk9CRVMgKVxcblxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5Tm9ybWFsICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmICggTlVNX0hFTUlfTElHSFRTID4gMCApXFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRcXHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnlOb3JtYWwgKTtcXG5cXHRcXHR9XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0dmVjMyByYWRpYW5jZSA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9tYXBzID0gXCIjaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdkxpZ2h0TWFwVXYgKTtcXG5cXHRcXHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IGxpZ2h0TWFwVGV4ZWwucmdiICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0XFx0aXJyYWRpYW5jZSArPSBsaWdodE1hcElycmFkaWFuY2U7XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdGlibElycmFkaWFuY2UgKz0gZ2V0SUJMSXJyYWRpYW5jZSggZ2VvbWV0cnlOb3JtYWwgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdCNpZmRlZiBVU0VfQU5JU09UUk9QWVxcblxcdFxcdHJhZGlhbmNlICs9IGdldElCTEFuaXNvdHJvcHlSYWRpYW5jZSggZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeU5vcm1hbCwgbWF0ZXJpYWwucm91Z2huZXNzLCBtYXRlcmlhbC5hbmlzb3Ryb3B5QiwgbWF0ZXJpYWwuYW5pc290cm9weSApO1xcblxcdCNlbHNlXFxuXFx0XFx0cmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlOb3JtYWwsIG1hdGVyaWFsLnJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0XFx0Y2xlYXJjb2F0UmFkaWFuY2UgKz0gZ2V0SUJMUmFkaWFuY2UoIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2ZyYWdtZW50X2VuZCA9IFwiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0UkVfSW5kaXJlY3REaWZmdXNlKCBpcnJhZGlhbmNlLCBnZW9tZXRyeVBvc2l0aW9uLCBnZW9tZXRyeU5vcm1hbCwgZ2VvbWV0cnlWaWV3RGlyLCBnZW9tZXRyeUNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdFJFX0luZGlyZWN0U3BlY3VsYXIoIHJhZGlhbmNlLCBpYmxJcnJhZGlhbmNlLCBjbGVhcmNvYXRSYWRpYW5jZSwgZ2VvbWV0cnlQb3NpdGlvbiwgZ2VvbWV0cnlOb3JtYWwsIGdlb21ldHJ5Vmlld0RpciwgZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKVxcblxcdGdsX0ZyYWdEZXB0aCA9IHZJc1BlcnNwZWN0aXZlID09IDAuMCA/IGdsX0ZyYWdDb29yZC56IDogbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKVxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcblxcdHZhcnlpbmcgZmxvYXQgdklzUGVyc3BlY3RpdmU7XFxuI2VuZGlmXCI7XG5cbnZhciBsb2dkZXB0aGJ1Zl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcXG5cXHR2SXNQZXJzcGVjdGl2ZSA9IGZsb2F0KCBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICkgKTtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWM0IHNhbXBsZWREaWZmdXNlQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdk1hcFV2ICk7XFxuXFx0I2lmZGVmIERFQ09ERV9WSURFT19URVhUVVJFXFxuXFx0XFx0c2FtcGxlZERpZmZ1c2VDb2xvciA9IHNSR0JUcmFuc2ZlckVPVEYoIHNhbXBsZWREaWZmdXNlQ29sb3IgKTtcXG5cXHQjZW5kaWZcXG5cXHRkaWZmdXNlQ29sb3IgKj0gc2FtcGxlZERpZmZ1c2VDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcdCNpZiBkZWZpbmVkKCBVU0VfUE9JTlRTX1VWIClcXG5cXHRcXHR2ZWMyIHV2ID0gdlV2O1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjMiB1diA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSwgMSApICkueHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHRkaWZmdXNlQ29sb3IgKj0gdGV4dHVyZTJEKCBtYXAsIHV2ICk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIHV2ICkuZztcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX1BPSU5UU19VViApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG4jZWxzZVxcblxcdCNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQIClcXG5cXHRcXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBtZXRhbG5lc3NGYWN0b3IgPSBtZXRhbG5lc3M7XFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR2ZWM0IHRleGVsTWV0YWxuZXNzID0gdGV4dHVyZTJEKCBtZXRhbG5lc3NNYXAsIHZNZXRhbG5lc3NNYXBVdiApO1xcblxcdG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xcbiNlbmRpZlwiO1xuXG52YXIgbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxuZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGhpbnN0YW5jZV92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfSU5TVEFOQ0lOR19NT1JQSFxcblxcdGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XFxuXFx0ZmxvYXQgbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlID0gdGV4ZWxGZXRjaCggbW9ycGhUZXh0dXJlLCBpdmVjMiggMCwgZ2xfSW5zdGFuY2VJRCApLCAwICkucjtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBNT1JQSFRBUkdFVFNfQ09VTlQ7IGkgKysgKSB7XFxuXFx0XFx0bW9ycGhUYXJnZXRJbmZsdWVuY2VzW2ldID0gIHRleGVsRmV0Y2goIG1vcnBoVGV4dHVyZSwgaXZlYzIoIGkgKyAxLCBnbF9JbnN0YW5jZUlEICksIDAgKS5yO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG1vcnBoY29sb3JfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX01PUlBIQ09MT1JTIClcXG5cXHR2Q29sb3IgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX0NPTE9SX0FMUEhBIClcXG5cXHRcXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHZDb2xvciArPSBnZXRNb3JwaCggZ2xfVmVydGV4SUQsIGksIDIgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApXFxuXFx0XFx0XFx0aWYgKCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSAhPSAwLjAgKSB2Q29sb3IgKz0gZ2V0TW9ycGgoIGdsX1ZlcnRleElELCBpLCAyICkucmdiICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF07XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgbW9ycGhub3JtYWxfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBITk9STUFMU1xcblxcdG9iamVjdE5vcm1hbCAqPSBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTU9SUEhUQVJHRVRTX0NPVU5UOyBpICsrICkge1xcblxcdFxcdGlmICggbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gIT0gMC4wICkgb2JqZWN0Tm9ybWFsICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMSApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdCNpZm5kZWYgVVNFX0lOU1RBTkNJTkdfTU9SUEhcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgTU9SUEhUQVJHRVRTX0NPVU5UIF07XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkRBcnJheSBtb3JwaFRhcmdldHNUZXh0dXJlO1xcblxcdHVuaWZvcm0gaXZlYzIgbW9ycGhUYXJnZXRzVGV4dHVyZVNpemU7XFxuXFx0dmVjNCBnZXRNb3JwaCggY29uc3QgaW4gaW50IHZlcnRleEluZGV4LCBjb25zdCBpbiBpbnQgbW9ycGhUYXJnZXRJbmRleCwgY29uc3QgaW4gaW50IG9mZnNldCApIHtcXG5cXHRcXHRpbnQgdGV4ZWxJbmRleCA9IHZlcnRleEluZGV4ICogTU9SUEhUQVJHRVRTX1RFWFRVUkVfU1RSSURFICsgb2Zmc2V0O1xcblxcdFxcdGludCB5ID0gdGV4ZWxJbmRleCAvIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0aW50IHggPSB0ZXhlbEluZGV4IC0geSAqIG1vcnBoVGFyZ2V0c1RleHR1cmVTaXplLng7XFxuXFx0XFx0aXZlYzMgbW9ycGhVViA9IGl2ZWMzKCB4LCB5LCBtb3JwaFRhcmdldEluZGV4ICk7XFxuXFx0XFx0cmV0dXJuIHRleGVsRmV0Y2goIG1vcnBoVGFyZ2V0c1RleHR1cmUsIG1vcnBoVVYsIDAgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaHRhcmdldF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dHJhbnNmb3JtZWQgKj0gbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlO1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE1PUlBIVEFSR0VUU19DT1VOVDsgaSArKyApIHtcXG5cXHRcXHRpZiAoIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdICE9IDAuMCApIHRyYW5zZm9ybWVkICs9IGdldE1vcnBoKCBnbF9WZXJ0ZXhJRCwgaSwgMCApLnh5eiAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgaSBdO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF9mcmFnbWVudF9iZWdpbiA9IFwiZmxvYXQgZmFjZURpcmVjdGlvbiA9IGdsX0Zyb250RmFjaW5nID8gMS4wIDogLSAxLjA7XFxuI2lmZGVmIEZMQVRfU0hBREVEXFxuXFx0dmVjMyBmZHggPSBkRmR4KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBmZHkgPSBkRmR5KCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuI2Vsc2VcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgKj0gZmFjZURpcmVjdGlvbjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKSB8fCBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRtYXQzIHRibiA9IG1hdDMoIG5vcm1hbGl6ZSggdlRhbmdlbnQgKSwgbm9ybWFsaXplKCB2Qml0YW5nZW50ICksIG5vcm1hbCApO1xcblxcdCNlbHNlXFxuXFx0XFx0bWF0MyB0Ym4gPSBnZXRUYW5nZW50RnJhbWUoIC0gdlZpZXdQb3NpdGlvbiwgbm9ybWFsLFxcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfTk9STUFMTUFQIClcXG5cXHRcXHRcXHR2Tm9ybWFsTWFwVXZcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApXFxuXFx0XFx0XFx0dkNsZWFyY29hdE5vcm1hbE1hcFV2XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2VXZcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHQpO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBET1VCTEVfU0lERUQgKSAmJiAhIGRlZmluZWQoIEZMQVRfU0hBREVEIClcXG5cXHRcXHR0Ym5bMF0gKj0gZmFjZURpcmVjdGlvbjtcXG5cXHRcXHR0Ym5bMV0gKj0gZmFjZURpcmVjdGlvbjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRtYXQzIHRibjIgPSBtYXQzKCBub3JtYWxpemUoIHZUYW5nZW50ICksIG5vcm1hbGl6ZSggdkJpdGFuZ2VudCApLCBub3JtYWwgKTtcXG5cXHQjZWxzZVxcblxcdFxcdG1hdDMgdGJuMiA9IGdldFRhbmdlbnRGcmFtZSggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIHZDbGVhcmNvYXROb3JtYWxNYXBVdiApO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBET1VCTEVfU0lERUQgKSAmJiAhIGRlZmluZWQoIEZMQVRfU0hBREVEIClcXG5cXHRcXHR0Ym4yWzBdICo9IGZhY2VEaXJlY3Rpb247XFxuXFx0XFx0dGJuMlsxXSAqPSBmYWNlRGlyZWN0aW9uO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnZlYzMgbm9uUGVydHVyYmVkTm9ybWFsID0gbm9ybWFsO1wiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFXFxuXFx0bm9ybWFsID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZOb3JtYWxNYXBVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHQjaWZkZWYgRkxJUF9TSURFRFxcblxcdFxcdG5vcm1hbCA9IC0gbm9ybWFsO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiBmYWNlRGlyZWN0aW9uO1xcblxcdCNlbmRpZlxcblxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7XFxuI2VsaWYgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxcblxcdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2Tm9ybWFsTWFwVXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0bWFwTi54eSAqPSBub3JtYWxTY2FsZTtcXG5cXHRub3JtYWwgPSBub3JtYWxpemUoIHRibiAqIG1hcE4gKTtcXG4jZWxpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApXFxuXFx0bm9ybWFsID0gcGVydHVyYk5vcm1hbEFyYiggLSB2Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpLCBmYWNlRGlyZWN0aW9uICk7XFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfcGFyc19mcmFnbWVudCA9IFwiI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF9wYXJzX3ZlcnRleCA9IFwiI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG5vcm1hbF92ZXJ0ZXggPSBcIiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZUYW5nZW50ID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZFRhbmdlbnQgKTtcXG5cXHRcXHR2Qml0YW5nZW50ID0gbm9ybWFsaXplKCBjcm9zcyggdk5vcm1hbCwgdlRhbmdlbnQgKSAqIHRhbmdlbnQudyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBub3JtYWxTY2FsZTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX05PUk1BTE1BUF9PQkpFQ1RTUEFDRVxcblxcdHVuaWZvcm0gbWF0MyBub3JtYWxNYXRyaXg7XFxuI2VuZGlmXFxuI2lmICEgZGVmaW5lZCAoIFVTRV9UQU5HRU5UICkgJiYgKCBkZWZpbmVkICggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKSB8fCBkZWZpbmVkICggVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU5JU09UUk9QWSApIClcXG5cXHRtYXQzIGdldFRhbmdlbnRGcmFtZSggdmVjMyBleWVfcG9zLCB2ZWMzIHN1cmZfbm9ybSwgdmVjMiB1diApIHtcXG5cXHRcXHR2ZWMzIHEwID0gZEZkeCggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMzIHExID0gZEZkeSggZXllX3Bvcy54eXogKTtcXG5cXHRcXHR2ZWMyIHN0MCA9IGRGZHgoIHV2LnN0ICk7XFxuXFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB1di5zdCApO1xcblxcdFxcdHZlYzMgTiA9IHN1cmZfbm9ybTtcXG5cXHRcXHR2ZWMzIHExcGVycCA9IGNyb3NzKCBxMSwgTiApO1xcblxcdFxcdHZlYzMgcTBwZXJwID0gY3Jvc3MoIE4sIHEwICk7XFxuXFx0XFx0dmVjMyBUID0gcTFwZXJwICogc3QwLnggKyBxMHBlcnAgKiBzdDEueDtcXG5cXHRcXHR2ZWMzIEIgPSBxMXBlcnAgKiBzdDAueSArIHEwcGVycCAqIHN0MS55O1xcblxcdFxcdGZsb2F0IGRldCA9IG1heCggZG90KCBULCBUICksIGRvdCggQiwgQiApICk7XFxuXFx0XFx0ZmxvYXQgc2NhbGUgPSAoIGRldCA9PSAwLjAgKSA/IDAuMCA6IGludmVyc2VzcXJ0KCBkZXQgKTtcXG5cXHRcXHRyZXR1cm4gbWF0MyggVCAqIHNjYWxlLCBCICogc2NhbGUsIE4gKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVFxcblxcdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gbm9uUGVydHVyYmVkTm9ybWFsO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHR2ZWMzIGNsZWFyY29hdE1hcE4gPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE5vcm1hbE1hcCwgdkNsZWFyY29hdE5vcm1hbE1hcFV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdGNsZWFyY29hdE1hcE4ueHkgKj0gY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XFxuXFx0Y2xlYXJjb2F0Tm9ybWFsID0gbm9ybWFsaXplKCB0Ym4yICogY2xlYXJjb2F0TWFwTiApO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0TWFwO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdE5vcm1hbE1hcDtcXG5cXHR1bmlmb3JtIHZlYzIgY2xlYXJjb2F0Tm9ybWFsU2NhbGU7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgaXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGlyaWRlc2NlbmNlTWFwO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBvcGFxdWVfZnJhZ21lbnQgPSBcIiNpZmRlZiBPUEFRVUVcXG5kaWZmdXNlQ29sb3IuYSA9IDEuMDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcbmRpZmZ1c2VDb2xvci5hICo9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhO1xcbiNlbmRpZlxcbmdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XCI7XG5cbnZhciBwYWNraW5nID0gXCJ2ZWMzIHBhY2tOb3JtYWxUb1JHQiggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggbm9ybWFsICkgKiAwLjUgKyAwLjU7XFxufVxcbnZlYzMgdW5wYWNrUkdCVG9Ob3JtYWwoIGNvbnN0IGluIHZlYzMgcmdiICkge1xcblxcdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xcbn1cXG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuO2NvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuO2NvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xcbmNvbnN0IGZsb2F0IEludjI1NSA9IDEuIC8gMjU1LjtcXG5jb25zdCB2ZWM0IFBhY2tGYWN0b3JzID0gdmVjNCggMS4wLCAyNTYuMCwgMjU2LjAgKiAyNTYuMCwgMjU2LjAgKiAyNTYuMCAqIDI1Ni4wICk7XFxuY29uc3QgdmVjMiBVbnBhY2tGYWN0b3JzMiA9IHZlYzIoIFVucGFja0Rvd25zY2FsZSwgMS4wIC8gUGFja0ZhY3RvcnMuZyApO1xcbmNvbnN0IHZlYzMgVW5wYWNrRmFjdG9yczMgPSB2ZWMzKCBVbnBhY2tEb3duc2NhbGUgLyBQYWNrRmFjdG9ycy5yZywgMS4wIC8gUGFja0ZhY3RvcnMuYiApO1xcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9yczQgPSB2ZWM0KCBVbnBhY2tEb3duc2NhbGUgLyBQYWNrRmFjdG9ycy5yZ2IsIDEuMCAvIFBhY2tGYWN0b3JzLmEgKTtcXG52ZWM0IHBhY2tEZXB0aFRvUkdCQSggY29uc3QgaW4gZmxvYXQgdiApIHtcXG5cXHRpZiggdiA8PSAwLjAgKVxcblxcdFxcdHJldHVybiB2ZWM0KCAwLiwgMC4sIDAuLCAwLiApO1xcblxcdGlmKCB2ID49IDEuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzQoIDEuLCAxLiwgMS4sIDEuICk7XFxuXFx0ZmxvYXQgdnVmO1xcblxcdGZsb2F0IGFmID0gbW9kZiggdiAqIFBhY2tGYWN0b3JzLmEsIHZ1ZiApO1xcblxcdGZsb2F0IGJmID0gbW9kZiggdnVmICogU2hpZnRSaWdodDgsIHZ1ZiApO1xcblxcdGZsb2F0IGdmID0gbW9kZiggdnVmICogU2hpZnRSaWdodDgsIHZ1ZiApO1xcblxcdHJldHVybiB2ZWM0KCB2dWYgKiBJbnYyNTUsIGdmICogUGFja1Vwc2NhbGUsIGJmICogUGFja1Vwc2NhbGUsIGFmICk7XFxufVxcbnZlYzMgcGFja0RlcHRoVG9SR0IoIGNvbnN0IGluIGZsb2F0IHYgKSB7XFxuXFx0aWYoIHYgPD0gMC4wIClcXG5cXHRcXHRyZXR1cm4gdmVjMyggMC4sIDAuLCAwLiApO1xcblxcdGlmKCB2ID49IDEuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzMoIDEuLCAxLiwgMS4gKTtcXG5cXHRmbG9hdCB2dWY7XFxuXFx0ZmxvYXQgYmYgPSBtb2RmKCB2ICogUGFja0ZhY3RvcnMuYiwgdnVmICk7XFxuXFx0ZmxvYXQgZ2YgPSBtb2RmKCB2dWYgKiBTaGlmdFJpZ2h0OCwgdnVmICk7XFxuXFx0cmV0dXJuIHZlYzMoIHZ1ZiAqIEludjI1NSwgZ2YgKiBQYWNrVXBzY2FsZSwgYmYgKTtcXG59XFxudmVjMiBwYWNrRGVwdGhUb1JHKCBjb25zdCBpbiBmbG9hdCB2ICkge1xcblxcdGlmKCB2IDw9IDAuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzIoIDAuLCAwLiApO1xcblxcdGlmKCB2ID49IDEuMCApXFxuXFx0XFx0cmV0dXJuIHZlYzIoIDEuLCAxLiApO1xcblxcdGZsb2F0IHZ1ZjtcXG5cXHRmbG9hdCBnZiA9IG1vZGYoIHYgKiAyNTYuLCB2dWYgKTtcXG5cXHRyZXR1cm4gdmVjMiggdnVmICogSW52MjU1LCBnZiApO1xcbn1cXG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xcblxcdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnM0ICk7XFxufVxcbmZsb2F0IHVucGFja1JHQlRvRGVwdGgoIGNvbnN0IGluIHZlYzMgdiApIHtcXG5cXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzMyApO1xcbn1cXG5mbG9hdCB1bnBhY2tSR1RvRGVwdGgoIGNvbnN0IGluIHZlYzIgdiApIHtcXG5cXHRyZXR1cm4gdi5yICogVW5wYWNrRmFjdG9yczIuciArIHYuZyAqIFVucGFja0ZhY3RvcnMyLmc7XFxufVxcbnZlYzQgcGFjazJIYWxmVG9SR0JBKCBjb25zdCBpbiB2ZWMyIHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggdi54LCBmcmFjdCggdi54ICogMjU1LjAgKSwgdi55LCBmcmFjdCggdi55ICogMjU1LjAgKSApO1xcblxcdHJldHVybiB2ZWM0KCByLnggLSByLnkgLyAyNTUuMCwgci55LCByLnogLSByLncgLyAyNTUuMCwgci53ICk7XFxufVxcbnZlYzIgdW5wYWNrUkdCQVRvMkhhbGYoIGNvbnN0IGluIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gdmVjMiggdi54ICsgKCB2LnkgLyAyNTUuMCApLCB2LnogKyAoIHYudyAvIDI1NS4wICkgKTtcXG59XFxuZmxvYXQgdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XFxufVxcbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgZGVwdGgsIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gZGVwdGggKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XFxufVxcbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoICggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiB2aWV3WiApO1xcbn1cXG5mbG9hdCBwZXJzcGVjdGl2ZURlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgZGVwdGgsIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCBuZWFyICogZmFyICkgLyAoICggZmFyIC0gbmVhciApICogZGVwdGggLSBmYXIgKTtcXG59XCI7XG5cbnZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gXCIjaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XFxuI2VuZGlmXCI7XG5cbnZhciBwcm9qZWN0X3ZlcnRleCA9IFwidmVjNCBtdlBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbiNpZmRlZiBVU0VfQkFUQ0hJTkdcXG5cXHRtdlBvc2l0aW9uID0gYmF0Y2hpbmdNYXRyaXggKiBtdlBvc2l0aW9uO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xcblxcdG12UG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIG12UG9zaXRpb247XFxuI2VuZGlmXFxubXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIG12UG9zaXRpb247XFxuZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcIjtcblxudmFyIGRpdGhlcmluZ19mcmFnbWVudCA9IFwiI2lmZGVmIERJVEhFUklOR1xcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSBkaXRoZXJpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcIjtcblxudmFyIGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgRElUSEVSSU5HXFxuXFx0dmVjMyBkaXRoZXJpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0XFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xcblxcdFxcdHZlYzMgZGl0aGVyX3NoaWZ0X1JHQiA9IHZlYzMoIDAuMjUgLyAyNTUuMCwgLTAuMjUgLyAyNTUuMCwgMC4yNSAvIDI1NS4wICk7XFxuXFx0XFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcXG5cXHRcXHRyZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9mcmFnbWVudCA9IFwiZmxvYXQgcm91Z2huZXNzRmFjdG9yID0gcm91Z2huZXNzO1xcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dmVjNCB0ZXhlbFJvdWdobmVzcyA9IHRleHR1cmUyRCggcm91Z2huZXNzTWFwLCB2Um91Z2huZXNzTWFwVXYgKTtcXG5cXHRyb3VnaG5lc3NGYWN0b3IgKj0gdGV4ZWxSb3VnaG5lc3MuZztcXG4jZW5kaWZcIjtcblxudmFyIHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcXG4jZW5kaWZcIjtcblxudmFyIHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxcblxcdHZhcnlpbmcgdmVjNCB2U3BvdExpZ2h0Q29vcmRbIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVF9NQVBTID4gMFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RMaWdodE1hcFsgTlVNX1NQT1RfTElHSFRfTUFQUyBdO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzcG90U2hhZG93TWFwWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFNwb3RMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0U2hhZG93c1sgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBwb2ludFNoYWRvd01hcFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IFBvaW50TGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHRmbG9hdCB0ZXh0dXJlMkRDb21wYXJlKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdHJldHVybiBzdGVwKCBjb21wYXJlLCB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBkZXB0aHMsIHV2ICkgKSApO1xcblxcdH1cXG5cXHR2ZWMyIHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diApIHtcXG5cXHRcXHRyZXR1cm4gdW5wYWNrUkdCQVRvMkhhbGYoIHRleHR1cmUyRCggc2hhZG93LCB1diApICk7XFxuXFx0fVxcblxcdGZsb2F0IFZTTVNoYWRvdyAoc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApe1xcblxcdFxcdGZsb2F0IG9jY2x1c2lvbiA9IDEuMDtcXG5cXHRcXHR2ZWMyIGRpc3RyaWJ1dGlvbiA9IHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2hhZG93LCB1diApO1xcblxcdFxcdGZsb2F0IGhhcmRfc2hhZG93ID0gc3RlcCggY29tcGFyZSAsIGRpc3RyaWJ1dGlvbi54ICk7XFxuXFx0XFx0aWYgKGhhcmRfc2hhZG93ICE9IDEuMCApIHtcXG5cXHRcXHRcXHRmbG9hdCBkaXN0YW5jZSA9IGNvbXBhcmUgLSBkaXN0cmlidXRpb24ueCA7XFxuXFx0XFx0XFx0ZmxvYXQgdmFyaWFuY2UgPSBtYXgoIDAuMDAwMDAsIGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKTtcXG5cXHRcXHRcXHRmbG9hdCBzb2Z0bmVzc19wcm9iYWJpbGl0eSA9IHZhcmlhbmNlIC8gKHZhcmlhbmNlICsgZGlzdGFuY2UgKiBkaXN0YW5jZSApO1xcdFxcdFxcdHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gY2xhbXAoICggc29mdG5lc3NfcHJvYmFiaWxpdHkgLSAwLjMgKSAvICggMC45NSAtIDAuMyApLCAwLjAsIDEuMCApO1xcdFxcdFxcdG9jY2x1c2lvbiA9IGNsYW1wKCBtYXgoIGhhcmRfc2hhZG93LCBzb2Z0bmVzc19wcm9iYWJpbGl0eSApLCAwLjAsIDEuMCApO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gb2NjbHVzaW9uO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93SW50ZW5zaXR5LCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQgKSB7XFxuXFx0XFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdFxcdHNoYWRvd0Nvb3JkLnh5eiAvPSBzaGFkb3dDb29yZC53O1xcblxcdFxcdHNoYWRvd0Nvb3JkLnogKz0gc2hhZG93QmlhcztcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IHNoYWRvd0Nvb3JkLnggPj0gMC4wICYmIHNoYWRvd0Nvb3JkLnggPD0gMS4wICYmIHNoYWRvd0Nvb3JkLnkgPj0gMC4wICYmIHNoYWRvd0Nvb3JkLnkgPD0gMS4wO1xcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBpbkZydXN0dW0gJiYgc2hhZG93Q29vcmQueiA8PSAxLjA7XFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MiA9IGR4MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeTIgPSBkeTAgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHgzID0gZHgxIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MyA9IGR5MSAvIDIuMDtcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MywgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gMTcuMCApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IHRleGVsU2l6ZS54O1xcblxcdFxcdFxcdGZsb2F0IGR5ID0gdGV4ZWxTaXplLnk7XFxuXFx0XFx0XFx0dmVjMiB1diA9IHNoYWRvd0Nvb3JkLnh5O1xcblxcdFxcdFxcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNoYWRvd01hcFNpemUgKyAwLjUgKTtcXG5cXHRcXHRcXHR1diAtPSBmICogdGV4ZWxTaXplO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgZHkgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdGV4ZWxTaXplLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAwLjAgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCBmLnggKSArXFxuXFx0XFx0XFx0XFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggLWR4LCBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCBmLnggKSArXFxuXFx0XFx0XFx0XFx0bWl4KCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMC4wLCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMC4wLCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIGR4LCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApICtcXG5cXHRcXHRcXHRcXHRtaXgoIG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHRcXHQgIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHRcXHQgIGYueCApLFxcblxcdFxcdFxcdFxcdFxcdCBtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAtZHgsIDIuMCAqIGR5ICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHRcXHQgIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgZi54ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcXG5cXHRcXHRcXHRzaGFkb3cgPSBWU01TaGFkb3coIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIG1peCggMS4wLCBzaGFkb3csIHNoYWRvd0ludGVuc2l0eSApO1xcblxcdH1cXG5cXHR2ZWMyIGN1YmVUb1VWKCB2ZWMzIHYsIGZsb2F0IHRleGVsU2l6ZVkgKSB7XFxuXFx0XFx0dmVjMyBhYnNWID0gYWJzKCB2ICk7XFxuXFx0XFx0ZmxvYXQgc2NhbGVUb0N1YmUgPSAxLjAgLyBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICk7XFxuXFx0XFx0YWJzViAqPSBzY2FsZVRvQ3ViZTtcXG5cXHRcXHR2ICo9IHNjYWxlVG9DdWJlICogKCAxLjAgLSAyLjAgKiB0ZXhlbFNpemVZICk7XFxuXFx0XFx0dmVjMiBwbGFuYXIgPSB2Lnh5O1xcblxcdFxcdGZsb2F0IGFsbW9zdEFUZXhlbCA9IDEuNSAqIHRleGVsU2l6ZVk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0T25lID0gMS4wIC0gYWxtb3N0QVRleGVsO1xcblxcdFxcdGlmICggYWJzVi56ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRpZiAoIHYueiA+IDAuMCApXFxuXFx0XFx0XFx0XFx0cGxhbmFyLnggPSA0LjAgLSB2Lng7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi54ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWCA9IHNpZ24oIHYueCApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnkgPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25ZID0gc2lnbiggdi55ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnggKyAyLjAgKiBzaWduWSArIDIuMDtcXG5cXHRcXHRcXHRwbGFuYXIueSA9IHYueiAqIHNpZ25ZIC0gMi4wO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFBvaW50U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0ludGVuc2l0eSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkLCBmbG9hdCBzaGFkb3dDYW1lcmFOZWFyLCBmbG9hdCBzaGFkb3dDYW1lcmFGYXIgKSB7XFxuXFx0XFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdFxcdHZlYzMgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6O1xcblxcdFxcdFxcblxcdFxcdGZsb2F0IGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aCA9IGxlbmd0aCggbGlnaHRUb1Bvc2l0aW9uICk7XFxuXFx0XFx0aWYgKCBsaWdodFRvUG9zaXRpb25MZW5ndGggLSBzaGFkb3dDYW1lcmFGYXIgPD0gMC4wICYmIGxpZ2h0VG9Qb3NpdGlvbkxlbmd0aCAtIHNoYWRvd0NhbWVyYU5lYXIgPj0gMC4wICkge1xcblxcdFxcdFxcdGZsb2F0IGRwID0gKCBsaWdodFRvUG9zaXRpb25MZW5ndGggLSBzaGFkb3dDYW1lcmFOZWFyICkgLyAoIHNoYWRvd0NhbWVyYUZhciAtIHNoYWRvd0NhbWVyYU5lYXIgKTtcXHRcXHRcXHRkcCArPSBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdHZlYzMgYmQzRCA9IG5vcm1hbGl6ZSggbGlnaHRUb1Bvc2l0aW9uICk7XFxuXFx0XFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvICggc2hhZG93TWFwU2l6ZSAqIHZlYzIoIDQuMCwgMi4wICkgKTtcXG5cXHRcXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9WU00gKVxcblxcdFxcdFxcdFxcdHZlYzIgb2Zmc2V0ID0gdmVjMiggLSAxLCAxICkgKiBzaGFkb3dSYWRpdXMgKiB0ZXhlbFNpemUueTtcXG5cXHRcXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh4LCB0ZXhlbFNpemUueSApLCBkcCApXFxuXFx0XFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHRzaGFkb3cgPSB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gbWl4KCAxLjAsIHNoYWRvdywgc2hhZG93SW50ZW5zaXR5ICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFwX3BhcnNfdmVydGV4ID0gXCIjaWYgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxcblxcdHVuaWZvcm0gbWF0NCBzcG90TGlnaHRNYXRyaXhbIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyBdO1xcblxcdHZhcnlpbmcgdmVjNCB2U3BvdExpZ2h0Q29vcmRbIE5VTV9TUE9UX0xJR0hUX0NPT1JEUyBdO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0c3RydWN0IERpcmVjdGlvbmFsTGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0ludGVuc2l0eTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd05vcm1hbEJpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodFNoYWRvdyBkaXJlY3Rpb25hbExpZ2h0U2hhZG93c1sgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0c3RydWN0IFNwb3RMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93SW50ZW5zaXR5O1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Tm9ybWFsQmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0U2hhZG93c1sgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgcG9pbnRTaGFkb3dNYXRyaXhbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHN0cnVjdCBQb2ludExpZ2h0U2hhZG93IHtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dJbnRlbnNpdHk7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93Q2FtZXJhTmVhcjtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFGYXI7XFxuXFx0XFx0fTtcXG5cXHRcXHR1bmlmb3JtIFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodFNoYWRvd3NbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfdmVydGV4ID0gXCIjaWYgKCBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwIHx8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMCApICkgfHwgKCBOVU1fU1BPVF9MSUdIVF9DT09SRFMgPiAwIClcXG5cXHR2ZWMzIHNoYWRvd1dvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggdHJhbnNmb3JtZWROb3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWM0IHNoYWRvd1dvcmxkUG9zaXRpb247XFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKVxcblxcdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRcXHRzaGFkb3dXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbiArIHZlYzQoIHNoYWRvd1dvcmxkTm9ybWFsICogZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIGkgXS5zaGFkb3dOb3JtYWxCaWFzLCAwICk7XFxuXFx0XFx0XFx0dkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSA9IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xcblxcdFxcdH1cXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0XFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24gKyB2ZWM0KCBzaGFkb3dXb3JsZE5vcm1hbCAqIHBvaW50TGlnaHRTaGFkb3dzWyBpIF0uc2hhZG93Tm9ybWFsQmlhcywgMCApO1xcblxcdFxcdFxcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogc2hhZG93V29ybGRQb3NpdGlvbjtcXG5cXHRcXHR9XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRfQ09PUkRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVF9DT09SRFM7IGkgKysgKSB7XFxuXFx0XFx0c2hhZG93V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb247XFxuXFx0XFx0I2lmICggZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIClcXG5cXHRcXHRcXHRzaGFkb3dXb3JsZFBvc2l0aW9uLnh5eiArPSBzaGFkb3dXb3JsZE5vcm1hbCAqIHNwb3RMaWdodFNoYWRvd3NbIGkgXS5zaGFkb3dOb3JtYWxCaWFzO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHZTcG90TGlnaHRDb29yZFsgaSBdID0gc3BvdExpZ2h0TWF0cml4WyBpIF0gKiBzaGFkb3dXb3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFza19wYXJzX2ZyYWdtZW50ID0gXCJmbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xcblxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0RGlyZWN0aW9uYWxMaWdodFNoYWRvdyBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dJbnRlbnNpdHksIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRTcG90TGlnaHRTaGFkb3cgc3BvdExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0ludGVuc2l0eSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90TGlnaHRDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0LnNoYWRvd0ludGVuc2l0eSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNlbmRpZlxcblxcdHJldHVybiBzaGFkb3c7XFxufVwiO1xuXG52YXIgc2tpbmJhc2VfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBib25lTWF0WCA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC54ICk7XFxuXFx0bWF0NCBib25lTWF0WSA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC55ICk7XFxuXFx0bWF0NCBib25lTWF0WiA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC56ICk7XFxuXFx0bWF0NCBib25lTWF0VyA9IGdldEJvbmVNYXRyaXgoIHNraW5JbmRleC53ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXHR1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBib25lVGV4dHVyZTtcXG5cXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0aW50IHNpemUgPSB0ZXh0dXJlU2l6ZSggYm9uZVRleHR1cmUsIDAgKS54O1xcblxcdFxcdGludCBqID0gaW50KCBpICkgKiA0O1xcblxcdFxcdGludCB4ID0gaiAlIHNpemU7XFxuXFx0XFx0aW50IHkgPSBqIC8gc2l6ZTtcXG5cXHRcXHR2ZWM0IHYxID0gdGV4ZWxGZXRjaCggYm9uZVRleHR1cmUsIGl2ZWMyKCB4LCB5ICksIDAgKTtcXG5cXHRcXHR2ZWM0IHYyID0gdGV4ZWxGZXRjaCggYm9uZVRleHR1cmUsIGl2ZWMyKCB4ICsgMSwgeSApLCAwICk7XFxuXFx0XFx0dmVjNCB2MyA9IHRleGVsRmV0Y2goIGJvbmVUZXh0dXJlLCBpdmVjMiggeCArIDIsIHkgKSwgMCApO1xcblxcdFxcdHZlYzQgdjQgPSB0ZXhlbEZldGNoKCBib25lVGV4dHVyZSwgaXZlYzIoIHggKyAzLCB5ICksIDAgKTtcXG5cXHRcXHRyZXR1cm4gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubmluZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR2ZWM0IHNraW5WZXJ0ZXggPSBiaW5kTWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcdHZlYzQgc2tpbm5lZCA9IHZlYzQoIDAuMCApO1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFggKiBza2luVmVydGV4ICogc2tpbldlaWdodC54O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFkgKiBza2luVmVydGV4ICogc2tpbldlaWdodC55O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFogKiBza2luVmVydGV4ICogc2tpbldlaWdodC56O1xcblxcdHNraW5uZWQgKz0gYm9uZU1hdFcgKiBza2luVmVydGV4ICogc2tpbldlaWdodC53O1xcblxcdHRyYW5zZm9ybWVkID0gKCBiaW5kTWF0cml4SW52ZXJzZSAqIHNraW5uZWQgKS54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBza2lubm9ybWFsX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgc2tpbk1hdHJpeCA9IG1hdDQoIDAuMCApO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC54ICogYm9uZU1hdFg7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnkgKiBib25lTWF0WTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueiAqIGJvbmVNYXRaO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC53ICogYm9uZU1hdFc7XFxuXFx0c2tpbk1hdHJpeCA9IGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbk1hdHJpeCAqIGJpbmRNYXRyaXg7XFxuXFx0b2JqZWN0Tm9ybWFsID0gdmVjNCggc2tpbk1hdHJpeCAqIHZlYzQoIG9iamVjdE5vcm1hbCwgMC4wICkgKS54eXo7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0b2JqZWN0VGFuZ2VudCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIHNwZWN1bGFybWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBzcGVjdWxhclN0cmVuZ3RoO1xcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2U3BlY3VsYXJNYXBVdiApO1xcblxcdHNwZWN1bGFyU3RyZW5ndGggPSB0ZXhlbFNwZWN1bGFyLnI7XFxuI2Vsc2VcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gMS4wO1xcbiNlbmRpZlwiO1xuXG52YXIgc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgdG9uZW1hcHBpbmdfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBUT05FX01BUFBJTkcgKVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSB0b25lTWFwcGluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlwiO1xuXG52YXIgdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCA9IFwiI2lmbmRlZiBzYXR1cmF0ZVxcbiNkZWZpbmUgc2F0dXJhdGUoIGEgKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG52ZWMzIExpbmVhclRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdHJldHVybiBzYXR1cmF0ZSggdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yICk7XFxufVxcbnZlYzMgUmVpbmhhcmRUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggY29sb3IgLyAoIHZlYzMoIDEuMCApICsgY29sb3IgKSApO1xcbn1cXG52ZWMzIENpbmVvblRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0Y29sb3IgPSBtYXgoIHZlYzMoIDAuMCApLCBjb2xvciAtIDAuMDA0ICk7XFxuXFx0cmV0dXJuIHBvdyggKCBjb2xvciAqICggNi4yICogY29sb3IgKyAwLjUgKSApIC8gKCBjb2xvciAqICggNi4yICogY29sb3IgKyAxLjcgKSArIDAuMDYgKSwgdmVjMyggMi4yICkgKTtcXG59XFxudmVjMyBSUlRBbmRPRFRGaXQoIHZlYzMgdiApIHtcXG5cXHR2ZWMzIGEgPSB2ICogKCB2ICsgMC4wMjQ1Nzg2ICkgLSAwLjAwMDA5MDUzNztcXG5cXHR2ZWMzIGIgPSB2ICogKCAwLjk4MzcyOSAqIHYgKyAwLjQzMjk1MTAgKSArIDAuMjM4MDgxO1xcblxcdHJldHVybiBhIC8gYjtcXG59XFxudmVjMyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29uc3QgbWF0MyBBQ0VTSW5wdXRNYXQgPSBtYXQzKFxcblxcdFxcdHZlYzMoIDAuNTk3MTksIDAuMDc2MDAsIDAuMDI4NDAgKSxcXHRcXHR2ZWMzKCAwLjM1NDU4LCAwLjkwODM0LCAwLjEzMzgzICksXFxuXFx0XFx0dmVjMyggMC4wNDgyMywgMC4wMTU2NiwgMC44Mzc3NyApXFxuXFx0KTtcXG5cXHRjb25zdCBtYXQzIEFDRVNPdXRwdXRNYXQgPSBtYXQzKFxcblxcdFxcdHZlYzMoICAxLjYwNDc1LCAtMC4xMDIwOCwgLTAuMDAzMjcgKSxcXHRcXHR2ZWMzKCAtMC41MzEwOCwgIDEuMTA4MTMsIC0wLjA3Mjc2ICksXFxuXFx0XFx0dmVjMyggLTAuMDczNjcsIC0wLjAwNjA1LCAgMS4wNzYwMiApXFxuXFx0KTtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlIC8gMC42O1xcblxcdGNvbG9yID0gQUNFU0lucHV0TWF0ICogY29sb3I7XFxuXFx0Y29sb3IgPSBSUlRBbmRPRFRGaXQoIGNvbG9yICk7XFxuXFx0Y29sb3IgPSBBQ0VTT3V0cHV0TWF0ICogY29sb3I7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBjb2xvciApO1xcbn1cXG5jb25zdCBtYXQzIExJTkVBUl9SRUMyMDIwX1RPX0xJTkVBUl9TUkdCID0gbWF0MyhcXG5cXHR2ZWMzKCAxLjY2MDUsIC0gMC4xMjQ2LCAtIDAuMDE4MiApLFxcblxcdHZlYzMoIC0gMC41ODc2LCAxLjEzMjksIC0gMC4xMDA2ICksXFxuXFx0dmVjMyggLSAwLjA3MjgsIC0gMC4wMDgzLCAxLjExODcgKVxcbik7XFxuY29uc3QgbWF0MyBMSU5FQVJfU1JHQl9UT19MSU5FQVJfUkVDMjAyMCA9IG1hdDMoXFxuXFx0dmVjMyggMC42Mjc0LCAwLjA2OTEsIDAuMDE2NCApLFxcblxcdHZlYzMoIDAuMzI5MywgMC45MTk1LCAwLjA4ODAgKSxcXG5cXHR2ZWMzKCAwLjA0MzMsIDAuMDExMywgMC44OTU2IClcXG4pO1xcbnZlYzMgYWd4RGVmYXVsdENvbnRyYXN0QXBwcm94KCB2ZWMzIHggKSB7XFxuXFx0dmVjMyB4MiA9IHggKiB4O1xcblxcdHZlYzMgeDQgPSB4MiAqIHgyO1xcblxcdHJldHVybiArIDE1LjUgKiB4NCAqIHgyXFxuXFx0XFx0LSA0MC4xNCAqIHg0ICogeFxcblxcdFxcdCsgMzEuOTYgKiB4NFxcblxcdFxcdC0gNi44NjggKiB4MiAqIHhcXG5cXHRcXHQrIDAuNDI5OCAqIHgyXFxuXFx0XFx0KyAwLjExOTEgKiB4XFxuXFx0XFx0LSAwLjAwMjMyO1xcbn1cXG52ZWMzIEFnWFRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbnN0IG1hdDMgQWdYSW5zZXRNYXRyaXggPSBtYXQzKFxcblxcdFxcdHZlYzMoIDAuODU2NjI3MTUzMzE1OTgzLCAwLjEzNzMxODk3MjkyOTg0NywgMC4xMTE4OTgyMTI5OTk5NSApLFxcblxcdFxcdHZlYzMoIDAuMDk1MTIxMjQwNTM4MTU4OCwgMC43NjEyNDE5OTA2MDI1OTEsIDAuMDc2Nzk5NDE4NjAzMTkwMyApLFxcblxcdFxcdHZlYzMoIDAuMDQ4MjUxNjA2MTQ1ODU4MywgMC4xMDE0MzkwMzY0Njc1NjIsIDAuODExMzAyMzY4Mzk2ODU5IClcXG5cXHQpO1xcblxcdGNvbnN0IG1hdDMgQWdYT3V0c2V0TWF0cml4ID0gbWF0MyhcXG5cXHRcXHR2ZWMzKCAxLjEyNzEwMDU4MTgxNDQzNjgsIC0gMC4xNDEzMjk3NjM0OTg0MzgzLCAtIDAuMTQxMzI5NzYzNDk4NDM4MjYgKSxcXG5cXHRcXHR2ZWMzKCAtIDAuMTEwNjA2NjQzMDk2NjAzMjMsIDEuMTU3ODIzNzAyMjE2MjcyLCAtIDAuMTEwNjA2NjQzMDk2NjAyOTQgKSxcXG5cXHRcXHR2ZWMzKCAtIDAuMDE2NDkzOTM4NzE3ODM0NTczLCAtIDAuMDE2NDkzOTM4NzE3ODM0MjU3LCAxLjI1MTkzNjQwNjU5NTA0MDUgKVxcblxcdCk7XFxuXFx0Y29uc3QgZmxvYXQgQWd4TWluRXYgPSAtIDEyLjQ3MzkzO1xcdGNvbnN0IGZsb2F0IEFneE1heEV2ID0gNC4wMjYwNjk7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IExJTkVBUl9TUkdCX1RPX0xJTkVBUl9SRUMyMDIwICogY29sb3I7XFxuXFx0Y29sb3IgPSBBZ1hJbnNldE1hdHJpeCAqIGNvbG9yO1xcblxcdGNvbG9yID0gbWF4KCBjb2xvciwgMWUtMTAgKTtcXHRjb2xvciA9IGxvZzIoIGNvbG9yICk7XFxuXFx0Y29sb3IgPSAoIGNvbG9yIC0gQWd4TWluRXYgKSAvICggQWd4TWF4RXYgLSBBZ3hNaW5FdiApO1xcblxcdGNvbG9yID0gY2xhbXAoIGNvbG9yLCAwLjAsIDEuMCApO1xcblxcdGNvbG9yID0gYWd4RGVmYXVsdENvbnRyYXN0QXBwcm94KCBjb2xvciApO1xcblxcdGNvbG9yID0gQWdYT3V0c2V0TWF0cml4ICogY29sb3I7XFxuXFx0Y29sb3IgPSBwb3coIG1heCggdmVjMyggMC4wICksIGNvbG9yICksIHZlYzMoIDIuMiApICk7XFxuXFx0Y29sb3IgPSBMSU5FQVJfUkVDMjAyMF9UT19MSU5FQVJfU1JHQiAqIGNvbG9yO1xcblxcdGNvbG9yID0gY2xhbXAoIGNvbG9yLCAwLjAsIDEuMCApO1xcblxcdHJldHVybiBjb2xvcjtcXG59XFxudmVjMyBOZXV0cmFsVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29uc3QgZmxvYXQgU3RhcnRDb21wcmVzc2lvbiA9IDAuOCAtIDAuMDQ7XFxuXFx0Y29uc3QgZmxvYXQgRGVzYXR1cmF0aW9uID0gMC4xNTtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdGZsb2F0IHggPSBtaW4oIGNvbG9yLnIsIG1pbiggY29sb3IuZywgY29sb3IuYiApICk7XFxuXFx0ZmxvYXQgb2Zmc2V0ID0geCA8IDAuMDggPyB4IC0gNi4yNSAqIHggKiB4IDogMC4wNDtcXG5cXHRjb2xvciAtPSBvZmZzZXQ7XFxuXFx0ZmxvYXQgcGVhayA9IG1heCggY29sb3IuciwgbWF4KCBjb2xvci5nLCBjb2xvci5iICkgKTtcXG5cXHRpZiAoIHBlYWsgPCBTdGFydENvbXByZXNzaW9uICkgcmV0dXJuIGNvbG9yO1xcblxcdGZsb2F0IGQgPSAxLiAtIFN0YXJ0Q29tcHJlc3Npb247XFxuXFx0ZmxvYXQgbmV3UGVhayA9IDEuIC0gZCAqIGQgLyAoIHBlYWsgKyBkIC0gU3RhcnRDb21wcmVzc2lvbiApO1xcblxcdGNvbG9yICo9IG5ld1BlYWsgLyBwZWFrO1xcblxcdGZsb2F0IGcgPSAxLiAtIDEuIC8gKCBEZXNhdHVyYXRpb24gKiAoIHBlYWsgLSBuZXdQZWFrICkgKyAxLiApO1xcblxcdHJldHVybiBtaXgoIGNvbG9yLCB2ZWMzKCBuZXdQZWFrICksIGcgKTtcXG59XFxudmVjMyBDdXN0b21Ub25lTWFwcGluZyggdmVjMyBjb2xvciApIHsgcmV0dXJuIGNvbG9yOyB9XCI7XG5cbnZhciB0cmFuc21pc3Npb25fZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OXFxuXFx0bWF0ZXJpYWwudHJhbnNtaXNzaW9uID0gdHJhbnNtaXNzaW9uO1xcblxcdG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhID0gMS4wO1xcblxcdG1hdGVyaWFsLnRoaWNrbmVzcyA9IHRoaWNrbmVzcztcXG5cXHRtYXRlcmlhbC5hdHRlbnVhdGlvbkRpc3RhbmNlID0gYXR0ZW51YXRpb25EaXN0YW5jZTtcXG5cXHRtYXRlcmlhbC5hdHRlbnVhdGlvbkNvbG9yID0gYXR0ZW51YXRpb25Db2xvcjtcXG5cXHQjaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxcblxcdFxcdG1hdGVyaWFsLnRyYW5zbWlzc2lvbiAqPSB0ZXh0dXJlMkQoIHRyYW5zbWlzc2lvbk1hcCwgdlRyYW5zbWlzc2lvbk1hcFV2ICkucjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RISUNLTkVTU01BUFxcblxcdFxcdG1hdGVyaWFsLnRoaWNrbmVzcyAqPSB0ZXh0dXJlMkQoIHRoaWNrbmVzc01hcCwgdlRoaWNrbmVzc01hcFV2ICkuZztcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIHBvcyA9IHZXb3JsZFBvc2l0aW9uO1xcblxcdHZlYzMgdiA9IG5vcm1hbGl6ZSggY2FtZXJhUG9zaXRpb24gLSBwb3MgKTtcXG5cXHR2ZWMzIG4gPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWM0IHRyYW5zbWl0dGVkID0gZ2V0SUJMVm9sdW1lUmVmcmFjdGlvbihcXG5cXHRcXHRuLCB2LCBtYXRlcmlhbC5yb3VnaG5lc3MsIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJGOTAsXFxuXFx0XFx0cG9zLCBtb2RlbE1hdHJpeCwgdmlld01hdHJpeCwgcHJvamVjdGlvbk1hdHJpeCwgbWF0ZXJpYWwuZGlzcGVyc2lvbiwgbWF0ZXJpYWwuaW9yLCBtYXRlcmlhbC50aGlja25lc3MsXFxuXFx0XFx0bWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciwgbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZSApO1xcblxcdG1hdGVyaWFsLnRyYW5zbWlzc2lvbkFscGhhID0gbWl4KCBtYXRlcmlhbC50cmFuc21pc3Npb25BbHBoYSwgdHJhbnNtaXR0ZWQuYSwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uICk7XFxuXFx0dG90YWxEaWZmdXNlID0gbWl4KCB0b3RhbERpZmZ1c2UsIHRyYW5zbWl0dGVkLnJnYiwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uICk7XFxuI2VuZGlmXCI7XG5cbnZhciB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHR1bmlmb3JtIGZsb2F0IHRyYW5zbWlzc2lvbjtcXG5cXHR1bmlmb3JtIGZsb2F0IHRoaWNrbmVzcztcXG5cXHR1bmlmb3JtIGZsb2F0IGF0dGVudWF0aW9uRGlzdGFuY2U7XFxuXFx0dW5pZm9ybSB2ZWMzIGF0dGVudWF0aW9uQ29sb3I7XFxuXFx0I2lmZGVmIFVTRV9UUkFOU01JU1NJT05NQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCB0cmFuc21pc3Npb25NYXA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9USElDS05FU1NNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCB0aGlja25lc3NNYXA7XFxuXFx0I2VuZGlmXFxuXFx0dW5pZm9ybSB2ZWMyIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplO1xcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHRyYW5zbWlzc2lvblNhbXBsZXJNYXA7XFxuXFx0dW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHRmbG9hdCB3MCggZmxvYXQgYSApIHtcXG5cXHRcXHRyZXR1cm4gKCAxLjAgLyA2LjAgKSAqICggYSAqICggYSAqICggLSBhICsgMy4wICkgLSAzLjAgKSArIDEuMCApO1xcblxcdH1cXG5cXHRmbG9hdCB3MSggZmxvYXQgYSApIHtcXG5cXHRcXHRyZXR1cm4gKCAxLjAgLyA2LjAgKSAqICggYSAqICBhICogKCAzLjAgKiBhIC0gNi4wICkgKyA0LjAgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgdzIoIGZsb2F0IGEgKXtcXG5cXHRcXHRyZXR1cm4gKCAxLjAgLyA2LjAgKSAqICggYSAqICggYSAqICggLSAzLjAgKiBhICsgMy4wICkgKyAzLjAgKSArIDEuMCApO1xcblxcdH1cXG5cXHRmbG9hdCB3MyggZmxvYXQgYSApIHtcXG5cXHRcXHRyZXR1cm4gKCAxLjAgLyA2LjAgKSAqICggYSAqIGEgKiBhICk7XFxuXFx0fVxcblxcdGZsb2F0IGcwKCBmbG9hdCBhICkge1xcblxcdFxcdHJldHVybiB3MCggYSApICsgdzEoIGEgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgZzEoIGZsb2F0IGEgKSB7XFxuXFx0XFx0cmV0dXJuIHcyKCBhICkgKyB3MyggYSApO1xcblxcdH1cXG5cXHRmbG9hdCBoMCggZmxvYXQgYSApIHtcXG5cXHRcXHRyZXR1cm4gLSAxLjAgKyB3MSggYSApIC8gKCB3MCggYSApICsgdzEoIGEgKSApO1xcblxcdH1cXG5cXHRmbG9hdCBoMSggZmxvYXQgYSApIHtcXG5cXHRcXHRyZXR1cm4gMS4wICsgdzMoIGEgKSAvICggdzIoIGEgKSArIHczKCBhICkgKTtcXG5cXHR9XFxuXFx0dmVjNCBiaWN1YmljKCBzYW1wbGVyMkQgdGV4LCB2ZWMyIHV2LCB2ZWM0IHRleGVsU2l6ZSwgZmxvYXQgbG9kICkge1xcblxcdFxcdHV2ID0gdXYgKiB0ZXhlbFNpemUuencgKyAwLjU7XFxuXFx0XFx0dmVjMiBpdXYgPSBmbG9vciggdXYgKTtcXG5cXHRcXHR2ZWMyIGZ1diA9IGZyYWN0KCB1diApO1xcblxcdFxcdGZsb2F0IGcweCA9IGcwKCBmdXYueCApO1xcblxcdFxcdGZsb2F0IGcxeCA9IGcxKCBmdXYueCApO1xcblxcdFxcdGZsb2F0IGgweCA9IGgwKCBmdXYueCApO1xcblxcdFxcdGZsb2F0IGgxeCA9IGgxKCBmdXYueCApO1xcblxcdFxcdGZsb2F0IGgweSA9IGgwKCBmdXYueSApO1xcblxcdFxcdGZsb2F0IGgxeSA9IGgxKCBmdXYueSApO1xcblxcdFxcdHZlYzIgcDAgPSAoIHZlYzIoIGl1di54ICsgaDB4LCBpdXYueSArIGgweSApIC0gMC41ICkgKiB0ZXhlbFNpemUueHk7XFxuXFx0XFx0dmVjMiBwMSA9ICggdmVjMiggaXV2LnggKyBoMXgsIGl1di55ICsgaDB5ICkgLSAwLjUgKSAqIHRleGVsU2l6ZS54eTtcXG5cXHRcXHR2ZWMyIHAyID0gKCB2ZWMyKCBpdXYueCArIGgweCwgaXV2LnkgKyBoMXkgKSAtIDAuNSApICogdGV4ZWxTaXplLnh5O1xcblxcdFxcdHZlYzIgcDMgPSAoIHZlYzIoIGl1di54ICsgaDF4LCBpdXYueSArIGgxeSApIC0gMC41ICkgKiB0ZXhlbFNpemUueHk7XFxuXFx0XFx0cmV0dXJuIGcwKCBmdXYueSApICogKCBnMHggKiB0ZXh0dXJlTG9kKCB0ZXgsIHAwLCBsb2QgKSArIGcxeCAqIHRleHR1cmVMb2QoIHRleCwgcDEsIGxvZCApICkgK1xcblxcdFxcdFxcdGcxKCBmdXYueSApICogKCBnMHggKiB0ZXh0dXJlTG9kKCB0ZXgsIHAyLCBsb2QgKSArIGcxeCAqIHRleHR1cmVMb2QoIHRleCwgcDMsIGxvZCApICk7XFxuXFx0fVxcblxcdHZlYzQgdGV4dHVyZUJpY3ViaWMoIHNhbXBsZXIyRCBzYW1wbGVyLCB2ZWMyIHV2LCBmbG9hdCBsb2QgKSB7XFxuXFx0XFx0dmVjMiBmTG9kU2l6ZSA9IHZlYzIoIHRleHR1cmVTaXplKCBzYW1wbGVyLCBpbnQoIGxvZCApICkgKTtcXG5cXHRcXHR2ZWMyIGNMb2RTaXplID0gdmVjMiggdGV4dHVyZVNpemUoIHNhbXBsZXIsIGludCggbG9kICsgMS4wICkgKSApO1xcblxcdFxcdHZlYzIgZkxvZFNpemVJbnYgPSAxLjAgLyBmTG9kU2l6ZTtcXG5cXHRcXHR2ZWMyIGNMb2RTaXplSW52ID0gMS4wIC8gY0xvZFNpemU7XFxuXFx0XFx0dmVjNCBmU2FtcGxlID0gYmljdWJpYyggc2FtcGxlciwgdXYsIHZlYzQoIGZMb2RTaXplSW52LCBmTG9kU2l6ZSApLCBmbG9vciggbG9kICkgKTtcXG5cXHRcXHR2ZWM0IGNTYW1wbGUgPSBiaWN1YmljKCBzYW1wbGVyLCB1diwgdmVjNCggY0xvZFNpemVJbnYsIGNMb2RTaXplICksIGNlaWwoIGxvZCApICk7XFxuXFx0XFx0cmV0dXJuIG1peCggZlNhbXBsZSwgY1NhbXBsZSwgZnJhY3QoIGxvZCApICk7XFxuXFx0fVxcblxcdHZlYzMgZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBjb25zdCBpbiB2ZWMzIG4sIGNvbnN0IGluIHZlYzMgdiwgY29uc3QgaW4gZmxvYXQgdGhpY2tuZXNzLCBjb25zdCBpbiBmbG9hdCBpb3IsIGNvbnN0IGluIG1hdDQgbW9kZWxNYXRyaXggKSB7XFxuXFx0XFx0dmVjMyByZWZyYWN0aW9uVmVjdG9yID0gcmVmcmFjdCggLSB2LCBub3JtYWxpemUoIG4gKSwgMS4wIC8gaW9yICk7XFxuXFx0XFx0dmVjMyBtb2RlbFNjYWxlO1xcblxcdFxcdG1vZGVsU2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54eXogKSApO1xcblxcdFxcdG1vZGVsU2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54eXogKSApO1xcblxcdFxcdG1vZGVsU2NhbGUueiA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDIgXS54eXogKSApO1xcblxcdFxcdHJldHVybiBub3JtYWxpemUoIHJlZnJhY3Rpb25WZWN0b3IgKSAqIHRoaWNrbmVzcyAqIG1vZGVsU2NhbGU7XFxuXFx0fVxcblxcdGZsb2F0IGFwcGx5SW9yVG9Sb3VnaG5lc3MoIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgaW9yICkge1xcblxcdFxcdHJldHVybiByb3VnaG5lc3MgKiBjbGFtcCggaW9yICogMi4wIC0gMi4wLCAwLjAsIDEuMCApO1xcblxcdH1cXG5cXHR2ZWM0IGdldFRyYW5zbWlzc2lvblNhbXBsZSggY29uc3QgaW4gdmVjMiBmcmFnQ29vcmQsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gZmxvYXQgaW9yICkge1xcblxcdFxcdGZsb2F0IGxvZCA9IGxvZzIoIHRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnggKSAqIGFwcGx5SW9yVG9Sb3VnaG5lc3MoIHJvdWdobmVzcywgaW9yICk7XFxuXFx0XFx0cmV0dXJuIHRleHR1cmVCaWN1YmljKCB0cmFuc21pc3Npb25TYW1wbGVyTWFwLCBmcmFnQ29vcmQueHksIGxvZCApO1xcblxcdH1cXG5cXHR2ZWMzIHZvbHVtZUF0dGVudWF0aW9uKCBjb25zdCBpbiBmbG9hdCB0cmFuc21pc3Npb25EaXN0YW5jZSwgY29uc3QgaW4gdmVjMyBhdHRlbnVhdGlvbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlICkge1xcblxcdFxcdGlmICggaXNpbmYoIGF0dGVudWF0aW9uRGlzdGFuY2UgKSApIHtcXG5cXHRcXHRcXHRyZXR1cm4gdmVjMyggMS4wICk7XFxuXFx0XFx0fSBlbHNlIHtcXG5cXHRcXHRcXHR2ZWMzIGF0dGVudWF0aW9uQ29lZmZpY2llbnQgPSAtbG9nKCBhdHRlbnVhdGlvbkNvbG9yICkgLyBhdHRlbnVhdGlvbkRpc3RhbmNlO1xcblxcdFxcdFxcdHZlYzMgdHJhbnNtaXR0YW5jZSA9IGV4cCggLSBhdHRlbnVhdGlvbkNvZWZmaWNpZW50ICogdHJhbnNtaXNzaW9uRGlzdGFuY2UgKTtcXHRcXHRcXHRyZXR1cm4gdHJhbnNtaXR0YW5jZTtcXG5cXHRcXHR9XFxuXFx0fVxcblxcdHZlYzQgZ2V0SUJMVm9sdW1lUmVmcmFjdGlvbiggY29uc3QgaW4gdmVjMyBuLCBjb25zdCBpbiB2ZWMzIHYsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcywgY29uc3QgaW4gdmVjMyBkaWZmdXNlQ29sb3IsXFxuXFx0XFx0Y29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBzcGVjdWxhckY5MCwgY29uc3QgaW4gdmVjMyBwb3NpdGlvbiwgY29uc3QgaW4gbWF0NCBtb2RlbE1hdHJpeCxcXG5cXHRcXHRjb25zdCBpbiBtYXQ0IHZpZXdNYXRyaXgsIGNvbnN0IGluIG1hdDQgcHJvak1hdHJpeCwgY29uc3QgaW4gZmxvYXQgZGlzcGVyc2lvbiwgY29uc3QgaW4gZmxvYXQgaW9yLCBjb25zdCBpbiBmbG9hdCB0aGlja25lc3MsXFxuXFx0XFx0Y29uc3QgaW4gdmVjMyBhdHRlbnVhdGlvbkNvbG9yLCBjb25zdCBpbiBmbG9hdCBhdHRlbnVhdGlvbkRpc3RhbmNlICkge1xcblxcdFxcdHZlYzQgdHJhbnNtaXR0ZWRMaWdodDtcXG5cXHRcXHR2ZWMzIHRyYW5zbWl0dGFuY2U7XFxuXFx0XFx0I2lmZGVmIFVTRV9ESVNQRVJTSU9OXFxuXFx0XFx0XFx0ZmxvYXQgaGFsZlNwcmVhZCA9ICggaW9yIC0gMS4wICkgKiAwLjAyNSAqIGRpc3BlcnNpb247XFxuXFx0XFx0XFx0dmVjMyBpb3JzID0gdmVjMyggaW9yIC0gaGFsZlNwcmVhZCwgaW9yLCBpb3IgKyBoYWxmU3ByZWFkICk7XFxuXFx0XFx0XFx0Zm9yICggaW50IGkgPSAwOyBpIDwgMzsgaSArKyApIHtcXG5cXHRcXHRcXHRcXHR2ZWMzIHRyYW5zbWlzc2lvblJheSA9IGdldFZvbHVtZVRyYW5zbWlzc2lvblJheSggbiwgdiwgdGhpY2tuZXNzLCBpb3JzWyBpIF0sIG1vZGVsTWF0cml4ICk7XFxuXFx0XFx0XFx0XFx0dmVjMyByZWZyYWN0ZWRSYXlFeGl0ID0gcG9zaXRpb24gKyB0cmFuc21pc3Npb25SYXk7XFxuXFx0XFx0XFx0XFx0dmVjNCBuZGNQb3MgPSBwcm9qTWF0cml4ICogdmlld01hdHJpeCAqIHZlYzQoIHJlZnJhY3RlZFJheUV4aXQsIDEuMCApO1xcblxcdFxcdFxcdFxcdHZlYzIgcmVmcmFjdGlvbkNvb3JkcyA9IG5kY1Bvcy54eSAvIG5kY1Bvcy53O1xcblxcdFxcdFxcdFxcdHJlZnJhY3Rpb25Db29yZHMgKz0gMS4wO1xcblxcdFxcdFxcdFxcdHJlZnJhY3Rpb25Db29yZHMgLz0gMi4wO1xcblxcdFxcdFxcdFxcdHZlYzQgdHJhbnNtaXNzaW9uU2FtcGxlID0gZ2V0VHJhbnNtaXNzaW9uU2FtcGxlKCByZWZyYWN0aW9uQ29vcmRzLCByb3VnaG5lc3MsIGlvcnNbIGkgXSApO1xcblxcdFxcdFxcdFxcdHRyYW5zbWl0dGVkTGlnaHRbIGkgXSA9IHRyYW5zbWlzc2lvblNhbXBsZVsgaSBdO1xcblxcdFxcdFxcdFxcdHRyYW5zbWl0dGVkTGlnaHQuYSArPSB0cmFuc21pc3Npb25TYW1wbGUuYTtcXG5cXHRcXHRcXHRcXHR0cmFuc21pdHRhbmNlWyBpIF0gPSBkaWZmdXNlQ29sb3JbIGkgXSAqIHZvbHVtZUF0dGVudWF0aW9uKCBsZW5ndGgoIHRyYW5zbWlzc2lvblJheSApLCBhdHRlbnVhdGlvbkNvbG9yLCBhdHRlbnVhdGlvbkRpc3RhbmNlIClbIGkgXTtcXG5cXHRcXHRcXHR9XFxuXFx0XFx0XFx0dHJhbnNtaXR0ZWRMaWdodC5hIC89IDMuMDtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzMgdHJhbnNtaXNzaW9uUmF5ID0gZ2V0Vm9sdW1lVHJhbnNtaXNzaW9uUmF5KCBuLCB2LCB0aGlja25lc3MsIGlvciwgbW9kZWxNYXRyaXggKTtcXG5cXHRcXHRcXHR2ZWMzIHJlZnJhY3RlZFJheUV4aXQgPSBwb3NpdGlvbiArIHRyYW5zbWlzc2lvblJheTtcXG5cXHRcXHRcXHR2ZWM0IG5kY1BvcyA9IHByb2pNYXRyaXggKiB2aWV3TWF0cml4ICogdmVjNCggcmVmcmFjdGVkUmF5RXhpdCwgMS4wICk7XFxuXFx0XFx0XFx0dmVjMiByZWZyYWN0aW9uQ29vcmRzID0gbmRjUG9zLnh5IC8gbmRjUG9zLnc7XFxuXFx0XFx0XFx0cmVmcmFjdGlvbkNvb3JkcyArPSAxLjA7XFxuXFx0XFx0XFx0cmVmcmFjdGlvbkNvb3JkcyAvPSAyLjA7XFxuXFx0XFx0XFx0dHJhbnNtaXR0ZWRMaWdodCA9IGdldFRyYW5zbWlzc2lvblNhbXBsZSggcmVmcmFjdGlvbkNvb3Jkcywgcm91Z2huZXNzLCBpb3IgKTtcXG5cXHRcXHRcXHR0cmFuc21pdHRhbmNlID0gZGlmZnVzZUNvbG9yICogdm9sdW1lQXR0ZW51YXRpb24oIGxlbmd0aCggdHJhbnNtaXNzaW9uUmF5ICksIGF0dGVudWF0aW9uQ29sb3IsIGF0dGVudWF0aW9uRGlzdGFuY2UgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHR2ZWMzIGF0dGVudWF0ZWRDb2xvciA9IHRyYW5zbWl0dGFuY2UgKiB0cmFuc21pdHRlZExpZ2h0LnJnYjtcXG5cXHRcXHR2ZWMzIEYgPSBFbnZpcm9ubWVudEJSREYoIG4sIHYsIHNwZWN1bGFyQ29sb3IsIHNwZWN1bGFyRjkwLCByb3VnaG5lc3MgKTtcXG5cXHRcXHRmbG9hdCB0cmFuc21pdHRhbmNlRmFjdG9yID0gKCB0cmFuc21pdHRhbmNlLnIgKyB0cmFuc21pdHRhbmNlLmcgKyB0cmFuc21pdHRhbmNlLmIgKSAvIDMuMDtcXG5cXHRcXHRyZXR1cm4gdmVjNCggKCAxLjAgLSBGICkgKiBhdHRlbnVhdGVkQ29sb3IsIDEuMCAtICggMS4wIC0gdHJhbnNtaXR0ZWRMaWdodC5hICkgKiB0cmFuc21pdHRhbmNlRmFjdG9yICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgdXZfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9VViApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZBbHBoYU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdkxpZ2h0TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9BT01BUFxcblxcdHZhcnlpbmcgdmVjMiB2QW9NYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0JVTVBNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdkJ1bXBNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdHZhcnlpbmcgdmVjMiB2Tm9ybWFsTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHZhcnlpbmcgdmVjMiB2RW1pc3NpdmVNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHZhcnlpbmcgdmVjMiB2TWV0YWxuZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdlJvdWdobmVzc01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxcblxcdHZhcnlpbmcgdmVjMiB2QW5pc290cm9weU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXRNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE5vcm1hbE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxcblxcdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Um91Z2huZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxcblxcdHZhcnlpbmcgdmVjMiB2SXJpZGVzY2VuY2VNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUFxcblxcdHZhcnlpbmcgdmVjMiB2SXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOX0NPTE9STUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZTaGVlbkNvbG9yTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdlNoZWVuUm91Z2huZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXFxuXFx0dmFyeWluZyB2ZWMyIHZTcGVjdWxhckNvbG9yTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVBcXG5cXHR2YXJ5aW5nIHZlYzIgdlNwZWN1bGFySW50ZW5zaXR5TWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05NQVBcXG5cXHR1bmlmb3JtIG1hdDMgdHJhbnNtaXNzaW9uTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2VHJhbnNtaXNzaW9uTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9USElDS05FU1NNQVBcXG5cXHR1bmlmb3JtIG1hdDMgdGhpY2tuZXNzTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2VGhpY2tuZXNzTWFwVXY7XFxuI2VuZGlmXCI7XG5cbnZhciB1dl9wYXJzX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9VViApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUFQXFxuXFx0dW5pZm9ybSBtYXQzIG1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdk1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHR1bmlmb3JtIG1hdDMgYWxwaGFNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZBbHBoYU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIG1hdDMgbGlnaHRNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZMaWdodE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQU9NQVBcXG5cXHR1bmlmb3JtIG1hdDMgYW9NYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZBb01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gbWF0MyBidW1wTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2QnVtcE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBtYXQzIG5vcm1hbE1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdk5vcm1hbE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGRpc3BsYWNlbWVudE1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkRpc3BsYWNlbWVudE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIG1hdDMgZW1pc3NpdmVNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZFbWlzc2l2ZU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dW5pZm9ybSBtYXQzIG1ldGFsbmVzc01hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdk1ldGFsbmVzc01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHJvdWdobmVzc01hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdlJvdWdobmVzc01hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxcblxcdHVuaWZvcm0gbWF0MyBhbmlzb3Ryb3B5TWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2QW5pc290cm9weU1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGNsZWFyY29hdE1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdkNsZWFyY29hdE1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHVuaWZvcm0gbWF0MyBjbGVhcmNvYXROb3JtYWxNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZDbGVhcmNvYXROb3JtYWxNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIG1hdDMgY2xlYXJjb2F0Um91Z2huZXNzTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2Q2xlYXJjb2F0Um91Z2huZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxcblxcdHVuaWZvcm0gbWF0MyBzaGVlbkNvbG9yTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2U2hlZW5Db2xvck1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hFRU5fUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHNoZWVuUm91Z2huZXNzTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2U2hlZW5Sb3VnaG5lc3NNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFTUFQXFxuXFx0dW5pZm9ybSBtYXQzIGlyaWRlc2NlbmNlTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2SXJpZGVzY2VuY2VNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUFxcblxcdHVuaWZvcm0gbWF0MyBpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdklyaWRlc2NlbmNlVGhpY2tuZXNzTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHVuaWZvcm0gbWF0MyBzcGVjdWxhck1hcFRyYW5zZm9ybTtcXG5cXHR2YXJ5aW5nIHZlYzIgdlNwZWN1bGFyTWFwVXY7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxcblxcdHVuaWZvcm0gbWF0MyBzcGVjdWxhckNvbG9yTWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJDb2xvck1hcFV2O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU1BFQ1VMQVJfSU5URU5TSVRZTUFQXFxuXFx0dW5pZm9ybSBtYXQzIHNwZWN1bGFySW50ZW5zaXR5TWFwVHJhbnNmb3JtO1xcblxcdHZhcnlpbmcgdmVjMiB2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTk1BUFxcblxcdHVuaWZvcm0gbWF0MyB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZUcmFuc21pc3Npb25NYXBVdjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RISUNLTkVTU01BUFxcblxcdHVuaWZvcm0gbWF0MyB0aGlja25lc3NNYXBUcmFuc2Zvcm07XFxuXFx0dmFyeWluZyB2ZWMyIHZUaGlja25lc3NNYXBVdjtcXG4jZW5kaWZcIjtcblxudmFyIHV2X3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9VViApIHx8IGRlZmluZWQoIFVTRV9BTklTT1RST1BZIClcXG5cXHR2VXYgPSB2ZWMzKCB1diwgMSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUFQXFxuXFx0dk1hcFV2ID0gKCBtYXBUcmFuc2Zvcm0gKiB2ZWMzKCBNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHR2QWxwaGFNYXBVdiA9ICggYWxwaGFNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBBTFBIQU1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdHZMaWdodE1hcFV2ID0gKCBsaWdodE1hcFRyYW5zZm9ybSAqIHZlYzMoIExJR0hUTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FPTUFQXFxuXFx0dkFvTWFwVXYgPSAoIGFvTWFwVHJhbnNmb3JtICogdmVjMyggQU9NQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHZCdW1wTWFwVXYgPSAoIGJ1bXBNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBCVU1QTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX05PUk1BTE1BUFxcblxcdHZOb3JtYWxNYXBVdiA9ICggbm9ybWFsTWFwVHJhbnNmb3JtICogdmVjMyggTk9STUFMTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHZEaXNwbGFjZW1lbnRNYXBVdiA9ICggZGlzcGxhY2VtZW50TWFwVHJhbnNmb3JtICogdmVjMyggRElTUExBQ0VNRU5UTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dkVtaXNzaXZlTWFwVXYgPSAoIGVtaXNzaXZlTWFwVHJhbnNmb3JtICogdmVjMyggRU1JU1NJVkVNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUVUQUxORVNTTUFQXFxuXFx0dk1ldGFsbmVzc01hcFV2ID0gKCBtZXRhbG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBNRVRBTE5FU1NNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dlJvdWdobmVzc01hcFV2ID0gKCByb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBST1VHSE5FU1NNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQU5JU09UUk9QWU1BUFxcblxcdHZBbmlzb3Ryb3B5TWFwVXYgPSAoIGFuaXNvdHJvcHlNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBBTklTT1RST1BZTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxcblxcdHZDbGVhcmNvYXRNYXBVdiA9ICggY2xlYXJjb2F0TWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHR2Q2xlYXJjb2F0Tm9ybWFsTWFwVXYgPSAoIGNsZWFyY29hdE5vcm1hbE1hcFRyYW5zZm9ybSAqIHZlYzMoIENMRUFSQ09BVF9OT1JNQUxNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUFxcblxcdHZDbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiA9ICggY2xlYXJjb2F0Um91Z2huZXNzTWFwVHJhbnNmb3JtICogdmVjMyggQ0xFQVJDT0FUX1JPVUdITkVTU01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9JUklERVNDRU5DRU1BUFxcblxcdHZJcmlkZXNjZW5jZU1hcFV2ID0gKCBpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybSAqIHZlYzMoIElSSURFU0NFTkNFTUFQX1VWLCAxICkgKS54eTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUFxcblxcdHZJcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ID0gKCBpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybSAqIHZlYzMoIElSSURFU0NFTkNFX1RISUNLTkVTU01BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxcblxcdHZTaGVlbkNvbG9yTWFwVXYgPSAoIHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTSEVFTl9DT0xPUk1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcXG5cXHR2U2hlZW5Sb3VnaG5lc3NNYXBVdiA9ICggc2hlZW5Sb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTSEVFTl9ST1VHSE5FU1NNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU1BFQ1VMQVJNQVBcXG5cXHR2U3BlY3VsYXJNYXBVdiA9ICggc3BlY3VsYXJNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUk1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUl9DT0xPUk1BUFxcblxcdHZTcGVjdWxhckNvbG9yTWFwVXYgPSAoIHNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUl9DT0xPUk1BUF9VViwgMSApICkueHk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVBcXG5cXHR2U3BlY3VsYXJJbnRlbnNpdHlNYXBVdiA9ICggc3BlY3VsYXJJbnRlbnNpdHlNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBTUEVDVUxBUl9JTlRFTlNJVFlNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfVFJBTlNNSVNTSU9OTUFQXFxuXFx0dlRyYW5zbWlzc2lvbk1hcFV2ID0gKCB0cmFuc21pc3Npb25NYXBUcmFuc2Zvcm0gKiB2ZWMzKCBUUkFOU01JU1NJT05NQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfVEhJQ0tORVNTTUFQXFxuXFx0dlRoaWNrbmVzc01hcFV2ID0gKCB0aGlja25lc3NNYXBUcmFuc2Zvcm0gKiB2ZWMzKCBUSElDS05FU1NNQVBfVVYsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xuXG52YXIgd29ybGRwb3NfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQoIERJU1RBTkNFICkgfHwgZGVmaW5lZCAoIFVTRV9TSEFET1dNQVAgKSB8fCBkZWZpbmVkICggVVNFX1RSQU5TTUlTU0lPTiApIHx8IE5VTV9TUE9UX0xJR0hUX0NPT1JEUyA+IDBcXG5cXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuXFx0I2lmZGVmIFVTRV9CQVRDSElOR1xcblxcdFxcdHdvcmxkUG9zaXRpb24gPSBiYXRjaGluZ01hdHJpeCAqIHdvcmxkUG9zaXRpb247XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9JTlNUQU5DSU5HXFxuXFx0XFx0d29ybGRQb3NpdGlvbiA9IGluc3RhbmNlTWF0cml4ICogd29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHR3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xcbiNlbmRpZlwiO1xuXG5jb25zdCB2ZXJ0ZXgkaCA9IFwidmFyeWluZyB2ZWMyIHZVdjtcXG51bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxudm9pZCBtYWluKCkge1xcblxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbi54eSwgMS4wLCAxLjAgKTtcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGggPSBcInVuaWZvcm0gc2FtcGxlcjJEIHQyRDtcXG51bmlmb3JtIGZsb2F0IGJhY2tncm91bmRJbnRlbnNpdHk7XFxudmFyeWluZyB2ZWMyIHZVdjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRCggdDJELCB2VXYgKTtcXG5cXHQjaWZkZWYgREVDT0RFX1ZJREVPX1RFWFRVUkVcXG5cXHRcXHR0ZXhDb2xvciA9IHZlYzQoIG1peCggcG93KCB0ZXhDb2xvci5yZ2IgKiAwLjk0Nzg2NzI5ODYgKyB2ZWMzKCAwLjA1MjEzMjcwMTQgKSwgdmVjMyggMi40ICkgKSwgdGV4Q29sb3IucmdiICogMC4wNzczOTkzODA4LCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB0ZXhDb2xvci5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgdGV4Q29sb3IudyApO1xcblxcdCNlbmRpZlxcblxcdHRleENvbG9yLnJnYiAqPSBiYWNrZ3JvdW5kSW50ZW5zaXR5O1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleENvbG9yO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCRnID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9zaXRpb24ueiA9IGdsX1Bvc2l0aW9uLnc7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRnID0gXCIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcbiNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcXG4jZW5kaWZcXG51bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XFxudW5pZm9ybSBmbG9hdCBiYWNrZ3JvdW5kQmx1cnJpbmVzcztcXG51bmlmb3JtIGZsb2F0IGJhY2tncm91bmRJbnRlbnNpdHk7XFxudW5pZm9ybSBtYXQzIGJhY2tncm91bmRSb3RhdGlvbjtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIGJhY2tncm91bmRSb3RhdGlvbiAqIHZlYzMoIGZsaXBFbnZNYXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBiYWNrZ3JvdW5kUm90YXRpb24gKiB2V29ybGREaXJlY3Rpb24sIGJhY2tncm91bmRCbHVycmluZXNzICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWM0IHRleENvbG9yID0gdmVjNCggMC4wLCAwLjAsIDAuMCwgMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0dGV4Q29sb3IucmdiICo9IGJhY2tncm91bmRJbnRlbnNpdHk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4Q29sb3I7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JGYgPSBcInZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHRnbF9Qb3NpdGlvbi56ID0gZ2xfUG9zaXRpb24udztcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGYgPSBcInVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXhDb2xvcjtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCRlID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZhcnlpbmcgdmVjMiB2SGlnaFByZWNpc2lvblpXO1xcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiYXRjaGluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHRcXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZIaWdoUHJlY2lzaW9uWlcgPSBnbF9Qb3NpdGlvbi56dztcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGUgPSBcIiNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHR1bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudmFyeWluZyB2ZWMyIHZIaWdoUHJlY2lzaW9uWlc7XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZnJhZ0Nvb3JkWiA9IDAuNSAqIHZIaWdoUHJlY2lzaW9uWldbMF0gLyB2SGlnaFByZWNpc2lvblpXWzFdICsgMC41O1xcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCAxLjAgLSBmcmFnQ29vcmRaICksIG9wYWNpdHkgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDFcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGZyYWdDb29yZFogKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDJcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrRGVwdGhUb1JHQiggZnJhZ0Nvb3JkWiApLCAxLjAgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDNcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrRGVwdGhUb1JHKCBmcmFnQ29vcmRaICksIDAuMCwgMS4wICk7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkZCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGQgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG51bmlmb3JtIHZlYzMgcmVmZXJlbmNlUG9zaXRpb247XFxudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XFxudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYWhhc2hfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluICgpIHtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdGZsb2F0IGRpc3QgPSBsZW5ndGgoIHZXb3JsZFBvc2l0aW9uIC0gcmVmZXJlbmNlUG9zaXRpb24gKTtcXG5cXHRkaXN0ID0gKCBkaXN0IC0gbmVhckRpc3RhbmNlICkgLyAoIGZhckRpc3RhbmNlIC0gbmVhckRpc3RhbmNlICk7XFxuXFx0ZGlzdCA9IHNhdHVyYXRlKCBkaXN0ICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBkaXN0ICk7XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkYyA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkYyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVYgPSBlcXVpcmVjdFV2KCBkaXJlY3Rpb24gKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkYiA9IFwidW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCRiID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRpZiAoIG1vZCggdkxpbmVEaXN0YW5jZSwgdG90YWxTaXplICkgPiBkYXNoU2l6ZSApIHtcXG5cXHRcXHRkaXNjYXJkO1xcblxcdH1cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCRhID0gXCIjaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpZiBkZWZpbmVkICggVVNFX0VOVk1BUCApIHx8IGRlZmluZWQgKCBVU0VfU0tJTk5JTkcgKVxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JGEgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjNCBsaWdodE1hcFRleGVsID0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdkxpZ2h0TWFwVXYgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRNYXBUZXhlbC5yZ2IgKiBsaWdodE1hcEludGVuc2l0eSAqIFJFQ0lQUk9DQUxfUEk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ5ID0gXCIjZGVmaW5lIExBTUJFUlRcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDkgPSBcIiNkZWZpbmUgTEFNQkVSVFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDggPSBcIiNkZWZpbmUgTUFUQ0FQXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQ4ID0gXCIjZGVmaW5lIE1BVENBUFxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXRjYXA7XFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0dmVjMyB2aWV3RGlyID0gbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuXFx0dmVjMyB4ID0gbm9ybWFsaXplKCB2ZWMzKCB2aWV3RGlyLnosIDAuMCwgLSB2aWV3RGlyLnggKSApO1xcblxcdHZlYzMgeSA9IGNyb3NzKCB2aWV3RGlyLCB4ICk7XFxuXFx0dmVjMiB1diA9IHZlYzIoIGRvdCggeCwgbm9ybWFsICksIGRvdCggeSwgbm9ybWFsICkgKSAqIDAuNDk1ICsgMC41O1xcblxcdCNpZmRlZiBVU0VfTUFUQ0FQXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHRleHR1cmUyRCggbWF0Y2FwLCB1diApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIHZlYzMoIG1peCggMC4yLCAwLjgsIHV2LnkgKSApLCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiICogbWF0Y2FwQ29sb3IucmdiO1xcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ3ID0gXCIjZGVmaW5lIE5PUk1BTFxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUF9UQU5HRU5UU1BBQ0UgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNyA9IFwiI2RlZmluZSBOT1JNQUxcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRSApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAwLjAsIDAuMCwgMC4wLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggcGFja05vcm1hbFRvUkdCKCBub3JtYWwgKSwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaWZkZWYgT1BBUVVFXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yLmEgPSAxLjA7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkNiA9IFwiI2RlZmluZSBQSE9OR1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNiA9IFwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3Bob25nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG9wYXF1ZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgdmVydGV4JDUgPSBcIiNkZWZpbmUgU1RBTkRBUkRcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZkZWYgVVNFX1RSQU5TTUlTU0lPTlxcblxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuI2lmZGVmIFVTRV9UUkFOU01JU1NJT05cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkNSA9IFwiI2RlZmluZSBTVEFOREFSRFxcbiNpZmRlZiBQSFlTSUNBTFxcblxcdCNkZWZpbmUgSU9SXFxuXFx0I2RlZmluZSBVU0VfU1BFQ1VMQVJcXG4jZW5kaWZcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7XFxudW5pZm9ybSBmbG9hdCBtZXRhbG5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZmRlZiBJT1JcXG5cXHR1bmlmb3JtIGZsb2F0IGlvcjtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NQRUNVTEFSXFxuXFx0dW5pZm9ybSBmbG9hdCBzcGVjdWxhckludGVuc2l0eTtcXG5cXHR1bmlmb3JtIHZlYzMgc3BlY3VsYXJDb2xvcjtcXG5cXHQjaWZkZWYgVVNFX1NQRUNVTEFSX0NPTE9STUFQXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJDb2xvck1hcDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFySW50ZW5zaXR5TWFwO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQ0xFQVJDT0FUXFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXQ7XFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXRSb3VnaG5lc3M7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9ESVNQRVJTSU9OXFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwZXJzaW9uO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfSVJJREVTQ0VOQ0VcXG5cXHR1bmlmb3JtIGZsb2F0IGlyaWRlc2NlbmNlO1xcblxcdHVuaWZvcm0gZmxvYXQgaXJpZGVzY2VuY2VJT1I7XFxuXFx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW07XFxuXFx0dW5pZm9ybSBmbG9hdCBpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW07XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTlxcblxcdHVuaWZvcm0gdmVjMyBzaGVlbkNvbG9yO1xcblxcdHVuaWZvcm0gZmxvYXQgc2hlZW5Sb3VnaG5lc3M7XFxuXFx0I2lmZGVmIFVTRV9TSEVFTl9DT0xPUk1BUFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNoZWVuQ29sb3JNYXA7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9TSEVFTl9ST1VHSE5FU1NNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBzaGVlblJvdWdobmVzc01hcDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FOSVNPVFJPUFlcXG5cXHR1bmlmb3JtIHZlYzIgYW5pc290cm9weVZlY3RvcjtcXG5cXHQjaWZkZWYgVVNFX0FOSVNPVFJPUFlNQVBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBhbmlzb3Ryb3B5TWFwO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxpcmlkZXNjZW5jZV9mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dHJhbnNtaXNzaW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGVhcmNvYXRfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8aXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYWhhc2hfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgdG90YWxEaWZmdXNlID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIHRvdGFsU3BlY3VsYXIgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXI7XFxuXFx0I2luY2x1ZGUgPHRyYW5zbWlzc2lvbl9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB0b3RhbERpZmZ1c2UgKyB0b3RhbFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpZmRlZiBVU0VfU0hFRU5cXG5cXHRcXHRmbG9hdCBzaGVlbkVuZXJneUNvbXAgPSAxLjAgLSAwLjE1NyAqIG1heDMoIG1hdGVyaWFsLnNoZWVuQ29sb3IgKTtcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqIHNoZWVuRW5lcmd5Q29tcCArIHNoZWVuU3BlY3VsYXJEaXJlY3QgKyBzaGVlblNwZWN1bGFySW5kaXJlY3Q7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIFVTRV9DTEVBUkNPQVRcXG5cXHRcXHRmbG9hdCBkb3ROVmNjID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnlDbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5Vmlld0RpciApICk7XFxuXFx0XFx0dmVjMyBGY2MgPSBGX1NjaGxpY2soIG1hdGVyaWFsLmNsZWFyY29hdEYwLCBtYXRlcmlhbC5jbGVhcmNvYXRGOTAsIGRvdE5WY2MgKTtcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gb3V0Z29pbmdMaWdodCAqICggMS4wIC0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogRmNjICkgKyAoIGNsZWFyY29hdFNwZWN1bGFyRGlyZWN0ICsgY2xlYXJjb2F0U3BlY3VsYXJJbmRpcmVjdCApICogbWF0ZXJpYWwuY2xlYXJjb2F0O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQ0ID0gXCIjZGVmaW5lIFRPT05cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxiYXRjaGluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaGluc3RhbmNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQ0ID0gXCIjZGVmaW5lIFRPT05cXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c190b29uX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQzID0gXCJ1bmlmb3JtIGZsb2F0IHNpemU7XFxudW5pZm9ybSBmbG9hdCBzY2FsZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG4jaWZkZWYgVVNFX1BPSU5UU19VVlxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaWZkZWYgVVNFX1BPSU5UU19VVlxcblxcdFxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhpbnN0YW5jZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoY29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0Z2xfUG9pbnRTaXplID0gc2l6ZTtcXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9IGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKTtcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBnbF9Qb2ludFNpemUgKj0gKCBzY2FsZSAvIC0gbXZQb3NpdGlvbi56ICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQkMyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYXRlc3RfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxufVwiO1xuXG5jb25zdCB2ZXJ0ZXgkMiA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8YmF0Y2hpbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8YmF0Y2hpbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBoaW5zdGFuY2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG5jb25zdCBmcmFnbWVudCQyID0gXCJ1bmlmb3JtIHZlYzMgY29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjb2xvciwgb3BhY2l0eSAqICggMS4wIC0gZ2V0U2hhZG93TWFzaygpICkgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XG5cbmNvbnN0IHZlcnRleCQxID0gXCJ1bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gdmVjMiBjZW50ZXI7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXhbIDMgXTtcXG5cXHR2ZWMyIHNjYWxlID0gdmVjMiggbGVuZ3RoKCBtb2RlbE1hdHJpeFsgMCBdLnh5eiApLCBsZW5ndGgoIG1vZGVsTWF0cml4WyAxIF0ueHl6ICkgKTtcXG5cXHQjaWZuZGVmIFVTRV9TSVpFQVRURU5VQVRJT05cXG5cXHRcXHRib29sIGlzUGVyc3BlY3RpdmUgPSBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICk7XFxuXFx0XFx0aWYgKCBpc1BlcnNwZWN0aXZlICkgc2NhbGUgKj0gLSBtdlBvc2l0aW9uLno7XFxuXFx0I2VuZGlmXFxuXFx0dmVjMiBhbGlnbmVkUG9zaXRpb24gPSAoIHBvc2l0aW9uLnh5IC0gKCBjZW50ZXIgLSB2ZWMyKCAwLjUgKSApICkgKiBzY2FsZTtcXG5cXHR2ZWMyIHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRyb3RhdGVkUG9zaXRpb24ueCA9IGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XFxuXFx0cm90YXRlZFBvc2l0aW9uLnkgPSBzaW4oIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCArIGNvcyggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdG12UG9zaXRpb24ueHkgKz0gcm90YXRlZFBvc2l0aW9uO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbmNvbnN0IGZyYWdtZW50JDEgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcblxuY29uc3QgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhaGFzaF9mcmFnbWVudDogYWxwaGFoYXNoX2ZyYWdtZW50LFxuXHRhbHBoYWhhc2hfcGFyc19mcmFnbWVudDogYWxwaGFoYXNoX3BhcnNfZnJhZ21lbnQsXG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50OiBhbHBoYXRlc3RfcGFyc19mcmFnbWVudCxcblx0YW9tYXBfZnJhZ21lbnQ6IGFvbWFwX2ZyYWdtZW50LFxuXHRhb21hcF9wYXJzX2ZyYWdtZW50OiBhb21hcF9wYXJzX2ZyYWdtZW50LFxuXHRiYXRjaGluZ19wYXJzX3ZlcnRleDogYmF0Y2hpbmdfcGFyc192ZXJ0ZXgsXG5cdGJhdGNoaW5nX3ZlcnRleDogYmF0Y2hpbmdfdmVydGV4LFxuXHRiZWdpbl92ZXJ0ZXg6IGJlZ2luX3ZlcnRleCxcblx0YmVnaW5ub3JtYWxfdmVydGV4OiBiZWdpbm5vcm1hbF92ZXJ0ZXgsXG5cdGJzZGZzOiBic2Rmcyxcblx0aXJpZGVzY2VuY2VfZnJhZ21lbnQ6IGlyaWRlc2NlbmNlX2ZyYWdtZW50LFxuXHRidW1wbWFwX3BhcnNfZnJhZ21lbnQ6IGJ1bXBtYXBfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQsXG5cdGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50OiBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgsXG5cdGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgsXG5cdGNvbG9yX2ZyYWdtZW50OiBjb2xvcl9mcmFnbWVudCxcblx0Y29sb3JfcGFyc19mcmFnbWVudDogY29sb3JfcGFyc19mcmFnbWVudCxcblx0Y29sb3JfcGFyc192ZXJ0ZXg6IGNvbG9yX3BhcnNfdmVydGV4LFxuXHRjb2xvcl92ZXJ0ZXg6IGNvbG9yX3ZlcnRleCxcblx0Y29tbW9uOiBjb21tb24sXG5cdGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudDogY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50LFxuXHRkZWZhdWx0bm9ybWFsX3ZlcnRleDogZGVmYXVsdG5vcm1hbF92ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFxuXHRkaXNwbGFjZW1lbnRtYXBfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfdmVydGV4LFxuXHRlbWlzc2l2ZW1hcF9mcmFnbWVudDogZW1pc3NpdmVtYXBfZnJhZ21lbnQsXG5cdGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNvbG9yc3BhY2VfZnJhZ21lbnQ6IGNvbG9yc3BhY2VfZnJhZ21lbnQsXG5cdGNvbG9yc3BhY2VfcGFyc19mcmFnbWVudDogY29sb3JzcGFjZV9wYXJzX2ZyYWdtZW50LFxuXHRlbnZtYXBfZnJhZ21lbnQ6IGVudm1hcF9mcmFnbWVudCxcblx0ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3BhcnNfdmVydGV4OiBlbnZtYXBfcGFyc192ZXJ0ZXgsXG5cdGVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcblx0Zm9nX3ZlcnRleDogZm9nX3ZlcnRleCxcblx0Zm9nX3BhcnNfdmVydGV4OiBmb2dfcGFyc192ZXJ0ZXgsXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxuXHRmb2dfcGFyc19mcmFnbWVudDogZm9nX3BhcnNfZnJhZ21lbnQsXG5cdGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQ6IGdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19sYW1iZXJ0X2ZyYWdtZW50OiBsaWdodHNfbGFtYmVydF9mcmFnbWVudCxcblx0bGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudDogbGlnaHRzX2xhbWJlcnRfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BhcnNfYmVnaW46IGxpZ2h0c19wYXJzX2JlZ2luLFxuXHRsaWdodHNfdG9vbl9mcmFnbWVudDogbGlnaHRzX3Rvb25fZnJhZ21lbnQsXG5cdGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19mcmFnbWVudDogbGlnaHRzX3Bob25nX2ZyYWdtZW50LFxuXHRsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudDogbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50LFxuXHRsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogbGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19mcmFnbWVudF9iZWdpbjogbGlnaHRzX2ZyYWdtZW50X2JlZ2luLFxuXHRsaWdodHNfZnJhZ21lbnRfbWFwczogbGlnaHRzX2ZyYWdtZW50X21hcHMsXG5cdGxpZ2h0c19mcmFnbWVudF9lbmQ6IGxpZ2h0c19mcmFnbWVudF9lbmQsXG5cdGxvZ2RlcHRoYnVmX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudDogbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCxcblx0bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4LFxuXHRsb2dkZXB0aGJ1Zl92ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3ZlcnRleCxcblx0bWFwX2ZyYWdtZW50OiBtYXBfZnJhZ21lbnQsXG5cdG1hcF9wYXJzX2ZyYWdtZW50OiBtYXBfcGFyc19mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfZnJhZ21lbnQsXG5cdG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfZnJhZ21lbnQsXG5cdG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCxcblx0bW9ycGhpbnN0YW5jZV92ZXJ0ZXg6IG1vcnBoaW5zdGFuY2VfdmVydGV4LFxuXHRtb3JwaGNvbG9yX3ZlcnRleDogbW9ycGhjb2xvcl92ZXJ0ZXgsXG5cdG1vcnBobm9ybWFsX3ZlcnRleDogbW9ycGhub3JtYWxfdmVydGV4LFxuXHRtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXG5cdG1vcnBodGFyZ2V0X3ZlcnRleDogbW9ycGh0YXJnZXRfdmVydGV4LFxuXHRub3JtYWxfZnJhZ21lbnRfYmVnaW46IG5vcm1hbF9mcmFnbWVudF9iZWdpbixcblx0bm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRub3JtYWxfcGFyc19mcmFnbWVudDogbm9ybWFsX3BhcnNfZnJhZ21lbnQsXG5cdG5vcm1hbF9wYXJzX3ZlcnRleDogbm9ybWFsX3BhcnNfdmVydGV4LFxuXHRub3JtYWxfdmVydGV4OiBub3JtYWxfdmVydGV4LFxuXHRub3JtYWxtYXBfcGFyc19mcmFnbWVudDogbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQsXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW46IGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwczogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLFxuXHRjbGVhcmNvYXRfcGFyc19mcmFnbWVudDogY2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQsXG5cdGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQ6IGlyaWRlc2NlbmNlX3BhcnNfZnJhZ21lbnQsXG5cdG9wYXF1ZV9mcmFnbWVudDogb3BhcXVlX2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dHJhbnNtaXNzaW9uX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fZnJhZ21lbnQsXG5cdHRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50OiB0cmFuc21pc3Npb25fcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF92ZXJ0OiB2ZXJ0ZXgkaCxcblx0YmFja2dyb3VuZF9mcmFnOiBmcmFnbWVudCRoLFxuXHRiYWNrZ3JvdW5kQ3ViZV92ZXJ0OiB2ZXJ0ZXgkZyxcblx0YmFja2dyb3VuZEN1YmVfZnJhZzogZnJhZ21lbnQkZyxcblx0Y3ViZV92ZXJ0OiB2ZXJ0ZXgkZixcblx0Y3ViZV9mcmFnOiBmcmFnbWVudCRmLFxuXHRkZXB0aF92ZXJ0OiB2ZXJ0ZXgkZSxcblx0ZGVwdGhfZnJhZzogZnJhZ21lbnQkZSxcblx0ZGlzdGFuY2VSR0JBX3ZlcnQ6IHZlcnRleCRkLFxuXHRkaXN0YW5jZVJHQkFfZnJhZzogZnJhZ21lbnQkZCxcblx0ZXF1aXJlY3RfdmVydDogdmVydGV4JGMsXG5cdGVxdWlyZWN0X2ZyYWc6IGZyYWdtZW50JGMsXG5cdGxpbmVkYXNoZWRfdmVydDogdmVydGV4JGIsXG5cdGxpbmVkYXNoZWRfZnJhZzogZnJhZ21lbnQkYixcblx0bWVzaGJhc2ljX3ZlcnQ6IHZlcnRleCRhLFxuXHRtZXNoYmFzaWNfZnJhZzogZnJhZ21lbnQkYSxcblx0bWVzaGxhbWJlcnRfdmVydDogdmVydGV4JDksXG5cdG1lc2hsYW1iZXJ0X2ZyYWc6IGZyYWdtZW50JDksXG5cdG1lc2htYXRjYXBfdmVydDogdmVydGV4JDgsXG5cdG1lc2htYXRjYXBfZnJhZzogZnJhZ21lbnQkOCxcblx0bWVzaG5vcm1hbF92ZXJ0OiB2ZXJ0ZXgkNyxcblx0bWVzaG5vcm1hbF9mcmFnOiBmcmFnbWVudCQ3LFxuXHRtZXNocGhvbmdfdmVydDogdmVydGV4JDYsXG5cdG1lc2hwaG9uZ19mcmFnOiBmcmFnbWVudCQ2LFxuXHRtZXNocGh5c2ljYWxfdmVydDogdmVydGV4JDUsXG5cdG1lc2hwaHlzaWNhbF9mcmFnOiBmcmFnbWVudCQ1LFxuXHRtZXNodG9vbl92ZXJ0OiB2ZXJ0ZXgkNCxcblx0bWVzaHRvb25fZnJhZzogZnJhZ21lbnQkNCxcblx0cG9pbnRzX3ZlcnQ6IHZlcnRleCQzLFxuXHRwb2ludHNfZnJhZzogZnJhZ21lbnQkMyxcblx0c2hhZG93X3ZlcnQ6IHZlcnRleCQyLFxuXHRzaGFkb3dfZnJhZzogZnJhZ21lbnQkMixcblx0c3ByaXRlX3ZlcnQ6IHZlcnRleCQxLFxuXHRzcHJpdGVfZnJhZzogZnJhZ21lbnQkMVxufTtcblxuLy8gVW5pZm9ybXMgbGlicmFyeSBmb3Igc2hhcmVkIHdlYmdsIHNoYWRlcnNcbmNvbnN0IFVuaWZvcm1zTGliID0ge1xuXG5cdGNvbW1vbjoge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdG1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblxuXHRcdGFscGhhVGVzdDogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRzcGVjdWxhcm1hcDoge1xuXG5cdFx0c3BlY3VsYXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRzcGVjdWxhck1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdGVudm1hcDoge1xuXG5cdFx0ZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0ZW52TWFwUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdGZsaXBFbnZNYXA6IHsgdmFsdWU6IC0xIH0sXG5cdFx0cmVmbGVjdGl2aXR5OiB7IHZhbHVlOiAxLjAgfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cdFx0aW9yOiB7IHZhbHVlOiAxLjUgfSwgLy8gcGh5c2ljYWxcblx0XHRyZWZyYWN0aW9uUmF0aW86IHsgdmFsdWU6IDAuOTggfSwgLy8gYmFzaWMsIGxhbWJlcnQsIHBob25nXG5cblx0fSxcblxuXHRhb21hcDoge1xuXG5cdFx0YW9NYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhb01hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9LFxuXHRcdGFvTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0bGlnaHRtYXA6IHtcblxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bGlnaHRNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSxcblx0XHRsaWdodE1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdGJ1bXBtYXA6IHtcblxuXHRcdGJ1bXBNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRidW1wTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRidW1wU2NhbGU6IHsgdmFsdWU6IDEgfVxuXG5cdH0sXG5cblx0bm9ybWFsbWFwOiB7XG5cblx0XHRub3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRub3JtYWxNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdG5vcm1hbFNjYWxlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCAxLCAxICkgfVxuXG5cdH0sXG5cblx0ZGlzcGxhY2VtZW50bWFwOiB7XG5cblx0XHRkaXNwbGFjZW1lbnRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRkaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0ZGlzcGxhY2VtZW50QmlhczogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRlbWlzc2l2ZW1hcDoge1xuXG5cdFx0ZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRlbWlzc2l2ZU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdG1ldGFsbmVzc21hcDoge1xuXG5cdFx0bWV0YWxuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWV0YWxuZXNzTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfVxuXG5cdH0sXG5cblx0cm91Z2huZXNzbWFwOiB7XG5cblx0XHRyb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRyb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9XG5cblx0fSxcblxuXHRncmFkaWVudG1hcDoge1xuXG5cdFx0Z3JhZGllbnRNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0Zm9nOiB7XG5cblx0XHRmb2dEZW5zaXR5OiB7IHZhbHVlOiAwLjAwMDI1IH0sXG5cdFx0Zm9nTmVhcjogeyB2YWx1ZTogMSB9LFxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxuXHRcdGZvZ0NvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9XG5cblx0fSxcblxuXHRsaWdodHM6IHtcblxuXHRcdGFtYmllbnRMaWdodENvbG9yOiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0bGlnaHRQcm9iZTogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiB7fSxcblx0XHRcdHNoYWRvd1JhZGl1czoge30sXG5cdFx0XHRzaGFkb3dNYXBTaXplOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0c3BvdExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRpcmVjdGlvbjoge30sXG5cdFx0XHRkaXN0YW5jZToge30sXG5cdFx0XHRjb25lQ29zOiB7fSxcblx0XHRcdHBlbnVtYnJhQ29zOiB7fSxcblx0XHRcdGRlY2F5OiB7fVxuXHRcdH0gfSxcblxuXHRcdHNwb3RMaWdodFNoYWRvd3M6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRzaGFkb3dJbnRlbnNpdHk6IDEsXG5cdFx0XHRzaGFkb3dCaWFzOiB7fSxcblx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IHt9LFxuXHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcblx0XHRcdHNoYWRvd01hcFNpemU6IHt9XG5cdFx0fSB9LFxuXG5cdFx0c3BvdExpZ2h0TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXG5cdFx0c3BvdExpZ2h0TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0cG9pbnRMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHRkZWNheToge30sXG5cdFx0XHRkaXN0YW5jZToge31cblx0XHR9IH0sXG5cblx0XHRwb2ludExpZ2h0U2hhZG93czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdHNoYWRvd0ludGVuc2l0eTogMSxcblx0XHRcdHNoYWRvd0JpYXM6IHt9LFxuXHRcdFx0c2hhZG93Tm9ybWFsQmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiB7fSxcblx0XHRcdHNoYWRvd0NhbWVyYUZhcjoge31cblx0XHR9IH0sXG5cblx0XHRwb2ludFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdGhlbWlzcGhlcmVMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0c2t5Q29sb3I6IHt9LFxuXHRcdFx0Z3JvdW5kQ29sb3I6IHt9XG5cdFx0fSB9LFxuXG5cdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgQlJERiBkYXRhIG5lZWRzIHRvIGJlIG1vdmVkIGZyb20gZXhhbXBsZSB0byBtYWluIHNyY1xuXHRcdHJlY3RBcmVhTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0d2lkdGg6IHt9LFxuXHRcdFx0aGVpZ2h0OiB7fVxuXHRcdH0gfSxcblxuXHRcdGx0Y18xOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bHRjXzI6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHhmZmZmZmYgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNpemU6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdHNjYWxlOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRtYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH1cblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4ZmZmZmZmICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblx0XHRjZW50ZXI6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRyb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0bWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYU1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGFscGhhTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRhbHBoYVRlc3Q6IHsgdmFsdWU6IDAgfVxuXG5cdH1cblxufTtcblxuY29uc3QgU2hhZGVyTGliID0ge1xuXG5cdGJhc2ljOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfZnJhZ1xuXG5cdH0sXG5cblx0bGFtYmVydDoge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGxhbWJlcnRfZnJhZ1xuXG5cdH0sXG5cblx0cGhvbmc6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHNwZWN1bGFyOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgxMTExMTEgKSB9LFxuXHRcdFx0XHRzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaG9uZ192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfZnJhZ1xuXG5cdH0sXG5cblx0c3RhbmRhcmQ6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5yb3VnaG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5tZXRhbG5lc3NtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRyb3VnaG5lc3M6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdFx0XHRtZXRhbG5lc3M6IHsgdmFsdWU6IDAuMCB9LFxuXHRcdFx0XHRlbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF9mcmFnXG5cblx0fSxcblxuXHR0b29uOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZ3JhZGllbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHR7XG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMDAgKSB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNodG9vbl92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNodG9vbl9mcmFnXG5cblx0fSxcblxuXHRtYXRjYXA6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdG1hdGNhcDogeyB2YWx1ZTogbnVsbCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobWF0Y2FwX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfZnJhZ1xuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5wb2ludHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5wb2ludHNfZnJhZ1xuXG5cdH0sXG5cblx0ZGFzaGVkOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdHNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGRhc2hTaXplOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdHRvdGFsU2l6ZTogeyB2YWx1ZTogMiB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmxpbmVkYXNoZWRfZnJhZ1xuXG5cdH0sXG5cblx0ZGVwdGg6IHtcblxuXHRcdHVuaWZvcm1zOiAvKkBfX1BVUkVfXyovIG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZGVwdGhfZnJhZ1xuXG5cdH0sXG5cblx0bm9ybWFsOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0e1xuXHRcdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG5vcm1hbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobm9ybWFsX2ZyYWdcblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuc3ByaXRlLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5zcHJpdGVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc3ByaXRlX2ZyYWdcblxuXHR9LFxuXG5cdGJhY2tncm91bmQ6IHtcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0MkQ6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGJhY2tncm91bmRJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF9mcmFnXG5cblx0fSxcblxuXHRiYWNrZ3JvdW5kQ3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdGVudk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0ZmxpcEVudk1hcDogeyB2YWx1ZTogLTEgfSxcblx0XHRcdGJhY2tncm91bmRCbHVycmluZXNzOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRiYWNrZ3JvdW5kSW50ZW5zaXR5OiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRiYWNrZ3JvdW5kUm90YXRpb246IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZEN1YmVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZEN1YmVfZnJhZ1xuXG5cdH0sXG5cblx0Y3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRDdWJlOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0RmxpcDogeyB2YWx1ZTogLTEgfSxcblx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX2ZyYWdcblxuXHR9LFxuXG5cdGVxdWlyZWN0OiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuZXF1aXJlY3RfZnJhZ1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VSR0JBOiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdHJlZmVyZW5jZVBvc2l0aW9uOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCkgfSxcblx0XHRcdFx0bmVhckRpc3RhbmNlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGZhckRpc3RhbmNlOiB7IHZhbHVlOiAxMDAwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfZnJhZ1xuXG5cdH0sXG5cblx0c2hhZG93OiB7XG5cblx0XHR1bmlmb3JtczogLypAX19QVVJFX18qLyBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdGNvbG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBDb2xvciggMHgwMDAwMCApIH0sXG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9LFxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNoYWRvd19mcmFnXG5cblx0fVxuXG59O1xuXG5TaGFkZXJMaWIucGh5c2ljYWwgPSB7XG5cblx0dW5pZm9ybXM6IC8qQF9fUFVSRV9fKi8gbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFNoYWRlckxpYi5zdGFuZGFyZC51bmlmb3Jtcyxcblx0XHR7XG5cdFx0XHRjbGVhcmNvYXQ6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGNsZWFyY29hdE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0TWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbFNjYWxlOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCAxLCAxICkgfSxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzczogeyB2YWx1ZTogMCB9LFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0ZGlzcGVyc2lvbjogeyB2YWx1ZTogMCB9LFxuXHRcdFx0aXJpZGVzY2VuY2U6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGlyaWRlc2NlbmNlTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRpcmlkZXNjZW5jZU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRpcmlkZXNjZW5jZUlPUjogeyB2YWx1ZTogMS4zIH0sXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW06IHsgdmFsdWU6IDEwMCB9LFxuXHRcdFx0aXJpZGVzY2VuY2VUaGlja25lc3NNYXhpbXVtOiB7IHZhbHVlOiA0MDAgfSxcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRzaGVlbjogeyB2YWx1ZTogMCB9LFxuXHRcdFx0c2hlZW5Db2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdHNoZWVuQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNoZWVuQ29sb3JNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0c2hlZW5Sb3VnaG5lc3M6IHsgdmFsdWU6IDEgfSxcblx0XHRcdHNoZWVuUm91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHR0cmFuc21pc3Npb246IHsgdmFsdWU6IDAgfSxcblx0XHRcdHRyYW5zbWlzc2lvbk1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwVHJhbnNmb3JtOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHRyYW5zbWlzc2lvblNhbXBsZXJTaXplOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCkgfSxcblx0XHRcdHRyYW5zbWlzc2lvblNhbXBsZXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHRoaWNrbmVzczogeyB2YWx1ZTogMCB9LFxuXHRcdFx0dGhpY2tuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHR0aGlja25lc3NNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0YXR0ZW51YXRpb25EaXN0YW5jZTogeyB2YWx1ZTogMCB9LFxuXHRcdFx0YXR0ZW51YXRpb25Db2xvcjogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3I6IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IENvbG9yKCAxLCAxLCAxICkgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3JNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdFx0c3BlY3VsYXJJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSxcblx0XHRcdHNwZWN1bGFySW50ZW5zaXR5TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybTogeyB2YWx1ZTogLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpIH0sXG5cdFx0XHRhbmlzb3Ryb3B5VmVjdG9yOiB7IHZhbHVlOiAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IyKCkgfSxcblx0XHRcdGFuaXNvdHJvcHlNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGFuaXNvdHJvcHlNYXBUcmFuc2Zvcm06IHsgdmFsdWU6IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDMoKSB9LFxuXHRcdH1cblx0XSApLFxuXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG59O1xuXG5jb25zdCBfcmdiID0geyByOiAwLCBiOiAwLCBnOiAwIH07XG5jb25zdCBfZTEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IEV1bGVyKCk7XG5jb25zdCBfbTEkMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuZnVuY3Rpb24gV2ViR0xCYWNrZ3JvdW5kKCByZW5kZXJlciwgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIHN0YXRlLCBvYmplY3RzLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdGNvbnN0IGNsZWFyQ29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdGxldCBjbGVhckFscGhhID0gYWxwaGEgPT09IHRydWUgPyAwIDogMTtcblxuXHRsZXQgcGxhbmVNZXNoO1xuXHRsZXQgYm94TWVzaDtcblxuXHRsZXQgY3VycmVudEJhY2tncm91bmQgPSBudWxsO1xuXHRsZXQgY3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDtcblx0bGV0IGN1cnJlbnRUb25lbWFwcGluZyA9IG51bGw7XG5cblx0ZnVuY3Rpb24gZ2V0QmFja2dyb3VuZCggc2NlbmUgKSB7XG5cblx0XHRsZXQgYmFja2dyb3VuZCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5iYWNrZ3JvdW5kIDogbnVsbDtcblxuXHRcdGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgdXNlUE1SRU0gPSBzY2VuZS5iYWNrZ3JvdW5kQmx1cnJpbmVzcyA+IDA7IC8vIHVzZSBQTVJFTSBpZiB0aGUgdXNlciB3YW50cyB0byBibHVyIHRoZSBiYWNrZ3JvdW5kXG5cdFx0XHRiYWNrZ3JvdW5kID0gKCB1c2VQTVJFTSA/IGN1YmV1dm1hcHMgOiBjdWJlbWFwcyApLmdldCggYmFja2dyb3VuZCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJhY2tncm91bmQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc2NlbmUgKSB7XG5cblx0XHRsZXQgZm9yY2VDbGVhciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBnZXRCYWNrZ3JvdW5kKCBzY2VuZSApO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kID09PSBudWxsICkge1xuXG5cdFx0XHRzZXRDbGVhciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRcdHNldENsZWFyKCBiYWNrZ3JvdW5kLCAxICk7XG5cdFx0XHRmb3JjZUNsZWFyID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGVudmlyb25tZW50QmxlbmRNb2RlID0gcmVuZGVyZXIueHIuZ2V0RW52aXJvbm1lbnRCbGVuZE1vZGUoKTtcblxuXHRcdGlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhZGRpdGl2ZScgKSB7XG5cblx0XHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDAsIDAsIDAsIDEsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0fSBlbHNlIGlmICggZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhbHBoYS1ibGVuZCcgKSB7XG5cblx0XHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDAsIDAsIDAsIDAsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJlci5hdXRvQ2xlYXIgfHwgZm9yY2VDbGVhciApIHtcblxuXHRcdFx0Ly8gYnVmZmVycyBtaWdodCBub3QgYmUgd3JpdGFibGUgd2hpY2ggaXMgcmVxdWlyZWQgdG8gZW5zdXJlIGEgY29ycmVjdCBjbGVhclxuXG5cdFx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QoIHRydWUgKTtcblx0XHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayggdHJ1ZSApO1xuXHRcdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRNYXNrKCB0cnVlICk7XG5cblx0XHRcdHJlbmRlcmVyLmNsZWFyKCByZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYWRkVG9SZW5kZXJMaXN0KCByZW5kZXJMaXN0LCBzY2VuZSApIHtcblxuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBnZXRCYWNrZ3JvdW5kKCBzY2VuZSApO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICYmICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlIHx8IGJhY2tncm91bmQubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSApIHtcblxuXHRcdFx0aWYgKCBib3hNZXNoID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ym94TWVzaCA9IG5ldyBNZXNoKFxuXHRcdFx0XHRcdG5ldyBCb3hHZW9tZXRyeSggMSwgMSwgMSApLFxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdFx0bmFtZTogJ0JhY2tncm91bmRDdWJlTWF0ZXJpYWwnLFxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIFNoYWRlckxpYi5iYWNrZ3JvdW5kQ3ViZS51bmlmb3JtcyApLFxuXHRcdFx0XHRcdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJMaWIuYmFja2dyb3VuZEN1YmUudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kQ3ViZS5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRcdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0Zm9nOiBmYWxzZSxcblx0XHRcdFx0XHRcdGFsbG93T3ZlcnJpZGU6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBhZGQgXCJlbnZNYXBcIiBtYXRlcmlhbCBwcm9wZXJ0eSBzbyB0aGUgcmVuZGVyZXIgY2FuIGV2YWx1YXRlIGl0IGxpa2UgZm9yIGJ1aWx0LWluIG1hdGVyaWFsc1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGJveE1lc2gubWF0ZXJpYWwsICdlbnZNYXAnLCB7XG5cblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZW52TWFwLnZhbHVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9lMSQxLmNvcHkoIHNjZW5lLmJhY2tncm91bmRSb3RhdGlvbiApO1xuXG5cdFx0XHQvLyBhY2NvbW1vZGF0ZSBsZWZ0LWhhbmRlZCBmcmFtZVxuXHRcdFx0X2UxJDEueCAqPSAtMTsgX2UxJDEueSAqPSAtMTsgX2UxJDEueiAqPSAtMTtcblxuXHRcdFx0aWYgKCBiYWNrZ3JvdW5kLmlzQ3ViZVRleHR1cmUgJiYgYmFja2dyb3VuZC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIGVudmlyb25tZW50IG1hcHMgd2hpY2ggYXJlIG5vdCBjdWJlIHJlbmRlciB0YXJnZXRzIG9yIFBNUkVNcyBmb2xsb3cgYSBkaWZmZXJlbnQgY29udmVudGlvblxuXHRcdFx0XHRfZTEkMS55ICo9IC0xO1xuXHRcdFx0XHRfZTEkMS56ICo9IC0xO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZW52TWFwLnZhbHVlID0gYmFja2dyb3VuZDtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlICYmIGJhY2tncm91bmQuaXNSZW5kZXJUYXJnZXRUZXh0dXJlID09PSBmYWxzZSApID8gLTEgOiAxO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kQmx1cnJpbmVzcy52YWx1ZSA9IHNjZW5lLmJhY2tncm91bmRCbHVycmluZXNzO1xuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kSW50ZW5zaXR5LnZhbHVlID0gc2NlbmUuYmFja2dyb3VuZEludGVuc2l0eTtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuYmFja2dyb3VuZFJvdGF0aW9uLnZhbHVlLnNldEZyb21NYXRyaXg0KCBfbTEkMS5tYWtlUm90YXRpb25Gcm9tRXVsZXIoIF9lMSQxICkgKTtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudG9uZU1hcHBlZCA9IENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggYmFja2dyb3VuZC5jb2xvclNwYWNlICkgIT09IFNSR0JUcmFuc2ZlcjtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZCB8fFxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbiB8fFxuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgIT09IHJlbmRlcmVyLnRvbmVNYXBwaW5nICkge1xuXG5cdFx0XHRcdGJveE1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgPSByZW5kZXJlci50b25lTWFwcGluZztcblxuXHRcdFx0fVxuXG5cdFx0XHRib3hNZXNoLmxheWVycy5lbmFibGVBbGwoKTtcblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggYm94TWVzaCwgYm94TWVzaC5nZW9tZXRyeSwgYm94TWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0aWYgKCBwbGFuZU1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwbGFuZU1lc2ggPSBuZXcgTWVzaChcblx0XHRcdFx0XHRuZXcgUGxhbmVHZW9tZXRyeSggMiwgMiApLFxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdFx0bmFtZTogJ0JhY2tncm91bmRNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmJhY2tncm91bmQudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogRnJvbnRTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRcdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0Zm9nOiBmYWxzZSxcblx0XHRcdFx0XHRcdGFsbG93T3ZlcnJpZGU6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0cGxhbmVNZXNoLmdlb21ldHJ5LmRlbGV0ZUF0dHJpYnV0ZSggJ25vcm1hbCcgKTtcblxuXHRcdFx0XHQvLyBhZGQgXCJtYXBcIiBtYXRlcmlhbCBwcm9wZXJ0eSBzbyB0aGUgcmVuZGVyZXIgY2FuIGV2YWx1YXRlIGl0IGxpa2UgZm9yIGJ1aWx0LWluIG1hdGVyaWFsc1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcblxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50MkQudmFsdWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKCBwbGFuZU1lc2ggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudDJELnZhbHVlID0gYmFja2dyb3VuZDtcblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5iYWNrZ3JvdW5kSW50ZW5zaXR5LnZhbHVlID0gc2NlbmUuYmFja2dyb3VuZEludGVuc2l0eTtcblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC50b25lTWFwcGVkID0gQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBiYWNrZ3JvdW5kLmNvbG9yU3BhY2UgKSAhPT0gU1JHQlRyYW5zZmVyO1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHBsYW5lTWVzaC5tYXRlcmlhbC51bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCBiYWNrZ3JvdW5kLm1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiAhPT0gYmFja2dyb3VuZC52ZXJzaW9uIHx8XG5cdFx0XHRcdGN1cnJlbnRUb25lbWFwcGluZyAhPT0gcmVuZGVyZXIudG9uZU1hcHBpbmcgKSB7XG5cblx0XHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IGJhY2tncm91bmQudmVyc2lvbjtcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0cGxhbmVNZXNoLmxheWVycy5lbmFibGVBbGwoKTtcblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggcGxhbmVNZXNoLCBwbGFuZU1lc2guZ2VvbWV0cnksIHBsYW5lTWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDbGVhciggY29sb3IsIGFscGhhICkge1xuXG5cdFx0Y29sb3IuZ2V0UkdCKCBfcmdiLCBnZXRVbmxpdFVuaWZvcm1Db2xvclNwYWNlKCByZW5kZXJlciApICk7XG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldENsZWFyKCBfcmdiLnIsIF9yZ2IuZywgX3JnYi5iLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRpZiAoIGJveE1lc2ggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0XHRib3hNZXNoLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHRcdFx0Ym94TWVzaCA9IHVuZGVmaW5lZDtcblxuXHRcdH1cblxuXHRcdGlmICggcGxhbmVNZXNoICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBsYW5lTWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0XHRwbGFuZU1lc2ggPSB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjbGVhckNvbG9yO1xuXG5cdFx0fSxcblx0XHRzZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoIGNvbG9yLCBhbHBoYSA9IDEgKSB7XG5cblx0XHRcdGNsZWFyQ29sb3Iuc2V0KCBjb2xvciApO1xuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0Z2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJBbHBoYTtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCBhbHBoYSApIHtcblxuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdFx0YWRkVG9SZW5kZXJMaXN0OiBhZGRUb1JlbmRlckxpc3QsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xCaW5kaW5nU3RhdGVzKCBnbCwgYXR0cmlidXRlcyApIHtcblxuXHRjb25zdCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX0FUVFJJQlMgKTtcblxuXHRjb25zdCBiaW5kaW5nU3RhdGVzID0ge307XG5cblx0Y29uc3QgZGVmYXVsdFN0YXRlID0gY3JlYXRlQmluZGluZ1N0YXRlKCBudWxsICk7XG5cdGxldCBjdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XG5cdGxldCBmb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBvYmplY3QsIG1hdGVyaWFsLCBwcm9ncmFtLCBnZW9tZXRyeSwgaW5kZXggKSB7XG5cblx0XHRsZXQgdXBkYXRlQnVmZmVycyA9IGZhbHNlO1xuXG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRCaW5kaW5nU3RhdGUoIGdlb21ldHJ5LCBwcm9ncmFtLCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCBjdXJyZW50U3RhdGUgIT09IHN0YXRlICkge1xuXG5cdFx0XHRjdXJyZW50U3RhdGUgPSBzdGF0ZTtcblx0XHRcdGJpbmRWZXJ0ZXhBcnJheU9iamVjdCggY3VycmVudFN0YXRlLm9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0dXBkYXRlQnVmZmVycyA9IG5lZWRzVXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApO1xuXG5cdFx0aWYgKCB1cGRhdGVCdWZmZXJzICkgc2F2ZUNhY2hlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGluZGV4LCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGVCdWZmZXJzIHx8IGZvcmNlVXBkYXRlICkge1xuXG5cdFx0XHRmb3JjZVVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRzZXR1cFZlcnRleEF0dHJpYnV0ZXMoIG9iamVjdCwgbWF0ZXJpYWwsIHByb2dyYW0sIGdlb21ldHJ5ICk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Z2wuYmluZEJ1ZmZlciggZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGF0dHJpYnV0ZXMuZ2V0KCBpbmRleCApLmJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZVZlcnRleEFycmF5T2JqZWN0KCkge1xuXG5cdFx0cmV0dXJuIGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRWZXJ0ZXhBcnJheU9iamVjdCggdmFvICkge1xuXG5cdFx0cmV0dXJuIGdsLmJpbmRWZXJ0ZXhBcnJheSggdmFvICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlbGV0ZVZlcnRleEFycmF5T2JqZWN0KCB2YW8gKSB7XG5cblx0XHRyZXR1cm4gZ2wuZGVsZXRlVmVydGV4QXJyYXkoIHZhbyApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRCaW5kaW5nU3RhdGUoIGdlb21ldHJ5LCBwcm9ncmFtLCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IHdpcmVmcmFtZSA9ICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICk7XG5cblx0XHRsZXQgcHJvZ3JhbU1hcCA9IGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0XHRpZiAoIHByb2dyYW1NYXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbU1hcCA9IHt9O1xuXHRcdFx0YmluZGluZ1N0YXRlc1sgZ2VvbWV0cnkuaWQgXSA9IHByb2dyYW1NYXA7XG5cblx0XHR9XG5cblx0XHRsZXQgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF07XG5cblx0XHRpZiAoIHN0YXRlTWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN0YXRlTWFwID0ge307XG5cdFx0XHRwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF0gPSBzdGF0ZU1hcDtcblxuXHRcdH1cblxuXHRcdGxldCBzdGF0ZSA9IHN0YXRlTWFwWyB3aXJlZnJhbWUgXTtcblxuXHRcdGlmICggc3RhdGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c3RhdGUgPSBjcmVhdGVCaW5kaW5nU3RhdGUoIGNyZWF0ZVZlcnRleEFycmF5T2JqZWN0KCkgKTtcblx0XHRcdHN0YXRlTWFwWyB3aXJlZnJhbWUgXSA9IHN0YXRlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHN0YXRlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVCaW5kaW5nU3RhdGUoIHZhbyApIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBbXTtcblx0XHRjb25zdCBlbmFibGVkQXR0cmlidXRlcyA9IFtdO1xuXHRcdGNvbnN0IGF0dHJpYnV0ZURpdmlzb3JzID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzOyBpICsrICkge1xuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cdFx0XHRhdHRyaWJ1dGVEaXZpc29yc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cblx0XHRcdC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IG9uIG5vbi1WQU8gc3VwcG9ydCBicm93c2VyXG5cdFx0XHRnZW9tZXRyeTogbnVsbCxcblx0XHRcdHByb2dyYW06IG51bGwsXG5cdFx0XHR3aXJlZnJhbWU6IGZhbHNlLFxuXG5cdFx0XHRuZXdBdHRyaWJ1dGVzOiBuZXdBdHRyaWJ1dGVzLFxuXHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXM6IGVuYWJsZWRBdHRyaWJ1dGVzLFxuXHRcdFx0YXR0cmlidXRlRGl2aXNvcnM6IGF0dHJpYnV0ZURpdmlzb3JzLFxuXHRcdFx0b2JqZWN0OiB2YW8sXG5cdFx0XHRhdHRyaWJ1dGVzOiB7fSxcblx0XHRcdGluZGV4OiBudWxsXG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBuZWVkc1VwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgcHJvZ3JhbSwgaW5kZXggKSB7XG5cblx0XHRjb25zdCBjYWNoZWRBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLmF0dHJpYnV0ZXM7XG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdGxldCBhdHRyaWJ1dGVzTnVtID0gMDtcblxuXHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIHByb2dyYW1BdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uID49IDAgKSB7XG5cblx0XHRcdFx0Y29uc3QgY2FjaGVkQXR0cmlidXRlID0gY2FjaGVkQXR0cmlidXRlc1sgbmFtZSBdO1xuXHRcdFx0XHRsZXQgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZU1hdHJpeCcgJiYgb2JqZWN0Lmluc3RhbmNlTWF0cml4ICkgZ2VvbWV0cnlBdHRyaWJ1dGUgPSBvYmplY3QuaW5zdGFuY2VNYXRyaXg7XG5cdFx0XHRcdFx0aWYgKCBuYW1lID09PSAnaW5zdGFuY2VDb2xvcicgJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZUNvbG9yO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuIHRydWU7XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGUuYXR0cmlidXRlICE9PSBnZW9tZXRyeUF0dHJpYnV0ZSApIHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgJiYgY2FjaGVkQXR0cmlidXRlLmRhdGEgIT09IGdlb21ldHJ5QXR0cmlidXRlLmRhdGEgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzTnVtICsrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5hdHRyaWJ1dGVzTnVtICE9PSBhdHRyaWJ1dGVzTnVtICkgcmV0dXJuIHRydWU7XG5cblx0XHRpZiAoIGN1cnJlbnRTdGF0ZS5pbmRleCAhPT0gaW5kZXggKSByZXR1cm4gdHJ1ZTtcblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2F2ZUNhY2hlKCBvYmplY3QsIGdlb21ldHJ5LCBwcm9ncmFtLCBpbmRleCApIHtcblxuXHRcdGNvbnN0IGNhY2hlID0ge307XG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cdFx0bGV0IGF0dHJpYnV0ZXNOdW0gPSAwO1xuXG5cdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gcHJvZ3JhbUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gPj0gMCApIHtcblxuXHRcdFx0XHRsZXQgYXR0cmlidXRlID0gYXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZU1hdHJpeCcgJiYgb2JqZWN0Lmluc3RhbmNlTWF0cml4ICkgYXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlTWF0cml4O1xuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlQ29sb3InICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICkgYXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSB7fTtcblx0XHRcdFx0ZGF0YS5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG5cblx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmRhdGEgKSB7XG5cblx0XHRcdFx0XHRkYXRhLmRhdGEgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FjaGVbIG5hbWUgXSA9IGRhdGE7XG5cblx0XHRcdFx0YXR0cmlidXRlc051bSArKztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y3VycmVudFN0YXRlLmF0dHJpYnV0ZXMgPSBjYWNoZTtcblx0XHRjdXJyZW50U3RhdGUuYXR0cmlidXRlc051bSA9IGF0dHJpYnV0ZXNOdW07XG5cblx0XHRjdXJyZW50U3RhdGUuaW5kZXggPSBpbmRleDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdEF0dHJpYnV0ZXMoKSB7XG5cblx0XHRjb25zdCBuZXdBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLm5ld0F0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbmV3QXR0cmlidXRlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0bmV3QXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIDAgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0Y29uc3QgbmV3QXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5uZXdBdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IGVuYWJsZWRBdHRyaWJ1dGVzID0gY3VycmVudFN0YXRlLmVuYWJsZWRBdHRyaWJ1dGVzO1xuXHRcdGNvbnN0IGF0dHJpYnV0ZURpdmlzb3JzID0gY3VycmVudFN0YXRlLmF0dHJpYnV0ZURpdmlzb3JzO1xuXG5cdFx0bmV3QXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPT09IDAgKSB7XG5cblx0XHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCBhdHRyaWJ1dGUgKTtcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSAhPT0gbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Z2wudmVydGV4QXR0cmliRGl2aXNvciggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICk7XG5cdFx0XHRhdHRyaWJ1dGVEaXZpc29yc1sgYXR0cmlidXRlIF0gPSBtZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcygpIHtcblxuXHRcdGNvbnN0IG5ld0F0dHJpYnV0ZXMgPSBjdXJyZW50U3RhdGUubmV3QXR0cmlidXRlcztcblx0XHRjb25zdCBlbmFibGVkQXR0cmlidXRlcyA9IGN1cnJlbnRTdGF0ZS5lbmFibGVkQXR0cmlidXRlcztcblxuXHRcdGZvciAoIGxldCBpID0gMCwgaWwgPSBlbmFibGVkQXR0cmlidXRlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgaSBdICE9PSBuZXdBdHRyaWJ1dGVzWyBpIF0gKSB7XG5cblx0XHRcdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCBpICk7XG5cdFx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHZlcnRleEF0dHJpYlBvaW50ZXIoIGluZGV4LCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUsIG9mZnNldCwgaW50ZWdlciApIHtcblxuXHRcdGlmICggaW50ZWdlciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wudmVydGV4QXR0cmliSVBvaW50ZXIoIGluZGV4LCBzaXplLCB0eXBlLCBzdHJpZGUsIG9mZnNldCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlciggaW5kZXgsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwVmVydGV4QXR0cmlidXRlcyggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnkgKSB7XG5cblx0XHRpbml0QXR0cmlidXRlcygpO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdGNvbnN0IHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRjb25zdCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSBtYXRlcmlhbC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzO1xuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcyApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbUF0dHJpYnV0ZSA9IHByb2dyYW1BdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiA+PSAwICkge1xuXG5cdFx0XHRcdGxldCBnZW9tZXRyeUF0dHJpYnV0ZSA9IGdlb21ldHJ5QXR0cmlidXRlc1sgbmFtZSBdO1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyAmJiBvYmplY3QuaW5zdGFuY2VNYXRyaXggKSBnZW9tZXRyeUF0dHJpYnV0ZSA9IG9iamVjdC5pbnN0YW5jZU1hdHJpeDtcblx0XHRcdFx0XHRpZiAoIG5hbWUgPT09ICdpbnN0YW5jZUNvbG9yJyAmJiBvYmplY3QuaW5zdGFuY2VDb2xvciApIGdlb21ldHJ5QXR0cmlidXRlID0gb2JqZWN0Lmluc3RhbmNlQ29sb3I7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnlBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG5vcm1hbGl6ZWQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5ub3JtYWxpemVkO1xuXHRcdFx0XHRcdGNvbnN0IHNpemUgPSBnZW9tZXRyeUF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdFx0XHRcdGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeUF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0Ly8gVE9ETyBBdHRyaWJ1dGUgbWF5IG5vdCBiZSBhdmFpbGFibGUgb24gY29udGV4dCByZXN0b3JlXG5cblx0XHRcdFx0XHRpZiAoIGF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkgY29udGludWU7XG5cblx0XHRcdFx0XHRjb25zdCBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyO1xuXHRcdFx0XHRcdGNvbnN0IHR5cGUgPSBhdHRyaWJ1dGUudHlwZTtcblx0XHRcdFx0XHRjb25zdCBieXRlc1BlckVsZW1lbnQgPSBhdHRyaWJ1dGUuYnl0ZXNQZXJFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gY2hlY2sgZm9yIGludGVnZXIgYXR0cmlidXRlc1xuXG5cdFx0XHRcdFx0Y29uc3QgaW50ZWdlciA9ICggdHlwZSA9PT0gZ2wuSU5UIHx8IHR5cGUgPT09IGdsLlVOU0lHTkVEX0lOVCB8fCBnZW9tZXRyeUF0dHJpYnV0ZS5ncHVUeXBlID09PSBJbnRUeXBlICk7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG5cdFx0XHRcdFx0XHRjb25zdCBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YS5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksIGRhdGEubWVzaFBlckF0dHJpYnV0ZSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggIT09IHRydWUgJiYgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvblNpemU7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRlbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdsLmJpbmRCdWZmZXIoIGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZlcnRleEF0dHJpYlBvaW50ZXIoXG5cdFx0XHRcdFx0XHRcdFx0cHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiArIGksXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAvIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGUsXG5cdFx0XHRcdFx0XHRcdFx0bm9ybWFsaXplZCxcblx0XHRcdFx0XHRcdFx0XHRzdHJpZGUgKiBieXRlc1BlckVsZW1lbnQsXG5cdFx0XHRcdFx0XHRcdFx0KCBvZmZzZXQgKyAoIHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSApICogaSApICogYnl0ZXNQZXJFbGVtZW50LFxuXHRcdFx0XHRcdFx0XHRcdGludGVnZXJcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZS5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpLCBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAhPT0gdHJ1ZSAmJiBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb25TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uICsgaSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnbC5iaW5kQnVmZmVyKCBnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlciApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZTsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuXHRcdFx0XHRcdFx0XHRcdHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24gKyBpLFxuXHRcdFx0XHRcdFx0XHRcdHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSxcblx0XHRcdFx0XHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRcdFx0XHRcdG5vcm1hbGl6ZWQsXG5cdFx0XHRcdFx0XHRcdFx0c2l6ZSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHQoIHNpemUgLyBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uU2l6ZSApICogaSAqIGJ5dGVzUGVyRWxlbWVudCxcblx0XHRcdFx0XHRcdFx0XHRpbnRlZ2VyXG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzWyBuYW1lIF07XG5cblx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHZhbHVlLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0Z2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLmxvY2F0aW9uLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0XHRnbC52ZXJ0ZXhBdHRyaWIzZnYoIHByb2dyYW1BdHRyaWJ1dGUubG9jYXRpb24sIHZhbHVlICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjRmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdGdsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZS5sb2NhdGlvbiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlc2V0KCk7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHByb2dyYW1JZCBpbiBwcm9ncmFtTWFwICkge1xuXG5cdFx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdFx0Zm9yICggY29uc3Qgd2lyZWZyYW1lIGluIHN0YXRlTWFwICkge1xuXG5cdFx0XHRcdFx0ZGVsZXRlVmVydGV4QXJyYXlPYmplY3QoIHN0YXRlTWFwWyB3aXJlZnJhbWUgXS5vYmplY3QgKTtcblxuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBwcm9ncmFtTWFwWyBwcm9ncmFtSWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgYmluZGluZ1N0YXRlc1sgZ2VvbWV0cnlJZCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSggZ2VvbWV0cnkgKSB7XG5cblx0XHRpZiAoIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF0gPT09IHVuZGVmaW5lZCApIHJldHVybjtcblxuXHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Zm9yICggY29uc3QgcHJvZ3JhbUlkIGluIHByb2dyYW1NYXAgKSB7XG5cblx0XHRcdGNvbnN0IHN0YXRlTWFwID0gcHJvZ3JhbU1hcFsgcHJvZ3JhbUlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW1JZCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGVsZXRlIGJpbmRpbmdTdGF0ZXNbIGdlb21ldHJ5LmlkIF07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VTdGF0ZXNPZlByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRmb3IgKCBjb25zdCBnZW9tZXRyeUlkIGluIGJpbmRpbmdTdGF0ZXMgKSB7XG5cblx0XHRcdGNvbnN0IHByb2dyYW1NYXAgPSBiaW5kaW5nU3RhdGVzWyBnZW9tZXRyeUlkIF07XG5cblx0XHRcdGlmICggcHJvZ3JhbU1hcFsgcHJvZ3JhbS5pZCBdID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0Y29uc3Qgc3RhdGVNYXAgPSBwcm9ncmFtTWFwWyBwcm9ncmFtLmlkIF07XG5cblx0XHRcdGZvciAoIGNvbnN0IHdpcmVmcmFtZSBpbiBzdGF0ZU1hcCApIHtcblxuXHRcdFx0XHRkZWxldGVWZXJ0ZXhBcnJheU9iamVjdCggc3RhdGVNYXBbIHdpcmVmcmFtZSBdLm9iamVjdCApO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdGF0ZU1hcFsgd2lyZWZyYW1lIF07XG5cblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIHByb2dyYW1NYXBbIHByb2dyYW0uaWQgXTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRyZXNldERlZmF1bHRTdGF0ZSgpO1xuXHRcdGZvcmNlVXBkYXRlID0gdHJ1ZTtcblxuXHRcdGlmICggY3VycmVudFN0YXRlID09PSBkZWZhdWx0U3RhdGUgKSByZXR1cm47XG5cblx0XHRjdXJyZW50U3RhdGUgPSBkZWZhdWx0U3RhdGU7XG5cdFx0YmluZFZlcnRleEFycmF5T2JqZWN0KCBjdXJyZW50U3RhdGUub2JqZWN0ICk7XG5cblx0fVxuXG5cdC8vIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5XG5cblx0ZnVuY3Rpb24gcmVzZXREZWZhdWx0U3RhdGUoKSB7XG5cblx0XHRkZWZhdWx0U3RhdGUuZ2VvbWV0cnkgPSBudWxsO1xuXHRcdGRlZmF1bHRTdGF0ZS5wcm9ncmFtID0gbnVsbDtcblx0XHRkZWZhdWx0U3RhdGUud2lyZWZyYW1lID0gZmFsc2U7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0cmVzZXQ6IHJlc2V0LFxuXHRcdHJlc2V0RGVmYXVsdFN0YXRlOiByZXNldERlZmF1bHRTdGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlLFxuXHRcdHJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5OiByZWxlYXNlU3RhdGVzT2ZHZW9tZXRyeSxcblx0XHRyZWxlYXNlU3RhdGVzT2ZQcm9ncmFtOiByZWxlYXNlU3RhdGVzT2ZQcm9ncmFtLFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzOiBkaXNhYmxlVW51c2VkQXR0cmlidXRlc1xuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xCdWZmZXJSZW5kZXJlciggZ2wsIGV4dGVuc2lvbnMsIGluZm8gKSB7XG5cblx0bGV0IG1vZGU7XG5cblx0ZnVuY3Rpb24gc2V0TW9kZSggdmFsdWUgKSB7XG5cblx0XHRtb2RlID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlciggc3RhcnQsIGNvdW50ICkge1xuXG5cdFx0Z2wuZHJhd0FycmF5cyggbW9kZSwgc3RhcnQsIGNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIDEgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVySW5zdGFuY2VzKCBzdGFydCwgY291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggcHJpbWNvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Z2wuZHJhd0FycmF5c0luc3RhbmNlZCggbW9kZSwgc3RhcnQsIGNvdW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhdyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXHRcdGV4dGVuc2lvbi5tdWx0aURyYXdBcnJheXNXRUJHTCggbW9kZSwgc3RhcnRzLCAwLCBjb3VudHMsIDAsIGRyYXdDb3VudCApO1xuXG5cdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgZHJhd0NvdW50OyBpICsrICkge1xuXG5cdFx0XHRlbGVtZW50Q291bnQgKz0gY291bnRzWyBpIF07XG5cblx0XHR9XG5cblx0XHRpbmZvLnVwZGF0ZSggZWxlbWVudENvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhd0luc3RhbmNlcyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBkcmF3Q291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX211bHRpX2RyYXcnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiA9PT0gbnVsbCApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc3RhcnRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRyZW5kZXJJbnN0YW5jZXMoIHN0YXJ0c1sgaSBdLCBjb3VudHNbIGkgXSwgcHJpbWNvdW50WyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZXh0ZW5zaW9uLm11bHRpRHJhd0FycmF5c0luc3RhbmNlZFdFQkdMKCBtb2RlLCBzdGFydHMsIDAsIGNvdW50cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdICogcHJpbWNvdW50WyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xuXHR0aGlzLnJlbmRlckluc3RhbmNlcyA9IHJlbmRlckluc3RhbmNlcztcblx0dGhpcy5yZW5kZXJNdWx0aURyYXcgPSByZW5kZXJNdWx0aURyYXc7XG5cdHRoaXMucmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzID0gcmVuZGVyTXVsdGlEcmF3SW5zdGFuY2VzO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQ2FwYWJpbGl0aWVzKCBnbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycywgdXRpbHMgKSB7XG5cblx0bGV0IG1heEFuaXNvdHJvcHk7XG5cblx0ZnVuY3Rpb24gZ2V0TWF4QW5pc290cm9weSgpIHtcblxuXHRcdGlmICggbWF4QW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKTtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlciggZXh0ZW5zaW9uLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZUZvcm1hdFJlYWRhYmxlKCB0ZXh0dXJlRm9ybWF0ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlRm9ybWF0ICE9PSBSR0JBRm9ybWF0ICYmIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSAhPT0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5JTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX0ZPUk1BVCApICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZVR5cGVSZWFkYWJsZSggdGV4dHVyZVR5cGUgKSB7XG5cblx0XHRjb25zdCBoYWxmRmxvYXRTdXBwb3J0ZWRCeUV4dCA9ICggdGV4dHVyZVR5cGUgPT09IEhhbGZGbG9hdFR5cGUgKSAmJiAoIGV4dGVuc2lvbnMuaGFzKCAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyApIHx8IGV4dGVuc2lvbnMuaGFzKCAnRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcgKSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlVHlwZSAhPT0gVW5zaWduZWRCeXRlVHlwZSAmJiB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApICE9PSBnbC5nZXRQYXJhbWV0ZXIoIGdsLklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfVFlQRSApICYmIC8vIEVkZ2UgYW5kIENocm9tZSBNYWMgPCA1MiAoIzk1MTMpXG5cdFx0XHR0ZXh0dXJlVHlwZSAhPT0gRmxvYXRUeXBlICYmICEgaGFsZkZsb2F0U3VwcG9ydGVkQnlFeHQgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApIHtcblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnaGlnaHAnICkge1xuXG5cdFx0XHRpZiAoIGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuVkVSVEVYX1NIQURFUiwgZ2wuSElHSF9GTE9BVCApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdFx0Z2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkhJR0hfRkxPQVQgKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnaGlnaHAnO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByZWNpc2lvbiA9ICdtZWRpdW1wJztcblxuXHRcdH1cblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCBnbC5WRVJURVhfU0hBREVSLCBnbC5NRURJVU1fRkxPQVQgKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHRcdGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5NRURJVU1fRkxPQVQgKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnbWVkaXVtcCc7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiAnbG93cCc7XG5cblx0fVxuXG5cdGxldCBwcmVjaXNpb24gPSBwYXJhbWV0ZXJzLnByZWNpc2lvbiAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVjaXNpb24gOiAnaGlnaHAnO1xuXHRjb25zdCBtYXhQcmVjaXNpb24gPSBnZXRNYXhQcmVjaXNpb24oIHByZWNpc2lvbiApO1xuXG5cdGlmICggbWF4UHJlY2lzaW9uICE9PSBwcmVjaXNpb24gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOicsIHByZWNpc2lvbiwgJ25vdCBzdXBwb3J0ZWQsIHVzaW5nJywgbWF4UHJlY2lzaW9uLCAnaW5zdGVhZC4nICk7XG5cdFx0cHJlY2lzaW9uID0gbWF4UHJlY2lzaW9uO1xuXG5cdH1cblxuXHRjb25zdCBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xuXHRjb25zdCByZXZlcnNlRGVwdGhCdWZmZXIgPSBwYXJhbWV0ZXJzLnJldmVyc2VEZXB0aEJ1ZmZlciA9PT0gdHJ1ZSAmJiBleHRlbnNpb25zLmhhcyggJ0VYVF9jbGlwX2NvbnRyb2wnICk7XG5cblx0Y29uc3QgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTICk7XG5cdGNvbnN0IG1heFZlcnRleFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblx0Y29uc3QgbWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9URVhUVVJFX1NJWkUgKTtcblx0Y29uc3QgbWF4Q3ViZW1hcFNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUgKTtcblxuXHRjb25zdCBtYXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkVSVEVYX0FUVFJJQlMgKTtcblx0Y29uc3QgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTICk7XG5cdGNvbnN0IG1heFZhcnlpbmdzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfVkFSWUlOR19WRUNUT1JTICk7XG5cdGNvbnN0IG1heEZyYWdtZW50VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIGdsLk1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMgKTtcblxuXHRjb25zdCB2ZXJ0ZXhUZXh0dXJlcyA9IG1heFZlcnRleFRleHR1cmVzID4gMDtcblxuXHRjb25zdCBtYXhTYW1wbGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5NQVhfU0FNUExFUyApO1xuXG5cdHJldHVybiB7XG5cblx0XHRpc1dlYkdMMjogdHJ1ZSwgLy8ga2VlcGluZyB0aGlzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG5cdFx0Z2V0TWF4QW5pc290cm9weTogZ2V0TWF4QW5pc290cm9weSxcblx0XHRnZXRNYXhQcmVjaXNpb246IGdldE1heFByZWNpc2lvbixcblxuXHRcdHRleHR1cmVGb3JtYXRSZWFkYWJsZTogdGV4dHVyZUZvcm1hdFJlYWRhYmxlLFxuXHRcdHRleHR1cmVUeXBlUmVhZGFibGU6IHRleHR1cmVUeXBlUmVhZGFibGUsXG5cblx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXHRcdHJldmVyc2VEZXB0aEJ1ZmZlcjogcmV2ZXJzZURlcHRoQnVmZmVyLFxuXG5cdFx0bWF4VGV4dHVyZXM6IG1heFRleHR1cmVzLFxuXHRcdG1heFZlcnRleFRleHR1cmVzOiBtYXhWZXJ0ZXhUZXh0dXJlcyxcblx0XHRtYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsXG5cdFx0bWF4Q3ViZW1hcFNpemU6IG1heEN1YmVtYXBTaXplLFxuXG5cdFx0bWF4QXR0cmlidXRlczogbWF4QXR0cmlidXRlcyxcblx0XHRtYXhWZXJ0ZXhVbmlmb3JtczogbWF4VmVydGV4VW5pZm9ybXMsXG5cdFx0bWF4VmFyeWluZ3M6IG1heFZhcnlpbmdzLFxuXHRcdG1heEZyYWdtZW50VW5pZm9ybXM6IG1heEZyYWdtZW50VW5pZm9ybXMsXG5cblx0XHR2ZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsXG5cblx0XHRtYXhTYW1wbGVzOiBtYXhTYW1wbGVzXG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTENsaXBwaW5nKCBwcm9wZXJ0aWVzICkge1xuXG5cdGNvbnN0IHNjb3BlID0gdGhpcztcblxuXHRsZXQgZ2xvYmFsU3RhdGUgPSBudWxsLFxuXHRcdG51bUdsb2JhbFBsYW5lcyA9IDAsXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2U7XG5cblx0Y29uc3QgcGxhbmUgPSBuZXcgUGxhbmUoKSxcblx0XHR2aWV3Tm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKSxcblxuXHRcdHVuaWZvcm0gPSB7IHZhbHVlOiBudWxsLCBuZWVkc1VwZGF0ZTogZmFsc2UgfTtcblxuXHR0aGlzLnVuaWZvcm0gPSB1bmlmb3JtO1xuXHR0aGlzLm51bVBsYW5lcyA9IDA7XG5cdHRoaXMubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoIHBsYW5lcywgZW5hYmxlTG9jYWxDbGlwcGluZyApIHtcblxuXHRcdGNvbnN0IGVuYWJsZWQgPVxuXHRcdFx0cGxhbmVzLmxlbmd0aCAhPT0gMCB8fFxuXHRcdFx0ZW5hYmxlTG9jYWxDbGlwcGluZyB8fFxuXHRcdFx0Ly8gZW5hYmxlIHN0YXRlIG9mIHByZXZpb3VzIGZyYW1lIC0gdGhlIGNsaXBwaW5nIGNvZGUgaGFzIHRvXG5cdFx0XHQvLyBydW4gYW5vdGhlciBmcmFtZSBpbiBvcmRlciB0byByZXNldCB0aGUgc3RhdGU6XG5cdFx0XHRudW1HbG9iYWxQbGFuZXMgIT09IDAgfHxcblx0XHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBlbmFibGVMb2NhbENsaXBwaW5nO1xuXG5cdFx0bnVtR2xvYmFsUGxhbmVzID0gcGxhbmVzLmxlbmd0aDtcblxuXHRcdHJldHVybiBlbmFibGVkO1xuXG5cdH07XG5cblx0dGhpcy5iZWdpblNoYWRvd3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gdHJ1ZTtcblx0XHRwcm9qZWN0UGxhbmVzKCBudWxsICk7XG5cblx0fTtcblxuXHR0aGlzLmVuZFNoYWRvd3MgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZW5kZXJpbmdTaGFkb3dzID0gZmFsc2U7XG5cblx0fTtcblxuXHR0aGlzLnNldEdsb2JhbFN0YXRlID0gZnVuY3Rpb24gKCBwbGFuZXMsIGNhbWVyYSApIHtcblxuXHRcdGdsb2JhbFN0YXRlID0gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIDAgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U3RhdGUgPSBmdW5jdGlvbiAoIG1hdGVyaWFsLCBjYW1lcmEsIHVzZUNhY2hlICkge1xuXG5cdFx0Y29uc3QgcGxhbmVzID0gbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMsXG5cdFx0XHRjbGlwSW50ZXJzZWN0aW9uID0gbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbixcblx0XHRcdGNsaXBTaGFkb3dzID0gbWF0ZXJpYWwuY2xpcFNoYWRvd3M7XG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGlmICggISBsb2NhbENsaXBwaW5nRW5hYmxlZCB8fCBwbGFuZXMgPT09IG51bGwgfHwgcGxhbmVzLmxlbmd0aCA9PT0gMCB8fCByZW5kZXJpbmdTaGFkb3dzICYmICEgY2xpcFNoYWRvd3MgKSB7XG5cblx0XHRcdC8vIHRoZXJlJ3Mgbm8gbG9jYWwgY2xpcHBpbmdcblxuXHRcdFx0aWYgKCByZW5kZXJpbmdTaGFkb3dzICkge1xuXG5cdFx0XHRcdC8vIHRoZXJlJ3Mgbm8gZ2xvYmFsIGNsaXBwaW5nXG5cblx0XHRcdFx0cHJvamVjdFBsYW5lcyggbnVsbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlc2V0R2xvYmFsU3RhdGUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3Qgbkdsb2JhbCA9IHJlbmRlcmluZ1NoYWRvd3MgPyAwIDogbnVtR2xvYmFsUGxhbmVzLFxuXHRcdFx0XHRsR2xvYmFsID0gbkdsb2JhbCAqIDQ7XG5cblx0XHRcdGxldCBkc3RBcnJheSA9IG1hdGVyaWFsUHJvcGVydGllcy5jbGlwcGluZ1N0YXRlIHx8IG51bGw7XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTsgLy8gZW5zdXJlIHVuaXF1ZSBzdGF0ZVxuXG5cdFx0XHRkc3RBcnJheSA9IHByb2plY3RQbGFuZXMoIHBsYW5lcywgY2FtZXJhLCBsR2xvYmFsLCB1c2VDYWNoZSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IGxHbG9iYWw7ICsrIGkgKSB7XG5cblx0XHRcdFx0ZHN0QXJyYXlbIGkgXSA9IGdsb2JhbFN0YXRlWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmNsaXBwaW5nU3RhdGUgPSBkc3RBcnJheTtcblx0XHRcdHRoaXMubnVtSW50ZXJzZWN0aW9uID0gY2xpcEludGVyc2VjdGlvbiA/IHRoaXMubnVtUGxhbmVzIDogMDtcblx0XHRcdHRoaXMubnVtUGxhbmVzICs9IG5HbG9iYWw7XG5cblx0XHR9XG5cblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHJlc2V0R2xvYmFsU3RhdGUoKSB7XG5cblx0XHRpZiAoIHVuaWZvcm0udmFsdWUgIT09IGdsb2JhbFN0YXRlICkge1xuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZ2xvYmFsU3RhdGU7XG5cdFx0XHR1bmlmb3JtLm5lZWRzVXBkYXRlID0gbnVtR2xvYmFsUGxhbmVzID4gMDtcblxuXHRcdH1cblxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG51bUdsb2JhbFBsYW5lcztcblx0XHRzY29wZS5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgZHN0T2Zmc2V0LCBza2lwVHJhbnNmb3JtICkge1xuXG5cdFx0Y29uc3QgblBsYW5lcyA9IHBsYW5lcyAhPT0gbnVsbCA/IHBsYW5lcy5sZW5ndGggOiAwO1xuXHRcdGxldCBkc3RBcnJheSA9IG51bGw7XG5cblx0XHRpZiAoIG5QbGFuZXMgIT09IDAgKSB7XG5cblx0XHRcdGRzdEFycmF5ID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0aWYgKCBza2lwVHJhbnNmb3JtICE9PSB0cnVlIHx8IGRzdEFycmF5ID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IGZsYXRTaXplID0gZHN0T2Zmc2V0ICsgblBsYW5lcyAqIDQsXG5cdFx0XHRcdFx0dmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRcdFx0dmlld05vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRpZiAoIGRzdEFycmF5ID09PSBudWxsIHx8IGRzdEFycmF5Lmxlbmd0aCA8IGZsYXRTaXplICkge1xuXG5cdFx0XHRcdFx0ZHN0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KCBmbGF0U2l6ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGk0ID0gZHN0T2Zmc2V0OyBpICE9PSBuUGxhbmVzOyArKyBpLCBpNCArPSA0ICkge1xuXG5cdFx0XHRcdFx0cGxhbmUuY29weSggcGxhbmVzWyBpIF0gKS5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXgsIHZpZXdOb3JtYWxNYXRyaXggKTtcblxuXHRcdFx0XHRcdHBsYW5lLm5vcm1hbC50b0FycmF5KCBkc3RBcnJheSwgaTQgKTtcblx0XHRcdFx0XHRkc3RBcnJheVsgaTQgKyAzIF0gPSBwbGFuZS5jb25zdGFudDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGRzdEFycmF5O1xuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzY29wZS5udW1QbGFuZXMgPSBuUGxhbmVzO1xuXHRcdHNjb3BlLm51bUludGVyc2VjdGlvbiA9IDA7XG5cblx0XHRyZXR1cm4gZHN0QXJyYXk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQ3ViZU1hcHMoIHJlbmRlcmVyICkge1xuXG5cdGxldCBjdWJlbWFwcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gbWFwVGV4dHVyZU1hcHBpbmcoIHRleHR1cmUsIG1hcHBpbmcgKSB7XG5cblx0XHRpZiAoIG1hcHBpbmcgPT09IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nICkge1xuXG5cdFx0XHR0ZXh0dXJlLm1hcHBpbmcgPSBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0dGV4dHVyZS5tYXBwaW5nID0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldCggdGV4dHVyZSApIHtcblxuXHRcdGlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc3QgbWFwcGluZyA9IHRleHR1cmUubWFwcGluZztcblxuXHRcdFx0aWYgKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApIHtcblxuXHRcdFx0XHRpZiAoIGN1YmVtYXBzLmhhcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgY3ViZW1hcCA9IGN1YmVtYXBzLmdldCggdGV4dHVyZSApLnRleHR1cmU7XG5cdFx0XHRcdFx0cmV0dXJuIG1hcFRleHR1cmVNYXBwaW5nKCBjdWJlbWFwLCB0ZXh0dXJlLm1hcHBpbmcgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc3QgaW1hZ2UgPSB0ZXh0dXJlLmltYWdlO1xuXG5cdFx0XHRcdFx0aWYgKCBpbWFnZSAmJiBpbWFnZS5oZWlnaHQgPiAwICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KCBpbWFnZS5oZWlnaHQgKTtcblx0XHRcdFx0XHRcdHJlbmRlclRhcmdldC5mcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSggcmVuZGVyZXIsIHRleHR1cmUgKTtcblx0XHRcdFx0XHRcdGN1YmVtYXBzLnNldCggdGV4dHVyZSwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRcdFx0XHRcdHJldHVybiBtYXBUZXh0dXJlTWFwcGluZyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHRleHR1cmUubWFwcGluZyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gaW1hZ2Ugbm90IHlldCByZWFkeS4gdHJ5IHRoZSBjb252ZXJzaW9uIG5leHQgZnJhbWVcblxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UgKTtcblxuXHRcdGNvbnN0IGN1YmVtYXAgPSBjdWJlbWFwcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdGlmICggY3ViZW1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjdWJlbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXAuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0Y3ViZW1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG5jb25zdCBMT0RfTUlOID0gNDtcblxuLy8gVGhlIHN0YW5kYXJkIGRldmlhdGlvbnMgKHJhZGlhbnMpIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXh0cmEgbWlwcy4gVGhlc2UgYXJlXG4vLyBjaG9zZW4gdG8gYXBwcm94aW1hdGUgYSBUcm93YnJpZGdlLVJlaXR6IGRpc3RyaWJ1dGlvbiBmdW5jdGlvbiB0aW1lcyB0aGVcbi8vIGdlb21ldHJpYyBzaGFkb3dpbmcgZnVuY3Rpb24uIFRoZXNlIHNpZ21hIHZhbHVlcyBzcXVhcmVkIG11c3QgbWF0Y2ggdGhlXG4vLyB2YXJpYW5jZSAjZGVmaW5lcyBpbiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQuZ2xzbC5qcy5cbmNvbnN0IEVYVFJBX0xPRF9TSUdNQSA9IFsgMC4xMjUsIDAuMjE1LCAwLjM1LCAwLjQ0NiwgMC41MjYsIDAuNTgyIF07XG5cbi8vIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgYmx1ciBmb3IgbG9vcC4gU21hbGxlciBzaWdtYXMgd2lsbCB1c2UgZmV3ZXJcbi8vIHNhbXBsZXMgYW5kIGV4aXQgZWFybHksIGJ1dCBub3QgcmVjb21waWxlIHRoZSBzaGFkZXIuXG5jb25zdCBNQVhfU0FNUExFUyA9IDIwO1xuXG5jb25zdCBfZmxhdENhbWVyYSA9IC8qQF9fUFVSRV9fKi8gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSgpO1xuY29uc3QgX2NsZWFyQ29sb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBDb2xvcigpO1xubGV0IF9vbGRUYXJnZXQgPSBudWxsO1xubGV0IF9vbGRBY3RpdmVDdWJlRmFjZSA9IDA7XG5sZXQgX29sZEFjdGl2ZU1pcG1hcExldmVsID0gMDtcbmxldCBfb2xkWHJFbmFibGVkID0gZmFsc2U7XG5cbi8vIEdvbGRlbiBSYXRpb1xuY29uc3QgUEhJID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5jb25zdCBJTlZfUEhJID0gMSAvIFBISTtcblxuLy8gVmVydGljZXMgb2YgYSBkb2RlY2FoZWRyb24gKGV4Y2VwdCB0aGUgb3Bwb3NpdGVzLCB3aGljaCByZXByZXNlbnQgdGhlXG4vLyBzYW1lIGF4aXMpLCB1c2VkIGFzIGF4aXMgZGlyZWN0aW9ucyBldmVubHkgc3ByZWFkIG9uIGEgc3BoZXJlLlxuY29uc3QgX2F4aXNEaXJlY3Rpb25zID0gW1xuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtIFBISSwgSU5WX1BISSwgMCApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCBQSEksIElOVl9QSEksIDAgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLSBJTlZfUEhJLCAwLCBQSEkgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggSU5WX1BISSwgMCwgUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIFBISSwgLSBJTlZfUEhJICksXG5cdC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoIDAsIFBISSwgSU5WX1BISSApLFxuXHQvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCAtMSwgMSwgLTEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgLTEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggLTEsIDEsIDEgKSxcblx0LypAX19QVVJFX18qLyBuZXcgVmVjdG9yMyggMSwgMSwgMSApIF07XG5cbmNvbnN0IF9vcmlnaW4gPSAvKkBfX1BVUkVfXyovIG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBnZW5lcmF0ZXMgYSBQcmVmaWx0ZXJlZCwgTWlwbWFwcGVkIFJhZGlhbmNlIEVudmlyb25tZW50IE1hcFxuICogKFBNUkVNKSBmcm9tIGEgY3ViZU1hcCBlbnZpcm9ubWVudCB0ZXh0dXJlLiBUaGlzIGFsbG93cyBkaWZmZXJlbnQgbGV2ZWxzIG9mXG4gKiBibHVyIHRvIGJlIHF1aWNrbHkgYWNjZXNzZWQgYmFzZWQgb24gbWF0ZXJpYWwgcm91Z2huZXNzLiBJdCBpcyBwYWNrZWQgaW50byBhXG4gKiBzcGVjaWFsIEN1YmVVViBmb3JtYXQgdGhhdCBhbGxvd3MgdXMgdG8gcGVyZm9ybSBjdXN0b20gaW50ZXJwb2xhdGlvbiBzbyB0aGF0XG4gKiB3ZSBjYW4gc3VwcG9ydCBub25saW5lYXIgZm9ybWF0cyBzdWNoIGFzIFJHQkUuIFVubGlrZSBhIHRyYWRpdGlvbmFsIG1pcG1hcFxuICogY2hhaW4sIGl0IG9ubHkgZ29lcyBkb3duIHRvIHRoZSBMT0RfTUlOIGxldmVsIChhYm92ZSksIGFuZCB0aGVuIGNyZWF0ZXMgZXh0cmFcbiAqIGV2ZW4gbW9yZSBmaWx0ZXJlZCAnbWlwcycgYXQgdGhlIHNhbWUgTE9EX01JTiByZXNvbHV0aW9uLCBhc3NvY2lhdGVkIHdpdGhcbiAqIGhpZ2hlciByb3VnaG5lc3MgbGV2ZWxzLiBJbiB0aGlzIHdheSB3ZSBtYWludGFpbiByZXNvbHV0aW9uIHRvIHNtb290aGx5XG4gKiBpbnRlcnBvbGF0ZSBkaWZmdXNlIGxpZ2h0aW5nIHdoaWxlIGxpbWl0aW5nIHNhbXBsaW5nIGNvbXB1dGF0aW9uLlxuICpcbiAqIFBhcGVyOiBGYXN0LCBBY2N1cmF0ZSBJbWFnZS1CYXNlZCBMaWdodGluZzpcbiAqIHtAbGluayBodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzE1eThyX1VwS2xVOVN2VjRJTGIwQzNxQ1BlY1M4cHZMei92aWV3fVxuKi9cbmNsYXNzIFBNUkVNR2VuZXJhdG9yIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBQTVJFTSBnZW5lcmF0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSB7V2ViR0xSZW5kZXJlcn0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvciggcmVuZGVyZXIgKSB7XG5cblx0XHR0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuXHRcdHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdHRoaXMuX2xvZE1heCA9IDA7XG5cdFx0dGhpcy5fY3ViZVNpemUgPSAwO1xuXHRcdHRoaXMuX2xvZFBsYW5lcyA9IFtdO1xuXHRcdHRoaXMuX3NpemVMb2RzID0gW107XG5cdFx0dGhpcy5fc2lnbWFzID0gW107XG5cblx0XHR0aGlzLl9ibHVyTWF0ZXJpYWwgPSBudWxsO1xuXHRcdHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IG51bGw7XG5cdFx0dGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9IG51bGw7XG5cblx0XHR0aGlzLl9jb21waWxlTWF0ZXJpYWwoIHRoaXMuX2JsdXJNYXRlcmlhbCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhIHN1cHBsaWVkIFNjZW5lLCB3aGljaCBjYW4gYmUgZmFzdGVyIHRoYW4gdXNpbmcgYW5cblx0ICogaW1hZ2UgaWYgbmV0d29ya2luZyBiYW5kd2lkdGggaXMgbG93LiBPcHRpb25hbCBzaWdtYSBzcGVjaWZpZXMgYSBibHVyIHJhZGl1c1xuXHQgKiBpbiByYWRpYW5zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHNjZW5lIGJlZm9yZSBQTVJFTSBnZW5lcmF0aW9uLiBPcHRpb25hbCBuZWFyXG5cdCAqIGFuZCBmYXIgcGxhbmVzIGVuc3VyZSB0aGUgc2NlbmUgaXMgcmVuZGVyZWQgaW4gaXRzIGVudGlyZXR5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge1NjZW5lfSBzY2VuZSAtIFRoZSBzY2VuZSB0byBiZSBjYXB0dXJlZC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtzaWdtYT0wXSAtIFRoZSBibHVyIHJhZGl1cyBpbiByYWRpYW5zLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW25lYXI9MC4xXSAtIFRoZSBuZWFyIHBsYW5lIGRpc3RhbmNlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2Zhcj0xMDBdIC0gVGhlIGZhciBwbGFuZSBkaXN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zaXplPTI1Nl0gLSBUaGUgdGV4dHVyZSBzaXplIG9mIHRoZSBQTVJFTS5cblx0ICogQHBhcmFtIHtWZWN0b3IzfSBbb3B0aW9ucy5yZW5kZXJUYXJnZXQ9b3JpZ2luXSAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaW50ZXJuYWwgY3ViZSBjYW1lcmEgdGhhdCByZW5kZXJzIHRoZSBzY2VuZS5cblx0ICogQHJldHVybiB7V2ViR0xSZW5kZXJUYXJnZXR9IFRoZSByZXN1bHRpbmcgUE1SRU0uXG5cdCAqL1xuXHRmcm9tU2NlbmUoIHNjZW5lLCBzaWdtYSA9IDAsIG5lYXIgPSAwLjEsIGZhciA9IDEwMCwgb3B0aW9ucyA9IHt9ICkge1xuXG5cdFx0Y29uc3Qge1xuXHRcdFx0c2l6ZSA9IDI1Nixcblx0XHRcdHBvc2l0aW9uID0gX29yaWdpbixcblx0XHR9ID0gb3B0aW9ucztcblxuXHRcdF9vbGRUYXJnZXQgPSB0aGlzLl9yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHRfb2xkQWN0aXZlQ3ViZUZhY2UgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdF9vbGRBY3RpdmVNaXBtYXBMZXZlbCA9IHRoaXMuX3JlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cdFx0X29sZFhyRW5hYmxlZCA9IHRoaXMuX3JlbmRlcmVyLnhyLmVuYWJsZWQ7XG5cblx0XHR0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR0aGlzLl9zZXRTaXplKCBzaXplICk7XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSB0aGlzLl9hbGxvY2F0ZVRhcmdldHMoKTtcblx0XHRjdWJlVVZSZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgPSB0cnVlO1xuXG5cdFx0dGhpcy5fc2NlbmVUb0N1YmVVViggc2NlbmUsIG5lYXIsIGZhciwgY3ViZVVWUmVuZGVyVGFyZ2V0LCBwb3NpdGlvbiApO1xuXG5cdFx0aWYgKCBzaWdtYSA+IDAgKSB7XG5cblx0XHRcdHRoaXMuX2JsdXIoIGN1YmVVVlJlbmRlclRhcmdldCwgMCwgMCwgc2lnbWEgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2FwcGx5UE1SRU0oIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHRoaXMuX2NsZWFudXAoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYW4gZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSXG5cdCAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGltYWdlIHNpemUgaXMgMWsgKDEwMjQgeCA1MTIpLFxuXHQgKiBhcyB0aGlzIG1hdGNoZXMgYmVzdCB3aXRoIHRoZSAyNTYgeCAyNTYgY3ViZW1hcCBvdXRwdXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VGV4dHVyZX0gZXF1aXJlY3Rhbmd1bGFyIC0gVGhlIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlIHRvIGJlIGNvbnZlcnRlZC5cblx0ICogQHBhcmFtIHs/V2ViR0xSZW5kZXJUYXJnZXR9IFtyZW5kZXJUYXJnZXQ9bnVsbF0gLSBUaGUgcmVuZGVyIHRhcmdldCB0byB1c2UuXG5cdCAqIEByZXR1cm4ge1dlYkdMUmVuZGVyVGFyZ2V0fSBUaGUgcmVzdWx0aW5nIFBNUkVNLlxuXHQgKi9cblx0ZnJvbUVxdWlyZWN0YW5ndWxhciggZXF1aXJlY3Rhbmd1bGFyLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBlcXVpcmVjdGFuZ3VsYXIsIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhbiBjdWJlbWFwIHRleHR1cmUsIHdoaWNoIGNhbiBiZSBlaXRoZXIgTERSXG5cdCAqIG9yIEhEUi4gVGhlIGlkZWFsIGlucHV0IGN1YmUgc2l6ZSBpcyAyNTYgeCAyNTYsXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICpcblx0ICogQHBhcmFtIHtUZXh0dXJlfSBjdWJlbWFwIC0gVGhlIGN1YmVtYXAgdGV4dHVyZSB0byBiZSBjb252ZXJ0ZWQuXG5cdCAqIEBwYXJhbSB7P1dlYkdMUmVuZGVyVGFyZ2V0fSBbcmVuZGVyVGFyZ2V0PW51bGxdIC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gdXNlLlxuXHQgKiBAcmV0dXJuIHtXZWJHTFJlbmRlclRhcmdldH0gVGhlIHJlc3VsdGluZyBQTVJFTS5cblx0ICovXG5cdGZyb21DdWJlbWFwKCBjdWJlbWFwLCByZW5kZXJUYXJnZXQgPSBudWxsICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2Zyb21UZXh0dXJlKCBjdWJlbWFwLCByZW5kZXJUYXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1jb21waWxlcyB0aGUgY3ViZW1hcCBzaGFkZXIuIFlvdSBjYW4gZ2V0IGZhc3RlciBzdGFydC11cCBieSBpbnZva2luZyB0aGlzIG1ldGhvZCBkdXJpbmdcblx0ICogeW91ciB0ZXh0dXJlJ3MgbmV0d29yayBmZXRjaCBmb3IgaW5jcmVhc2VkIGNvbmN1cnJlbmN5LlxuXHQgKi9cblx0Y29tcGlsZUN1YmVtYXBTaGFkZXIoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fY3ViZW1hcE1hdGVyaWFsID0gX2dldEN1YmVtYXBNYXRlcmlhbCgpO1xuXHRcdFx0dGhpcy5fY29tcGlsZU1hdGVyaWFsKCB0aGlzLl9jdWJlbWFwTWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0LyoqXG5cdCAqIFByZS1jb21waWxlcyB0aGUgZXF1aXJlY3Rhbmd1bGFyIHNoYWRlci4gWW91IGNhbiBnZXQgZmFzdGVyIHN0YXJ0LXVwIGJ5IGludm9raW5nIHRoaXMgbWV0aG9kIGR1cmluZ1xuXHQgKiB5b3VyIHRleHR1cmUncyBuZXR3b3JrIGZldGNoIGZvciBpbmNyZWFzZWQgY29uY3VycmVuY3kuXG5cdCAqL1xuXHRjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9lcXVpcmVjdE1hdGVyaWFsID0gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKTtcblx0XHRcdHRoaXMuX2NvbXBpbGVNYXRlcmlhbCggdGhpcy5fZXF1aXJlY3RNYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhlIFBNUkVNR2VuZXJhdG9yJ3MgaW50ZXJuYWwgbWVtb3J5LiBOb3RlIHRoYXQgUE1SRU1HZW5lcmF0b3IgaXMgYSBzdGF0aWMgY2xhc3MsXG5cdCAqIHNvIHlvdSBzaG91bGQgbm90IG5lZWQgbW9yZSB0aGFuIG9uZSBQTVJFTUdlbmVyYXRvciBvYmplY3QuIElmIHlvdSBkbywgY2FsbGluZyBkaXNwb3NlKCkgb25cblx0ICogb25lIG9mIHRoZW0gd2lsbCBjYXVzZSBhbnkgb3RoZXJzIHRvIGFsc28gYmVjb21lIHVudXNhYmxlLlxuXHQgKi9cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsICE9PSBudWxsICkgdGhpcy5fY3ViZW1hcE1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0XHRpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLl9lcXVpcmVjdE1hdGVyaWFsLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0Ly8gcHJpdmF0ZSBpbnRlcmZhY2VcblxuXHRfc2V0U2l6ZSggY3ViZVNpemUgKSB7XG5cblx0XHR0aGlzLl9sb2RNYXggPSBNYXRoLmZsb29yKCBNYXRoLmxvZzIoIGN1YmVTaXplICkgKTtcblx0XHR0aGlzLl9jdWJlU2l6ZSA9IE1hdGgucG93KCAyLCB0aGlzLl9sb2RNYXggKTtcblxuXHR9XG5cblx0X2Rpc3Bvc2UoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2JsdXJNYXRlcmlhbCAhPT0gbnVsbCApIHRoaXMuX2JsdXJNYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQuZGlzcG9zZSgpO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fbG9kUGxhbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5fbG9kUGxhbmVzWyBpIF0uZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfY2xlYW51cCggb3V0cHV0VGFyZ2V0ICkge1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBfb2xkVGFyZ2V0LCBfb2xkQWN0aXZlQ3ViZUZhY2UsIF9vbGRBY3RpdmVNaXBtYXBMZXZlbCApO1xuXHRcdHRoaXMuX3JlbmRlcmVyLnhyLmVuYWJsZWQgPSBfb2xkWHJFbmFibGVkO1xuXG5cdFx0b3V0cHV0VGFyZ2V0LnNjaXNzb3JUZXN0ID0gZmFsc2U7XG5cdFx0X3NldFZpZXdwb3J0KCBvdXRwdXRUYXJnZXQsIDAsIDAsIG91dHB1dFRhcmdldC53aWR0aCwgb3V0cHV0VGFyZ2V0LmhlaWdodCApO1xuXG5cdH1cblxuXHRfZnJvbVRleHR1cmUoIHRleHR1cmUsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgdGV4dHVyZS5tYXBwaW5nID09PSBDdWJlUmVmcmFjdGlvbk1hcHBpbmcgKSB7XG5cblx0XHRcdHRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSAwID8gMTYgOiAoIHRleHR1cmUuaW1hZ2VbIDAgXS53aWR0aCB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaW1hZ2Uud2lkdGggKSApO1xuXG5cdFx0fSBlbHNlIHsgLy8gRXF1aXJlY3Rhbmd1bGFyXG5cblx0XHRcdHRoaXMuX3NldFNpemUoIHRleHR1cmUuaW1hZ2Uud2lkdGggLyA0ICk7XG5cblx0XHR9XG5cblx0XHRfb2xkVGFyZ2V0ID0gdGhpcy5fcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0X29sZEFjdGl2ZUN1YmVGYWNlID0gdGhpcy5fcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcblx0XHRfb2xkQWN0aXZlTWlwbWFwTGV2ZWwgPSB0aGlzLl9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXHRcdF9vbGRYckVuYWJsZWQgPSB0aGlzLl9yZW5kZXJlci54ci5lbmFibGVkO1xuXG5cdFx0dGhpcy5fcmVuZGVyZXIueHIuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0IHx8IHRoaXMuX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdHRoaXMuX3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0dGhpcy5fY2xlYW51cCggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG5cdH1cblxuXHRfYWxsb2NhdGVUYXJnZXRzKCkge1xuXG5cdFx0Y29uc3Qgd2lkdGggPSAzICogTWF0aC5tYXgoIHRoaXMuX2N1YmVTaXplLCAxNiAqIDcgKTtcblx0XHRjb25zdCBoZWlnaHQgPSA0ICogdGhpcy5fY3ViZVNpemU7XG5cblx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRtYWdGaWx0ZXI6IExpbmVhckZpbHRlcixcblx0XHRcdG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRcdFx0Z2VuZXJhdGVNaXBtYXBzOiBmYWxzZSxcblx0XHRcdHR5cGU6IEhhbGZGbG9hdFR5cGUsXG5cdFx0XHRmb3JtYXQ6IFJHQkFGb3JtYXQsXG5cdFx0XHRjb2xvclNwYWNlOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSxcblx0XHRcdGRlcHRoQnVmZmVyOiBmYWxzZVxuXHRcdH07XG5cblx0XHRjb25zdCBjdWJlVVZSZW5kZXJUYXJnZXQgPSBfY3JlYXRlUmVuZGVyVGFyZ2V0KCB3aWR0aCwgaGVpZ2h0LCBwYXJhbXMgKTtcblxuXHRcdGlmICggdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQgPT09IG51bGwgfHwgdGhpcy5fcGluZ1BvbmdSZW5kZXJUYXJnZXQud2lkdGggIT09IHdpZHRoIHx8IHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0LmhlaWdodCAhPT0gaGVpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BpbmdQb25nUmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2Rpc3Bvc2UoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIHBhcmFtcyApO1xuXG5cdFx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0XHQoIHsgc2l6ZUxvZHM6IHRoaXMuX3NpemVMb2RzLCBsb2RQbGFuZXM6IHRoaXMuX2xvZFBsYW5lcywgc2lnbWFzOiB0aGlzLl9zaWdtYXMgfSA9IF9jcmVhdGVQbGFuZXMoIF9sb2RNYXggKSApO1xuXG5cdFx0XHR0aGlzLl9ibHVyTWF0ZXJpYWwgPSBfZ2V0Qmx1clNoYWRlciggX2xvZE1heCwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9XG5cblx0X2NvbXBpbGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCB0bXBNZXNoID0gbmV3IE1lc2goIHRoaXMuX2xvZFBsYW5lc1sgMCBdLCBtYXRlcmlhbCApO1xuXHRcdHRoaXMuX3JlbmRlcmVyLmNvbXBpbGUoIHRtcE1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG5cdF9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQsIHBvc2l0aW9uICkge1xuXG5cdFx0Y29uc3QgZm92ID0gOTA7XG5cdFx0Y29uc3QgYXNwZWN0ID0gMTtcblx0XHRjb25zdCBjdWJlQ2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdFx0Y29uc3QgdXBTaWduID0gWyAxLCAtMSwgMSwgMSwgMSwgMSBdO1xuXHRcdGNvbnN0IGZvcndhcmRTaWduID0gWyAxLCAxLCAxLCAtMSwgLTEsIC0xIF07XG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IG9yaWdpbmFsQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdGNvbnN0IHRvbmVNYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cdFx0cmVuZGVyZXIuZ2V0Q2xlYXJDb2xvciggX2NsZWFyQ29sb3IgKTtcblxuXHRcdHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGJhY2tncm91bmRNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCgge1xuXHRcdFx0bmFtZTogJ1BNUkVNLkJhY2tncm91bmQnLFxuXHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0fSApO1xuXG5cdFx0Y29uc3QgYmFja2dyb3VuZEJveCA9IG5ldyBNZXNoKCBuZXcgQm94R2VvbWV0cnkoKSwgYmFja2dyb3VuZE1hdGVyaWFsICk7XG5cblx0XHRsZXQgdXNlU29saWRDb2xvciA9IGZhbHNlO1xuXHRcdGNvbnN0IGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICkge1xuXG5cdFx0XHRpZiAoIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kTWF0ZXJpYWwuY29sb3IuY29weSggYmFja2dyb3VuZCApO1xuXHRcdFx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gbnVsbDtcblx0XHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGJhY2tncm91bmRNYXRlcmlhbC5jb2xvci5jb3B5KCBfY2xlYXJDb2xvciApO1xuXHRcdFx0dXNlU29saWRDb2xvciA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBjb2wgPSBpICUgMztcblxuXHRcdFx0aWYgKCBjb2wgPT09IDAgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54ICsgZm9yd2FyZFNpZ25bIGkgXSwgcG9zaXRpb24ueSwgcG9zaXRpb24ueiApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBjb2wgPT09IDEgKSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIDAsIHVwU2lnblsgaSBdICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55ICsgZm9yd2FyZFNpZ25bIGkgXSwgcG9zaXRpb24ueiApO1xuXG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y3ViZUNhbWVyYS51cC5zZXQoIDAsIHVwU2lnblsgaSBdLCAwICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEucG9zaXRpb24uc2V0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG5cdFx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICsgZm9yd2FyZFNpZ25bIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNpemUgPSB0aGlzLl9jdWJlU2l6ZTtcblxuXHRcdFx0X3NldFZpZXdwb3J0KCBjdWJlVVZSZW5kZXJUYXJnZXQsIGNvbCAqIHNpemUsIGkgPiAyID8gc2l6ZSA6IDAsIHNpemUsIHNpemUgKTtcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0aWYgKCB1c2VTb2xpZENvbG9yICkge1xuXG5cdFx0XHRcdHJlbmRlcmVyLnJlbmRlciggYmFja2dyb3VuZEJveCwgY3ViZUNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGN1YmVDYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdGJhY2tncm91bmRCb3guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHRcdGJhY2tncm91bmRCb3gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdFx0cmVuZGVyZXIudG9uZU1hcHBpbmcgPSB0b25lTWFwcGluZztcblx0XHRyZW5kZXJlci5hdXRvQ2xlYXIgPSBvcmlnaW5hbEF1dG9DbGVhcjtcblx0XHRzY2VuZS5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblxuXHR9XG5cblx0X3RleHR1cmVUb0N1YmVVViggdGV4dHVyZSwgY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblxuXHRcdGNvbnN0IGlzQ3ViZVRleHR1cmUgPSAoIHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIHx8IHRleHR1cmUubWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7XG5cblx0XHRpZiAoIGlzQ3ViZVRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggdGhpcy5fY3ViZW1hcE1hdGVyaWFsID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA9IF9nZXRDdWJlbWFwTWF0ZXJpYWwoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jdWJlbWFwTWF0ZXJpYWwudW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtMSA6IDE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWwgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5fZXF1aXJlY3RNYXRlcmlhbCA9IF9nZXRFcXVpcmVjdE1hdGVyaWFsKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IG1hdGVyaWFsID0gaXNDdWJlVGV4dHVyZSA/IHRoaXMuX2N1YmVtYXBNYXRlcmlhbCA6IHRoaXMuX2VxdWlyZWN0TWF0ZXJpYWw7XG5cdFx0Y29uc3QgbWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IHVuaWZvcm1zID0gbWF0ZXJpYWwudW5pZm9ybXM7XG5cblx0XHR1bmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRleHR1cmU7XG5cblx0XHRjb25zdCBzaXplID0gdGhpcy5fY3ViZVNpemU7XG5cblx0XHRfc2V0Vmlld3BvcnQoIGN1YmVVVlJlbmRlclRhcmdldCwgMCwgMCwgMyAqIHNpemUsIDIgKiBzaXplICk7XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggbWVzaCwgX2ZsYXRDYW1lcmEgKTtcblxuXHR9XG5cblx0X2FwcGx5UE1SRU0oIGN1YmVVVlJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlcmVyID0gdGhpcy5fcmVuZGVyZXI7XG5cdFx0Y29uc3QgYXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXHRcdGNvbnN0IG4gPSB0aGlzLl9sb2RQbGFuZXMubGVuZ3RoO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAxOyBpIDwgbjsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2lnbWEgPSBNYXRoLnNxcnQoIHRoaXMuX3NpZ21hc1sgaSBdICogdGhpcy5fc2lnbWFzWyBpIF0gLSB0aGlzLl9zaWdtYXNbIGkgLSAxIF0gKiB0aGlzLl9zaWdtYXNbIGkgLSAxIF0gKTtcblxuXHRcdFx0Y29uc3QgcG9sZUF4aXMgPSBfYXhpc0RpcmVjdGlvbnNbICggbiAtIGkgLSAxICkgJSBfYXhpc0RpcmVjdGlvbnMubGVuZ3RoIF07XG5cblx0XHRcdHRoaXMuX2JsdXIoIGN1YmVVVlJlbmRlclRhcmdldCwgaSAtIDEsIGksIHNpZ21hLCBwb2xlQXhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gYXV0b0NsZWFyO1xuXG5cdH1cblxuXHQvKipcblx0ICogVGhpcyBpcyBhIHR3by1wYXNzIEdhdXNzaWFuIGJsdXIgZm9yIGEgY3ViZW1hcC4gTm9ybWFsbHkgdGhpcyBpcyBkb25lXG5cdCAqIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseSwgYnV0IHRoaXMgYnJlYWtzIGRvd24gb24gYSBjdWJlLiBIZXJlIHdlIGFwcGx5XG5cdCAqIHRoZSBibHVyIGxhdGl0dWRpbmFsbHkgKGFyb3VuZCB0aGUgcG9sZXMpLCBhbmQgdGhlbiBsb25naXR1ZGluYWxseSAodG93YXJkc1xuXHQgKiB0aGUgcG9sZXMpIHRvIGFwcHJveGltYXRlIHRoZSBvcnRob2dvbmFsbHktc2VwYXJhYmxlIGJsdXIuIEl0IGlzIGxlYXN0XG5cdCAqIGFjY3VyYXRlIGF0IHRoZSBwb2xlcywgYnV0IHN0aWxsIGRvZXMgYSBkZWNlbnQgam9iLlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyVGFyZ2V0fSBjdWJlVVZSZW5kZXJUYXJnZXRcblx0ICogQHBhcmFtIHtudW1iZXJ9IGxvZEluXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsb2RPdXRcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNpZ21hXG5cdCAqIEBwYXJhbSB7VmVjdG9yM30gW3BvbGVBeGlzXVxuXHQgKi9cblx0X2JsdXIoIGN1YmVVVlJlbmRlclRhcmdldCwgbG9kSW4sIGxvZE91dCwgc2lnbWEsIHBvbGVBeGlzICkge1xuXG5cdFx0Y29uc3QgcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSB0aGlzLl9waW5nUG9uZ1JlbmRlclRhcmdldDtcblxuXHRcdHRoaXMuX2hhbGZCbHVyKFxuXHRcdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LFxuXHRcdFx0cGluZ1BvbmdSZW5kZXJUYXJnZXQsXG5cdFx0XHRsb2RJbixcblx0XHRcdGxvZE91dCxcblx0XHRcdHNpZ21hLFxuXHRcdFx0J2xhdGl0dWRpbmFsJyxcblx0XHRcdHBvbGVBeGlzICk7XG5cblx0XHR0aGlzLl9oYWxmQmx1cihcblx0XHRcdHBpbmdQb25nUmVuZGVyVGFyZ2V0LFxuXHRcdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LFxuXHRcdFx0bG9kT3V0LFxuXHRcdFx0bG9kT3V0LFxuXHRcdFx0c2lnbWEsXG5cdFx0XHQnbG9uZ2l0dWRpbmFsJyxcblx0XHRcdHBvbGVBeGlzICk7XG5cblx0fVxuXG5cdF9oYWxmQmx1ciggdGFyZ2V0SW4sIHRhcmdldE91dCwgbG9kSW4sIGxvZE91dCwgc2lnbWFSYWRpYW5zLCBkaXJlY3Rpb24sIHBvbGVBeGlzICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyZXIgPSB0aGlzLl9yZW5kZXJlcjtcblx0XHRjb25zdCBibHVyTWF0ZXJpYWwgPSB0aGlzLl9ibHVyTWF0ZXJpYWw7XG5cblx0XHRpZiAoIGRpcmVjdGlvbiAhPT0gJ2xhdGl0dWRpbmFsJyAmJiBkaXJlY3Rpb24gIT09ICdsb25naXR1ZGluYWwnICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHQnYmx1ciBkaXJlY3Rpb24gbXVzdCBiZSBlaXRoZXIgbGF0aXR1ZGluYWwgb3IgbG9uZ2l0dWRpbmFsIScgKTtcblxuXHRcdH1cblxuXHRcdC8vIE51bWJlciBvZiBzdGFuZGFyZCBkZXZpYXRpb25zIGF0IHdoaWNoIHRvIGN1dCBvZmYgdGhlIGRpc2NyZXRlIGFwcHJveGltYXRpb24uXG5cdFx0Y29uc3QgU1RBTkRBUkRfREVWSUFUSU9OUyA9IDM7XG5cblx0XHRjb25zdCBibHVyTWVzaCA9IG5ldyBNZXNoKCB0aGlzLl9sb2RQbGFuZXNbIGxvZE91dCBdLCBibHVyTWF0ZXJpYWwgKTtcblx0XHRjb25zdCBibHVyVW5pZm9ybXMgPSBibHVyTWF0ZXJpYWwudW5pZm9ybXM7XG5cblx0XHRjb25zdCBwaXhlbHMgPSB0aGlzLl9zaXplTG9kc1sgbG9kSW4gXSAtIDE7XG5cdFx0Y29uc3QgcmFkaWFuc1BlclBpeGVsID0gaXNGaW5pdGUoIHNpZ21hUmFkaWFucyApID8gTWF0aC5QSSAvICggMiAqIHBpeGVscyApIDogMiAqIE1hdGguUEkgLyAoIDIgKiBNQVhfU0FNUExFUyAtIDEgKTtcblx0XHRjb25zdCBzaWdtYVBpeGVscyA9IHNpZ21hUmFkaWFucyAvIHJhZGlhbnNQZXJQaXhlbDtcblx0XHRjb25zdCBzYW1wbGVzID0gaXNGaW5pdGUoIHNpZ21hUmFkaWFucyApID8gMSArIE1hdGguZmxvb3IoIFNUQU5EQVJEX0RFVklBVElPTlMgKiBzaWdtYVBpeGVscyApIDogTUFYX1NBTVBMRVM7XG5cblx0XHRpZiAoIHNhbXBsZXMgPiBNQVhfU0FNUExFUyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBgc2lnbWFSYWRpYW5zLCAke1xuXHRcdFx0XHRzaWdtYVJhZGlhbnN9LCBpcyB0b28gbGFyZ2UgYW5kIHdpbGwgY2xpcCwgYXMgaXQgcmVxdWVzdGVkICR7XG5cdFx0XHRcdHNhbXBsZXN9IHNhbXBsZXMgd2hlbiB0aGUgbWF4aW11bSBpcyBzZXQgdG8gJHtNQVhfU0FNUExFU31gICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB3ZWlnaHRzID0gW107XG5cdFx0bGV0IHN1bSA9IDA7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBNQVhfU0FNUExFUzsgKysgaSApIHtcblxuXHRcdFx0Y29uc3QgeCA9IGkgLyBzaWdtYVBpeGVscztcblx0XHRcdGNvbnN0IHdlaWdodCA9IE1hdGguZXhwKCAtIHggKiB4IC8gMiApO1xuXHRcdFx0d2VpZ2h0cy5wdXNoKCB3ZWlnaHQgKTtcblxuXHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdHN1bSArPSB3ZWlnaHQ7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGkgPCBzYW1wbGVzICkge1xuXG5cdFx0XHRcdHN1bSArPSAyICogd2VpZ2h0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB3ZWlnaHRzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0d2VpZ2h0c1sgaSBdID0gd2VpZ2h0c1sgaSBdIC8gc3VtO1xuXG5cdFx0fVxuXG5cdFx0Ymx1clVuaWZvcm1zWyAnZW52TWFwJyBdLnZhbHVlID0gdGFyZ2V0SW4udGV4dHVyZTtcblx0XHRibHVyVW5pZm9ybXNbICdzYW1wbGVzJyBdLnZhbHVlID0gc2FtcGxlcztcblx0XHRibHVyVW5pZm9ybXNbICd3ZWlnaHRzJyBdLnZhbHVlID0gd2VpZ2h0cztcblx0XHRibHVyVW5pZm9ybXNbICdsYXRpdHVkaW5hbCcgXS52YWx1ZSA9IGRpcmVjdGlvbiA9PT0gJ2xhdGl0dWRpbmFsJztcblxuXHRcdGlmICggcG9sZUF4aXMgKSB7XG5cblx0XHRcdGJsdXJVbmlmb3Jtc1sgJ3BvbGVBeGlzJyBdLnZhbHVlID0gcG9sZUF4aXM7XG5cblx0XHR9XG5cblx0XHRjb25zdCB7IF9sb2RNYXggfSA9IHRoaXM7XG5cdFx0Ymx1clVuaWZvcm1zWyAnZFRoZXRhJyBdLnZhbHVlID0gcmFkaWFuc1BlclBpeGVsO1xuXHRcdGJsdXJVbmlmb3Jtc1sgJ21pcEludCcgXS52YWx1ZSA9IF9sb2RNYXggLSBsb2RJbjtcblxuXHRcdGNvbnN0IG91dHB1dFNpemUgPSB0aGlzLl9zaXplTG9kc1sgbG9kT3V0IF07XG5cdFx0Y29uc3QgeCA9IDMgKiBvdXRwdXRTaXplICogKCBsb2RPdXQgPiBfbG9kTWF4IC0gTE9EX01JTiA/IGxvZE91dCAtIF9sb2RNYXggKyBMT0RfTUlOIDogMCApO1xuXHRcdGNvbnN0IHkgPSA0ICogKCB0aGlzLl9jdWJlU2l6ZSAtIG91dHB1dFNpemUgKTtcblxuXHRcdF9zZXRWaWV3cG9ydCggdGFyZ2V0T3V0LCB4LCB5LCAzICogb3V0cHV0U2l6ZSwgMiAqIG91dHB1dFNpemUgKTtcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRhcmdldE91dCApO1xuXHRcdHJlbmRlcmVyLnJlbmRlciggYmx1ck1lc2gsIF9mbGF0Q2FtZXJhICk7XG5cblx0fVxuXG59XG5cblxuXG5mdW5jdGlvbiBfY3JlYXRlUGxhbmVzKCBsb2RNYXggKSB7XG5cblx0Y29uc3QgbG9kUGxhbmVzID0gW107XG5cdGNvbnN0IHNpemVMb2RzID0gW107XG5cdGNvbnN0IHNpZ21hcyA9IFtdO1xuXG5cdGxldCBsb2QgPSBsb2RNYXg7XG5cblx0Y29uc3QgdG90YWxMb2RzID0gbG9kTWF4IC0gTE9EX01JTiArIDEgKyBFWFRSQV9MT0RfU0lHTUEubGVuZ3RoO1xuXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IHRvdGFsTG9kczsgaSArKyApIHtcblxuXHRcdGNvbnN0IHNpemVMb2QgPSBNYXRoLnBvdyggMiwgbG9kICk7XG5cdFx0c2l6ZUxvZHMucHVzaCggc2l6ZUxvZCApO1xuXHRcdGxldCBzaWdtYSA9IDEuMCAvIHNpemVMb2Q7XG5cblx0XHRpZiAoIGkgPiBsb2RNYXggLSBMT0RfTUlOICkge1xuXG5cdFx0XHRzaWdtYSA9IEVYVFJBX0xPRF9TSUdNQVsgaSAtIGxvZE1heCArIExPRF9NSU4gLSAxIF07XG5cblx0XHR9IGVsc2UgaWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRzaWdtYSA9IDA7XG5cblx0XHR9XG5cblx0XHRzaWdtYXMucHVzaCggc2lnbWEgKTtcblxuXHRcdGNvbnN0IHRleGVsU2l6ZSA9IDEuMCAvICggc2l6ZUxvZCAtIDIgKTtcblx0XHRjb25zdCBtaW4gPSAtIHRleGVsU2l6ZTtcblx0XHRjb25zdCBtYXggPSAxICsgdGV4ZWxTaXplO1xuXHRcdGNvbnN0IHV2MSA9IFsgbWluLCBtaW4sIG1heCwgbWluLCBtYXgsIG1heCwgbWluLCBtaW4sIG1heCwgbWF4LCBtaW4sIG1heCBdO1xuXG5cdFx0Y29uc3QgY3ViZUZhY2VzID0gNjtcblx0XHRjb25zdCB2ZXJ0aWNlcyA9IDY7XG5cdFx0Y29uc3QgcG9zaXRpb25TaXplID0gMztcblx0XHRjb25zdCB1dlNpemUgPSAyO1xuXHRcdGNvbnN0IGZhY2VJbmRleFNpemUgPSAxO1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvblNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXHRcdGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheSggdXZTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblx0XHRjb25zdCBmYWNlSW5kZXggPSBuZXcgRmxvYXQzMkFycmF5KCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBjdWJlRmFjZXMgKTtcblxuXHRcdGZvciAoIGxldCBmYWNlID0gMDsgZmFjZSA8IGN1YmVGYWNlczsgZmFjZSArKyApIHtcblxuXHRcdFx0Y29uc3QgeCA9ICggZmFjZSAlIDMgKSAqIDIgLyAzIC0gMTtcblx0XHRcdGNvbnN0IHkgPSBmYWNlID4gMiA/IDAgOiAtMTtcblx0XHRcdGNvbnN0IGNvb3JkaW5hdGVzID0gW1xuXHRcdFx0XHR4LCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHkgKyAxLCAwXG5cdFx0XHRdO1xuXHRcdFx0cG9zaXRpb24uc2V0KCBjb29yZGluYXRlcywgcG9zaXRpb25TaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHR1di5zZXQoIHV2MSwgdXZTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHRjb25zdCBmaWxsID0gWyBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlLCBmYWNlIF07XG5cdFx0XHRmYWNlSW5kZXguc2V0KCBmaWxsLCBmYWNlSW5kZXhTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBwbGFuZXMgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgcG9zaXRpb25TaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1diwgdXZTaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAnZmFjZUluZGV4JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggZmFjZUluZGV4LCBmYWNlSW5kZXhTaXplICkgKTtcblx0XHRsb2RQbGFuZXMucHVzaCggcGxhbmVzICk7XG5cblx0XHRpZiAoIGxvZCA+IExPRF9NSU4gKSB7XG5cblx0XHRcdGxvZCAtLTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgbG9kUGxhbmVzLCBzaXplTG9kcywgc2lnbWFzIH07XG5cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICkge1xuXG5cdGNvbnN0IGN1YmVVVlJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgcGFyYW1zICk7XG5cdGN1YmVVVlJlbmRlclRhcmdldC50ZXh0dXJlLm1hcHBpbmcgPSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZztcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnRleHR1cmUubmFtZSA9ICdQTVJFTS5jdWJlVXYnO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQuc2Npc3NvclRlc3QgPSB0cnVlO1xuXHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG59XG5cbmZ1bmN0aW9uIF9zZXRWaWV3cG9ydCggdGFyZ2V0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdHRhcmdldC52aWV3cG9ydC5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblx0dGFyZ2V0LnNjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldEJsdXJTaGFkZXIoIGxvZE1heCwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRjb25zdCB3ZWlnaHRzID0gbmV3IEZsb2F0MzJBcnJheSggTUFYX1NBTVBMRVMgKTtcblx0Y29uc3QgcG9sZUF4aXMgPSBuZXcgVmVjdG9yMyggMCwgMSwgMCApO1xuXHRjb25zdCBzaGFkZXJNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ1NwaGVyaWNhbEdhdXNzaWFuQmx1cicsXG5cblx0XHRkZWZpbmVzOiB7XG5cdFx0XHQnbic6IE1BWF9TQU1QTEVTLFxuXHRcdFx0J0NVQkVVVl9URVhFTF9XSURUSCc6IDEuMCAvIHdpZHRoLFxuXHRcdFx0J0NVQkVVVl9URVhFTF9IRUlHSFQnOiAxLjAgLyBoZWlnaHQsXG5cdFx0XHQnQ1VCRVVWX01BWF9NSVAnOiBgJHtsb2RNYXh9LjBgLFxuXHRcdH0sXG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0J2Vudk1hcCc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdCdzYW1wbGVzJzogeyB2YWx1ZTogMSB9LFxuXHRcdFx0J3dlaWdodHMnOiB7IHZhbHVlOiB3ZWlnaHRzIH0sXG5cdFx0XHQnbGF0aXR1ZGluYWwnOiB7IHZhbHVlOiBmYWxzZSB9LFxuXHRcdFx0J2RUaGV0YSc6IHsgdmFsdWU6IDAgfSxcblx0XHRcdCdtaXBJbnQnOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHQncG9sZUF4aXMnOiB7IHZhbHVlOiBwb2xlQXhpcyB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xuXHRcdFx0dW5pZm9ybSBpbnQgc2FtcGxlcztcblx0XHRcdHVuaWZvcm0gZmxvYXQgd2VpZ2h0c1sgbiBdO1xuXHRcdFx0dW5pZm9ybSBib29sIGxhdGl0dWRpbmFsO1xuXHRcdFx0dW5pZm9ybSBmbG9hdCBkVGhldGE7XG5cdFx0XHR1bmlmb3JtIGZsb2F0IG1pcEludDtcblx0XHRcdHVuaWZvcm0gdmVjMyBwb2xlQXhpcztcblxuXHRcdFx0I2RlZmluZSBFTlZNQVBfVFlQRV9DVUJFX1VWXG5cdFx0XHQjaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxuXG5cdFx0XHR2ZWMzIGdldFNhbXBsZSggZmxvYXQgdGhldGEsIHZlYzMgYXhpcyApIHtcblxuXHRcdFx0XHRmbG9hdCBjb3NUaGV0YSA9IGNvcyggdGhldGEgKTtcblx0XHRcdFx0Ly8gUm9kcmlndWVzJyBheGlzLWFuZ2xlIHJvdGF0aW9uXG5cdFx0XHRcdHZlYzMgc2FtcGxlRGlyZWN0aW9uID0gdk91dHB1dERpcmVjdGlvbiAqIGNvc1RoZXRhXG5cdFx0XHRcdFx0KyBjcm9zcyggYXhpcywgdk91dHB1dERpcmVjdGlvbiApICogc2luKCB0aGV0YSApXG5cdFx0XHRcdFx0KyBheGlzICogZG90KCBheGlzLCB2T3V0cHV0RGlyZWN0aW9uICkgKiAoIDEuMCAtIGNvc1RoZXRhICk7XG5cblx0XHRcdFx0cmV0dXJuIGJpbGluZWFyQ3ViZVVWKCBlbnZNYXAsIHNhbXBsZURpcmVjdGlvbiwgbWlwSW50ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdHZlYzMgYXhpcyA9IGxhdGl0dWRpbmFsID8gcG9sZUF4aXMgOiBjcm9zcyggcG9sZUF4aXMsIHZPdXRwdXREaXJlY3Rpb24gKTtcblxuXHRcdFx0XHRpZiAoIGFsbCggZXF1YWwoIGF4aXMsIHZlYzMoIDAuMCApICkgKSApIHtcblxuXHRcdFx0XHRcdGF4aXMgPSB2ZWMzKCB2T3V0cHV0RGlyZWN0aW9uLnosIDAuMCwgLSB2T3V0cHV0RGlyZWN0aW9uLnggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YXhpcyA9IG5vcm1hbGl6ZSggYXhpcyApO1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xuXHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIDAgXSAqIGdldFNhbXBsZSggMC4wLCBheGlzICk7XG5cblx0XHRcdFx0Zm9yICggaW50IGkgPSAxOyBpIDwgbjsgaSsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpID49IHNhbXBsZXMgKSB7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZmxvYXQgdGhldGEgPSBkVGhldGEgKiBmbG9hdCggaSApO1xuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvci5yZ2IgKz0gd2VpZ2h0c1sgaSBdICogZ2V0U2FtcGxlKCAtMS4wICogdGhldGEsIGF4aXMgKTtcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IucmdiICs9IHdlaWdodHNbIGkgXSAqIGdldFNhbXBsZSggdGhldGEsIGF4aXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHRgLFxuXG5cdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmcsXG5cdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRkZXB0aFdyaXRlOiBmYWxzZVxuXG5cdH0gKTtcblxuXHRyZXR1cm4gc2hhZGVyTWF0ZXJpYWw7XG5cbn1cblxuZnVuY3Rpb24gX2dldEVxdWlyZWN0TWF0ZXJpYWwoKSB7XG5cblx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0bmFtZTogJ0VxdWlyZWN0YW5ndWxhclRvQ3ViZVVWJyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHQnZW52TWFwJzogeyB2YWx1ZTogbnVsbCB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xuXG5cdFx0XHQjaW5jbHVkZSA8Y29tbW9uPlxuXG5cdFx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdFx0dmVjMyBvdXRwdXREaXJlY3Rpb24gPSBub3JtYWxpemUoIHZPdXRwdXREaXJlY3Rpb24gKTtcblx0XHRcdFx0dmVjMiB1diA9IGVxdWlyZWN0VXYoIG91dHB1dERpcmVjdGlvbiApO1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHRleHR1cmUyRCAoIGVudk1hcCwgdXYgKS5yZ2IsIDEuMCApO1xuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldEN1YmVtYXBNYXRlcmlhbCgpIHtcblxuXHRyZXR1cm4gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRuYW1lOiAnQ3ViZW1hcFRvQ3ViZVVWJyxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHQnZW52TWFwJzogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0J2ZsaXBFbnZNYXAnOiB7IHZhbHVlOiAtMSB9XG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogX2dldENvbW1vblZlcnRleFNoYWRlcigpLFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdFx0cHJlY2lzaW9uIG1lZGl1bXAgaW50O1xuXG5cdFx0XHR1bmlmb3JtIGZsb2F0IGZsaXBFbnZNYXA7XG5cblx0XHRcdHZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uO1xuXG5cdFx0XHR1bmlmb3JtIHNhbXBsZXJDdWJlIGVudk1hcDtcblxuXHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHZlYzMoIGZsaXBFbnZNYXAgKiB2T3V0cHV0RGlyZWN0aW9uLngsIHZPdXRwdXREaXJlY3Rpb24ueXogKSApO1xuXG5cdFx0XHR9XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cbn1cblxuZnVuY3Rpb24gX2dldENvbW1vblZlcnRleFNoYWRlcigpIHtcblxuXHRyZXR1cm4gLyogZ2xzbCAqL2BcblxuXHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXHRcdHByZWNpc2lvbiBtZWRpdW1wIGludDtcblxuXHRcdGF0dHJpYnV0ZSBmbG9hdCBmYWNlSW5kZXg7XG5cblx0XHR2YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcblxuXHRcdC8vIFJIIGNvb3JkaW5hdGUgc3lzdGVtOyBQTVJFTSBmYWNlLWluZGV4aW5nIGNvbnZlbnRpb25cblx0XHR2ZWMzIGdldERpcmVjdGlvbiggdmVjMiB1diwgZmxvYXQgZmFjZSApIHtcblxuXHRcdFx0dXYgPSAyLjAgKiB1diAtIDEuMDtcblxuXHRcdFx0dmVjMyBkaXJlY3Rpb24gPSB2ZWMzKCB1diwgMS4wICk7XG5cblx0XHRcdGlmICggZmFjZSA9PSAwLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnp5eDsgLy8gKCAxLCB2LCB1ICkgcG9zIHhcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSAxLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uID0gZGlyZWN0aW9uLnh6eTtcblx0XHRcdFx0ZGlyZWN0aW9uLnh6ICo9IC0xLjA7IC8vICggLXUsIDEsIC12ICkgcG9zIHlcblxuXHRcdFx0fSBlbHNlIGlmICggZmFjZSA9PSAyLjAgKSB7XG5cblx0XHRcdFx0ZGlyZWN0aW9uLnggKj0gLTEuMDsgLy8gKCAtdSwgdiwgMSApIHBvcyB6XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gMy4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi56eXg7XG5cdFx0XHRcdGRpcmVjdGlvbi54eiAqPSAtMS4wOyAvLyAoIC0xLCB2LCAtdSApIG5lZyB4XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNC4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi54enk7XG5cdFx0XHRcdGRpcmVjdGlvbi54eSAqPSAtMS4wOyAvLyAoIC11LCAtMSwgdiApIG5lZyB5XG5cblx0XHRcdH0gZWxzZSBpZiAoIGZhY2UgPT0gNS4wICkge1xuXG5cdFx0XHRcdGRpcmVjdGlvbi56ICo9IC0xLjA7IC8vICggdSwgdiwgLTEgKSBuZWcgelxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkaXJlY3Rpb247XG5cblx0XHR9XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cblx0XHRcdHZPdXRwdXREaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oIHV2LCBmYWNlSW5kZXggKTtcblx0XHRcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXG5cdFx0fVxuXHRgO1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMQ3ViZVVWTWFwcyggcmVuZGVyZXIgKSB7XG5cblx0bGV0IGN1YmVVVm1hcHMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGxldCBwbXJlbUdlbmVyYXRvciA9IG51bGw7XG5cblx0ZnVuY3Rpb24gZ2V0KCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlICYmIHRleHR1cmUuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRjb25zdCBtYXBwaW5nID0gdGV4dHVyZS5tYXBwaW5nO1xuXG5cdFx0XHRjb25zdCBpc0VxdWlyZWN0TWFwID0gKCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyB8fCBtYXBwaW5nID09PSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyApO1xuXHRcdFx0Y29uc3QgaXNDdWJlTWFwID0gKCBtYXBwaW5nID09PSBDdWJlUmVmbGVjdGlvbk1hcHBpbmcgfHwgbWFwcGluZyA9PT0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nICk7XG5cblx0XHRcdC8vIGVxdWlyZWN0L2N1YmUgbWFwIHRvIGN1YmVVViBjb252ZXJzaW9uXG5cblx0XHRcdGlmICggaXNFcXVpcmVjdE1hcCB8fCBpc0N1YmVNYXAgKSB7XG5cblx0XHRcdFx0bGV0IHJlbmRlclRhcmdldCA9IGN1YmVVVm1hcHMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRcdFx0Y29uc3QgY3VycmVudFBNUkVNVmVyc2lvbiA9IHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkID8gcmVuZGVyVGFyZ2V0LnRleHR1cmUucG1yZW1WZXJzaW9uIDogMDtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlICYmIHRleHR1cmUucG1yZW1WZXJzaW9uICE9PSBjdXJyZW50UE1SRU1WZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0aWYgKCBwbXJlbUdlbmVyYXRvciA9PT0gbnVsbCApIHBtcmVtR2VuZXJhdG9yID0gbmV3IFBNUkVNR2VuZXJhdG9yKCByZW5kZXJlciApO1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUsIHJlbmRlclRhcmdldCApIDogcG1yZW1HZW5lcmF0b3IuZnJvbUN1YmVtYXAoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLnBtcmVtVmVyc2lvbiA9IHRleHR1cmUucG1yZW1WZXJzaW9uO1xuXG5cdFx0XHRcdFx0Y3ViZVVWbWFwcy5zZXQoIHRleHR1cmUsIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBpbWFnZSA9IHRleHR1cmUuaW1hZ2U7XG5cblx0XHRcdFx0XHRcdGlmICggKCBpc0VxdWlyZWN0TWFwICYmIGltYWdlICYmIGltYWdlLmhlaWdodCA+IDAgKSB8fCAoIGlzQ3ViZU1hcCAmJiBpbWFnZSAmJiBpc0N1YmVUZXh0dXJlQ29tcGxldGUoIGltYWdlICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHBtcmVtR2VuZXJhdG9yID09PSBudWxsICkgcG1yZW1HZW5lcmF0b3IgPSBuZXcgUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gaXNFcXVpcmVjdE1hcCA/IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIoIHRleHR1cmUgKSA6IHBtcmVtR2VuZXJhdG9yLmZyb21DdWJlbWFwKCB0ZXh0dXJlICk7XG5cdFx0XHRcdFx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLnBtcmVtVmVyc2lvbiA9IHRleHR1cmUucG1yZW1WZXJzaW9uO1xuXG5cdFx0XHRcdFx0XHRcdGN1YmVVVm1hcHMuc2V0KCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZW5kZXJUYXJnZXQudGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBpbWFnZSBub3QgeWV0IHJlYWR5LiB0cnkgdGhlIGNvbnZlcnNpb24gbmV4dCBmcmFtZVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaXNDdWJlVGV4dHVyZUNvbXBsZXRlKCBpbWFnZSApIHtcblxuXHRcdGxldCBjb3VudCA9IDA7XG5cdFx0Y29uc3QgbGVuZ3RoID0gNjtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBpbWFnZVsgaSBdICE9PSB1bmRlZmluZWQgKSBjb3VudCArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb3VudCA9PT0gbGVuZ3RoO1xuXG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVGV4dHVyZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRjb25zdCBjdWJlbWFwVVYgPSBjdWJlVVZtYXBzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCBjdWJlbWFwVVYgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y3ViZVVWbWFwcy5kZWxldGUoIHRleHR1cmUgKTtcblx0XHRcdGN1YmVtYXBVVi5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRjdWJlVVZtYXBzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRcdGlmICggcG1yZW1HZW5lcmF0b3IgIT09IG51bGwgKSB7XG5cblx0XHRcdHBtcmVtR2VuZXJhdG9yLmRpc3Bvc2UoKTtcblx0XHRcdHBtcmVtR2VuZXJhdG9yID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHRjb25zdCBleHRlbnNpb25zID0ge307XG5cblx0ZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKCBuYW1lICkge1xuXG5cdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIGV4dGVuc2lvbnNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGxldCBleHRlbnNpb247XG5cblx0XHRzd2l0Y2ggKCBuYW1lICkge1xuXG5cdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcblx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yyc6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxuXHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0cmV0dXJuIGV4dGVuc2lvbjtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGhhczogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gZ2V0RXh0ZW5zaW9uKCBuYW1lICkgIT09IG51bGw7XG5cblx0XHR9LFxuXG5cdFx0aW5pdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRnZXRFeHRlbnNpb24oICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApO1xuXHRcdFx0Z2V0RXh0ZW5zaW9uKCAnV0VCR0xfcmVuZGVyX3NoYXJlZF9leHBvbmVudCcgKTtcblxuXHRcdH0sXG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uKCBuYW1lICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdHdhcm5PbmNlKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogJyArIG5hbWUgKyAnIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xHZW9tZXRyaWVzKCBnbCwgYXR0cmlidXRlcywgaW5mbywgYmluZGluZ1N0YXRlcyApIHtcblxuXHRjb25zdCBnZW9tZXRyaWVzID0ge307XG5cdGNvbnN0IHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIG9uR2VvbWV0cnlEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGdlb21ldHJ5LmluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBjb25zdCBuYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKCBnZW9tZXRyeS5hdHRyaWJ1dGVzWyBuYW1lIF0gKTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UgKTtcblxuXHRcdGRlbGV0ZSBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdO1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGF0dHJpYnV0ZSApO1xuXHRcdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5kZWxldGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nU3RhdGVzLnJlbGVhc2VTdGF0ZXNPZkdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID09PSB0cnVlICkge1xuXG5cdFx0XHRkZWxldGUgZ2VvbWV0cnkuX21heEluc3RhbmNlQ291bnQ7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyAtLTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICkge1xuXG5cdFx0aWYgKCBnZW9tZXRyaWVzWyBnZW9tZXRyeS5pZCBdID09PSB0cnVlICkgcmV0dXJuIGdlb21ldHJ5O1xuXG5cdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkdlb21ldHJ5RGlzcG9zZSApO1xuXG5cdFx0Z2VvbWV0cmllc1sgZ2VvbWV0cnkuaWQgXSA9IHRydWU7XG5cblx0XHRpbmZvLm1lbW9yeS5nZW9tZXRyaWVzICsrO1xuXG5cdFx0cmV0dXJuIGdlb21ldHJ5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcblxuXHRcdC8vIFVwZGF0aW5nIGluZGV4IGJ1ZmZlciBpbiBWQU8gbm93LiBTZWUgV2ViR0xCaW5kaW5nU3RhdGVzLlxuXG5cdFx0Zm9yICggY29uc3QgbmFtZSBpbiBnZW9tZXRyeUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBnZW9tZXRyeUF0dHJpYnV0ZXNbIG5hbWUgXSwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZSggZ2VvbWV0cnkgKSB7XG5cblx0XHRjb25zdCBpbmRpY2VzID0gW107XG5cblx0XHRjb25zdCBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0Y29uc3QgZ2VvbWV0cnlQb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0bGV0IHZlcnNpb24gPSAwO1xuXG5cdFx0aWYgKCBnZW9tZXRyeUluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IGdlb21ldHJ5SW5kZXguYXJyYXk7XG5cdFx0XHR2ZXJzaW9uID0gZ2VvbWV0cnlJbmRleC52ZXJzaW9uO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGFycmF5WyBpICsgMCBdO1xuXHRcdFx0XHRjb25zdCBiID0gYXJyYXlbIGkgKyAxIF07XG5cdFx0XHRcdGNvbnN0IGMgPSBhcnJheVsgaSArIDIgXTtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnlQb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBhcnJheSA9IGdlb21ldHJ5UG9zaXRpb24uYXJyYXk7XG5cdFx0XHR2ZXJzaW9uID0gZ2VvbWV0cnlQb3NpdGlvbi52ZXJzaW9uO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSAoIGFycmF5Lmxlbmd0aCAvIDMgKSAtIDE7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0Y29uc3QgYSA9IGkgKyAwO1xuXHRcdFx0XHRjb25zdCBiID0gaSArIDE7XG5cdFx0XHRcdGNvbnN0IGMgPSBpICsgMjtcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGIsIGMsIGMsIGEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgYXR0cmlidXRlID0gbmV3ICggYXJyYXlOZWVkc1VpbnQzMiggaW5kaWNlcyApID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGljZXMsIDEgKTtcblx0XHRhdHRyaWJ1dGUudmVyc2lvbiA9IHZlcnNpb247XG5cblx0XHQvLyBVcGRhdGluZyBpbmRleCBidWZmZXIgaW4gVkFPIG5vdy4gU2VlIFdlYkdMQmluZGluZ1N0YXRlc1xuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IHByZXZpb3VzQXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIHByZXZpb3VzQXR0cmlidXRlICkgYXR0cmlidXRlcy5yZW1vdmUoIHByZXZpb3VzQXR0cmlidXRlICk7XG5cblx0XHQvL1xuXG5cdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5zZXQoIGdlb21ldHJ5LCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdGNvbnN0IGN1cnJlbnRBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggY3VycmVudEF0dHJpYnV0ZSApIHtcblxuXHRcdFx0Y29uc3QgZ2VvbWV0cnlJbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5SW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gaWYgdGhlIGF0dHJpYnV0ZSBpcyBvYnNvbGV0ZSwgY3JlYXRlIGEgbmV3IG9uZVxuXG5cdFx0XHRcdGlmICggY3VycmVudEF0dHJpYnV0ZS52ZXJzaW9uIDwgZ2VvbWV0cnlJbmRleC52ZXJzaW9uICkge1xuXG5cdFx0XHRcdFx0dXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cblx0XHRnZXRXaXJlZnJhbWVBdHRyaWJ1dGU6IGdldFdpcmVmcmFtZUF0dHJpYnV0ZVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvICkge1xuXG5cdGxldCBtb2RlO1xuXG5cdGZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkge1xuXG5cdFx0bW9kZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRsZXQgdHlwZSwgYnl0ZXNQZXJFbGVtZW50O1xuXG5cdGZ1bmN0aW9uIHNldEluZGV4KCB2YWx1ZSApIHtcblxuXHRcdHR5cGUgPSB2YWx1ZS50eXBlO1xuXHRcdGJ5dGVzUGVyRWxlbWVudCA9IHZhbHVlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3RWxlbWVudHMoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlLCAxICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggc3RhcnQsIGNvdW50LCBwcmltY291bnQgKSB7XG5cblx0XHRpZiAoIHByaW1jb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZCggbW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck11bHRpRHJhdyggc3RhcnRzLCBjb3VudHMsIGRyYXdDb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXHRcdGV4dGVuc2lvbi5tdWx0aURyYXdFbGVtZW50c1dFQkdMKCBtb2RlLCBjb3VudHMsIDAsIHR5cGUsIHN0YXJ0cywgMCwgZHJhd0NvdW50ICk7XG5cblx0XHRsZXQgZWxlbWVudENvdW50ID0gMDtcblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdGVsZW1lbnRDb3VudCArPSBjb3VudHNbIGkgXTtcblxuXHRcdH1cblxuXHRcdGluZm8udXBkYXRlKCBlbGVtZW50Q291bnQsIG1vZGUsIDEgKTtcblxuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMoIHN0YXJ0cywgY291bnRzLCBkcmF3Q291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggZHJhd0NvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHN0YXJ0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0cmVuZGVySW5zdGFuY2VzKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0sIHByaW1jb3VudFsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGV4dGVuc2lvbi5tdWx0aURyYXdFbGVtZW50c0luc3RhbmNlZFdFQkdMKCBtb2RlLCBjb3VudHMsIDAsIHR5cGUsIHN0YXJ0cywgMCwgcHJpbWNvdW50LCAwLCBkcmF3Q291bnQgKTtcblxuXHRcdFx0bGV0IGVsZW1lbnRDb3VudCA9IDA7XG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkcmF3Q291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0ZWxlbWVudENvdW50ICs9IGNvdW50c1sgaSBdICogcHJpbWNvdW50WyBpIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mby51cGRhdGUoIGVsZW1lbnRDb3VudCwgbW9kZSwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXHR0aGlzLnJlbmRlck11bHRpRHJhdyA9IHJlbmRlck11bHRpRHJhdztcblx0dGhpcy5yZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMgPSByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXM7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xJbmZvKCBnbCApIHtcblxuXHRjb25zdCBtZW1vcnkgPSB7XG5cdFx0Z2VvbWV0cmllczogMCxcblx0XHR0ZXh0dXJlczogMFxuXHR9O1xuXG5cdGNvbnN0IHJlbmRlciA9IHtcblx0XHRmcmFtZTogMCxcblx0XHRjYWxsczogMCxcblx0XHR0cmlhbmdsZXM6IDAsXG5cdFx0cG9pbnRzOiAwLFxuXHRcdGxpbmVzOiAwXG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBjb3VudCwgbW9kZSwgaW5zdGFuY2VDb3VudCApIHtcblxuXHRcdHJlbmRlci5jYWxscyArKztcblxuXHRcdHN3aXRjaCAoIG1vZGUgKSB7XG5cblx0XHRcdGNhc2UgZ2wuVFJJQU5HTEVTOlxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMyApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5MSU5FUzpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMiApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBnbC5MSU5FX1NUUklQOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLSAxICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIGdsLkxJTkVfTE9PUDpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgZ2wuUE9JTlRTOlxuXHRcdFx0XHRyZW5kZXIucG9pbnRzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0cmVuZGVyLmNhbGxzID0gMDtcblx0XHRyZW5kZXIudHJpYW5nbGVzID0gMDtcblx0XHRyZW5kZXIucG9pbnRzID0gMDtcblx0XHRyZW5kZXIubGluZXMgPSAwO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG1lbW9yeTogbWVtb3J5LFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHRcdHByb2dyYW1zOiBudWxsLFxuXHRcdGF1dG9SZXNldDogdHJ1ZSxcblx0XHRyZXNldDogcmVzZXQsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTE1vcnBodGFyZ2V0cyggZ2wsIGNhcGFiaWxpdGllcywgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgbW9ycGhUZXh0dXJlcyA9IG5ldyBXZWFrTWFwKCk7XG5cdGNvbnN0IG1vcnBoID0gbmV3IFZlY3RvcjQoKTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0gKSB7XG5cblx0XHRjb25zdCBvYmplY3RJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcblxuXHRcdC8vIHRoZSBmb2xsb3dpbmcgZW5jb2RlcyBtb3JwaCB0YXJnZXRzIGludG8gYW4gYXJyYXkgb2YgZGF0YSB0ZXh0dXJlcy4gRWFjaCBsYXllciByZXByZXNlbnRzIGEgc2luZ2xlIG1vcnBoIHRhcmdldC5cblxuXHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXHRcdGNvbnN0IG1vcnBoVGFyZ2V0c0NvdW50ID0gKCBtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkgPyBtb3JwaEF0dHJpYnV0ZS5sZW5ndGggOiAwO1xuXG5cdFx0bGV0IGVudHJ5ID0gbW9ycGhUZXh0dXJlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIGVudHJ5ID09PSB1bmRlZmluZWQgfHwgZW50cnkuY291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkge1xuXG5cdFx0XHRpZiAoIGVudHJ5ICE9PSB1bmRlZmluZWQgKSBlbnRyeS50ZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0Y29uc3QgaGFzTW9ycGhQb3NpdGlvbiA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0Y29uc3QgaGFzTW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0Y29uc3QgaGFzTW9ycGhDb2xvcnMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZDtcblxuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uIHx8IFtdO1xuXHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBbXTtcblx0XHRcdGNvbnN0IG1vcnBoQ29sb3JzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yIHx8IFtdO1xuXG5cdFx0XHRsZXQgdmVydGV4RGF0YUNvdW50ID0gMDtcblxuXHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMTtcblx0XHRcdGlmICggaGFzTW9ycGhOb3JtYWxzID09PSB0cnVlICkgdmVydGV4RGF0YUNvdW50ID0gMjtcblx0XHRcdGlmICggaGFzTW9ycGhDb2xvcnMgPT09IHRydWUgKSB2ZXJ0ZXhEYXRhQ291bnQgPSAzO1xuXG5cdFx0XHRsZXQgd2lkdGggPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmNvdW50ICogdmVydGV4RGF0YUNvdW50O1xuXHRcdFx0bGV0IGhlaWdodCA9IDE7XG5cblx0XHRcdGlmICggd2lkdGggPiBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0aGVpZ2h0ID0gTWF0aC5jZWlsKCB3aWR0aCAvIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZSApO1xuXHRcdFx0XHR3aWR0aCA9IGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlU2l6ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KCB3aWR0aCAqIGhlaWdodCAqIDQgKiBtb3JwaFRhcmdldHNDb3VudCApO1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IERhdGFBcnJheVRleHR1cmUoIGJ1ZmZlciwgd2lkdGgsIGhlaWdodCwgbW9ycGhUYXJnZXRzQ291bnQgKTtcblx0XHRcdHRleHR1cmUudHlwZSA9IEZsb2F0VHlwZTtcblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHQvLyBmaWxsIGJ1ZmZlclxuXG5cdFx0XHRjb25zdCB2ZXJ0ZXhEYXRhU3RyaWRlID0gdmVydGV4RGF0YUNvdW50ICogNDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbW9ycGhUYXJnZXRzQ291bnQ7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXTtcblx0XHRcdFx0Y29uc3QgbW9ycGhDb2xvciA9IG1vcnBoQ29sb3JzWyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgb2Zmc2V0ID0gd2lkdGggKiBoZWlnaHQgKiA0ICogaTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtb3JwaFRhcmdldC5jb3VudDsgaiArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHN0cmlkZSA9IGogKiB2ZXJ0ZXhEYXRhU3RyaWRlO1xuXG5cdFx0XHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRtb3JwaC5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldCwgaiApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDAgXSA9IG1vcnBoLng7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDIgXSA9IG1vcnBoLno7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDMgXSA9IDA7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGhhc01vcnBoTm9ybWFscyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhOb3JtYWwsIGogKTtcblxuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA0IF0gPSBtb3JwaC54O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA1IF0gPSBtb3JwaC55O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA2IF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyA3IF0gPSAwO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBoYXNNb3JwaENvbG9ycyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0bW9ycGguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhDb2xvciwgaiApO1xuXG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDggXSA9IG1vcnBoLng7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDkgXSA9IG1vcnBoLnk7XG5cdFx0XHRcdFx0XHRidWZmZXJbIG9mZnNldCArIHN0cmlkZSArIDEwIF0gPSBtb3JwaC56O1xuXHRcdFx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBzdHJpZGUgKyAxMSBdID0gKCBtb3JwaENvbG9yLml0ZW1TaXplID09PSA0ICkgPyBtb3JwaC53IDogMTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0ZW50cnkgPSB7XG5cdFx0XHRcdGNvdW50OiBtb3JwaFRhcmdldHNDb3VudCxcblx0XHRcdFx0dGV4dHVyZTogdGV4dHVyZSxcblx0XHRcdFx0c2l6ZTogbmV3IFZlY3RvcjIoIHdpZHRoLCBoZWlnaHQgKVxuXHRcdFx0fTtcblxuXHRcdFx0bW9ycGhUZXh0dXJlcy5zZXQoIGdlb21ldHJ5LCBlbnRyeSApO1xuXG5cdFx0XHRmdW5jdGlvbiBkaXNwb3NlVGV4dHVyZSgpIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0XHRtb3JwaFRleHR1cmVzLmRlbGV0ZSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VUZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBkaXNwb3NlVGV4dHVyZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggPT09IHRydWUgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGV4dHVyZScsIG9iamVjdC5tb3JwaFRleHR1cmUsIHRleHR1cmVzICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsZXQgbW9ycGhJbmZsdWVuY2VzU3VtID0gMDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgb2JqZWN0SW5mbHVlbmNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzU3VtICs9IG9iamVjdEluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBtb3JwaEJhc2VJbmZsdWVuY2UgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA/IDEgOiAxIC0gbW9ycGhJbmZsdWVuY2VzU3VtO1xuXG5cblx0XHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2UnLCBtb3JwaEJhc2VJbmZsdWVuY2UgKTtcblx0XHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnLCBvYmplY3RJbmZsdWVuY2VzICk7XG5cblx0XHR9XG5cblx0XHRwcm9ncmFtLmdldFVuaWZvcm1zKCkuc2V0VmFsdWUoIGdsLCAnbW9ycGhUYXJnZXRzVGV4dHVyZScsIGVudHJ5LnRleHR1cmUsIHRleHR1cmVzICk7XG5cdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0c1RleHR1cmVTaXplJywgZW50cnkuc2l6ZSApO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMT2JqZWN0cyggZ2wsIGdlb21ldHJpZXMsIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0bGV0IHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QgKSB7XG5cblx0XHRjb25zdCBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cdFx0Y29uc3QgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggb2JqZWN0LCBnZW9tZXRyeSApO1xuXG5cdFx0Ly8gVXBkYXRlIG9uY2UgcGVyIGZyYW1lXG5cblx0XHRpZiAoIHVwZGF0ZU1hcC5nZXQoIGJ1ZmZlcmdlb21ldHJ5ICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTWFwLnNldCggYnVmZmVyZ2VvbWV0cnksIGZyYW1lICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdGlmICggb2JqZWN0Lmhhc0V2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25JbnN0YW5jZWRNZXNoRGlzcG9zZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB1cGRhdGVNYXAuZ2V0KCBvYmplY3QgKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIG9iamVjdC5pbnN0YW5jZU1hdHJpeCwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuaW5zdGFuY2VDb2xvciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBvYmplY3QuaW5zdGFuY2VDb2xvciwgZ2wuQVJSQVlfQlVGRkVSICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVwZGF0ZU1hcC5zZXQoIG9iamVjdCwgZnJhbWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCApIHtcblxuXHRcdFx0Y29uc3Qgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XG5cblx0XHRcdGlmICggdXBkYXRlTWFwLmdldCggc2tlbGV0b24gKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdFx0c2tlbGV0b24udXBkYXRlKCk7XG5cblx0XHRcdFx0dXBkYXRlTWFwLnNldCggc2tlbGV0b24sIGZyYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHVwZGF0ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uSW5zdGFuY2VkTWVzaERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgaW5zdGFuY2VkTWVzaCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdGluc3RhbmNlZE1lc2gucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbkluc3RhbmNlZE1lc2hEaXNwb3NlICk7XG5cblx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZU1hdHJpeCApO1xuXG5cdFx0aWYgKCBpbnN0YW5jZWRNZXNoLmluc3RhbmNlQ29sb3IgIT09IG51bGwgKSBhdHRyaWJ1dGVzLnJlbW92ZSggaW5zdGFuY2VkTWVzaC5pbnN0YW5jZUNvbG9yICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS5cbiAqIFRob3NlIGZvcm0gYSB0cmVlIHN0cnVjdHVyZSB3aXRoIGEgc3BlY2lhbCB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciB0aGUgcm9vdCxcbiAqIHdoaWNoIHlvdSBnZXQgYnkgY2FsbGluZyAnbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbdGV4dHVyZXNdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAndGV4dHVyZXMnIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApXG4gKlxuICogXHRcdHNldHMgdW5pZm9ybSB3aXRoICBuYW1lICduYW1lJyB0byAndmFsdWUnXG4gKlxuICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0bGlrZSAuc2V0IGZvciBhbiBvcHRpb25hbCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0XG4gKlxuICovXG5cblxuY29uc3QgZW1wdHlUZXh0dXJlID0gLypAX19QVVJFX18qLyBuZXcgVGV4dHVyZSgpO1xuXG5jb25zdCBlbXB0eVNoYWRvd1RleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBEZXB0aFRleHR1cmUoIDEsIDEgKTtcblxuY29uc3QgZW1wdHlBcnJheVRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBEYXRhQXJyYXlUZXh0dXJlKCk7XG5jb25zdCBlbXB0eTNkVGV4dHVyZSA9IC8qQF9fUFVSRV9fKi8gbmV3IERhdGEzRFRleHR1cmUoKTtcbmNvbnN0IGVtcHR5Q3ViZVRleHR1cmUgPSAvKkBfX1BVUkVfXyovIG5ldyBDdWJlVGV4dHVyZSgpO1xuXG4vLyAtLS0gVXRpbGl0aWVzIC0tLVxuXG4vLyBBcnJheSBDYWNoZXMgKHByb3ZpZGUgdHlwZWQgYXJyYXlzIGZvciB0ZW1wb3JhcnkgYnkgc2l6ZSlcblxuY29uc3QgYXJyYXlDYWNoZUYzMiA9IFtdO1xuY29uc3QgYXJyYXlDYWNoZUkzMiA9IFtdO1xuXG4vLyBGbG9hdDMyQXJyYXkgY2FjaGVzIHVzZWQgZm9yIHVwbG9hZGluZyBNYXRyaXggdW5pZm9ybXNcblxuY29uc3QgbWF0NGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggMTYgKTtcbmNvbnN0IG1hdDNhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDkgKTtcbmNvbnN0IG1hdDJhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDQgKTtcblxuLy8gRmxhdHRlbmluZyBmb3IgYXJyYXlzIG9mIHZlY3RvcnMgYW5kIG1hdHJpY2VzXG5cbmZ1bmN0aW9uIGZsYXR0ZW4oIGFycmF5LCBuQmxvY2tzLCBibG9ja1NpemUgKSB7XG5cblx0Y29uc3QgZmlyc3RFbGVtID0gYXJyYXlbIDAgXTtcblxuXHRpZiAoIGZpcnN0RWxlbSA8PSAwIHx8IGZpcnN0RWxlbSA+IDAgKSByZXR1cm4gYXJyYXk7XG5cdC8vIHVub3B0aW1pemVkOiAhIGlzTmFOKCBmaXJzdEVsZW0gKVxuXHQvLyBzZWUgaHR0cDovL2phY2tzb25kdW5zdGFuLmNvbS9hcnRpY2xlcy85ODNcblxuXHRjb25zdCBuID0gbkJsb2NrcyAqIGJsb2NrU2l6ZTtcblx0bGV0IHIgPSBhcnJheUNhY2hlRjMyWyBuIF07XG5cblx0aWYgKCByID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyID0gbmV3IEZsb2F0MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVGMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGlmICggbkJsb2NrcyAhPT0gMCApIHtcblxuXHRcdGZpcnN0RWxlbS50b0FycmF5KCByLCAwICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDEsIG9mZnNldCA9IDA7IGkgIT09IG5CbG9ja3M7ICsrIGkgKSB7XG5cblx0XHRcdG9mZnNldCArPSBibG9ja1NpemU7XG5cdFx0XHRhcnJheVsgaSBdLnRvQXJyYXkoIHIsIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbCggYSwgYiApIHtcblxuXHRpZiAoIGEubGVuZ3RoICE9PSBiLmxlbmd0aCApIHJldHVybiBmYWxzZTtcblxuXHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRpZiAoIGFbIGkgXSAhPT0gYlsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBjb3B5QXJyYXkoIGEsIGIgKSB7XG5cblx0Zm9yICggbGV0IGkgPSAwLCBsID0gYi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0YVsgaSBdID0gYlsgaSBdO1xuXG5cdH1cblxufVxuXG4vLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvblxuXG5mdW5jdGlvbiBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApIHtcblxuXHRsZXQgciA9IGFycmF5Q2FjaGVJMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgSW50MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVJMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHJbIGkgXSA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHI7XG5cbn1cblxuLy8gLS0tIFNldHRlcnMgLS0tXG5cbi8vIE5vdGU6IERlZmluaW5nIHRoZXNlIG1ldGhvZHMgZXh0ZXJuYWxseSwgYmVjYXVzZSB0aGV5IGNvbWUgaW4gYSBidW5jaFxuLy8gYW5kIHRoaXMgd2F5IHRoZWlyIG5hbWVzIG1pbmlmeS5cblxuLy8gU2luZ2xlIHNjYWxhclxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWYoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbi8vIFNpbmdsZSBmbG9hdCB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0yZiggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzZiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtM2YoIHRoaXMuYWRkciwgdi54LCB2LnksIHYueiApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cblx0XHR9XG5cblx0fSBlbHNlIGlmICggdi5yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYuciB8fCBjYWNoZVsgMSBdICE9PSB2LmcgfHwgY2FjaGVbIDIgXSAhPT0gdi5iICkge1xuXG5cdFx0XHRnbC51bmlmb3JtM2YoIHRoaXMuYWRkciwgdi5yLCB2LmcsIHYuYiApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi5yO1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYuZztcblx0XHRcdGNhY2hlWyAyIF0gPSB2LmI7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtM2Z2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGYoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiB8fCBjYWNoZVsgMyBdICE9PSB2LncgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm00ZiggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56LCB2LncgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXHRcdFx0Y2FjaGVbIDMgXSA9IHYudztcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm00ZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgbWF0cml4IChmcm9tIGZsYXQgYXJyYXkgb3IgVEhSRUUuTWF0cml4TilcblxuZnVuY3Rpb24gc2V0VmFsdWVNMiggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQyYXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0MmFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0zKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDNhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTQoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0NGFycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDRhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuLy8gU2luZ2xlIGludGVnZXIgLyBib29sZWFuXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGludGVnZXIgLyBib29sZWFuIHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTJpKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0zaSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zaXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRpKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSB1bnNpZ25lZCBpbnRlZ2VyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjF1aSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMXVpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBTaW5nbGUgdW5zaWduZWQgaW50ZWdlciB2ZWN0b3IgKGZyb20gZmxhdCBhcnJheSBvciBUSFJFRS5WZWN0b3JOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYydWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtMnVpKCB0aGlzLmFkZHIsIHYueCwgdi55ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTJ1aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzdWkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTN1aSggdGhpcy5hZGRyLCB2LngsIHYueSwgdi56ICk7XG5cblx0XHRcdGNhY2hlWyAwIF0gPSB2Lng7XG5cdFx0XHRjYWNoZVsgMSBdID0gdi55O1xuXHRcdFx0Y2FjaGVbIDIgXSA9IHYuejtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0zdWl2KCB0aGlzLmFkZHIsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNHVpKCBnbCwgdiApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCB2LnggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggY2FjaGVbIDAgXSAhPT0gdi54IHx8IGNhY2hlWyAxIF0gIT09IHYueSB8fCBjYWNoZVsgMiBdICE9PSB2LnogfHwgY2FjaGVbIDMgXSAhPT0gdi53ICkge1xuXG5cdFx0XHRnbC51bmlmb3JtNHVpKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTR1aXYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5cbi8vIFNpbmdsZSB0ZXh0dXJlICgyRCAvIEN1YmUpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHRjb25zdCBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdGNvbnN0IHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0bGV0IGVtcHR5VGV4dHVyZTJEO1xuXG5cdGlmICggdGhpcy50eXBlID09PSBnbC5TQU1QTEVSXzJEX1NIQURPVyApIHtcblxuXHRcdGVtcHR5U2hhZG93VGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gPSBMZXNzRXF1YWxDb21wYXJlOyAvLyAjMjg2NzBcblx0XHRlbXB0eVRleHR1cmUyRCA9IGVtcHR5U2hhZG93VGV4dHVyZTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0ZW1wdHlUZXh0dXJlMkQgPSBlbXB0eVRleHR1cmU7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmUyRCggdiB8fCBlbXB0eVRleHR1cmUyRCwgdW5pdCApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDNEMSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHYgfHwgZW1wdHkzZFRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHRjb25zdCB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmVDdWJlKCB2IHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQyREFycmF5MSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblx0Y29uc3QgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSggdiB8fCBlbXB0eUFycmF5VGV4dHVyZSwgdW5pdCApO1xuXG59XG5cbi8vIEhlbHBlciB0byBwaWNrIHRoZSByaWdodCBzZXR0ZXIgZm9yIHRoZSBzaW5ndWxhciBjYXNlXG5cbmZ1bmN0aW9uIGdldFNpbmd1bGFyU2V0dGVyKCB0eXBlICkge1xuXG5cdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRjYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmOyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmY7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZVYzZjsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZU0yOyAvLyBfTUFUMlxuXHRcdGNhc2UgMHg4YjViOiByZXR1cm4gc2V0VmFsdWVNMzsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTQ7IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZVYxaTsgLy8gSU5ULCBCT09MXG5cdFx0Y2FzZSAweDhiNTM6IGNhc2UgMHg4YjU3OiByZXR1cm4gc2V0VmFsdWVWMmk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2k7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTU6IGNhc2UgMHg4YjU5OiByZXR1cm4gc2V0VmFsdWVWNGk7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4MTQwNTogcmV0dXJuIHNldFZhbHVlVjF1aTsgLy8gVUlOVFxuXHRcdGNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4ZGM3OiByZXR1cm4gc2V0VmFsdWVWM3VpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4ZGM4OiByZXR1cm4gc2V0VmFsdWVWNHVpOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWU6IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGRkMjogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQxO1xuXG5cdFx0Y2FzZSAweDhiNWY6IC8vIFNBTVBMRVJfM0Rcblx0XHRjYXNlIDB4OGRjYjogLy8gSU5UX1NBTVBMRVJfM0Rcblx0XHRjYXNlIDB4OGRkMzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfM0Rcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQzRDE7XG5cblx0XHRjYXNlIDB4OGI2MDogLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGM1OiAvLyBTQU1QTEVSX0NVQkVfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUNjtcblxuXHRcdGNhc2UgMHg4ZGMxOiAvLyBTQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkY2Y6IC8vIElOVF9TQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkZDc6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZXG5cdFx0Y2FzZSAweDhkYzQ6IC8vIFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMkRBcnJheTE7XG5cblx0fVxuXG59XG5cblxuLy8gQXJyYXkgb2Ygc2NhbGFyc1xuXG5mdW5jdGlvbiBzZXRWYWx1ZVYxZkFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMWZ2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG4vLyBBcnJheSBvZiB2ZWN0b3JzIChmcm9tIGZsYXQgYXJyYXkgb3IgYXJyYXkgb2YgVEhSRUUuVmVjdG9yTilcblxuZnVuY3Rpb24gc2V0VmFsdWVWMmZBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApO1xuXG5cdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNmQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDMgKTtcblxuXHRnbC51bmlmb3JtM2Z2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0ZkFycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA0ICk7XG5cblx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgbWF0cmljZXMgKGZyb20gZmxhdCBhcnJheSBvciBhcnJheSBvZiBUSFJFRS5NYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yQXJyYXkoIGdsLCB2ICkge1xuXG5cdGNvbnN0IGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTtcblxuXHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNM0FycmF5KCBnbCwgdiApIHtcblxuXHRjb25zdCBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA5ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTRBcnJheSggZ2wsIHYgKSB7XG5cblx0Y29uc3QgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMTYgKTtcblxuXHRnbC51bmlmb3JtTWF0cml4NGZ2KCB0aGlzLmFkZHIsIGZhbHNlLCBkYXRhICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgaW50ZWdlciAvIGJvb2xlYW5cblxuZnVuY3Rpb24gc2V0VmFsdWVWMWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgaW50ZWdlciAvIGJvb2xlYW4gdmVjdG9ycyAoZnJvbSBmbGF0IGFycmF5KVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtNGl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG4vLyBBcnJheSBvZiB1bnNpZ25lZCBpbnRlZ2VyXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjF1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMXVpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuLy8gQXJyYXkgb2YgdW5zaWduZWQgaW50ZWdlciB2ZWN0b3JzIChmcm9tIGZsYXQgYXJyYXkpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJ1aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMnVpdiggdGhpcy5hZGRyLCB2ICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWM3VpQXJyYXkoIGdsLCB2ICkge1xuXG5cdGdsLnVuaWZvcm0zdWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0dWlBcnJheSggZ2wsIHYgKSB7XG5cblx0Z2wudW5pZm9ybTR1aXYoIHRoaXMuYWRkciwgdiApO1xuXG59XG5cblxuLy8gQXJyYXkgb2YgdGV4dHVyZXMgKDJEIC8gM0QgLyBDdWJlIC8gMkRBcnJheSlcblxuZnVuY3Rpb24gc2V0VmFsdWVUMUFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0aWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzREFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0aWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUzRCggdlsgaSBdIHx8IGVtcHR5M2RUZXh0dXJlLCB1bml0c1sgaSBdICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVDZBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRjb25zdCBuID0gdi5sZW5ndGg7XG5cblx0Y29uc3QgdW5pdHMgPSBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApO1xuXG5cdGlmICggISBhcnJheXNFcXVhbCggY2FjaGUsIHVuaXRzICkgKSB7XG5cblx0XHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB1bml0cyApO1xuXG5cdH1cblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVUMkRBcnJheUFycmF5KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0Y29uc3QgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGNvbnN0IG4gPSB2Lmxlbmd0aDtcblxuXHRjb25zdCB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0aWYgKCAhIGFycmF5c0VxdWFsKCBjYWNoZSwgdW5pdHMgKSApIHtcblxuXHRcdGdsLnVuaWZvcm0xaXYoIHRoaXMuYWRkciwgdW5pdHMgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHVuaXRzICk7XG5cblx0fVxuXG5cdGZvciAoIGxldCBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCB2WyBpIF0gfHwgZW1wdHlBcnJheVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciBhIHB1cmUgKGJvdHRvbS1sZXZlbCkgYXJyYXlcblxuZnVuY3Rpb24gZ2V0UHVyZUFycmF5U2V0dGVyKCB0eXBlICkge1xuXG5cdHN3aXRjaCAoIHR5cGUgKSB7XG5cblx0XHRjYXNlIDB4MTQwNjogcmV0dXJuIHNldFZhbHVlVjFmQXJyYXk7IC8vIEZMT0FUXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyZkFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2ZBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1MjogcmV0dXJuIHNldFZhbHVlVjRmQXJyYXk7IC8vIF9WRUM0XG5cblx0XHRjYXNlIDB4OGI1YTogcmV0dXJuIHNldFZhbHVlTTJBcnJheTsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTNBcnJheTsgLy8gX01BVDNcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTRBcnJheTsgLy8gX01BVDRcblxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlVjFpQXJyYXk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhiNTQ6IGNhc2UgMHg4YjU4OiByZXR1cm4gc2V0VmFsdWVWM2lBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZVY0aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWlBcnJheTsgLy8gVUlOVFxuXHRcdGNhc2UgMHg4ZGM2OiByZXR1cm4gc2V0VmFsdWVWMnVpQXJyYXk7IC8vIF9WRUMyXG5cdFx0Y2FzZSAweDhkYzc6IHJldHVybiBzZXRWYWx1ZVYzdWlBcnJheTsgLy8gX1ZFQzNcblx0XHRjYXNlIDB4OGRjODogcmV0dXJuIHNldFZhbHVlVjR1aUFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWU6IC8vIFNBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGQ2NjogLy8gU0FNUExFUl9FWFRFUk5BTF9PRVNcblx0XHRjYXNlIDB4OGRjYTogLy8gSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGRkMjogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRcblx0XHRjYXNlIDB4OGI2MjogLy8gU0FNUExFUl8yRF9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQxQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI1ZjogLy8gU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGNiOiAvLyBJTlRfU0FNUExFUl8zRFxuXHRcdGNhc2UgMHg4ZGQzOiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8zRFxuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDNEQXJyYXk7XG5cblx0XHRjYXNlIDB4OGI2MDogLy8gU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkY2M6IC8vIElOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRkNDogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGM1OiAvLyBTQU1QTEVSX0NVQkVfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUNkFycmF5O1xuXG5cdFx0Y2FzZSAweDhkYzE6IC8vIFNBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjZjogLy8gSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRkNzogLy8gVU5TSUdORURfSU5UX1NBTVBMRVJfMkRfQVJSQVlcblx0XHRjYXNlIDB4OGRjNDogLy8gU0FNUExFUl8yRF9BUlJBWV9TSEFET1dcblx0XHRcdHJldHVybiBzZXRWYWx1ZVQyREFycmF5QXJyYXk7XG5cblx0fVxuXG59XG5cbi8vIC0tLSBVbmlmb3JtIENsYXNzZXMgLS0tXG5cbmNsYXNzIFNpbmdsZVVuaWZvcm0ge1xuXG5cdGNvbnN0cnVjdG9yKCBpZCwgYWN0aXZlSW5mbywgYWRkciApIHtcblxuXHRcdHRoaXMuaWQgPSBpZDtcblx0XHR0aGlzLmFkZHIgPSBhZGRyO1xuXHRcdHRoaXMuY2FjaGUgPSBbXTtcblx0XHR0aGlzLnR5cGUgPSBhY3RpdmVJbmZvLnR5cGU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IGdldFNpbmd1bGFyU2V0dGVyKCBhY3RpdmVJbmZvLnR5cGUgKTtcblxuXHRcdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxuXHR9XG5cbn1cblxuY2xhc3MgUHVyZUFycmF5VW5pZm9ybSB7XG5cblx0Y29uc3RydWN0b3IoIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdFx0dGhpcy5pZCA9IGlkO1xuXHRcdHRoaXMuYWRkciA9IGFkZHI7XG5cdFx0dGhpcy5jYWNoZSA9IFtdO1xuXHRcdHRoaXMudHlwZSA9IGFjdGl2ZUluZm8udHlwZTtcblx0XHR0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IGdldFB1cmVBcnJheVNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0XHQvLyB0aGlzLnBhdGggPSBhY3RpdmVJbmZvLm5hbWU7IC8vIERFQlVHXG5cblx0fVxuXG59XG5cbmNsYXNzIFN0cnVjdHVyZWRVbmlmb3JtIHtcblxuXHRjb25zdHJ1Y3RvciggaWQgKSB7XG5cblx0XHR0aGlzLmlkID0gaWQ7XG5cblx0XHR0aGlzLnNlcSA9IFtdO1xuXHRcdHRoaXMubWFwID0ge307XG5cblx0fVxuXG5cdHNldFZhbHVlKCBnbCwgdmFsdWUsIHRleHR1cmVzICkge1xuXG5cdFx0Y29uc3Qgc2VxID0gdGhpcy5zZXE7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB1ID0gc2VxWyBpIF07XG5cdFx0XHR1LnNldFZhbHVlKCBnbCwgdmFsdWVbIHUuaWQgXSwgdGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gLS0tIFRvcC1sZXZlbCAtLS1cblxuLy8gUGFyc2VyIC0gYnVpbGRzIHVwIHRoZSBwcm9wZXJ0eSB0cmVlIGZyb20gdGhlIHBhdGggc3RyaW5nc1xuXG5jb25zdCBSZVBhdGhQYXJ0ID0gLyhcXHcrKShcXF0pPyhcXFt8XFwuKT8vZztcblxuLy8gZXh0cmFjdHNcbi8vIFx0LSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpXG4vL1xuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcbi8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzXG4vLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy5cblxuZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkge1xuXG5cdGNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApO1xuXHRjb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0O1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkge1xuXG5cdGNvbnN0IHBhdGggPSBhY3RpdmVJbmZvLm5hbWUsXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG5cdC8vIHJlc2V0IFJlZ0V4cCBvYmplY3QsIGJlY2F1c2Ugb2YgdGhlIGVhcmx5IGV4aXQgb2YgYSBwcmV2aW91cyBydW5cblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xuXG5cdHdoaWxlICggdHJ1ZSApIHtcblxuXHRcdGNvbnN0IG1hdGNoID0gUmVQYXRoUGFydC5leGVjKCBwYXRoICksXG5cdFx0XHRtYXRjaEVuZCA9IFJlUGF0aFBhcnQubGFzdEluZGV4O1xuXG5cdFx0bGV0IGlkID0gbWF0Y2hbIDEgXTtcblx0XHRjb25zdCBpZElzSW5kZXggPSBtYXRjaFsgMiBdID09PSAnXScsXG5cdFx0XHRzdWJzY3JpcHQgPSBtYXRjaFsgMyBdO1xuXG5cdFx0aWYgKCBpZElzSW5kZXggKSBpZCA9IGlkIHwgMDsgLy8gY29udmVydCB0byBpbnRlZ2VyXG5cblx0XHRpZiAoIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCApIHtcblxuXHRcdFx0Ly8gYmFyZSBuYW1lIG9yIFwicHVyZVwiIGJvdHRvbS1sZXZlbCBhcnJheSBcIlswXVwiIHN1ZmZpeFxuXG5cdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0bmV3IFNpbmdsZVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkgOlxuXHRcdFx0XHRuZXcgUHVyZUFycmF5VW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHN0ZXAgaW50byBpbm5lciBub2RlIC8gY3JlYXRlIGl0IGluIGNhc2UgaXQgZG9lc24ndCBleGlzdFxuXG5cdFx0XHRjb25zdCBtYXAgPSBjb250YWluZXIubWFwO1xuXHRcdFx0bGV0IG5leHQgPSBtYXBbIGlkIF07XG5cblx0XHRcdGlmICggbmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oIGlkICk7XG5cdFx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgbmV4dCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbi8vIFJvb3QgQ29udGFpbmVyXG5cbmNsYXNzIFdlYkdMVW5pZm9ybXMge1xuXG5cdGNvbnN0cnVjdG9yKCBnbCwgcHJvZ3JhbSApIHtcblxuXHRcdHRoaXMuc2VxID0gW107XG5cdFx0dGhpcy5tYXAgPSB7fTtcblxuXHRcdGNvbnN0IG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKCBwcm9ncmFtLCBpICksXG5cdFx0XHRcdGFkZHIgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oIHByb2dyYW0sIGluZm8ubmFtZSApO1xuXG5cdFx0XHRwYXJzZVVuaWZvcm0oIGluZm8sIGFkZHIsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0c2V0VmFsdWUoIGdsLCBuYW1lLCB2YWx1ZSwgdGV4dHVyZXMgKSB7XG5cblx0XHRjb25zdCB1ID0gdGhpcy5tYXBbIG5hbWUgXTtcblxuXHRcdGlmICggdSAhPT0gdW5kZWZpbmVkICkgdS5zZXRWYWx1ZSggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApO1xuXG5cdH1cblxuXHRzZXRPcHRpb25hbCggZ2wsIG9iamVjdCwgbmFtZSApIHtcblxuXHRcdGNvbnN0IHYgPSBvYmplY3RbIG5hbWUgXTtcblxuXHRcdGlmICggdiAhPT0gdW5kZWZpbmVkICkgdGhpcy5zZXRWYWx1ZSggZ2wsIG5hbWUsIHYgKTtcblxuXHR9XG5cblx0c3RhdGljIHVwbG9hZCggZ2wsIHNlcSwgdmFsdWVzLCB0ZXh0dXJlcyApIHtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGNvbnN0IHUgPSBzZXFbIGkgXSxcblx0XHRcdFx0diA9IHZhbHVlc1sgdS5pZCBdO1xuXG5cdFx0XHRpZiAoIHYubmVlZHNVcGRhdGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIG5vdGU6IGFsd2F5cyB1cGRhdGluZyB3aGVuIC5uZWVkc1VwZGF0ZSBpcyB1bmRlZmluZWRcblx0XHRcdFx0dS5zZXRWYWx1ZSggZ2wsIHYudmFsdWUsIHRleHR1cmVzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0c3RhdGljIHNlcVdpdGhWYWx1ZSggc2VxLCB2YWx1ZXMgKSB7XG5cblx0XHRjb25zdCByID0gW107XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRjb25zdCB1ID0gc2VxWyBpIF07XG5cdFx0XHRpZiAoIHUuaWQgaW4gdmFsdWVzICkgci5wdXNoKCB1ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcjtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xTaGFkZXIoIGdsLCB0eXBlLCBzdHJpbmcgKSB7XG5cblx0Y29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKCB0eXBlICk7XG5cblx0Z2wuc2hhZGVyU291cmNlKCBzaGFkZXIsIHN0cmluZyApO1xuXHRnbC5jb21waWxlU2hhZGVyKCBzaGFkZXIgKTtcblxuXHRyZXR1cm4gc2hhZGVyO1xuXG59XG5cbi8vIEZyb20gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9LSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUvXG5jb25zdCBDT01QTEVUSU9OX1NUQVRVU19LSFIgPSAweDkxQjE7XG5cbmxldCBwcm9ncmFtSWRDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGhhbmRsZVNvdXJjZSggc3RyaW5nLCBlcnJvckxpbmUgKSB7XG5cblx0Y29uc3QgbGluZXMgPSBzdHJpbmcuc3BsaXQoICdcXG4nICk7XG5cdGNvbnN0IGxpbmVzMiA9IFtdO1xuXG5cdGNvbnN0IGZyb20gPSBNYXRoLm1heCggZXJyb3JMaW5lIC0gNiwgMCApO1xuXHRjb25zdCB0byA9IE1hdGgubWluKCBlcnJvckxpbmUgKyA2LCBsaW5lcy5sZW5ndGggKTtcblxuXHRmb3IgKCBsZXQgaSA9IGZyb207IGkgPCB0bzsgaSArKyApIHtcblxuXHRcdGNvbnN0IGxpbmUgPSBpICsgMTtcblx0XHRsaW5lczIucHVzaCggYCR7bGluZSA9PT0gZXJyb3JMaW5lID8gJz4nIDogJyAnfSAke2xpbmV9OiAke2xpbmVzWyBpIF19YCApO1xuXG5cdH1cblxuXHRyZXR1cm4gbGluZXMyLmpvaW4oICdcXG4nICk7XG5cbn1cblxuY29uc3QgX20wID0gLypAX19QVVJFX18qLyBuZXcgTWF0cml4MygpO1xuXG5mdW5jdGlvbiBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGNvbG9yU3BhY2UgKSB7XG5cblx0Q29sb3JNYW5hZ2VtZW50Ll9nZXRNYXRyaXgoIF9tMCwgQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlLCBjb2xvclNwYWNlICk7XG5cblx0Y29uc3QgZW5jb2RpbmdNYXRyaXggPSBgbWF0MyggJHsgX20wLmVsZW1lbnRzLm1hcCggKCB2ICkgPT4gdi50b0ZpeGVkKCA0ICkgKSB9IClgO1xuXG5cdHN3aXRjaCAoIENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggY29sb3JTcGFjZSApICkge1xuXG5cdFx0Y2FzZSBMaW5lYXJUcmFuc2Zlcjpcblx0XHRcdHJldHVybiBbIGVuY29kaW5nTWF0cml4LCAnTGluZWFyVHJhbnNmZXJPRVRGJyBdO1xuXG5cdFx0Y2FzZSBTUkdCVHJhbnNmZXI6XG5cdFx0XHRyZXR1cm4gWyBlbmNvZGluZ01hdHJpeCwgJ3NSR0JUcmFuc2Zlck9FVEYnIF07XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCBjb2xvciBzcGFjZTogJywgY29sb3JTcGFjZSApO1xuXHRcdFx0cmV0dXJuIFsgZW5jb2RpbmdNYXRyaXgsICdMaW5lYXJUcmFuc2Zlck9FVEYnIF07XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFNoYWRlckVycm9ycyggZ2wsIHNoYWRlciwgdHlwZSApIHtcblxuXHRjb25zdCBzdGF0dXMgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoIHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMgKTtcblx0Y29uc3QgZXJyb3JzID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkudHJpbSgpO1xuXG5cdGlmICggc3RhdHVzICYmIGVycm9ycyA9PT0gJycgKSByZXR1cm4gJyc7XG5cblx0Y29uc3QgZXJyb3JNYXRjaGVzID0gL0VSUk9SOiAwOihcXGQrKS8uZXhlYyggZXJyb3JzICk7XG5cdGlmICggZXJyb3JNYXRjaGVzICkge1xuXG5cdFx0Ly8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb25cblx0XHQvLyBjb25zb2xlLmxvZyggJyoqJyArIHR5cGUgKyAnKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7XG5cblx0XHRjb25zdCBlcnJvckxpbmUgPSBwYXJzZUludCggZXJyb3JNYXRjaGVzWyAxIF0gKTtcblx0XHRyZXR1cm4gdHlwZS50b1VwcGVyQ2FzZSgpICsgJ1xcblxcbicgKyBlcnJvcnMgKyAnXFxuXFxuJyArIGhhbmRsZVNvdXJjZSggZ2wuZ2V0U2hhZGVyU291cmNlKCBzaGFkZXIgKSwgZXJyb3JMaW5lICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBlcnJvcnM7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBjb2xvclNwYWNlICkge1xuXG5cdGNvbnN0IGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGNvbG9yU3BhY2UgKTtcblxuXHRyZXR1cm4gW1xuXG5cdFx0YHZlYzQgJHtmdW5jdGlvbk5hbWV9KCB2ZWM0IHZhbHVlICkge2AsXG5cblx0XHRgXHRyZXR1cm4gJHtjb21wb25lbnRzWyAxIF19KCB2ZWM0KCB2YWx1ZS5yZ2IgKiAke2NvbXBvbmVudHNbIDAgXX0sIHZhbHVlLmEgKSApO2AsXG5cblx0XHQnfScsXG5cblx0XS5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0bGV0IHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDaW5lb25Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDaW5lb24nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIEFDRVNGaWxtaWNUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBBZ1hUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBZ1gnO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIE5ldXRyYWxUb25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdOZXV0cmFsJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBDdXN0b21Ub25lTWFwcGluZzpcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdDdXN0b20nO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBVbnN1cHBvcnRlZCB0b25lTWFwcGluZzonLCB0b25lTWFwcGluZyApO1xuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ0xpbmVhcic7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmNvbnN0IF92MCA9IC8qQF9fUFVSRV9fKi8gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gZ2V0THVtaW5hbmNlRnVuY3Rpb24oKSB7XG5cblx0Q29sb3JNYW5hZ2VtZW50LmdldEx1bWluYW5jZUNvZWZmaWNpZW50cyggX3YwICk7XG5cblx0Y29uc3QgciA9IF92MC54LnRvRml4ZWQoIDQgKTtcblx0Y29uc3QgZyA9IF92MC55LnRvRml4ZWQoIDQgKTtcblx0Y29uc3QgYiA9IF92MC56LnRvRml4ZWQoIDQgKTtcblxuXHRyZXR1cm4gW1xuXG5cdFx0J2Zsb2F0IGx1bWluYW5jZSggY29uc3QgaW4gdmVjMyByZ2IgKSB7JyxcblxuXHRcdGBcdGNvbnN0IHZlYzMgd2VpZ2h0cyA9IHZlYzMoICR7IHIgfSwgJHsgZyB9LCAkeyBiIH0gKTtgLFxuXG5cdFx0J1x0cmV0dXJuIGRvdCggd2VpZ2h0cywgcmdiICk7JyxcblxuXHRcdCd9J1xuXG5cdF0uam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVZlcnRleEV4dGVuc2lvbnMoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc3QgY2h1bmtzID0gW1xuXHRcdHBhcmFtZXRlcnMuZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZSA/ICcjZXh0ZW5zaW9uIEdMX0FOR0xFX2NsaXBfY3VsbF9kaXN0YW5jZSA6IHJlcXVpcmUnIDogJycsXG5cdFx0cGFyYW1ldGVycy5leHRlbnNpb25NdWx0aURyYXcgPyAnI2V4dGVuc2lvbiBHTF9BTkdMRV9tdWx0aV9kcmF3IDogcmVxdWlyZScgOiAnJyxcblx0XTtcblxuXHRyZXR1cm4gY2h1bmtzLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURlZmluZXMoIGRlZmluZXMgKSB7XG5cblx0Y29uc3QgY2h1bmtzID0gW107XG5cblx0Zm9yICggY29uc3QgbmFtZSBpbiBkZWZpbmVzICkge1xuXG5cdFx0Y29uc3QgdmFsdWUgPSBkZWZpbmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0Y2h1bmtzLnB1c2goICcjZGVmaW5lICcgKyBuYW1lICsgJyAnICsgdmFsdWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApIHtcblxuXHRjb25zdCBhdHRyaWJ1dGVzID0ge307XG5cblx0Y29uc3QgbiA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTICk7XG5cblx0Zm9yICggbGV0IGkgPSAwOyBpIDwgbjsgaSArKyApIHtcblxuXHRcdGNvbnN0IGluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoIHByb2dyYW0sIGkgKTtcblx0XHRjb25zdCBuYW1lID0gaW5mby5uYW1lO1xuXG5cdFx0bGV0IGxvY2F0aW9uU2l6ZSA9IDE7XG5cdFx0aWYgKCBpbmZvLnR5cGUgPT09IGdsLkZMT0FUX01BVDIgKSBsb2NhdGlvblNpemUgPSAyO1xuXHRcdGlmICggaW5mby50eXBlID09PSBnbC5GTE9BVF9NQVQzICkgbG9jYXRpb25TaXplID0gMztcblx0XHRpZiAoIGluZm8udHlwZSA9PT0gZ2wuRkxPQVRfTUFUNCApIGxvY2F0aW9uU2l6ZSA9IDQ7XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUHJvZ3JhbTogQUNUSVZFIFZFUlRFWCBBVFRSSUJVVEU6JywgbmFtZSwgaSApO1xuXG5cdFx0YXR0cmlidXRlc1sgbmFtZSBdID0ge1xuXHRcdFx0dHlwZTogaW5mby50eXBlLFxuXHRcdFx0bG9jYXRpb246IGdsLmdldEF0dHJpYkxvY2F0aW9uKCBwcm9ncmFtLCBuYW1lICksXG5cdFx0XHRsb2NhdGlvblNpemU6IGxvY2F0aW9uU2l6ZVxuXHRcdH07XG5cblx0fVxuXG5cdHJldHVybiBhdHRyaWJ1dGVzO1xuXG59XG5cbmZ1bmN0aW9uIGZpbHRlckVtcHR5TGluZSggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmcgIT09ICcnO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VMaWdodE51bXMoIHN0cmluZywgcGFyYW1ldGVycyApIHtcblxuXHRjb25zdCBudW1TcG90TGlnaHRDb29yZHMgPSBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKyBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodE1hcHMgLSBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcztcblxuXHRyZXR1cm4gc3RyaW5nXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUX01BUFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRNYXBzIClcblx0XHQucmVwbGFjZSggL05VTV9TUE9UX0xJR0hUX0NPT1JEUy9nLCBudW1TcG90TGlnaHRDb29yZHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1JFQ1RfQVJFQV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUE9JTlRfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX0hFTUlfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtSGVtaUxpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fRElSX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XU19XSVRIX01BUFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRTaGFkb3dzV2l0aE1hcHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVNwb3RMaWdodFNoYWRvd3MgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggc3RyaW5nLCBwYXJhbWV0ZXJzICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggL05VTV9DTElQUElOR19QTEFORVMvZywgcGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyApXG5cdFx0LnJlcGxhY2UoIC9VTklPTl9DTElQUElOR19QTEFORVMvZywgKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIC0gcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICkgKTtcblxufVxuXG4vLyBSZXNvbHZlIEluY2x1ZGVzXG5cbmNvbnN0IGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBpbmNsdWRlUGF0dGVybiwgaW5jbHVkZVJlcGxhY2VyICk7XG5cbn1cblxuY29uc3Qgc2hhZGVyQ2h1bmtNYXAgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGluY2x1ZGVSZXBsYWNlciggbWF0Y2gsIGluY2x1ZGUgKSB7XG5cblx0bGV0IHN0cmluZyA9IFNoYWRlckNodW5rWyBpbmNsdWRlIF07XG5cblx0aWYgKCBzdHJpbmcgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGNvbnN0IG5ld0luY2x1ZGUgPSBzaGFkZXJDaHVua01hcC5nZXQoIGluY2x1ZGUgKTtcblxuXHRcdGlmICggbmV3SW5jbHVkZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdHJpbmcgPSBTaGFkZXJDaHVua1sgbmV3SW5jbHVkZSBdO1xuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2hhZGVyIGNodW5rIFwiJXNcIiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgXCIlc1wiIGluc3RlYWQuJywgaW5jbHVkZSwgbmV3SW5jbHVkZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDwnICsgaW5jbHVkZSArICc+JyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKTtcblxufVxuXG4vLyBVbnJvbGwgTG9vcHNcblxuY29uc3QgdW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxccytmb3JcXHMqXFwoXFxzKmludFxccytpXFxzKj1cXHMqKFxcZCspXFxzKjtcXHMqaVxccyo8XFxzKihcXGQrKVxccyo7XFxzKmlcXHMqXFwrXFwrXFxzKlxcKVxccyp7KFtcXHNcXFNdKz8pfVxccysjcHJhZ21hIHVucm9sbF9sb29wX2VuZC9nO1xuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggdW5yb2xsTG9vcFBhdHRlcm4sIGxvb3BSZXBsYWNlciApO1xuXG59XG5cbmZ1bmN0aW9uIGxvb3BSZXBsYWNlciggbWF0Y2gsIHN0YXJ0LCBlbmQsIHNuaXBwZXQgKSB7XG5cblx0bGV0IHN0cmluZyA9ICcnO1xuXG5cdGZvciAoIGxldCBpID0gcGFyc2VJbnQoIHN0YXJ0ICk7IGkgPCBwYXJzZUludCggZW5kICk7IGkgKysgKSB7XG5cblx0XHRzdHJpbmcgKz0gc25pcHBldFxuXHRcdFx0LnJlcGxhY2UoIC9cXFtcXHMqaVxccypcXF0vZywgJ1sgJyArIGkgKyAnIF0nIClcblx0XHRcdC5yZXBsYWNlKCAvVU5ST0xMRURfTE9PUF9JTkRFWC9nLCBpICk7XG5cblx0fVxuXG5cdHJldHVybiBzdHJpbmc7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gZ2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSB7XG5cblx0bGV0IHByZWNpc2lvbnN0cmluZyA9IGBwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gZmxvYXQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpbnQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyQ3ViZTtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIzRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHNhbXBsZXIyREFycmF5O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlcjJEU2hhZG93O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gc2FtcGxlckN1YmVTaGFkb3c7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBzYW1wbGVyMkRBcnJheVNoYWRvdztcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IGlzYW1wbGVyMkQ7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSBpc2FtcGxlcjNEO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gaXNhbXBsZXJDdWJlO1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gaXNhbXBsZXIyREFycmF5O1xuXHRwcmVjaXNpb24gJHtwYXJhbWV0ZXJzLnByZWNpc2lvbn0gdXNhbXBsZXIyRDtcblx0cHJlY2lzaW9uICR7cGFyYW1ldGVycy5wcmVjaXNpb259IHVzYW1wbGVyM0Q7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlckN1YmU7XG5cdHByZWNpc2lvbiAke3BhcmFtZXRlcnMucHJlY2lzaW9ufSB1c2FtcGxlcjJEQXJyYXk7XG5cdGA7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gJ2hpZ2hwJyApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSAnXFxuI2RlZmluZSBISUdIX1BSRUNJU0lPTic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09ICdtZWRpdW1wJyApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSAnXFxuI2RlZmluZSBNRURJVU1fUFJFQ0lTSU9OJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gJ2xvd3AnICkge1xuXG5cdFx0cHJlY2lzaW9uc3RyaW5nICs9ICdcXG4jZGVmaW5lIExPV19QUkVDSVNJT04nO1xuXG5cdH1cblxuXHRyZXR1cm4gcHJlY2lzaW9uc3RyaW5nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHRsZXQgc2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9CQVNJQyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFBDRlNvZnRTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRl9TT0ZUJztcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcFR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfVlNNJztcblxuXHR9XG5cblx0cmV0dXJuIHNoYWRvd01hcFR5cGVEZWZpbmU7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXG5cdGlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7XG5cblx0XHRzd2l0Y2ggKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRSc7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkVfVVYnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGVudk1hcFR5cGVEZWZpbmU7XG5cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZNYXBNb2RlRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBNb2RlRGVmaW5lID0gJ0VOVk1BUF9NT0RFX1JFRkxFQ1RJT04nO1xuXG5cdGlmICggcGFyYW1ldGVycy5lbnZNYXAgKSB7XG5cblx0XHRzd2l0Y2ggKCBwYXJhbWV0ZXJzLmVudk1hcE1vZGUgKSB7XG5cblx0XHRcdGNhc2UgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOlxuXG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwTW9kZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdGxldCBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTk9ORSc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUN1YmVVVlNpemUoIHBhcmFtZXRlcnMgKSB7XG5cblx0Y29uc3QgaW1hZ2VIZWlnaHQgPSBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVVkhlaWdodDtcblxuXHRpZiAoIGltYWdlSGVpZ2h0ID09PSBudWxsICkgcmV0dXJuIG51bGw7XG5cblx0Y29uc3QgbWF4TWlwID0gTWF0aC5sb2cyKCBpbWFnZUhlaWdodCApIC0gMjtcblxuXHRjb25zdCB0ZXhlbEhlaWdodCA9IDEuMCAvIGltYWdlSGVpZ2h0O1xuXG5cdGNvbnN0IHRleGVsV2lkdGggPSAxLjAgLyAoIDMgKiBNYXRoLm1heCggTWF0aC5wb3coIDIsIG1heE1pcCApLCA3ICogMTYgKSApO1xuXG5cdHJldHVybiB7IHRleGVsV2lkdGgsIHRleGVsSGVpZ2h0LCBtYXhNaXAgfTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycywgYmluZGluZ1N0YXRlcyApIHtcblxuXHQvLyBUT0RPIFNlbmQgdGhpcyBldmVudCB0byBUaHJlZS5qcyBEZXZUb29sc1xuXHQvLyBjb25zb2xlLmxvZyggJ1dlYkdMUHJvZ3JhbScsIGNhY2hlS2V5ICk7XG5cblx0Y29uc3QgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XG5cblx0Y29uc3QgZGVmaW5lcyA9IHBhcmFtZXRlcnMuZGVmaW5lcztcblxuXHRsZXQgdmVydGV4U2hhZGVyID0gcGFyYW1ldGVycy52ZXJ0ZXhTaGFkZXI7XG5cdGxldCBmcmFnbWVudFNoYWRlciA9IHBhcmFtZXRlcnMuZnJhZ21lbnRTaGFkZXI7XG5cblx0Y29uc3Qgc2hhZG93TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApO1xuXHRjb25zdCBlbnZNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcE1vZGVEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUoIHBhcmFtZXRlcnMgKTtcblx0Y29uc3QgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cdGNvbnN0IGVudk1hcEN1YmVVVlNpemUgPSBnZW5lcmF0ZUN1YmVVVlNpemUoIHBhcmFtZXRlcnMgKTtcblxuXHRjb25zdCBjdXN0b21WZXJ0ZXhFeHRlbnNpb25zID0gZ2VuZXJhdGVWZXJ0ZXhFeHRlbnNpb25zKCBwYXJhbWV0ZXJzICk7XG5cblx0Y29uc3QgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdGNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cblx0bGV0IHByZWZpeFZlcnRleCwgcHJlZml4RnJhZ21lbnQ7XG5cdGxldCB2ZXJzaW9uU3RyaW5nID0gcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA/ICcjdmVyc2lvbiAnICsgcGFyYW1ldGVycy5nbHNsVmVyc2lvbiArICdcXG4nIDogJyc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9UWVBFICcgKyBwYXJhbWV0ZXJzLnNoYWRlclR5cGUsXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgcGFyYW1ldGVycy5zaGFkZXJOYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfVFlQRSAnICsgcGFyYW1ldGVycy5zaGFkZXJUeXBlLFxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdGdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9UWVBFICcgKyBwYXJhbWV0ZXJzLnNoYWRlclR5cGUsXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgcGFyYW1ldGVycy5zaGFkZXJOYW1lLFxuXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmV4dGVuc2lvbkNsaXBDdWxsRGlzdGFuY2UgPyAnI2RlZmluZSBVU0VfQ0xJUF9ESVNUQU5DRScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYmF0Y2hpbmcgPyAnI2RlZmluZSBVU0VfQkFUQ0hJTkcnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJhdGNoaW5nQ29sb3IgPyAnI2RlZmluZSBVU0VfQkFUQ0hJTkdfQ09MT1InIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmluc3RhbmNpbmcgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yID8gJyNkZWZpbmUgVVNFX0lOU1RBTkNJTkdfQ09MT1InIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmluc3RhbmNpbmdNb3JwaCA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HX01PUlBIJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZyA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cDIgPyAnI2RlZmluZSBGT0dfRVhQMicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcCA/ICcjZGVmaW5lIFVTRV9MSUdIVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwT2JqZWN0U3BhY2UgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQX09CSkVDVFNQQUNFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXBUYW5nZW50U3BhY2UgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQX1RBTkdFTlRTUEFDRScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYW5pc290cm9weSA/ICcjZGVmaW5lIFVTRV9BTklTT1RST1BZJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwID8gJyNkZWZpbmUgVVNFX0FOSVNPVFJPUFlNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJfQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcCA/ICcjZGVmaW5lIFVTRV9BTFBIQU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFIYXNoID8gJyNkZWZpbmUgVVNFX0FMUEhBSEFTSCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb24gPyAnI2RlZmluZSBVU0VfVFJBTlNNSVNTSU9OJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb25NYXAgPyAnI2RlZmluZSBVU0VfVFJBTlNNSVNTSU9OTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50aGlja25lc3NNYXAgPyAnI2RlZmluZSBVU0VfVEhJQ0tORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuQ29sb3JNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5fQ09MT1JNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1NIRUVOX1JPVUdITkVTU01BUCcgOiAnJyxcblxuXHRcdFx0Ly9cblxuXHRcdFx0cGFyYW1ldGVycy5tYXBVdiA/ICcjZGVmaW5lIE1BUF9VViAnICsgcGFyYW1ldGVycy5tYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcFV2ID8gJyNkZWZpbmUgQUxQSEFNQVBfVVYgJyArIHBhcmFtZXRlcnMuYWxwaGFNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcFV2ID8gJyNkZWZpbmUgTElHSFRNQVBfVVYgJyArIHBhcmFtZXRlcnMubGlnaHRNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcFV2ID8gJyNkZWZpbmUgQU9NQVBfVVYgJyArIHBhcmFtZXRlcnMuYW9NYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcFV2ID8gJyNkZWZpbmUgRU1JU1NJVkVNQVBfVVYgJyArIHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5idW1wTWFwVXYgPyAnI2RlZmluZSBCVU1QTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmJ1bXBNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXBVdiA/ICcjZGVmaW5lIE5PUk1BTE1BUF9VViAnICsgcGFyYW1ldGVycy5ub3JtYWxNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXBVdiA/ICcjZGVmaW5lIERJU1BMQUNFTUVOVE1BUF9VViAnICsgcGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXBVdiA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2ID8gJyNkZWZpbmUgTUVUQUxORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJvdWdobmVzc01hcFV2ID8gJyNkZWZpbmUgUk9VR0hORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnJvdWdobmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuYW5pc290cm9weU1hcFV2ID8gJyNkZWZpbmUgQU5JU09UUk9QWU1BUF9VViAnICsgcGFyYW1ldGVycy5hbmlzb3Ryb3B5TWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiA/ICcjZGVmaW5lIENMRUFSQ09BVE1BUF9VViAnICsgcGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXBVdiA/ICcjZGVmaW5lIENMRUFSQ09BVF9OT1JNQUxNQVBfVVYgJyArIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwVXYgPyAnI2RlZmluZSBDTEVBUkNPQVRfUk9VR0hORVNTTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VNYXBVdiA/ICcjZGVmaW5lIElSSURFU0NFTkNFTUFQX1VWICcgKyBwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlTWFwVXYgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdiA/ICcjZGVmaW5lIElSSURFU0NFTkNFX1RISUNLTkVTU01BUF9VViAnICsgcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2IDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcFV2ID8gJyNkZWZpbmUgU0hFRU5fQ09MT1JNQVBfVVYgJyArIHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwVXYgPyAnI2RlZmluZSBTSEVFTl9ST1VHSE5FU1NNQVBfVVYgJyArIHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXBVdiA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgPyAnI2RlZmluZSBTUEVDVUxBUk1BUF9VViAnICsgcGFyYW1ldGVycy5zcGVjdWxhck1hcFV2IDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiA/ICcjZGVmaW5lIFNQRUNVTEFSX0NPTE9STUFQX1VWICcgKyBwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcFV2ID8gJyNkZWZpbmUgU1BFQ1VMQVJfSU5URU5TSVRZTUFQX1VWICcgKyBwYXJhbWV0ZXJzLnNwZWN1bGFySW50ZW5zaXR5TWFwVXYgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy50cmFuc21pc3Npb25NYXBVdiA/ICcjZGVmaW5lIFRSQU5TTUlTU0lPTk1BUF9VViAnICsgcGFyYW1ldGVycy50cmFuc21pc3Npb25NYXBVdiA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy50aGlja25lc3NNYXBVdiA/ICcjZGVmaW5lIFRISUNLTkVTU01BUF9VViAnICsgcGFyYW1ldGVycy50aGlja25lc3NNYXBVdiA6ICcnLFxuXG5cdFx0XHQvL1xuXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzICYmIHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPT09IGZhbHNlID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleENvbG9ycyA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4QWxwaGFzID8gJyNkZWZpbmUgVVNFX0NPTE9SX0FMUEhBJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjFzID8gJyNkZWZpbmUgVVNFX1VWMScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXYycyA/ICcjZGVmaW5lIFVTRV9VVjInIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPyAnI2RlZmluZSBVU0VfVVYzJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnBvaW50c1V2cyA/ICcjZGVmaW5lIFVTRV9QT0lOVFNfVVYnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5za2lubmluZyA/ICcjZGVmaW5lIFVTRV9TS0lOTklORycgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzICkgPyAnI2RlZmluZSBVU0VfTU9SUEhDT0xPUlMnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfVEVYVFVSRV9TVFJJREUgJyArIHBhcmFtZXRlcnMubW9ycGhUZXh0dXJlU3RyaWRlIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgPiAwICkgPyAnI2RlZmluZSBNT1JQSFRBUkdFVFNfQ09VTlQgJyArIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lIFVTRV9TSEFET1dNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSAnICsgc2hhZG93TWFwVHlwZURlZmluZSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNpemVBdHRlbnVhdGlvbiA/ICcjZGVmaW5lIFVTRV9TSVpFQVRURU5VQVRJT04nIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubnVtTGlnaHRQcm9iZXMgPiAwID8gJyNkZWZpbmUgVVNFX0xJR0hUX1BST0JFUycgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5yZXZlcnNlRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfUkVWRVJTRURFUFRIQlVGJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXG5cdFx0XHQndW5pZm9ybSBib29sIGlzT3J0aG9ncmFwaGljOycsXG5cblx0XHRcdCcjaWZkZWYgVVNFX0lOU1RBTkNJTkcnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgbWF0NCBpbnN0YW5jZU1hdHJpeDsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfSU5TVEFOQ0lOR19DT0xPUicsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIGluc3RhbmNlQ29sb3I7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX0lOU1RBTkNJTkdfTU9SUEgnLFxuXG5cdFx0XHQnXHR1bmlmb3JtIHNhbXBsZXIyRCBtb3JwaFRleHR1cmU7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCdhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsnLFxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIG5vcm1hbDsnLFxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMyIHV2OycsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1VWMScsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMyIHV2MTsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVVYyJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzIgdXYyOycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9VVjMnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMiB1djM7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1RBTkdFTlQnLFxuXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCB0YW5nZW50OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnI2lmIGRlZmluZWQoIFVTRV9DT0xPUl9BTFBIQSApJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgY29sb3I7JyxcblxuXHRcdFx0JyNlbGlmIGRlZmluZWQoIFVTRV9DT0xPUiApJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgY29sb3I7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1NLSU5OSU5HJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgc2tpbkluZGV4OycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luV2VpZ2h0OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnXFxuJ1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRwcmVmaXhGcmFnbWVudCA9IFtcblxuXHRcdFx0Z2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX1RZUEUgJyArIHBhcmFtZXRlcnMuc2hhZGVyVHlwZSxcblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nID8gJyNkZWZpbmUgVVNFX0ZPRycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhVG9Db3ZlcmFnZSA/ICcjZGVmaW5lIEFMUEhBX1RPX0NPVkVSQUdFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tYXRjYXAgPyAnI2RlZmluZSBVU0VfTUFUQ0FQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSBVU0VfRU5WTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwVHlwZURlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwQmxlbmRpbmdEZWZpbmUgOiAnJyxcblx0XHRcdGVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfVEVYRUxfV0lEVEggJyArIGVudk1hcEN1YmVVVlNpemUudGV4ZWxXaWR0aCA6ICcnLFxuXHRcdFx0ZW52TWFwQ3ViZVVWU2l6ZSA/ICcjZGVmaW5lIENVQkVVVl9URVhFTF9IRUlHSFQgJyArIGVudk1hcEN1YmVVVlNpemUudGV4ZWxIZWlnaHQgOiAnJyxcblx0XHRcdGVudk1hcEN1YmVVVlNpemUgPyAnI2RlZmluZSBDVUJFVVZfTUFYX01JUCAnICsgZW52TWFwQ3ViZVVWU2l6ZS5tYXhNaXAgKyAnLjAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXBPYmplY3RTcGFjZSA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVBfT0JKRUNUU1BBQ0UnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcFRhbmdlbnRTcGFjZSA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVBfVEFOR0VOVFNQQUNFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5lbWlzc2l2ZU1hcCA/ICcjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5hbmlzb3Ryb3B5ID8gJyNkZWZpbmUgVVNFX0FOSVNPVFJPUFknIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmFuaXNvdHJvcHlNYXAgPyAnI2RlZmluZSBVU0VfQU5JU09UUk9QWU1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXQgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGlzcGVyc2lvbiA/ICcjZGVmaW5lIFVTRV9ESVNQRVJTSU9OJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmlyaWRlc2NlbmNlID8gJyNkZWZpbmUgVVNFX0lSSURFU0NFTkNFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5pcmlkZXNjZW5jZU1hcCA/ICcjZGVmaW5lIFVTRV9JUklERVNDRU5DRU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuaXJpZGVzY2VuY2VUaGlja25lc3NNYXAgPyAnI2RlZmluZSBVU0VfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckNvbG9yTWFwID8gJyNkZWZpbmUgVVNFX1NQRUNVTEFSX0NPTE9STUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhckludGVuc2l0eU1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUl9JTlRFTlNJVFlNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwID8gJyNkZWZpbmUgVVNFX01FVEFMTkVTU01BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYU1hcCA/ICcjZGVmaW5lIFVTRV9BTFBIQU1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFUZXN0ID8gJyNkZWZpbmUgVVNFX0FMUEhBVEVTVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFIYXNoID8gJyNkZWZpbmUgVVNFX0FMUEhBSEFTSCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbiA/ICcjZGVmaW5lIFVTRV9TSEVFTicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Db2xvck1hcCA/ICcjZGVmaW5lIFVTRV9TSEVFTl9DT0xPUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hlZW5Sb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfU0hFRU5fUk9VR0hORVNTTUFQJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT04nIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbk1hcCA/ICcjZGVmaW5lIFVTRV9UUkFOU01JU1NJT05NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9USElDS05FU1NNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzIHx8IHBhcmFtZXRlcnMuaW5zdGFuY2luZ0NvbG9yIHx8IHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvciA/ICcjZGVmaW5lIFVTRV9DT0xPUicgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4QWxwaGFzID8gJyNkZWZpbmUgVVNFX0NPTE9SX0FMUEhBJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjFzID8gJyNkZWZpbmUgVVNFX1VWMScgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXYycyA/ICcjZGVmaW5lIFVTRV9VVjInIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPyAnI2RlZmluZSBVU0VfVVYzJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLnBvaW50c1V2cyA/ICcjZGVmaW5lIFVTRV9QT0lOVFNfVVYnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZ3JhZGllbnRNYXAgPyAnI2RlZmluZSBVU0VfR1JBRElFTlRNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhID8gJyNkZWZpbmUgUFJFTVVMVElQTElFRF9BTFBIQScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5udW1MaWdodFByb2JlcyA+IDAgPyAnI2RlZmluZSBVU0VfTElHSFRfUFJPQkVTJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRlY29kZVZpZGVvVGV4dHVyZSA/ICcjZGVmaW5lIERFQ09ERV9WSURFT19URVhUVVJFJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kZWNvZGVWaWRlb1RleHR1cmVFbWlzc2l2ZSA/ICcjZGVmaW5lIERFQ09ERV9WSURFT19URVhUVVJFX0VNSVNTSVZFJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPyAnI2RlZmluZSBVU0VfTE9HREVQVEhCVUYnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnJldmVyc2VEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9SRVZFUlNFREVQVEhCVUYnIDogJycsXG5cblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjsnLFxuXHRcdFx0J3VuaWZvcm0gYm9vbCBpc09ydGhvZ3JhcGhpYzsnLFxuXG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/ICcjZGVmaW5lIFRPTkVfTUFQUElORycgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZyApID8gU2hhZGVyQ2h1bmtbICd0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50JyBdIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdG9uZU1hcHBpbmcoKSBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oICd0b25lTWFwcGluZycsIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgKSA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLmRpdGhlcmluZyA/ICcjZGVmaW5lIERJVEhFUklORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMub3BhcXVlID8gJyNkZWZpbmUgT1BBUVVFJyA6ICcnLFxuXG5cdFx0XHRTaGFkZXJDaHVua1sgJ2NvbG9yc3BhY2VfcGFyc19mcmFnbWVudCcgXSwgLy8gdGhpcyBjb2RlIGlzIHJlcXVpcmVkIGhlcmUgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IHRoZSB2YXJpb3VzIGVuY29kaW5nL2RlY29kaW5nIGZ1bmN0aW9uIGRlZmluZWQgYmVsb3dcblx0XHRcdGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbiggJ2xpbmVhclRvT3V0cHV0VGV4ZWwnLCBwYXJhbWV0ZXJzLm91dHB1dENvbG9yU3BhY2UgKSxcblx0XHRcdGdldEx1bWluYW5jZUZ1bmN0aW9uKCksXG5cblx0XHRcdHBhcmFtZXRlcnMudXNlRGVwdGhQYWNraW5nID8gJyNkZWZpbmUgREVQVEhfUEFDS0lORyAnICsgcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgOiAnJyxcblxuXHRcdFx0J1xcbidcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHR2ZXJ0ZXhTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIHZlcnRleFNoYWRlciApO1xuXHR2ZXJ0ZXhTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHRmcmFnbWVudFNoYWRlciA9IHJlc29sdmVJbmNsdWRlcyggZnJhZ21lbnRTaGFkZXIgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApO1xuXHRmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHR2ZXJ0ZXhTaGFkZXIgPSB1bnJvbGxMb29wcyggdmVydGV4U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gdW5yb2xsTG9vcHMoIGZyYWdtZW50U2hhZGVyICk7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgIT09IHRydWUgKSB7XG5cblx0XHQvLyBHTFNMIDMuMCBjb252ZXJzaW9uIGZvciBidWlsdC1pbiBtYXRlcmlhbHMgYW5kIFNoYWRlck1hdGVyaWFsXG5cblx0XHR2ZXJzaW9uU3RyaW5nID0gJyN2ZXJzaW9uIDMwMCBlc1xcbic7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cdFx0XHRjdXN0b21WZXJ0ZXhFeHRlbnNpb25zLFxuXHRcdFx0JyNkZWZpbmUgYXR0cmlidXRlIGluJyxcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgb3V0Jyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4VmVydGV4O1xuXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXG5cdFx0XHQnI2RlZmluZSB2YXJ5aW5nIGluJyxcblx0XHRcdCggcGFyYW1ldGVycy5nbHNsVmVyc2lvbiA9PT0gR0xTTDMgKSA/ICcnIDogJ2xheW91dChsb2NhdGlvbiA9IDApIG91dCBoaWdocCB2ZWM0IHBjX2ZyYWdDb2xvcjsnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLmdsc2xWZXJzaW9uID09PSBHTFNMMyApID8gJycgOiAnI2RlZmluZSBnbF9GcmFnQ29sb3IgcGNfZnJhZ0NvbG9yJyxcblx0XHRcdCcjZGVmaW5lIGdsX0ZyYWdEZXB0aEVYVCBnbF9GcmFnRGVwdGgnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmUgdGV4dHVyZScsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qIHRleHR1cmVQcm9qJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRExvZEVYVCB0ZXh0dXJlTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRFByb2pMb2RFWFQgdGV4dHVyZVByb2pMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRHcmFkRVhUIHRleHR1cmVHcmFkJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRFByb2pHcmFkRVhUIHRleHR1cmVQcm9qR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZUdyYWRFWFQgdGV4dHVyZUdyYWQnXG5cdFx0XS5qb2luKCAnXFxuJyApICsgJ1xcbicgKyBwcmVmaXhGcmFnbWVudDtcblxuXHR9XG5cblx0Y29uc3QgdmVydGV4R2xzbCA9IHZlcnNpb25TdHJpbmcgKyBwcmVmaXhWZXJ0ZXggKyB2ZXJ0ZXhTaGFkZXI7XG5cdGNvbnN0IGZyYWdtZW50R2xzbCA9IHZlcnNpb25TdHJpbmcgKyBwcmVmaXhGcmFnbWVudCArIGZyYWdtZW50U2hhZGVyO1xuXG5cdC8vIGNvbnNvbGUubG9nKCAnKlZFUlRFWConLCB2ZXJ0ZXhHbHNsICk7XG5cdC8vIGNvbnNvbGUubG9nKCAnKkZSQUdNRU5UKicsIGZyYWdtZW50R2xzbCApO1xuXG5cdGNvbnN0IGdsVmVydGV4U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCBnbC5WRVJURVhfU0hBREVSLCB2ZXJ0ZXhHbHNsICk7XG5cdGNvbnN0IGdsRnJhZ21lbnRTaGFkZXIgPSBXZWJHTFNoYWRlciggZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgZnJhZ21lbnRHbHNsICk7XG5cblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBGb3JjZSBhIHBhcnRpY3VsYXIgYXR0cmlidXRlIHRvIGluZGV4IDAuXG5cblx0aWYgKCBwYXJhbWV0ZXJzLmluZGV4MEF0dHJpYnV0ZU5hbWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICk7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG5cblx0XHQvLyBwcm9ncmFtcyB3aXRoIG1vcnBoVGFyZ2V0cyBkaXNwbGFjZSBwb3NpdGlvbiBvdXQgb2YgYXR0cmlidXRlIDBcblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsICdwb3NpdGlvbicgKTtcblxuXHR9XG5cblx0Z2wubGlua1Byb2dyYW0oIHByb2dyYW0gKTtcblxuXHRmdW5jdGlvbiBvbkZpcnN0VXNlKCBzZWxmICkge1xuXG5cdFx0Ly8gY2hlY2sgZm9yIGxpbmsgZXJyb3JzXG5cdFx0aWYgKCByZW5kZXJlci5kZWJ1Zy5jaGVja1NoYWRlckVycm9ycyApIHtcblxuXHRcdFx0Y29uc3QgcHJvZ3JhbUxvZyA9IGdsLmdldFByb2dyYW1JbmZvTG9nKCBwcm9ncmFtICkudHJpbSgpO1xuXHRcdFx0Y29uc3QgdmVydGV4TG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggZ2xWZXJ0ZXhTaGFkZXIgKS50cmltKCk7XG5cdFx0XHRjb25zdCBmcmFnbWVudExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsRnJhZ21lbnRTaGFkZXIgKS50cmltKCk7XG5cblx0XHRcdGxldCBydW5uYWJsZSA9IHRydWU7XG5cdFx0XHRsZXQgaGF2ZURpYWdub3N0aWNzID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRydW5uYWJsZSA9IGZhbHNlO1xuXG5cdFx0XHRcdGlmICggdHlwZW9mIHJlbmRlcmVyLmRlYnVnLm9uU2hhZGVyRXJyb3IgPT09ICdmdW5jdGlvbicgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5kZWJ1Zy5vblNoYWRlckVycm9yKCBnbCwgcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIsIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gZGVmYXVsdCBlcnJvciByZXBvcnRpbmdcblxuXHRcdFx0XHRcdGNvbnN0IHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsVmVydGV4U2hhZGVyLCAndmVydGV4JyApO1xuXHRcdFx0XHRcdGNvbnN0IGZyYWdtZW50RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgZ2xGcmFnbWVudFNoYWRlciwgJ2ZyYWdtZW50JyApO1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0XHRcdCdUSFJFRS5XZWJHTFByb2dyYW06IFNoYWRlciBFcnJvciAnICsgZ2wuZ2V0RXJyb3IoKSArICcgLSAnICtcblx0XHRcdFx0XHRcdCdWQUxJREFURV9TVEFUVVMgJyArIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIGdsLlZBTElEQVRFX1NUQVRVUyApICsgJ1xcblxcbicgK1xuXHRcdFx0XHRcdFx0J01hdGVyaWFsIE5hbWU6ICcgKyBzZWxmLm5hbWUgKyAnXFxuJyArXG5cdFx0XHRcdFx0XHQnTWF0ZXJpYWwgVHlwZTogJyArIHNlbGYudHlwZSArICdcXG5cXG4nICtcblx0XHRcdFx0XHRcdCdQcm9ncmFtIEluZm8gTG9nOiAnICsgcHJvZ3JhbUxvZyArICdcXG4nICtcblx0XHRcdFx0XHRcdHZlcnRleEVycm9ycyArICdcXG4nICtcblx0XHRcdFx0XHRcdGZyYWdtZW50RXJyb3JzXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHByb2dyYW1Mb2cgIT09ICcnICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUHJvZ3JhbTogUHJvZ3JhbSBJbmZvIExvZzonLCBwcm9ncmFtTG9nICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnICkge1xuXG5cdFx0XHRcdGhhdmVEaWFnbm9zdGljcyA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGF2ZURpYWdub3N0aWNzICkge1xuXG5cdFx0XHRcdHNlbGYuZGlhZ25vc3RpY3MgPSB7XG5cblx0XHRcdFx0XHRydW5uYWJsZTogcnVubmFibGUsXG5cblx0XHRcdFx0XHRwcm9ncmFtTG9nOiBwcm9ncmFtTG9nLFxuXG5cdFx0XHRcdFx0dmVydGV4U2hhZGVyOiB7XG5cblx0XHRcdFx0XHRcdGxvZzogdmVydGV4TG9nLFxuXHRcdFx0XHRcdFx0cHJlZml4OiBwcmVmaXhWZXJ0ZXhcblxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjoge1xuXG5cdFx0XHRcdFx0XHRsb2c6IGZyYWdtZW50TG9nLFxuXHRcdFx0XHRcdFx0cHJlZml4OiBwcmVmaXhGcmFnbWVudFxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIENsZWFuIHVwXG5cblx0XHQvLyBDcmFzaGVzIGluIGlPUzkgYW5kIGlPUzEwLiAjMTg0MDJcblx0XHQvLyBnbC5kZXRhY2hTaGFkZXIoIHByb2dyYW0sIGdsVmVydGV4U2hhZGVyICk7XG5cdFx0Ly8gZ2wuZGV0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRnbC5kZWxldGVTaGFkZXIoIGdsVmVydGV4U2hhZGVyICk7XG5cdFx0Z2wuZGVsZXRlU2hhZGVyKCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRjYWNoZWRVbmlmb3JtcyA9IG5ldyBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApO1xuXHRcdGNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKTtcblxuXHR9XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIHVuaWZvcm0gbG9jYXRpb25zXG5cblx0bGV0IGNhY2hlZFVuaWZvcm1zO1xuXG5cdHRoaXMuZ2V0VW5pZm9ybXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZFVuaWZvcm1zID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFBvcHVsYXRlcyBjYWNoZWRVbmlmb3JtcyBhbmQgY2FjaGVkQXR0cmlidXRlc1xuXHRcdFx0b25GaXJzdFVzZSggdGhpcyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNhY2hlZFVuaWZvcm1zO1xuXG5cdH07XG5cblx0Ly8gc2V0IHVwIGNhY2hpbmcgZm9yIGF0dHJpYnV0ZSBsb2NhdGlvbnNcblxuXHRsZXQgY2FjaGVkQXR0cmlidXRlcztcblxuXHR0aGlzLmdldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIGNhY2hlZEF0dHJpYnV0ZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gUG9wdWxhdGVzIGNhY2hlZEF0dHJpYnV0ZXMgYW5kIGNhY2hlZFVuaWZvcm1zXG5cdFx0XHRvbkZpcnN0VXNlKCB0aGlzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY2FjaGVkQXR0cmlidXRlcztcblxuXHR9O1xuXG5cdC8vIGluZGljYXRlIHdoZW4gdGhlIHByb2dyYW0gaXMgcmVhZHkgdG8gYmUgdXNlZC4gaWYgdGhlIEtIUl9wYXJhbGxlbF9zaGFkZXJfY29tcGlsZSBleHRlbnNpb24gaXNuJ3Qgc3VwcG9ydGVkLFxuXHQvLyBmbGFnIHRoZSBwcm9ncmFtIGFzIHJlYWR5IGltbWVkaWF0ZWx5LiBJdCBtYXkgY2F1c2UgYSBzdGFsbCB3aGVuIGl0J3MgZmlyc3QgdXNlZC5cblxuXHRsZXQgcHJvZ3JhbVJlYWR5ID0gKCBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uUGFyYWxsZWxTaGFkZXJDb21waWxlID09PSBmYWxzZSApO1xuXG5cdHRoaXMuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggcHJvZ3JhbVJlYWR5ID09PSBmYWxzZSApIHtcblxuXHRcdFx0cHJvZ3JhbVJlYWR5ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgQ09NUExFVElPTl9TVEFUVVNfS0hSICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvZ3JhbVJlYWR5O1xuXG5cdH07XG5cblx0Ly8gZnJlZSByZXNvdXJjZVxuXG5cdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJpbmRpbmdTdGF0ZXMucmVsZWFzZVN0YXRlc09mUHJvZ3JhbSggdGhpcyApO1xuXG5cdFx0Z2wuZGVsZXRlUHJvZ3JhbSggcHJvZ3JhbSApO1xuXHRcdHRoaXMucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHR9O1xuXG5cdC8vXG5cblx0dGhpcy50eXBlID0gcGFyYW1ldGVycy5zaGFkZXJUeXBlO1xuXHR0aGlzLm5hbWUgPSBwYXJhbWV0ZXJzLnNoYWRlck5hbWU7XG5cdHRoaXMuaWQgPSBwcm9ncmFtSWRDb3VudCArKztcblx0dGhpcy5jYWNoZUtleSA9IGNhY2hlS2V5O1xuXHR0aGlzLnVzZWRUaW1lcyA9IDE7XG5cdHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG5cdHRoaXMudmVydGV4U2hhZGVyID0gZ2xWZXJ0ZXhTaGFkZXI7XG5cdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBnbEZyYWdtZW50U2hhZGVyO1xuXG5cdHJldHVybiB0aGlzO1xuXG59XG5cbmxldCBfaWQgPSAwO1xuXG5jbGFzcyBXZWJHTFNoYWRlckNhY2hlIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdHRoaXMuc2hhZGVyQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5tYXRlcmlhbENhY2hlID0gbmV3IE1hcCgpO1xuXG5cdH1cblxuXHR1cGRhdGUoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgdmVydGV4U2hhZGVyID0gbWF0ZXJpYWwudmVydGV4U2hhZGVyO1xuXHRcdGNvbnN0IGZyYWdtZW50U2hhZGVyID0gbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRjb25zdCB2ZXJ0ZXhTaGFkZXJTdGFnZSA9IHRoaXMuX2dldFNoYWRlclN0YWdlKCB2ZXJ0ZXhTaGFkZXIgKTtcblx0XHRjb25zdCBmcmFnbWVudFNoYWRlclN0YWdlID0gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIGZyYWdtZW50U2hhZGVyICk7XG5cblx0XHRjb25zdCBtYXRlcmlhbFNoYWRlcnMgPSB0aGlzLl9nZXRTaGFkZXJDYWNoZUZvck1hdGVyaWFsKCBtYXRlcmlhbCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbFNoYWRlcnMuaGFzKCB2ZXJ0ZXhTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxTaGFkZXJzLmFkZCggdmVydGV4U2hhZGVyU3RhZ2UgKTtcblx0XHRcdHZlcnRleFNoYWRlclN0YWdlLnVzZWRUaW1lcyArKztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxTaGFkZXJzLmhhcyggZnJhZ21lbnRTaGFkZXJTdGFnZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0bWF0ZXJpYWxTaGFkZXJzLmFkZCggZnJhZ21lbnRTaGFkZXJTdGFnZSApO1xuXHRcdFx0ZnJhZ21lbnRTaGFkZXJTdGFnZS51c2VkVGltZXMgKys7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblx0cmVtb3ZlKCBtYXRlcmlhbCApIHtcblxuXHRcdGNvbnN0IG1hdGVyaWFsU2hhZGVycyA9IHRoaXMubWF0ZXJpYWxDYWNoZS5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRmb3IgKCBjb25zdCBzaGFkZXJTdGFnZSBvZiBtYXRlcmlhbFNoYWRlcnMgKSB7XG5cblx0XHRcdHNoYWRlclN0YWdlLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0aWYgKCBzaGFkZXJTdGFnZS51c2VkVGltZXMgPT09IDAgKSB0aGlzLnNoYWRlckNhY2hlLmRlbGV0ZSggc2hhZGVyU3RhZ2UuY29kZSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tYXRlcmlhbENhY2hlLmRlbGV0ZSggbWF0ZXJpYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRnZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZ2V0U2hhZGVyU3RhZ2UoIG1hdGVyaWFsLnZlcnRleFNoYWRlciApLmlkO1xuXG5cdH1cblxuXHRnZXRGcmFnbWVudFNoYWRlcklEKCBtYXRlcmlhbCApIHtcblxuXHRcdHJldHVybiB0aGlzLl9nZXRTaGFkZXJTdGFnZSggbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIgKS5pZDtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuc2hhZGVyQ2FjaGUuY2xlYXIoKTtcblx0XHR0aGlzLm1hdGVyaWFsQ2FjaGUuY2xlYXIoKTtcblxuXHR9XG5cblx0X2dldFNoYWRlckNhY2hlRm9yTWF0ZXJpYWwoIG1hdGVyaWFsICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLm1hdGVyaWFsQ2FjaGU7XG5cdFx0bGV0IHNldCA9IGNhY2hlLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGlmICggc2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldCA9IG5ldyBTZXQoKTtcblx0XHRcdGNhY2hlLnNldCggbWF0ZXJpYWwsIHNldCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNldDtcblxuXHR9XG5cblx0X2dldFNoYWRlclN0YWdlKCBjb2RlICkge1xuXG5cdFx0Y29uc3QgY2FjaGUgPSB0aGlzLnNoYWRlckNhY2hlO1xuXHRcdGxldCBzdGFnZSA9IGNhY2hlLmdldCggY29kZSApO1xuXG5cdFx0aWYgKCBzdGFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzdGFnZSA9IG5ldyBXZWJHTFNoYWRlclN0YWdlKCBjb2RlICk7XG5cdFx0XHRjYWNoZS5zZXQoIGNvZGUsIHN0YWdlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gc3RhZ2U7XG5cblx0fVxuXG59XG5cbmNsYXNzIFdlYkdMU2hhZGVyU3RhZ2Uge1xuXG5cdGNvbnN0cnVjdG9yKCBjb2RlICkge1xuXG5cdFx0dGhpcy5pZCA9IF9pZCArKztcblxuXHRcdHRoaXMuY29kZSA9IGNvZGU7XG5cdFx0dGhpcy51c2VkVGltZXMgPSAwO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW1zKCByZW5kZXJlciwgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcywgYmluZGluZ1N0YXRlcywgY2xpcHBpbmcgKSB7XG5cblx0Y29uc3QgX3Byb2dyYW1MYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cdGNvbnN0IF9jdXN0b21TaGFkZXJzID0gbmV3IFdlYkdMU2hhZGVyQ2FjaGUoKTtcblx0Y29uc3QgX2FjdGl2ZUNoYW5uZWxzID0gbmV3IFNldCgpO1xuXHRjb25zdCBwcm9ncmFtcyA9IFtdO1xuXG5cdGNvbnN0IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIgPSBjYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjtcblx0Y29uc3QgU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTID0gY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXG5cdGxldCBwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xuXG5cdGNvbnN0IHNoYWRlcklEcyA9IHtcblx0XHRNZXNoRGVwdGhNYXRlcmlhbDogJ2RlcHRoJyxcblx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogJ2Rpc3RhbmNlUkdCQScsXG5cdFx0TWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJyxcblx0XHRNZXNoQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRNZXNoTGFtYmVydE1hdGVyaWFsOiAnbGFtYmVydCcsXG5cdFx0TWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsXG5cdFx0TWVzaFRvb25NYXRlcmlhbDogJ3Rvb24nLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldENoYW5uZWwoIHZhbHVlICkge1xuXG5cdFx0X2FjdGl2ZUNoYW5uZWxzLmFkZCggdmFsdWUgKTtcblxuXHRcdGlmICggdmFsdWUgPT09IDAgKSByZXR1cm4gJ3V2JztcblxuXHRcdHJldHVybiBgdXYkeyB2YWx1ZSB9YDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UGFyYW1ldGVycyggbWF0ZXJpYWwsIGxpZ2h0cywgc2hhZG93cywgc2NlbmUsIG9iamVjdCApIHtcblxuXHRcdGNvbnN0IGZvZyA9IHNjZW5lLmZvZztcblx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblx0XHRjb25zdCBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cblx0XHRjb25zdCBlbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBlbnZpcm9ubWVudCApO1xuXHRcdGNvbnN0IGVudk1hcEN1YmVVVkhlaWdodCA9ICggISEgZW52TWFwICkgJiYgKCBlbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgKSA/IGVudk1hcC5pbWFnZS5oZWlnaHQgOiBudWxsO1xuXG5cdFx0Y29uc3Qgc2hhZGVySUQgPSBzaGFkZXJJRHNbIG1hdGVyaWFsLnR5cGUgXTtcblxuXHRcdC8vIGhldXJpc3RpY3MgdG8gY3JlYXRlIHNoYWRlciBwYXJhbWV0ZXJzIGFjY29yZGluZyB0byBsaWdodHMgaW4gdGhlIHNjZW5lXG5cdFx0Ly8gKG5vdCB0byBibG93IG92ZXIgbWF4TGlnaHRzIGJ1ZGdldClcblxuXHRcdGlmICggbWF0ZXJpYWwucHJlY2lzaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMuZ2V0TWF4UHJlY2lzaW9uKCBtYXRlcmlhbC5wcmVjaXNpb24gKTtcblxuXHRcdFx0aWYgKCBwcmVjaXNpb24gIT09IG1hdGVyaWFsLnByZWNpc2lvbiApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW0uZ2V0UGFyYW1ldGVyczonLCBtYXRlcmlhbC5wcmVjaXNpb24sICdub3Qgc3VwcG9ydGVkLCB1c2luZycsIHByZWNpc2lvbiwgJ2luc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0Y29uc3QgbW9ycGhUYXJnZXRzQ291bnQgPSAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSA/IG1vcnBoQXR0cmlidXRlLmxlbmd0aCA6IDA7XG5cblx0XHRsZXQgbW9ycGhUZXh0dXJlU3RyaWRlID0gMDtcblxuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSBtb3JwaFRleHR1cmVTdHJpZGUgPSAxO1xuXHRcdGlmICggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkICkgbW9ycGhUZXh0dXJlU3RyaWRlID0gMjtcblx0XHRpZiAoIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkICkgbW9ycGhUZXh0dXJlU3RyaWRlID0gMztcblxuXHRcdC8vXG5cblx0XHRsZXQgdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcjtcblx0XHRsZXQgY3VzdG9tVmVydGV4U2hhZGVySUQsIGN1c3RvbUZyYWdtZW50U2hhZGVySUQ7XG5cblx0XHRpZiAoIHNoYWRlcklEICkge1xuXG5cdFx0XHRjb25zdCBzaGFkZXIgPSBTaGFkZXJMaWJbIHNoYWRlcklEIF07XG5cblx0XHRcdHZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7XG5cdFx0XHRmcmFnbWVudFNoYWRlciA9IHNoYWRlci5mcmFnbWVudFNoYWRlcjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZlcnRleFNoYWRlciA9IG1hdGVyaWFsLnZlcnRleFNoYWRlcjtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRcdF9jdXN0b21TaGFkZXJzLnVwZGF0ZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0Y3VzdG9tVmVydGV4U2hhZGVySUQgPSBfY3VzdG9tU2hhZGVycy5nZXRWZXJ0ZXhTaGFkZXJJRCggbWF0ZXJpYWwgKTtcblx0XHRcdGN1c3RvbUZyYWdtZW50U2hhZGVySUQgPSBfY3VzdG9tU2hhZGVycy5nZXRGcmFnbWVudFNoYWRlcklEKCBtYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdGNvbnN0IHJldmVyc2VEZXB0aEJ1ZmZlciA9IHJlbmRlcmVyLnN0YXRlLmJ1ZmZlcnMuZGVwdGguZ2V0UmV2ZXJzZWQoKTtcblxuXHRcdGNvbnN0IElTX0lOU1RBTkNFRE1FU0ggPSBvYmplY3QuaXNJbnN0YW5jZWRNZXNoID09PSB0cnVlO1xuXHRcdGNvbnN0IElTX0JBVENIRURNRVNIID0gb2JqZWN0LmlzQmF0Y2hlZE1lc2ggPT09IHRydWU7XG5cblx0XHRjb25zdCBIQVNfTUFQID0gISEgbWF0ZXJpYWwubWFwO1xuXHRcdGNvbnN0IEhBU19NQVRDQVAgPSAhISBtYXRlcmlhbC5tYXRjYXA7XG5cdFx0Y29uc3QgSEFTX0VOVk1BUCA9ICEhIGVudk1hcDtcblx0XHRjb25zdCBIQVNfQU9NQVAgPSAhISBtYXRlcmlhbC5hb01hcDtcblx0XHRjb25zdCBIQVNfTElHSFRNQVAgPSAhISBtYXRlcmlhbC5saWdodE1hcDtcblx0XHRjb25zdCBIQVNfQlVNUE1BUCA9ICEhIG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0Y29uc3QgSEFTX05PUk1BTE1BUCA9ICEhIG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRjb25zdCBIQVNfRElTUExBQ0VNRU5UTUFQID0gISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdGNvbnN0IEhBU19FTUlTU0lWRU1BUCA9ICEhIG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0Y29uc3QgSEFTX01FVEFMTkVTU01BUCA9ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcDtcblx0XHRjb25zdCBIQVNfUk9VR0hORVNTTUFQID0gISEgbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xuXG5cdFx0Y29uc3QgSEFTX0FOSVNPVFJPUFkgPSBtYXRlcmlhbC5hbmlzb3Ryb3B5ID4gMDtcblx0XHRjb25zdCBIQVNfQ0xFQVJDT0FUID0gbWF0ZXJpYWwuY2xlYXJjb2F0ID4gMDtcblx0XHRjb25zdCBIQVNfRElTUEVSU0lPTiA9IG1hdGVyaWFsLmRpc3BlcnNpb24gPiAwO1xuXHRcdGNvbnN0IEhBU19JUklERVNDRU5DRSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlID4gMDtcblx0XHRjb25zdCBIQVNfU0hFRU4gPSBtYXRlcmlhbC5zaGVlbiA+IDA7XG5cdFx0Y29uc3QgSEFTX1RSQU5TTUlTU0lPTiA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDA7XG5cblx0XHRjb25zdCBIQVNfQU5JU09UUk9QWU1BUCA9IEhBU19BTklTT1RST1BZICYmICEhIG1hdGVyaWFsLmFuaXNvdHJvcHlNYXA7XG5cblx0XHRjb25zdCBIQVNfQ0xFQVJDT0FUTUFQID0gSEFTX0NMRUFSQ09BVCAmJiAhISBtYXRlcmlhbC5jbGVhcmNvYXRNYXA7XG5cdFx0Y29uc3QgSEFTX0NMRUFSQ09BVF9OT1JNQUxNQVAgPSBIQVNfQ0xFQVJDT0FUICYmICEhIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDtcblx0XHRjb25zdCBIQVNfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCA9IEhBU19DTEVBUkNPQVQgJiYgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwO1xuXG5cdFx0Y29uc3QgSEFTX0lSSURFU0NFTkNFTUFQID0gSEFTX0lSSURFU0NFTkNFICYmICEhIG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwO1xuXHRcdGNvbnN0IEhBU19JUklERVNDRU5DRV9USElDS05FU1NNQVAgPSBIQVNfSVJJREVTQ0VOQ0UgJiYgISEgbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XG5cblx0XHRjb25zdCBIQVNfU0hFRU5fQ09MT1JNQVAgPSBIQVNfU0hFRU4gJiYgISEgbWF0ZXJpYWwuc2hlZW5Db2xvck1hcDtcblx0XHRjb25zdCBIQVNfU0hFRU5fUk9VR0hORVNTTUFQID0gSEFTX1NIRUVOICYmICEhIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwO1xuXG5cdFx0Y29uc3QgSEFTX1NQRUNVTEFSTUFQID0gISEgbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cdFx0Y29uc3QgSEFTX1NQRUNVTEFSX0NPTE9STUFQID0gISEgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcDtcblx0XHRjb25zdCBIQVNfU1BFQ1VMQVJfSU5URU5TSVRZTUFQID0gISEgbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXA7XG5cblx0XHRjb25zdCBIQVNfVFJBTlNNSVNTSU9OTUFQID0gSEFTX1RSQU5TTUlTU0lPTiAmJiAhISBtYXRlcmlhbC50cmFuc21pc3Npb25NYXA7XG5cdFx0Y29uc3QgSEFTX1RISUNLTkVTU01BUCA9IEhBU19UUkFOU01JU1NJT04gJiYgISEgbWF0ZXJpYWwudGhpY2tuZXNzTWFwO1xuXG5cdFx0Y29uc3QgSEFTX0dSQURJRU5UTUFQID0gISEgbWF0ZXJpYWwuZ3JhZGllbnRNYXA7XG5cblx0XHRjb25zdCBIQVNfQUxQSEFNQVAgPSAhISBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdGNvbnN0IEhBU19BTFBIQVRFU1QgPSBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwO1xuXG5cdFx0Y29uc3QgSEFTX0FMUEhBSEFTSCA9ICEhIG1hdGVyaWFsLmFscGhhSGFzaDtcblxuXHRcdGNvbnN0IEhBU19FWFRFTlNJT05TID0gISEgbWF0ZXJpYWwuZXh0ZW5zaW9ucztcblxuXHRcdGxldCB0b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRvbmVNYXBwZWQgKSB7XG5cblx0XHRcdGlmICggY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCB8fCBjdXJyZW50UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dG9uZU1hcHBpbmcgPSByZW5kZXJlci50b25lTWFwcGluZztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc3QgcGFyYW1ldGVycyA9IHtcblxuXHRcdFx0c2hhZGVySUQ6IHNoYWRlcklELFxuXHRcdFx0c2hhZGVyVHlwZTogbWF0ZXJpYWwudHlwZSxcblx0XHRcdHNoYWRlck5hbWU6IG1hdGVyaWFsLm5hbWUsXG5cblx0XHRcdHZlcnRleFNoYWRlcjogdmVydGV4U2hhZGVyLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGZyYWdtZW50U2hhZGVyLFxuXHRcdFx0ZGVmaW5lczogbWF0ZXJpYWwuZGVmaW5lcyxcblxuXHRcdFx0Y3VzdG9tVmVydGV4U2hhZGVySUQ6IGN1c3RvbVZlcnRleFNoYWRlcklELFxuXHRcdFx0Y3VzdG9tRnJhZ21lbnRTaGFkZXJJRDogY3VzdG9tRnJhZ21lbnRTaGFkZXJJRCxcblxuXHRcdFx0aXNSYXdTaGFkZXJNYXRlcmlhbDogbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCA9PT0gdHJ1ZSxcblx0XHRcdGdsc2xWZXJzaW9uOiBtYXRlcmlhbC5nbHNsVmVyc2lvbixcblxuXHRcdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXG5cblx0XHRcdGJhdGNoaW5nOiBJU19CQVRDSEVETUVTSCxcblx0XHRcdGJhdGNoaW5nQ29sb3I6IElTX0JBVENIRURNRVNIICYmIG9iamVjdC5fY29sb3JzVGV4dHVyZSAhPT0gbnVsbCxcblx0XHRcdGluc3RhbmNpbmc6IElTX0lOU1RBTkNFRE1FU0gsXG5cdFx0XHRpbnN0YW5jaW5nQ29sb3I6IElTX0lOU1RBTkNFRE1FU0ggJiYgb2JqZWN0Lmluc3RhbmNlQ29sb3IgIT09IG51bGwsXG5cdFx0XHRpbnN0YW5jaW5nTW9ycGg6IElTX0lOU1RBTkNFRE1FU0ggJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSAhPT0gbnVsbCxcblxuXHRcdFx0c3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTLFxuXHRcdFx0b3V0cHV0Q29sb3JTcGFjZTogKCBjdXJyZW50UmVuZGVyVGFyZ2V0ID09PSBudWxsICkgPyByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlIDogKCBjdXJyZW50UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgPyBjdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUuY29sb3JTcGFjZSA6IExpbmVhclNSR0JDb2xvclNwYWNlICksXG5cdFx0XHRhbHBoYVRvQ292ZXJhZ2U6ICEhIG1hdGVyaWFsLmFscGhhVG9Db3ZlcmFnZSxcblxuXHRcdFx0bWFwOiBIQVNfTUFQLFxuXHRcdFx0bWF0Y2FwOiBIQVNfTUFUQ0FQLFxuXHRcdFx0ZW52TWFwOiBIQVNfRU5WTUFQLFxuXHRcdFx0ZW52TWFwTW9kZTogSEFTX0VOVk1BUCAmJiBlbnZNYXAubWFwcGluZyxcblx0XHRcdGVudk1hcEN1YmVVVkhlaWdodDogZW52TWFwQ3ViZVVWSGVpZ2h0LFxuXHRcdFx0YW9NYXA6IEhBU19BT01BUCxcblx0XHRcdGxpZ2h0TWFwOiBIQVNfTElHSFRNQVAsXG5cdFx0XHRidW1wTWFwOiBIQVNfQlVNUE1BUCxcblx0XHRcdG5vcm1hbE1hcDogSEFTX05PUk1BTE1BUCxcblx0XHRcdGRpc3BsYWNlbWVudE1hcDogU1VQUE9SVFNfVkVSVEVYX1RFWFRVUkVTICYmIEhBU19ESVNQTEFDRU1FTlRNQVAsXG5cdFx0XHRlbWlzc2l2ZU1hcDogSEFTX0VNSVNTSVZFTUFQLFxuXG5cdFx0XHRub3JtYWxNYXBPYmplY3RTcGFjZTogSEFTX05PUk1BTE1BUCAmJiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBPYmplY3RTcGFjZU5vcm1hbE1hcCxcblx0XHRcdG5vcm1hbE1hcFRhbmdlbnRTcGFjZTogSEFTX05PUk1BTE1BUCAmJiBtYXRlcmlhbC5ub3JtYWxNYXBUeXBlID09PSBUYW5nZW50U3BhY2VOb3JtYWxNYXAsXG5cblx0XHRcdG1ldGFsbmVzc01hcDogSEFTX01FVEFMTkVTU01BUCxcblx0XHRcdHJvdWdobmVzc01hcDogSEFTX1JPVUdITkVTU01BUCxcblxuXHRcdFx0YW5pc290cm9weTogSEFTX0FOSVNPVFJPUFksXG5cdFx0XHRhbmlzb3Ryb3B5TWFwOiBIQVNfQU5JU09UUk9QWU1BUCxcblxuXHRcdFx0Y2xlYXJjb2F0OiBIQVNfQ0xFQVJDT0FULFxuXHRcdFx0Y2xlYXJjb2F0TWFwOiBIQVNfQ0xFQVJDT0FUTUFQLFxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwOiBIQVNfQ0xFQVJDT0FUX05PUk1BTE1BUCxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzc01hcDogSEFTX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAsXG5cblx0XHRcdGRpc3BlcnNpb246IEhBU19ESVNQRVJTSU9OLFxuXG5cdFx0XHRpcmlkZXNjZW5jZTogSEFTX0lSSURFU0NFTkNFLFxuXHRcdFx0aXJpZGVzY2VuY2VNYXA6IEhBU19JUklERVNDRU5DRU1BUCxcblx0XHRcdGlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwOiBIQVNfSVJJREVTQ0VOQ0VfVEhJQ0tORVNTTUFQLFxuXG5cdFx0XHRzaGVlbjogSEFTX1NIRUVOLFxuXHRcdFx0c2hlZW5Db2xvck1hcDogSEFTX1NIRUVOX0NPTE9STUFQLFxuXHRcdFx0c2hlZW5Sb3VnaG5lc3NNYXA6IEhBU19TSEVFTl9ST1VHSE5FU1NNQVAsXG5cblx0XHRcdHNwZWN1bGFyTWFwOiBIQVNfU1BFQ1VMQVJNQVAsXG5cdFx0XHRzcGVjdWxhckNvbG9yTWFwOiBIQVNfU1BFQ1VMQVJfQ09MT1JNQVAsXG5cdFx0XHRzcGVjdWxhckludGVuc2l0eU1hcDogSEFTX1NQRUNVTEFSX0lOVEVOU0lUWU1BUCxcblxuXHRcdFx0dHJhbnNtaXNzaW9uOiBIQVNfVFJBTlNNSVNTSU9OLFxuXHRcdFx0dHJhbnNtaXNzaW9uTWFwOiBIQVNfVFJBTlNNSVNTSU9OTUFQLFxuXHRcdFx0dGhpY2tuZXNzTWFwOiBIQVNfVEhJQ0tORVNTTUFQLFxuXG5cdFx0XHRncmFkaWVudE1hcDogSEFTX0dSQURJRU5UTUFQLFxuXG5cdFx0XHRvcGFxdWU6IG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSAmJiBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwuYWxwaGFUb0NvdmVyYWdlID09PSBmYWxzZSxcblxuXHRcdFx0YWxwaGFNYXA6IEhBU19BTFBIQU1BUCxcblx0XHRcdGFscGhhVGVzdDogSEFTX0FMUEhBVEVTVCxcblx0XHRcdGFscGhhSGFzaDogSEFTX0FMUEhBSEFTSCxcblxuXHRcdFx0Y29tYmluZTogbWF0ZXJpYWwuY29tYmluZSxcblxuXHRcdFx0Ly9cblxuXHRcdFx0bWFwVXY6IEhBU19NQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwubWFwLmNoYW5uZWwgKSxcblx0XHRcdGFvTWFwVXY6IEhBU19BT01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5hb01hcC5jaGFubmVsICksXG5cdFx0XHRsaWdodE1hcFV2OiBIQVNfTElHSFRNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwubGlnaHRNYXAuY2hhbm5lbCApLFxuXHRcdFx0YnVtcE1hcFV2OiBIQVNfQlVNUE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5idW1wTWFwLmNoYW5uZWwgKSxcblx0XHRcdG5vcm1hbE1hcFV2OiBIQVNfTk9STUFMTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLm5vcm1hbE1hcC5jaGFubmVsICksXG5cdFx0XHRkaXNwbGFjZW1lbnRNYXBVdjogSEFTX0RJU1BMQUNFTUVOVE1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAuY2hhbm5lbCApLFxuXHRcdFx0ZW1pc3NpdmVNYXBVdjogSEFTX0VNSVNTSVZFTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0bWV0YWxuZXNzTWFwVXY6IEhBU19NRVRBTE5FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwubWV0YWxuZXNzTWFwLmNoYW5uZWwgKSxcblx0XHRcdHJvdWdobmVzc01hcFV2OiBIQVNfUk9VR0hORVNTTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnJvdWdobmVzc01hcC5jaGFubmVsICksXG5cblx0XHRcdGFuaXNvdHJvcHlNYXBVdjogSEFTX0FOSVNPVFJPUFlNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuYW5pc290cm9weU1hcC5jaGFubmVsICksXG5cblx0XHRcdGNsZWFyY29hdE1hcFV2OiBIQVNfQ0xFQVJDT0FUTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmNsZWFyY29hdE1hcC5jaGFubmVsICksXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxNYXBVdjogSEFTX0NMRUFSQ09BVF9OT1JNQUxNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwLmNoYW5uZWwgKSxcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzc01hcFV2OiBIQVNfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHRpcmlkZXNjZW5jZU1hcFV2OiBIQVNfSVJJREVTQ0VOQ0VNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuaXJpZGVzY2VuY2VNYXAuY2hhbm5lbCApLFxuXHRcdFx0aXJpZGVzY2VuY2VUaGlja25lc3NNYXBVdjogSEFTX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcC5jaGFubmVsICksXG5cblx0XHRcdHNoZWVuQ29sb3JNYXBVdjogSEFTX1NIRUVOX0NPTE9STUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAuY2hhbm5lbCApLFxuXHRcdFx0c2hlZW5Sb3VnaG5lc3NNYXBVdjogSEFTX1NIRUVOX1JPVUdITkVTU01BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zaGVlblJvdWdobmVzc01hcC5jaGFubmVsICksXG5cblx0XHRcdHNwZWN1bGFyTWFwVXY6IEhBU19TUEVDVUxBUk1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zcGVjdWxhck1hcC5jaGFubmVsICksXG5cdFx0XHRzcGVjdWxhckNvbG9yTWFwVXY6IEhBU19TUEVDVUxBUl9DT0xPUk1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwLmNoYW5uZWwgKSxcblx0XHRcdHNwZWN1bGFySW50ZW5zaXR5TWFwVXY6IEhBU19TUEVDVUxBUl9JTlRFTlNJVFlNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHlNYXAuY2hhbm5lbCApLFxuXG5cdFx0XHR0cmFuc21pc3Npb25NYXBVdjogSEFTX1RSQU5TTUlTU0lPTk1BUCAmJiBnZXRDaGFubmVsKCBtYXRlcmlhbC50cmFuc21pc3Npb25NYXAuY2hhbm5lbCApLFxuXHRcdFx0dGhpY2tuZXNzTWFwVXY6IEhBU19USElDS05FU1NNQVAgJiYgZ2V0Q2hhbm5lbCggbWF0ZXJpYWwudGhpY2tuZXNzTWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0YWxwaGFNYXBVdjogSEFTX0FMUEhBTUFQICYmIGdldENoYW5uZWwoIG1hdGVyaWFsLmFscGhhTWFwLmNoYW5uZWwgKSxcblxuXHRcdFx0Ly9cblxuXHRcdFx0dmVydGV4VGFuZ2VudHM6ICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMudGFuZ2VudCAmJiAoIEhBU19OT1JNQUxNQVAgfHwgSEFTX0FOSVNPVFJPUFkgKSxcblx0XHRcdHZlcnRleENvbG9yczogbWF0ZXJpYWwudmVydGV4Q29sb3JzLFxuXHRcdFx0dmVydGV4QWxwaGFzOiBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPT09IHRydWUgJiYgISEgZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLml0ZW1TaXplID09PSA0LFxuXG5cdFx0XHRwb2ludHNVdnM6IG9iamVjdC5pc1BvaW50cyA9PT0gdHJ1ZSAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2ICYmICggSEFTX01BUCB8fCBIQVNfQUxQSEFNQVAgKSxcblxuXHRcdFx0Zm9nOiAhISBmb2csXG5cdFx0XHR1c2VGb2c6IG1hdGVyaWFsLmZvZyA9PT0gdHJ1ZSxcblx0XHRcdGZvZ0V4cDI6ICggISEgZm9nICYmIGZvZy5pc0ZvZ0V4cDIgKSxcblxuXHRcdFx0ZmxhdFNoYWRpbmc6IG1hdGVyaWFsLmZsYXRTaGFkaW5nID09PSB0cnVlLFxuXG5cdFx0XHRzaXplQXR0ZW51YXRpb246IG1hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9PT0gdHJ1ZSxcblx0XHRcdGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGxvZ2FyaXRobWljRGVwdGhCdWZmZXIsXG5cdFx0XHRyZXZlcnNlRGVwdGhCdWZmZXI6IHJldmVyc2VEZXB0aEJ1ZmZlcixcblxuXHRcdFx0c2tpbm5pbmc6IG9iamVjdC5pc1NraW5uZWRNZXNoID09PSB0cnVlLFxuXG5cdFx0XHRtb3JwaFRhcmdldHM6IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkLFxuXHRcdFx0bW9ycGhOb3JtYWxzOiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQsXG5cdFx0XHRtb3JwaENvbG9yczogZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yICE9PSB1bmRlZmluZWQsXG5cdFx0XHRtb3JwaFRhcmdldHNDb3VudDogbW9ycGhUYXJnZXRzQ291bnQsXG5cdFx0XHRtb3JwaFRleHR1cmVTdHJpZGU6IG1vcnBoVGV4dHVyZVN0cmlkZSxcblxuXHRcdFx0bnVtRGlyTGlnaHRzOiBsaWdodHMuZGlyZWN0aW9uYWwubGVuZ3RoLFxuXHRcdFx0bnVtUG9pbnRMaWdodHM6IGxpZ2h0cy5wb2ludC5sZW5ndGgsXG5cdFx0XHRudW1TcG90TGlnaHRzOiBsaWdodHMuc3BvdC5sZW5ndGgsXG5cdFx0XHRudW1TcG90TGlnaHRNYXBzOiBsaWdodHMuc3BvdExpZ2h0TWFwLmxlbmd0aCxcblx0XHRcdG51bVJlY3RBcmVhTGlnaHRzOiBsaWdodHMucmVjdEFyZWEubGVuZ3RoLFxuXHRcdFx0bnVtSGVtaUxpZ2h0czogbGlnaHRzLmhlbWkubGVuZ3RoLFxuXG5cdFx0XHRudW1EaXJMaWdodFNoYWRvd3M6IGxpZ2h0cy5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGgsXG5cdFx0XHRudW1Qb2ludExpZ2h0U2hhZG93czogbGlnaHRzLnBvaW50U2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodFNoYWRvd3M6IGxpZ2h0cy5zcG90U2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwczogbGlnaHRzLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyxcblxuXHRcdFx0bnVtTGlnaHRQcm9iZXM6IGxpZ2h0cy5udW1MaWdodFByb2JlcyxcblxuXHRcdFx0bnVtQ2xpcHBpbmdQbGFuZXM6IGNsaXBwaW5nLm51bVBsYW5lcyxcblx0XHRcdG51bUNsaXBJbnRlcnNlY3Rpb246IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbixcblxuXHRcdFx0ZGl0aGVyaW5nOiBtYXRlcmlhbC5kaXRoZXJpbmcsXG5cblx0XHRcdHNoYWRvd01hcEVuYWJsZWQ6IHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkICYmIHNoYWRvd3MubGVuZ3RoID4gMCxcblx0XHRcdHNoYWRvd01hcFR5cGU6IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlLFxuXG5cdFx0XHR0b25lTWFwcGluZzogdG9uZU1hcHBpbmcsXG5cblx0XHRcdGRlY29kZVZpZGVvVGV4dHVyZTogSEFTX01BUCAmJiAoIG1hdGVyaWFsLm1hcC5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApICYmICggQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBtYXRlcmlhbC5tYXAuY29sb3JTcGFjZSApID09PSBTUkdCVHJhbnNmZXIgKSxcblx0XHRcdGRlY29kZVZpZGVvVGV4dHVyZUVtaXNzaXZlOiBIQVNfRU1JU1NJVkVNQVAgJiYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApICYmICggQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5jb2xvclNwYWNlICkgPT09IFNSR0JUcmFuc2ZlciApLFxuXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSxcblxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHR1c2VEZXB0aFBhY2tpbmc6IG1hdGVyaWFsLmRlcHRoUGFja2luZyA+PSAwLFxuXHRcdFx0ZGVwdGhQYWNraW5nOiBtYXRlcmlhbC5kZXB0aFBhY2tpbmcgfHwgMCxcblxuXHRcdFx0aW5kZXgwQXR0cmlidXRlTmFtZTogbWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSxcblxuXHRcdFx0ZXh0ZW5zaW9uQ2xpcEN1bGxEaXN0YW5jZTogSEFTX0VYVEVOU0lPTlMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5jbGlwQ3VsbERpc3RhbmNlID09PSB0cnVlICYmIGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfY2xpcF9jdWxsX2Rpc3RhbmNlJyApLFxuXHRcdFx0ZXh0ZW5zaW9uTXVsdGlEcmF3OiAoIEhBU19FWFRFTlNJT05TICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMubXVsdGlEcmF3ID09PSB0cnVlIHx8IElTX0JBVENIRURNRVNIICkgJiYgZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aV9kcmF3JyApLFxuXG5cdFx0XHRyZW5kZXJlckV4dGVuc2lvblBhcmFsbGVsU2hhZGVyQ29tcGlsZTogZXh0ZW5zaW9ucy5oYXMoICdLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUnICksXG5cblx0XHRcdGN1c3RvbVByb2dyYW1DYWNoZUtleTogbWF0ZXJpYWwuY3VzdG9tUHJvZ3JhbUNhY2hlS2V5KClcblxuXHRcdH07XG5cblx0XHQvLyB0aGUgdXNhZ2Ugb2YgZ2V0Q2hhbm5lbCgpIGRldGVybWluZXMgdGhlIGFjdGl2ZSB0ZXh0dXJlIGNoYW5uZWxzIGZvciB0aGlzIHNoYWRlclxuXG5cdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdjFzID0gX2FjdGl2ZUNoYW5uZWxzLmhhcyggMSApO1xuXHRcdHBhcmFtZXRlcnMudmVydGV4VXYycyA9IF9hY3RpdmVDaGFubmVscy5oYXMoIDIgKTtcblx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2M3MgPSBfYWN0aXZlQ2hhbm5lbHMuaGFzKCAzICk7XG5cblx0XHRfYWN0aXZlQ2hhbm5lbHMuY2xlYXIoKTtcblxuXHRcdHJldHVybiBwYXJhbWV0ZXJzO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQcm9ncmFtQ2FjaGVLZXkoIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRjb25zdCBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVZlcnRleFNoYWRlcklEICk7XG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbUZyYWdtZW50U2hhZGVySUQgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcGFyYW1ldGVycy5kZWZpbmVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIGNvbnN0IG5hbWUgaW4gcGFyYW1ldGVycy5kZWZpbmVzICkge1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIG5hbWUgKTtcblx0XHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZWZpbmVzWyBuYW1lIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnZXRQcm9ncmFtQ2FjaGVLZXlQYXJhbWV0ZXJzKCBhcnJheSwgcGFyYW1ldGVycyApO1xuXHRcdFx0Z2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICk7XG5cdFx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlICk7XG5cblx0XHR9XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmN1c3RvbVByb2dyYW1DYWNoZUtleSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5UGFyYW1ldGVycyggYXJyYXksIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMub3V0cHV0Q29sb3JTcGFjZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwTW9kZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZW52TWFwQ3ViZVVWSGVpZ2h0ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYWxwaGFNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubGlnaHRNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW9NYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYnVtcE1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5ub3JtYWxNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5yb3VnaG5lc3NNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuYW5pc290cm9weU1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jbGVhcmNvYXRNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmNsZWFyY29hdFJvdWdobmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZU1hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaGVlbkNvbG9yTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoZWVuUm91Z2huZXNzTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNwZWN1bGFyQ29sb3JNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc3BlY3VsYXJJbnRlbnNpdHlNYXBVdiApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudHJhbnNtaXNzaW9uTWFwVXYgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnRoaWNrbmVzc01hcFV2ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5jb21iaW5lICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5mb2dFeHAyICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm1vcnBoVGFyZ2V0c0NvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5tb3JwaEF0dHJpYnV0ZUNvdW50ICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1TcG90TGlnaHRNYXBzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1SZWN0QXJlYUxpZ2h0cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1MaWdodFByb2JlcyApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSApO1xuXHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgKTtcblx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5udW1DbGlwSW50ZXJzZWN0aW9uICk7XG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbUNhY2hlS2V5Qm9vbGVhbnMoIGFycmF5LCBwYXJhbWV0ZXJzICkge1xuXG5cdFx0X3Byb2dyYW1MYXllcnMuZGlzYWJsZUFsbCgpO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAwICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmluc3RhbmNpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuaW5zdGFuY2luZ01vcnBoIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMyApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tYXRjYXAgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubm9ybWFsTWFwT2JqZWN0U3BhY2UgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA2ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm5vcm1hbE1hcFRhbmdlbnRTcGFjZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuY2xlYXJjb2F0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5pcmlkZXNjZW5jZSApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFUZXN0IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4Q29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTEgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4QWxwaGFzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VXYxcyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnZlcnRleFV2MnMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy52ZXJ0ZXhVdjNzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5hbmlzb3Ryb3B5IClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYWxwaGFIYXNoIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmcgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxOSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kaXNwZXJzaW9uIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMjAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuYmF0Y2hpbmdDb2xvciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIxICk7XG5cblx0XHRhcnJheS5wdXNoKCBfcHJvZ3JhbUxheWVycy5tYXNrICk7XG5cdFx0X3Byb2dyYW1MYXllcnMuZGlzYWJsZUFsbCgpO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZvZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDAgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMudXNlRm9nIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMSApO1xuXHRcdGlmICggcGFyYW1ldGVycy5mbGF0U2hhZGluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDIgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDMgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMucmV2ZXJzZURlcHRoQnVmZmVyIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5za2lubmluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDUgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggNiApO1xuXHRcdGlmICggcGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA3ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLm1vcnBoQ29sb3JzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggOCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCA5ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAxMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5kb3VibGVTaWRlZCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDExICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmZsaXBTaWRlZCApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEyICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnVzZURlcHRoUGFja2luZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDEzICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRpdGhlcmluZyApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE0ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnRyYW5zbWlzc2lvbiApXG5cdFx0XHRfcHJvZ3JhbUxheWVycy5lbmFibGUoIDE1ICk7XG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoZWVuIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTYgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMub3BhcXVlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTcgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMucG9pbnRzVXZzIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTggKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlIClcblx0XHRcdF9wcm9ncmFtTGF5ZXJzLmVuYWJsZSggMTkgKTtcblx0XHRpZiAoIHBhcmFtZXRlcnMuZGVjb2RlVmlkZW9UZXh0dXJlRW1pc3NpdmUgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMCApO1xuXHRcdGlmICggcGFyYW1ldGVycy5hbHBoYVRvQ292ZXJhZ2UgKVxuXHRcdFx0X3Byb2dyYW1MYXllcnMuZW5hYmxlKCAyMSApO1xuXG5cdFx0YXJyYXkucHVzaCggX3Byb2dyYW1MYXllcnMubWFzayApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRVbmlmb3JtcyggbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBzaGFkZXJJRCA9IHNoYWRlcklEc1sgbWF0ZXJpYWwudHlwZSBdO1xuXHRcdGxldCB1bmlmb3JtcztcblxuXHRcdGlmICggc2hhZGVySUQgKSB7XG5cblx0XHRcdGNvbnN0IHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTtcblx0XHRcdHVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1bmlmb3JtcyA9IG1hdGVyaWFsLnVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhY3F1aXJlUHJvZ3JhbSggcGFyYW1ldGVycywgY2FjaGVLZXkgKSB7XG5cblx0XHRsZXQgcHJvZ3JhbTtcblxuXHRcdC8vIENoZWNrIGlmIGNvZGUgaGFzIGJlZW4gYWxyZWFkeSBjb21waWxlZFxuXHRcdGZvciAoIGxldCBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCArKyApIHtcblxuXHRcdFx0Y29uc3QgcHJlZXhpc3RpbmdQcm9ncmFtID0gcHJvZ3JhbXNbIHAgXTtcblxuXHRcdFx0aWYgKCBwcmVleGlzdGluZ1Byb2dyYW0uY2FjaGVLZXkgPT09IGNhY2hlS2V5ICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBwcmVleGlzdGluZ1Byb2dyYW07XG5cdFx0XHRcdCsrIHByb2dyYW0udXNlZFRpbWVzO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHByb2dyYW0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbSA9IG5ldyBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycywgYmluZGluZ1N0YXRlcyApO1xuXHRcdFx0cHJvZ3JhbXMucHVzaCggcHJvZ3JhbSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByb2dyYW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtICkge1xuXG5cdFx0aWYgKCAtLSBwcm9ncmFtLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGZyb20gdW5vcmRlcmVkIHNldFxuXHRcdFx0Y29uc3QgaSA9IHByb2dyYW1zLmluZGV4T2YoIHByb2dyYW0gKTtcblx0XHRcdHByb2dyYW1zWyBpIF0gPSBwcm9ncmFtc1sgcHJvZ3JhbXMubGVuZ3RoIC0gMSBdO1xuXHRcdFx0cHJvZ3JhbXMucG9wKCk7XG5cblx0XHRcdC8vIEZyZWUgV2ViR0wgcmVzb3VyY2VzXG5cdFx0XHRwcm9ncmFtLmRlc3Ryb3koKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVsZWFzZVNoYWRlckNhY2hlKCBtYXRlcmlhbCApIHtcblxuXHRcdF9jdXN0b21TaGFkZXJzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdF9jdXN0b21TaGFkZXJzLmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXRQYXJhbWV0ZXJzOiBnZXRQYXJhbWV0ZXJzLFxuXHRcdGdldFByb2dyYW1DYWNoZUtleTogZ2V0UHJvZ3JhbUNhY2hlS2V5LFxuXHRcdGdldFVuaWZvcm1zOiBnZXRVbmlmb3Jtcyxcblx0XHRhY3F1aXJlUHJvZ3JhbTogYWNxdWlyZVByb2dyYW0sXG5cdFx0cmVsZWFzZVByb2dyYW06IHJlbGVhc2VQcm9ncmFtLFxuXHRcdHJlbGVhc2VTaGFkZXJDYWNoZTogcmVsZWFzZVNoYWRlckNhY2hlLFxuXHRcdC8vIEV4cG9zZWQgZm9yIHJlc291cmNlIG1vbml0b3JpbmcgJiBlcnJvciBmZWVkYmFjayB2aWEgcmVuZGVyZXIuaW5mbzpcblx0XHRwcm9ncmFtczogcHJvZ3JhbXMsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUHJvcGVydGllcygpIHtcblxuXHRsZXQgcHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gaGFzKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gcHJvcGVydGllcy5oYXMoIG9iamVjdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCApIHtcblxuXHRcdGxldCBtYXAgPSBwcm9wZXJ0aWVzLmdldCggb2JqZWN0ICk7XG5cblx0XHRpZiAoIG1hcCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRtYXAgPSB7fTtcblx0XHRcdHByb3BlcnRpZXMuc2V0KCBvYmplY3QsIG1hcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hcDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVtb3ZlKCBvYmplY3QgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZSggb2JqZWN0ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBrZXksIHZhbHVlICkge1xuXG5cdFx0cHJvcGVydGllcy5nZXQoIG9iamVjdCApWyBrZXkgXSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xuXG5cdFx0cHJvcGVydGllcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aGFzOiBoYXMsXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5tYXRlcmlhbC5pZCAhPT0gYi5tYXRlcmlhbC5pZCApIHtcblxuXHRcdHJldHVybiBhLm1hdGVyaWFsLmlkIC0gYi5tYXRlcmlhbC5pZDtcblxuXHR9IGVsc2UgaWYgKCBhLnogIT09IGIueiApIHtcblxuXHRcdHJldHVybiBhLnogLSBiLno7XG5cblx0fSBlbHNlIHtcblxuXHRcdHJldHVybiBhLmlkIC0gYi5pZDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYi56IC0gYS56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xuXG5cdGNvbnN0IHJlbmRlckl0ZW1zID0gW107XG5cdGxldCByZW5kZXJJdGVtc0luZGV4ID0gMDtcblxuXHRjb25zdCBvcGFxdWUgPSBbXTtcblx0Y29uc3QgdHJhbnNtaXNzaXZlID0gW107XG5cdGNvbnN0IHRyYW5zcGFyZW50ID0gW107XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNtaXNzaXZlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNwYXJlbnQubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGxldCByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXTtcblxuXHRcdGlmICggcmVuZGVySXRlbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJJdGVtID0ge1xuXHRcdFx0XHRpZDogb2JqZWN0LmlkLFxuXHRcdFx0XHRvYmplY3Q6IG9iamVjdCxcblx0XHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXG5cdFx0XHRcdGdyb3VwT3JkZXI6IGdyb3VwT3JkZXIsXG5cdFx0XHRcdHJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsXG5cdFx0XHRcdHo6IHosXG5cdFx0XHRcdGdyb3VwOiBncm91cFxuXHRcdFx0fTtcblxuXHRcdFx0cmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xuXHRcdFx0cmVuZGVySXRlbS5yZW5kZXJPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ueiA9IHo7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJJdGVtc0luZGV4ICsrO1xuXG5cdFx0cmV0dXJuIHJlbmRlckl0ZW07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdGNvbnN0IHJlbmRlckl0ZW0gPSBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAuMCApIHtcblxuXHRcdFx0dHJhbnNtaXNzaXZlLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlICkge1xuXG5cdFx0XHR0cmFuc3BhcmVudC5wdXNoKCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRvcGFxdWUucHVzaCggcmVuZGVySXRlbSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1bnNoaWZ0KCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHRjb25zdCByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC50cmFuc21pc3Npb24gPiAwLjAgKSB7XG5cblx0XHRcdHRyYW5zbWlzc2l2ZS51bnNoaWZ0KCByZW5kZXJJdGVtICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dHJhbnNwYXJlbnQudW5zaGlmdCggcmVuZGVySXRlbSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0b3BhcXVlLnVuc2hpZnQoIHJlbmRlckl0ZW0gKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc29ydCggY3VzdG9tT3BhcXVlU29ydCwgY3VzdG9tVHJhbnNwYXJlbnRTb3J0ICkge1xuXG5cdFx0aWYgKCBvcGFxdWUubGVuZ3RoID4gMSApIG9wYXF1ZS5zb3J0KCBjdXN0b21PcGFxdWVTb3J0IHx8IHBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc21pc3NpdmUubGVuZ3RoID4gMSApIHRyYW5zbWlzc2l2ZS5zb3J0KCBjdXN0b21UcmFuc3BhcmVudFNvcnQgfHwgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlICk7XG5cdFx0aWYgKCB0cmFuc3BhcmVudC5sZW5ndGggPiAxICkgdHJhbnNwYXJlbnQuc29ydCggY3VzdG9tVHJhbnNwYXJlbnRTb3J0IHx8IHJldmVyc2VQYWludGVyU29ydFN0YWJsZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBmaW5pc2goKSB7XG5cblx0XHQvLyBDbGVhciByZWZlcmVuY2VzIGZyb20gaW5hY3RpdmUgcmVuZGVySXRlbXMgaW4gdGhlIGxpc3RcblxuXHRcdGZvciAoIGxldCBpID0gcmVuZGVySXRlbXNJbmRleCwgaWwgPSByZW5kZXJJdGVtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHJlbmRlckl0ZW1zWyBpIF07XG5cblx0XHRcdGlmICggcmVuZGVySXRlbS5pZCA9PT0gbnVsbCApIGJyZWFrO1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ub2JqZWN0ID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdG9wYXF1ZTogb3BhcXVlLFxuXHRcdHRyYW5zbWlzc2l2ZTogdHJhbnNtaXNzaXZlLFxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcblxuXHRcdGluaXQ6IGluaXQsXG5cdFx0cHVzaDogcHVzaCxcblx0XHR1bnNoaWZ0OiB1bnNoaWZ0LFxuXHRcdGZpbmlzaDogZmluaXNoLFxuXG5cdFx0c29ydDogc29ydFxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdHMoKSB7XG5cblx0bGV0IGxpc3RzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggKSB7XG5cblx0XHRjb25zdCBsaXN0QXJyYXkgPSBsaXN0cy5nZXQoIHNjZW5lICk7XG5cdFx0bGV0IGxpc3Q7XG5cblx0XHRpZiAoIGxpc3RBcnJheSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpO1xuXHRcdFx0bGlzdHMuc2V0KCBzY2VuZSwgWyBsaXN0IF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyQ2FsbERlcHRoID49IGxpc3RBcnJheS5sZW5ndGggKSB7XG5cblx0XHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdFx0bGlzdEFycmF5LnB1c2goIGxpc3QgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRsaXN0ID0gbGlzdEFycmF5WyByZW5kZXJDYWxsRGVwdGggXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Q7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRsaXN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFVuaWZvcm1zQ2FjaGUoKSB7XG5cblx0Y29uc3QgbGlnaHRzID0ge307XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCBsaWdodCApIHtcblxuXHRcdFx0aWYgKCBsaWdodHNbIGxpZ2h0LmlkIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbGlnaHRzWyBsaWdodC5pZCBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCB1bmlmb3JtcztcblxuXHRcdFx0c3dpdGNoICggbGlnaHQudHlwZSApIHtcblxuXHRcdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3BvdExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IDAsXG5cdFx0XHRcdFx0XHRjb25lQ29zOiAwLFxuXHRcdFx0XHRcdFx0cGVudW1icmFDb3M6IDAsXG5cdFx0XHRcdFx0XHRkZWNheTogMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxuXHRcdFx0XHRcdFx0ZGVjYXk6IDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRza3lDb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRncm91bmRDb2xvcjogbmV3IENvbG9yKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRoYWxmV2lkdGg6IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRoYWxmSGVpZ2h0OiBuZXcgVmVjdG9yMygpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gU2hhZG93VW5pZm9ybXNDYWNoZSgpIHtcblxuXHRjb25zdCBsaWdodHMgPSB7fTtcblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIGxpZ2h0c1sgbGlnaHQuaWQgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBsaWdodHNbIGxpZ2h0LmlkIF07XG5cblx0XHRcdH1cblxuXHRcdFx0bGV0IHVuaWZvcm1zO1xuXG5cdFx0XHRzd2l0Y2ggKCBsaWdodC50eXBlICkge1xuXG5cdFx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdTcG90TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0c2hhZG93SW50ZW5zaXR5OiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcblx0XHRcdFx0XHRcdHNoYWRvd05vcm1hbEJpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHNoYWRvd0ludGVuc2l0eTogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dOb3JtYWxCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYU5lYXI6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dDYW1lcmFGYXI6IDEwMDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBzZXQgUmVjdEFyZWFMaWdodCBzaGFkb3cgdW5pZm9ybXNcblxuXHRcdFx0fVxuXG5cdFx0XHRsaWdodHNbIGxpZ2h0LmlkIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0cmV0dXJuIHVuaWZvcm1zO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuXG5cbmxldCBuZXh0VmVyc2lvbiA9IDA7XG5cbmZ1bmN0aW9uIHNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCggbGlnaHRBLCBsaWdodEIgKSB7XG5cblx0cmV0dXJuICggbGlnaHRCLmNhc3RTaGFkb3cgPyAyIDogMCApIC0gKCBsaWdodEEuY2FzdFNoYWRvdyA/IDIgOiAwICkgKyAoIGxpZ2h0Qi5tYXAgPyAxIDogMCApIC0gKCBsaWdodEEubWFwID8gMSA6IDAgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTExpZ2h0cyggZXh0ZW5zaW9ucyApIHtcblxuXHRjb25zdCBjYWNoZSA9IG5ldyBVbmlmb3Jtc0NhY2hlKCk7XG5cblx0Y29uc3Qgc2hhZG93Q2FjaGUgPSBTaGFkb3dVbmlmb3Jtc0NhY2hlKCk7XG5cblx0Y29uc3Qgc3RhdGUgPSB7XG5cblx0XHR2ZXJzaW9uOiAwLFxuXG5cdFx0aGFzaDoge1xuXHRcdFx0ZGlyZWN0aW9uYWxMZW5ndGg6IC0xLFxuXHRcdFx0cG9pbnRMZW5ndGg6IC0xLFxuXHRcdFx0c3BvdExlbmd0aDogLTEsXG5cdFx0XHRyZWN0QXJlYUxlbmd0aDogLTEsXG5cdFx0XHRoZW1pTGVuZ3RoOiAtMSxcblxuXHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzOiAtMSxcblx0XHRcdG51bVBvaW50U2hhZG93czogLTEsXG5cdFx0XHRudW1TcG90U2hhZG93czogLTEsXG5cdFx0XHRudW1TcG90TWFwczogLTEsXG5cblx0XHRcdG51bUxpZ2h0UHJvYmVzOiAtMVxuXHRcdH0sXG5cblx0XHRhbWJpZW50OiBbIDAsIDAsIDAgXSxcblx0XHRwcm9iZTogW10sXG5cdFx0ZGlyZWN0aW9uYWw6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93OiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdHNwb3Q6IFtdLFxuXHRcdHNwb3RMaWdodE1hcDogW10sXG5cdFx0c3BvdFNoYWRvdzogW10sXG5cdFx0c3BvdFNoYWRvd01hcDogW10sXG5cdFx0c3BvdExpZ2h0TWF0cml4OiBbXSxcblx0XHRyZWN0QXJlYTogW10sXG5cdFx0cmVjdEFyZWFMVEMxOiBudWxsLFxuXHRcdHJlY3RBcmVhTFRDMjogbnVsbCxcblx0XHRwb2ludDogW10sXG5cdFx0cG9pbnRTaGFkb3c6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW10sXG5cdFx0bnVtU3BvdExpZ2h0U2hhZG93c1dpdGhNYXBzOiAwLFxuXHRcdG51bUxpZ2h0UHJvYmVzOiAwXG5cblx0fTtcblxuXHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmUucHVzaCggbmV3IFZlY3RvcjMoKSApO1xuXG5cdGNvbnN0IHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXHRjb25zdCBtYXRyaXg0ID0gbmV3IE1hdHJpeDQoKTtcblx0Y29uc3QgbWF0cml4NDIgPSBuZXcgTWF0cml4NCgpO1xuXG5cdGZ1bmN0aW9uIHNldHVwKCBsaWdodHMgKSB7XG5cblx0XHRsZXQgciA9IDAsIGcgPSAwLCBiID0gMDtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZVsgaSBdLnNldCggMCwgMCwgMCApO1xuXG5cdFx0bGV0IGRpcmVjdGlvbmFsTGVuZ3RoID0gMDtcblx0XHRsZXQgcG9pbnRMZW5ndGggPSAwO1xuXHRcdGxldCBzcG90TGVuZ3RoID0gMDtcblx0XHRsZXQgcmVjdEFyZWFMZW5ndGggPSAwO1xuXHRcdGxldCBoZW1pTGVuZ3RoID0gMDtcblxuXHRcdGxldCBudW1EaXJlY3Rpb25hbFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1Qb2ludFNoYWRvd3MgPSAwO1xuXHRcdGxldCBudW1TcG90U2hhZG93cyA9IDA7XG5cdFx0bGV0IG51bVNwb3RNYXBzID0gMDtcblx0XHRsZXQgbnVtU3BvdFNoYWRvd3NXaXRoTWFwcyA9IDA7XG5cblx0XHRsZXQgbnVtTGlnaHRQcm9iZXMgPSAwO1xuXG5cdFx0Ly8gb3JkZXJpbmcgOiBbc2hhZG93IGNhc3RpbmcgKyBtYXAgdGV4dHVyaW5nLCBtYXAgdGV4dHVyaW5nLCBzaGFkb3cgY2FzdGluZywgbm9uZSBdXG5cdFx0bGlnaHRzLnNvcnQoIHNoYWRvd0Nhc3RpbmdBbmRUZXh0dXJpbmdMaWdodHNGaXJzdCApO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cblx0XHRcdGNvbnN0IGNvbG9yID0gbGlnaHQuY29sb3I7XG5cdFx0XHRjb25zdCBpbnRlbnNpdHkgPSBsaWdodC5pbnRlbnNpdHk7XG5cdFx0XHRjb25zdCBkaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXG5cdFx0XHRjb25zdCBzaGFkb3dNYXAgPSAoIGxpZ2h0LnNoYWRvdyAmJiBsaWdodC5zaGFkb3cubWFwICkgPyBsaWdodC5zaGFkb3cubWFwLnRleHR1cmUgOiBudWxsO1xuXG5cdFx0XHRpZiAoIGxpZ2h0LmlzQW1iaWVudExpZ2h0ICkge1xuXG5cdFx0XHRcdHIgKz0gY29sb3IuciAqIGludGVuc2l0eTtcblx0XHRcdFx0ZyArPSBjb2xvci5nICogaW50ZW5zaXR5O1xuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzTGlnaHRQcm9iZSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCA5OyBqICsrICkge1xuXG5cdFx0XHRcdFx0c3RhdGUucHJvYmVbIGogXS5hZGRTY2FsZWRWZWN0b3IoIGxpZ2h0LnNoLmNvZWZmaWNpZW50c1sgaiBdLCBpbnRlbnNpdHkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bnVtTGlnaHRQcm9iZXMgKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzRGlyZWN0aW9uYWxMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvdy5pbnRlbnNpdHk7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93WyBkaXJlY3Rpb25hbExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7XG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dNYXA7XG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xuXG5cdFx0XHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wZW51bWJyYUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSAqICggMSAtIGxpZ2h0LnBlbnVtYnJhICkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHRzdGF0ZS5zcG90WyBzcG90TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRjb25zdCBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5tYXAgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5zcG90TGlnaHRNYXBbIG51bVNwb3RNYXBzIF0gPSBsaWdodC5tYXA7XG5cdFx0XHRcdFx0bnVtU3BvdE1hcHMgKys7XG5cblx0XHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhlIGxpZ2h0TWF0cml4IGlzIHVwIHRvIGRhdGVcblx0XHRcdFx0XHQvLyBUT0RPIDogZG8gaXQgaWYgcmVxdWlyZWQgb25seVxuXHRcdFx0XHRcdHNoYWRvdy51cGRhdGVNYXRyaWNlcyggbGlnaHQgKTtcblxuXHRcdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIG51bVNwb3RTaGFkb3dzV2l0aE1hcHMgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLnNwb3RMaWdodE1hdHJpeFsgc3BvdExlbmd0aCBdID0gc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0ludGVuc2l0eSA9IHNoYWRvdy5pbnRlbnNpdHk7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd05vcm1hbEJpYXMgPSBzaGFkb3cubm9ybWFsQmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblxuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dbIHNwb3RMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXBbIHNwb3RMZW5ndGggXSA9IHNoYWRvd01hcDtcblxuXHRcdFx0XHRcdG51bVNwb3RTaGFkb3dzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcG90TGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1JlY3RBcmVhTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLnNldCggbGlnaHQud2lkdGggKiAwLjUsIDAuMCwgMC4wICk7XG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KCAwLjAsIGxpZ2h0LmhlaWdodCAqIDAuNSwgMC4wICk7XG5cblx0XHRcdFx0c3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGxpZ2h0LmNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGxpZ2h0LmludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGxpZ2h0LmRpc3RhbmNlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xuXG5cdFx0XHRcdGlmICggbGlnaHQuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdGNvbnN0IHNoYWRvd1VuaWZvcm1zID0gc2hhZG93Q2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93SW50ZW5zaXR5ID0gc2hhZG93LmludGVuc2l0eTtcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Tm9ybWFsQmlhcyA9IHNoYWRvdy5ub3JtYWxCaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0NhbWVyYU5lYXIgPSBzaGFkb3cuY2FtZXJhLm5lYXI7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93Q2FtZXJhRmFyID0gc2hhZG93LmNhbWVyYS5mYXI7XG5cblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd1sgcG9pbnRMZW5ndGggXSA9IHNoYWRvd1VuaWZvcm1zO1xuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWFwWyBwb2ludExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4WyBwb2ludExlbmd0aCBdID0gbGlnaHQuc2hhZG93Lm1hdHJpeDtcblxuXHRcdFx0XHRcdG51bVBvaW50U2hhZG93cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF0gPSB1bmlmb3JtcztcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBjYWNoZS5nZXQoIGxpZ2h0ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2t5Q29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdyb3VuZENvbG9yLmNvcHkoIGxpZ2h0Lmdyb3VuZENvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdHN0YXRlLmhlbWlbIGhlbWlMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcmVjdEFyZWFMZW5ndGggPiAwICkge1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhTFRDMSA9IFVuaWZvcm1zTGliLkxUQ19GTE9BVF8xO1xuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfRkxPQVRfMjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzEgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8xO1xuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYUxUQzIgPSBVbmlmb3Jtc0xpYi5MVENfSEFMRl8yO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hbWJpZW50WyAwIF0gPSByO1xuXHRcdHN0YXRlLmFtYmllbnRbIDEgXSA9IGc7XG5cdFx0c3RhdGUuYW1iaWVudFsgMiBdID0gYjtcblxuXHRcdGNvbnN0IGhhc2ggPSBzdGF0ZS5oYXNoO1xuXG5cdFx0aWYgKCBoYXNoLmRpcmVjdGlvbmFsTGVuZ3RoICE9PSBkaXJlY3Rpb25hbExlbmd0aCB8fFxuXHRcdFx0aGFzaC5wb2ludExlbmd0aCAhPT0gcG9pbnRMZW5ndGggfHxcblx0XHRcdGhhc2guc3BvdExlbmd0aCAhPT0gc3BvdExlbmd0aCB8fFxuXHRcdFx0aGFzaC5yZWN0QXJlYUxlbmd0aCAhPT0gcmVjdEFyZWFMZW5ndGggfHxcblx0XHRcdGhhc2guaGVtaUxlbmd0aCAhPT0gaGVtaUxlbmd0aCB8fFxuXHRcdFx0aGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgIT09IG51bURpcmVjdGlvbmFsU2hhZG93cyB8fFxuXHRcdFx0aGFzaC5udW1Qb2ludFNoYWRvd3MgIT09IG51bVBvaW50U2hhZG93cyB8fFxuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyAhPT0gbnVtU3BvdFNoYWRvd3MgfHxcblx0XHRcdGhhc2gubnVtU3BvdE1hcHMgIT09IG51bVNwb3RNYXBzIHx8XG5cdFx0XHRoYXNoLm51bUxpZ2h0UHJvYmVzICE9PSBudW1MaWdodFByb2JlcyApIHtcblxuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0c3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvdy5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvdy5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcC5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xuXHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcC5sZW5ndGggPSBudW1TcG90U2hhZG93cztcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnNwb3RMaWdodE1hdHJpeC5sZW5ndGggPSBudW1TcG90U2hhZG93cyArIG51bVNwb3RNYXBzIC0gbnVtU3BvdFNoYWRvd3NXaXRoTWFwcztcblx0XHRcdHN0YXRlLnNwb3RMaWdodE1hcC5sZW5ndGggPSBudW1TcG90TWFwcztcblx0XHRcdHN0YXRlLm51bVNwb3RMaWdodFNoYWRvd3NXaXRoTWFwcyA9IG51bVNwb3RTaGFkb3dzV2l0aE1hcHM7XG5cdFx0XHRzdGF0ZS5udW1MaWdodFByb2JlcyA9IG51bUxpZ2h0UHJvYmVzO1xuXG5cdFx0XHRoYXNoLmRpcmVjdGlvbmFsTGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRoYXNoLnBvaW50TGVuZ3RoID0gcG9pbnRMZW5ndGg7XG5cdFx0XHRoYXNoLnNwb3RMZW5ndGggPSBzcG90TGVuZ3RoO1xuXHRcdFx0aGFzaC5yZWN0QXJlYUxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xuXHRcdFx0aGFzaC5oZW1pTGVuZ3RoID0gaGVtaUxlbmd0aDtcblxuXHRcdFx0aGFzaC5udW1EaXJlY3Rpb25hbFNoYWRvd3MgPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRoYXNoLm51bVBvaW50U2hhZG93cyA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdGhhc2gubnVtU3BvdFNoYWRvd3MgPSBudW1TcG90U2hhZG93cztcblx0XHRcdGhhc2gubnVtU3BvdE1hcHMgPSBudW1TcG90TWFwcztcblxuXHRcdFx0aGFzaC5udW1MaWdodFByb2JlcyA9IG51bUxpZ2h0UHJvYmVzO1xuXG5cdFx0XHRzdGF0ZS52ZXJzaW9uID0gbmV4dFZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwVmlldyggbGlnaHRzLCBjYW1lcmEgKSB7XG5cblx0XHRsZXQgZGlyZWN0aW9uYWxMZW5ndGggPSAwO1xuXHRcdGxldCBwb2ludExlbmd0aCA9IDA7XG5cdFx0bGV0IHNwb3RMZW5ndGggPSAwO1xuXHRcdGxldCByZWN0QXJlYUxlbmd0aCA9IDA7XG5cdFx0bGV0IGhlbWlMZW5ndGggPSAwO1xuXG5cdFx0Y29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3QgbGlnaHQgPSBsaWdodHNbIGkgXTtcblxuXHRcdFx0aWYgKCBsaWdodC5pc0RpcmVjdGlvbmFsTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5kaXJlY3Rpb25hbFsgZGlyZWN0aW9uYWxMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR2ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zdWIoIHZlY3RvcjMgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1Nwb3RMaWdodCApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtcyA9IHN0YXRlLnNwb3RbIHNwb3RMZW5ndGggXTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0c3BvdExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucmVjdEFyZWFbIHJlY3RBcmVhTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHQvLyBleHRyYWN0IGxvY2FsIHJvdGF0aW9uIG9mIGxpZ2h0IHRvIGRlcml2ZSB3aWR0aC9oZWlnaHQgaGFsZiB2ZWN0b3JzXG5cdFx0XHRcdG1hdHJpeDQyLmlkZW50aXR5KCk7XG5cdFx0XHRcdG1hdHJpeDQuY29weSggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0bWF0cml4NC5wcmVtdWx0aXBseSggdmlld01hdHJpeCApO1xuXHRcdFx0XHRtYXRyaXg0Mi5leHRyYWN0Um90YXRpb24oIG1hdHJpeDQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5zZXQoIDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjAgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNQb2ludExpZ2h0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gc3RhdGUucG9pbnRbIHBvaW50TGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRwb2ludExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNIZW1pc3BoZXJlTGlnaHQgKSB7XG5cblx0XHRcdFx0Y29uc3QgdW5pZm9ybXMgPSBzdGF0ZS5oZW1pWyBoZW1pTGVuZ3RoIF07XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbiggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdGhlbWlMZW5ndGggKys7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzZXR1cDogc2V0dXAsXG5cdFx0c2V0dXBWaWV3OiBzZXR1cFZpZXcsXG5cdFx0c3RhdGU6IHN0YXRlXG5cdH07XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZSggZXh0ZW5zaW9ucyApIHtcblxuXHRjb25zdCBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoIGV4dGVuc2lvbnMgKTtcblxuXHRjb25zdCBsaWdodHNBcnJheSA9IFtdO1xuXHRjb25zdCBzaGFkb3dzQXJyYXkgPSBbXTtcblxuXHRmdW5jdGlvbiBpbml0KCBjYW1lcmEgKSB7XG5cblx0XHRzdGF0ZS5jYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRsaWdodHNBcnJheS5sZW5ndGggPSAwO1xuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoTGlnaHQoIGxpZ2h0ICkge1xuXG5cdFx0bGlnaHRzQXJyYXkucHVzaCggbGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7XG5cblx0XHRzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoKSB7XG5cblx0XHRsaWdodHMuc2V0dXAoIGxpZ2h0c0FycmF5ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldHVwTGlnaHRzVmlldyggY2FtZXJhICkge1xuXG5cdFx0bGlnaHRzLnNldHVwVmlldyggbGlnaHRzQXJyYXksIGNhbWVyYSApO1xuXG5cdH1cblxuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRsaWdodHNBcnJheTogbGlnaHRzQXJyYXksXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXG5cblx0XHRjYW1lcmE6IG51bGwsXG5cblx0XHRsaWdodHM6IGxpZ2h0cyxcblxuXHRcdHRyYW5zbWlzc2lvblJlbmRlclRhcmdldDoge31cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0c3RhdGU6IHN0YXRlLFxuXHRcdHNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cyxcblx0XHRzZXR1cExpZ2h0c1ZpZXc6IHNldHVwTGlnaHRzVmlldyxcblxuXHRcdHB1c2hMaWdodDogcHVzaExpZ2h0LFxuXHRcdHB1c2hTaGFkb3c6IHB1c2hTaGFkb3dcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlcyggZXh0ZW5zaW9ucyApIHtcblxuXHRsZXQgcmVuZGVyU3RhdGVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCByZW5kZXJDYWxsRGVwdGggPSAwICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyU3RhdGVBcnJheSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICk7XG5cdFx0bGV0IHJlbmRlclN0YXRlO1xuXG5cdFx0aWYgKCByZW5kZXJTdGF0ZUFycmF5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTtcblx0XHRcdHJlbmRlclN0YXRlcy5zZXQoIHNjZW5lLCBbIHJlbmRlclN0YXRlIF0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggcmVuZGVyQ2FsbERlcHRoID49IHJlbmRlclN0YXRlQXJyYXkubGVuZ3RoICkge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoIGV4dGVuc2lvbnMgKTtcblx0XHRcdFx0cmVuZGVyU3RhdGVBcnJheS5wdXNoKCByZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVBcnJheVsgcmVuZGVyQ2FsbERlcHRoIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiByZW5kZXJTdGF0ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBnZXQsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXHR9O1xuXG59XG5cbmNvbnN0IHZlcnRleCA9IFwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn1cIjtcblxuY29uc3QgZnJhZ21lbnQgPSBcInVuaWZvcm0gc2FtcGxlcjJEIHNoYWRvd19wYXNzO1xcbnVuaWZvcm0gdmVjMiByZXNvbHV0aW9uO1xcbnVuaWZvcm0gZmxvYXQgcmFkaXVzO1xcbiNpbmNsdWRlIDxwYWNraW5nPlxcbnZvaWQgbWFpbigpIHtcXG5cXHRjb25zdCBmbG9hdCBzYW1wbGVzID0gZmxvYXQoIFZTTV9TQU1QTEVTICk7XFxuXFx0ZmxvYXQgbWVhbiA9IDAuMDtcXG5cXHRmbG9hdCBzcXVhcmVkX21lYW4gPSAwLjA7XFxuXFx0ZmxvYXQgdXZTdHJpZGUgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IDIuMCAvICggc2FtcGxlcyAtIDEuMCApO1xcblxcdGZsb2F0IHV2U3RhcnQgPSBzYW1wbGVzIDw9IDEuMCA/IDAuMCA6IC0gMS4wO1xcblxcdGZvciAoIGZsb2F0IGkgPSAwLjA7IGkgPCBzYW1wbGVzOyBpICsrICkge1xcblxcdFxcdGZsb2F0IHV2T2Zmc2V0ID0gdXZTdGFydCArIGkgKiB1dlN0cmlkZTtcXG5cXHRcXHQjaWZkZWYgSE9SSVpPTlRBTF9QQVNTXFxuXFx0XFx0XFx0dmVjMiBkaXN0cmlidXRpb24gPSB1bnBhY2tSR0JBVG8ySGFsZiggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCB1dk9mZnNldCwgMC4wICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcblxcdFxcdFxcdG1lYW4gKz0gZGlzdHJpYnV0aW9uLng7XFxuXFx0XFx0XFx0c3F1YXJlZF9tZWFuICs9IGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKyBkaXN0cmlidXRpb24ueCAqIGRpc3RyaWJ1dGlvbi54O1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0ZmxvYXQgZGVwdGggPSB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCAwLjAsIHV2T2Zmc2V0ICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcblxcdFxcdFxcdG1lYW4gKz0gZGVwdGg7XFxuXFx0XFx0XFx0c3F1YXJlZF9tZWFuICs9IGRlcHRoICogZGVwdGg7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdG1lYW4gPSBtZWFuIC8gc2FtcGxlcztcXG5cXHRzcXVhcmVkX21lYW4gPSBzcXVhcmVkX21lYW4gLyBzYW1wbGVzO1xcblxcdGZsb2F0IHN0ZF9kZXYgPSBzcXJ0KCBzcXVhcmVkX21lYW4gLSBtZWFuICogbWVhbiApO1xcblxcdGdsX0ZyYWdDb2xvciA9IHBhY2sySGFsZlRvUkdCQSggdmVjMiggbWVhbiwgc3RkX2RldiApICk7XFxufVwiO1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRvd01hcCggcmVuZGVyZXIsIG9iamVjdHMsIGNhcGFiaWxpdGllcyApIHtcblxuXHRsZXQgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpO1xuXG5cdGNvbnN0IF9zaGFkb3dNYXBTaXplID0gbmV3IFZlY3RvcjIoKSxcblx0XHRfdmlld3BvcnRTaXplID0gbmV3IFZlY3RvcjIoKSxcblxuXHRcdF92aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCksXG5cblx0XHRfZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCggeyBkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcgfSApLFxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCksXG5cblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9LFxuXG5cdFx0X21heFRleHR1cmVTaXplID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXG5cdGNvbnN0IHNoYWRvd1NpZGUgPSB7IFsgRnJvbnRTaWRlIF06IEJhY2tTaWRlLCBbIEJhY2tTaWRlIF06IEZyb250U2lkZSwgWyBEb3VibGVTaWRlIF06IERvdWJsZVNpZGUgfTtcblxuXHRjb25zdCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0ZGVmaW5lczoge1xuXHRcdFx0VlNNX1NBTVBMRVM6IDhcblx0XHR9LFxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRzaGFkb3dfcGFzczogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxuXHRcdFx0cmFkaXVzOiB7IHZhbHVlOiA0LjAgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IHZlcnRleCxcblx0XHRmcmFnbWVudFNoYWRlcjogZnJhZ21lbnRcblxuXHR9ICk7XG5cblx0Y29uc3Qgc2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsID0gc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5jbG9uZSgpO1xuXHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5IT1JJWk9OVEFMX1BBU1MgPSAxO1xuXG5cdGNvbnN0IGZ1bGxTY3JlZW5UcmkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0ZnVsbFNjcmVlblRyaS5zZXRBdHRyaWJ1dGUoXG5cdFx0J3Bvc2l0aW9uJyxcblx0XHRuZXcgQnVmZmVyQXR0cmlidXRlKFxuXHRcdFx0bmV3IEZsb2F0MzJBcnJheSggWyAtMSwgLTEsIDAuNSwgMywgLTEsIDAuNSwgLTEsIDMsIDAuNSBdICksXG5cdFx0XHQzXG5cdFx0KVxuXHQpO1xuXG5cdGNvbnN0IGZ1bGxTY3JlZW5NZXNoID0gbmV3IE1lc2goIGZ1bGxTY3JlZW5UcmksIHNoYWRvd01hdGVyaWFsVmVydGljYWwgKTtcblxuXHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcblx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMudHlwZSA9IFBDRlNoYWRvd01hcDtcblx0bGV0IF9wcmV2aW91c1R5cGUgPSB0aGlzLnR5cGU7XG5cblx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIGxpZ2h0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0aWYgKCBzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRpZiAoIGxpZ2h0cy5sZW5ndGggPT09IDAgKSByZXR1cm47XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0Y29uc3QgYWN0aXZlQ3ViZUZhY2UgPSByZW5kZXJlci5nZXRBY3RpdmVDdWJlRmFjZSgpO1xuXHRcdGNvbnN0IGFjdGl2ZU1pcG1hcExldmVsID0gcmVuZGVyZXIuZ2V0QWN0aXZlTWlwbWFwTGV2ZWwoKTtcblxuXHRcdGNvbnN0IF9zdGF0ZSA9IHJlbmRlcmVyLnN0YXRlO1xuXG5cdFx0Ly8gU2V0IEdMIHN0YXRlIGZvciBkZXB0aCBtYXAuXG5cdFx0X3N0YXRlLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDEsIDEsIDEsIDEgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0X3N0YXRlLnNldFNjaXNzb3JUZXN0KCBmYWxzZSApO1xuXG5cdFx0Ly8gY2hlY2sgZm9yIHNoYWRvdyBtYXAgdHlwZSBjaGFuZ2VzXG5cblx0XHRjb25zdCB0b1ZTTSA9ICggX3ByZXZpb3VzVHlwZSAhPT0gVlNNU2hhZG93TWFwICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICk7XG5cdFx0Y29uc3QgZnJvbVZTTSA9ICggX3ByZXZpb3VzVHlwZSA9PT0gVlNNU2hhZG93TWFwICYmIHRoaXMudHlwZSAhPT0gVlNNU2hhZG93TWFwICk7XG5cblx0XHQvLyByZW5kZXIgZGVwdGggbWFwXG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRjb25zdCBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXHRcdFx0Y29uc3Qgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRpZiAoIHNoYWRvdyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOicsIGxpZ2h0LCAnaGFzIG5vIHNoYWRvdy4nICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93LmF1dG9VcGRhdGUgPT09IGZhbHNlICYmIHNoYWRvdy5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0X3NoYWRvd01hcFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblxuXHRcdFx0Y29uc3Qgc2hhZG93RnJhbWVFeHRlbnRzID0gc2hhZG93LmdldEZyYW1lRXh0ZW50cygpO1xuXG5cdFx0XHRfc2hhZG93TWFwU2l6ZS5tdWx0aXBseSggc2hhZG93RnJhbWVFeHRlbnRzICk7XG5cblx0XHRcdF92aWV3cG9ydFNpemUuY29weSggc2hhZG93Lm1hcFNpemUgKTtcblxuXHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplIHx8IF9zaGFkb3dNYXBTaXplLnkgPiBfbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS54ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ID0gTWF0aC5mbG9vciggX21heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnggKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54ICogc2hhZG93RnJhbWVFeHRlbnRzLng7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueCA9IF92aWV3cG9ydFNpemUueDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS55ID4gX21heFRleHR1cmVTaXplICkge1xuXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ID0gTWF0aC5mbG9vciggX21heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnkgKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55ICogc2hhZG93RnJhbWVFeHRlbnRzLnk7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueSA9IF92aWV3cG9ydFNpemUueTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzaGFkb3cubWFwID09PSBudWxsIHx8IHRvVlNNID09PSB0cnVlIHx8IGZyb21WU00gPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc3QgcGFycyA9ICggdGhpcy50eXBlICE9PSBWU01TaGFkb3dNYXAgKSA/IHsgbWluRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBtYWdGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIgfSA6IHt9O1xuXG5cdFx0XHRcdGlmICggc2hhZG93Lm1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHNoYWRvdy5tYXAuZGlzcG9zZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzaGFkb3cubWFwID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBfc2hhZG93TWFwU2l6ZS54LCBfc2hhZG93TWFwU2l6ZS55LCBwYXJzICk7XG5cdFx0XHRcdHNoYWRvdy5tYXAudGV4dHVyZS5uYW1lID0gbGlnaHQubmFtZSArICcuc2hhZG93TWFwJztcblxuXHRcdFx0XHRzaGFkb3cuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXAgKTtcblx0XHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRcdGNvbnN0IHZpZXdwb3J0Q291bnQgPSBzaGFkb3cuZ2V0Vmlld3BvcnRDb3VudCgpO1xuXG5cdFx0XHRmb3IgKCBsZXQgdnAgPSAwOyB2cCA8IHZpZXdwb3J0Q291bnQ7IHZwICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gc2hhZG93LmdldFZpZXdwb3J0KCB2cCApO1xuXG5cdFx0XHRcdF92aWV3cG9ydC5zZXQoXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueCxcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC55LFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCAqIHZpZXdwb3J0LnosXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQud1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdF9zdGF0ZS52aWV3cG9ydCggX3ZpZXdwb3J0ICk7XG5cblx0XHRcdFx0c2hhZG93LnVwZGF0ZU1hdHJpY2VzKCBsaWdodCwgdnAgKTtcblxuXHRcdFx0XHRfZnJ1c3R1bSA9IHNoYWRvdy5nZXRGcnVzdHVtKCk7XG5cblx0XHRcdFx0cmVuZGVyT2JqZWN0KCBzY2VuZSwgY2FtZXJhLCBzaGFkb3cuY2FtZXJhLCBsaWdodCwgdGhpcy50eXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZG8gYmx1ciBwYXNzIGZvciBWU01cblxuXHRcdFx0aWYgKCBzaGFkb3cuaXNQb2ludExpZ2h0U2hhZG93ICE9PSB0cnVlICYmIHRoaXMudHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRcdFZTTVBhc3MoIHNoYWRvdywgY2FtZXJhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c2hhZG93Lm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRfcHJldmlvdXNUeXBlID0gdGhpcy50eXBlO1xuXG5cdFx0c2NvcGUubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApIHtcblxuXHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIGZ1bGxTY3JlZW5NZXNoICk7XG5cblx0XHRpZiAoIHNoYWRvd01hdGVyaWFsVmVydGljYWwuZGVmaW5lcy5WU01fU0FNUExFUyAhPT0gc2hhZG93LmJsdXJTYW1wbGVzICkge1xuXG5cdFx0XHRzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmRlZmluZXMuVlNNX1NBTVBMRVMgPSBzaGFkb3cuYmx1clNhbXBsZXM7XG5cdFx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwuZGVmaW5lcy5WU01fU0FNUExFUyA9IHNoYWRvdy5ibHVyU2FtcGxlcztcblxuXHRcdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzaGFkb3cubWFwUGFzcyA9PT0gbnVsbCApIHtcblxuXHRcdFx0c2hhZG93Lm1hcFBhc3MgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHZlcnRpY2FsIHBhc3NcblxuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwLnRleHR1cmU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcFBhc3MgKTtcblx0XHRyZW5kZXJlci5jbGVhcigpO1xuXHRcdHJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTtcblxuXHRcdC8vIGhvcml6b250YWwgcGFzc1xuXG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsLnVuaWZvcm1zLnNoYWRvd19wYXNzLnZhbHVlID0gc2hhZG93Lm1hcFBhc3MudGV4dHVyZTtcblx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b250YWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdHNoYWRvd01hdGVyaWFsSG9yaXpvbnRhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApO1xuXHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0cmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBzaGFkb3dNYXRlcmlhbEhvcml6b250YWwsIGZ1bGxTY3JlZW5NZXNoLCBudWxsICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCB0eXBlICkge1xuXG5cdFx0bGV0IHJlc3VsdCA9IG51bGw7XG5cblx0XHRjb25zdCBjdXN0b21NYXRlcmlhbCA9ICggbGlnaHQuaXNQb2ludExpZ2h0ID09PSB0cnVlICkgPyBvYmplY3QuY3VzdG9tRGlzdGFuY2VNYXRlcmlhbCA6IG9iamVjdC5jdXN0b21EZXB0aE1hdGVyaWFsO1xuXG5cdFx0aWYgKCBjdXN0b21NYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc3VsdCA9ICggbGlnaHQuaXNQb2ludExpZ2h0ID09PSB0cnVlICkgPyBfZGlzdGFuY2VNYXRlcmlhbCA6IF9kZXB0aE1hdGVyaWFsO1xuXG5cdFx0XHRpZiAoICggcmVuZGVyZXIubG9jYWxDbGlwcGluZ0VuYWJsZWQgJiYgbWF0ZXJpYWwuY2xpcFNoYWRvd3MgPT09IHRydWUgJiYgQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMgKSAmJiBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGggIT09IDAgKSB8fFxuXHRcdFx0XHQoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCAmJiBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSAhPT0gMCApIHx8XG5cdFx0XHRcdCggbWF0ZXJpYWwuYWxwaGFNYXAgJiYgbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHx8XG5cdFx0XHRcdCggbWF0ZXJpYWwubWFwICYmIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSApIHtcblxuXHRcdFx0XHQvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZVxuXHRcdFx0XHQvLyBhcHByb3ByaWF0ZSBzdGF0ZVxuXG5cdFx0XHRcdGNvbnN0IGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdFx0bGV0IG1hdGVyaWFsc0ZvclZhcmlhbnQgPSBfbWF0ZXJpYWxDYWNoZVsga2V5QSBdO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudCA9IHt9O1xuXHRcdFx0XHRcdF9tYXRlcmlhbENhY2hlWyBrZXlBIF0gPSBtYXRlcmlhbHNGb3JWYXJpYW50O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF07XG5cblx0XHRcdFx0aWYgKCBjYWNoZWRNYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTtcblx0XHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF0gPSBjYWNoZWRNYXRlcmlhbDtcblx0XHRcdFx0XHRtYXRlcmlhbC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXN1bHQudmlzaWJsZSA9IG1hdGVyaWFsLnZpc2libGU7XG5cdFx0cmVzdWx0LndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZTtcblxuXHRcdGlmICggdHlwZSA9PT0gVlNNU2hhZG93TWFwICkge1xuXG5cdFx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IG1hdGVyaWFsLnNpZGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXN1bHQuc2lkZSA9ICggbWF0ZXJpYWwuc2hhZG93U2lkZSAhPT0gbnVsbCApID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IHNoYWRvd1NpZGVbIG1hdGVyaWFsLnNpZGUgXTtcblxuXHRcdH1cblxuXHRcdHJlc3VsdC5hbHBoYU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXHRcdHJlc3VsdC5hbHBoYVRlc3QgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cdFx0cmVzdWx0Lm1hcCA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdHJlc3VsdC5jbGlwU2hhZG93cyA9IG1hdGVyaWFsLmNsaXBTaGFkb3dzO1xuXHRcdHJlc3VsdC5jbGlwcGluZ1BsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzO1xuXHRcdHJlc3VsdC5jbGlwSW50ZXJzZWN0aW9uID0gbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbjtcblxuXHRcdHJlc3VsdC5kaXNwbGFjZW1lbnRNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudFNjYWxlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0cmVzdWx0LmRpc3BsYWNlbWVudEJpYXMgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0cmVzdWx0LndpcmVmcmFtZUxpbmV3aWR0aCA9IG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRyZXN1bHQubGluZXdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0aWYgKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgJiYgcmVzdWx0LmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHJlbmRlcmVyLnByb3BlcnRpZXMuZ2V0KCByZXN1bHQgKTtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5saWdodCA9IGxpZ2h0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBsaWdodCwgdHlwZSApIHtcblxuXHRcdGlmICggb2JqZWN0LnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgdmlzaWJsZSA9IG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApO1xuXG5cdFx0aWYgKCB2aXNpYmxlICYmICggb2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cyApICkge1xuXG5cdFx0XHRpZiAoICggb2JqZWN0LmNhc3RTaGFkb3cgfHwgKCBvYmplY3QucmVjZWl2ZVNoYWRvdyAmJiB0eXBlID09PSBWU01TaGFkb3dNYXAgKSApICYmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApICkge1xuXG5cdFx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggc2hhZG93Q2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0Y29uc3QgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdGZvciAoIGxldCBrID0gMCwga2wgPSBncm91cHMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdyb3VwID0gZ3JvdXBzWyBrIF07XG5cdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBncm91cE1hdGVyaWFsICYmIGdyb3VwTWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBncm91cE1hdGVyaWFsLCBsaWdodCwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdC5vbkJlZm9yZVNoYWRvdyggcmVuZGVyZXIsIG9iamVjdCwgY2FtZXJhLCBzaGFkb3dDYW1lcmEsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdHJlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggc2hhZG93Q2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdFx0XHRcdG9iamVjdC5vbkFmdGVyU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCB0eXBlICk7XG5cblx0XHRcdFx0XHRvYmplY3Qub25CZWZvcmVTaGFkb3coIHJlbmRlcmVyLCBvYmplY3QsIGNhbWVyYSwgc2hhZG93Q2FtZXJhLCBnZW9tZXRyeSwgZGVwdGhNYXRlcmlhbCwgbnVsbCApO1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwgKTtcblxuXHRcdFx0XHRcdG9iamVjdC5vbkFmdGVyU2hhZG93KCByZW5kZXJlciwgb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG51bGwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25NYXRlcmlhbERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgbWF0ZXJpYWwgPSBldmVudC50YXJnZXQ7XG5cblx0XHRtYXRlcmlhbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHQvLyBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSB1bmlxdWUgZGlzdGFuY2UvZGVwdGggbWF0ZXJpYWxzIHVzZWQgZm9yIHNoYWRvdyBtYXAgcmVuZGVyaW5nXG5cblx0XHRmb3IgKCBjb25zdCBpZCBpbiBfbWF0ZXJpYWxDYWNoZSApIHtcblxuXHRcdFx0Y29uc3QgY2FjaGUgPSBfbWF0ZXJpYWxDYWNoZVsgaWQgXTtcblxuXHRcdFx0Y29uc3QgdXVpZCA9IGV2ZW50LnRhcmdldC51dWlkO1xuXG5cdFx0XHRpZiAoIHV1aWQgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2hhZG93TWF0ZXJpYWwgPSBjYWNoZVsgdXVpZCBdO1xuXHRcdFx0XHRzaGFkb3dNYXRlcmlhbC5kaXNwb3NlKCk7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgdXVpZCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbmNvbnN0IHJldmVyc2VkRnVuY3MgPSB7XG5cdFsgTmV2ZXJEZXB0aCBdOiBBbHdheXNEZXB0aCxcblx0WyBMZXNzRGVwdGggXTogR3JlYXRlckRlcHRoLFxuXHRbIEVxdWFsRGVwdGggXTogTm90RXF1YWxEZXB0aCxcblx0WyBMZXNzRXF1YWxEZXB0aCBdOiBHcmVhdGVyRXF1YWxEZXB0aCxcblxuXHRbIEFsd2F5c0RlcHRoIF06IE5ldmVyRGVwdGgsXG5cdFsgR3JlYXRlckRlcHRoIF06IExlc3NEZXB0aCxcblx0WyBOb3RFcXVhbERlcHRoIF06IEVxdWFsRGVwdGgsXG5cdFsgR3JlYXRlckVxdWFsRGVwdGggXTogTGVzc0VxdWFsRGVwdGgsXG59O1xuXG5mdW5jdGlvbiBXZWJHTFN0YXRlKCBnbCwgZXh0ZW5zaW9ucyApIHtcblxuXHRmdW5jdGlvbiBDb2xvckJ1ZmZlcigpIHtcblxuXHRcdGxldCBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGNvbG9yID0gbmV3IFZlY3RvcjQoKTtcblx0XHRsZXQgY3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0Y29uc3QgY3VycmVudENvbG9yQ2xlYXIgPSBuZXcgVmVjdG9yNCggMCwgMCwgMCwgMCApO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBjb2xvck1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5jb2xvck1hc2soIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2ssIGNvbG9yTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xvck1hc2sgPSBjb2xvck1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCByLCBnLCBiLCBhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRyICo9IGE7IGcgKj0gYTsgYiAqPSBhO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb2xvci5zZXQoIHIsIGcsIGIsIGEgKTtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRDb2xvckNsZWFyLmVxdWFscyggY29sb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhckNvbG9yKCByLCBnLCBiLCBhICk7XG5cdFx0XHRcdFx0Y3VycmVudENvbG9yQ2xlYXIuY29weSggY29sb3IgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRDb2xvckNsZWFyLnNldCggLTEsIDAsIDAsIDAgKTsgLy8gc2V0IHRvIGludmFsaWQgc3RhdGVcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gRGVwdGhCdWZmZXIoKSB7XG5cblx0XHRsZXQgbG9ja2VkID0gZmFsc2U7XG5cblx0XHRsZXQgY3VycmVudFJldmVyc2VkID0gZmFsc2U7XG5cdFx0bGV0IGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHRsZXQgY3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2V0UmV2ZXJzZWQ6IGZ1bmN0aW9uICggcmV2ZXJzZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50UmV2ZXJzZWQgIT09IHJldmVyc2VkICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZXh0ID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfY2xpcF9jb250cm9sJyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXZlcnNlZCApIHtcblxuXHRcdFx0XHRcdFx0ZXh0LmNsaXBDb250cm9sRVhUKCBleHQuTE9XRVJfTEVGVF9FWFQsIGV4dC5aRVJPX1RPX09ORV9FWFQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGV4dC5jbGlwQ29udHJvbEVYVCggZXh0LkxPV0VSX0xFRlRfRVhULCBleHQuTkVHQVRJVkVfT05FX1RPX09ORV9FWFQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN1cnJlbnRSZXZlcnNlZCA9IHJldmVyc2VkO1xuXG5cdFx0XHRcdFx0Y29uc3Qgb2xkRGVwdGggPSBjdXJyZW50RGVwdGhDbGVhcjtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IG51bGw7XG5cdFx0XHRcdFx0dGhpcy5zZXRDbGVhciggb2xkRGVwdGggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdGdldFJldmVyc2VkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRSZXZlcnNlZDtcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0VGVzdDogZnVuY3Rpb24gKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCBkZXB0aFRlc3QgKSB7XG5cblx0XHRcdFx0XHRlbmFibGUoIGdsLkRFUFRIX1RFU1QgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0ZGlzYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TWFzazogZnVuY3Rpb24gKCBkZXB0aE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhNYXNrICE9PSBkZXB0aE1hc2sgJiYgISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRnbC5kZXB0aE1hc2soIGRlcHRoTWFzayApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBkZXB0aE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRSZXZlcnNlZCApIGRlcHRoRnVuYyA9IHJldmVyc2VkRnVuY3NbIGRlcHRoRnVuYyBdO1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoRnVuYyAhPT0gZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5ldmVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5ORVZFUiApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBbHdheXNEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkFMV0FZUyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBMZXNzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5MRVNTICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIExlc3NFcXVhbERlcHRoOlxuXG5cdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggZ2wuTEVRVUFMICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5FUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkdFUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5HUkVBVEVSICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vdEVxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKCBnbC5OT1RFUVVBTCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFUVVBTCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IGRlcHRoRnVuYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKCBsb2NrICkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldENsZWFyOiBmdW5jdGlvbiAoIGRlcHRoICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoQ2xlYXIgIT09IGRlcHRoICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjdXJyZW50UmV2ZXJzZWQgKSB7XG5cblx0XHRcdFx0XHRcdGRlcHRoID0gMSAtIGRlcHRoO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Z2wuY2xlYXJEZXB0aCggZGVwdGggKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFJldmVyc2VkID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fVxuXG5cdGZ1bmN0aW9uIFN0ZW5jaWxCdWZmZXIoKSB7XG5cblx0XHRsZXQgbG9ja2VkID0gZmFsc2U7XG5cblx0XHRsZXQgY3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDtcblx0XHRsZXQgY3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XG5cdFx0bGV0IGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldFRlc3Q6IGZ1bmN0aW9uICggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGxvY2tlZCApIHtcblxuXHRcdFx0XHRcdGlmICggc3RlbmNpbFRlc3QgKSB7XG5cblx0XHRcdFx0XHRcdGVuYWJsZSggZ2wuU1RFTkNJTF9URVNUICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRkaXNhYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbE1hc2sgIT09IHN0ZW5jaWxNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gc3RlbmNpbE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsRnVuYyAhPT0gc3RlbmNpbEZ1bmMgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFJlZiAhPT0gc3RlbmNpbFJlZiB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgIT09IHN0ZW5jaWxNYXNrICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbEZ1bmMoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApO1xuXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jID0gc3RlbmNpbEZ1bmM7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBzdGVuY2lsUmVmO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBzdGVuY2lsTWFzaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE9wOiBmdW5jdGlvbiAoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsRmFpbCAhPT0gc3RlbmNpbEZhaWwgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFpGYWlsICE9PSBzdGVuY2lsWkZhaWwgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFpQYXNzICE9PSBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdFx0XHRnbC5zdGVuY2lsT3AoIHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyApO1xuXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gc3RlbmNpbEZhaWw7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IHN0ZW5jaWxaRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpQYXNzID0gc3RlbmNpbFpQYXNzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggc3RlbmNpbCApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsQ2xlYXIgIT09IHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhclN0ZW5jaWwoIHN0ZW5jaWwgKTtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gc3RlbmNpbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XG5cblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly9cblxuXHRjb25zdCBjb2xvckJ1ZmZlciA9IG5ldyBDb2xvckJ1ZmZlcigpO1xuXHRjb25zdCBkZXB0aEJ1ZmZlciA9IG5ldyBEZXB0aEJ1ZmZlcigpO1xuXHRjb25zdCBzdGVuY2lsQnVmZmVyID0gbmV3IFN0ZW5jaWxCdWZmZXIoKTtcblxuXHRjb25zdCB1Ym9CaW5kaW5ncyA9IG5ldyBXZWFrTWFwKCk7XG5cdGNvbnN0IHVib1Byb2dyYW1NYXAgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGxldCBlbmFibGVkQ2FwYWJpbGl0aWVzID0ge307XG5cblx0bGV0IGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyA9IHt9O1xuXHRsZXQgY3VycmVudERyYXdidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblx0bGV0IGRlZmF1bHREcmF3YnVmZmVycyA9IFtdO1xuXG5cdGxldCBjdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cblx0bGV0IGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBmYWxzZTtcblx0bGV0IGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdGxldCBjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0bGV0IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHRsZXQgY3VycmVudEJsZW5kQ29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKTtcblx0bGV0IGN1cnJlbnRCbGVuZEFscGhhID0gMDtcblx0bGV0IGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlO1xuXG5cdGxldCBjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0bGV0IGN1cnJlbnRDdWxsRmFjZSA9IG51bGw7XG5cblx0bGV0IGN1cnJlbnRMaW5lV2lkdGggPSBudWxsO1xuXG5cdGxldCBjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7XG5cdGxldCBjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gbnVsbDtcblxuXHRjb25zdCBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMgKTtcblxuXHRsZXQgbGluZVdpZHRoQXZhaWxhYmxlID0gZmFsc2U7XG5cdGxldCB2ZXJzaW9uID0gMDtcblx0Y29uc3QgZ2xWZXJzaW9uID0gZ2wuZ2V0UGFyYW1ldGVyKCBnbC5WRVJTSU9OICk7XG5cblx0aWYgKCBnbFZlcnNpb24uaW5kZXhPZiggJ1dlYkdMJyApICE9PSAtMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXldlYkdMIChcXGQpLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDEuMCApO1xuXG5cdH0gZWxzZSBpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnT3BlbkdMIEVTJyApICE9PSAtMSApIHtcblxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KCAvXk9wZW5HTCBFUyAoXFxkKS8uZXhlYyggZ2xWZXJzaW9uIClbIDEgXSApO1xuXHRcdGxpbmVXaWR0aEF2YWlsYWJsZSA9ICggdmVyc2lvbiA+PSAyLjAgKTtcblxuXHR9XG5cblx0bGV0IGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdGxldCBjdXJyZW50Qm91bmRUZXh0dXJlcyA9IHt9O1xuXG5cdGNvbnN0IHNjaXNzb3JQYXJhbSA9IGdsLmdldFBhcmFtZXRlciggZ2wuU0NJU1NPUl9CT1ggKTtcblx0Y29uc3Qgdmlld3BvcnRQYXJhbSA9IGdsLmdldFBhcmFtZXRlciggZ2wuVklFV1BPUlQgKTtcblxuXHRjb25zdCBjdXJyZW50U2Npc3NvciA9IG5ldyBWZWN0b3I0KCkuZnJvbUFycmF5KCBzY2lzc29yUGFyYW0gKTtcblx0Y29uc3QgY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHZpZXdwb3J0UGFyYW0gKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKCB0eXBlLCB0YXJnZXQsIGNvdW50LCBkaW1lbnNpb25zICkge1xuXG5cdFx0Y29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KCA0ICk7IC8vIDQgaXMgcmVxdWlyZWQgdG8gbWF0Y2ggZGVmYXVsdCB1bnBhY2sgYWxpZ25tZW50IG9mIDQuXG5cdFx0Y29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdGdsLmJpbmRUZXh0dXJlKCB0eXBlLCB0ZXh0dXJlICk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaSggdHlwZSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUICk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaSggdHlwZSwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCB0eXBlID09PSBnbC5URVhUVVJFXzNEIHx8IHR5cGUgPT09IGdsLlRFWFRVUkVfMkRfQVJSQVkgKSB7XG5cblx0XHRcdFx0Z2wudGV4SW1hZ2UzRCggdGFyZ2V0LCAwLCBnbC5SR0JBLCAxLCAxLCBkaW1lbnNpb25zLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2wudGV4SW1hZ2UyRCggdGFyZ2V0ICsgaSwgMCwgZ2wuUkdCQSwgMSwgMSwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgZGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cblx0Y29uc3QgZW1wdHlUZXh0dXJlcyA9IHt9O1xuXHRlbXB0eVRleHR1cmVzWyBnbC5URVhUVVJFXzJEIF0gPSBjcmVhdGVUZXh0dXJlKCBnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFXzJELCAxICk7XG5cdGVtcHR5VGV4dHVyZXNbIGdsLlRFWFRVUkVfQ1VCRV9NQVAgXSA9IGNyZWF0ZVRleHR1cmUoIGdsLlRFWFRVUkVfQ1VCRV9NQVAsIGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCwgNiApO1xuXHRlbXB0eVRleHR1cmVzWyBnbC5URVhUVVJFXzJEX0FSUkFZIF0gPSBjcmVhdGVUZXh0dXJlKCBnbC5URVhUVVJFXzJEX0FSUkFZLCBnbC5URVhUVVJFXzJEX0FSUkFZLCAxLCAxICk7XG5cdGVtcHR5VGV4dHVyZXNbIGdsLlRFWFRVUkVfM0QgXSA9IGNyZWF0ZVRleHR1cmUoIGdsLlRFWFRVUkVfM0QsIGdsLlRFWFRVUkVfM0QsIDEsIDEgKTtcblxuXHQvLyBpbml0XG5cblx0Y29sb3JCdWZmZXIuc2V0Q2xlYXIoIDAsIDAsIDAsIDEgKTtcblx0ZGVwdGhCdWZmZXIuc2V0Q2xlYXIoIDEgKTtcblx0c3RlbmNpbEJ1ZmZlci5zZXRDbGVhciggMCApO1xuXG5cdGVuYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXHRkZXB0aEJ1ZmZlci5zZXRGdW5jKCBMZXNzRXF1YWxEZXB0aCApO1xuXG5cdHNldEZsaXBTaWRlZCggZmFsc2UgKTtcblx0c2V0Q3VsbEZhY2UoIEN1bGxGYWNlQmFjayApO1xuXHRlbmFibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBlbmFibGUoIGlkICkge1xuXG5cdFx0aWYgKCBlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdICE9PSB0cnVlICkge1xuXG5cdFx0XHRnbC5lbmFibGUoIGlkICk7XG5cdFx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzYWJsZSggaWQgKSB7XG5cblx0XHRpZiAoIGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gIT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5kaXNhYmxlKCBpZCApO1xuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBiaW5kRnJhbWVidWZmZXIoIHRhcmdldCwgZnJhbWVidWZmZXIgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgdGFyZ2V0IF0gIT09IGZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoIHRhcmdldCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyB0YXJnZXQgXSA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0XHQvLyBnbC5EUkFXX0ZSQU1FQlVGRkVSIGlzIGVxdWl2YWxlbnQgdG8gZ2wuRlJBTUVCVUZGRVJcblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IGdsLkRSQVdfRlJBTUVCVUZGRVIgKSB7XG5cblx0XHRcdFx0Y3VycmVudEJvdW5kRnJhbWVidWZmZXJzWyBnbC5GUkFNRUJVRkZFUiBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0YXJnZXQgPT09IGdsLkZSQU1FQlVGRkVSICkge1xuXG5cdFx0XHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVyc1sgZ2wuRFJBV19GUkFNRUJVRkZFUiBdID0gZnJhbWVidWZmZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRyYXdCdWZmZXJzKCByZW5kZXJUYXJnZXQsIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0bGV0IGRyYXdCdWZmZXJzID0gZGVmYXVsdERyYXdidWZmZXJzO1xuXG5cdFx0bGV0IG5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0ZHJhd0J1ZmZlcnMgPSBjdXJyZW50RHJhd2J1ZmZlcnMuZ2V0KCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRpZiAoIGRyYXdCdWZmZXJzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZHJhd0J1ZmZlcnMgPSBbXTtcblx0XHRcdFx0Y3VycmVudERyYXdidWZmZXJzLnNldCggZnJhbWVidWZmZXIsIGRyYXdCdWZmZXJzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRcdGlmICggZHJhd0J1ZmZlcnMubGVuZ3RoICE9PSB0ZXh0dXJlcy5sZW5ndGggfHwgZHJhd0J1ZmZlcnNbIDAgXSAhPT0gZ2wuQ09MT1JfQVRUQUNITUVOVDAgKSB7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0ZHJhd0J1ZmZlcnNbIGkgXSA9IGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHJhd0J1ZmZlcnMubGVuZ3RoID0gdGV4dHVyZXMubGVuZ3RoO1xuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkcmF3QnVmZmVyc1sgMCBdICE9PSBnbC5CQUNLICkge1xuXG5cdFx0XHRcdGRyYXdCdWZmZXJzWyAwIF0gPSBnbC5CQUNLO1xuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBuZWVkc1VwZGF0ZSApIHtcblxuXHRcdFx0Z2wuZHJhd0J1ZmZlcnMoIGRyYXdCdWZmZXJzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVzZVByb2dyYW0oIHByb2dyYW0gKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRQcm9ncmFtICE9PSBwcm9ncmFtICkge1xuXG5cdFx0XHRnbC51c2VQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0XHRcdGN1cnJlbnRQcm9ncmFtID0gcHJvZ3JhbTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGNvbnN0IGVxdWF0aW9uVG9HTCA9IHtcblx0XHRbIEFkZEVxdWF0aW9uIF06IGdsLkZVTkNfQURELFxuXHRcdFsgU3VidHJhY3RFcXVhdGlvbiBdOiBnbC5GVU5DX1NVQlRSQUNULFxuXHRcdFsgUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gXTogZ2wuRlVOQ19SRVZFUlNFX1NVQlRSQUNUXG5cdH07XG5cblx0ZXF1YXRpb25Ub0dMWyBNaW5FcXVhdGlvbiBdID0gZ2wuTUlOO1xuXHRlcXVhdGlvblRvR0xbIE1heEVxdWF0aW9uIF0gPSBnbC5NQVg7XG5cblx0Y29uc3QgZmFjdG9yVG9HTCA9IHtcblx0XHRbIFplcm9GYWN0b3IgXTogZ2wuWkVSTyxcblx0XHRbIE9uZUZhY3RvciBdOiBnbC5PTkUsXG5cdFx0WyBTcmNDb2xvckZhY3RvciBdOiBnbC5TUkNfQ09MT1IsXG5cdFx0WyBTcmNBbHBoYUZhY3RvciBdOiBnbC5TUkNfQUxQSEEsXG5cdFx0WyBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIF06IGdsLlNSQ19BTFBIQV9TQVRVUkFURSxcblx0XHRbIERzdENvbG9yRmFjdG9yIF06IGdsLkRTVF9DT0xPUixcblx0XHRbIERzdEFscGhhRmFjdG9yIF06IGdsLkRTVF9BTFBIQSxcblx0XHRbIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgXTogZ2wuT05FX01JTlVTX1NSQ19DT0xPUixcblx0XHRbIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgXTogZ2wuT05FX01JTlVTX1NSQ19BTFBIQSxcblx0XHRbIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IgXTogZ2wuT05FX01JTlVTX0RTVF9DT0xPUixcblx0XHRbIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgXTogZ2wuT05FX01JTlVTX0RTVF9BTFBIQSxcblx0XHRbIENvbnN0YW50Q29sb3JGYWN0b3IgXTogZ2wuQ09OU1RBTlRfQ09MT1IsXG5cdFx0WyBPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IgXTogZ2wuT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SLFxuXHRcdFsgQ29uc3RhbnRBbHBoYUZhY3RvciBdOiBnbC5DT05TVEFOVF9BTFBIQSxcblx0XHRbIE9uZU1pbnVzQ29uc3RhbnRBbHBoYUZhY3RvciBdOiBnbC5PTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEFcblx0fTtcblxuXHRmdW5jdGlvbiBzZXRCbGVuZGluZyggYmxlbmRpbmcsIGJsZW5kRXF1YXRpb24sIGJsZW5kU3JjLCBibGVuZERzdCwgYmxlbmRFcXVhdGlvbkFscGhhLCBibGVuZFNyY0FscGhhLCBibGVuZERzdEFscGhhLCBibGVuZENvbG9yLCBibGVuZEFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRpZiAoIGJsZW5kaW5nID09PSBOb0JsZW5kaW5nICkge1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0ZGlzYWJsZSggZ2wuQkxFTkQgKTtcblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggY3VycmVudEJsZW5kaW5nRW5hYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGVuYWJsZSggZ2wuQkxFTkQgKTtcblx0XHRcdGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggYmxlbmRpbmcgIT09IGN1cnJlbnRCbGVuZGluZyB8fCBwcmVtdWx0aXBsaWVkQWxwaGEgIT09IGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICE9PSBBZGRFcXVhdGlvbiApIHtcblxuXHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb24oIGdsLkZVTkNfQUREICk7XG5cblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBBZGRFcXVhdGlvbjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggZ2wuT05FLCBnbC5PTkUgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIGdsLlpFUk8sIGdsLk9ORV9NSU5VU19TUkNfQ09MT1IsIGdsLlpFUk8sIGdsLk9ORSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuWkVSTywgZ2wuU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5TUkNfQUxQSEEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3dpdGNoICggYmxlbmRpbmcgKSB7XG5cblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEsIGdsLk9ORSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIGdsLlNSQ19BTFBIQSwgZ2wuT05FICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBnbC5aRVJPLCBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SLCBnbC5aRVJPLCBnbC5PTkUgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKCBnbC5aRVJPLCBnbC5TUkNfQ09MT1IgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZENvbG9yLnNldCggMCwgMCwgMCApO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRBbHBoYSA9IDA7XG5cblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0XHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBjdXN0b20gYmxlbmRpbmdcblxuXHRcdGJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYSB8fCBibGVuZEVxdWF0aW9uO1xuXHRcdGJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhIHx8IGJsZW5kU3JjO1xuXHRcdGJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhIHx8IGJsZW5kRHN0O1xuXG5cdFx0aWYgKCBibGVuZEVxdWF0aW9uICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbiB8fCBibGVuZEVxdWF0aW9uQWxwaGEgIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgKSB7XG5cblx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSggZXF1YXRpb25Ub0dMWyBibGVuZEVxdWF0aW9uIF0sIGVxdWF0aW9uVG9HTFsgYmxlbmRFcXVhdGlvbkFscGhhIF0gKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uO1xuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSA9IGJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZmFjdG9yVG9HTFsgYmxlbmRTcmMgXSwgZmFjdG9yVG9HTFsgYmxlbmREc3QgXSwgZmFjdG9yVG9HTFsgYmxlbmRTcmNBbHBoYSBdLCBmYWN0b3JUb0dMWyBibGVuZERzdEFscGhhIF0gKTtcblxuXHRcdFx0Y3VycmVudEJsZW5kU3JjID0gYmxlbmRTcmM7XG5cdFx0XHRjdXJyZW50QmxlbmREc3QgPSBibGVuZERzdDtcblx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYTtcblx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcblxuXHRcdH1cblxuXHRcdGlmICggYmxlbmRDb2xvci5lcXVhbHMoIGN1cnJlbnRCbGVuZENvbG9yICkgPT09IGZhbHNlIHx8IGJsZW5kQWxwaGEgIT09IGN1cnJlbnRCbGVuZEFscGhhICkge1xuXG5cdFx0XHRnbC5ibGVuZENvbG9yKCBibGVuZENvbG9yLnIsIGJsZW5kQ29sb3IuZywgYmxlbmRDb2xvci5iLCBibGVuZEFscGhhICk7XG5cblx0XHRcdGN1cnJlbnRCbGVuZENvbG9yLmNvcHkoIGJsZW5kQ29sb3IgKTtcblx0XHRcdGN1cnJlbnRCbGVuZEFscGhhID0gYmxlbmRBbHBoYTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xuXHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IGZhbHNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRNYXRlcmlhbCggbWF0ZXJpYWwsIGZyb250RmFjZUNXICkge1xuXG5cdFx0bWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZVxuXHRcdFx0PyBkaXNhYmxlKCBnbC5DVUxMX0ZBQ0UgKVxuXHRcdFx0OiBlbmFibGUoIGdsLkNVTExfRkFDRSApO1xuXG5cdFx0bGV0IGZsaXBTaWRlZCA9ICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKTtcblx0XHRpZiAoIGZyb250RmFjZUNXICkgZmxpcFNpZGVkID0gISBmbGlwU2lkZWQ7XG5cblx0XHRzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApO1xuXG5cdFx0KCBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IGZhbHNlIClcblx0XHRcdD8gc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKVxuXHRcdFx0OiBzZXRCbGVuZGluZyggbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24sIG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhLCBtYXRlcmlhbC5ibGVuZFNyY0FscGhhLCBtYXRlcmlhbC5ibGVuZERzdEFscGhhLCBtYXRlcmlhbC5ibGVuZENvbG9yLCBtYXRlcmlhbC5ibGVuZEFscGhhLCBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGRlcHRoQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLmRlcHRoRnVuYyApO1xuXHRcdGRlcHRoQnVmZmVyLnNldFRlc3QoIG1hdGVyaWFsLmRlcHRoVGVzdCApO1xuXHRcdGRlcHRoQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmRlcHRoV3JpdGUgKTtcblx0XHRjb2xvckJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5jb2xvcldyaXRlICk7XG5cblx0XHRjb25zdCBzdGVuY2lsV3JpdGUgPSBtYXRlcmlhbC5zdGVuY2lsV3JpdGU7XG5cdFx0c3RlbmNpbEJ1ZmZlci5zZXRUZXN0KCBzdGVuY2lsV3JpdGUgKTtcblx0XHRpZiAoIHN0ZW5jaWxXcml0ZSApIHtcblxuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5zdGVuY2lsV3JpdGVNYXNrICk7XG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLnN0ZW5jaWxGdW5jLCBtYXRlcmlhbC5zdGVuY2lsUmVmLCBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgKTtcblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0T3AoIG1hdGVyaWFsLnN0ZW5jaWxGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWkZhaWwsIG1hdGVyaWFsLnN0ZW5jaWxaUGFzcyApO1xuXG5cdFx0fVxuXG5cdFx0c2V0UG9seWdvbk9mZnNldCggbWF0ZXJpYWwucG9seWdvbk9mZnNldCwgbWF0ZXJpYWwucG9seWdvbk9mZnNldEZhY3RvciwgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzICk7XG5cblx0XHRtYXRlcmlhbC5hbHBoYVRvQ292ZXJhZ2UgPT09IHRydWVcblx0XHRcdD8gZW5hYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKVxuXHRcdFx0OiBkaXNhYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApIHtcblxuXHRcdGlmICggY3VycmVudEZsaXBTaWRlZCAhPT0gZmxpcFNpZGVkICkge1xuXG5cdFx0XHRpZiAoIGZsaXBTaWRlZCApIHtcblxuXHRcdFx0XHRnbC5mcm9udEZhY2UoIGdsLkNXICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Z2wuZnJvbnRGYWNlKCBnbC5DQ1cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50RmxpcFNpZGVkID0gZmxpcFNpZGVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRDdWxsRmFjZSggY3VsbEZhY2UgKSB7XG5cblx0XHRpZiAoIGN1bGxGYWNlICE9PSBDdWxsRmFjZU5vbmUgKSB7XG5cblx0XHRcdGVuYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHRcdGlmICggY3VsbEZhY2UgIT09IGN1cnJlbnRDdWxsRmFjZSApIHtcblxuXHRcdFx0XHRpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2sgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggZ2wuQkFDSyApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUZyb250ICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIGdsLkZST05UICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKCBnbC5GUk9OVF9BTkRfQkFDSyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cblx0XHR9XG5cblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBjdWxsRmFjZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TGluZVdpZHRoKCB3aWR0aCApIHtcblxuXHRcdGlmICggd2lkdGggIT09IGN1cnJlbnRMaW5lV2lkdGggKSB7XG5cblx0XHRcdGlmICggbGluZVdpZHRoQXZhaWxhYmxlICkgZ2wubGluZVdpZHRoKCB3aWR0aCApO1xuXG5cdFx0XHRjdXJyZW50TGluZVdpZHRoID0gd2lkdGg7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQoIHBvbHlnb25PZmZzZXQsIGZhY3RvciwgdW5pdHMgKSB7XG5cblx0XHRpZiAoIHBvbHlnb25PZmZzZXQgKSB7XG5cblx0XHRcdGVuYWJsZSggZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7XG5cblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldCggZmFjdG9yLCB1bml0cyApO1xuXG5cdFx0XHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gZmFjdG9yO1xuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gdW5pdHM7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0U2Npc3NvclRlc3QoIHNjaXNzb3JUZXN0ICkge1xuXG5cdFx0aWYgKCBzY2lzc29yVGVzdCApIHtcblxuXHRcdFx0ZW5hYmxlKCBnbC5TQ0lTU09SX1RFU1QgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIGdsLlNDSVNTT1JfVEVTVCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyB0ZXh0dXJlXG5cblx0ZnVuY3Rpb24gYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IGdsLlRFWFRVUkUwICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHtcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSwgd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0d2ViZ2xTbG90ID0gZ2wuVEVYVFVSRTAgKyBtYXhUZXh0dXJlcyAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0d2ViZ2xTbG90ID0gY3VycmVudFRleHR1cmVTbG90O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRsZXQgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIHdlYmdsU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym91bmRUZXh0dXJlID0geyB0eXBlOiB1bmRlZmluZWQsIHRleHR1cmU6IHVuZGVmaW5lZCB9O1xuXHRcdFx0Y3VycmVudEJvdW5kVGV4dHVyZXNbIHdlYmdsU2xvdCBdID0gYm91bmRUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUudHlwZSAhPT0gd2ViZ2xUeXBlIHx8IGJvdW5kVGV4dHVyZS50ZXh0dXJlICE9PSB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ICE9PSB3ZWJnbFNsb3QgKSB7XG5cblx0XHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IHdlYmdsU2xvdDtcblxuXHRcdFx0fVxuXG5cdFx0XHRnbC5iaW5kVGV4dHVyZSggd2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1sgd2ViZ2xUeXBlIF0gKTtcblxuXHRcdFx0Ym91bmRUZXh0dXJlLnR5cGUgPSB3ZWJnbFR5cGU7XG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdW5iaW5kVGV4dHVyZSgpIHtcblxuXHRcdGNvbnN0IGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgYm91bmRUZXh0dXJlLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoIGJvdW5kVGV4dHVyZS50eXBlLCBudWxsICk7XG5cblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gdW5kZWZpbmVkO1xuXHRcdFx0Ym91bmRUZXh0dXJlLnRleHR1cmUgPSB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleEltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4SW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhJbWFnZTNEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3ViSW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleFN1YkltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhTdWJJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3ViSW1hZ2UzRCggLi4uYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTNEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3RvcmFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3RvcmFnZTJEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4U3RvcmFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4U3RvcmFnZTNEKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQoIC4uLmFyZ3VtZW50cyApO1xuXG5cdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXhJbWFnZTNEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UzRCggLi4uYXJndW1lbnRzICk7XG5cblx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gc2Npc3Nvciggc2Npc3NvciApIHtcblxuXHRcdGlmICggY3VycmVudFNjaXNzb3IuZXF1YWxzKCBzY2lzc29yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC5zY2lzc29yKCBzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncgKTtcblx0XHRcdGN1cnJlbnRTY2lzc29yLmNvcHkoIHNjaXNzb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdmlld3BvcnQoIHZpZXdwb3J0ICkge1xuXG5cdFx0aWYgKCBjdXJyZW50Vmlld3BvcnQuZXF1YWxzKCB2aWV3cG9ydCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wudmlld3BvcnQoIHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LnosIHZpZXdwb3J0LncgKTtcblx0XHRcdGN1cnJlbnRWaWV3cG9ydC5jb3B5KCB2aWV3cG9ydCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVVQk9NYXBwaW5nKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkge1xuXG5cdFx0bGV0IG1hcHBpbmcgPSB1Ym9Qcm9ncmFtTWFwLmdldCggcHJvZ3JhbSApO1xuXG5cdFx0aWYgKCBtYXBwaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hcHBpbmcgPSBuZXcgV2Vha01hcCgpO1xuXG5cdFx0XHR1Ym9Qcm9ncmFtTWFwLnNldCggcHJvZ3JhbSwgbWFwcGluZyApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGJsb2NrSW5kZXggPSBtYXBwaW5nLmdldCggdW5pZm9ybXNHcm91cCApO1xuXG5cdFx0aWYgKCBibG9ja0luZGV4ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJsb2NrSW5kZXggPSBnbC5nZXRVbmlmb3JtQmxvY2tJbmRleCggcHJvZ3JhbSwgdW5pZm9ybXNHcm91cC5uYW1lICk7XG5cblx0XHRcdG1hcHBpbmcuc2V0KCB1bmlmb3Jtc0dyb3VwLCBibG9ja0luZGV4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVuaWZvcm1CbG9ja0JpbmRpbmcoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7XG5cblx0XHRjb25zdCBtYXBwaW5nID0gdWJvUHJvZ3JhbU1hcC5nZXQoIHByb2dyYW0gKTtcblx0XHRjb25zdCBibG9ja0luZGV4ID0gbWFwcGluZy5nZXQoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdGlmICggdWJvQmluZGluZ3MuZ2V0KCBwcm9ncmFtICkgIT09IGJsb2NrSW5kZXggKSB7XG5cblx0XHRcdC8vIGJpbmQgc2hhZGVyIHNwZWNpZmljIGJsb2NrIGluZGV4IHRvIGdsb2JhbCBibG9jayBwb2ludFxuXHRcdFx0Z2wudW5pZm9ybUJsb2NrQmluZGluZyggcHJvZ3JhbSwgYmxvY2tJbmRleCwgdW5pZm9ybXNHcm91cC5fX2JpbmRpbmdQb2ludEluZGV4ICk7XG5cblx0XHRcdHVib0JpbmRpbmdzLnNldCggcHJvZ3JhbSwgYmxvY2tJbmRleCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xuXG5cdFx0Ly8gcmVzZXQgc3RhdGVcblxuXHRcdGdsLmRpc2FibGUoIGdsLkJMRU5EICk7XG5cdFx0Z2wuZGlzYWJsZSggZ2wuQ1VMTF9GQUNFICk7XG5cdFx0Z2wuZGlzYWJsZSggZ2wuREVQVEhfVEVTVCApO1xuXHRcdGdsLmRpc2FibGUoIGdsLlBPTFlHT05fT0ZGU0VUX0ZJTEwgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5TQ0lTU09SX1RFU1QgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5TVEVOQ0lMX1RFU1QgKTtcblx0XHRnbC5kaXNhYmxlKCBnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgKTtcblxuXHRcdGdsLmJsZW5kRXF1YXRpb24oIGdsLkZVTkNfQUREICk7XG5cdFx0Z2wuYmxlbmRGdW5jKCBnbC5PTkUsIGdsLlpFUk8gKTtcblx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggZ2wuT05FLCBnbC5aRVJPLCBnbC5PTkUsIGdsLlpFUk8gKTtcblx0XHRnbC5ibGVuZENvbG9yKCAwLCAwLCAwLCAwICk7XG5cblx0XHRnbC5jb2xvck1hc2soIHRydWUsIHRydWUsIHRydWUsIHRydWUgKTtcblx0XHRnbC5jbGVhckNvbG9yKCAwLCAwLCAwLCAwICk7XG5cblx0XHRnbC5kZXB0aE1hc2soIHRydWUgKTtcblx0XHRnbC5kZXB0aEZ1bmMoIGdsLkxFU1MgKTtcblxuXHRcdGRlcHRoQnVmZmVyLnNldFJldmVyc2VkKCBmYWxzZSApO1xuXG5cdFx0Z2wuY2xlYXJEZXB0aCggMSApO1xuXG5cdFx0Z2wuc3RlbmNpbE1hc2soIDB4ZmZmZmZmZmYgKTtcblx0XHRnbC5zdGVuY2lsRnVuYyggZ2wuQUxXQVlTLCAwLCAweGZmZmZmZmZmICk7XG5cdFx0Z2wuc3RlbmNpbE9wKCBnbC5LRUVQLCBnbC5LRUVQLCBnbC5LRUVQICk7XG5cdFx0Z2wuY2xlYXJTdGVuY2lsKCAwICk7XG5cblx0XHRnbC5jdWxsRmFjZSggZ2wuQkFDSyApO1xuXHRcdGdsLmZyb250RmFjZSggZ2wuQ0NXICk7XG5cblx0XHRnbC5wb2x5Z29uT2Zmc2V0KCAwLCAwICk7XG5cblx0XHRnbC5hY3RpdmVUZXh0dXJlKCBnbC5URVhUVVJFMCApO1xuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKCBnbC5GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggZ2wuRFJBV19GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlciggZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdFx0Z2wudXNlUHJvZ3JhbSggbnVsbCApO1xuXG5cdFx0Z2wubGluZVdpZHRoKCAxICk7XG5cblx0XHRnbC5zY2lzc29yKCAwLCAwLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHQgKTtcblx0XHRnbC52aWV3cG9ydCggMCwgMCwgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0ICk7XG5cblx0XHQvLyByZXNldCBpbnRlcm5hbHNcblxuXHRcdGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyA9IHt9O1xuXHRcdGN1cnJlbnREcmF3YnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cdFx0ZGVmYXVsdERyYXdidWZmZXJzID0gW107XG5cblx0XHRjdXJyZW50UHJvZ3JhbSA9IG51bGw7XG5cblx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XG5cdFx0Y3VycmVudEJsZW5kaW5nID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcblx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdFx0Y3VycmVudEJsZW5kQ29sb3IgPSBuZXcgQ29sb3IoIDAsIDAsIDAgKTtcblx0XHRjdXJyZW50QmxlbmRBbHBoYSA9IDA7XG5cdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0XHRjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciA9IG51bGw7XG5cdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IG51bGw7XG5cblx0XHRjdXJyZW50U2Npc3Nvci5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXHRcdGN1cnJlbnRWaWV3cG9ydC5zZXQoIDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCApO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0ZW5hYmxlOiBlbmFibGUsXG5cdFx0ZGlzYWJsZTogZGlzYWJsZSxcblxuXHRcdGJpbmRGcmFtZWJ1ZmZlcjogYmluZEZyYW1lYnVmZmVyLFxuXHRcdGRyYXdCdWZmZXJzOiBkcmF3QnVmZmVycyxcblxuXHRcdHVzZVByb2dyYW06IHVzZVByb2dyYW0sXG5cblx0XHRzZXRCbGVuZGluZzogc2V0QmxlbmRpbmcsXG5cdFx0c2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLFxuXG5cdFx0c2V0RmxpcFNpZGVkOiBzZXRGbGlwU2lkZWQsXG5cdFx0c2V0Q3VsbEZhY2U6IHNldEN1bGxGYWNlLFxuXG5cdFx0c2V0TGluZVdpZHRoOiBzZXRMaW5lV2lkdGgsXG5cdFx0c2V0UG9seWdvbk9mZnNldDogc2V0UG9seWdvbk9mZnNldCxcblxuXHRcdHNldFNjaXNzb3JUZXN0OiBzZXRTY2lzc29yVGVzdCxcblxuXHRcdGFjdGl2ZVRleHR1cmU6IGFjdGl2ZVRleHR1cmUsXG5cdFx0YmluZFRleHR1cmU6IGJpbmRUZXh0dXJlLFxuXHRcdHVuYmluZFRleHR1cmU6IHVuYmluZFRleHR1cmUsXG5cdFx0Y29tcHJlc3NlZFRleEltYWdlMkQ6IGNvbXByZXNzZWRUZXhJbWFnZTJELFxuXHRcdGNvbXByZXNzZWRUZXhJbWFnZTNEOiBjb21wcmVzc2VkVGV4SW1hZ2UzRCxcblx0XHR0ZXhJbWFnZTJEOiB0ZXhJbWFnZTJELFxuXHRcdHRleEltYWdlM0Q6IHRleEltYWdlM0QsXG5cblx0XHR1cGRhdGVVQk9NYXBwaW5nOiB1cGRhdGVVQk9NYXBwaW5nLFxuXHRcdHVuaWZvcm1CbG9ja0JpbmRpbmc6IHVuaWZvcm1CbG9ja0JpbmRpbmcsXG5cblx0XHR0ZXhTdG9yYWdlMkQ6IHRleFN0b3JhZ2UyRCxcblx0XHR0ZXhTdG9yYWdlM0Q6IHRleFN0b3JhZ2UzRCxcblx0XHR0ZXhTdWJJbWFnZTJEOiB0ZXhTdWJJbWFnZTJELFxuXHRcdHRleFN1YkltYWdlM0Q6IHRleFN1YkltYWdlM0QsXG5cdFx0Y29tcHJlc3NlZFRleFN1YkltYWdlMkQ6IGNvbXByZXNzZWRUZXhTdWJJbWFnZTJELFxuXHRcdGNvbXByZXNzZWRUZXhTdWJJbWFnZTNEOiBjb21wcmVzc2VkVGV4U3ViSW1hZ2UzRCxcblxuXHRcdHNjaXNzb3I6IHNjaXNzb3IsXG5cdFx0dmlld3BvcnQ6IHZpZXdwb3J0LFxuXG5cdFx0cmVzZXQ6IHJlc2V0XG5cblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFRleHR1cmVzKCBfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvICkge1xuXG5cdGNvbnN0IG11bHRpc2FtcGxlZFJUVEV4dCA9IGV4dGVuc2lvbnMuaGFzKCAnV0VCR0xfbXVsdGlzYW1wbGVkX3JlbmRlcl90b190ZXh0dXJlJyApID8gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgOiBudWxsO1xuXHRjb25zdCBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciA9IHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnID8gZmFsc2UgOiAvT2N1bHVzQnJvd3Nlci9nLnRlc3QoIG5hdmlnYXRvci51c2VyQWdlbnQgKTtcblxuXHRjb25zdCBfaW1hZ2VEaW1lbnNpb25zID0gbmV3IFZlY3RvcjIoKTtcblx0Y29uc3QgX3ZpZGVvVGV4dHVyZXMgPSBuZXcgV2Vha01hcCgpO1xuXHRsZXQgX2NhbnZhcztcblxuXHRjb25zdCBfc291cmNlcyA9IG5ldyBXZWFrTWFwKCk7IC8vIG1hcHMgV2ViZ2xUZXh0dXJlIG9iamVjdHMgdG8gaW5zdGFuY2VzIG9mIFNvdXJjZVxuXG5cdC8vIGNvcmRvdmEgaU9TIChhcyBvZiA1LjApIHN0aWxsIHVzZXMgVUlXZWJWaWV3LCB3aGljaCBwcm92aWRlcyBPZmZzY3JlZW5DYW52YXMsXG5cdC8vIGFsc28gT2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKSwgYnV0IG5vdCBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpIVxuXHQvLyBTb21lIGltcGxlbWVudGF0aW9ucyBtYXkgb25seSBpbXBsZW1lbnQgT2Zmc2NyZWVuQ2FudmFzIHBhcnRpYWxseSAoZS5nLiBsYWNraW5nIDJkKS5cblxuXHRsZXQgdXNlT2Zmc2NyZWVuQ2FudmFzID0gZmFsc2U7XG5cblx0dHJ5IHtcblxuXHRcdHVzZU9mZnNjcmVlbkNhbnZhcyA9IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuXHRcdFx0JiYgKCBuZXcgT2Zmc2NyZWVuQ2FudmFzKCAxLCAxICkuZ2V0Q29udGV4dCggJzJkJyApICkgIT09IG51bGw7XG5cblx0fSBjYXRjaCAoIGVyciApIHtcblxuXHRcdC8vIElnbm9yZSBhbnkgZXJyb3JzXG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdC8vIFVzZSBPZmZzY3JlZW5DYW52YXMgd2hlbiBhdmFpbGFibGUuIFNwZWNpYWxseSBuZWVkZWQgaW4gd2ViIHdvcmtlcnNcblxuXHRcdHJldHVybiB1c2VPZmZzY3JlZW5DYW52YXMgP1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcblx0XHRcdG5ldyBPZmZzY3JlZW5DYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6IGNyZWF0ZUVsZW1lbnROUyggJ2NhbnZhcycgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzaXplSW1hZ2UoIGltYWdlLCBuZWVkc05ld0NhbnZhcywgbWF4U2l6ZSApIHtcblxuXHRcdGxldCBzY2FsZSA9IDE7XG5cblx0XHRjb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggaW1hZ2UgKTtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIGlmIHRleHR1cmUgZXhjZWVkcyBtYXggc2l6ZVxuXG5cdFx0aWYgKCBkaW1lbnNpb25zLndpZHRoID4gbWF4U2l6ZSB8fCBkaW1lbnNpb25zLmhlaWdodCA+IG1heFNpemUgKSB7XG5cblx0XHRcdHNjYWxlID0gbWF4U2l6ZSAvIE1hdGgubWF4KCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gb25seSBwZXJmb3JtIHJlc2l6ZSBpZiBuZWNlc3NhcnlcblxuXHRcdGlmICggc2NhbGUgPCAxICkge1xuXG5cdFx0XHQvLyBvbmx5IHBlcmZvcm0gcmVzaXplIGZvciBjZXJ0YWluIGltYWdlIHR5cGVzXG5cblx0XHRcdGlmICggKCB0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICkgfHxcblx0XHRcdFx0KCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIFZpZGVvRnJhbWUgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgVmlkZW9GcmFtZSApICkge1xuXG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gTWF0aC5mbG9vciggc2NhbGUgKiBkaW1lbnNpb25zLndpZHRoICk7XG5cdFx0XHRcdGNvbnN0IGhlaWdodCA9IE1hdGguZmxvb3IoIHNjYWxlICogZGltZW5zaW9ucy5oZWlnaHQgKTtcblxuXHRcdFx0XHRpZiAoIF9jYW52YXMgPT09IHVuZGVmaW5lZCApIF9jYW52YXMgPSBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHQvLyBjdWJlIHRleHR1cmVzIGNhbid0IHJldXNlIHRoZSBzYW1lIGNhbnZhc1xuXG5cdFx0XHRcdGNvbnN0IGNhbnZhcyA9IG5lZWRzTmV3Q2FudmFzID8gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICkgOiBfY2FudmFzO1xuXG5cdFx0XHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHRcdGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCggJzJkJyApO1xuXHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGhhcyBiZWVuIHJlc2l6ZWQgZnJvbSAoJyArIGRpbWVuc2lvbnMud2lkdGggKyAneCcgKyBkaW1lbnNpb25zLmhlaWdodCArICcpIHRvICgnICsgd2lkdGggKyAneCcgKyBoZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoICdkYXRhJyBpbiBpbWFnZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBkaW1lbnNpb25zLndpZHRoICsgJ3gnICsgZGltZW5zaW9ucy5oZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBpbWFnZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGltYWdlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSB7XG5cblx0XHRyZXR1cm4gdGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlTWlwbWFwKCB0YXJnZXQgKSB7XG5cblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUYXJnZXRUeXBlKCB0ZXh0dXJlICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkgcmV0dXJuIF9nbC5URVhUVVJFX0NVQkVfTUFQO1xuXHRcdGlmICggdGV4dHVyZS5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgKSByZXR1cm4gX2dsLlRFWFRVUkVfM0Q7XG5cdFx0aWYgKCB0ZXh0dXJlLmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHJldHVybiBfZ2wuVEVYVFVSRV8yRF9BUlJBWTtcblx0XHRyZXR1cm4gX2dsLlRFWFRVUkVfMkQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldEludGVybmFsRm9ybWF0KCBpbnRlcm5hbEZvcm1hdE5hbWUsIGdsRm9ybWF0LCBnbFR5cGUsIGNvbG9yU3BhY2UsIGZvcmNlTGluZWFyVHJhbnNmZXIgPSBmYWxzZSApIHtcblxuXHRcdGlmICggaW50ZXJuYWxGb3JtYXROYW1lICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9nbFsgaW50ZXJuYWxGb3JtYXROYW1lIF0gIT09IHVuZGVmaW5lZCApIHJldHVybiBfZ2xbIGludGVybmFsRm9ybWF0TmFtZSBdO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIHVzZSBub24tZXhpc3RpbmcgV2ViR0wgaW50ZXJuYWwgZm9ybWF0IFxcJycgKyBpbnRlcm5hbEZvcm1hdE5hbWUgKyAnXFwnJyApO1xuXG5cdFx0fVxuXG5cdFx0bGV0IGludGVybmFsRm9ybWF0ID0gZ2xGb3JtYXQ7XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkVEICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMyRjtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSEFMRl9GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlIxNkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SODtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SRURfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjhVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SMTZVSTtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SOEk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlNIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjE2STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuSU5UICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUjMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SRyApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMzJGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5IQUxGX0ZMT0FUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkcxNkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0JZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzg7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkc4VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkcxNlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzhJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHMTZJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5JTlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SRzMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0JfSU5URUdFUiApIHtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCOFVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjE2VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjMyVUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkJZVEUgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0I4STtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuU0hPUlQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0IxNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLklOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjMySTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IF9nbC5SR0JBX0lOVEVHRVIgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfQllURSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkE4VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQTE2VUk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkEzMlVJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSBfZ2wuUkdCQThJO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5TSE9SVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkExNkk7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLklOVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkEzMkk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdCICkge1xuXG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX0lOVF81XzlfOV85X1JFViApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjlfRTU7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdsRm9ybWF0ID09PSBfZ2wuUkdCQSApIHtcblxuXHRcdFx0Y29uc3QgdHJhbnNmZXIgPSBmb3JjZUxpbmVhclRyYW5zZmVyID8gTGluZWFyVHJhbnNmZXIgOiBDb2xvck1hbmFnZW1lbnQuZ2V0VHJhbnNmZXIoIGNvbG9yU3BhY2UgKTtcblxuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5GTE9BVCApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQkEzMkY7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLkhBTEZfRkxPQVQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0JBMTZGO1xuXHRcdFx0aWYgKCBnbFR5cGUgPT09IF9nbC5VTlNJR05FRF9CWVRFICkgaW50ZXJuYWxGb3JtYXQgPSAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IF9nbC5TUkdCOF9BTFBIQTggOiBfZ2wuUkdCQTg7XG5cdFx0XHRpZiAoIGdsVHlwZSA9PT0gX2dsLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQgKSBpbnRlcm5hbEZvcm1hdCA9IF9nbC5SR0JBNDtcblx0XHRcdGlmICggZ2xUeXBlID09PSBfZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMSApIGludGVybmFsRm9ybWF0ID0gX2dsLlJHQjVfQTE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGludGVybmFsRm9ybWF0ID09PSBfZ2wuUjE2RiB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gX2dsLlIzMkYgfHxcblx0XHRcdGludGVybmFsRm9ybWF0ID09PSBfZ2wuUkcxNkYgfHwgaW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SRzMyRiB8fFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IF9nbC5SR0JBMTZGIHx8IGludGVybmFsRm9ybWF0ID09PSBfZ2wuUkdCQTMyRiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVybmFsRm9ybWF0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCB1c2VTdGVuY2lsLCBkZXB0aFR5cGUgKSB7XG5cblx0XHRsZXQgZ2xJbnRlcm5hbEZvcm1hdDtcblx0XHRpZiAoIHVzZVN0ZW5jaWwgKSB7XG5cblx0XHRcdGlmICggZGVwdGhUeXBlID09PSBudWxsIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlIHx8IGRlcHRoVHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBfZ2wuREVQVEgyNF9TVEVOQ0lMODtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSDMyRl9TVEVOQ0lMODtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHtcblxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gX2dsLkRFUFRIMjRfU1RFTkNJTDg7XG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ0RlcHRoVGV4dHVyZTogMTYgYml0IGRlcHRoIGF0dGFjaG1lbnQgaXMgbm90IHN1cHBvcnRlZCB3aXRoIHN0ZW5jaWwuIFVzaW5nIDI0LWJpdCBhdHRhY2htZW50LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aWYgKCBkZXB0aFR5cGUgPT09IG51bGwgfHwgZGVwdGhUeXBlID09PSBVbnNpZ25lZEludFR5cGUgfHwgZGVwdGhUeXBlID09PSBVbnNpZ25lZEludDI0OFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQyNDtcblxuXHRcdFx0fSBlbHNlIGlmICggZGVwdGhUeXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQzMkY7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRlcHRoVHlwZSA9PT0gVW5zaWduZWRTaG9ydFR5cGUgKSB7XG5cblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IF9nbC5ERVBUSF9DT01QT05FTlQxNjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdsSW50ZXJuYWxGb3JtYXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UgKSB7XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApID09PSB0cnVlIHx8ICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICkgKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLmxvZzIoIE1hdGgubWF4KCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0ICkgKSArIDE7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLm1pcG1hcHMgIT09IHVuZGVmaW5lZCAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gdXNlci1kZWZpbmVkIG1pcG1hcHNcblxuXHRcdFx0cmV0dXJuIHRleHR1cmUubWlwbWFwcy5sZW5ndGg7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgJiYgQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICkge1xuXG5cdFx0XHRyZXR1cm4gaW1hZ2UubWlwbWFwcy5sZW5ndGg7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyB0ZXh0dXJlIHdpdGhvdXQgbWlwbWFwcyAob25seSBiYXNlIGxldmVsKVxuXG5cdFx0XHRyZXR1cm4gMTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHRleHR1cmUgPSBldmVudC50YXJnZXQ7XG5cblx0XHR0ZXh0dXJlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApIHtcblxuXHRcdFx0X3ZpZGVvVGV4dHVyZXMuZGVsZXRlKCB0ZXh0dXJlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXQgPSBldmVudC50YXJnZXQ7XG5cblx0XHRyZW5kZXJUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gY2hlY2sgaWYgaXQncyBuZWNlc3NhcnkgdG8gcmVtb3ZlIHRoZSBXZWJHTFRleHR1cmUgb2JqZWN0XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRjb25zdCB3ZWJnbFRleHR1cmVzID0gX3NvdXJjZXMuZ2V0KCBzb3VyY2UgKTtcblxuXHRcdGlmICggd2ViZ2xUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSBdO1xuXHRcdFx0d2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyAtLTtcblxuXHRcdFx0Ly8gdGhlIFdlYkdMVGV4dHVyZSBvYmplY3QgaXMgbm90IHVzZWQgYW55bW9yZSwgcmVtb3ZlIGl0XG5cblx0XHRcdGlmICggd2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0XHRkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIHRoZSB3ZWFrIG1hcCBlbnRyeSBpZiBubyBXZWJHTFRleHR1cmUgdXNlcyB0aGUgc291cmNlIGFueW1vcmVcblxuXHRcdFx0aWYgKCBPYmplY3Qua2V5cyggd2ViZ2xUZXh0dXJlcyApLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRfc291cmNlcy5kZWxldGUoIHNvdXJjZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkZWxldGVUZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXHRcdF9nbC5kZWxldGVUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7XG5cdFx0ZGVsZXRlIHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTtcblxuXHRcdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLmxlbmd0aDsgbGV2ZWwgKysgKSBfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF1bIGxldmVsIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKSApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLmxlbmd0aDsgbGV2ZWwgKysgKSBfZ2wuZGVsZXRlRnJhbWVidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBsZXZlbCBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlci5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fVxuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IGF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKTtcblxuXHRcdFx0aWYgKCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApIHtcblxuXHRcdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggYXR0YWNobWVudFByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHRcdFx0fVxuXG5cdFx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggdGV4dHVyZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIHJlbmRlclRhcmdldCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGxldCB0ZXh0dXJlVW5pdHMgPSAwO1xuXG5cdGZ1bmN0aW9uIHJlc2V0VGV4dHVyZVVuaXRzKCkge1xuXG5cdFx0dGV4dHVyZVVuaXRzID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVUZXh0dXJlVW5pdCgpIHtcblxuXHRcdGNvbnN0IHRleHR1cmVVbml0ID0gdGV4dHVyZVVuaXRzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlVW5pdCA+PSBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMVGV4dHVyZXM6IFRyeWluZyB0byB1c2UgJyArIHRleHR1cmVVbml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZVVuaXRzICs9IDE7XG5cblx0XHRyZXR1cm4gdGV4dHVyZVVuaXQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRleHR1cmVDYWNoZUtleSggdGV4dHVyZSApIHtcblxuXHRcdGNvbnN0IGFycmF5ID0gW107XG5cblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLndyYXBTICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS53cmFwVCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUud3JhcFIgfHwgMCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUubWFnRmlsdGVyICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5taW5GaWx0ZXIgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmFuaXNvdHJvcHkgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmludGVybmFsRm9ybWF0ICk7XG5cdFx0YXJyYXkucHVzaCggdGV4dHVyZS5mb3JtYXQgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuZmxpcFkgKTtcblx0XHRhcnJheS5wdXNoKCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdGFycmF5LnB1c2goIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkQoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICYmIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdGNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBubyBpbWFnZSBkYXRhIGZvdW5kLicgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfMkQsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyREFycmF5KCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlM0QoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gKSB7XG5cblx0XHRcdHVwbG9hZFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfM0QsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlKCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRDdWJlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHR9XG5cblx0Y29uc3Qgd3JhcHBpbmdUb0dMID0ge1xuXHRcdFsgUmVwZWF0V3JhcHBpbmcgXTogX2dsLlJFUEVBVCxcblx0XHRbIENsYW1wVG9FZGdlV3JhcHBpbmcgXTogX2dsLkNMQU1QX1RPX0VER0UsXG5cdFx0WyBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIF06IF9nbC5NSVJST1JFRF9SRVBFQVRcblx0fTtcblxuXHRjb25zdCBmaWx0ZXJUb0dMID0ge1xuXHRcdFsgTmVhcmVzdEZpbHRlciBdOiBfZ2wuTkVBUkVTVCxcblx0XHRbIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIF06IF9nbC5ORUFSRVNUX01JUE1BUF9ORUFSRVNULFxuXHRcdFsgTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTkVBUkVTVF9NSVBNQVBfTElORUFSLFxuXG5cdFx0WyBMaW5lYXJGaWx0ZXIgXTogX2dsLkxJTkVBUixcblx0XHRbIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogX2dsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCxcblx0XHRbIExpbmVhck1pcG1hcExpbmVhckZpbHRlciBdOiBfZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcblx0fTtcblxuXHRjb25zdCBjb21wYXJlVG9HTCA9IHtcblx0XHRbIE5ldmVyQ29tcGFyZSBdOiBfZ2wuTkVWRVIsXG5cdFx0WyBBbHdheXNDb21wYXJlIF06IF9nbC5BTFdBWVMsXG5cdFx0WyBMZXNzQ29tcGFyZSBdOiBfZ2wuTEVTUyxcblx0XHRbIExlc3NFcXVhbENvbXBhcmUgXTogX2dsLkxFUVVBTCxcblx0XHRbIEVxdWFsQ29tcGFyZSBdOiBfZ2wuRVFVQUwsXG5cdFx0WyBHcmVhdGVyRXF1YWxDb21wYXJlIF06IF9nbC5HRVFVQUwsXG5cdFx0WyBHcmVhdGVyQ29tcGFyZSBdOiBfZ2wuR1JFQVRFUixcblx0XHRbIE5vdEVxdWFsQ29tcGFyZSBdOiBfZ2wuTk9URVFVQUxcblx0fTtcblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICYmIGV4dGVuc2lvbnMuaGFzKCAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyApID09PSBmYWxzZSAmJlxuXHRcdFx0KCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyIHx8IHRleHR1cmUubWFnRmlsdGVyID09PSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgfHxcblx0XHRcdHRleHR1cmUubWluRmlsdGVyID09PSBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgfHwgdGV4dHVyZS5taW5GaWx0ZXIgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVbmFibGUgdG8gdXNlIGxpbmVhciBmaWx0ZXJpbmcgd2l0aCBmbG9hdGluZyBwb2ludCB0ZXh0dXJlcy4gT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UuJyApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1MsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwUyBdICk7XG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9XUkFQX1QsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwVCBdICk7XG5cblx0XHRpZiAoIHRleHR1cmVUeXBlID09PSBfZ2wuVEVYVFVSRV8zRCB8fCB0ZXh0dXJlVHlwZSA9PT0gX2dsLlRFWFRVUkVfMkRfQVJSQVkgKSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfV1JBUF9SLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFIgXSApO1xuXG5cdFx0fVxuXG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1hZ0ZpbHRlciBdICk7XG5cdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCBfZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1pbkZpbHRlciBdICk7XG5cblx0XHRpZiAoIHRleHR1cmUuY29tcGFyZUZ1bmN0aW9uICkge1xuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIF9nbC5URVhUVVJFX0NPTVBBUkVfTU9ERSwgX2dsLkNPTVBBUkVfUkVGX1RPX1RFWFRVUkUgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgX2dsLlRFWFRVUkVfQ09NUEFSRV9GVU5DLCBjb21wYXJlVG9HTFsgdGV4dHVyZS5jb21wYXJlRnVuY3Rpb24gXSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBleHRlbnNpb25zLmhhcyggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm1hZ0ZpbHRlciA9PT0gTmVhcmVzdEZpbHRlciApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlciApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgJiYgZXh0ZW5zaW9ucy5oYXMoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICkgPT09IGZhbHNlICkgcmV0dXJuOyAvLyB2ZXJpZnkgZXh0ZW5zaW9uXG5cblx0XHRcdGlmICggdGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApLl9fY3VycmVudEFuaXNvdHJvcHkgKSB7XG5cblx0XHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJmKCB0ZXh0dXJlVHlwZSwgZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBNYXRoLm1pbiggdGV4dHVyZS5hbmlzb3Ryb3B5LCBjYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpICkgKTtcblx0XHRcdFx0cHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSApIHtcblxuXHRcdGxldCBmb3JjZVVwbG9hZCA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsSW5pdCA9IHRydWU7XG5cblx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHR9XG5cblx0XHQvLyBjcmVhdGUgU291cmNlIDwtPiBXZWJHTFRleHR1cmVzIG1hcHBpbmcgaWYgbmVjZXNzYXJ5XG5cblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblx0XHRsZXQgd2ViZ2xUZXh0dXJlcyA9IF9zb3VyY2VzLmdldCggc291cmNlICk7XG5cblx0XHRpZiAoIHdlYmdsVGV4dHVyZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0d2ViZ2xUZXh0dXJlcyA9IHt9O1xuXHRcdFx0X3NvdXJjZXMuc2V0KCBzb3VyY2UsIHdlYmdsVGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHRcdC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBXZWJHTFRleHR1cmUgb2JqZWN0IGZvciB0aGUgZ2l2ZW4gdGV4dHVyZSBwYXJhbWV0ZXJzXG5cblx0XHRjb25zdCB0ZXh0dXJlQ2FjaGVLZXkgPSBnZXRUZXh0dXJlQ2FjaGVLZXkoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZUNhY2hlS2V5ICE9PSB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5ICkge1xuXG5cdFx0XHQvLyBpZiBub3QsIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBXZWJHTFRleHR1cmVcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGNyZWF0ZSBuZXcgZW50cnlcblxuXHRcdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlQ2FjaGVLZXkgXSA9IHtcblx0XHRcdFx0XHR0ZXh0dXJlOiBfZ2wuY3JlYXRlVGV4dHVyZSgpLFxuXHRcdFx0XHRcdHVzZWRUaW1lczogMFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0XHRcdC8vIHdoZW4gYSBuZXcgaW5zdGFuY2Ugb2YgV2ViR0xUZXh0dXJlIHdhcyBjcmVhdGVkLCBhIHRleHR1cmUgdXBsb2FkIGlzIHJlcXVpcmVkXG5cdFx0XHRcdC8vIGV2ZW4gaWYgdGhlIGltYWdlIGNvbnRlbnRzIGFyZSBpZGVudGljYWxcblxuXHRcdFx0XHRmb3JjZVVwbG9hZCA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0d2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udXNlZFRpbWVzICsrO1xuXG5cdFx0XHQvLyBldmVyeSB0aW1lIHRoZSB0ZXh0dXJlIGNhY2hlIGtleSBjaGFuZ2VzLCBpdCdzIG5lY2Vzc2FyeSB0byBjaGVjayBpZiBhbiBpbnN0YW5jZSBvZlxuXHRcdFx0Ly8gV2ViR0xUZXh0dXJlIGNhbiBiZSBkZWxldGVkIGluIG9yZGVyIHRvIGF2b2lkIGEgbWVtb3J5IGxlYWsuXG5cblx0XHRcdGNvbnN0IHdlYmdsVGV4dHVyZSA9IHdlYmdsVGV4dHVyZXNbIHRleHR1cmVQcm9wZXJ0aWVzLl9fY2FjaGVLZXkgXTtcblxuXHRcdFx0aWYgKCB3ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR3ZWJnbFRleHR1cmVzWyB0ZXh0dXJlUHJvcGVydGllcy5fX2NhY2hlS2V5IF0udXNlZFRpbWVzIC0tO1xuXG5cdFx0XHRcdGlmICggd2ViZ2xUZXh0dXJlLnVzZWRUaW1lcyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdGRlbGV0ZVRleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RvcmUgcmVmZXJlbmNlcyB0byBjYWNoZSBrZXkgYW5kIFdlYkdMVGV4dHVyZSBvYmplY3RcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19jYWNoZUtleSA9IHRleHR1cmVDYWNoZUtleTtcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gd2ViZ2xUZXh0dXJlc1sgdGV4dHVyZUNhY2hlS2V5IF0udGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmb3JjZVVwbG9hZDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRsZXQgdGV4dHVyZVR5cGUgPSBfZ2wuVEVYVFVSRV8yRDtcblxuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IF9nbC5URVhUVVJFXzJEX0FSUkFZO1xuXHRcdGlmICggdGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB0ZXh0dXJlVHlwZSA9IF9nbC5URVhUVVJFXzNEO1xuXG5cdFx0Y29uc3QgZm9yY2VVcGxvYWQgPSBpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKTtcblx0XHRjb25zdCBzb3VyY2UgPSB0ZXh0dXJlLnNvdXJjZTtcblxuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHRcdGNvbnN0IHNvdXJjZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggc291cmNlICk7XG5cblx0XHRpZiAoIHNvdXJjZS52ZXJzaW9uICE9PSBzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiB8fCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggX2dsLlRFWFRVUkUwICsgc2xvdCApO1xuXG5cdFx0XHRjb25zdCB3b3JraW5nUHJpbWFyaWVzID0gQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggQ29sb3JNYW5hZ2VtZW50LndvcmtpbmdDb2xvclNwYWNlICk7XG5cdFx0XHRjb25zdCB0ZXh0dXJlUHJpbWFyaWVzID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgPyBudWxsIDogQ29sb3JNYW5hZ2VtZW50LmdldFByaW1hcmllcyggdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRjb25zdCB1bnBhY2tDb252ZXJzaW9uID0gdGV4dHVyZS5jb2xvclNwYWNlID09PSBOb0NvbG9yU3BhY2UgfHwgd29ya2luZ1ByaW1hcmllcyA9PT0gdGV4dHVyZVByaW1hcmllcyA/IF9nbC5OT05FIDogX2dsLkJST1dTRVJfREVGQVVMVF9XRUJHTDtcblxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdGV4dHVyZS5mbGlwWSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19BTElHTk1FTlQsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfQ09MT1JTUEFDRV9DT05WRVJTSU9OX1dFQkdMLCB1bnBhY2tDb252ZXJzaW9uICk7XG5cblx0XHRcdGxldCBpbWFnZSA9IHJlc2l6ZUltYWdlKCB0ZXh0dXJlLmltYWdlLCBmYWxzZSwgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplICk7XG5cdFx0XHRpbWFnZSA9IHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGltYWdlICk7XG5cblx0XHRcdGNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXG5cdFx0XHRjb25zdCBnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKTtcblx0XHRcdGxldCBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSwgdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSApO1xuXG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggdGV4dHVyZVR5cGUsIHRleHR1cmUgKTtcblxuXHRcdFx0bGV0IG1pcG1hcDtcblx0XHRcdGNvbnN0IG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRcdGNvbnN0IHVzZVRleFN0b3JhZ2UgPSAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgIT09IHRydWUgKTtcblx0XHRcdGNvbnN0IGFsbG9jYXRlTWVtb3J5ID0gKCBzb3VyY2VQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9PT0gdW5kZWZpbmVkICkgfHwgKCBmb3JjZVVwbG9hZCA9PT0gdHJ1ZSApO1xuXHRcdFx0Y29uc3QgZGF0YVJlYWR5ID0gc291cmNlLmRhdGFSZWFkeTtcblx0XHRcdGNvbnN0IGxldmVscyA9IGdldE1pcExldmVscyggdGV4dHVyZSwgaW1hZ2UgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCB0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHQvL1xuXG5cdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDEsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcblx0XHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcHNbIDAgXS53aWR0aCwgbWlwbWFwc1sgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCAwLCAwLCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgKSB7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBzWyAwIF0ud2lkdGgsIG1pcG1hcHNbIDAgXS5oZWlnaHQsIGltYWdlLmRlcHRoICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdGV4dHVyZS5sYXllclVwZGF0ZXMuc2l6ZSA+IDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBsYXllckJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGZvciAoIGNvbnN0IGxheWVySW5kZXggb2YgdGV4dHVyZS5sYXllclVwZGF0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGxheWVyRGF0YSA9IG1pcG1hcC5kYXRhLnN1YmFycmF5KFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsYXllckluZGV4ICogbGF5ZXJCeXRlTGVuZ3RoIC8gbWlwbWFwLmRhdGEuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbGF5ZXJJbmRleCArIDEgKSAqIGxheWVyQnl0ZUxlbmd0aCAvIG1pcG1hcC5kYXRhLkJZVEVTX1BFUl9FTEVNRU5UXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCBsYXllckluZGV4LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDEsIGdsRm9ybWF0LCBsYXllckRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRleHR1cmUuY2xlYXJMYXllclVwZGF0ZXMoKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgbWlwbWFwLmRhdGEsIDAsIDAgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnVwbG9hZFRleHR1cmUoKScgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlM0QoIF9nbC5URVhUVVJFXzJEX0FSUkFZLCBpLCAwLCAwLCAwLCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCBfZ2wuVEVYVFVSRV8yRF9BUlJBWSwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICYmIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcHNbIDAgXS53aWR0aCwgbWlwbWFwc1sgMCBdLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdsRm9ybWF0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdGlmICggYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUubGF5ZXJVcGRhdGVzLnNpemUgPiAwICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGxheWVyQnl0ZUxlbmd0aCA9IGdldEJ5dGVMZW5ndGgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLnR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb25zdCBsYXllckluZGV4IG9mIHRleHR1cmUubGF5ZXJVcGRhdGVzICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgbGF5ZXJEYXRhID0gaW1hZ2UuZGF0YS5zdWJhcnJheShcblx0XHRcdFx0XHRcdFx0XHRcdGxheWVySW5kZXggKiBsYXllckJ5dGVMZW5ndGggLyBpbWFnZS5kYXRhLkJZVEVTX1BFUl9FTEVNRU5ULFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBsYXllckluZGV4ICsgMSApICogbGF5ZXJCeXRlTGVuZ3RoIC8gaW1hZ2UuZGF0YS5CWVRFU19QRVJfRUxFTUVOVFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIDAsIDAsIGxheWVySW5kZXgsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDEsIGdsRm9ybWF0LCBnbFR5cGUsIGxheWVyRGF0YSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR0ZXh0dXJlLmNsZWFyTGF5ZXJVcGRhdGVzKCk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UzRCggX2dsLlRFWFRVUkVfMkRfQVJSQVksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlM0QoIF9nbC5URVhUVVJFXzNELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UzRCggX2dsLlRFWFRVUkVfM0QsIDAsIDAsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIF9nbC5URVhUVVJFXzNELCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0ZyYW1lYnVmZmVyVGV4dHVyZSApIHtcblxuXHRcdFx0XHRpZiAoIGFsbG9jYXRlTWVtb3J5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGxldCB3aWR0aCA9IGltYWdlLndpZHRoLCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGxldmVsczsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHRcdFx0XHRcdHdpZHRoID4+PSAxO1xuXHRcdFx0XHRcdFx0XHRoZWlnaHQgPj49IDE7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gcmVndWxhciBUZXh0dXJlIChpbWFnZSwgdmlkZW8sIGNhbnZhcylcblxuXHRcdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0XHQvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHNcblx0XHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXG5cblx0XHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGRpbWVuc2lvbnMgPSBnZXREaW1lbnNpb25zKCBtaXBtYXBzWyAwIF0gKTtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4U3RvcmFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWxzLCBnbEludGVybmFsRm9ybWF0LCBkaW1lbnNpb25zLndpZHRoLCBkaW1lbnNpb25zLmhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB1c2VUZXhTdG9yYWdlICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIGksIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBkaW1lbnNpb25zID0gZ2V0RGltZW5zaW9ucyggaW1hZ2UgKTtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFXzJELCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFXzJELCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0ZXh0dXJlVHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uID0gc291cmNlLnZlcnNpb247XG5cblx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBsb2FkQ3ViZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90ICkge1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmltYWdlLmxlbmd0aCAhPT0gNiApIHJldHVybjtcblxuXHRcdGNvbnN0IGZvcmNlVXBsb2FkID0gaW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cdFx0Y29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG5cblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBfZ2wuVEVYVFVSRTAgKyBzbG90ICk7XG5cblx0XHRjb25zdCBzb3VyY2VQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNvdXJjZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UudmVyc2lvbiAhPT0gc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gfHwgZm9yY2VVcGxvYWQgPT09IHRydWUgKSB7XG5cblx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIF9nbC5URVhUVVJFMCArIHNsb3QgKTtcblxuXHRcdFx0Y29uc3Qgd29ya2luZ1ByaW1hcmllcyA9IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIENvbG9yTWFuYWdlbWVudC53b3JraW5nQ29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgdGV4dHVyZVByaW1hcmllcyA9IHRleHR1cmUuY29sb3JTcGFjZSA9PT0gTm9Db2xvclNwYWNlID8gbnVsbCA6IENvbG9yTWFuYWdlbWVudC5nZXRQcmltYXJpZXMoIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgdW5wYWNrQ29udmVyc2lvbiA9IHRleHR1cmUuY29sb3JTcGFjZSA9PT0gTm9Db2xvclNwYWNlIHx8IHdvcmtpbmdQcmltYXJpZXMgPT09IHRleHR1cmVQcmltYXJpZXMgPyBfZ2wuTk9ORSA6IF9nbC5CUk9XU0VSX0RFRkFVTFRfV0VCR0w7XG5cblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRleHR1cmUuZmxpcFkgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfQUxJR05NRU5ULCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCwgdW5wYWNrQ29udmVyc2lvbiApO1xuXG5cdFx0XHRjb25zdCBpc0NvbXByZXNzZWQgPSAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaXNDb21wcmVzc2VkVGV4dHVyZSApO1xuXHRcdFx0Y29uc3QgaXNEYXRhVGV4dHVyZSA9ICggdGV4dHVyZS5pbWFnZVsgMCBdICYmIHRleHR1cmUuaW1hZ2VbIDAgXS5pc0RhdGFUZXh0dXJlICk7XG5cblx0XHRcdGNvbnN0IGN1YmVJbWFnZSA9IFtdO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggISBpc0NvbXByZXNzZWQgJiYgISBpc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSByZXNpemVJbWFnZSggdGV4dHVyZS5pbWFnZVsgaSBdLCB0cnVlLCBjYXBhYmlsaXRpZXMubWF4Q3ViZW1hcFNpemUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y3ViZUltYWdlWyBpIF0gPSBpc0RhdGFUZXh0dXJlID8gdGV4dHVyZS5pbWFnZVsgaSBdLmltYWdlIDogdGV4dHVyZS5pbWFnZVsgaSBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdWJlSW1hZ2VbIGkgXSA9IHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaW1hZ2UgPSBjdWJlSW1hZ2VbIDAgXSxcblx0XHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICksXG5cdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApLFxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXG5cdFx0XHRjb25zdCB1c2VUZXhTdG9yYWdlID0gKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICE9PSB0cnVlICk7XG5cdFx0XHRjb25zdCBhbGxvY2F0ZU1lbW9yeSA9ICggc291cmNlUHJvcGVydGllcy5fX3ZlcnNpb24gPT09IHVuZGVmaW5lZCApIHx8ICggZm9yY2VVcGxvYWQgPT09IHRydWUgKTtcblx0XHRcdGNvbnN0IGRhdGFSZWFkeSA9IHNvdXJjZS5kYXRhUmVhZHk7XG5cdFx0XHRsZXQgbGV2ZWxzID0gZ2V0TWlwTGV2ZWxzKCB0ZXh0dXJlLCBpbWFnZSApO1xuXG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmUgKTtcblxuXHRcdFx0bGV0IG1pcG1hcHM7XG5cblx0XHRcdGlmICggaXNDb21wcmVzc2VkICkge1xuXG5cdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSAmJiBhbGxvY2F0ZU1lbW9yeSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnRleFN0b3JhZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIGxldmVscywgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwcyA9IGN1YmVJbWFnZVsgaSBdLm1pcG1hcHM7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ICE9PSBSR0JBRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiwgMCwgMCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCBnbEZvcm1hdCwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUuY29tcHJlc3NlZFRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4U3ViSW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIDAsIDAsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcblxuXHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgJiYgYWxsb2NhdGVNZW1vcnkgKSB7XG5cblx0XHRcdFx0XHQvLyBUT0RPOiBVbmlmb3JtbHkgaGFuZGxlIG1pcG1hcCBkZWZpbml0aW9uc1xuXHRcdFx0XHRcdC8vIE5vcm1hbCB0ZXh0dXJlcyBhbmQgY29tcHJlc3NlZCBjdWJlIHRleHR1cmVzIGRlZmluZSBiYXNlIGxldmVsICsgbWlwcyB3aXRoIHRoZWlyIG1pcG1hcCBhcnJheVxuXHRcdFx0XHRcdC8vIFVuY29tcHJlc3NlZCBjdWJlIHRleHR1cmVzIHVzZSB0aGVpciBtaXBtYXAgYXJyYXkgb25seSBmb3IgbWlwcyAobm8gYmFzZSBsZXZlbClcblxuXHRcdFx0XHRcdGlmICggbWlwbWFwcy5sZW5ndGggPiAwICkgbGV2ZWxzICsrO1xuXG5cdFx0XHRcdFx0Y29uc3QgZGltZW5zaW9ucyA9IGdldERpbWVuc2lvbnMoIGN1YmVJbWFnZVsgMCBdICk7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhTdG9yYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQLCBsZXZlbHMsIGdsSW50ZXJuYWxGb3JtYXQsIGRpbWVuc2lvbnMud2lkdGgsIGRpbWVuc2lvbnMuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGRhdGFSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwLCAwLCAwLCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBtaXBtYXBJbWFnZSA9IG1pcG1hcC5pbWFnZVsgaSBdLmltYWdlO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiArIDEsIDAsIDAsIG1pcG1hcEltYWdlLndpZHRoLCBtaXBtYXBJbWFnZS5oZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcEltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGogKyAxLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBJbWFnZS53aWR0aCwgbWlwbWFwSW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXBJbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHVzZVRleFN0b3JhZ2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBkYXRhUmVhZHkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgMCwgMCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Zm9yICggbGV0IGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlVGV4U3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZGF0YVJlYWR5ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgaSwgaiArIDEsIDAsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5pbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIF9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmltYWdlWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHQvLyBXZSBhc3N1bWUgaW1hZ2VzIGZvciBjdWJlIG1hcCBoYXZlIHRoZSBzYW1lIHNpemUuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV9DVUJFX01BUCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNvdXJjZVByb3BlcnRpZXMuX192ZXJzaW9uID0gc291cmNlLnZlcnNpb247XG5cblx0XHRcdGlmICggdGV4dHVyZS5vblVwZGF0ZSApIHRleHR1cmUub25VcGRhdGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHR9XG5cblx0Ly8gUmVuZGVyIHRhcmdldHNcblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciB0YXJnZXQgdGV4dHVyZSBhbmQgYmluZCBpdCB0byBjb3JyZWN0IGZyYW1lYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0ZXh0dXJlLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCApIHtcblxuXHRcdGNvbnN0IGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUuY29sb3JTcGFjZSApO1xuXHRcdGNvbnN0IGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3JlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldDtcblxuXHRcdGlmICggISByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc3Qgd2lkdGggPSBNYXRoLm1heCggMSwgcmVuZGVyVGFyZ2V0LndpZHRoID4+IGxldmVsICk7XG5cdFx0XHRjb25zdCBoZWlnaHQgPSBNYXRoLm1heCggMSwgcmVuZGVyVGFyZ2V0LmhlaWdodCA+PiBsZXZlbCApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVUYXJnZXQgPT09IF9nbC5URVhUVVJFXzNEIHx8IHRleHR1cmVUYXJnZXQgPT09IF9nbC5URVhUVVJFXzJEX0FSUkFZICkge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlM0QoIHRleHR1cmVUYXJnZXQsIGxldmVsLCBnbEludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCByZW5kZXJUYXJnZXQuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCB0ZXh0dXJlVGFyZ2V0LCBsZXZlbCwgZ2xJbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbnVsbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LmZyYW1lYnVmZmVyVGV4dHVyZTJETXVsdGlzYW1wbGVFWFQoIF9nbC5GUkFNRUJVRkZFUiwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIDAsIGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlVGFyZ2V0ID09PSBfZ2wuVEVYVFVSRV8yRCB8fCAoIHRleHR1cmVUYXJnZXQgPj0gX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCAmJiB0ZXh0dXJlVGFyZ2V0IDw9IF9nbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1ogKSApIHsgLy8gc2VlICMyNDc1M1xuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUsIGxldmVsICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciBpbnRlcm5hbCBkZXB0aC9zdGVuY2lsIGJ1ZmZlcnMgYW5kIGJpbmQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBpc011bHRpc2FtcGxlICkge1xuXG5cdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdC8vIHJldHJpZXZlIHRoZSBkZXB0aCBhdHRhY2htZW50IHR5cGVzXG5cdFx0XHRjb25zdCBkZXB0aFRleHR1cmUgPSByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlO1xuXHRcdFx0Y29uc3QgZGVwdGhUeXBlID0gZGVwdGhUZXh0dXJlICYmIGRlcHRoVGV4dHVyZS5pc0RlcHRoVGV4dHVyZSA/IGRlcHRoVGV4dHVyZS50eXBlIDogbnVsbDtcblx0XHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbERlcHRoRm9ybWF0KCByZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlciwgZGVwdGhUeXBlICk7XG5cdFx0XHRjb25zdCBnbEF0dGFjaG1lbnRUeXBlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7XG5cblx0XHRcdC8vIHNldCB1cCB0aGUgYXR0YWNobWVudFxuXHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0Y29uc3QgaXNVc2VNdWx0aXNhbXBsZWRSVFQgPSB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0aWYgKCBpc1VzZU11bHRpc2FtcGxlZFJUVCApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlRVhUKCBfZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCBfZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggX2dsLlJFTkRFUkJVRkZFUiwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGdsQXR0YWNobWVudFR5cGUsIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gdGV4dHVyZXNbIGkgXTtcblxuXHRcdFx0XHRjb25zdCBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLmNvbG9yU3BhY2UgKTtcblx0XHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0XHRcdGNvbnN0IGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdCggdGV4dHVyZS5pbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRcdGNvbnN0IHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgJiYgdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCBfZ2wuUkVOREVSQlVGRkVSLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdFx0bXVsdGlzYW1wbGVkUlRURXh0LnJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCggX2dsLlJFTkRFUkJVRkZFUiwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCBfZ2wuUkVOREVSQlVGRkVSLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIFNldHVwIHJlc291cmNlcyBmb3IgYSBEZXB0aCBUZXh0dXJlIGZvciBhIEZCTyAobmVlZHMgYW4gZXh0ZW5zaW9uKVxuXHRmdW5jdGlvbiBzZXR1cERlcHRoVGV4dHVyZSggZnJhbWVidWZmZXIsIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApO1xuXHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTtcblxuXHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ3JlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBUSFJFRS5EZXB0aFRleHR1cmUnICk7XG5cblx0XHR9XG5cblx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICk7XG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX19yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cblx0XHQvLyB1cGxvYWQgYW4gZW1wdHkgZGVwdGggdGV4dHVyZSB3aXRoIGZyYW1lYnVmZmVyIHNpemVcblx0XHRpZiAoICEgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCAhPT0gcmVuZGVyVGFyZ2V0LndpZHRoIHx8XG5cdFx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ICE9PSByZW5kZXJUYXJnZXQuaGVpZ2h0ICkge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRzZXRUZXh0dXJlMkQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdGNvbnN0IHdlYmdsRGVwdGhUZXh0dXJlID0gdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmU7XG5cdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgKSB7XG5cblx0XHRcdGlmICggdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRtdWx0aXNhbXBsZWRSVFRFeHQuZnJhbWVidWZmZXJUZXh0dXJlMkRNdWx0aXNhbXBsZUVYVCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfQVRUQUNITUVOVCwgX2dsLlRFWFRVUkVfMkQsIHdlYmdsRGVwdGhUZXh0dXJlLCAwLCBzYW1wbGVzICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5mb3JtYXQgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHtcblxuXHRcdFx0aWYgKCB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApICkge1xuXG5cdFx0XHRcdG11bHRpc2FtcGxlZFJUVEV4dC5mcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsIF9nbC5URVhUVVJFXzJELCB3ZWJnbERlcHRoVGV4dHVyZSwgMCwgc2FtcGxlcyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVW5rbm93biBkZXB0aFRleHR1cmUgZm9ybWF0JyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBTZXR1cCBHTCByZXNvdXJjZXMgZm9yIGEgbm9uLXRleHR1cmUgZGVwdGggYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0Y29uc3QgaXNDdWJlID0gKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPT09IHRydWUgKTtcblxuXHRcdC8vIGlmIHRoZSBib3VuZCBkZXB0aCB0ZXh0dXJlIGhhcyBjaGFuZ2VkXG5cdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYm91bmREZXB0aFRleHR1cmUgIT09IHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdC8vIGZpcmUgdGhlIGRpc3Bvc2UgZXZlbnQgdG8gZ2V0IHJpZCBvZiBzdG9yZWQgc3RhdGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcmV2aW91c2x5IGJvdW5kIGRlcHRoIGJ1ZmZlclxuXHRcdFx0Y29uc3QgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2RlcHRoRGlzcG9zZUNhbGxiYWNrICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19kZXB0aERpc3Bvc2VDYWxsYmFjaygpO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHNldCB1cCBkaXNwb3NlIGxpc3RlbmVycyB0byB0cmFjayB3aGVuIHRoZSBjdXJyZW50bHkgYXR0YWNoZWQgYnVmZmVyIGlzIGltcGxpY2l0bHkgdW5ib3VuZFxuXHRcdFx0aWYgKCBkZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGlzcG9zZUV2ZW50ID0gKCkgPT4ge1xuXG5cdFx0XHRcdFx0ZGVsZXRlIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19ib3VuZERlcHRoVGV4dHVyZTtcblx0XHRcdFx0XHRkZWxldGUgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2RlcHRoRGlzcG9zZUNhbGxiYWNrO1xuXHRcdFx0XHRcdGRlcHRoVGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIGRpc3Bvc2VFdmVudCApO1xuXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZGVwdGhUZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgZGlzcG9zZUV2ZW50ICk7XG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19kZXB0aERpc3Bvc2VDYWxsYmFjayA9IGRpc3Bvc2VFdmVudDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYm91bmREZXB0aFRleHR1cmUgPSBkZXB0aFRleHR1cmU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgJiYgISByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAndGFyZ2V0LmRlcHRoVGV4dHVyZSBub3Qgc3VwcG9ydGVkIGluIEN1YmUgcmVuZGVyIHRhcmdldHMnICk7XG5cblx0XHRcdHNldHVwRGVwdGhUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0sIHJlbmRlclRhcmdldCwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIGF0dGFjaCBidWZmZXIgaWYgaXQncyBiZWVuIGNyZWF0ZWQgYWxyZWFkeVxuXHRcdFx0XHRcdFx0Y29uc3QgZ2xBdHRhY2htZW50VHlwZSA9IHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyID8gX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCA6IF9nbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXHRcdFx0XHRcdFx0Y29uc3QgcmVuZGVyYnVmZmVyID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXJbIGkgXTtcblx0XHRcdFx0XHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBnbEF0dGFjaG1lbnRUeXBlLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBhdHRhY2ggYnVmZmVyIGlmIGl0J3MgYmVlbiBjcmVhdGVkIGFscmVhZHlcblx0XHRcdFx0XHRjb25zdCBnbEF0dGFjaG1lbnRUeXBlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7XG5cdFx0XHRcdFx0Y29uc3QgcmVuZGVyYnVmZmVyID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXI7XG5cdFx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlciApO1xuXHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBnbEF0dGFjaG1lbnRUeXBlLCBfZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdC8vIHJlYmluZCBmcmFtZWJ1ZmZlciB3aXRoIGV4dGVybmFsIHRleHR1cmVzXG5cdGZ1bmN0aW9uIHJlYmluZFRleHR1cmVzKCByZW5kZXJUYXJnZXQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdGlmICggY29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkZXB0aFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIFNldCB1cCBHTCByZXNvdXJjZXMgZm9yIHRoZSByZW5kZXIgdGFyZ2V0XG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKTtcblxuXHRcdHJlbmRlclRhcmdldC5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRjb25zdCBpc0N1YmUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSApO1xuXHRcdGNvbnN0IGlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzID0gKCB0ZXh0dXJlcy5sZW5ndGggPiAxICk7XG5cblx0XHRpZiAoICEgaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBmcmFtZWJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLm1pcG1hcHMgJiYgdGV4dHVyZS5taXBtYXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdID0gW107XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkge1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdWyBsZXZlbCBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggdGV4dHVyZS5taXBtYXBzICYmIHRleHR1cmUubWlwbWFwcy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XG5cblx0XHRcdFx0Zm9yICggbGV0IGxldmVsID0gMDsgbGV2ZWwgPCB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoOyBsZXZlbCArKyApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBsZXZlbCBdID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBhdHRhY2htZW50UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlc1sgaSBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGF0dGFjaG1lbnRQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdFx0XHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMgKys7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggKCByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKSAmJiB1c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmUgPSB0ZXh0dXJlc1sgaSBdO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cblx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS5jb2xvclNwYWNlICk7XG5cdFx0XHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICk7XG5cdFx0XHRcdFx0Y29uc3QgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCB0ZXh0dXJlLmNvbG9yU3BhY2UsIHJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cdFx0XHRcdFx0Y29uc3Qgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIF9nbC5SRU5ERVJCVUZGRVIsIHNhbXBsZXMsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIF9nbC5SRU5ERVJCVUZGRVIsIG51bGwgKTtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXHRcdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIsIHJlbmRlclRhcmdldCwgdHJ1ZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgbnVsbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBjb2xvciBidWZmZXJcblxuXHRcdGlmICggaXNDdWJlICkge1xuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggX2dsLlRFWFRVUkVfQ1VCRV9NQVAsIHRleHR1cmUgKTtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUubWlwbWFwcyAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBsZXZlbCA9IDA7IGxldmVsIDwgdGV4dHVyZS5taXBtYXBzLmxlbmd0aDsgbGV2ZWwgKysgKSB7XG5cblx0XHRcdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdWyBsZXZlbCBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIGxldmVsICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGksIDAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIHRleHR1cmUgKSApIHtcblxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCggX2dsLlRFWFRVUkVfQ1VCRV9NQVAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9IGVsc2UgaWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBpbCA9IHRleHR1cmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IGF0dGFjaG1lbnQgPSB0ZXh0dXJlc1sgaSBdO1xuXHRcdFx0XHRjb25zdCBhdHRhY2htZW50UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBhdHRhY2htZW50ICk7XG5cblx0XHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIF9nbC5URVhUVVJFXzJELCBhdHRhY2htZW50UHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXHRcdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggX2dsLlRFWFRVUkVfMkQsIGF0dGFjaG1lbnQgKTtcblx0XHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIGF0dGFjaG1lbnQsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5URVhUVVJFXzJELCAwICk7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMoIGF0dGFjaG1lbnQgKSApIHtcblxuXHRcdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCBfZ2wuVEVYVFVSRV8yRCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsZXQgZ2xUZXh0dXJlVHlwZSA9IF9nbC5URVhUVVJFXzJEO1xuXG5cdFx0XHRpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMM0RSZW5kZXJUYXJnZXQgfHwgcmVuZGVyVGFyZ2V0LmlzV2ViR0xBcnJheVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHRnbFRleHR1cmVUeXBlID0gcmVuZGVyVGFyZ2V0LmlzV2ViR0wzRFJlbmRlclRhcmdldCA/IF9nbC5URVhUVVJFXzNEIDogX2dsLlRFWFRVUkVfMkRfQVJSQVk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIGdsVGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggZ2xUZXh0dXJlVHlwZSwgdGV4dHVyZSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUubWlwbWFwcyAmJiB0ZXh0dXJlLm1pcG1hcHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRmb3IgKCBsZXQgbGV2ZWwgPSAwOyBsZXZlbCA8IHRleHR1cmUubWlwbWFwcy5sZW5ndGg7IGxldmVsICsrICkge1xuXG5cdFx0XHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyWyBsZXZlbCBdLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2xUZXh0dXJlVHlwZSwgbGV2ZWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRleHR1cmUsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2xUZXh0dXJlVHlwZSwgMCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIGdsVGV4dHVyZVR5cGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBkZXB0aCBhbmQgc3RlbmNpbCBidWZmZXJzXG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0c2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0Y29uc3QgdGV4dHVyZXMgPSByZW5kZXJUYXJnZXQudGV4dHVyZXM7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGV4dHVyZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHRleHR1cmUgPSB0ZXh0dXJlc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSApICkge1xuXG5cdFx0XHRcdGNvbnN0IHRhcmdldFR5cGUgPSBnZXRUYXJnZXRUeXBlKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGFyZ2V0VHlwZSwgd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0YXJnZXRUeXBlICk7XG5cdFx0XHRcdHN0YXRlLnVuYmluZFRleHR1cmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRjb25zdCBpbnZhbGlkYXRpb25BcnJheVJlYWQgPSBbXTtcblx0Y29uc3QgaW52YWxpZGF0aW9uQXJyYXlEcmF3ID0gW107XG5cblx0ZnVuY3Rpb24gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LnNhbXBsZXMgPiAwICkge1xuXG5cdFx0XHRpZiAoIHVzZU11bHRpc2FtcGxlZFJUVCggcmVuZGVyVGFyZ2V0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVzID0gcmVuZGVyVGFyZ2V0LnRleHR1cmVzO1xuXHRcdFx0XHRjb25zdCB3aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblx0XHRcdFx0bGV0IG1hc2sgPSBfZ2wuQ09MT1JfQlVGRkVSX0JJVDtcblx0XHRcdFx0Y29uc3QgZGVwdGhTdHlsZSA9IHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyID8gX2dsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCA6IF9nbC5ERVBUSF9BVFRBQ0hNRU5UO1xuXHRcdFx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdFx0XHRjb25zdCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyA9ICggdGV4dHVyZXMubGVuZ3RoID4gMSApO1xuXG5cdFx0XHRcdC8vIElmIE1SVCB3ZSBuZWVkIHRvIHJlbW92ZSBGQk8gYXR0YWNobWVudHNcblx0XHRcdFx0aWYgKCBpc011bHRpcGxlUmVuZGVyVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRleHR1cmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSwgX2dsLlJFTkRFUkJVRkZFUiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5URVhUVVJFXzJELCBudWxsLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGV4dHVyZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQucmVzb2x2ZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIG1hc2sgfD0gX2dsLkRFUFRIX0JVRkZFUl9CSVQ7XG5cblx0XHRcdFx0XHRcdC8vIHJlc29sdmluZyBzdGVuY2lsIGlzIHNsb3cgd2l0aCBhIEQzRCBiYWNrZW5kLiBkaXNhYmxlIGl0IGZvciBhbGwgdHJhbnNtaXNzaW9uIHJlbmRlciB0YXJnZXRzIChzZWUgIzI3Nzk5KVxuXG5cdFx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICYmIHJlbmRlclRhcmdldC5yZXNvbHZlU3RlbmNpbEJ1ZmZlciApIG1hc2sgfD0gX2dsLlNURU5DSUxfQlVGRkVSX0JJVDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlJFTkRFUkJVRkZFUiwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXJbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHRjb25zdCB3ZWJnbFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZXNbIGkgXSApLl9fd2ViZ2xUZXh0dXJlO1xuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xUZXh0dXJlLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfZ2wuYmxpdEZyYW1lYnVmZmVyKCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCBtYXNrLCBfZ2wuTkVBUkVTVCApO1xuXG5cdFx0XHRcdFx0aWYgKCBzdXBwb3J0c0ludmFsaWRhdGVGcmFtZWJ1ZmZlciA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXlSZWFkLmxlbmd0aCA9IDA7XG5cdFx0XHRcdFx0XHRpbnZhbGlkYXRpb25BcnJheURyYXcubGVuZ3RoID0gMDtcblxuXHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXlSZWFkLnB1c2goIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGkgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnJlc29sdmVEZXB0aEJ1ZmZlciA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXlSZWFkLnB1c2goIGRlcHRoU3R5bGUgKTtcblx0XHRcdFx0XHRcdFx0aW52YWxpZGF0aW9uQXJyYXlEcmF3LnB1c2goIGRlcHRoU3R5bGUgKTtcblxuXHRcdFx0XHRcdFx0XHRfZ2wuaW52YWxpZGF0ZUZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgaW52YWxpZGF0aW9uQXJyYXlEcmF3ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0X2dsLmludmFsaWRhdGVGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIGludmFsaWRhdGlvbkFycmF5UmVhZCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBudWxsICk7XG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIG51bGwgKTtcblxuXHRcdFx0XHQvLyBJZiBNUlQgc2luY2UgcHJlLWJsaXQgd2UgcmVtb3ZlZCB0aGUgRkJPIHdlIG5lZWQgdG8gcmVjb25zdHJ1Y3QgdGhlIGF0dGFjaG1lbnRzXG5cdFx0XHRcdGlmICggaXNNdWx0aXBsZVJlbmRlclRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0ZXh0dXJlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIF9nbC5SRU5ERVJCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmVzWyBpIF0gKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdFx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpLCBfZ2wuVEVYVFVSRV8yRCwgd2ViZ2xUZXh0dXJlLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnJlc29sdmVEZXB0aEJ1ZmZlciA9PT0gZmFsc2UgJiYgc3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBkZXB0aFN0eWxlID0gcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgPyBfZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogX2dsLkRFUFRIX0FUVEFDSE1FTlQ7XG5cblx0XHRcdFx0XHRfZ2wuaW52YWxpZGF0ZUZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgWyBkZXB0aFN0eWxlIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuIE1hdGgubWluKCBjYXBhYmlsaXRpZXMubWF4U2FtcGxlcywgcmVuZGVyVGFyZ2V0LnNhbXBsZXMgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXNlTXVsdGlzYW1wbGVkUlRUKCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIHJlbmRlclRhcmdldC5zYW1wbGVzID4gMCAmJiBleHRlbnNpb25zLmhhcyggJ1dFQkdMX211bHRpc2FtcGxlZF9yZW5kZXJfdG9fdGV4dHVyZScgKSA9PT0gdHJ1ZSAmJiByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlUmVuZGVyVG9UZXh0dXJlICE9PSBmYWxzZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0Y29uc3QgZnJhbWUgPSBpbmZvLnJlbmRlci5mcmFtZTtcblxuXHRcdC8vIENoZWNrIHRoZSBsYXN0IGZyYW1lIHdlIHVwZGF0ZWQgdGhlIFZpZGVvVGV4dHVyZVxuXG5cdFx0aWYgKCBfdmlkZW9UZXh0dXJlcy5nZXQoIHRleHR1cmUgKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdF92aWRlb1RleHR1cmVzLnNldCggdGV4dHVyZSwgZnJhbWUgKTtcblx0XHRcdHRleHR1cmUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHZlcmlmeUNvbG9yU3BhY2UoIHRleHR1cmUsIGltYWdlICkge1xuXG5cdFx0Y29uc3QgY29sb3JTcGFjZSA9IHRleHR1cmUuY29sb3JTcGFjZTtcblx0XHRjb25zdCBmb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0XHRjb25zdCB0eXBlID0gdGV4dHVyZS50eXBlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUgPT09IHRydWUgfHwgdGV4dHVyZS5pc1ZpZGVvVGV4dHVyZSA9PT0gdHJ1ZSApIHJldHVybiBpbWFnZTtcblxuXHRcdGlmICggY29sb3JTcGFjZSAhPT0gTGluZWFyU1JHQkNvbG9yU3BhY2UgJiYgY29sb3JTcGFjZSAhPT0gTm9Db2xvclNwYWNlICkge1xuXG5cdFx0XHQvLyBzUkdCXG5cblx0XHRcdGlmICggQ29sb3JNYW5hZ2VtZW50LmdldFRyYW5zZmVyKCBjb2xvclNwYWNlICkgPT09IFNSR0JUcmFuc2ZlciApIHtcblxuXHRcdFx0XHQvLyBpbiBXZWJHTCAyIHVuY29tcHJlc3NlZCB0ZXh0dXJlcyBjYW4gb25seSBiZSBzUkdCIGVuY29kZWQgaWYgdGhleSBoYXZlIHRoZSBSR0JBOCBmb3JtYXRcblxuXHRcdFx0XHRpZiAoIGZvcm1hdCAhPT0gUkdCQUZvcm1hdCB8fCB0eXBlICE9PSBVbnNpZ25lZEJ5dGVUeXBlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogc1JHQiBlbmNvZGVkIHRleHR1cmVzIGhhdmUgdG8gdXNlIFJHQkFGb3JtYXQgYW5kIFVuc2lnbmVkQnl0ZVR5cGUuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogVW5zdXBwb3J0ZWQgdGV4dHVyZSBjb2xvciBzcGFjZTonLCBjb2xvclNwYWNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBpbWFnZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyggaW1hZ2UgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIGlmIGludHJpbnNpYyBkYXRhIGFyZSBub3QgYXZhaWxhYmxlLCBmYWxsYmFjayB0byB3aWR0aC9oZWlnaHRcblxuXHRcdFx0X2ltYWdlRGltZW5zaW9ucy53aWR0aCA9IGltYWdlLm5hdHVyYWxXaWR0aCB8fCBpbWFnZS53aWR0aDtcblx0XHRcdF9pbWFnZURpbWVuc2lvbnMuaGVpZ2h0ID0gaW1hZ2UubmF0dXJhbEhlaWdodCB8fCBpbWFnZS5oZWlnaHQ7XG5cblx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgVmlkZW9GcmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBWaWRlb0ZyYW1lICkge1xuXG5cdFx0XHRfaW1hZ2VEaW1lbnNpb25zLndpZHRoID0gaW1hZ2UuZGlzcGxheVdpZHRoO1xuXHRcdFx0X2ltYWdlRGltZW5zaW9ucy5oZWlnaHQgPSBpbWFnZS5kaXNwbGF5SGVpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2ltYWdlRGltZW5zaW9ucy53aWR0aCA9IGltYWdlLndpZHRoO1xuXHRcdFx0X2ltYWdlRGltZW5zaW9ucy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gX2ltYWdlRGltZW5zaW9ucztcblxuXHR9XG5cblx0Ly9cblxuXHR0aGlzLmFsbG9jYXRlVGV4dHVyZVVuaXQgPSBhbGxvY2F0ZVRleHR1cmVVbml0O1xuXHR0aGlzLnJlc2V0VGV4dHVyZVVuaXRzID0gcmVzZXRUZXh0dXJlVW5pdHM7XG5cblx0dGhpcy5zZXRUZXh0dXJlMkQgPSBzZXRUZXh0dXJlMkQ7XG5cdHRoaXMuc2V0VGV4dHVyZTJEQXJyYXkgPSBzZXRUZXh0dXJlMkRBcnJheTtcblx0dGhpcy5zZXRUZXh0dXJlM0QgPSBzZXRUZXh0dXJlM0Q7XG5cdHRoaXMuc2V0VGV4dHVyZUN1YmUgPSBzZXRUZXh0dXJlQ3ViZTtcblx0dGhpcy5yZWJpbmRUZXh0dXJlcyA9IHJlYmluZFRleHR1cmVzO1xuXHR0aGlzLnNldHVwUmVuZGVyVGFyZ2V0ID0gc2V0dXBSZW5kZXJUYXJnZXQ7XG5cdHRoaXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwID0gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwO1xuXHR0aGlzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0ID0gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQ7XG5cdHRoaXMuc2V0dXBEZXB0aFJlbmRlcmJ1ZmZlciA9IHNldHVwRGVwdGhSZW5kZXJidWZmZXI7XG5cdHRoaXMuc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUgPSBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZTtcblx0dGhpcy51c2VNdWx0aXNhbXBsZWRSVFQgPSB1c2VNdWx0aXNhbXBsZWRSVFQ7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xVdGlscyggZ2wsIGV4dGVuc2lvbnMgKSB7XG5cblx0ZnVuY3Rpb24gY29udmVydCggcCwgY29sb3JTcGFjZSA9IE5vQ29sb3JTcGFjZSApIHtcblxuXHRcdGxldCBleHRlbnNpb247XG5cblx0XHRjb25zdCB0cmFuc2ZlciA9IENvbG9yTWFuYWdlbWVudC5nZXRUcmFuc2ZlciggY29sb3JTcGFjZSApO1xuXG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEJ5dGVUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0NDQ0NFR5cGUgKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNDtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnQ1OTk5VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9JTlRfNV85XzlfOV9SRVY7XG5cblx0XHRpZiAoIHAgPT09IEJ5dGVUeXBlICkgcmV0dXJuIGdsLkJZVEU7XG5cdFx0aWYgKCBwID09PSBTaG9ydFR5cGUgKSByZXR1cm4gZ2wuU0hPUlQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZFNob3J0VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDtcblx0XHRpZiAoIHAgPT09IEludFR5cGUgKSByZXR1cm4gZ2wuSU5UO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnRUeXBlICkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVDtcblx0XHRpZiAoIHAgPT09IEZsb2F0VHlwZSApIHJldHVybiBnbC5GTE9BVDtcblx0XHRpZiAoIHAgPT09IEhhbGZGbG9hdFR5cGUgKSByZXR1cm4gZ2wuSEFMRl9GTE9BVDtcblxuXHRcdGlmICggcCA9PT0gQWxwaGFGb3JtYXQgKSByZXR1cm4gZ2wuQUxQSEE7XG5cdFx0aWYgKCBwID09PSBSR0JGb3JtYXQgKSByZXR1cm4gZ2wuUkdCO1xuXHRcdGlmICggcCA9PT0gUkdCQUZvcm1hdCApIHJldHVybiBnbC5SR0JBO1xuXHRcdGlmICggcCA9PT0gTHVtaW5hbmNlRm9ybWF0ICkgcmV0dXJuIGdsLkxVTUlOQU5DRTtcblx0XHRpZiAoIHAgPT09IEx1bWluYW5jZUFscGhhRm9ybWF0ICkgcmV0dXJuIGdsLkxVTUlOQU5DRV9BTFBIQTtcblx0XHRpZiAoIHAgPT09IERlcHRoRm9ybWF0ICkgcmV0dXJuIGdsLkRFUFRIX0NPTVBPTkVOVDtcblx0XHRpZiAoIHAgPT09IERlcHRoU3RlbmNpbEZvcm1hdCApIHJldHVybiBnbC5ERVBUSF9TVEVOQ0lMO1xuXG5cdFx0Ly8gV2ViR0wyIGZvcm1hdHMuXG5cblx0XHRpZiAoIHAgPT09IFJlZEZvcm1hdCApIHJldHVybiBnbC5SRUQ7XG5cdFx0aWYgKCBwID09PSBSZWRJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIGdsLlJFRF9JTlRFR0VSO1xuXHRcdGlmICggcCA9PT0gUkdGb3JtYXQgKSByZXR1cm4gZ2wuUkc7XG5cdFx0aWYgKCBwID09PSBSR0ludGVnZXJGb3JtYXQgKSByZXR1cm4gZ2wuUkdfSU5URUdFUjtcblx0XHRpZiAoIHAgPT09IFJHQkFJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIGdsLlJHQkFfSU5URUdFUjtcblxuXHRcdC8vIFMzVENcblxuXHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGlmICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApIHtcblxuXHRcdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2InICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xuXHRcdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XG5cdFx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFBWUlRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gRVRDXG5cblx0XHRpZiAoIHAgPT09IFJHQl9FVEMxX0Zvcm1hdCB8fCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9FVEMyX0VBQ19Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX0VUQzJfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfRVRDMiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQjhfRVRDMjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0VUQzJfRUFDX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQyA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBBU1RDXG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzR4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg0X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNXg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfNng2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4NV9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4Nl9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4OF9LSFIgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg4X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg1X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg1X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg2X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg2X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgKSByZXR1cm4gKCB0cmFuc2ZlciA9PT0gU1JHQlRyYW5zZmVyICkgPyBleHRlbnNpb24uQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMHg4X0tIUiA6IGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfQVNUQ18xMHg4X0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEwX0tIUjtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX0FTVENfMTJ4MTJfRm9ybWF0ICkgcmV0dXJuICggdHJhbnNmZXIgPT09IFNSR0JUcmFuc2ZlciApID8gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfS0hSIDogZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9BU1RDXzEyeDEyX0tIUjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gQlBUQ1xuXG5cdFx0aWYgKCBwID09PSBSR0JBX0JQVENfRm9ybWF0IHx8IHAgPT09IFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQgfHwgcCA9PT0gUkdCX0JQVENfVU5TSUdORURfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9CUFRDX0Zvcm1hdCApIHJldHVybiAoIHRyYW5zZmVyID09PSBTUkdCVHJhbnNmZXIgKSA/IGV4dGVuc2lvbi5DT01QUkVTU0VEX1NSR0JfQUxQSEFfQlBUQ19VTk9STV9FWFQgOiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX0JQVENfVU5PUk1fRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0JQVENfU0lHTkVEX0ZMT0FUX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JfQlBUQ19VTlNJR05FRF9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0JQVENfVU5TSUdORURfRkxPQVRfRVhUO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBSR1RDXG5cblx0XHRpZiAoIHAgPT09IFJFRF9SR1RDMV9Gb3JtYXQgfHwgcCA9PT0gU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQgfHwgcCA9PT0gUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCB8fCBwID09PSBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9yZ3RjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfQlBUQ19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkVEX1JHVEMxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBTSUdORURfUkVEX1JHVEMxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9TSUdORURfUkVEX1JHVEMxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSRURfR1JFRU5fUkdUQzJfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JFRF9HUkVFTl9SR1RDMl9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHJldHVybiBnbC5VTlNJR05FRF9JTlRfMjRfODtcblxuXHRcdC8vIGlmIFwicFwiIGNhbid0IGJlIHJlc29sdmVkLCBhc3N1bWUgdGhlIHVzZXIgZGVmaW5lcyBhIFdlYkdMIGNvbnN0YW50IGFzIGEgc3RyaW5nIChmYWxsYmFjay93b3JrYXJvdW5kIGZvciBwYWNrZWQgUkdCIGZvcm1hdHMpXG5cblx0XHRyZXR1cm4gKCBnbFsgcCBdICE9PSB1bmRlZmluZWQgKSA/IGdsWyBwIF0gOiBudWxsO1xuXG5cdH1cblxuXHRyZXR1cm4geyBjb252ZXJ0OiBjb252ZXJ0IH07XG5cbn1cblxuY29uc3QgX29jY2x1c2lvbl92ZXJ0ZXggPSBgXG52b2lkIG1haW4oKSB7XG5cblx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cbn1gO1xuXG5jb25zdCBfb2NjbHVzaW9uX2ZyYWdtZW50ID0gYFxudW5pZm9ybSBzYW1wbGVyMkRBcnJheSBkZXB0aENvbG9yO1xudW5pZm9ybSBmbG9hdCBkZXB0aFdpZHRoO1xudW5pZm9ybSBmbG9hdCBkZXB0aEhlaWdodDtcblxudm9pZCBtYWluKCkge1xuXG5cdHZlYzIgY29vcmQgPSB2ZWMyKCBnbF9GcmFnQ29vcmQueCAvIGRlcHRoV2lkdGgsIGdsX0ZyYWdDb29yZC55IC8gZGVwdGhIZWlnaHQgKTtcblxuXHRpZiAoIGNvb3JkLnggPj0gMS4wICkge1xuXG5cdFx0Z2xfRnJhZ0RlcHRoID0gdGV4dHVyZSggZGVwdGhDb2xvciwgdmVjMyggY29vcmQueCAtIDEuMCwgY29vcmQueSwgMSApICkucjtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Z2xfRnJhZ0RlcHRoID0gdGV4dHVyZSggZGVwdGhDb2xvciwgdmVjMyggY29vcmQueCwgY29vcmQueSwgMCApICkucjtcblxuXHR9XG5cbn1gO1xuXG4vKipcbiAqIEEgWFIgbW9kdWxlIHRoYXQgbWFuYWdlcyB0aGUgYWNjZXNzIHRvIHRoZSBEZXB0aCBTZW5zaW5nIEFQSS5cbiAqL1xuY2xhc3MgV2ViWFJEZXB0aFNlbnNpbmcge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IGRlcHRoIHNlbnNpbmcgbW9kdWxlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHQvKipcblx0XHQgKiBBIHRleHR1cmUgcmVwcmVzZW50aW5nIHRoZSBkZXB0aCBvZiB0aGUgdXNlcidzIGVudmlyb25tZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9UZXh0dXJlfVxuXHRcdCAqL1xuXHRcdHRoaXMudGV4dHVyZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBIHBsYW5lIG1lc2ggZm9yIHZpc3VhbGl6aW5nIHRoZSBkZXB0aCB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgez9NZXNofVxuXHRcdCAqL1xuXHRcdHRoaXMubWVzaCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZGVwdGggbmVhciB2YWx1ZS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5kZXB0aE5lYXIgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRlcHRoIG5lYXIgZmFyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLmRlcHRoRmFyID0gMDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRzIHRoZSBkZXB0aCBzZW5zaW5nIG1vZHVsZVxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge1hSV2ViR0xEZXB0aEluZm9ybWF0aW9ufSBkZXB0aERhdGEgLSBUaGUgWFIgZGVwdGggZGF0YS5cblx0ICogQHBhcmFtIHtYUlJlbmRlclN0YXRlfSByZW5kZXJTdGF0ZSAtIFRoZSBYUiByZW5kZXIgc3RhdGUuXG5cdCAqL1xuXHRpbml0KCByZW5kZXJlciwgZGVwdGhEYXRhLCByZW5kZXJTdGF0ZSApIHtcblxuXHRcdGlmICggdGhpcy50ZXh0dXJlID09PSBudWxsICkge1xuXG5cdFx0XHRjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoKTtcblxuXHRcdFx0Y29uc3QgdGV4UHJvcHMgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXHRcdFx0dGV4UHJvcHMuX193ZWJnbFRleHR1cmUgPSBkZXB0aERhdGEudGV4dHVyZTtcblxuXHRcdFx0aWYgKCAoIGRlcHRoRGF0YS5kZXB0aE5lYXIgIT09IHJlbmRlclN0YXRlLmRlcHRoTmVhciApIHx8ICggZGVwdGhEYXRhLmRlcHRoRmFyICE9PSByZW5kZXJTdGF0ZS5kZXB0aEZhciApICkge1xuXG5cdFx0XHRcdHRoaXMuZGVwdGhOZWFyID0gZGVwdGhEYXRhLmRlcHRoTmVhcjtcblx0XHRcdFx0dGhpcy5kZXB0aEZhciA9IGRlcHRoRGF0YS5kZXB0aEZhcjtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIHBsYW5lIG1lc2ggdGhhdCB2aXN1YWxpemVzIHRoZSBkZXB0aCB0ZXh0dXJlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0FycmF5Q2FtZXJhfSBjYW1lcmFYUiAtIFRoZSBYUiBjYW1lcmEuXG5cdCAqIEByZXR1cm4gez9NZXNofSBUaGUgcGxhbmUgbWVzaC5cblx0ICovXG5cdGdldE1lc2goIGNhbWVyYVhSICkge1xuXG5cdFx0aWYgKCB0aGlzLnRleHR1cmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggdGhpcy5tZXNoID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdwb3J0ID0gY2FtZXJhWFIuY2FtZXJhc1sgMCBdLnZpZXdwb3J0O1xuXHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogX29jY2x1c2lvbl92ZXJ0ZXgsXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IF9vY2NsdXNpb25fZnJhZ21lbnQsXG5cdFx0XHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0XHRcdGRlcHRoQ29sb3I6IHsgdmFsdWU6IHRoaXMudGV4dHVyZSB9LFxuXHRcdFx0XHRcdFx0ZGVwdGhXaWR0aDogeyB2YWx1ZTogdmlld3BvcnQueiB9LFxuXHRcdFx0XHRcdFx0ZGVwdGhIZWlnaHQ6IHsgdmFsdWU6IHZpZXdwb3J0LncgfVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdHRoaXMubWVzaCA9IG5ldyBNZXNoKCBuZXcgUGxhbmVHZW9tZXRyeSggMjAsIDIwICksIG1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm1lc2g7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIG1vZHVsZVxuXHQgKi9cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLnRleHR1cmUgPSBudWxsO1xuXHRcdHRoaXMubWVzaCA9IG51bGw7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgdGV4dHVyZSByZXByZXNlbnRpbmcgdGhlIGRlcHRoIG9mIHRoZSB1c2VyJ3MgZW52aXJvbm1lbnQuXG5cdCAqXG5cdCAqIEByZXR1cm4gez9UZXh0dXJlfSBUaGUgZGVwdGggdGV4dHVyZS5cblx0ICovXG5cdGdldERlcHRoVGV4dHVyZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLnRleHR1cmU7XG5cblx0fVxuXG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGFuIGFic3RyYWN0aW9uIG9mIHRoZSBXZWJYUiBEZXZpY2UgQVBJIGFuZCBpc1xuICogaW50ZXJuYWxseSB1c2VkIGJ5IHtAbGluayBXZWJHTFJlbmRlcmVyfS4gYFdlYlhSTWFuYWdlcmAgYWxzbyBwcm92aWRlcyBhIHB1YmxpY1xuICogaW50ZXJmYWNlIHRoYXQgYWxsb3dzIHVzZXJzIHRvIGVuYWJsZS9kaXNhYmxlIFhSIGFuZCBwZXJmb3JtIFhSIHJlbGF0ZWRcbiAqIHRhc2tzIGxpa2UgZm9yIGluc3RhbmNlIHJldHJpZXZpbmcgY29udHJvbGxlcnMuXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50RGlzcGF0Y2hlclxuICogQGhpZGVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBXZWJYUk1hbmFnZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFdlYkdMIHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyZXJ9IHJlbmRlcmVyIC0gVGhlIHJlbmRlcmVyLlxuXHQgKiBAcGFyYW0ge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IGdsIC0gVGhlIHJlbmRlcmluZyBjb250ZXh0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHJlbmRlcmVyLCBnbCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHRjb25zdCBzY29wZSA9IHRoaXM7XG5cblx0XHRsZXQgc2Vzc2lvbiA9IG51bGw7XG5cblx0XHRsZXQgZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IDEuMDtcblxuXHRcdGxldCByZWZlcmVuY2VTcGFjZSA9IG51bGw7XG5cdFx0bGV0IHJlZmVyZW5jZVNwYWNlVHlwZSA9ICdsb2NhbC1mbG9vcic7XG5cdFx0Ly8gU2V0IGRlZmF1bHQgZm92ZWF0aW9uIHRvIG1heGltdW0uXG5cdFx0bGV0IGZvdmVhdGlvbiA9IDEuMDtcblx0XHRsZXQgY3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXG5cdFx0bGV0IHBvc2UgPSBudWxsO1xuXHRcdGxldCBnbEJpbmRpbmcgPSBudWxsO1xuXHRcdGxldCBnbFByb2pMYXllciA9IG51bGw7XG5cdFx0bGV0IGdsQmFzZUxheWVyID0gbnVsbDtcblx0XHRsZXQgeHJGcmFtZSA9IG51bGw7XG5cblx0XHRjb25zdCBkZXB0aFNlbnNpbmcgPSBuZXcgV2ViWFJEZXB0aFNlbnNpbmcoKTtcblx0XHRjb25zdCBhdHRyaWJ1dGVzID0gZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuXHRcdGxldCBpbml0aWFsUmVuZGVyVGFyZ2V0ID0gbnVsbDtcblx0XHRsZXQgbmV3UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdGNvbnN0IGNvbnRyb2xsZXJzID0gW107XG5cdFx0Y29uc3QgY29udHJvbGxlcklucHV0U291cmNlcyA9IFtdO1xuXG5cdFx0Y29uc3QgY3VycmVudFNpemUgPSBuZXcgVmVjdG9yMigpO1xuXHRcdGxldCBjdXJyZW50UGl4ZWxSYXRpbyA9IG51bGw7XG5cblx0XHQvL1xuXG5cdFx0Y29uc3QgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdGNhbWVyYUwudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3QgY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdGNhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0Y29uc3QgY2FtZXJhcyA9IFsgY2FtZXJhTCwgY2FtZXJhUiBdO1xuXG5cdFx0Y29uc3QgY2FtZXJhWFIgPSBuZXcgQXJyYXlDYW1lcmEoKTtcblxuXHRcdGxldCBfY3VycmVudERlcHRoTmVhciA9IG51bGw7XG5cdFx0bGV0IF9jdXJyZW50RGVwdGhGYXIgPSBudWxsO1xuXG5cdFx0Ly9cblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgdGhlIG1hbmFnZXIncyBYUiBjYW1lcmEgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5jYW1lcmFBdXRvVXBkYXRlID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgZmxhZyBub3RpZmllcyB0aGUgcmVuZGVyZXIgdG8gYmUgcmVhZHkgZm9yIFhSIHJlbmRlcmluZy4gU2V0IGl0IHRvIGB0cnVlYFxuXHRcdCAqIGlmIHlvdSBhcmUgZ29pbmcgdG8gdXNlIFhSIGluIHlvdXIgYXBwLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFdoZXRoZXIgWFIgcHJlc2VudGF0aW9uIGlzIGFjdGl2ZSBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuaXNQcmVzZW50aW5nID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBgdGFyZ2V0IHJheWAgc3BhY2Ugb2YgdGhlIFhSIGNvbnRyb2xsZXIuXG5cdFx0ICogVXNlIHRoaXMgc3BhY2UgZm9yIHZpc3VhbGl6aW5nIDNEIG9iamVjdHMgdGhhdCBzdXBwb3J0IHRoZSB1c2VyIGluIHBvaW50aW5nXG5cdFx0ICogdGFza3MgbGlrZSBVSSBpbnRlcmFjdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgY29udHJvbGxlci5cblx0XHQgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGB0YXJnZXQgcmF5YCBzcGFjZS5cblx0XHQgKi9cblx0XHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0XHRsZXQgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBpbmRleCBdO1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcigpO1xuXHRcdFx0XHRjb250cm9sbGVyc1sgaW5kZXggXSA9IGNvbnRyb2xsZXI7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNvbnRyb2xsZXIuZ2V0VGFyZ2V0UmF5U3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGEgZ3JvdXAgcmVwcmVzZW50aW5nIHRoZSBgZ3JpcGAgc3BhY2Ugb2YgdGhlIFhSIGNvbnRyb2xsZXIuXG5cdFx0ICogVXNlIHRoaXMgc3BhY2UgZm9yIHZpc3VhbGl6aW5nIDNEIG9iamVjdHMgdGhhdCBzdXBwb3J0IHRoZSB1c2VyIGluIHBvaW50aW5nXG5cdFx0ICogdGFza3MgbGlrZSBVSSBpbnRlcmFjdGlvbi5cblx0XHQgKlxuXHRcdCAqIE5vdGU6IElmIHlvdSB3YW50IHRvIHNob3cgc29tZXRoaW5nIGluIHRoZSB1c2VyJ3MgaGFuZCBBTkQgb2ZmZXIgYVxuXHRcdCAqIHBvaW50aW5nIHJheSBhdCB0aGUgc2FtZSB0aW1lLCB5b3UnbGwgd2FudCB0byBhdHRhY2hlZCB0aGUgaGFuZGhlbGQgb2JqZWN0XG5cdFx0ICogdG8gdGhlIGdyb3VwIHJldHVybmVkIGJ5IGBnZXRDb250cm9sbGVyR3JpcCgpYCBhbmQgdGhlIHJheSB0byB0aGVcblx0XHQgKiBncm91cCByZXR1cm5lZCBieSBgZ2V0Q29udHJvbGxlcigpYC4gVGhlIGlkZWEgaXMgdG8gaGF2ZSB0d29cblx0XHQgKiBkaWZmZXJlbnQgZ3JvdXBzIGluIHR3byBkaWZmZXJlbnQgY29vcmRpbmF0ZSBzcGFjZXMgZm9yIHRoZSBzYW1lIFdlYlhSXG5cdFx0ICogY29udHJvbGxlci5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgY29udHJvbGxlci5cblx0XHQgKiBAcmV0dXJuIHtHcm91cH0gQSBncm91cCByZXByZXNlbnRpbmcgdGhlIGBncmlwYCBzcGFjZS5cblx0XHQgKi9cblx0XHR0aGlzLmdldENvbnRyb2xsZXJHcmlwID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdFx0bGV0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaW5kZXggXTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlciA9IG5ldyBXZWJYUkNvbnRyb2xsZXIoKTtcblx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0gPSBjb250cm9sbGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb250cm9sbGVyLmdldEdyaXBTcGFjZSgpO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYSBncm91cCByZXByZXNlbnRpbmcgdGhlIGBoYW5kYCBzcGFjZSBvZiB0aGUgWFIgY29udHJvbGxlci5cblx0XHQgKiBVc2UgdGhpcyBzcGFjZSBmb3IgdmlzdWFsaXppbmcgM0Qgb2JqZWN0cyB0aGF0IHN1cHBvcnQgdGhlIHVzZXIgaW4gcG9pbnRpbmdcblx0XHQgKiB0YXNrcyBsaWtlIFVJIGludGVyYWN0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gVGhlIGluZGV4IG9mIHRoZSBjb250cm9sbGVyLlxuXHRcdCAqIEByZXR1cm4ge0dyb3VwfSBBIGdyb3VwIHJlcHJlc2VudGluZyB0aGUgYGhhbmRgIHNwYWNlLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0SGFuZCA9IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRcdGxldCBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGluZGV4IF07XG5cblx0XHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgV2ViWFJDb250cm9sbGVyKCk7XG5cdFx0XHRcdGNvbnRyb2xsZXJzWyBpbmRleCBdID0gY29udHJvbGxlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29udHJvbGxlci5nZXRIYW5kU3BhY2UoKTtcblxuXHRcdH07XG5cblx0XHQvL1xuXG5cdFx0ZnVuY3Rpb24gb25TZXNzaW9uRXZlbnQoIGV2ZW50ICkge1xuXG5cdFx0XHRjb25zdCBjb250cm9sbGVySW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGV2ZW50LmlucHV0U291cmNlICk7XG5cblx0XHRcdGlmICggY29udHJvbGxlckluZGV4ID09PSAtMSApIHtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzWyBjb250cm9sbGVySW5kZXggXTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29udHJvbGxlci51cGRhdGUoIGV2ZW50LmlucHV0U291cmNlLCBldmVudC5mcmFtZSwgY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2UgKTtcblx0XHRcdFx0Y29udHJvbGxlci5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IGV2ZW50LnR5cGUsIGRhdGE6IGV2ZW50LmlucHV0U291cmNlIH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25TZXNzaW9uRW5kKCkge1xuXG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZWxlY3QnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2VsZWN0c3RhcnQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2VsZWN0ZW5kJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NxdWVlemUnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZXN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0c2Vzc2lvbi5yZW1vdmVFdmVudExpc3RlbmVyKCAnZW5kJywgb25TZXNzaW9uRW5kICk7XG5cdFx0XHRzZXNzaW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBvbklucHV0U291cmNlc0NoYW5nZSApO1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRcdFx0aWYgKCBpbnB1dFNvdXJjZSA9PT0gbnVsbCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9IG51bGw7XG5cblx0XHRcdFx0Y29udHJvbGxlcnNbIGkgXS5kaXNjb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50RGVwdGhOZWFyID0gbnVsbDtcblx0XHRcdF9jdXJyZW50RGVwdGhGYXIgPSBudWxsO1xuXG5cdFx0XHRkZXB0aFNlbnNpbmcucmVzZXQoKTtcblxuXHRcdFx0Ly8gcmVzdG9yZSBmcmFtZWJ1ZmZlci9yZW5kZXJpbmcgc3RhdGVcblxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBpbml0aWFsUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGdsQmFzZUxheWVyID0gbnVsbDtcblx0XHRcdGdsUHJvakxheWVyID0gbnVsbDtcblx0XHRcdGdsQmluZGluZyA9IG51bGw7XG5cdFx0XHRzZXNzaW9uID0gbnVsbDtcblx0XHRcdG5ld1JlbmRlclRhcmdldCA9IG51bGw7XG5cblx0XHRcdC8vXG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHRcdHNjb3BlLmlzUHJlc2VudGluZyA9IGZhbHNlO1xuXG5cdFx0XHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCBjdXJyZW50UGl4ZWxSYXRpbyApO1xuXHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggY3VycmVudFNpemUud2lkdGgsIGN1cnJlbnRTaXplLmhlaWdodCwgZmFsc2UgKTtcblxuXHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2Vzc2lvbmVuZCcgfSApO1xuXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgZnJhbWVidWZmZXIgc2NhbGUgZmFjdG9yLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBtZXRob2QgY2FuIG5vdCBiZSB1c2VkIGR1cmluZyBhIFhSIHNlc3Npb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgZnJhbWVidWZmZXIgc2NhbGUgZmFjdG9yLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSB2YWx1ZTtcblxuXHRcdFx0aWYgKCBzY29wZS5pc1ByZXNlbnRpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViWFJNYW5hZ2VyOiBDYW5ub3QgY2hhbmdlIGZyYW1lYnVmZmVyIHNjYWxlIHdoaWxlIHByZXNlbnRpbmcuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgcmVmZXJlbmNlIHNwYWNlIHR5cGUuIENhbiBiZSB1c2VkIHRvIGNvbmZpZ3VyZSBhIHNwYXRpYWwgcmVsYXRpb25zaGlwIHdpdGggdGhlIHVzZXIncyBwaHlzaWNhbFxuXHRcdCAqIGVudmlyb25tZW50LiBEZXBlbmRpbmcgb24gaG93IHRoZSB1c2VyIG1vdmVzIGluIDNEIHNwYWNlLCBzZXR0aW5nIGFuIGFwcHJvcHJpYXRlIHJlZmVyZW5jZSBzcGFjZSBjYW5cblx0XHQgKiBpbXByb3ZlIHRyYWNraW5nLiBEZWZhdWx0IGlzIGBsb2NhbC1mbG9vcmAuXG5cdFx0ICpcblx0XHQgKiBUaGlzIG1ldGhvZCBjYW4gbm90IGJlIHVzZWQgZHVyaW5nIGEgWFIgc2Vzc2lvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSByZWZlcmVuY2Ugc3BhY2UgdHlwZS5cblx0XHQgKi9cblx0XHR0aGlzLnNldFJlZmVyZW5jZVNwYWNlVHlwZSA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHJlZmVyZW5jZVNwYWNlVHlwZSA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgcmVmZXJlbmNlIHNwYWNlIHR5cGUgd2hpbGUgcHJlc2VudGluZy4nICk7XG5cblx0XHRcdH1cblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBYUiByZWZlcmVuY2Ugc3BhY2UuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHtYUlJlZmVyZW5jZVNwYWNlfSBUaGUgWFIgcmVmZXJlbmNlIHNwYWNlLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0UmVmZXJlbmNlU3BhY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjdXN0b21SZWZlcmVuY2VTcGFjZSB8fCByZWZlcmVuY2VTcGFjZTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIGEgY3VzdG9tIFhSIHJlZmVyZW5jZSBzcGFjZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7WFJSZWZlcmVuY2VTcGFjZX0gc3BhY2UgLSBUaGUgWFIgcmVmZXJlbmNlIHNwYWNlLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0UmVmZXJlbmNlU3BhY2UgPSBmdW5jdGlvbiAoIHNwYWNlICkge1xuXG5cdFx0XHRjdXN0b21SZWZlcmVuY2VTcGFjZSA9IHNwYWNlO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIGN1cnJlbnQgYmFzZSBsYXllci5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gez8oWFJXZWJHTExheWVyfFhSUHJvamVjdGlvbkxheWVyKX0gVGhlIFhSIGJhc2UgbGF5ZXIuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRCYXNlTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBnbFByb2pMYXllciAhPT0gbnVsbCA/IGdsUHJvakxheWVyIDogZ2xCYXNlTGF5ZXI7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCBYUiBiaW5kaW5nLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7P1hSV2ViR0xCaW5kaW5nfSBUaGUgWFIgYmluZGluZy5cblx0XHQgKi9cblx0XHR0aGlzLmdldEJpbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBnbEJpbmRpbmc7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCBYUiBmcmFtZS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gez9YUkZyYW1lfSBUaGUgWFIgZnJhbWUuIFJldHVybnMgYG51bGxgIHdoZW4gdXNlZCBvdXRzaWRlIGEgWFIgc2Vzc2lvbi5cblx0XHQgKi9cblx0XHR0aGlzLmdldEZyYW1lID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4geHJGcmFtZTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHs/WFJTZXNzaW9ufSBUaGUgWFIgc2Vzc2lvbi4gUmV0dXJucyBgbnVsbGAgd2hlbiB1c2VkIG91dHNpZGUgYSBYUiBzZXNzaW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNlc3Npb247XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQWZ0ZXIgYSBYUiBzZXNzaW9uIGhhcyBiZWVuIHJlcXVlc3RlZCB1c3VhbGx5IHdpdGggb25lIG9mIHRoZSBgKkJ1dHRvbmAgbW9kdWxlcywgaXRcblx0XHQgKiBpcyBpbmplY3RlZCBpbnRvIHRoZSByZW5kZXJlciB3aXRoIHRoaXMgbWV0aG9kLiBUaGlzIG1ldGhvZCB0cmlnZ2VycyB0aGUgc3RhcnQgb2Zcblx0XHQgKiB0aGUgYWN0dWFsIFhSIHJlbmRlcmluZy5cblx0XHQgKlxuXHRcdCAqIEBhc3luY1xuXHRcdCAqIEBwYXJhbSB7WFJTZXNzaW9ufSB2YWx1ZSAtIFRoZSBYUiBzZXNzaW9uIHRvIHNldC5cblx0XHQgKiBAcmV0dXJuIHtQcm9taXNlfSBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBzZXNzaW9uIGhhcyBiZWVuIHNldC5cblx0XHQgKi9cblx0XHR0aGlzLnNldFNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRzZXNzaW9uID0gdmFsdWU7XG5cblx0XHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpbml0aWFsUmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0c3RhcnQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZXN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc3F1ZWV6ZWVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApO1xuXHRcdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dHNvdXJjZXNjaGFuZ2UnLCBvbklucHV0U291cmNlc0NoYW5nZSApO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlcy54ckNvbXBhdGlibGUgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRhd2FpdCBnbC5tYWtlWFJDb21wYXRpYmxlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN1cnJlbnRQaXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXHRcdFx0XHRyZW5kZXJlci5nZXRTaXplKCBjdXJyZW50U2l6ZSApO1xuXG5cdFx0XHRcdC8vIENoZWNrIHRoYXQgdGhlIGJyb3dzZXIgaW1wbGVtZW50cyB0aGUgbmVjZXNzYXJ5IEFQSXMgdG8gdXNlIGFuXG5cdFx0XHRcdC8vIFhSUHJvamVjdGlvbkxheWVyIHJhdGhlciB0aGFuIGFuIFhSV2ViR0xMYXllclxuXHRcdFx0XHRjb25zdCB1c2VMYXllcnMgPSB0eXBlb2YgWFJXZWJHTEJpbmRpbmcgIT09ICd1bmRlZmluZWQnICYmICdjcmVhdGVQcm9qZWN0aW9uTGF5ZXInIGluIFhSV2ViR0xCaW5kaW5nLnByb3RvdHlwZTtcblxuXHRcdFx0XHRpZiAoICEgdXNlTGF5ZXJzICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgbGF5ZXJJbml0ID0ge1xuXHRcdFx0XHRcdFx0YW50aWFsaWFzOiBhdHRyaWJ1dGVzLmFudGlhbGlhcyxcblx0XHRcdFx0XHRcdGFscGhhOiB0cnVlLFxuXHRcdFx0XHRcdFx0ZGVwdGg6IGF0dHJpYnV0ZXMuZGVwdGgsXG5cdFx0XHRcdFx0XHRzdGVuY2lsOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGdsQmFzZUxheWVyID0gbmV3IFhSV2ViR0xMYXllciggc2Vzc2lvbiwgZ2wsIGxheWVySW5pdCApO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggeyBiYXNlTGF5ZXI6IGdsQmFzZUxheWVyIH0gKTtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oIDEgKTtcblx0XHRcdFx0XHRyZW5kZXJlci5zZXRTaXplKCBnbEJhc2VMYXllci5mcmFtZWJ1ZmZlcldpZHRoLCBnbEJhc2VMYXllci5mcmFtZWJ1ZmZlckhlaWdodCwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdG5ld1JlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldChcblx0XHRcdFx0XHRcdGdsQmFzZUxheWVyLmZyYW1lYnVmZmVyV2lkdGgsXG5cdFx0XHRcdFx0XHRnbEJhc2VMYXllci5mcmFtZWJ1ZmZlckhlaWdodCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0XHRcdFx0XHR0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdFx0XHRjb2xvclNwYWNlOiByZW5kZXJlci5vdXRwdXRDb2xvclNwYWNlLFxuXHRcdFx0XHRcdFx0XHRzdGVuY2lsQnVmZmVyOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRcdHJlc29sdmVEZXB0aEJ1ZmZlcjogKCBnbEJhc2VMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSxcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZVN0ZW5jaWxCdWZmZXI6ICggZ2xCYXNlTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlIClcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGxldCBkZXB0aEZvcm1hdCA9IG51bGw7XG5cdFx0XHRcdFx0bGV0IGRlcHRoVHlwZSA9IG51bGw7XG5cdFx0XHRcdFx0bGV0IGdsRGVwdGhGb3JtYXQgPSBudWxsO1xuXG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGVzLmRlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRnbERlcHRoRm9ybWF0ID0gYXR0cmlidXRlcy5zdGVuY2lsID8gZ2wuREVQVEgyNF9TVEVOQ0lMOCA6IGdsLkRFUFRIX0NPTVBPTkVOVDI0O1xuXHRcdFx0XHRcdFx0ZGVwdGhGb3JtYXQgPSBhdHRyaWJ1dGVzLnN0ZW5jaWwgPyBEZXB0aFN0ZW5jaWxGb3JtYXQgOiBEZXB0aEZvcm1hdDtcblx0XHRcdFx0XHRcdGRlcHRoVHlwZSA9IGF0dHJpYnV0ZXMuc3RlbmNpbCA/IFVuc2lnbmVkSW50MjQ4VHlwZSA6IFVuc2lnbmVkSW50VHlwZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnN0IHByb2plY3Rpb25sYXllckluaXQgPSB7XG5cdFx0XHRcdFx0XHRjb2xvckZvcm1hdDogZ2wuUkdCQTgsXG5cdFx0XHRcdFx0XHRkZXB0aEZvcm1hdDogZ2xEZXB0aEZvcm1hdCxcblx0XHRcdFx0XHRcdHNjYWxlRmFjdG9yOiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGdsQmluZGluZyA9IG5ldyBYUldlYkdMQmluZGluZyggc2Vzc2lvbiwgZ2wgKTtcblxuXHRcdFx0XHRcdGdsUHJvakxheWVyID0gZ2xCaW5kaW5nLmNyZWF0ZVByb2plY3Rpb25MYXllciggcHJvamVjdGlvbmxheWVySW5pdCApO1xuXG5cdFx0XHRcdFx0c2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSggeyBsYXllcnM6IFsgZ2xQcm9qTGF5ZXIgXSB9ICk7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRQaXhlbFJhdGlvKCAxICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggZ2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLCBnbFByb2pMYXllci50ZXh0dXJlSGVpZ2h0LCBmYWxzZSApO1xuXG5cdFx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KFxuXHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIudGV4dHVyZVdpZHRoLFxuXHRcdFx0XHRcdFx0Z2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Zm9ybWF0OiBSR0JBRm9ybWF0LFxuXHRcdFx0XHRcdFx0XHR0eXBlOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdFx0XHRkZXB0aFRleHR1cmU6IG5ldyBEZXB0aFRleHR1cmUoIGdsUHJvakxheWVyLnRleHR1cmVXaWR0aCwgZ2xQcm9qTGF5ZXIudGV4dHVyZUhlaWdodCwgZGVwdGhUeXBlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBkZXB0aEZvcm1hdCApLFxuXHRcdFx0XHRcdFx0XHRzdGVuY2lsQnVmZmVyOiBhdHRyaWJ1dGVzLnN0ZW5jaWwsXG5cdFx0XHRcdFx0XHRcdGNvbG9yU3BhY2U6IHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2UsXG5cdFx0XHRcdFx0XHRcdHNhbXBsZXM6IGF0dHJpYnV0ZXMuYW50aWFsaWFzID8gNCA6IDAsXG5cdFx0XHRcdFx0XHRcdHJlc29sdmVEZXB0aEJ1ZmZlcjogKCBnbFByb2pMYXllci5pZ25vcmVEZXB0aFZhbHVlcyA9PT0gZmFsc2UgKSxcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZVN0ZW5jaWxCdWZmZXI6ICggZ2xQcm9qTGF5ZXIuaWdub3JlRGVwdGhWYWx1ZXMgPT09IGZhbHNlIClcblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmV3UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPSB0cnVlOyAvLyBUT0RPIFJlbW92ZSB0aGlzIHdoZW4gcG9zc2libGUsIHNlZSAjMjMyNzhcblxuXHRcdFx0XHR0aGlzLnNldEZvdmVhdGlvbiggZm92ZWF0aW9uICk7XG5cblx0XHRcdFx0Y3VzdG9tUmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXHRcdFx0XHRyZWZlcmVuY2VTcGFjZSA9IGF3YWl0IHNlc3Npb24ucmVxdWVzdFJlZmVyZW5jZVNwYWNlKCByZWZlcmVuY2VTcGFjZVR5cGUgKTtcblxuXHRcdFx0XHRhbmltYXRpb24uc2V0Q29udGV4dCggc2Vzc2lvbiApO1xuXHRcdFx0XHRhbmltYXRpb24uc3RhcnQoKTtcblxuXHRcdFx0XHRzY29wZS5pc1ByZXNlbnRpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25zdGFydCcgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgZW52aXJvbm1lbnQgYmxlbmQgbW9kZSBmcm9tIHRoZSBjdXJyZW50IFhSIHNlc3Npb24uXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHsnb3BhcXVlJ3wnYWRkaXRpdmUnfCdhbHBoYS1ibGVuZCd8dW5kZWZpbmVkfSBUaGUgZW52aXJvbm1lbnQgYmxlbmQgbW9kZS4gUmV0dXJucyBgdW5kZWZpbmVkYCB3aGVuIHVzZWQgb3V0c2lkZSBvZiBhIFhSIHNlc3Npb24uXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRFbnZpcm9ubWVudEJsZW5kTW9kZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBzZXNzaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBzZXNzaW9uLmVudmlyb25tZW50QmxlbmRNb2RlO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY3VycmVudCBkZXB0aCB0ZXh0dXJlIGNvbXB1dGVkIHZpYSBkZXB0aCBzZW5zaW5nLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7P1RleHR1cmV9IFRoZSBkZXB0aCB0ZXh0dXJlLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0RGVwdGhUZXh0dXJlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gZGVwdGhTZW5zaW5nLmdldERlcHRoVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIG9uSW5wdXRTb3VyY2VzQ2hhbmdlKCBldmVudCApIHtcblxuXHRcdFx0Ly8gTm90aWZ5IGRpc2Nvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5yZW1vdmVkLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbnB1dFNvdXJjZSA9IGV2ZW50LnJlbW92ZWRbIGkgXTtcblx0XHRcdFx0Y29uc3QgaW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA+PSAwICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlc1sgaW5kZXggXSA9IG51bGw7XG5cdFx0XHRcdFx0Y29udHJvbGxlcnNbIGluZGV4IF0uZGlzY29ubmVjdCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTm90aWZ5IGNvbm5lY3RlZFxuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBldmVudC5hZGRlZC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBldmVudC5hZGRlZFsgaSBdO1xuXG5cdFx0XHRcdGxldCBjb250cm9sbGVySW5kZXggPSBjb250cm9sbGVySW5wdXRTb3VyY2VzLmluZGV4T2YoIGlucHV0U291cmNlICk7XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVySW5kZXggPT09IC0xICkge1xuXG5cdFx0XHRcdFx0Ly8gQXNzaWduIGlucHV0IHNvdXJjZSBhIGNvbnRyb2xsZXIgdGhhdCBjdXJyZW50bHkgaGFzIG5vIGlucHV0IHNvdXJjZVxuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGkgPj0gY29udHJvbGxlcklucHV0U291cmNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29udHJvbGxlcklucHV0U291cmNlcy5wdXNoKCBpbnB1dFNvdXJjZSApO1xuXHRcdFx0XHRcdFx0XHRjb250cm9sbGVySW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udHJvbGxlcklucHV0U291cmNlc1sgaSBdID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnRyb2xsZXJJbnB1dFNvdXJjZXNbIGkgXSA9IGlucHV0U291cmNlO1xuXHRcdFx0XHRcdFx0XHRjb250cm9sbGVySW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSWYgYWxsIGNvbnRyb2xsZXJzIGRvIGN1cnJlbnRseSByZWNlaXZlIGlucHV0IHdlIGlnbm9yZSBuZXcgb25lc1xuXG5cdFx0XHRcdFx0aWYgKCBjb250cm9sbGVySW5kZXggPT09IC0xICkgYnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgY29udHJvbGxlckluZGV4IF07XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci5jb25uZWN0KCBpbnB1dFNvdXJjZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGNvbnN0IGNhbWVyYUxQb3MgPSBuZXcgVmVjdG9yMygpO1xuXHRcdGNvbnN0IGNhbWVyYVJQb3MgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0LyoqXG5cdFx0ICogQXNzdW1lcyAyIGNhbWVyYXMgdGhhdCBhcmUgcGFyYWxsZWwgYW5kIHNoYXJlIGFuIFgtYXhpcywgYW5kIHRoYXRcblx0XHQgKiB0aGUgY2FtZXJhcycgcHJvamVjdGlvbiBhbmQgd29ybGQgbWF0cmljZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0LlxuXHRcdCAqIEFuZCB0aGF0IG5lYXIgYW5kIGZhciBwbGFuZXMgYXJlIGlkZW50aWNhbCBmb3IgYm90aCBjYW1lcmFzLlxuXHRcdCAqIFZpc3VhbGl6YXRpb24gb2YgdGhpcyB0ZWNobmlxdWU6IGh0dHBzOi8vY29tcHV0ZXJncmFwaGljcy5zdGFja2V4Y2hhbmdlLmNvbS9hLzQ3NjVcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7QXJyYXlDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEgdG8gdXBkYXRlLlxuXHRcdCAqIEBwYXJhbSB7UGVyc3BlY3RpdmVDYW1lcmF9IGNhbWVyYUwgLSBUaGUgbGVmdCBjYW1lcmEuXG5cdFx0ICogQHBhcmFtIHtQZXJzcGVjdGl2ZUNhbWVyYX0gY2FtZXJhUiAtIFRoZSByaWdodCBjYW1lcmEuXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbiggY2FtZXJhLCBjYW1lcmFMLCBjYW1lcmFSICkge1xuXG5cdFx0XHRjYW1lcmFMUG9zLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhTC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0Y2FtZXJhUlBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYVIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0Y29uc3QgaXBkID0gY2FtZXJhTFBvcy5kaXN0YW5jZVRvKCBjYW1lcmFSUG9zICk7XG5cblx0XHRcdGNvbnN0IHByb2pMID0gY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzO1xuXHRcdFx0Y29uc3QgcHJvalIgPSBjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7XG5cblx0XHRcdC8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmRcblx0XHRcdC8vIG1vc3QgbGlrZWx5IGlkZW50aWNhbCB0b3AgYW5kIGJvdHRvbSBmcnVzdHVtIGV4dGVudHMuXG5cdFx0XHQvLyBVc2UgdGhlIGxlZnQgY2FtZXJhIGZvciB0aGVzZSB2YWx1ZXMuXG5cdFx0XHRjb25zdCBuZWFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdIC0gMSApO1xuXHRcdFx0Y29uc3QgZmFyID0gcHJvakxbIDE0IF0gLyAoIHByb2pMWyAxMCBdICsgMSApO1xuXHRcdFx0Y29uc3QgdG9wRm92ID0gKCBwcm9qTFsgOSBdICsgMSApIC8gcHJvakxbIDUgXTtcblx0XHRcdGNvbnN0IGJvdHRvbUZvdiA9ICggcHJvakxbIDkgXSAtIDEgKSAvIHByb2pMWyA1IF07XG5cblx0XHRcdGNvbnN0IGxlZnRGb3YgPSAoIHByb2pMWyA4IF0gLSAxICkgLyBwcm9qTFsgMCBdO1xuXHRcdFx0Y29uc3QgcmlnaHRGb3YgPSAoIHByb2pSWyA4IF0gKyAxICkgLyBwcm9qUlsgMCBdO1xuXHRcdFx0Y29uc3QgbGVmdCA9IG5lYXIgKiBsZWZ0Rm92O1xuXHRcdFx0Y29uc3QgcmlnaHQgPSBuZWFyICogcmlnaHRGb3Y7XG5cblx0XHRcdC8vIENhbGN1bGF0ZSB0aGUgbmV3IGNhbWVyYSdzIHBvc2l0aW9uIG9mZnNldCBmcm9tIHRoZVxuXHRcdFx0Ly8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC5cblx0XHRcdGNvbnN0IHpPZmZzZXQgPSBpcGQgLyAoIC0gbGVmdEZvdiArIHJpZ2h0Rm92ICk7XG5cdFx0XHRjb25zdCB4T2Zmc2V0ID0gek9mZnNldCAqIC0gbGVmdEZvdjtcblxuXHRcdFx0Ly8gVE9ETzogQmV0dGVyIHdheSB0byBhcHBseSB0aGlzIG9mZnNldD9cblx0XHRcdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0XHRcdGNhbWVyYS50cmFuc2xhdGVYKCB4T2Zmc2V0ICk7XG5cdFx0XHRjYW1lcmEudHJhbnNsYXRlWiggek9mZnNldCApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlIHByb2plY3Rpb24gdXNlcyBhbiBpbmZpbml0ZSBmYXIgcGxhbmUuXG5cdFx0XHRpZiAoIHByb2pMWyAxMCBdID09PSAtMSApIHtcblxuXHRcdFx0XHQvLyBVc2UgdGhlIHByb2plY3Rpb24gbWF0cml4IGZyb20gdGhlIGxlZnQgZXllLlxuXHRcdFx0XHQvLyBUaGUgY2FtZXJhIG9mZnNldCBpcyBzdWZmaWNpZW50IHRvIGluY2x1ZGUgdGhlIHZpZXcgdm9sdW1lc1xuXHRcdFx0XHQvLyBvZiBib3RoIGV5ZXMgKGFzc3VtaW5nIHN5bW1ldHJpYyBwcm9qZWN0aW9ucykuXG5cdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIHVuaW9uIG9mIHRoZSBmcnVzdHVtIHZhbHVlcyBvZiB0aGUgY2FtZXJhcyBhbmQgc2NhbGVcblx0XHRcdFx0Ly8gdGhlIHZhbHVlcyBzbyB0aGF0IHRoZSBuZWFyIHBsYW5lJ3MgcG9zaXRpb24gZG9lcyBub3QgY2hhbmdlIGluIHdvcmxkIHNwYWNlLFxuXHRcdFx0XHQvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS5cblx0XHRcdFx0Y29uc3QgbmVhcjIgPSBuZWFyICsgek9mZnNldDtcblx0XHRcdFx0Y29uc3QgZmFyMiA9IGZhciArIHpPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IHJpZ2h0MiA9IHJpZ2h0ICsgKCBpcGQgLSB4T2Zmc2V0ICk7XG5cdFx0XHRcdGNvbnN0IHRvcDIgPSB0b3BGb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cdFx0XHRcdGNvbnN0IGJvdHRvbTIgPSBib3R0b21Gb3YgKiBmYXIgLyBmYXIyICogbmVhcjI7XG5cblx0XHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXgubWFrZVBlcnNwZWN0aXZlKCBsZWZ0MiwgcmlnaHQyLCB0b3AyLCBib3R0b20yLCBuZWFyMiwgZmFyMiApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggY2FtZXJhLnByb2plY3Rpb25NYXRyaXggKS5pbnZlcnQoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHtcblxuXHRcdFx0aWYgKCBwYXJlbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggcGFyZW50Lm1hdHJpeFdvcmxkLCBjYW1lcmEubWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5pbnZlcnQoKTtcblxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZXMgdGhlIHN0YXRlIG9mIHRoZSBYUiBjYW1lcmEuIFVzZSB0aGlzIG1ldGhvZCBvbiBhcHAgbGV2ZWwgaWYgeW91XG5cdFx0ICogc2V0IGNhbWVyYUF1dG9VcGRhdGVgIHRvIGBmYWxzZWAuIFRoZSBtZXRob2QgcmVxdWlyZXMgdGhlIG5vbi1YUlxuXHRcdCAqIGNhbWVyYSBvZiB0aGUgc2NlbmUgYXMgYSBwYXJhbWV0ZXIuIFRoZSBwYXNzZWQgaW4gY2FtZXJhJ3MgdHJhbnNmb3JtYXRpb25cblx0XHQgKiBpcyBhdXRvbWF0aWNhbGx5IGFkanVzdGVkIHRvIHRoZSBwb3NpdGlvbiBvZiB0aGUgWFIgY2FtZXJhIHdoZW4gY2FsbGluZ1xuXHRcdCAqIHRoaXMgbWV0aG9kLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEuXG5cdFx0ICovXG5cdFx0dGhpcy51cGRhdGVDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdFx0aWYgKCBzZXNzaW9uID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRsZXQgZGVwdGhOZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRsZXQgZGVwdGhGYXIgPSBjYW1lcmEuZmFyO1xuXG5cdFx0XHRpZiAoIGRlcHRoU2Vuc2luZy50ZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggZGVwdGhTZW5zaW5nLmRlcHRoTmVhciA+IDAgKSBkZXB0aE5lYXIgPSBkZXB0aFNlbnNpbmcuZGVwdGhOZWFyO1xuXHRcdFx0XHRpZiAoIGRlcHRoU2Vuc2luZy5kZXB0aEZhciA+IDAgKSBkZXB0aEZhciA9IGRlcHRoU2Vuc2luZy5kZXB0aEZhcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmFYUi5uZWFyID0gY2FtZXJhUi5uZWFyID0gY2FtZXJhTC5uZWFyID0gZGVwdGhOZWFyO1xuXHRcdFx0Y2FtZXJhWFIuZmFyID0gY2FtZXJhUi5mYXIgPSBjYW1lcmFMLmZhciA9IGRlcHRoRmFyO1xuXG5cdFx0XHRpZiAoIF9jdXJyZW50RGVwdGhOZWFyICE9PSBjYW1lcmFYUi5uZWFyIHx8IF9jdXJyZW50RGVwdGhGYXIgIT09IGNhbWVyYVhSLmZhciApIHtcblxuXHRcdFx0XHQvLyBOb3RlIHRoYXQgdGhlIG5ldyByZW5kZXJTdGF0ZSB3b24ndCBhcHBseSB1bnRpbCB0aGUgbmV4dCBmcmFtZS4gU2VlICMxODMyMFxuXG5cdFx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHtcblx0XHRcdFx0XHRkZXB0aE5lYXI6IGNhbWVyYVhSLm5lYXIsXG5cdFx0XHRcdFx0ZGVwdGhGYXI6IGNhbWVyYVhSLmZhclxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0X2N1cnJlbnREZXB0aE5lYXIgPSBjYW1lcmFYUi5uZWFyO1xuXHRcdFx0XHRfY3VycmVudERlcHRoRmFyID0gY2FtZXJhWFIuZmFyO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNhbWVyYUwubGF5ZXJzLm1hc2sgPSBjYW1lcmEubGF5ZXJzLm1hc2sgfCAwYjAxMDtcblx0XHRcdGNhbWVyYVIubGF5ZXJzLm1hc2sgPSBjYW1lcmEubGF5ZXJzLm1hc2sgfCAwYjEwMDtcblx0XHRcdGNhbWVyYVhSLmxheWVycy5tYXNrID0gY2FtZXJhTC5sYXllcnMubWFzayB8IGNhbWVyYVIubGF5ZXJzLm1hc2s7XG5cblx0XHRcdGNvbnN0IHBhcmVudCA9IGNhbWVyYS5wYXJlbnQ7XG5cdFx0XHRjb25zdCBjYW1lcmFzID0gY2FtZXJhWFIuY2FtZXJhcztcblxuXHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFYUiwgcGFyZW50ICk7XG5cblx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHVwZGF0ZUNhbWVyYSggY2FtZXJhc1sgaSBdLCBwYXJlbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB1cGRhdGUgcHJvamVjdGlvbiBtYXRyaXggZm9yIHByb3BlciB2aWV3IGZydXN0dW0gY3VsbGluZ1xuXG5cdFx0XHRpZiAoIGNhbWVyYXMubGVuZ3RoID09PSAyICkge1xuXG5cdFx0XHRcdHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYVhSLCBjYW1lcmFMLCBjYW1lcmFSICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gYXNzdW1lIHNpbmdsZSBjYW1lcmEgc2V0dXAgKEFSKVxuXG5cdFx0XHRcdGNhbWVyYVhSLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gdXBkYXRlIHVzZXIgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cblxuXHRcdFx0dXBkYXRlVXNlckNhbWVyYSggY2FtZXJhLCBjYW1lcmFYUiwgcGFyZW50ICk7XG5cblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlVXNlckNhbWVyYSggY2FtZXJhLCBjYW1lcmFYUiwgcGFyZW50ICkge1xuXG5cdFx0XHRpZiAoIHBhcmVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRjYW1lcmEubWF0cml4LmNvcHkoIGNhbWVyYVhSLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5jb3B5KCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5pbnZlcnQoKTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5tdWx0aXBseSggY2FtZXJhWFIubWF0cml4V29ybGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW1lcmEubWF0cml4LmRlY29tcG9zZSggY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlICk7XG5cdFx0XHRjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXguY29weSggY2FtZXJhWFIucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYVhSLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICk7XG5cblx0XHRcdGlmICggY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0Y2FtZXJhLmZvdiA9IFJBRDJERUcgKiAyICogTWF0aC5hdGFuKCAxIC8gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSApO1xuXHRcdFx0XHRjYW1lcmEuem9vbSA9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEFycmF5Q2FtZXJhfSB3aGljaCByZXByZXNlbnRzIHRoZSBYUiBjYW1lcmFcblx0XHQgKiBvZiB0aGUgYWN0aXZlIFhSIHNlc3Npb24uIEZvciBlYWNoIHZpZXcgaXQgaG9sZHMgYSBzZXBhcmF0ZSBjYW1lcmEgb2JqZWN0LlxuXHRcdCAqXG5cdFx0ICogVGhlIGNhbWVyYSdzIGBmb3ZgIGlzIGN1cnJlbnRseSBub3QgdXNlZCBhbmQgZG9lcyBub3QgcmVmbGVjdCB0aGUgZm92IG9mXG5cdFx0ICogdGhlIFhSIGNhbWVyYS4gSWYgeW91IG5lZWQgdGhlIGZvdiBvbiBhcHAgbGV2ZWwsIHlvdSBoYXZlIHRvIGNvbXB1dGUgaW5cblx0XHQgKiBtYW51YWxseSBmcm9tIHRoZSBYUiBjYW1lcmEncyBwcm9qZWN0aW9uIG1hdHJpY2VzLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7QXJyYXlDYW1lcmF9IFRoZSBYUiBjYW1lcmEuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBjYW1lcmFYUjtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBhbW91bnQgb2YgZm92ZWF0aW9uIHVzZWQgYnkgdGhlIFhSIGNvbXBvc2l0b3IgZm9yIHRoZSBwcm9qZWN0aW9uIGxheWVyLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgYW1vdW50IG9mIGZvdmVhdGlvbi5cblx0XHQgKi9cblx0XHR0aGlzLmdldEZvdmVhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0aWYgKCBnbFByb2pMYXllciA9PT0gbnVsbCAmJiBnbEJhc2VMYXllciA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmb3ZlYXRpb247XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgZm92ZWF0aW9uIHZhbHVlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIGBbMCwxXWAgd2hlcmUgYDBgIG1lYW5zIG5vIGZvdmVhdGlvbiAoZnVsbCByZXNvbHV0aW9uKVxuXHRcdCAqIGFuZCBgMWAgbWVhbnMgbWF4aW11bSBmb3ZlYXRpb24gKHRoZSBlZGdlcyByZW5kZXIgYXQgbG93ZXIgcmVzb2x1dGlvbikuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRGb3ZlYXRpb24gPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHQvLyAwID0gbm8gZm92ZWF0aW9uID0gZnVsbCByZXNvbHV0aW9uXG5cdFx0XHQvLyAxID0gbWF4aW11bSBmb3ZlYXRpb24gPSB0aGUgZWRnZXMgcmVuZGVyIGF0IGxvd2VyIHJlc29sdXRpb25cblxuXHRcdFx0Zm92ZWF0aW9uID0gdmFsdWU7XG5cblx0XHRcdGlmICggZ2xQcm9qTGF5ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Z2xQcm9qTGF5ZXIuZml4ZWRGb3ZlYXRpb24gPSB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICYmIGdsQmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Z2xCYXNlTGF5ZXIuZml4ZWRGb3ZlYXRpb24gPSB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYHRydWVgIGlmIGRlcHRoIHNlbnNpbmcgaXMgc3VwcG9ydGVkLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBkZXB0aCBzZW5zaW5nIGlzIHN1cHBvcnRlZCBvciBub3QuXG5cdFx0ICovXG5cdFx0dGhpcy5oYXNEZXB0aFNlbnNpbmcgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBkZXB0aFNlbnNpbmcudGV4dHVyZSAhPT0gbnVsbDtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBkZXB0aCBzZW5zaW5nIG1lc2guXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHtNZXNofSBUaGUgZGVwdGggc2Vuc2luZyBtZXNoLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0RGVwdGhTZW5zaW5nTWVzaCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGRlcHRoU2Vuc2luZy5nZXRNZXNoKCBjYW1lcmFYUiApO1xuXG5cdFx0fTtcblxuXHRcdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0XHRsZXQgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcblxuXHRcdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0XHRwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSggY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2UgKTtcblx0XHRcdHhyRnJhbWUgPSBmcmFtZTtcblxuXHRcdFx0aWYgKCBwb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHZpZXdzID0gcG9zZS52aWV3cztcblxuXHRcdFx0XHRpZiAoIGdsQmFzZUxheWVyICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0RnJhbWVidWZmZXIoIG5ld1JlbmRlclRhcmdldCwgZ2xCYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG5ld1JlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgY2FtZXJhWFJOZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGlmIGl0J3MgbmVjZXNzYXJ5IHRvIHJlYnVpbGQgY2FtZXJhWFIncyBjYW1lcmEgbGlzdFxuXG5cdFx0XHRcdGlmICggdmlld3MubGVuZ3RoICE9PSBjYW1lcmFYUi5jYW1lcmFzLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdGNhbWVyYVhSLmNhbWVyYXMubGVuZ3RoID0gMDtcblx0XHRcdFx0XHRjYW1lcmFYUk5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmlldyA9IHZpZXdzWyBpIF07XG5cblx0XHRcdFx0XHRsZXQgdmlld3BvcnQgPSBudWxsO1xuXG5cdFx0XHRcdFx0aWYgKCBnbEJhc2VMYXllciAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0dmlld3BvcnQgPSBnbEJhc2VMYXllci5nZXRWaWV3cG9ydCggdmlldyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgZ2xTdWJJbWFnZSA9IGdsQmluZGluZy5nZXRWaWV3U3ViSW1hZ2UoIGdsUHJvakxheWVyLCB2aWV3ICk7XG5cdFx0XHRcdFx0XHR2aWV3cG9ydCA9IGdsU3ViSW1hZ2Uudmlld3BvcnQ7XG5cblx0XHRcdFx0XHRcdC8vIEZvciBzaWRlLWJ5LXNpZGUgcHJvamVjdGlvbiwgd2Ugb25seSBwcm9kdWNlIGEgc2luZ2xlIHRleHR1cmUgZm9yIGJvdGggZXllcy5cblx0XHRcdFx0XHRcdGlmICggaSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXRUZXh0dXJlcyhcblx0XHRcdFx0XHRcdFx0XHRuZXdSZW5kZXJUYXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0Z2xTdWJJbWFnZS5jb2xvclRleHR1cmUsXG5cdFx0XHRcdFx0XHRcdFx0Z2xTdWJJbWFnZS5kZXB0aFN0ZW5jaWxUZXh0dXJlICk7XG5cblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBuZXdSZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGV0IGNhbWVyYSA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggY2FtZXJhID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRcdFx0XHRcdFx0Y2FtZXJhLmxheWVycy5lbmFibGUoIGkgKTtcblx0XHRcdFx0XHRcdGNhbWVyYS52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cdFx0XHRcdFx0XHRjYW1lcmFzWyBpIF0gPSBjYW1lcmE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjYW1lcmEubWF0cml4LmZyb21BcnJheSggdmlldy50cmFuc2Zvcm0ubWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5kZWNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdFx0XHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheSggdmlldy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0XHRcdFx0Y2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICkuaW52ZXJ0KCk7XG5cdFx0XHRcdFx0Y2FtZXJhLnZpZXdwb3J0LnNldCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCApO1xuXG5cdFx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRjYW1lcmFYUi5tYXRyaXguY29weSggY2FtZXJhLm1hdHJpeCApO1xuXHRcdFx0XHRcdFx0Y2FtZXJhWFIubWF0cml4LmRlY29tcG9zZSggY2FtZXJhWFIucG9zaXRpb24sIGNhbWVyYVhSLnF1YXRlcm5pb24sIGNhbWVyYVhSLnNjYWxlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNhbWVyYVhSTmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRcdGNhbWVyYVhSLmNhbWVyYXMucHVzaCggY2FtZXJhICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vXG5cblx0XHRcdFx0Y29uc3QgZW5hYmxlZEZlYXR1cmVzID0gc2Vzc2lvbi5lbmFibGVkRmVhdHVyZXM7XG5cdFx0XHRcdGNvbnN0IGdwdURlcHRoU2Vuc2luZ0VuYWJsZWQgPSBlbmFibGVkRmVhdHVyZXMgJiZcblx0XHRcdFx0XHRlbmFibGVkRmVhdHVyZXMuaW5jbHVkZXMoICdkZXB0aC1zZW5zaW5nJyApICYmXG5cdFx0XHRcdFx0c2Vzc2lvbi5kZXB0aFVzYWdlID09ICdncHUtb3B0aW1pemVkJztcblxuXHRcdFx0XHRpZiAoIGdwdURlcHRoU2Vuc2luZ0VuYWJsZWQgJiYgZ2xCaW5kaW5nICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgZGVwdGhEYXRhID0gZ2xCaW5kaW5nLmdldERlcHRoSW5mb3JtYXRpb24oIHZpZXdzWyAwIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZGVwdGhEYXRhICYmIGRlcHRoRGF0YS5pc1ZhbGlkICYmIGRlcHRoRGF0YS50ZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRkZXB0aFNlbnNpbmcuaW5pdCggcmVuZGVyZXIsIGRlcHRoRGF0YSwgc2Vzc2lvbi5yZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3QgaW5wdXRTb3VyY2UgPSBjb250cm9sbGVySW5wdXRTb3VyY2VzWyBpIF07XG5cdFx0XHRcdGNvbnN0IGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggaW5wdXRTb3VyY2UgIT09IG51bGwgJiYgY29udHJvbGxlciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci51cGRhdGUoIGlucHV0U291cmNlLCBmcmFtZSwgY3VzdG9tUmVmZXJlbmNlU3BhY2UgfHwgcmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUsIGZyYW1lICk7XG5cblx0XHRcdGlmICggZnJhbWUuZGV0ZWN0ZWRQbGFuZXMgKSB7XG5cblx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAncGxhbmVzZGV0ZWN0ZWQnLCBkYXRhOiBmcmFtZSB9ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0eHJGcmFtZSA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblxuXHRcdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0XHRvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdH07XG5cblx0XHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7fTtcblxuXHR9XG5cbn1cblxuY29uc3QgX2UxID0gLypAX19QVVJFX18qLyBuZXcgRXVsZXIoKTtcbmNvbnN0IF9tMSA9IC8qQF9fUFVSRV9fKi8gbmV3IE1hdHJpeDQoKTtcblxuZnVuY3Rpb24gV2ViR0xNYXRlcmlhbHMoIHJlbmRlcmVyLCBwcm9wZXJ0aWVzICkge1xuXG5cdGZ1bmN0aW9uIHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXAsIHVuaWZvcm0gKSB7XG5cblx0XHRpZiAoIG1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRtYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHR9XG5cblx0XHR1bmlmb3JtLnZhbHVlLmNvcHkoIG1hcC5tYXRyaXggKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaEZvZ1VuaWZvcm1zKCB1bmlmb3JtcywgZm9nICkge1xuXG5cdFx0Zm9nLmNvbG9yLmdldFJHQiggdW5pZm9ybXMuZm9nQ29sb3IudmFsdWUsIGdldFVubGl0VW5pZm9ybUNvbG9yU3BhY2UoIHJlbmRlcmVyICkgKTtcblxuXHRcdGlmICggZm9nLmlzRm9nICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dOZWFyLnZhbHVlID0gZm9nLm5lYXI7XG5cdFx0XHR1bmlmb3Jtcy5mb2dGYXIudmFsdWUgPSBmb2cuZmFyO1xuXG5cdFx0fSBlbHNlIGlmICggZm9nLmlzRm9nRXhwMiApIHtcblxuXHRcdFx0dW5pZm9ybXMuZm9nRGVuc2l0eS52YWx1ZSA9IGZvZy5kZW5zaXR5O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoTWF0ZXJpYWxVbmlmb3JtcyggdW5pZm9ybXMsIG1hdGVyaWFsLCBwaXhlbFJhdGlvLCBoZWlnaHQsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggdW5pZm9ybXMsIG1hdGVyaWFsLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTWF0Y2FwTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoRGVwdGhNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hOb3JtYWxNYXRlcmlhbCApIHtcblxuXHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTGluZUJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTGluZURhc2hlZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0Rhc2goIHVuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1BvaW50c01hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRyZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNvbG9yLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlOyAvLyAjMTU1ODFcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwuY29sb3IgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWFwLCB1bmlmb3Jtcy5tYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5idW1wTWFwLCB1bmlmb3Jtcy5idW1wTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLTE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5ub3JtYWxNYXAsIHVuaWZvcm1zLm5vcm1hbE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLCB1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmVtaXNzaXZlTWFwLCB1bmlmb3Jtcy5lbWlzc2l2ZU1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5zcGVjdWxhck1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNwZWN1bGFyTWFwLCB1bmlmb3Jtcy5zcGVjdWxhck1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYVRlc3QgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYVRlc3QudmFsdWUgPSBtYXRlcmlhbC5hbHBoYVRlc3Q7XG5cblx0XHR9XG5cblx0XHRjb25zdCBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdGNvbnN0IGVudk1hcCA9IG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXA7XG5cdFx0Y29uc3QgZW52TWFwUm90YXRpb24gPSBtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwUm90YXRpb247XG5cblx0XHRpZiAoIGVudk1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gZW52TWFwO1xuXG5cdFx0XHRfZTEuY29weSggZW52TWFwUm90YXRpb24gKTtcblxuXHRcdFx0Ly8gYWNjb21tb2RhdGUgbGVmdC1oYW5kZWQgZnJhbWVcblx0XHRcdF9lMS54ICo9IC0xOyBfZTEueSAqPSAtMTsgX2UxLnogKj0gLTE7XG5cblx0XHRcdGlmICggZW52TWFwLmlzQ3ViZVRleHR1cmUgJiYgZW52TWFwLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gZW52aXJvbm1lbnQgbWFwcyB3aGljaCBhcmUgbm90IGN1YmUgcmVuZGVyIHRhcmdldHMgb3IgUE1SRU1zIGZvbGxvdyBhIGRpZmZlcmVudCBjb252ZW50aW9uXG5cdFx0XHRcdF9lMS55ICo9IC0xO1xuXHRcdFx0XHRfZTEueiAqPSAtMTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXBSb3RhdGlvbi52YWx1ZS5zZXRGcm9tTWF0cml4NCggX20xLm1ha2VSb3RhdGlvbkZyb21FdWxlciggX2UxICkgKTtcblxuXHRcdFx0dW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggZW52TWFwLmlzQ3ViZVRleHR1cmUgJiYgZW52TWFwLmlzUmVuZGVyVGFyZ2V0VGV4dHVyZSA9PT0gZmFsc2UgKSA/IC0xIDogMTtcblxuXHRcdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5O1xuXHRcdFx0dW5pZm9ybXMuaW9yLnZhbHVlID0gbWF0ZXJpYWwuaW9yO1xuXHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5saWdodE1hcCwgdW5pZm9ybXMubGlnaHRNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYW9NYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFvTWFwLnZhbHVlID0gbWF0ZXJpYWwuYW9NYXA7XG5cdFx0XHR1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYW9NYXAsIHVuaWZvcm1zLmFvTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLm1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEYXNoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kYXNoU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplO1xuXHRcdHVuaWZvcm1zLnRvdGFsU2l6ZS52YWx1ZSA9IG1hdGVyaWFsLmRhc2hTaXplICsgbWF0ZXJpYWwuZ2FwU2l6ZTtcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IG1hdGVyaWFsLnNjYWxlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQb2ludHMoIHVuaWZvcm1zLCBtYXRlcmlhbCwgcGl4ZWxSYXRpbywgaGVpZ2h0ICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnNpemUudmFsdWUgPSBtYXRlcmlhbC5zaXplICogcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IGhlaWdodCAqIDAuNTtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5tYXAsIHVuaWZvcm1zLnV2VHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuYWxwaGFNYXAsIHVuaWZvcm1zLmFscGhhTWFwVHJhbnNmb3JtICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhVGVzdCA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhVGVzdC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhVGVzdDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXHRcdHVuaWZvcm1zLnJvdGF0aW9uLnZhbHVlID0gbWF0ZXJpYWwucm90YXRpb247XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWFwLCB1bmlmb3Jtcy5tYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbHBoYU1hcCwgdW5pZm9ybXMuYWxwaGFNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYWxwaGFUZXN0ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFUZXN0LnZhbHVlID0gbWF0ZXJpYWwuYWxwaGFUZXN0O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaG9uZyggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuc3BlY3VsYXIudmFsdWUuY29weSggbWF0ZXJpYWwuc3BlY3VsYXIgKTtcblx0XHR1bmlmb3Jtcy5zaGluaW5lc3MudmFsdWUgPSBNYXRoLm1heCggbWF0ZXJpYWwuc2hpbmluZXNzLCAxZS00ICk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApXG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZ3JhZGllbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmdyYWRpZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZ3JhZGllbnRNYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5tZXRhbG5lc3MudmFsdWUgPSBtYXRlcmlhbC5tZXRhbG5lc3M7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwubWV0YWxuZXNzTWFwLCB1bmlmb3Jtcy5tZXRhbG5lc3NNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsIHVuaWZvcm1zLnJvdWdobmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdC8vdW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwOyAvLyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsKCB1bmlmb3JtcywgbWF0ZXJpYWwsIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCApIHtcblxuXHRcdHVuaWZvcm1zLmlvci52YWx1ZSA9IG1hdGVyaWFsLmlvcjsgLy8gYWxzbyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxuXG5cdFx0aWYgKCBtYXRlcmlhbC5zaGVlbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNoZWVuQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuc2hlZW5Db2xvciApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5zaGVlbiApO1xuXG5cdFx0XHR1bmlmb3Jtcy5zaGVlblJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuc2hlZW5Db2xvck1hcC52YWx1ZSA9IG1hdGVyaWFsLnNoZWVuQ29sb3JNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNoZWVuQ29sb3JNYXAsIHVuaWZvcm1zLnNoZWVuQ29sb3JNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNoZWVuUm91Z2huZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuc2hlZW5Sb3VnaG5lc3NNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNoZWVuUm91Z2huZXNzTWFwLCB1bmlmb3Jtcy5zaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdCA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdDtcblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdFJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcztcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgKSB7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0TWFwLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0TWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAsIHVuaWZvcm1zLmNsZWFyY29hdE1hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdFJvdWdobmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwLCB1bmlmb3Jtcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCwgdW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BlcnNpb24gPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwZXJzaW9uLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGVyc2lvbjtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaXJpZGVzY2VuY2UgPiAwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5pcmlkZXNjZW5jZS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlO1xuXHRcdFx0dW5pZm9ybXMuaXJpZGVzY2VuY2VJT1IudmFsdWUgPSBtYXRlcmlhbC5pcmlkZXNjZW5jZUlPUjtcblx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWluaW11bS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2VbIDAgXTtcblx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWF4aW11bS52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2VbIDEgXTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcCApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5pcmlkZXNjZW5jZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmlyaWRlc2NlbmNlTWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5pcmlkZXNjZW5jZU1hcCwgdW5pZm9ybXMuaXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuaXJpZGVzY2VuY2VUaGlja25lc3NNYXA7XG5cblx0XHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLmlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwLCB1bmlmb3Jtcy5pcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLnRyYW5zbWlzc2lvbiA+IDAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbi52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbjtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJNYXAudmFsdWUgPSB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQudGV4dHVyZTtcblx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvblNhbXBsZXJTaXplLnZhbHVlLnNldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LndpZHRoLCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRyYW5zbWlzc2lvbk1hcC52YWx1ZSA9IG1hdGVyaWFsLnRyYW5zbWlzc2lvbk1hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwudHJhbnNtaXNzaW9uTWFwLCB1bmlmb3Jtcy50cmFuc21pc3Npb25NYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy50aGlja25lc3MudmFsdWUgPSBtYXRlcmlhbC50aGlja25lc3M7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudGhpY2tuZXNzTWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLnRoaWNrbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLnRoaWNrbmVzc01hcDtcblxuXHRcdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwudGhpY2tuZXNzTWFwLCB1bmlmb3Jtcy50aGlja25lc3NNYXBUcmFuc2Zvcm0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy5hdHRlbnVhdGlvbkRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuYXR0ZW51YXRpb25EaXN0YW5jZTtcblx0XHRcdHVuaWZvcm1zLmF0dGVudWF0aW9uQ29sb3IudmFsdWUuY29weSggbWF0ZXJpYWwuYXR0ZW51YXRpb25Db2xvciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID4gMCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYW5pc290cm9weVZlY3Rvci52YWx1ZS5zZXQoIG1hdGVyaWFsLmFuaXNvdHJvcHkgKiBNYXRoLmNvcyggbWF0ZXJpYWwuYW5pc290cm9weVJvdGF0aW9uICksIG1hdGVyaWFsLmFuaXNvdHJvcHkgKiBNYXRoLnNpbiggbWF0ZXJpYWwuYW5pc290cm9weVJvdGF0aW9uICkgKTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwICkge1xuXG5cdFx0XHRcdHVuaWZvcm1zLmFuaXNvdHJvcHlNYXAudmFsdWUgPSBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwO1xuXG5cdFx0XHRcdHJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtKCBtYXRlcmlhbC5hbmlzb3Ryb3B5TWFwLCB1bmlmb3Jtcy5hbmlzb3Ryb3B5TWFwVHJhbnNmb3JtICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnNwZWN1bGFySW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJJbnRlbnNpdHk7XG5cdFx0dW5pZm9ybXMuc3BlY3VsYXJDb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3JNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyQ29sb3JNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yTWFwO1xuXG5cdFx0XHRyZWZyZXNoVHJhbnNmb3JtVW5pZm9ybSggbWF0ZXJpYWwuc3BlY3VsYXJDb2xvck1hcCwgdW5pZm9ybXMuc3BlY3VsYXJDb2xvck1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJJbnRlbnNpdHlNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhckludGVuc2l0eU1hcDtcblxuXHRcdFx0cmVmcmVzaFRyYW5zZm9ybVVuaWZvcm0oIG1hdGVyaWFsLnNwZWN1bGFySW50ZW5zaXR5TWFwLCB1bmlmb3Jtcy5zcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwubWF0Y2FwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRjb25zdCBsaWdodCA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLmxpZ2h0O1xuXG5cdFx0dW5pZm9ybXMucmVmZXJlbmNlUG9zaXRpb24udmFsdWUuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHVuaWZvcm1zLm5lYXJEaXN0YW5jZS52YWx1ZSA9IGxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhcjtcblx0XHR1bmlmb3Jtcy5mYXJEaXN0YW5jZS52YWx1ZSA9IGxpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJlZnJlc2hGb2dVbmlmb3JtczogcmVmcmVzaEZvZ1VuaWZvcm1zLFxuXHRcdHJlZnJlc2hNYXRlcmlhbFVuaWZvcm1zOiByZWZyZXNoTWF0ZXJpYWxVbmlmb3Jtc1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMVW5pZm9ybXNHcm91cHMoIGdsLCBpbmZvLCBjYXBhYmlsaXRpZXMsIHN0YXRlICkge1xuXG5cdGxldCBidWZmZXJzID0ge307XG5cdGxldCB1cGRhdGVMaXN0ID0ge307XG5cdGxldCBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzID0gW107XG5cblx0Y29uc3QgbWF4QmluZGluZ1BvaW50cyA9IGdsLmdldFBhcmFtZXRlciggZ2wuTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTICk7IC8vIGJpbmRpbmcgcG9pbnRzIGFyZSBnbG9iYWwgd2hlcmVhcyBibG9jayBpbmRpY2VzIGFyZSBwZXIgc2hhZGVyIHByb2dyYW1cblxuXHRmdW5jdGlvbiBiaW5kKCB1bmlmb3Jtc0dyb3VwLCBwcm9ncmFtICkge1xuXG5cdFx0Y29uc3Qgd2ViZ2xQcm9ncmFtID0gcHJvZ3JhbS5wcm9ncmFtO1xuXHRcdHN0YXRlLnVuaWZvcm1CbG9ja0JpbmRpbmcoIHVuaWZvcm1zR3JvdXAsIHdlYmdsUHJvZ3JhbSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGUoIHVuaWZvcm1zR3JvdXAsIHByb2dyYW0gKSB7XG5cblx0XHRsZXQgYnVmZmVyID0gYnVmZmVyc1sgdW5pZm9ybXNHcm91cC5pZCBdO1xuXG5cdFx0aWYgKCBidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJlcGFyZVVuaWZvcm1zR3JvdXAoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdFx0YnVmZmVyID0gY3JlYXRlQnVmZmVyKCB1bmlmb3Jtc0dyb3VwICk7XG5cdFx0XHRidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF0gPSBidWZmZXI7XG5cblx0XHRcdHVuaWZvcm1zR3JvdXAuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZW5zdXJlIHRvIHVwZGF0ZSB0aGUgYmluZGluZyBwb2ludHMvYmxvY2sgaW5kaWNlcyBtYXBwaW5nIGZvciB0aGlzIHByb2dyYW1cblxuXHRcdGNvbnN0IHdlYmdsUHJvZ3JhbSA9IHByb2dyYW0ucHJvZ3JhbTtcblx0XHRzdGF0ZS51cGRhdGVVQk9NYXBwaW5nKCB1bmlmb3Jtc0dyb3VwLCB3ZWJnbFByb2dyYW0gKTtcblxuXHRcdC8vIHVwZGF0ZSBVQk8gb25jZSBwZXIgZnJhbWVcblxuXHRcdGNvbnN0IGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHRpZiAoIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdHVwZGF0ZUJ1ZmZlckRhdGEoIHVuaWZvcm1zR3JvdXAgKTtcblxuXHRcdFx0dXBkYXRlTGlzdFsgdW5pZm9ybXNHcm91cC5pZCBdID0gZnJhbWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciggdW5pZm9ybXNHcm91cCApIHtcblxuXHRcdC8vIHRoZSBzZXR1cCBvZiBhbiBVQk8gaXMgaW5kZXBlbmRlbnQgb2YgYSBwYXJ0aWN1bGFyIHNoYWRlciBwcm9ncmFtIGJ1dCBnbG9iYWxcblxuXHRcdGNvbnN0IGJpbmRpbmdQb2ludEluZGV4ID0gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpO1xuXHRcdHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCA9IGJpbmRpbmdQb2ludEluZGV4O1xuXG5cdFx0Y29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0Y29uc3Qgc2l6ZSA9IHVuaWZvcm1zR3JvdXAuX19zaXplO1xuXHRcdGNvbnN0IHVzYWdlID0gdW5pZm9ybXNHcm91cC51c2FnZTtcblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlVOSUZPUk1fQlVGRkVSLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBnbC5VTklGT1JNX0JVRkZFUiwgc2l6ZSwgdXNhZ2UgKTtcblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgbnVsbCApO1xuXHRcdGdsLmJpbmRCdWZmZXJCYXNlKCBnbC5VTklGT1JNX0JVRkZFUiwgYmluZGluZ1BvaW50SW5kZXgsIGJ1ZmZlciApO1xuXG5cdFx0cmV0dXJuIGJ1ZmZlcjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVCaW5kaW5nUG9pbnRJbmRleCgpIHtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IG1heEJpbmRpbmdQb2ludHM7IGkgKysgKSB7XG5cblx0XHRcdGlmICggYWxsb2NhdGVkQmluZGluZ1BvaW50cy5pbmRleE9mKCBpICkgPT09IC0xICkge1xuXG5cdFx0XHRcdGFsbG9jYXRlZEJpbmRpbmdQb2ludHMucHVzaCggaSApO1xuXHRcdFx0XHRyZXR1cm4gaTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IE1heGltdW0gbnVtYmVyIG9mIHNpbXVsdGFuZW91c2x5IHVzYWJsZSB1bmlmb3JtcyBncm91cHMgcmVhY2hlZC4nICk7XG5cblx0XHRyZXR1cm4gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyRGF0YSggdW5pZm9ybXNHcm91cCApIHtcblxuXHRcdGNvbnN0IGJ1ZmZlciA9IGJ1ZmZlcnNbIHVuaWZvcm1zR3JvdXAuaWQgXTtcblx0XHRjb25zdCB1bmlmb3JtcyA9IHVuaWZvcm1zR3JvdXAudW5pZm9ybXM7XG5cdFx0Y29uc3QgY2FjaGUgPSB1bmlmb3Jtc0dyb3VwLl9fY2FjaGU7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBnbC5VTklGT1JNX0JVRkZFUiwgYnVmZmVyICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdW5pZm9ybXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHVuaWZvcm1BcnJheSA9IEFycmF5LmlzQXJyYXkoIHVuaWZvcm1zWyBpIF0gKSA/IHVuaWZvcm1zWyBpIF0gOiBbIHVuaWZvcm1zWyBpIF0gXTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVuaWZvcm1BcnJheS5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtID0gdW5pZm9ybUFycmF5WyBqIF07XG5cblx0XHRcdFx0aWYgKCBoYXNVbmlmb3JtQ2hhbmdlZCggdW5pZm9ybSwgaSwgaiwgY2FjaGUgKSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IHVuaWZvcm0uX19vZmZzZXQ7XG5cblx0XHRcdFx0XHRjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KCB1bmlmb3JtLnZhbHVlICkgPyB1bmlmb3JtLnZhbHVlIDogWyB1bmlmb3JtLnZhbHVlIF07XG5cblx0XHRcdFx0XHRsZXQgYXJyYXlPZmZzZXQgPSAwO1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IGsgPSAwOyBrIDwgdmFsdWVzLmxlbmd0aDsgayArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSB2YWx1ZXNbIGsgXTtcblxuXHRcdFx0XHRcdFx0Y29uc3QgaW5mbyA9IGdldFVuaWZvcm1TaXplKCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0XHQvLyBUT0RPIGFkZCBpbnRlZ2VyIGFuZCBzdHJ1Y3Qgc3VwcG9ydFxuXHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nICkge1xuXG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAwIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggZ2wuVU5JRk9STV9CVUZGRVIsIG9mZnNldCArIGFycmF5T2Zmc2V0LCB1bmlmb3JtLl9fZGF0YSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gbWFudWFsbHkgY29udmVydGluZyAzeDMgdG8gM3g0XG5cblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDAgXSA9IHZhbHVlLmVsZW1lbnRzWyAwIF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAxIF0gPSB2YWx1ZS5lbGVtZW50c1sgMSBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgMiBdID0gdmFsdWUuZWxlbWVudHNbIDIgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDMgXSA9IDA7XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyA0IF0gPSB2YWx1ZS5lbGVtZW50c1sgMyBdO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgNSBdID0gdmFsdWUuZWxlbWVudHNbIDQgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDYgXSA9IHZhbHVlLmVsZW1lbnRzWyA1IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyA3IF0gPSAwO1xuXHRcdFx0XHRcdFx0XHR1bmlmb3JtLl9fZGF0YVsgOCBdID0gdmFsdWUuZWxlbWVudHNbIDYgXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDkgXSA9IHZhbHVlLmVsZW1lbnRzWyA3IF07XG5cdFx0XHRcdFx0XHRcdHVuaWZvcm0uX19kYXRhWyAxMCBdID0gdmFsdWUuZWxlbWVudHNbIDggXTtcblx0XHRcdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGFbIDExIF0gPSAwO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdHZhbHVlLnRvQXJyYXkoIHVuaWZvcm0uX19kYXRhLCBhcnJheU9mZnNldCApO1xuXG5cdFx0XHRcdFx0XHRcdGFycmF5T2Zmc2V0ICs9IGluZm8uc3RvcmFnZSAvIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggZ2wuVU5JRk9STV9CVUZGRVIsIG9mZnNldCwgdW5pZm9ybS5fX2RhdGEgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGdsLmJpbmRCdWZmZXIoIGdsLlVOSUZPUk1fQlVGRkVSLCBudWxsICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhc1VuaWZvcm1DaGFuZ2VkKCB1bmlmb3JtLCBpbmRleCwgaW5kZXhBcnJheSwgY2FjaGUgKSB7XG5cblx0XHRjb25zdCB2YWx1ZSA9IHVuaWZvcm0udmFsdWU7XG5cdFx0Y29uc3QgaW5kZXhTdHJpbmcgPSBpbmRleCArICdfJyArIGluZGV4QXJyYXk7XG5cblx0XHRpZiAoIGNhY2hlWyBpbmRleFN0cmluZyBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGNhY2hlIGVudHJ5IGRvZXMgbm90IGV4aXN0IHNvIGZhclxuXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgKSB7XG5cblx0XHRcdFx0Y2FjaGVbIGluZGV4U3RyaW5nIF0gPSB2YWx1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjYWNoZVsgaW5kZXhTdHJpbmcgXSA9IHZhbHVlLmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBjYWNoZWRPYmplY3QgPSBjYWNoZVsgaW5kZXhTdHJpbmcgXTtcblxuXHRcdFx0Ly8gY29tcGFyZSBjdXJyZW50IHZhbHVlIHdpdGggY2FjaGVkIGVudHJ5XG5cblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHtcblxuXHRcdFx0XHRpZiAoIGNhY2hlZE9iamVjdCAhPT0gdmFsdWUgKSB7XG5cblx0XHRcdFx0XHRjYWNoZVsgaW5kZXhTdHJpbmcgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGNhY2hlZE9iamVjdC5lcXVhbHMoIHZhbHVlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Y2FjaGVkT2JqZWN0LmNvcHkoIHZhbHVlICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHByZXBhcmVVbmlmb3Jtc0dyb3VwKCB1bmlmb3Jtc0dyb3VwICkge1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHRvdGFsIGJ1ZmZlciBzaXplIGFjY29yZGluZyB0byB0aGUgU1REMTQwIGxheW91dFxuXHRcdC8vIEhpbnQ6IFNURDE0MCBpcyB0aGUgb25seSBzdXBwb3J0ZWQgbGF5b3V0IGluIFdlYkdMIDJcblxuXHRcdGNvbnN0IHVuaWZvcm1zID0gdW5pZm9ybXNHcm91cC51bmlmb3JtcztcblxuXHRcdGxldCBvZmZzZXQgPSAwOyAvLyBnbG9iYWwgYnVmZmVyIG9mZnNldCBpbiBieXRlc1xuXHRcdGNvbnN0IGNodW5rU2l6ZSA9IDE2OyAvLyBzaXplIG9mIGEgY2h1bmsgaW4gYnl0ZXNcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IHVuaWZvcm1zLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHVuaWZvcm1BcnJheSA9IEFycmF5LmlzQXJyYXkoIHVuaWZvcm1zWyBpIF0gKSA/IHVuaWZvcm1zWyBpIF0gOiBbIHVuaWZvcm1zWyBpIF0gXTtcblxuXHRcdFx0Zm9yICggbGV0IGogPSAwLCBqbCA9IHVuaWZvcm1BcnJheS5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRjb25zdCB1bmlmb3JtID0gdW5pZm9ybUFycmF5WyBqIF07XG5cblx0XHRcdFx0Y29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSggdW5pZm9ybS52YWx1ZSApID8gdW5pZm9ybS52YWx1ZSA6IFsgdW5pZm9ybS52YWx1ZSBdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBrID0gMCwga2wgPSB2YWx1ZXMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IHZhbHVlc1sgayBdO1xuXG5cdFx0XHRcdFx0Y29uc3QgaW5mbyA9IGdldFVuaWZvcm1TaXplKCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0Y29uc3QgY2h1bmtPZmZzZXQgPSBvZmZzZXQgJSBjaHVua1NpemU7IC8vIG9mZnNldCBpbiB0aGUgY3VycmVudCBjaHVua1xuXHRcdFx0XHRcdGNvbnN0IGNodW5rUGFkZGluZyA9IGNodW5rT2Zmc2V0ICUgaW5mby5ib3VuZGFyeTsgLy8gcmVxdWlyZWQgcGFkZGluZyB0byBtYXRjaCBib3VuZGFyeVxuXHRcdFx0XHRcdGNvbnN0IGNodW5rU3RhcnQgPSBjaHVua09mZnNldCArIGNodW5rUGFkZGluZzsgLy8gdGhlIHN0YXJ0IHBvc2l0aW9uIGluIHRoZSBjdXJyZW50IGNodW5rIGZvciB0aGUgZGF0YVxuXG5cdFx0XHRcdFx0b2Zmc2V0ICs9IGNodW5rUGFkZGluZztcblxuXHRcdFx0XHRcdC8vIENoZWNrIGZvciBjaHVuayBvdmVyZmxvd1xuXHRcdFx0XHRcdGlmICggY2h1bmtTdGFydCAhPT0gMCAmJiAoIGNodW5rU2l6ZSAtIGNodW5rU3RhcnQgKSA8IGluZm8uc3RvcmFnZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQWRkIHBhZGRpbmcgYW5kIGFkanVzdCBvZmZzZXRcblx0XHRcdFx0XHRcdG9mZnNldCArPSAoIGNodW5rU2l6ZSAtIGNodW5rU3RhcnQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgdHdvIHByb3BlcnRpZXMgd2lsbCBiZSB1c2VkIGZvciBwYXJ0aWFsIGJ1ZmZlciB1cGRhdGVzXG5cdFx0XHRcdFx0dW5pZm9ybS5fX2RhdGEgPSBuZXcgRmxvYXQzMkFycmF5KCBpbmZvLnN0b3JhZ2UgLyBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgKTtcblx0XHRcdFx0XHR1bmlmb3JtLl9fb2Zmc2V0ID0gb2Zmc2V0O1xuXG5cdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBnbG9iYWwgb2Zmc2V0XG5cdFx0XHRcdFx0b2Zmc2V0ICs9IGluZm8uc3RvcmFnZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGVuc3VyZSBjb3JyZWN0IGZpbmFsIHBhZGRpbmdcblxuXHRcdGNvbnN0IGNodW5rT2Zmc2V0ID0gb2Zmc2V0ICUgY2h1bmtTaXplO1xuXG5cdFx0aWYgKCBjaHVua09mZnNldCA+IDAgKSBvZmZzZXQgKz0gKCBjaHVua1NpemUgLSBjaHVua09mZnNldCApO1xuXG5cdFx0Ly9cblxuXHRcdHVuaWZvcm1zR3JvdXAuX19zaXplID0gb2Zmc2V0O1xuXHRcdHVuaWZvcm1zR3JvdXAuX19jYWNoZSA9IHt9O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldFVuaWZvcm1TaXplKCB2YWx1ZSApIHtcblxuXHRcdGNvbnN0IGluZm8gPSB7XG5cdFx0XHRib3VuZGFyeTogMCwgLy8gYnl0ZXNcblx0XHRcdHN0b3JhZ2U6IDAgLy8gYnl0ZXNcblx0XHR9O1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIHNpemVzIGFjY29yZGluZyB0byBTVEQxNDBcblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyApIHtcblxuXHRcdFx0Ly8gZmxvYXQvaW50L2Jvb2xcblxuXHRcdFx0aW5mby5ib3VuZGFyeSA9IDQ7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA0O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUuaXNWZWN0b3IyICkge1xuXG5cdFx0XHQvLyB2ZWMyXG5cblx0XHRcdGluZm8uYm91bmRhcnkgPSA4O1xuXHRcdFx0aW5mby5zdG9yYWdlID0gODtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVmVjdG9yMyB8fCB2YWx1ZS5pc0NvbG9yICkge1xuXG5cdFx0XHQvLyB2ZWMzXG5cblx0XHRcdGluZm8uYm91bmRhcnkgPSAxNjtcblx0XHRcdGluZm8uc3RvcmFnZSA9IDEyOyAvLyBldmlsOiB2ZWMzIG11c3Qgc3RhcnQgb24gYSAxNi1ieXRlIGJvdW5kYXJ5IGJ1dCBpdCBvbmx5IGNvbnN1bWVzIDEyIGJ5dGVzXG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdC8vIHZlYzRcblxuXHRcdFx0aW5mby5ib3VuZGFyeSA9IDE2O1xuXHRcdFx0aW5mby5zdG9yYWdlID0gMTY7XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZS5pc01hdHJpeDMgKSB7XG5cblx0XHRcdC8vIG1hdDMgKGluIFNURDE0MCBhIDN4MyBtYXRyaXggaXMgcmVwcmVzZW50ZWQgYXMgM3g0KVxuXG5cdFx0XHRpbmZvLmJvdW5kYXJ5ID0gNDg7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA0ODtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzTWF0cml4NCApIHtcblxuXHRcdFx0Ly8gbWF0NFxuXG5cdFx0XHRpbmZvLmJvdW5kYXJ5ID0gNjQ7XG5cdFx0XHRpbmZvLnN0b3JhZ2UgPSA2NDtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBzYW1wbGVycyBjYW4gbm90IGJlIHBhcnQgb2YgYW4gdW5pZm9ybXMgZ3JvdXAuJyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVW5zdXBwb3J0ZWQgdW5pZm9ybSB2YWx1ZSB0eXBlLicsIHZhbHVlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW5mbztcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Vbmlmb3Jtc0dyb3Vwc0Rpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgdW5pZm9ybXNHcm91cCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHVuaWZvcm1zR3JvdXAucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblVuaWZvcm1zR3JvdXBzRGlzcG9zZSApO1xuXG5cdFx0Y29uc3QgaW5kZXggPSBhbGxvY2F0ZWRCaW5kaW5nUG9pbnRzLmluZGV4T2YoIHVuaWZvcm1zR3JvdXAuX19iaW5kaW5nUG9pbnRJbmRleCApO1xuXHRcdGFsbG9jYXRlZEJpbmRpbmdQb2ludHMuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0Z2wuZGVsZXRlQnVmZmVyKCBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF0gKTtcblxuXHRcdGRlbGV0ZSBidWZmZXJzWyB1bmlmb3Jtc0dyb3VwLmlkIF07XG5cdFx0ZGVsZXRlIHVwZGF0ZUxpc3RbIHVuaWZvcm1zR3JvdXAuaWQgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGZvciAoIGNvbnN0IGlkIGluIGJ1ZmZlcnMgKSB7XG5cblx0XHRcdGdsLmRlbGV0ZUJ1ZmZlciggYnVmZmVyc1sgaWQgXSApO1xuXG5cdFx0fVxuXG5cdFx0YWxsb2NhdGVkQmluZGluZ1BvaW50cyA9IFtdO1xuXHRcdGJ1ZmZlcnMgPSB7fTtcblx0XHR1cGRhdGVMaXN0ID0ge307XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRiaW5kOiBiaW5kLFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIHVzZXMgV2ViR0wgMiB0byBkaXNwbGF5IHNjZW5lcy5cbiAqXG4gKiBXZWJHTCAxIGlzIG5vdCBzdXBwb3J0ZWQgc2luY2UgYHIxNjNgLlxuICovXG5jbGFzcyBXZWJHTFJlbmRlcmVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyBXZWJHTCByZW5kZXJlci5cblx0ICpcblx0ICogQHBhcmFtIHtXZWJHTFJlbmRlcmVyfk9wdGlvbnN9IFtwYXJhbWV0ZXJzXSAtIFRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlci5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBwYXJhbWV0ZXJzID0ge30gKSB7XG5cblx0XHRjb25zdCB7XG5cdFx0XHRjYW52YXMgPSBjcmVhdGVDYW52YXNFbGVtZW50KCksXG5cdFx0XHRjb250ZXh0ID0gbnVsbCxcblx0XHRcdGRlcHRoID0gdHJ1ZSxcblx0XHRcdHN0ZW5jaWwgPSBmYWxzZSxcblx0XHRcdGFscGhhID0gZmFsc2UsXG5cdFx0XHRhbnRpYWxpYXMgPSBmYWxzZSxcblx0XHRcdHByZW11bHRpcGxpZWRBbHBoYSA9IHRydWUsXG5cdFx0XHRwcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBmYWxzZSxcblx0XHRcdHBvd2VyUHJlZmVyZW5jZSA9ICdkZWZhdWx0Jyxcblx0XHRcdGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBmYWxzZSxcblx0XHRcdHJldmVyc2VEZXB0aEJ1ZmZlciA9IGZhbHNlLFxuXHRcdH0gPSBwYXJhbWV0ZXJzO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBmbGFnIGNhbiBiZSB1c2VkIGZvciB0eXBlIHRlc3RpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5pc1dlYkdMUmVuZGVyZXIgPSB0cnVlO1xuXG5cdFx0bGV0IF9hbHBoYTtcblxuXHRcdGlmICggY29udGV4dCAhPT0gbnVsbCApIHtcblxuXHRcdFx0aWYgKCB0eXBlb2YgV2ViR0xSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBjb250ZXh0IGluc3RhbmNlb2YgV2ViR0xSZW5kZXJpbmdDb250ZXh0ICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFdlYkdMIDEgaXMgbm90IHN1cHBvcnRlZCBzaW5jZSByMTYzLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfYWxwaGEgPSBjb250ZXh0LmdldENvbnRleHRBdHRyaWJ1dGVzKCkuYWxwaGE7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfYWxwaGEgPSBhbHBoYTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IHVpbnRDbGVhckNvbG9yID0gbmV3IFVpbnQzMkFycmF5KCA0ICk7XG5cdFx0Y29uc3QgaW50Q2xlYXJDb2xvciA9IG5ldyBJbnQzMkFycmF5KCA0ICk7XG5cblx0XHRsZXQgY3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xuXHRcdGxldCBjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xuXG5cdFx0Ly8gcmVuZGVyKCkgY2FuIGJlIGNhbGxlZCBmcm9tIHdpdGhpbiBhIGNhbGxiYWNrIHRyaWdnZXJlZCBieSBhbm90aGVyIHJlbmRlci5cblx0XHQvLyBXZSB0cmFjayB0aGlzIHNvIHRoYXQgdGhlIG5lc3RlZCByZW5kZXIgY2FsbCBnZXRzIGl0cyBsaXN0IGFuZCBzdGF0ZSBpc29sYXRlZCBmcm9tIHRoZSBwYXJlbnQgcmVuZGVyIGNhbGwuXG5cblx0XHRjb25zdCByZW5kZXJMaXN0U3RhY2sgPSBbXTtcblx0XHRjb25zdCByZW5kZXJTdGF0ZVN0YWNrID0gW107XG5cblx0XHQvLyBwdWJsaWMgcHJvcGVydGllc1xuXG5cdFx0LyoqXG5cdFx0ICogQSBjYW52YXMgd2hlcmUgdGhlIHJlbmRlcmVyIGRyYXdzIGl0cyBvdXRwdXQuVGhpcyBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgYnkgdGhlIHJlbmRlcmVyXG5cdFx0ICogaW4gdGhlIGNvbnN0cnVjdG9yIChpZiBub3QgcHJvdmlkZWQgYWxyZWFkeSk7IHlvdSBqdXN0IG5lZWQgdG8gYWRkIGl0IHRvIHlvdXIgcGFnZSBsaWtlIHNvOlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggcmVuZGVyZXIuZG9tRWxlbWVudCApO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHR5cGUge0RPTUVsZW1lbnR9XG5cdFx0ICovXG5cdFx0dGhpcy5kb21FbGVtZW50ID0gY2FudmFzO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBvYmplY3Qgd2l0aCBkZWJ1ZyBjb25maWd1cmF0aW9uIHNldHRpbmdzLlxuXHRcdCAqXG5cdFx0ICogLSBgY2hlY2tTaGFkZXJFcnJvcnNgOiBJZiBpdCBpcyBgdHJ1ZWAsIGRlZmluZXMgd2hldGhlciBtYXRlcmlhbCBzaGFkZXIgcHJvZ3JhbXMgYXJlXG5cdFx0ICogY2hlY2tlZCBmb3IgZXJyb3JzIGR1cmluZyBjb21waWxhdGlvbiBhbmQgbGlua2FnZSBwcm9jZXNzLiBJdCBtYXkgYmUgdXNlZnVsIHRvIGRpc2FibGVcblx0XHQgKiB0aGlzIGNoZWNrIGluIHByb2R1Y3Rpb24gZm9yIHBlcmZvcm1hbmNlIGdhaW4uIEl0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIHRvIGtlZXAgdGhlc2Vcblx0XHQgKiBjaGVja3MgZW5hYmxlZCBkdXJpbmcgZGV2ZWxvcG1lbnQuIElmIHRoZSBzaGFkZXIgZG9lcyBub3QgY29tcGlsZSBhbmQgbGluayAtIGl0IHdpbGwgbm90XG5cdFx0ICogd29yayBhbmQgYXNzb2NpYXRlZCBtYXRlcmlhbCB3aWxsIG5vdCByZW5kZXIuXG5cdFx0ICogLSBgb25TaGFkZXJFcnJvcihnbCwgcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIsZ2xGcmFnbWVudFNoYWRlcilgOiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXRcblx0XHQgKiBjYW4gYmUgdXNlZCBmb3IgY3VzdG9tIGVycm9yIHJlcG9ydGluZy4gVGhlIGNhbGxiYWNrIHJlY2VpdmVzIHRoZSBXZWJHTCBjb250ZXh0LCBhbiBpbnN0YW5jZVxuXHRcdCAqIG9mIFdlYkdMUHJvZ3JhbSBhcyB3ZWxsIHR3byBpbnN0YW5jZXMgb2YgV2ViR0xTaGFkZXIgcmVwcmVzZW50aW5nIHRoZSB2ZXJ0ZXggYW5kIGZyYWdtZW50IHNoYWRlci5cblx0XHQgKiBBc3NpZ25pbmcgYSBjdXN0b20gZnVuY3Rpb24gZGlzYWJsZXMgdGhlIGRlZmF1bHQgZXJyb3IgcmVwb3J0aW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLmRlYnVnID0ge1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIEVuYWJsZXMgZXJyb3IgY2hlY2tpbmcgYW5kIHJlcG9ydGluZyB3aGVuIHNoYWRlciBwcm9ncmFtcyBhcmUgYmVpbmcgY29tcGlsZWQuXG5cdFx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHRcdCAqL1xuXHRcdFx0Y2hlY2tTaGFkZXJFcnJvcnM6IHRydWUsXG5cdFx0XHQvKipcblx0XHRcdCAqIENhbGxiYWNrIGZvciBjdXN0b20gZXJyb3IgcmVwb3J0aW5nLlxuXHRcdFx0ICogQHR5cGUgez9GdW5jdGlvbn1cblx0XHRcdCAqL1xuXHRcdFx0b25TaGFkZXJFcnJvcjogbnVsbFxuXHRcdH07XG5cblx0XHQvLyBjbGVhcmluZ1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIGF1dG9tYXRpY2FsbHkgY2xlYXIgaXRzIG91dHB1dCBiZWZvcmUgcmVuZGVyaW5nIGEgZnJhbWUgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyID0gdHJ1ZTtcblxuXHRcdC8qKlxuXHRcdCAqIElmIHtAbGluayBXZWJHTFJlbmRlcmVyI2F1dG9DbGVhcn0gc2V0IHRvIGB0cnVlYCwgd2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIGNsZWFyXG5cdFx0ICogdGhlIGNvbG9yIGJ1ZmZlciBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5hdXRvQ2xlYXJDb2xvciA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBJZiB7QGxpbmsgV2ViR0xSZW5kZXJlciNhdXRvQ2xlYXJ9IHNldCB0byBgdHJ1ZWAsIHdoZXRoZXIgdGhlIHJlbmRlcmVyIHNob3VsZCBjbGVhclxuXHRcdCAqIHRoZSBkZXB0aCBidWZmZXIgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyRGVwdGggPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogSWYge0BsaW5rIFdlYkdMUmVuZGVyZXIjYXV0b0NsZWFyfSBzZXQgdG8gYHRydWVgLCB3aGV0aGVyIHRoZSByZW5kZXJlciBzaG91bGQgY2xlYXJcblx0XHQgKiB0aGUgc3RlbmNpbCBidWZmZXIgb3Igbm90LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0XHQvLyBzY2VuZSBncmFwaFxuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgcmVuZGVyZXIgc2hvdWxkIHNvcnQgb2JqZWN0cyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBOb3RlOiBTb3J0aW5nIGlzIHVzZWQgdG8gYXR0ZW1wdCB0byBwcm9wZXJseSByZW5kZXIgb2JqZWN0cyB0aGF0IGhhdmUgc29tZVxuXHRcdCAqIGRlZ3JlZSBvZiB0cmFuc3BhcmVuY3kuIEJ5IGRlZmluaXRpb24sIHNvcnRpbmcgb2JqZWN0cyBtYXkgbm90IHdvcmsgaW4gYWxsXG5cdFx0ICogY2FzZXMuIERlcGVuZGluZyBvbiB0aGUgbmVlZHMgb2YgYXBwbGljYXRpb24sIGl0IG1heSBiZSBuZWNlc3NhcnkgdG8gdHVyblxuXHRcdCAqIG9mZiBzb3J0aW5nIGFuZCB1c2Ugb3RoZXIgbWV0aG9kcyB0byBkZWFsIHdpdGggdHJhbnNwYXJlbmN5IHJlbmRlcmluZyBlLmcuXG5cdFx0ICogbWFudWFsbHkgZGV0ZXJtaW5pbmcgZWFjaCBvYmplY3QncyByZW5kZXJpbmcgb3JkZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5zb3J0T2JqZWN0cyA9IHRydWU7XG5cblx0XHQvLyB1c2VyLWRlZmluZWQgY2xpcHBpbmdcblxuXHRcdC8qKlxuXHRcdCAqIFVzZXItZGVmaW5lZCBjbGlwcGluZyBwbGFuZXMgc3BlY2lmaWVkIGluIHdvcmxkIHNwYWNlLiBUaGVzZSBwbGFuZXMgYXBwbHkgZ2xvYmFsbHkuXG5cdFx0ICogUG9pbnRzIGluIHNwYWNlIHdob3NlIGRvdCBwcm9kdWN0IHdpdGggdGhlIHBsYW5lIGlzIG5lZ2F0aXZlIGFyZSBjdXQgYXdheS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtBcnJheTxQbGFuZT59XG5cdFx0ICovXG5cdFx0dGhpcy5jbGlwcGluZ1BsYW5lcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgcmVuZGVyZXIgcmVzcGVjdHMgb2JqZWN0LWxldmVsIGNsaXBwaW5nIHBsYW5lcyBvciBub3QuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHRcdC8vIHRvbmUgbWFwcGluZ1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHRvbmUgbWFwcGluZyB0ZWNobmlxdWUgb2YgdGhlIHJlbmRlcmVyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgeyhOb1RvbmVNYXBwaW5nfExpbmVhclRvbmVNYXBwaW5nfFJlaW5oYXJkVG9uZU1hcHBpbmd8Q2luZW9uVG9uZU1hcHBpbmd8QUNFU0ZpbG1pY1RvbmVNYXBwaW5nfEN1c3RvbVRvbmVNYXBwaW5nfEFnWFRvbmVNYXBwaW5nfE5ldXRyYWxUb25lTWFwcGluZyl9XG5cdFx0ICogQGRlZmF1bHQgTm9Ub25lTWFwcGluZ1xuXHRcdCAqL1xuXHRcdHRoaXMudG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0LyoqXG5cdFx0ICogRXhwb3N1cmUgbGV2ZWwgb2YgdG9uZSBtYXBwaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy50b25lTWFwcGluZ0V4cG9zdXJlID0gMS4wO1xuXG5cdFx0Ly8gdHJhbnNtaXNzaW9uXG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9ybWFsaXplZCByZXNvbHV0aW9uIHNjYWxlIGZvciB0aGUgdHJhbnNtaXNzaW9uIHJlbmRlciB0YXJnZXQsIG1lYXN1cmVkIGluIHBlcmNlbnRhZ2Vcblx0XHQgKiBvZiB2aWV3cG9ydCBkaW1lbnNpb25zLiBMb3dlcmluZyB0aGlzIHZhbHVlIGNhbiByZXN1bHQgaW4gc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzXG5cdFx0ICogd2hlbiB1c2luZyB7QGxpbmsgTWVzaFBoeXNpY2FsTWF0ZXJpYWwjdHJhbnNtaXNzaW9ufS5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMudHJhbnNtaXNzaW9uUmVzb2x1dGlvblNjYWxlID0gMS4wO1xuXG5cdFx0Ly8gaW50ZXJuYWwgcHJvcGVydGllc1xuXG5cdFx0Y29uc3QgX3RoaXMgPSB0aGlzO1xuXG5cdFx0bGV0IF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0XHQvLyBpbnRlcm5hbCBzdGF0ZSBjYWNoZVxuXG5cdFx0dGhpcy5fb3V0cHV0Q29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlO1xuXG5cdFx0bGV0IF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSAwO1xuXHRcdGxldCBfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMDtcblx0XHRsZXQgX2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsO1xuXHRcdGxldCBfY3VycmVudE1hdGVyaWFsSWQgPSAtMTtcblxuXHRcdGxldCBfY3VycmVudENhbWVyYSA9IG51bGw7XG5cblx0XHRjb25zdCBfY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblx0XHRjb25zdCBfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHRcdGxldCBfY3VycmVudFNjaXNzb3JUZXN0ID0gbnVsbDtcblxuXHRcdGNvbnN0IF9jdXJyZW50Q2xlYXJDb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0XHRsZXQgX2N1cnJlbnRDbGVhckFscGhhID0gMDtcblxuXHRcdC8vXG5cblx0XHRsZXQgX3dpZHRoID0gY2FudmFzLndpZHRoO1xuXHRcdGxldCBfaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcblxuXHRcdGxldCBfcGl4ZWxSYXRpbyA9IDE7XG5cdFx0bGV0IF9vcGFxdWVTb3J0ID0gbnVsbDtcblx0XHRsZXQgX3RyYW5zcGFyZW50U29ydCA9IG51bGw7XG5cblx0XHRjb25zdCBfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICk7XG5cdFx0Y29uc3QgX3NjaXNzb3IgPSBuZXcgVmVjdG9yNCggMCwgMCwgX3dpZHRoLCBfaGVpZ2h0ICk7XG5cdFx0bGV0IF9zY2lzc29yVGVzdCA9IGZhbHNlO1xuXG5cdFx0Ly8gZnJ1c3R1bVxuXG5cdFx0Y29uc3QgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpO1xuXG5cdFx0Ly8gY2xpcHBpbmdcblxuXHRcdGxldCBfY2xpcHBpbmdFbmFibGVkID0gZmFsc2U7XG5cdFx0bGV0IF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gY2FtZXJhIG1hdHJpY2VzIGNhY2hlXG5cblx0XHRjb25zdCBfY3VycmVudFByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdGNvbnN0IF9wcm9qU2NyZWVuTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdGNvbnN0IF92ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdGNvbnN0IF92ZWN0b3I0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdGNvbnN0IF9lbXB0eVNjZW5lID0geyBiYWNrZ3JvdW5kOiBudWxsLCBmb2c6IG51bGwsIGVudmlyb25tZW50OiBudWxsLCBvdmVycmlkZU1hdGVyaWFsOiBudWxsLCBpc1NjZW5lOiB0cnVlIH07XG5cblx0XHRsZXQgX3JlbmRlckJhY2tncm91bmQgPSBmYWxzZTtcblxuXHRcdGZ1bmN0aW9uIGdldFRhcmdldFBpeGVsUmF0aW8oKSB7XG5cblx0XHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCA/IF9waXhlbFJhdGlvIDogMTtcblxuXHRcdH1cblxuXHRcdC8vIGluaXRpYWxpemVcblxuXHRcdGxldCBfZ2wgPSBjb250ZXh0O1xuXG5cdFx0ZnVuY3Rpb24gZ2V0Q29udGV4dCggY29udGV4dE5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzLmdldENvbnRleHQoIGNvbnRleHROYW1lLCBjb250ZXh0QXR0cmlidXRlcyApO1xuXG5cdFx0fVxuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Y29uc3QgY29udGV4dEF0dHJpYnV0ZXMgPSB7XG5cdFx0XHRcdGFscGhhOiB0cnVlLFxuXHRcdFx0XHRkZXB0aCxcblx0XHRcdFx0c3RlbmNpbCxcblx0XHRcdFx0YW50aWFsaWFzLFxuXHRcdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGEsXG5cdFx0XHRcdHByZXNlcnZlRHJhd2luZ0J1ZmZlcixcblx0XHRcdFx0cG93ZXJQcmVmZXJlbmNlLFxuXHRcdFx0XHRmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0LFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gT2Zmc2NyZWVuQ2FudmFzIGRvZXMgbm90IGhhdmUgc2V0QXR0cmlidXRlLCBzZWUgIzIyODExXG5cdFx0XHRpZiAoICdzZXRBdHRyaWJ1dGUnIGluIGNhbnZhcyApIGNhbnZhcy5zZXRBdHRyaWJ1dGUoICdkYXRhLWVuZ2luZScsIGB0aHJlZS5qcyByJHtSRVZJU0lPTn1gICk7XG5cblx0XHRcdC8vIGV2ZW50IGxpc3RlbmVycyBtdXN0IGJlIHJlZ2lzdGVyZWQgYmVmb3JlIFdlYkdMIGNvbnRleHQgaXMgY3JlYXRlZCwgc2VlICMxMjc1M1xuXHRcdFx0Y2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRcdGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApO1xuXHRcdFx0Y2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRjcmVhdGlvbmVycm9yJywgb25Db250ZXh0Q3JlYXRpb25FcnJvciwgZmFsc2UgKTtcblxuXHRcdFx0aWYgKCBfZ2wgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc3QgY29udGV4dE5hbWUgPSAnd2ViZ2wyJztcblxuXHRcdFx0XHRfZ2wgPSBnZXRDb250ZXh0KCBjb250ZXh0TmFtZSwgY29udGV4dEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0XHRpZiAoIF9nbCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdGlmICggZ2V0Q29udGV4dCggY29udGV4dE5hbWUgKSApIHtcblxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dCB3aXRoIHlvdXIgc2VsZWN0ZWQgYXR0cmlidXRlcy4nICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdFcnJvciBjcmVhdGluZyBXZWJHTCBjb250ZXh0LicgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBlcnJvci5tZXNzYWdlICk7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblxuXHRcdH1cblxuXHRcdGxldCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIHN0YXRlLCBpbmZvO1xuXHRcdGxldCBwcm9wZXJ0aWVzLCB0ZXh0dXJlcywgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIGF0dHJpYnV0ZXMsIGdlb21ldHJpZXMsIG9iamVjdHM7XG5cdFx0bGV0IHByb2dyYW1DYWNoZSwgbWF0ZXJpYWxzLCByZW5kZXJMaXN0cywgcmVuZGVyU3RhdGVzLCBjbGlwcGluZywgc2hhZG93TWFwO1xuXG5cdFx0bGV0IGJhY2tncm91bmQsIG1vcnBodGFyZ2V0cywgYnVmZmVyUmVuZGVyZXIsIGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblxuXHRcdGxldCB1dGlscywgYmluZGluZ1N0YXRlcywgdW5pZm9ybXNHcm91cHM7XG5cblx0XHRmdW5jdGlvbiBpbml0R0xDb250ZXh0KCkge1xuXG5cdFx0XHRleHRlbnNpb25zID0gbmV3IFdlYkdMRXh0ZW5zaW9ucyggX2dsICk7XG5cdFx0XHRleHRlbnNpb25zLmluaXQoKTtcblxuXHRcdFx0dXRpbHMgPSBuZXcgV2ViR0xVdGlscyggX2dsLCBleHRlbnNpb25zICk7XG5cblx0XHRcdGNhcGFiaWxpdGllcyA9IG5ldyBXZWJHTENhcGFiaWxpdGllcyggX2dsLCBleHRlbnNpb25zLCBwYXJhbWV0ZXJzLCB1dGlscyApO1xuXG5cdFx0XHRzdGF0ZSA9IG5ldyBXZWJHTFN0YXRlKCBfZ2wsIGV4dGVuc2lvbnMgKTtcblxuXHRcdFx0aWYgKCBjYXBhYmlsaXRpZXMucmV2ZXJzZURlcHRoQnVmZmVyICYmIHJldmVyc2VEZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFJldmVyc2VkKCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mbyA9IG5ldyBXZWJHTEluZm8oIF9nbCApO1xuXHRcdFx0cHJvcGVydGllcyA9IG5ldyBXZWJHTFByb3BlcnRpZXMoKTtcblx0XHRcdHRleHR1cmVzID0gbmV3IFdlYkdMVGV4dHVyZXMoIF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8gKTtcblx0XHRcdGN1YmVtYXBzID0gbmV3IFdlYkdMQ3ViZU1hcHMoIF90aGlzICk7XG5cdFx0XHRjdWJldXZtYXBzID0gbmV3IFdlYkdMQ3ViZVVWTWFwcyggX3RoaXMgKTtcblx0XHRcdGF0dHJpYnV0ZXMgPSBuZXcgV2ViR0xBdHRyaWJ1dGVzKCBfZ2wgKTtcblx0XHRcdGJpbmRpbmdTdGF0ZXMgPSBuZXcgV2ViR0xCaW5kaW5nU3RhdGVzKCBfZ2wsIGF0dHJpYnV0ZXMgKTtcblx0XHRcdGdlb21ldHJpZXMgPSBuZXcgV2ViR0xHZW9tZXRyaWVzKCBfZ2wsIGF0dHJpYnV0ZXMsIGluZm8sIGJpbmRpbmdTdGF0ZXMgKTtcblx0XHRcdG9iamVjdHMgPSBuZXcgV2ViR0xPYmplY3RzKCBfZ2wsIGdlb21ldHJpZXMsIGF0dHJpYnV0ZXMsIGluZm8gKTtcblx0XHRcdG1vcnBodGFyZ2V0cyA9IG5ldyBXZWJHTE1vcnBodGFyZ2V0cyggX2dsLCBjYXBhYmlsaXRpZXMsIHRleHR1cmVzICk7XG5cdFx0XHRjbGlwcGluZyA9IG5ldyBXZWJHTENsaXBwaW5nKCBwcm9wZXJ0aWVzICk7XG5cdFx0XHRwcm9ncmFtQ2FjaGUgPSBuZXcgV2ViR0xQcm9ncmFtcyggX3RoaXMsIGN1YmVtYXBzLCBjdWJldXZtYXBzLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMsIGJpbmRpbmdTdGF0ZXMsIGNsaXBwaW5nICk7XG5cdFx0XHRtYXRlcmlhbHMgPSBuZXcgV2ViR0xNYXRlcmlhbHMoIF90aGlzLCBwcm9wZXJ0aWVzICk7XG5cdFx0XHRyZW5kZXJMaXN0cyA9IG5ldyBXZWJHTFJlbmRlckxpc3RzKCk7XG5cdFx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZXMoIGV4dGVuc2lvbnMgKTtcblx0XHRcdGJhY2tncm91bmQgPSBuZXcgV2ViR0xCYWNrZ3JvdW5kKCBfdGhpcywgY3ViZW1hcHMsIGN1YmV1dm1hcHMsIHN0YXRlLCBvYmplY3RzLCBfYWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSApO1xuXHRcdFx0c2hhZG93TWFwID0gbmV3IFdlYkdMU2hhZG93TWFwKCBfdGhpcywgb2JqZWN0cywgY2FwYWJpbGl0aWVzICk7XG5cdFx0XHR1bmlmb3Jtc0dyb3VwcyA9IG5ldyBXZWJHTFVuaWZvcm1zR3JvdXBzKCBfZ2wsIGluZm8sIGNhcGFiaWxpdGllcywgc3RhdGUgKTtcblxuXHRcdFx0YnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xCdWZmZXJSZW5kZXJlciggX2dsLCBleHRlbnNpb25zLCBpbmZvICk7XG5cdFx0XHRpbmRleGVkQnVmZmVyUmVuZGVyZXIgPSBuZXcgV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbyApO1xuXG5cdFx0XHRpbmZvLnByb2dyYW1zID0gcHJvZ3JhbUNhY2hlLnByb2dyYW1zO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIEhvbGRzIGRldGFpbHMgYWJvdXQgdGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgY3VycmVudCByZW5kZXJpbmcgY29udGV4dC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI2NhcGFiaWxpdGllc1xuXHRcdFx0ICogQHR5cGUge1dlYkdMUmVuZGVyZXJ+Q2FwYWJpbGl0aWVzfVxuXHRcdFx0ICovXG5cdFx0XHRfdGhpcy5jYXBhYmlsaXRpZXMgPSBjYXBhYmlsaXRpZXM7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUHJvdmlkZXMgbWV0aG9kcyBmb3IgcmV0cmlldmluZyBhbmQgdGVzdGluZyBXZWJHTCBleHRlbnNpb25zLlxuXHRcdFx0ICpcblx0XHRcdCAqIC0gYGdldChleHRlbnNpb25OYW1lOnN0cmluZylgOiBVc2VkIHRvIGNoZWNrIHdoZXRoZXIgYSBXZWJHTCBleHRlbnNpb24gaXMgc3VwcG9ydGVkXG5cdFx0XHQgKiBhbmQgcmV0dXJuIHRoZSBleHRlbnNpb24gb2JqZWN0IGlmIGF2YWlsYWJsZS5cblx0XHRcdCAqIC0gYGhhcyhleHRlbnNpb25OYW1lOnN0cmluZylgOiByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZXh0ZW5zaW9uIGlzIHN1cHBvcnRlZC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI2V4dGVuc2lvbnNcblx0XHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0XHQgKi9cblx0XHRcdF90aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFVzZWQgdG8gdHJhY2sgcHJvcGVydGllcyBvZiBvdGhlciBvYmplY3RzIGxpa2UgbmF0aXZlIFdlYkdMIG9iamVjdHMuXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgV2ViR0xSZW5kZXJlciNwcm9wZXJ0aWVzXG5cdFx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdFx0ICovXG5cdFx0XHRfdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBNYW5hZ2VzIHRoZSByZW5kZXIgbGlzdHMgb2YgdGhlIHJlbmRlcmVyLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBuYW1lIFdlYkdMUmVuZGVyZXIjcmVuZGVyTGlzdHNcblx0XHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0XHQgKi9cblx0XHRcdF90aGlzLnJlbmRlckxpc3RzID0gcmVuZGVyTGlzdHM7XG5cblxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEludGVyZmFjZSBmb3IgbWFuYWdpbmcgc2hhZG93cy5cblx0XHRcdCAqXG5cdFx0XHQgKiBAbmFtZSBXZWJHTFJlbmRlcmVyI3NoYWRvd01hcFxuXHRcdFx0ICogQHR5cGUge1dlYkdMUmVuZGVyZXJ+U2hhZG93TWFwfVxuXHRcdFx0ICovXG5cdFx0XHRfdGhpcy5zaGFkb3dNYXAgPSBzaGFkb3dNYXA7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogSW50ZXJmYWNlIGZvciBtYW5hZ2luZyB0aGUgV2ViR0wgc3RhdGUuXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgV2ViR0xSZW5kZXJlciNzdGF0ZVxuXHRcdFx0ICogQHR5cGUge09iamVjdH1cblx0XHRcdCAqL1xuXHRcdFx0X3RoaXMuc3RhdGUgPSBzdGF0ZTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBIb2xkcyBhIHNlcmllcyBvZiBzdGF0aXN0aWNhbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgR1BVIG1lbW9yeVxuXHRcdFx0ICogYW5kIHRoZSByZW5kZXJpbmcgcHJvY2Vzcy4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcgYW5kIG1vbml0b3JpbmcuXG5cdFx0XHQgKlxuXHRcdFx0ICogQnkgZGVmYXVsdCB0aGVzZSBkYXRhIGFyZSByZXNldCBhdCBlYWNoIHJlbmRlciBjYWxsIGJ1dCB3aGVuIGhhdmluZ1xuXHRcdFx0ICogbXVsdGlwbGUgcmVuZGVyIHBhc3NlcyBwZXIgZnJhbWUgKGUuZy4gd2hlbiB1c2luZyBwb3N0IHByb2Nlc3NpbmcpIGl0IGNhblxuXHRcdFx0ICogYmUgcHJlZmVycmVkIHRvIHJlc2V0IHdpdGggYSBjdXN0b20gcGF0dGVybi4gRmlyc3QsIHNldCBgYXV0b1Jlc2V0YCB0b1xuXHRcdFx0ICogYGZhbHNlYC5cblx0XHRcdCAqIGBgYGpzXG5cdFx0XHQgKiByZW5kZXJlci5pbmZvLmF1dG9SZXNldCA9IGZhbHNlO1xuXHRcdFx0ICogYGBgXG5cdFx0XHQgKiBDYWxsIGByZXNldCgpYCB3aGVuZXZlciB5b3UgaGF2ZSBmaW5pc2hlZCB0byByZW5kZXIgYSBzaW5nbGUgZnJhbWUuXG5cdFx0XHQgKiBgYGBqc1xuXHRcdFx0ICogcmVuZGVyZXIuaW5mby5yZXNldCgpO1xuXHRcdFx0ICogYGBgXG5cdFx0XHQgKlxuXHRcdFx0ICogQG5hbWUgV2ViR0xSZW5kZXJlciNpbmZvXG5cdFx0XHQgKiBAdHlwZSB7V2ViR0xSZW5kZXJlcn5JbmZvfVxuXHRcdFx0ICovXG5cdFx0XHRfdGhpcy5pbmZvID0gaW5mbztcblxuXHRcdH1cblxuXHRcdGluaXRHTENvbnRleHQoKTtcblxuXHRcdC8vIHhyXG5cblx0XHRjb25zdCB4ciA9IG5ldyBXZWJYUk1hbmFnZXIoIF90aGlzLCBfZ2wgKTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgcmVmZXJlbmNlIHRvIHRoZSBYUiBtYW5hZ2VyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1dlYlhSTWFuYWdlcn1cblx0XHQgKi9cblx0XHR0aGlzLnhyID0geHI7XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge1dlYkdMMlJlbmRlcmluZ0NvbnRleHR9IFRoZSByZW5kZXJpbmcgY29udGV4dC5cblx0XHQgKi9cblx0XHR0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfZ2w7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgcmVuZGVyaW5nIGNvbnRleHQgYXR0cmlidXRlcy5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge1dlYkdMQ29udGV4dEF0dHJpYnV0ZXN9IFRoZSByZW5kZXJpbmcgY29udGV4dCBhdHRyaWJ1dGVzLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0Q29udGV4dEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTaW11bGF0ZXMgYSBsb3NzIG9mIHRoZSBXZWJHTCBjb250ZXh0LiBUaGlzIHJlcXVpcmVzIHN1cHBvcnQgZm9yIHRoZSBgV0VCR0xfbG9zZV9jb250ZXh0YCBleHRlbnNpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5mb3JjZUNvbnRleHRMb3NzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zdCBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2xvc2VfY29udGV4dCcgKTtcblx0XHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLmxvc2VDb250ZXh0KCk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2ltdWxhdGVzIGEgcmVzdG9yZSBvZiB0aGUgV2ViR0wgY29udGV4dC4gVGhpcyByZXF1aXJlcyBzdXBwb3J0IGZvciB0aGUgYFdFQkdMX2xvc2VfY29udGV4dGAgZXh0ZW5zaW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZm9yY2VDb250ZXh0UmVzdG9yZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9sb3NlX2NvbnRleHQnICk7XG5cdFx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5yZXN0b3JlQ29udGV4dCgpO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHBpeGVsIHJhdGlvLlxuXHRcdCAqXG5cdFx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgcGl4ZWwgcmF0aW8uXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX3BpeGVsUmF0aW87XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgZ2l2ZW4gcGl4ZWwgcmF0aW8gYW5kIHJlc2l6ZXMgdGhlIGNhbnZhcyBpZiBuZWNlc3NhcnkuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgcGl4ZWwgcmF0aW8uXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0XHRfcGl4ZWxSYXRpbyA9IHZhbHVlO1xuXG5cdFx0XHR0aGlzLnNldFNpemUoIF93aWR0aCwgX2hlaWdodCwgZmFsc2UgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSByZW5kZXJlcidzIHNpemUgaW4gbG9naWNhbCBwaXhlbHMuIFRoaXMgbWV0aG9kIGRvZXMgbm90IGhvbm9yIHRoZSBwaXhlbCByYXRpby5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7VmVjdG9yMn0gdGFyZ2V0IC0gVGhlIG1ldGhvZCB3cml0ZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHRhcmdldCBvYmplY3QuXG5cdFx0ICogQHJldHVybiB7VmVjdG9yMn0gVGhlIHJlbmRlcmVyJ3Mgc2l6ZSBpbiBsb2dpY2FsIHBpeGVscy5cblx0XHQgKi9cblx0XHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCwgX2hlaWdodCApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlc2l6ZXMgdGhlIG91dHB1dCBjYW52YXMgdG8gKHdpZHRoLCBoZWlnaHQpIHdpdGggZGV2aWNlIHBpeGVsIHJhdGlvIHRha2VuXG5cdFx0ICogaW50byBhY2NvdW50LCBhbmQgYWxzbyBzZXRzIHRoZSB2aWV3cG9ydCB0byBmaXQgdGhhdCBzaXplLCBzdGFydGluZyBpbiAoMCxcblx0XHQgKiAwKS4gU2V0dGluZyBgdXBkYXRlU3R5bGVgIHRvIGZhbHNlIHByZXZlbnRzIGFueSBzdHlsZSBjaGFuZ2VzIHRvIHRoZSBvdXRwdXQgY2FudmFzLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZVN0eWxlPXRydWVdIC0gV2hldGhlciB0byB1cGRhdGUgdGhlIGBzdHlsZWAgYXR0cmlidXRlIG9mIHRoZSBjYW52YXMgb3Igbm90LlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0U2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgdXBkYXRlU3R5bGUgPSB0cnVlICkge1xuXG5cdFx0XHRpZiAoIHhyLmlzUHJlc2VudGluZyApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDYW5cXCd0IGNoYW5nZSBzaXplIHdoaWxlIFZSIGRldmljZSBpcyBwcmVzZW50aW5nLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0Y2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBfcGl4ZWxSYXRpbyApO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoIGhlaWdodCAqIF9waXhlbFJhdGlvICk7XG5cblx0XHRcdGlmICggdXBkYXRlU3R5bGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHRcdFx0XHRjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgZHJhd2luZyBidWZmZXIgc2l6ZSBpbiBwaHlzaWNhbCBwaXhlbHMuIFRoaXMgbWV0aG9kIGhvbm9ycyB0aGUgcGl4ZWwgcmF0aW8uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHRcdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IFRoZSBkcmF3aW5nIGJ1ZmZlciBzaXplLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCAqIF9waXhlbFJhdGlvLCBfaGVpZ2h0ICogX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbWV0aG9kIGFsbG93cyB0byBkZWZpbmUgdGhlIGRyYXdpbmcgYnVmZmVyIHNpemUgYnkgc3BlY2lmeWluZ1xuXHRcdCAqIHdpZHRoLCBoZWlnaHQgYW5kIHBpeGVsIHJhdGlvIGFsbCBhdCBvbmNlLiBUaGUgc2l6ZSBvZiB0aGUgZHJhd2luZ1xuXHRcdCAqIGJ1ZmZlciBpcyBjb21wdXRlZCB3aXRoIHRoaXMgZm9ybXVsYTpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIHNpemUueCA9IHdpZHRoICogcGl4ZWxSYXRpbztcblx0XHQgKiBzaXplLnkgPSBoZWlnaHQgKiBwaXhlbFJhdGlvO1xuXHRcdCAqIGBgYFxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IGluIGxvZ2ljYWwgcGl4ZWxzLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvIC0gVGhlIHBpeGVsIHJhdGlvLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0RHJhd2luZ0J1ZmZlclNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHBpeGVsUmF0aW8gKSB7XG5cblx0XHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0X3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuXG5cdFx0XHRjYW52YXMud2lkdGggPSBNYXRoLmZsb29yKCB3aWR0aCAqIHBpeGVsUmF0aW8gKTtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBwaXhlbFJhdGlvICk7XG5cblx0XHRcdHRoaXMuc2V0Vmlld3BvcnQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZpZXdwb3J0IGRlZmluaXRpb24uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHRhcmdldCAtIFRoZSBtZXRob2Qgd3JpdGVzIHRoZSByZXN1bHQgaW4gdGhpcyB0YXJnZXQgb2JqZWN0LlxuXHRcdCAqIEByZXR1cm4ge1ZlY3RvcjJ9IFRoZSBjdXJyZW50IHZpZXdwb3J0IGRlZmluaXRpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRDdXJyZW50Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBfY3VycmVudFZpZXdwb3J0ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgdmlld3BvcnQgZGVmaW5pdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7VmVjdG9yNH0gdGFyZ2V0IC0gVGhlIG1ldGhvZCB3cml0ZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHRhcmdldCBvYmplY3QuXG5cdFx0ICogQHJldHVybiB7VmVjdG9yNH0gVGhlIHZpZXdwb3J0IGRlZmluaXRpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRWaWV3cG9ydCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF92aWV3cG9ydCApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIHZpZXdwb3J0IHRvIHJlbmRlciBmcm9tIGAoeCwgeSlgIHRvIGAoeCArIHdpZHRoLCB5ICsgaGVpZ2h0KWAuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge251bWJlciB8IFZlY3RvcjR9IHggLSBUaGUgaG9yaXpvbnRhbCBjb29yZGluYXRlIGZvciB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0IG9yaWdpbiBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdFx0ICogT3IgYWx0ZXJuYXRpdmVseSBhIGZvdXItY29tcG9uZW50IHZlY3RvciBzcGVjaWZ5aW5nIGFsbCB0aGUgcGFyYW1ldGVycyBvZiB0aGUgdmlld3BvcnQuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgdmVydGljYWwgY29vcmRpbmF0ZSBmb3IgdGhlIGxvd2VyIGxlZnQgY29ybmVyIG9mIHRoZSB2aWV3cG9ydCBvcmlnaW4gIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHZpZXdwb3J0IGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQgaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHRcdGlmICggeC5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdFx0X3ZpZXdwb3J0LnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X3ZpZXdwb3J0LnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLnJvdW5kKCkgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBzY2lzc29yIHJlZ2lvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7VmVjdG9yNH0gdGFyZ2V0IC0gVGhlIG1ldGhvZCB3cml0ZXMgdGhlIHJlc3VsdCBpbiB0aGlzIHRhcmdldCBvYmplY3QuXG5cdFx0ICogQHJldHVybiB7VmVjdG9yNH0gVGhlIHNjaXNzb3IgcmVnaW9uLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0U2Npc3NvciA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9zY2lzc29yICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgc2Npc3NvciByZWdpb24gdG8gcmVuZGVyIGZyb20gYCh4LCB5KWAgdG8gYCh4ICsgd2lkdGgsIHkgKyBoZWlnaHQpYC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyIHwgVmVjdG9yNH0geCAtIFRoZSBob3Jpem9udGFsIGNvb3JkaW5hdGUgZm9yIHRoZSBsb3dlciBsZWZ0IGNvcm5lciBvZiB0aGUgc2Npc3NvciByZWdpb24gb3JpZ2luIGluIGxvZ2ljYWwgcGl4ZWwgdW5pdC5cblx0XHQgKiBPciBhbHRlcm5hdGl2ZWx5IGEgZm91ci1jb21wb25lbnQgdmVjdG9yIHNwZWNpZnlpbmcgYWxsIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBzY2lzc29yIHJlZ2lvbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIGZvciB0aGUgbG93ZXIgbGVmdCBjb3JuZXIgb2YgdGhlIHNjaXNzb3IgcmVnaW9uIG9yaWdpbiAgaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSB3aWR0aCBvZiB0aGUgc2Npc3NvciByZWdpb24gaW4gbG9naWNhbCBwaXhlbCB1bml0LlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBzY2lzc29yIHJlZ2lvbiBpbiBsb2dpY2FsIHBpeGVsIHVuaXQuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRTY2lzc29yID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0XHRpZiAoIHguaXNWZWN0b3I0ICkge1xuXG5cdFx0XHRcdF9zY2lzc29yLnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X3NjaXNzb3Iuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yLmNvcHkoIF9zY2lzc29yICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkucm91bmQoKSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzY2lzc29yIHRlc3QgaXMgZW5hYmxlZC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHNjaXNzb3IgdGVzdCBpcyBlbmFibGVkIG9yIG5vdC5cblx0XHQgKi9cblx0XHR0aGlzLmdldFNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gX3NjaXNzb3JUZXN0O1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHRoZSBzY2lzc29yIHRlc3QuIFdoZW4gdGhpcyBpcyBlbmFibGVkLCBvbmx5IHRoZSBwaXhlbHNcblx0XHQgKiB3aXRoaW4gdGhlIGRlZmluZWQgc2Npc3NvciBhcmVhIHdpbGwgYmUgYWZmZWN0ZWQgYnkgZnVydGhlciByZW5kZXJlclxuXHRcdCAqIGFjdGlvbnMuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IGJvb2xlYW4gLSBXaGV0aGVyIHRoZSBzY2lzc29yIHRlc3QgaXMgZW5hYmxlZCBvciBub3QuXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdFx0c3RhdGUuc2V0U2Npc3NvclRlc3QoIF9zY2lzc29yVGVzdCA9IGJvb2xlYW4gKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIGEgY3VzdG9tIG9wYXF1ZSBzb3J0IGZ1bmN0aW9uIGZvciB0aGUgcmVuZGVyIGxpc3RzLiBQYXNzIGBudWxsYFxuXHRcdCAqIHRvIHVzZSB0aGUgZGVmYXVsdCBgcGFpbnRlclNvcnRTdGFibGVgIGZ1bmN0aW9uLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHs/RnVuY3Rpb259IG1ldGhvZCAtIFRoZSBvcGFxdWUgc29ydCBmdW5jdGlvbi5cblx0XHQgKi9cblx0XHR0aGlzLnNldE9wYXF1ZVNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdFx0X29wYXF1ZVNvcnQgPSBtZXRob2Q7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyBhIGN1c3RvbSB0cmFuc3BhcmVudCBzb3J0IGZ1bmN0aW9uIGZvciB0aGUgcmVuZGVyIGxpc3RzLiBQYXNzIGBudWxsYFxuXHRcdCAqIHRvIHVzZSB0aGUgZGVmYXVsdCBgcmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlYCBmdW5jdGlvbi5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBtZXRob2QgLSBUaGUgb3BhcXVlIHNvcnQgZnVuY3Rpb24uXG5cdFx0ICovXG5cdFx0dGhpcy5zZXRUcmFuc3BhcmVudFNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdFx0X3RyYW5zcGFyZW50U29ydCA9IG1ldGhvZDtcblxuXHRcdH07XG5cblx0XHQvLyBDbGVhcmluZ1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY2xlYXIgY29sb3IuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge0NvbG9yfSB0YXJnZXQgLSBUaGUgbWV0aG9kIHdyaXRlcyB0aGUgcmVzdWx0IGluIHRoaXMgdGFyZ2V0IG9iamVjdC5cblx0XHQgKiBAcmV0dXJuIHtDb2xvcn0gVGhlIGNsZWFyIGNvbG9yLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGJhY2tncm91bmQuZ2V0Q2xlYXJDb2xvcigpICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0cyB0aGUgY2xlYXIgY29sb3IgYW5kIGFscGhhLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtDb2xvcn0gY29sb3IgLSBUaGUgY2xlYXIgY29sb3IuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFthbHBoYT0xXSAtIFRoZSBjbGVhciBhbHBoYS5cblx0XHQgKi9cblx0XHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGJhY2tncm91bmQuc2V0Q2xlYXJDb2xvciggLi4uYXJndW1lbnRzICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgY2xlYXIgYWxwaGEuIFJhbmdlcyB3aXRoaW4gYFswLDFdYC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNsZWFyIGFscGhhLlxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGNsZWFyIGFscGhhLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGFscGhhIC0gVGhlIGNsZWFyIGFscGhhLlxuXHRcdCAqL1xuXHRcdHRoaXMuc2V0Q2xlYXJBbHBoYSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0YmFja2dyb3VuZC5zZXRDbGVhckFscGhhKCAuLi5hcmd1bWVudHMgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBUZWxscyB0aGUgcmVuZGVyZXIgdG8gY2xlYXIgaXRzIGNvbG9yLCBkZXB0aCBvciBzdGVuY2lsIGRyYXdpbmcgYnVmZmVyKHMpLlxuXHRcdCAqIFRoaXMgbWV0aG9kIGluaXRpYWxpemVzIHRoZSBidWZmZXJzIHRvIHRoZSBjdXJyZW50IGNsZWFyIGNvbG9yIHZhbHVlcy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NvbG9yPXRydWVdIC0gV2hldGhlciB0aGUgY29sb3IgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZXB0aD10cnVlXSAtIFdoZXRoZXIgdGhlIGRlcHRoIGJ1ZmZlciBzaG91bGQgYmUgY2xlYXJlZCBvciBub3QuXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBbc3RlbmNpbD10cnVlXSAtIFdoZXRoZXIgdGhlIHN0ZW5jaWwgYnVmZmVyIHNob3VsZCBiZSBjbGVhcmVkIG9yIG5vdC5cblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCBjb2xvciA9IHRydWUsIGRlcHRoID0gdHJ1ZSwgc3RlbmNpbCA9IHRydWUgKSB7XG5cblx0XHRcdGxldCBiaXRzID0gMDtcblxuXHRcdFx0aWYgKCBjb2xvciApIHtcblxuXHRcdFx0XHQvLyBjaGVjayBpZiB3ZSdyZSB0cnlpbmcgdG8gY2xlYXIgYW4gaW50ZWdlciB0YXJnZXRcblx0XHRcdFx0bGV0IGlzSW50ZWdlckZvcm1hdCA9IGZhbHNlO1xuXHRcdFx0XHRpZiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGFyZ2V0Rm9ybWF0ID0gX2N1cnJlbnRSZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdFx0aXNJbnRlZ2VyRm9ybWF0ID0gdGFyZ2V0Rm9ybWF0ID09PSBSR0JBSW50ZWdlckZvcm1hdCB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0Rm9ybWF0ID09PSBSR0ludGVnZXJGb3JtYXQgfHxcblx0XHRcdFx0XHRcdHRhcmdldEZvcm1hdCA9PT0gUmVkSW50ZWdlckZvcm1hdDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gdXNlIHRoZSBhcHByb3ByaWF0ZSBjbGVhciBmdW5jdGlvbnMgdG8gY2xlYXIgdGhlIHRhcmdldCBpZiBpdCdzIGEgc2lnbmVkXG5cdFx0XHRcdC8vIG9yIHVuc2lnbmVkIGludGVnZXIgdGFyZ2V0XG5cdFx0XHRcdGlmICggaXNJbnRlZ2VyRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGFyZ2V0VHlwZSA9IF9jdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZTtcblx0XHRcdFx0XHRjb25zdCBpc1Vuc2lnbmVkVHlwZSA9IHRhcmdldFR5cGUgPT09IFVuc2lnbmVkQnl0ZVR5cGUgfHxcblx0XHRcdFx0XHRcdHRhcmdldFR5cGUgPT09IFVuc2lnbmVkSW50VHlwZSB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRTaG9ydFR5cGUgfHxcblx0XHRcdFx0XHRcdHRhcmdldFR5cGUgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSB8fFxuXHRcdFx0XHRcdFx0dGFyZ2V0VHlwZSA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlIHx8XG5cdFx0XHRcdFx0XHR0YXJnZXRUeXBlID09PSBVbnNpZ25lZFNob3J0NTU1MVR5cGU7XG5cblx0XHRcdFx0XHRjb25zdCBjbGVhckNvbG9yID0gYmFja2dyb3VuZC5nZXRDbGVhckNvbG9yKCk7XG5cdFx0XHRcdFx0Y29uc3QgYSA9IGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpO1xuXHRcdFx0XHRcdGNvbnN0IHIgPSBjbGVhckNvbG9yLnI7XG5cdFx0XHRcdFx0Y29uc3QgZyA9IGNsZWFyQ29sb3IuZztcblx0XHRcdFx0XHRjb25zdCBiID0gY2xlYXJDb2xvci5iO1xuXG5cdFx0XHRcdFx0aWYgKCBpc1Vuc2lnbmVkVHlwZSApIHtcblxuXHRcdFx0XHRcdFx0dWludENsZWFyQ29sb3JbIDAgXSA9IHI7XG5cdFx0XHRcdFx0XHR1aW50Q2xlYXJDb2xvclsgMSBdID0gZztcblx0XHRcdFx0XHRcdHVpbnRDbGVhckNvbG9yWyAyIF0gPSBiO1xuXHRcdFx0XHRcdFx0dWludENsZWFyQ29sb3JbIDMgXSA9IGE7XG5cdFx0XHRcdFx0XHRfZ2wuY2xlYXJCdWZmZXJ1aXYoIF9nbC5DT0xPUiwgMCwgdWludENsZWFyQ29sb3IgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGludENsZWFyQ29sb3JbIDAgXSA9IHI7XG5cdFx0XHRcdFx0XHRpbnRDbGVhckNvbG9yWyAxIF0gPSBnO1xuXHRcdFx0XHRcdFx0aW50Q2xlYXJDb2xvclsgMiBdID0gYjtcblx0XHRcdFx0XHRcdGludENsZWFyQ29sb3JbIDMgXSA9IGE7XG5cdFx0XHRcdFx0XHRfZ2wuY2xlYXJCdWZmZXJpdiggX2dsLkNPTE9SLCAwLCBpbnRDbGVhckNvbG9yICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJpdHMgfD0gX2dsLkNPTE9SX0JVRkZFUl9CSVQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGVwdGggKSB7XG5cblx0XHRcdFx0Yml0cyB8PSBfZ2wuREVQVEhfQlVGRkVSX0JJVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHN0ZW5jaWwgKSB7XG5cblx0XHRcdFx0Yml0cyB8PSBfZ2wuU1RFTkNJTF9CVUZGRVJfQklUO1xuXHRcdFx0XHR0aGlzLnN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRNYXNrKCAweGZmZmZmZmZmICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLmNsZWFyKCBiaXRzICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ2xlYXJzIHRoZSBjb2xvciBidWZmZXIuIEVxdWl2YWxlbnQgdG8gY2FsbGluZyBgcmVuZGVyZXIuY2xlYXIoIHRydWUsIGZhbHNlLCBmYWxzZSApYC5cblx0XHQgKi9cblx0XHR0aGlzLmNsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHRoaXMuY2xlYXIoIHRydWUsIGZhbHNlLCBmYWxzZSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENsZWFycyB0aGUgZGVwdGggYnVmZmVyLiBFcXVpdmFsZW50IHRvIGNhbGxpbmcgYHJlbmRlcmVyLmNsZWFyKCBmYWxzZSwgdHJ1ZSwgZmFsc2UgKWAuXG5cdFx0ICovXG5cdFx0dGhpcy5jbGVhckRlcHRoID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgdHJ1ZSwgZmFsc2UgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBDbGVhcnMgdGhlIHN0ZW5jaWwgYnVmZmVyLiBFcXVpdmFsZW50IHRvIGNhbGxpbmcgYHJlbmRlcmVyLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKWAuXG5cdFx0ICovXG5cdFx0dGhpcy5jbGVhclN0ZW5jaWwgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHRoaXMuY2xlYXIoIGZhbHNlLCBmYWxzZSwgdHJ1ZSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEZyZWVzIHRoZSBHUFUtcmVsYXRlZCByZXNvdXJjZXMgYWxsb2NhdGVkIGJ5IHRoaXMgaW5zdGFuY2UuIENhbGwgdGhpc1xuXHRcdCAqIG1ldGhvZCB3aGVuZXZlciB0aGlzIGluc3RhbmNlIGlzIG5vIGxvbmdlciB1c2VkIGluIHlvdXIgYXBwLlxuXHRcdCAqL1xuXHRcdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRcdGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApO1xuXHRcdFx0Y2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRjcmVhdGlvbmVycm9yJywgb25Db250ZXh0Q3JlYXRpb25FcnJvciwgZmFsc2UgKTtcblxuXHRcdFx0YmFja2dyb3VuZC5kaXNwb3NlKCk7XG5cdFx0XHRyZW5kZXJMaXN0cy5kaXNwb3NlKCk7XG5cdFx0XHRyZW5kZXJTdGF0ZXMuZGlzcG9zZSgpO1xuXHRcdFx0cHJvcGVydGllcy5kaXNwb3NlKCk7XG5cdFx0XHRjdWJlbWFwcy5kaXNwb3NlKCk7XG5cdFx0XHRjdWJldXZtYXBzLmRpc3Bvc2UoKTtcblx0XHRcdG9iamVjdHMuZGlzcG9zZSgpO1xuXHRcdFx0YmluZGluZ1N0YXRlcy5kaXNwb3NlKCk7XG5cdFx0XHR1bmlmb3Jtc0dyb3Vwcy5kaXNwb3NlKCk7XG5cdFx0XHRwcm9ncmFtQ2FjaGUuZGlzcG9zZSgpO1xuXG5cdFx0XHR4ci5kaXNwb3NlKCk7XG5cblx0XHRcdHhyLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdzZXNzaW9uc3RhcnQnLCBvblhSU2Vzc2lvblN0YXJ0ICk7XG5cdFx0XHR4ci5yZW1vdmVFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmVuZCcsIG9uWFJTZXNzaW9uRW5kICk7XG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHR9O1xuXG5cdFx0Ly8gRXZlbnRzXG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRMb3N0KCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IExvc3QuJyApO1xuXG5cdFx0XHRfaXNDb250ZXh0TG9zdCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRSZXN0b3JlKCAvKiBldmVudCAqLyApIHtcblxuXHRcdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IFJlc3RvcmVkLicgKTtcblxuXHRcdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgaW5mb0F1dG9SZXNldCA9IGluZm8uYXV0b1Jlc2V0O1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwRW5hYmxlZCA9IHNoYWRvd01hcC5lbmFibGVkO1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwQXV0b1VwZGF0ZSA9IHNoYWRvd01hcC5hdXRvVXBkYXRlO1xuXHRcdFx0Y29uc3Qgc2hhZG93TWFwTmVlZHNVcGRhdGUgPSBzaGFkb3dNYXAubmVlZHNVcGRhdGU7XG5cdFx0XHRjb25zdCBzaGFkb3dNYXBUeXBlID0gc2hhZG93TWFwLnR5cGU7XG5cblx0XHRcdGluaXRHTENvbnRleHQoKTtcblxuXHRcdFx0aW5mby5hdXRvUmVzZXQgPSBpbmZvQXV0b1Jlc2V0O1xuXHRcdFx0c2hhZG93TWFwLmVuYWJsZWQgPSBzaGFkb3dNYXBFbmFibGVkO1xuXHRcdFx0c2hhZG93TWFwLmF1dG9VcGRhdGUgPSBzaGFkb3dNYXBBdXRvVXBkYXRlO1xuXHRcdFx0c2hhZG93TWFwLm5lZWRzVXBkYXRlID0gc2hhZG93TWFwTmVlZHNVcGRhdGU7XG5cdFx0XHRzaGFkb3dNYXAudHlwZSA9IHNoYWRvd01hcFR5cGU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRDcmVhdGlvbkVycm9yKCBldmVudCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEEgV2ViR0wgY29udGV4dCBjb3VsZCBub3QgYmUgY3JlYXRlZC4gUmVhc29uOiAnLCBldmVudC5zdGF0dXNNZXNzYWdlICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHRcdGNvbnN0IG1hdGVyaWFsID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0XHRtYXRlcmlhbC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uTWF0ZXJpYWxEaXNwb3NlICk7XG5cblx0XHRcdGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXHRcdC8vIEJ1ZmZlciBkZWFsbG9jYXRpb25cblxuXHRcdGZ1bmN0aW9uIGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRcdHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2VzKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggbWF0ZXJpYWwgKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApLnByb2dyYW1zO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1zICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cHJvZ3JhbXMuZm9yRWFjaCggZnVuY3Rpb24gKCBwcm9ncmFtICkge1xuXG5cdFx0XHRcdFx0cHJvZ3JhbUNhY2hlLnJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtICk7XG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHByb2dyYW1DYWNoZS5yZWxlYXNlU2hhZGVyQ2FjaGUoIG1hdGVyaWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBCdWZmZXIgcmVuZGVyaW5nXG5cblx0XHR0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCA9IGZ1bmN0aW9uICggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICkge1xuXG5cdFx0XHRpZiAoIHNjZW5lID09PSBudWxsICkgc2NlbmUgPSBfZW1wdHlTY2VuZTsgLy8gcmVuZGVyQnVmZmVyRGlyZWN0IHNlY29uZCBwYXJhbWV0ZXIgdXNlZCB0byBiZSBmb2cgKGNvdWxkIGJlIG51bGwpXG5cblx0XHRcdGNvbnN0IGZyb250RmFjZUNXID0gKCBvYmplY3QuaXNNZXNoICYmIG9iamVjdC5tYXRyaXhXb3JsZC5kZXRlcm1pbmFudCgpIDwgMCApO1xuXG5cdFx0XHRjb25zdCBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QgKTtcblxuXHRcdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApO1xuXG5cdFx0XHQvL1xuXG5cdFx0XHRsZXQgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGxldCByYW5nZUZhY3RvciA9IDE7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGluZGV4ID0gZ2VvbWV0cmllcy5nZXRXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0XHRcdHJhbmdlRmFjdG9yID0gMjtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRjb25zdCBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRcdGxldCBkcmF3U3RhcnQgPSBkcmF3UmFuZ2Uuc3RhcnQgKiByYW5nZUZhY3Rvcjtcblx0XHRcdGxldCBkcmF3RW5kID0gKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSAqIHJhbmdlRmFjdG9yO1xuXG5cdFx0XHRpZiAoIGdyb3VwICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGRyYXdTdGFydCA9IE1hdGgubWF4KCBkcmF3U3RhcnQsIGdyb3VwLnN0YXJ0ICogcmFuZ2VGYWN0b3IgKTtcblx0XHRcdFx0ZHJhd0VuZCA9IE1hdGgubWluKCBkcmF3RW5kLCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSAqIHJhbmdlRmFjdG9yICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkcmF3U3RhcnQgPSBNYXRoLm1heCggZHJhd1N0YXJ0LCAwICk7XG5cdFx0XHRcdGRyYXdFbmQgPSBNYXRoLm1pbiggZHJhd0VuZCwgaW5kZXguY291bnQgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggcG9zaXRpb24gIT09IHVuZGVmaW5lZCAmJiBwb3NpdGlvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRkcmF3U3RhcnQgPSBNYXRoLm1heCggZHJhd1N0YXJ0LCAwICk7XG5cdFx0XHRcdGRyYXdFbmQgPSBNYXRoLm1pbiggZHJhd0VuZCwgcG9zaXRpb24uY291bnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBkcmF3Q291bnQgPSBkcmF3RW5kIC0gZHJhd1N0YXJ0O1xuXG5cdFx0XHRpZiAoIGRyYXdDb3VudCA8IDAgfHwgZHJhd0NvdW50ID09PSBJbmZpbml0eSApIHJldHVybjtcblxuXHRcdFx0Ly9cblxuXHRcdFx0YmluZGluZ1N0YXRlcy5zZXR1cCggb2JqZWN0LCBtYXRlcmlhbCwgcHJvZ3JhbSwgZ2VvbWV0cnksIGluZGV4ICk7XG5cblx0XHRcdGxldCBhdHRyaWJ1dGU7XG5cdFx0XHRsZXQgcmVuZGVyZXIgPSBidWZmZXJSZW5kZXJlcjtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggaW5kZXggKTtcblxuXHRcdFx0XHRyZW5kZXJlciA9IGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblx0XHRcdFx0cmVuZGVyZXIuc2V0SW5kZXgoIGF0dHJpYnV0ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGlmICggb2JqZWN0LmlzTWVzaCApIHtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHN0YXRlLnNldExpbmVXaWR0aCggbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoICogZ2V0VGFyZ2V0UGl4ZWxSYXRpbygpICk7XG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVTICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5UUklBTkdMRVMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdFx0bGV0IGxpbmVXaWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDtcblxuXHRcdFx0XHRpZiAoIGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkICkgbGluZVdpZHRoID0gMTsgLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWxcblxuXHRcdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIGxpbmVXaWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzTGluZVNlZ21lbnRzICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLkxJTkVTICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGluZUxvb3AgKSB7XG5cblx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCBfZ2wuTElORV9MT09QICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIF9nbC5MSU5FX1NUUklQICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLlBPSU5UUyApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTcHJpdGUgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggX2dsLlRSSUFOR0xFUyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggKSB7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdC8vIEBkZXByZWNhdGVkLCByMTc0XG5cdFx0XHRcdFx0d2Fybk9uY2UoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiByZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHIxODQuIEFwcGVuZCB0byByZW5kZXJNdWx0aURyYXcgYXJndW1lbnRzIGFuZCB1c2UgaW5kaXJlY3Rpb24uJyApO1xuXHRcdFx0XHRcdHJlbmRlcmVyLnJlbmRlck11bHRpRHJhd0luc3RhbmNlcyggb2JqZWN0Ll9tdWx0aURyYXdTdGFydHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnRzLCBvYmplY3QuX211bHRpRHJhd0NvdW50LCBvYmplY3QuX211bHRpRHJhd0luc3RhbmNlcyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoICEgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9tdWx0aV9kcmF3JyApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBzdGFydHMgPSBvYmplY3QuX211bHRpRHJhd1N0YXJ0cztcblx0XHRcdFx0XHRcdGNvbnN0IGNvdW50cyA9IG9iamVjdC5fbXVsdGlEcmF3Q291bnRzO1xuXHRcdFx0XHRcdFx0Y29uc3QgZHJhd0NvdW50ID0gb2JqZWN0Ll9tdWx0aURyYXdDb3VudDtcblx0XHRcdFx0XHRcdGNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IGluZGV4ID8gYXR0cmlidXRlcy5nZXQoIGluZGV4ICkuYnl0ZXNQZXJFbGVtZW50IDogMTtcblx0XHRcdFx0XHRcdGNvbnN0IHVuaWZvcm1zID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICkuY3VycmVudFByb2dyYW0uZ2V0VW5pZm9ybXMoKTtcblx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMDsgaSA8IGRyYXdDb3VudDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR1bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnX2dsX0RyYXdJRCcsIGkgKTtcblx0XHRcdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyKCBzdGFydHNbIGkgXSAvIGJ5dGVzUGVyRWxlbWVudCwgY291bnRzWyBpIF0gKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0cmVuZGVyZXIucmVuZGVyTXVsdGlEcmF3KCBvYmplY3QuX211bHRpRHJhd1N0YXJ0cywgb2JqZWN0Ll9tdWx0aURyYXdDb3VudHMsIG9iamVjdC5fbXVsdGlEcmF3Q291bnQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVySW5zdGFuY2VzKCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdFx0Y29uc3QgbWF4SW5zdGFuY2VDb3VudCA9IGdlb21ldHJ5Ll9tYXhJbnN0YW5jZUNvdW50ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeS5fbWF4SW5zdGFuY2VDb3VudCA6IEluZmluaXR5O1xuXHRcdFx0XHRjb25zdCBpbnN0YW5jZUNvdW50ID0gTWF0aC5taW4oIGdlb21ldHJ5Lmluc3RhbmNlQ291bnQsIG1heEluc3RhbmNlQ291bnQgKTtcblxuXHRcdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGRyYXdTdGFydCwgZHJhd0NvdW50LCBpbnN0YW5jZUNvdW50ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIucmVuZGVyKCBkcmF3U3RhcnQsIGRyYXdDb3VudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0Ly8gQ29tcGlsZVxuXG5cdFx0ZnVuY3Rpb24gcHJlcGFyZU1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC50cmFuc3BhcmVudCA9PT0gdHJ1ZSAmJiBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlICYmIG1hdGVyaWFsLmZvcmNlU2luZ2xlUGFzcyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IEJhY2tTaWRlO1xuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IEZyb250U2lkZTtcblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBEb3VibGVTaWRlO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdldFByb2dyYW0oIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIENvbXBpbGVzIGFsbCBtYXRlcmlhbHMgaW4gdGhlIHNjZW5lIHdpdGggdGhlIGNhbWVyYS4gVGhpcyBpcyB1c2VmdWwgdG8gcHJlY29tcGlsZSBzaGFkZXJzXG5cdFx0ICogYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJpbmcuIElmIHlvdSB3YW50IHRvIGFkZCBhIDNEIG9iamVjdCB0byBhbiBleGlzdGluZyBzY2VuZSwgdXNlIHRoZSB0aGlyZFxuXHRcdCAqIG9wdGlvbmFsIHBhcmFtZXRlciBmb3IgYXBwbHlpbmcgdGhlIHRhcmdldCBzY2VuZS5cblx0XHQgKlxuXHRcdCAqIE5vdGUgdGhhdCB0aGUgKHRhcmdldCkgc2NlbmUncyBsaWdodGluZyBhbmQgZW52aXJvbm1lbnQgbXVzdCBiZSBjb25maWd1cmVkIGJlZm9yZSBjYWxsaW5nIHRoaXMgbWV0aG9kLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtPYmplY3QzRH0gc2NlbmUgLSBUaGUgc2NlbmUgb3IgYW5vdGhlciB0eXBlIG9mIDNEIG9iamVjdCB0byBwcmVjb21waWxlLlxuXHRcdCAqIEBwYXJhbSB7Q2FtZXJhfSBjYW1lcmEgLSBUaGUgY2FtZXJhLlxuXHRcdCAqIEBwYXJhbSB7P1NjZW5lfSBbdGFyZ2V0U2NlbmU9bnVsbF0gLSBUaGUgdGFyZ2V0IHNjZW5lLlxuXHRcdCAqIEByZXR1cm4gez9TZXR9IFRoZSBwcmVjb21waWxlZCBtYXRlcmlhbHMuXG5cdFx0ICovXG5cdFx0dGhpcy5jb21waWxlID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhLCB0YXJnZXRTY2VuZSA9IG51bGwgKSB7XG5cblx0XHRcdGlmICggdGFyZ2V0U2NlbmUgPT09IG51bGwgKSB0YXJnZXRTY2VuZSA9IHNjZW5lO1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCB0YXJnZXRTY2VuZSApO1xuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoIGNhbWVyYSApO1xuXG5cdFx0XHRyZW5kZXJTdGF0ZVN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHQvLyBnYXRoZXIgbGlnaHRzIGZyb20gYm90aCB0aGUgdGFyZ2V0IHNjZW5lIGFuZCB0aGUgbmV3IG9iamVjdCB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHNjZW5lLlxuXG5cdFx0XHR0YXJnZXRTY2VuZS50cmF2ZXJzZVZpc2libGUoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzTGlnaHQgJiYgb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICkgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaExpZ2h0KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0aWYgKCBzY2VuZSAhPT0gdGFyZ2V0U2NlbmUgKSB7XG5cblx0XHRcdFx0c2NlbmUudHJhdmVyc2VWaXNpYmxlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmlzTGlnaHQgJiYgb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICkgKSB7XG5cblx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoTGlnaHQoIG9iamVjdCApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoKTtcblxuXHRcdFx0Ly8gT25seSBpbml0aWFsaXplIG1hdGVyaWFscyBpbiB0aGUgbmV3IHNjZW5lLCBub3QgdGhlIHRhcmdldFNjZW5lLlxuXG5cdFx0XHRjb25zdCBtYXRlcmlhbHMgPSBuZXcgU2V0KCk7XG5cblx0XHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0XHRpZiAoICEgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc1BvaW50cyB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1Nwcml0ZSApICkge1xuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBtYXRlcmlhbC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwyID0gbWF0ZXJpYWxbIGkgXTtcblxuXHRcdFx0XHRcdFx0XHRwcmVwYXJlTWF0ZXJpYWwoIG1hdGVyaWFsMiwgdGFyZ2V0U2NlbmUsIG9iamVjdCApO1xuXHRcdFx0XHRcdFx0XHRtYXRlcmlhbHMuYWRkKCBtYXRlcmlhbDIgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0cHJlcGFyZU1hdGVyaWFsKCBtYXRlcmlhbCwgdGFyZ2V0U2NlbmUsIG9iamVjdCApO1xuXHRcdFx0XHRcdFx0bWF0ZXJpYWxzLmFkZCggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gKTtcblxuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVTdGFjay5wb3AoKTtcblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFscztcblxuXHRcdH07XG5cblx0XHQvLyBjb21waWxlQXN5bmNcblxuXHRcdC8qKlxuXHRcdCAqIEFzeW5jaHJvbm91cyB2ZXJzaW9uIG9mIHtAbGluayBXZWJHTFJlbmRlcmVyI2NvbXBpbGV9LlxuXHRcdCAqXG5cdFx0ICogVGhpcyBtZXRob2QgbWFrZXMgdXNlIG9mIHRoZSBgS0hSX3BhcmFsbGVsX3NoYWRlcl9jb21waWxlYCBXZWJHTCBleHRlbnNpb24uIEhlbmNlLFxuXHRcdCAqIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGlzIHZlcnNpb24gb2YgYGNvbXBpbGUoKWAgd2hlbmV2ZXIgcG9zc2libGUuXG5cdFx0ICpcblx0XHQgKiBAYXN5bmNcblx0XHQgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSBvciBhbm90aGVyIHR5cGUgb2YgM0Qgb2JqZWN0IHRvIHByZWNvbXBpbGUuXG5cdFx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEuXG5cdFx0ICogQHBhcmFtIHs/U2NlbmV9IFt0YXJnZXRTY2VuZT1udWxsXSAtIFRoZSB0YXJnZXQgc2NlbmUuXG5cdFx0ICogQHJldHVybiB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZ2l2ZW4gc2NlbmUgY2FuIGJlIHJlbmRlcmVkIHdpdGhvdXQgdW5uZWNlc3Nhcnkgc3RhbGxpbmcgZHVlIHRvIHNoYWRlciBjb21waWxhdGlvbi5cblx0XHQgKi9cblx0XHR0aGlzLmNvbXBpbGVBc3luYyA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSwgdGFyZ2V0U2NlbmUgPSBudWxsICkge1xuXG5cdFx0XHRjb25zdCBtYXRlcmlhbHMgPSB0aGlzLmNvbXBpbGUoIHNjZW5lLCBjYW1lcmEsIHRhcmdldFNjZW5lICk7XG5cblx0XHRcdC8vIFdhaXQgZm9yIGFsbCB0aGUgbWF0ZXJpYWxzIGluIHRoZSBuZXcgb2JqZWN0IHRvIGluZGljYXRlIHRoYXQgdGhleSdyZVxuXHRcdFx0Ly8gcmVhZHkgdG8gYmUgdXNlZCBiZWZvcmUgcmVzb2x2aW5nIHRoZSBwcm9taXNlLlxuXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSApID0+IHtcblxuXHRcdFx0XHRmdW5jdGlvbiBjaGVja01hdGVyaWFsc1JlYWR5KCkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzLmZvckVhY2goIGZ1bmN0aW9uICggbWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXHRcdFx0XHRcdFx0Y29uc3QgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbTtcblxuXHRcdFx0XHRcdFx0aWYgKCBwcm9ncmFtLmlzUmVhZHkoKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyByZW1vdmUgYW55IHByb2dyYW1zIHRoYXQgcmVwb3J0IHRoZXkncmUgcmVhZHkgdG8gdXNlIGZyb20gdGhlIGxpc3Rcblx0XHRcdFx0XHRcdFx0bWF0ZXJpYWxzLmRlbGV0ZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0Ly8gb25jZSB0aGUgbGlzdCBvZiBjb21waWxpbmcgbWF0ZXJpYWxzIGlzIGVtcHR5LCBjYWxsIHRoZSBjYWxsYmFja1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbHMuc2l6ZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0cmVzb2x2ZSggc2NlbmUgKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlmIHNvbWUgbWF0ZXJpYWxzIGFyZSBzdGlsbCBub3QgcmVhZHksIHdhaXQgYSBiaXQgYW5kIGNoZWNrIGFnYWluXG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KCBjaGVja01hdGVyaWFsc1JlYWR5LCAxMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGV4dGVuc2lvbnMuZ2V0KCAnS0hSX3BhcmFsbGVsX3NoYWRlcl9jb21waWxlJyApICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgY2FuIGNoZWNrIHRoZSBjb21waWxhdGlvbiBzdGF0dXMgb2YgdGhlIG1hdGVyaWFscyB3aXRob3V0XG5cdFx0XHRcdFx0Ly8gYmxvY2tpbmcgdGhlbiBkbyBzbyByaWdodCBhd2F5LlxuXG5cdFx0XHRcdFx0Y2hlY2tNYXRlcmlhbHNSZWFkeSgpO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBPdGhlcndpc2Ugc3RhcnQgYnkgd2FpdGluZyBhIGJpdCB0byBnaXZlIHRoZSBtYXRlcmlhbHMgd2UganVzdFxuXHRcdFx0XHRcdC8vIGluaXRpYWxpemVkIGEgY2hhbmNlIHRvIGZpbmlzaC5cblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoIGNoZWNrTWF0ZXJpYWxzUmVhZHksIDEwICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdFx0Ly8gQW5pbWF0aW9uIExvb3BcblxuXHRcdGxldCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsO1xuXG5cdFx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSApIHtcblxuXHRcdFx0aWYgKCBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgKSBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2soIHRpbWUgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uWFJTZXNzaW9uU3RhcnQoKSB7XG5cblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblhSU2Vzc2lvbkVuZCgpIHtcblxuXHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0XHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcCggb25BbmltYXRpb25GcmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgKSBhbmltYXRpb24uc2V0Q29udGV4dCggc2VsZiApO1xuXG5cdFx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cdFx0XHR4ci5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdFx0XHQoIGNhbGxiYWNrID09PSBudWxsICkgPyBhbmltYXRpb24uc3RvcCgpIDogYW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHR9O1xuXG5cdFx0eHIuYWRkRXZlbnRMaXN0ZW5lciggJ3Nlc3Npb25zdGFydCcsIG9uWFJTZXNzaW9uU3RhcnQgKTtcblx0XHR4ci5hZGRFdmVudExpc3RlbmVyKCAnc2Vzc2lvbmVuZCcsIG9uWFJTZXNzaW9uRW5kICk7XG5cblx0XHQvLyBSZW5kZXJpbmdcblxuXHRcdC8qKlxuXHRcdCAqIFJlbmRlcnMgdGhlIGdpdmVuIHNjZW5lIChvciBvdGhlciB0eXBlIG9mIDNEIG9iamVjdCkgdXNpbmcgdGhlIGdpdmVuIGNhbWVyYS5cblx0XHQgKlxuXHRcdCAqIFRoZSByZW5kZXIgaXMgZG9uZSB0byBhIHByZXZpb3VzbHkgc3BlY2lmaWVkIHJlbmRlciB0YXJnZXQgc2V0IGJ5IGNhbGxpbmcge0BsaW5rIFdlYkdMUmVuZGVyZXIjc2V0UmVuZGVyVGFyZ2V0fVxuXHRcdCAqIG9yIHRvIHRoZSBjYW52YXMgYXMgdXN1YWwuXG5cdFx0ICpcblx0XHQgKiBCeSBkZWZhdWx0IHJlbmRlciBidWZmZXJzIGFyZSBjbGVhcmVkIGJlZm9yZSByZW5kZXJpbmcgYnV0IHlvdSBjYW4gcHJldmVudFxuXHRcdCAqIHRoaXMgYnkgc2V0dGluZyB0aGUgcHJvcGVydHkgYGF1dG9DbGVhcmAgdG8gYGZhbHNlYC4gSWYgeW91IHdhbnQgdG8gcHJldmVudFxuXHRcdCAqIG9ubHkgY2VydGFpbiBidWZmZXJzIGJlaW5nIGNsZWFyZWQgeW91IGNhbiBgYXV0b0NsZWFyQ29sb3JgLCBgYXV0b0NsZWFyRGVwdGhgXG5cdFx0ICogb3IgYGF1dG9DbGVhclN0ZW5jaWxgIHRvIGBmYWxzZWAuIFRvIGZvcmNlIGEgY2xlYXIsIHVzZSB7QGxpbmsgV2ViR0xSZW5kZXJlciNjbGVhcn0uXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge09iamVjdDNEfSBzY2VuZSAtIFRoZSBzY2VuZSB0byByZW5kZXIuXG5cdFx0ICogQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSAtIFRoZSBjYW1lcmEuXG5cdFx0ICovXG5cdFx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbiAoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdGlmICggY2FtZXJhICE9PSB1bmRlZmluZWQgJiYgY2FtZXJhLmlzQ2FtZXJhICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuJyApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBfaXNDb250ZXh0TG9zdCA9PT0gdHJ1ZSApIHJldHVybjtcblxuXHRcdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRcdGlmICggc2NlbmUubWF0cml4V29ybGRBdXRvVXBkYXRlID09PSB0cnVlICkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0Ly8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bVxuXG5cdFx0XHRpZiAoIGNhbWVyYS5wYXJlbnQgPT09IG51bGwgJiYgY2FtZXJhLm1hdHJpeFdvcmxkQXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHRpZiAoIHhyLmVuYWJsZWQgPT09IHRydWUgJiYgeHIuaXNQcmVzZW50aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGlmICggeHIuY2FtZXJhQXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHhyLnVwZGF0ZUNhbWVyYSggY2FtZXJhICk7XG5cblx0XHRcdFx0Y2FtZXJhID0geHIuZ2V0Q2FtZXJhKCk7IC8vIHVzZSBYUiBjYW1lcmEgZm9yIHJlbmRlcmluZ1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cdFx0XHRpZiAoIHNjZW5lLmlzU2NlbmUgPT09IHRydWUgKSBzY2VuZS5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCByZW5kZXJTdGF0ZVN0YWNrLmxlbmd0aCApO1xuXHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoIGNhbWVyYSApO1xuXG5cdFx0XHRyZW5kZXJTdGF0ZVN0YWNrLnB1c2goIGN1cnJlbnRSZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHRfcHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXHRcdFx0X2ZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdF9sb2NhbENsaXBwaW5nRW5hYmxlZCA9IHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQ7XG5cdFx0XHRfY2xpcHBpbmdFbmFibGVkID0gY2xpcHBpbmcuaW5pdCggdGhpcy5jbGlwcGluZ1BsYW5lcywgX2xvY2FsQ2xpcHBpbmdFbmFibGVkICk7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0ID0gcmVuZGVyTGlzdHMuZ2V0KCBzY2VuZSwgcmVuZGVyTGlzdFN0YWNrLmxlbmd0aCApO1xuXHRcdFx0Y3VycmVudFJlbmRlckxpc3QuaW5pdCgpO1xuXG5cdFx0XHRyZW5kZXJMaXN0U3RhY2sucHVzaCggY3VycmVudFJlbmRlckxpc3QgKTtcblxuXHRcdFx0aWYgKCB4ci5lbmFibGVkID09PSB0cnVlICYmIHhyLmlzUHJlc2VudGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRjb25zdCBkZXB0aFNlbnNpbmdNZXNoID0gX3RoaXMueHIuZ2V0RGVwdGhTZW5zaW5nTWVzaCgpO1xuXG5cdFx0XHRcdGlmICggZGVwdGhTZW5zaW5nTWVzaCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdHByb2plY3RPYmplY3QoIGRlcHRoU2Vuc2luZ01lc2gsIGNhbWVyYSwgLSBJbmZpbml0eSwgX3RoaXMuc29ydE9iamVjdHMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cHJvamVjdE9iamVjdCggc2NlbmUsIGNhbWVyYSwgMCwgX3RoaXMuc29ydE9iamVjdHMgKTtcblxuXHRcdFx0Y3VycmVudFJlbmRlckxpc3QuZmluaXNoKCk7XG5cblx0XHRcdGlmICggX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3Quc29ydCggX29wYXF1ZVNvcnQsIF90cmFuc3BhcmVudFNvcnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfcmVuZGVyQmFja2dyb3VuZCA9IHhyLmVuYWJsZWQgPT09IGZhbHNlIHx8IHhyLmlzUHJlc2VudGluZyA9PT0gZmFsc2UgfHwgeHIuaGFzRGVwdGhTZW5zaW5nKCkgPT09IGZhbHNlO1xuXHRcdFx0aWYgKCBfcmVuZGVyQmFja2dyb3VuZCApIHtcblxuXHRcdFx0XHRiYWNrZ3JvdW5kLmFkZFRvUmVuZGVyTGlzdCggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0dGhpcy5pbmZvLnJlbmRlci5mcmFtZSArKztcblxuXHRcdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7XG5cblx0XHRcdGNvbnN0IHNoYWRvd3NBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zaGFkb3dzQXJyYXk7XG5cblx0XHRcdHNoYWRvd01hcC5yZW5kZXIoIHNoYWRvd3NBcnJheSwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5lbmRTaGFkb3dzKCk7XG5cblx0XHRcdC8vXG5cblx0XHRcdGlmICggdGhpcy5pbmZvLmF1dG9SZXNldCA9PT0gdHJ1ZSApIHRoaXMuaW5mby5yZXNldCgpO1xuXG5cdFx0XHQvLyByZW5kZXIgc2NlbmVcblxuXHRcdFx0Y29uc3Qgb3BhcXVlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0Lm9wYXF1ZTtcblx0XHRcdGNvbnN0IHRyYW5zbWlzc2l2ZU9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc21pc3NpdmU7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0cygpO1xuXG5cdFx0XHRpZiAoIGNhbWVyYS5pc0FycmF5Q2FtZXJhICkge1xuXG5cdFx0XHRcdGNvbnN0IGNhbWVyYXMgPSBjYW1lcmEuY2FtZXJhcztcblxuXHRcdFx0XHRpZiAoIHRyYW5zbWlzc2l2ZU9iamVjdHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgY2FtZXJhMiA9IGNhbWVyYXNbIGkgXTtcblxuXHRcdFx0XHRcdFx0cmVuZGVyVHJhbnNtaXNzaW9uUGFzcyggb3BhcXVlT2JqZWN0cywgdHJhbnNtaXNzaXZlT2JqZWN0cywgc2NlbmUsIGNhbWVyYTIgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBfcmVuZGVyQmFja2dyb3VuZCApIGJhY2tncm91bmQucmVuZGVyKCBzY2VuZSApO1xuXG5cdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNhbWVyYXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNhbWVyYTIgPSBjYW1lcmFzWyBpIF07XG5cblx0XHRcdFx0XHRyZW5kZXJTY2VuZSggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEyLCBjYW1lcmEyLnZpZXdwb3J0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggdHJhbnNtaXNzaXZlT2JqZWN0cy5sZW5ndGggPiAwICkgcmVuZGVyVHJhbnNtaXNzaW9uUGFzcyggb3BhcXVlT2JqZWN0cywgdHJhbnNtaXNzaXZlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHRcdGlmICggX3JlbmRlckJhY2tncm91bmQgKSBiYWNrZ3JvdW5kLnJlbmRlciggc2NlbmUgKTtcblxuXHRcdFx0XHRyZW5kZXJTY2VuZSggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRpZiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICYmIF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwgPT09IDAgKSB7XG5cblx0XHRcdFx0Ly8gcmVzb2x2ZSBtdWx0aXNhbXBsZSByZW5kZXJidWZmZXJzIHRvIGEgc2luZ2xlLXNhbXBsZSB0ZXh0dXJlIGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHRcdHRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdC8vIEdlbmVyYXRlIG1pcG1hcCBpZiB3ZSdyZSB1c2luZyBhbnkga2luZCBvZiBtaXBtYXAgZmlsdGVyaW5nXG5cblx0XHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCBfY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vXG5cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSA9PT0gdHJ1ZSApIHNjZW5lLm9uQWZ0ZXJSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdC8vIF9nbC5maW5pc2goKTtcblxuXHRcdFx0YmluZGluZ1N0YXRlcy5yZXNldERlZmF1bHRTdGF0ZSgpO1xuXHRcdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLTE7XG5cdFx0XHRfY3VycmVudENhbWVyYSA9IG51bGw7XG5cblx0XHRcdHJlbmRlclN0YXRlU3RhY2sucG9wKCk7XG5cblx0XHRcdGlmICggcmVuZGVyU3RhdGVTdGFjay5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlU3RhY2tbIHJlbmRlclN0YXRlU3RhY2subGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCA9PT0gdHJ1ZSApIGNsaXBwaW5nLnNldEdsb2JhbFN0YXRlKCBfdGhpcy5jbGlwcGluZ1BsYW5lcywgY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLmNhbWVyYSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVuZGVyTGlzdFN0YWNrLnBvcCgpO1xuXG5cdFx0XHRpZiAoIHJlbmRlckxpc3RTdGFjay5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0ID0gcmVuZGVyTGlzdFN0YWNrWyByZW5kZXJMaXN0U3RhY2subGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0ID0gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHByb2plY3RPYmplY3QoIG9iamVjdCwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QudmlzaWJsZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGNvbnN0IHZpc2libGUgPSBvYmplY3QubGF5ZXJzLnRlc3QoIGNhbWVyYS5sYXllcnMgKTtcblxuXHRcdFx0aWYgKCB2aXNpYmxlICkge1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzR3JvdXAgKSB7XG5cblx0XHRcdFx0XHRncm91cE9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0xPRCApIHtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmF1dG9VcGRhdGUgPT09IHRydWUgKSBvYmplY3QudXBkYXRlKCBjYW1lcmEgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaWdodCApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoTGlnaHQoIG9iamVjdCApO1xuXG5cdFx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hTaGFkb3coIG9iamVjdCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHtcblxuXHRcdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzU3ByaXRlKCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBzb3J0T2JqZWN0cyApIHtcblxuXHRcdFx0XHRcdFx0XHRfdmVjdG9yNC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIF92ZWN0b3I0LnosIG51bGwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzTGluZSB8fCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c09iamVjdCggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBvYmplY3QuYm91bmRpbmdTcGhlcmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgb2JqZWN0LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXHRcdFx0XHRcdFx0XHRcdF92ZWN0b3I0LmNvcHkoIG9iamVjdC5ib3VuZGluZ1NwaGVyZS5jZW50ZXIgKTtcblxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXHRcdFx0XHRcdFx0XHRcdF92ZWN0b3I0LmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNlbnRlciApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRfdmVjdG9yNFxuXHRcdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xuXG5cdFx0XHRcdFx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIGdyb3VwTWF0ZXJpYWwsIGdyb3VwT3JkZXIsIF92ZWN0b3I0LnosIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yNC56LCBudWxsICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0cHJvamVjdE9iamVjdCggY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByZW5kZXJTY2VuZSggY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIHZpZXdwb3J0ICkge1xuXG5cdFx0XHRjb25zdCBvcGFxdWVPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3Qub3BhcXVlO1xuXHRcdFx0Y29uc3QgdHJhbnNtaXNzaXZlT2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zbWlzc2l2ZTtcblx0XHRcdGNvbnN0IHRyYW5zcGFyZW50T2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zcGFyZW50O1xuXG5cdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHNWaWV3KCBjYW1lcmEgKTtcblxuXHRcdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkID09PSB0cnVlICkgY2xpcHBpbmcuc2V0R2xvYmFsU3RhdGUoIF90aGlzLmNsaXBwaW5nUGxhbmVzLCBjYW1lcmEgKTtcblxuXHRcdFx0aWYgKCB2aWV3cG9ydCApIHN0YXRlLnZpZXdwb3J0KCBfY3VycmVudFZpZXdwb3J0LmNvcHkoIHZpZXdwb3J0ICkgKTtcblxuXHRcdFx0aWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0XHRpZiAoIHRyYW5zbWlzc2l2ZU9iamVjdHMubGVuZ3RoID4gMCApIHJlbmRlck9iamVjdHMoIHRyYW5zbWlzc2l2ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRcdGlmICggdHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCA+IDAgKSByZW5kZXJPYmplY3RzKCB0cmFuc3BhcmVudE9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdFx0Ly8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXJcblxuXHRcdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2soIHRydWUgKTtcblx0XHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0TWFzayggdHJ1ZSApO1xuXG5cdFx0XHRzdGF0ZS5zZXRQb2x5Z29uT2Zmc2V0KCBmYWxzZSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyVHJhbnNtaXNzaW9uUGFzcyggb3BhcXVlT2JqZWN0cywgdHJhbnNtaXNzaXZlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0Y29uc3Qgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5vdmVycmlkZU1hdGVyaWFsIDogbnVsbDtcblxuXHRcdFx0aWYgKCBvdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS50cmFuc21pc3Npb25SZW5kZXJUYXJnZXRbIGNhbWVyYS5pZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnRyYW5zbWlzc2lvblJlbmRlclRhcmdldFsgY2FtZXJhLmlkIF0gPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIDEsIDEsIHtcblx0XHRcdFx0XHRnZW5lcmF0ZU1pcG1hcHM6IHRydWUsXG5cdFx0XHRcdFx0dHlwZTogKCBleHRlbnNpb25zLmhhcyggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSB8fCBleHRlbnNpb25zLmhhcyggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSA/IEhhbGZGbG9hdFR5cGUgOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdFx0XHRcdG1pbkZpbHRlcjogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyLFxuXHRcdFx0XHRcdHNhbXBsZXM6IDQsXG5cdFx0XHRcdFx0c3RlbmNpbEJ1ZmZlcjogc3RlbmNpbCxcblx0XHRcdFx0XHRyZXNvbHZlRGVwdGhCdWZmZXI6IGZhbHNlLFxuXHRcdFx0XHRcdHJlc29sdmVTdGVuY2lsQnVmZmVyOiBmYWxzZSxcblx0XHRcdFx0XHRjb2xvclNwYWNlOiBDb2xvck1hbmFnZW1lbnQud29ya2luZ0NvbG9yU3BhY2UsXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBkZWJ1Z1xuXG5cdFx0XHRcdC8qXG5cdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gbmV3IFBsYW5lR2VvbWV0cnkoKTtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgbWFwOiBfdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LnRleHR1cmUgfSApO1xuXG5cdFx0XHRcdGNvbnN0IG1lc2ggPSBuZXcgTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdFx0XHRcdHNjZW5lLmFkZCggbWVzaCApO1xuXHRcdFx0XHQqL1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHRyYW5zbWlzc2lvblJlbmRlclRhcmdldCA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS50cmFuc21pc3Npb25SZW5kZXJUYXJnZXRbIGNhbWVyYS5pZCBdO1xuXG5cdFx0XHRjb25zdCBhY3RpdmVWaWV3cG9ydCA9IGNhbWVyYS52aWV3cG9ydCB8fCBfY3VycmVudFZpZXdwb3J0O1xuXHRcdFx0dHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0LnNldFNpemUoIGFjdGl2ZVZpZXdwb3J0LnogKiBfdGhpcy50cmFuc21pc3Npb25SZXNvbHV0aW9uU2NhbGUsIGFjdGl2ZVZpZXdwb3J0LncgKiBfdGhpcy50cmFuc21pc3Npb25SZXNvbHV0aW9uU2NhbGUgKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0Y29uc3QgY3VycmVudFJlbmRlclRhcmdldCA9IF90aGlzLmdldFJlbmRlclRhcmdldCgpO1xuXHRcdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0X3RoaXMuZ2V0Q2xlYXJDb2xvciggX2N1cnJlbnRDbGVhckNvbG9yICk7XG5cdFx0XHRfY3VycmVudENsZWFyQWxwaGEgPSBfdGhpcy5nZXRDbGVhckFscGhhKCk7XG5cdFx0XHRpZiAoIF9jdXJyZW50Q2xlYXJBbHBoYSA8IDEgKSBfdGhpcy5zZXRDbGVhckNvbG9yKCAweGZmZmZmZiwgMC41ICk7XG5cblx0XHRcdF90aGlzLmNsZWFyKCk7XG5cblx0XHRcdGlmICggX3JlbmRlckJhY2tncm91bmQgKSBiYWNrZ3JvdW5kLnJlbmRlciggc2NlbmUgKTtcblxuXHRcdFx0Ly8gVHVybiBvZmYgdGhlIGZlYXR1cmVzIHdoaWNoIGNhbiBhZmZlY3QgdGhlIGZyYWcgY29sb3IgZm9yIG9wYXF1ZSBvYmplY3RzIHBhc3MuXG5cdFx0XHQvLyBPdGhlcndpc2UgdGhleSBhcmUgYXBwbGllZCB0d2ljZSBpbiBvcGFxdWUgb2JqZWN0cyBwYXNzIGFuZCB0cmFuc21pc3Npb24gb2JqZWN0cyBwYXNzLlxuXHRcdFx0Y29uc3QgY3VycmVudFRvbmVNYXBwaW5nID0gX3RoaXMudG9uZU1hcHBpbmc7XG5cdFx0XHRfdGhpcy50b25lTWFwcGluZyA9IE5vVG9uZU1hcHBpbmc7XG5cblx0XHRcdC8vIFJlbW92ZSB2aWV3cG9ydCBmcm9tIGNhbWVyYSB0byBhdm9pZCBuZXN0ZWQgcmVuZGVyIGNhbGxzIHJlc2V0dGluZyB2aWV3cG9ydCB0byBpdCAoZS5nIFJlZmxlY3RvcikuXG5cdFx0XHQvLyBUcmFuc21pc3Npb24gcmVuZGVyIHBhc3MgcmVxdWlyZXMgdmlld3BvcnQgdG8gbWF0Y2ggdGhlIHRyYW5zbWlzc2lvblJlbmRlclRhcmdldC5cblx0XHRcdGNvbnN0IGN1cnJlbnRDYW1lcmFWaWV3cG9ydCA9IGNhbWVyYS52aWV3cG9ydDtcblx0XHRcdGlmICggY2FtZXJhLnZpZXdwb3J0ICE9PSB1bmRlZmluZWQgKSBjYW1lcmEudmlld3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5zZXR1cExpZ2h0c1ZpZXcoIGNhbWVyYSApO1xuXG5cdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSBjbGlwcGluZy5zZXRHbG9iYWxTdGF0ZSggX3RoaXMuY2xpcHBpbmdQbGFuZXMsIGNhbWVyYSApO1xuXG5cdFx0XHRyZW5kZXJPYmplY3RzKCBvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHRcdHRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblx0XHRcdHRleHR1cmVzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9ucy5oYXMoICdXRUJHTF9tdWx0aXNhbXBsZWRfcmVuZGVyX3RvX3RleHR1cmUnICkgPT09IGZhbHNlICkgeyAvLyBzZWUgIzI4MTMxXG5cblx0XHRcdFx0bGV0IHJlbmRlclRhcmdldE5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gdHJhbnNtaXNzaXZlT2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgcmVuZGVySXRlbSA9IHRyYW5zbWlzc2l2ZU9iamVjdHNbIGkgXTtcblxuXHRcdFx0XHRcdGNvbnN0IG9iamVjdCA9IHJlbmRlckl0ZW0ub2JqZWN0O1xuXHRcdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IHJlbmRlckl0ZW0ubWF0ZXJpYWw7XG5cdFx0XHRcdFx0Y29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBEb3VibGVTaWRlICYmIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBjdXJyZW50U2lkZSA9IG1hdGVyaWFsLnNpZGU7XG5cblx0XHRcdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwuc2lkZSA9IGN1cnJlbnRTaWRlO1xuXHRcdFx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRyZW5kZXJUYXJnZXROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0TmVlZHNVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCggdHJhbnNtaXNzaW9uUmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKCB0cmFuc21pc3Npb25SZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0X3RoaXMuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdF90aGlzLnNldENsZWFyQ29sb3IoIF9jdXJyZW50Q2xlYXJDb2xvciwgX2N1cnJlbnRDbGVhckFscGhhICk7XG5cblx0XHRcdGlmICggY3VycmVudENhbWVyYVZpZXdwb3J0ICE9PSB1bmRlZmluZWQgKSBjYW1lcmEudmlld3BvcnQgPSBjdXJyZW50Q2FtZXJhVmlld3BvcnQ7XG5cblx0XHRcdF90aGlzLnRvbmVNYXBwaW5nID0gY3VycmVudFRvbmVNYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0cyggcmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdFx0Y29uc3Qgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLmlzU2NlbmUgPT09IHRydWUgPyBzY2VuZS5vdmVycmlkZU1hdGVyaWFsIDogbnVsbDtcblxuXHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlbmRlckl0ZW0gPSByZW5kZXJMaXN0WyBpIF07XG5cblx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0gcmVuZGVySXRlbS5vYmplY3Q7XG5cdFx0XHRcdGNvbnN0IGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgZ3JvdXAgPSByZW5kZXJJdGVtLmdyb3VwO1xuXHRcdFx0XHRsZXQgbWF0ZXJpYWwgPSByZW5kZXJJdGVtLm1hdGVyaWFsO1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuYWxsb3dPdmVycmlkZSA9PT0gdHJ1ZSAmJiBvdmVycmlkZU1hdGVyaWFsICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWwgPSBvdmVycmlkZU1hdGVyaWFsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG9iamVjdC5sYXllcnMudGVzdCggY2FtZXJhLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0cmVuZGVyT2JqZWN0KCBvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuXG5cdFx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICk7XG5cblx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSwgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0XHRtYXRlcmlhbC5vbkJlZm9yZVJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgJiYgbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZSAmJiBtYXRlcmlhbC5mb3JjZVNpbmdsZVBhc3MgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBCYWNrU2lkZTtcblx0XHRcdFx0bWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNpZGUgPSBGcm9udFNpZGU7XG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0X3RoaXMucmVuZGVyQnVmZmVyRGlyZWN0KCBjYW1lcmEsIHNjZW5lLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXAgKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfdGhpcy5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgc2NlbmUsIGdlb21ldHJ5LCBtYXRlcmlhbCwgb2JqZWN0LCBncm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdG9iamVjdC5vbkFmdGVyUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0UHJvZ3JhbSggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSAhPT0gdHJ1ZSApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHNjZW5lIGNvdWxkIGJlIGEgTWVzaCwgTGluZSwgUG9pbnRzLCAuLi5cblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRcdGNvbnN0IGxpZ2h0cyA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5saWdodHM7XG5cdFx0XHRjb25zdCBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0XHRjb25zdCBsaWdodHNTdGF0ZVZlcnNpb24gPSBsaWdodHMuc3RhdGUudmVyc2lvbjtcblxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHByb2dyYW1DYWNoZS5nZXRQYXJhbWV0ZXJzKCBtYXRlcmlhbCwgbGlnaHRzLnN0YXRlLCBzaGFkb3dzQXJyYXksIHNjZW5lLCBvYmplY3QgKTtcblx0XHRcdGNvbnN0IHByb2dyYW1DYWNoZUtleSA9IHByb2dyYW1DYWNoZS5nZXRQcm9ncmFtQ2FjaGVLZXkoIHBhcmFtZXRlcnMgKTtcblxuXHRcdFx0bGV0IHByb2dyYW1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW1zO1xuXG5cdFx0XHQvLyBhbHdheXMgdXBkYXRlIGVudmlyb25tZW50IGFuZCBmb2cgLSBjaGFuZ2luZyB0aGVzZSB0cmlnZ2VyIGFuIGdldFByb2dyYW0gY2FsbCwgYnV0IGl0J3MgcG9zc2libGUgdGhhdCB0aGUgcHJvZ3JhbSBkb2Vzbid0IGNoYW5nZVxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgPSBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gc2NlbmUuZW52aXJvbm1lbnQgOiBudWxsO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyA9IHNjZW5lLmZvZztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXAgPSAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBjdWJldXZtYXBzIDogY3ViZW1hcHMgKS5nZXQoIG1hdGVyaWFsLmVudk1hcCB8fCBtYXRlcmlhbFByb3BlcnRpZXMuZW52aXJvbm1lbnQgKTtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZNYXBSb3RhdGlvbiA9ICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ICE9PSBudWxsICYmIG1hdGVyaWFsLmVudk1hcCA9PT0gbnVsbCApID8gc2NlbmUuZW52aXJvbm1lbnRSb3RhdGlvbiA6IG1hdGVyaWFsLmVudk1hcFJvdGF0aW9uO1xuXG5cdFx0XHRpZiAoIHByb2dyYW1zID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gbmV3IG1hdGVyaWFsXG5cblx0XHRcdFx0bWF0ZXJpYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0XHRcdHByb2dyYW1zID0gbmV3IE1hcCgpO1xuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgcHJvZ3JhbSA9IHByb2dyYW1zLmdldCggcHJvZ3JhbUNhY2hlS2V5ICk7XG5cblx0XHRcdGlmICggcHJvZ3JhbSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIGVhcmx5IG91dCBpZiBwcm9ncmFtIGFuZCBsaWdodCBzdGF0ZSBpcyBpZGVudGljYWxcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbSA9PT0gcHJvZ3JhbSAmJiBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID09PSBsaWdodHNTdGF0ZVZlcnNpb24gKSB7XG5cblx0XHRcdFx0XHR1cGRhdGVDb21tb25NYXRlcmlhbFByb3BlcnRpZXMoIG1hdGVyaWFsLCBwYXJhbWV0ZXJzICk7XG5cblx0XHRcdFx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cGFyYW1ldGVycy51bmlmb3JtcyA9IHByb2dyYW1DYWNoZS5nZXRVbmlmb3JtcyggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUoIHBhcmFtZXRlcnMsIF90aGlzICk7XG5cblx0XHRcdFx0cHJvZ3JhbSA9IHByb2dyYW1DYWNoZS5hY3F1aXJlUHJvZ3JhbSggcGFyYW1ldGVycywgcHJvZ3JhbUNhY2hlS2V5ICk7XG5cdFx0XHRcdHByb2dyYW1zLnNldCggcHJvZ3JhbUNhY2hlS2V5LCBwcm9ncmFtICk7XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zID0gcGFyYW1ldGVycy51bmlmb3JtcztcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdFx0aWYgKCAoICEgbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiAhIG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB8fCBtYXRlcmlhbC5jbGlwcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGlwcGluZ1BsYW5lcyA9IGNsaXBwaW5nLnVuaWZvcm07XG5cblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlQ29tbW9uTWF0ZXJpYWxQcm9wZXJ0aWVzKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApO1xuXG5cdFx0XHQvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yXG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyA9IG1hdGVyaWFsTmVlZHNMaWdodHMoIG1hdGVyaWFsICk7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzU3RhdGVWZXJzaW9uO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyApIHtcblxuXHRcdFx0XHQvLyB3aXJlIHVwIHRoZSBtYXRlcmlhbCB0byB0aGlzIHJlbmRlcmVyJ3MgbGlnaHRpbmcgc3RhdGVcblxuXHRcdFx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5hbWJpZW50O1xuXHRcdFx0XHR1bmlmb3Jtcy5saWdodFByb2JlLnZhbHVlID0gbGlnaHRzLnN0YXRlLnByb2JlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbDtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3c7XG5cdFx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdDtcblx0XHRcdFx0dW5pZm9ybXMuc3BvdExpZ2h0U2hhZG93cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93O1xuXHRcdFx0XHR1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYTtcblx0XHRcdFx0dW5pZm9ybXMubHRjXzEudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWFMVEMxO1xuXHRcdFx0XHR1bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYUxUQzI7XG5cdFx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50O1xuXHRcdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0U2hhZG93cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvdztcblx0XHRcdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5oZW1pO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeDtcblx0XHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdExpZ2h0TWF0cml4O1xuXHRcdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdExpZ2h0TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDtcblx0XHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXRyaXg7XG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBhZGQgYXJlYSBsaWdodHMgc2hhZG93IGluZm8gdG8gdW5pZm9ybXNcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zTGlzdCA9IG51bGw7XG5cblx0XHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0VW5pZm9ybUxpc3QoIG1hdGVyaWFsUHJvcGVydGllcyApIHtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnN0IHByb2dVbmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5jdXJyZW50UHJvZ3JhbS5nZXRVbmlmb3JtcygpO1xuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0ID0gV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUoIHByb2dVbmlmb3Jtcy5zZXEsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbFByb3BlcnRpZXMudW5pZm9ybXNMaXN0O1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQ29tbW9uTWF0ZXJpYWxQcm9wZXJ0aWVzKCBtYXRlcmlhbCwgcGFyYW1ldGVycyApIHtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5vdXRwdXRDb2xvclNwYWNlID0gcGFyYW1ldGVycy5vdXRwdXRDb2xvclNwYWNlO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nID0gcGFyYW1ldGVycy5iYXRjaGluZztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZ0NvbG9yID0gcGFyYW1ldGVycy5iYXRjaGluZ0NvbG9yO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmluc3RhbmNpbmcgPSBwYXJhbWV0ZXJzLmluc3RhbmNpbmc7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ0NvbG9yID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nQ29sb3I7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ01vcnBoID0gcGFyYW1ldGVycy5pbnN0YW5jaW5nTW9ycGg7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPSBwYXJhbWV0ZXJzLnNraW5uaW5nO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoVGFyZ2V0cyA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoTm9ybWFscyA9IHBhcmFtZXRlcnMubW9ycGhOb3JtYWxzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoQ29sb3JzID0gcGFyYW1ldGVycy5tb3JwaENvbG9ycztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHNDb3VudCA9IHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzQ291bnQ7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgPSBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUludGVyc2VjdGlvbiA9IHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbjtcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhBbHBoYXMgPSBwYXJhbWV0ZXJzLnZlcnRleEFscGhhcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhUYW5nZW50cyA9IHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHM7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMudG9uZU1hcHBpbmcgPSBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggc2NlbmUuaXNTY2VuZSAhPT0gdHJ1ZSApIHNjZW5lID0gX2VtcHR5U2NlbmU7IC8vIHNjZW5lIGNvdWxkIGJlIGEgTWVzaCwgTGluZSwgUG9pbnRzLCAuLi5cblxuXHRcdFx0dGV4dHVyZXMucmVzZXRUZXh0dXJlVW5pdHMoKTtcblxuXHRcdFx0Y29uc3QgZm9nID0gc2NlbmUuZm9nO1xuXHRcdFx0Y29uc3QgZW52aXJvbm1lbnQgPSBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gc2NlbmUuZW52aXJvbm1lbnQgOiBudWxsO1xuXHRcdFx0Y29uc3QgY29sb3JTcGFjZSA9ICggX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgKSA/IF90aGlzLm91dHB1dENvbG9yU3BhY2UgOiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0LmlzWFJSZW5kZXJUYXJnZXQgPT09IHRydWUgPyBfY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlLmNvbG9yU3BhY2UgOiBMaW5lYXJTUkdCQ29sb3JTcGFjZSApO1xuXHRcdFx0Y29uc3QgZW52TWFwID0gKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gY3ViZXV2bWFwcyA6IGN1YmVtYXBzICkuZ2V0KCBtYXRlcmlhbC5lbnZNYXAgfHwgZW52aXJvbm1lbnQgKTtcblx0XHRcdGNvbnN0IHZlcnRleEFscGhhcyA9IG1hdGVyaWFsLnZlcnRleENvbG9ycyA9PT0gdHJ1ZSAmJiAhISBnZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IuaXRlbVNpemUgPT09IDQ7XG5cdFx0XHRjb25zdCB2ZXJ0ZXhUYW5nZW50cyA9ICEhIGdlb21ldHJ5LmF0dHJpYnV0ZXMudGFuZ2VudCAmJiAoICEhIG1hdGVyaWFsLm5vcm1hbE1hcCB8fCBtYXRlcmlhbC5hbmlzb3Ryb3B5ID4gMCApO1xuXHRcdFx0Y29uc3QgbW9ycGhUYXJnZXRzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0Y29uc3QgbW9ycGhOb3JtYWxzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDtcblx0XHRcdGNvbnN0IG1vcnBoQ29sb3JzID0gISEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLmNvbG9yO1xuXG5cdFx0XHRsZXQgdG9uZU1hcHBpbmcgPSBOb1RvbmVNYXBwaW5nO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnRvbmVNYXBwZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCB8fCBfY3VycmVudFJlbmRlclRhcmdldC5pc1hSUmVuZGVyVGFyZ2V0ID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dG9uZU1hcHBpbmcgPSBfdGhpcy50b25lTWFwcGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbW9ycGhBdHRyaWJ1dGUgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gfHwgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCB8fCBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuY29sb3I7XG5cdFx0XHRjb25zdCBtb3JwaFRhcmdldHNDb3VudCA9ICggbW9ycGhBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApID8gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoIDogMDtcblxuXHRcdFx0Y29uc3QgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIG1hdGVyaWFsICk7XG5cdFx0XHRjb25zdCBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0aWYgKCBfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPT09IHRydWUgfHwgY2FtZXJhICE9PSBfY3VycmVudENhbWVyYSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IHVzZUNhY2hlID1cblx0XHRcdFx0XHRcdGNhbWVyYSA9PT0gX2N1cnJlbnRDYW1lcmEgJiZcblx0XHRcdFx0XHRcdG1hdGVyaWFsLmlkID09PSBfY3VycmVudE1hdGVyaWFsSWQ7XG5cblx0XHRcdFx0XHQvLyB3ZSBtaWdodCB3YW50IHRvIGNhbGwgdGhpcyBmdW5jdGlvbiB3aXRoIHNvbWUgQ2xpcHBpbmdHcm91cFxuXHRcdFx0XHRcdC8vIG9iamVjdCBpbnN0ZWFkIG9mIHRoZSBtYXRlcmlhbCwgb25jZSBpdCBiZWNvbWVzIGZlYXNpYmxlXG5cdFx0XHRcdFx0Ly8gKCM4NDY1LCAjODM3OSlcblx0XHRcdFx0XHRjbGlwcGluZy5zZXRTdGF0ZSggbWF0ZXJpYWwsIGNhbWVyYSwgdXNlQ2FjaGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IG5lZWRzUHJvZ3JhbUNoYW5nZSA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLnZlcnNpb24gPT09IG1hdGVyaWFsUHJvcGVydGllcy5fX3ZlcnNpb24gKSB7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgJiYgKCBtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uICE9PSBsaWdodHMuc3RhdGUudmVyc2lvbiApICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0Q29sb3JTcGFjZSAhPT0gY29sb3JTcGFjZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzQmF0Y2hlZE1lc2ggJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmJhdGNoaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNCYXRjaGVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuYmF0Y2hpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZ0NvbG9yID09PSB0cnVlICYmIG9iamVjdC5jb2xvclRleHR1cmUgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5iYXRjaGluZ0NvbG9yID09PSBmYWxzZSAmJiBvYmplY3QuY29sb3JUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggISBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuc2tpbm5pbmcgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCAhIG9iamVjdC5pc1NraW5uZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5za2lubmluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ0NvbG9yID09PSB0cnVlICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nQ29sb3IgPT09IGZhbHNlICYmIG9iamVjdC5pbnN0YW5jZUNvbG9yICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICYmIG1hdGVyaWFsUHJvcGVydGllcy5pbnN0YW5jaW5nTW9ycGggPT09IHRydWUgJiYgb2JqZWN0Lm1vcnBoVGV4dHVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCAmJiBtYXRlcmlhbFByb3BlcnRpZXMuaW5zdGFuY2luZ01vcnBoID09PSBmYWxzZSAmJiBvYmplY3QubW9ycGhUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMuZW52TWFwICE9PSBlbnZNYXAgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmZvZyA9PT0gdHJ1ZSAmJiBtYXRlcmlhbFByb3BlcnRpZXMuZm9nICE9PSBmb2cgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdFx0KCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IGNsaXBwaW5nLm51bVBsYW5lcyB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1JbnRlcnNlY3Rpb24gIT09IGNsaXBwaW5nLm51bUludGVyc2VjdGlvbiApICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudmVydGV4QWxwaGFzICE9PSB2ZXJ0ZXhBbHBoYXMgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy52ZXJ0ZXhUYW5nZW50cyAhPT0gdmVydGV4VGFuZ2VudHMgKSB7XG5cblx0XHRcdFx0XHRuZWVkc1Byb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5tb3JwaFRhcmdldHMgIT09IG1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdG5lZWRzUHJvZ3JhbUNoYW5nZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLm1vcnBoTm9ybWFscyAhPT0gbW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhDb2xvcnMgIT09IG1vcnBoQ29sb3JzICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMudG9uZU1hcHBpbmcgIT09IHRvbmVNYXBwaW5nICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubW9ycGhUYXJnZXRzQ291bnQgIT09IG1vcnBoVGFyZ2V0c0NvdW50ICkge1xuXG5cdFx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bmVlZHNQcm9ncmFtQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IG1hdGVyaWFsLnZlcnNpb247XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9cblxuXHRcdFx0bGV0IHByb2dyYW0gPSBtYXRlcmlhbFByb3BlcnRpZXMuY3VycmVudFByb2dyYW07XG5cblx0XHRcdGlmICggbmVlZHNQcm9ncmFtQ2hhbmdlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHByb2dyYW0gPSBnZXRQcm9ncmFtKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCByZWZyZXNoUHJvZ3JhbSA9IGZhbHNlO1xuXHRcdFx0bGV0IHJlZnJlc2hNYXRlcmlhbCA9IGZhbHNlO1xuXHRcdFx0bGV0IHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcblxuXHRcdFx0Y29uc3QgcF91bmlmb3JtcyA9IHByb2dyYW0uZ2V0VW5pZm9ybXMoKSxcblx0XHRcdFx0bV91bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdFx0aWYgKCBzdGF0ZS51c2VQcm9ncmFtKCBwcm9ncmFtLnByb2dyYW0gKSApIHtcblxuXHRcdFx0XHRyZWZyZXNoUHJvZ3JhbSA9IHRydWU7XG5cdFx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XG5cdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaWQgIT09IF9jdXJyZW50TWF0ZXJpYWxJZCApIHtcblxuXHRcdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSBtYXRlcmlhbC5pZDtcblxuXHRcdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVmcmVzaFByb2dyYW0gfHwgX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBjb21tb24gY2FtZXJhIHVuaWZvcm1zXG5cblx0XHRcdFx0Y29uc3QgcmV2ZXJzZURlcHRoQnVmZmVyID0gc3RhdGUuYnVmZmVycy5kZXB0aC5nZXRSZXZlcnNlZCgpO1xuXG5cdFx0XHRcdGlmICggcmV2ZXJzZURlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0X2N1cnJlbnRQcm9qZWN0aW9uTWF0cml4LmNvcHkoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdFx0XHR0b05vcm1hbGl6ZWRQcm9qZWN0aW9uTWF0cml4KCBfY3VycmVudFByb2plY3Rpb25NYXRyaXggKTtcblx0XHRcdFx0XHR0b1JldmVyc2VkUHJvamVjdGlvbk1hdHJpeCggX2N1cnJlbnRQcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdwcm9qZWN0aW9uTWF0cml4JywgX2N1cnJlbnRQcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3Byb2plY3Rpb25NYXRyaXgnLCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHRcdGNvbnN0IHVDYW1Qb3MgPSBwX3VuaWZvcm1zLm1hcC5jYW1lcmFQb3NpdGlvbjtcblxuXHRcdFx0XHRpZiAoIHVDYW1Qb3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHVDYW1Qb3Muc2V0VmFsdWUoIF9nbCwgX3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmEubWF0cml4V29ybGQgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbG9nRGVwdGhCdWZGQycsXG5cdFx0XHRcdFx0XHQyLjAgLyAoIE1hdGgubG9nKCBjYW1lcmEuZmFyICsgMS4wICkgLyBNYXRoLkxOMiApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGNvbnNpZGVyIG1vdmluZyBpc09ydGhvZ3JhcGhpYyB0byBVbmlmb3JtTGliIGFuZCBXZWJHTE1hdGVyaWFscywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yNjQ2NyNpc3N1ZWNvbW1lbnQtMTY0NTE4NTA2N1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fFxuXHRcdFx0XHRcdG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgfHxcblx0XHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2lzT3J0aG9ncmFwaGljJywgY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhID09PSB0cnVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSApIHtcblxuXHRcdFx0XHRcdF9jdXJyZW50Q2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0XHRcdFx0Ly8gbGlnaHRpbmcgdW5pZm9ybXMgZGVwZW5kIG9uIHRoZSBjYW1lcmEgc28gZW5mb3JjZSBhbiB1cGRhdGVcblx0XHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxuXHRcdFx0XHRcdC8vIHRoZSBuZXh0IG1hdGVyaWFsIHRoYXQgZG9lcyBnZXRzIGFjdGl2YXRlZDpcblxuXHRcdFx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XHRcdC8vIHNldCB0byB0cnVlIG9uIG1hdGVyaWFsIGNoYW5nZVxuXHRcdFx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1x0XHQvLyByZW1haW5zIHNldCB1bnRpbCB1cGRhdGUgZG9uZVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBza2lubmluZyBhbmQgbW9ycGggdGFyZ2V0IHVuaWZvcm1zIG11c3QgYmUgc2V0IGV2ZW4gaWYgbWF0ZXJpYWwgZGlkbid0IGNoYW5nZVxuXHRcdFx0Ly8gYXV0by1zZXR0aW5nIG9mIHRleHR1cmUgdW5pdCBmb3IgYm9uZSBhbmQgbW9ycGggdGV4dHVyZSBtdXN0IGdvIGJlZm9yZSBvdGhlciB0ZXh0dXJlc1xuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRleHR1cmVzIHVzZWQgZm9yIHNraW5uaW5nIGFuZCBtb3JwaGluZyBjYW4gdGFrZSBvdmVyIHRleHR1cmUgdW5pdHMgcmVzZXJ2ZWQgZm9yIG90aGVyIG1hdGVyaWFsIHRleHR1cmVzXG5cblx0XHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4JyApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JpbmRNYXRyaXhJbnZlcnNlJyApO1xuXG5cdFx0XHRcdGNvbnN0IHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXG5cdFx0XHRcdGlmICggc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSBudWxsICkgc2tlbGV0b24uY29tcHV0ZUJvbmVUZXh0dXJlKCk7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0JhdGNoZWRNZXNoICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmF0Y2hpbmdUZXh0dXJlJyApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ1RleHR1cmUnLCBvYmplY3QuX21hdHJpY2VzVGV4dHVyZSwgdGV4dHVyZXMgKTtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIG9iamVjdCwgJ2JhdGNoaW5nSWRUZXh0dXJlJyApO1xuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdiYXRjaGluZ0lkVGV4dHVyZScsIG9iamVjdC5faW5kaXJlY3RUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0T3B0aW9uYWwoIF9nbCwgb2JqZWN0LCAnYmF0Y2hpbmdDb2xvclRleHR1cmUnICk7XG5cdFx0XHRcdGlmICggb2JqZWN0Ll9jb2xvcnNUZXh0dXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnYmF0Y2hpbmdDb2xvclRleHR1cmUnLCBvYmplY3QuX2NvbG9yc1RleHR1cmUsIHRleHR1cmVzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gIT09IHVuZGVmaW5lZCB8fCBtb3JwaEF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgfHwgKCBtb3JwaEF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRcdG1vcnBodGFyZ2V0cy51cGRhdGUoIG9iamVjdCwgZ2VvbWV0cnksIHByb2dyYW0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCB8fCBtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyAhPT0gb2JqZWN0LnJlY2VpdmVTaGFkb3cgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgPSBvYmplY3QucmVjZWl2ZVNoYWRvdztcblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncmVjZWl2ZVNoYWRvdycsIG9iamVjdC5yZWNlaXZlU2hhZG93ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzI0NDY3I2lzc3VlY29tbWVudC0xMjA5MDMxNTEyXG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNNZXNoR291cmF1ZE1hdGVyaWFsICYmIG1hdGVyaWFsLmVudk1hcCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRtX3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IGVudk1hcDtcblxuXHRcdFx0XHRtX3VuaWZvcm1zLmZsaXBFbnZNYXAudmFsdWUgPSAoIGVudk1hcC5pc0N1YmVUZXh0dXJlICYmIGVudk1hcC5pc1JlbmRlclRhcmdldFRleHR1cmUgPT09IGZhbHNlICkgPyAtMSA6IDE7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsICYmIG1hdGVyaWFsLmVudk1hcCA9PT0gbnVsbCAmJiBzY2VuZS5lbnZpcm9ubWVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRtX3VuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IHNjZW5lLmVudmlyb25tZW50SW50ZW5zaXR5O1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggcmVmcmVzaE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3RvbmVNYXBwaW5nRXhwb3N1cmUnLCBfdGhpcy50b25lTWFwcGluZ0V4cG9zdXJlICk7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgKSB7XG5cblx0XHRcdFx0XHQvLyB0aGUgY3VycmVudCBtYXRlcmlhbCByZXF1aXJlcyBsaWdodGluZyBpbmZvXG5cblx0XHRcdFx0XHQvLyBub3RlOiBhbGwgbGlnaHRpbmcgdW5pZm9ybXMgYXJlIGFsd2F5cyBzZXQgY29ycmVjdGx5XG5cdFx0XHRcdFx0Ly8gdGhleSBzaW1wbHkgcmVmZXJlbmNlIHRoZSByZW5kZXJlcidzIHN0YXRlIGZvciB0aGVpclxuXHRcdFx0XHRcdC8vIHZhbHVlc1xuXHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBjdXJyZW50IG1hdGVyaWFsJ3MgLm5lZWRzVXBkYXRlIGZsYWdzIHRvIHNldFxuXHRcdFx0XHRcdC8vIHRoZSBHTCBzdGF0ZSB3aGVuIHJlcXVpcmVkXG5cblx0XHRcdFx0XHRtYXJrVW5pZm9ybXNMaWdodHNOZWVkc1VwZGF0ZSggbV91bmlmb3JtcywgcmVmcmVzaExpZ2h0cyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyByZWZyZXNoIHVuaWZvcm1zIGNvbW1vbiB0byBzZXZlcmFsIG1hdGVyaWFsc1xuXG5cdFx0XHRcdGlmICggZm9nICYmIG1hdGVyaWFsLmZvZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFscy5yZWZyZXNoRm9nVW5pZm9ybXMoIG1fdW5pZm9ybXMsIGZvZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtYXRlcmlhbHMucmVmcmVzaE1hdGVyaWFsVW5pZm9ybXMoIG1fdW5pZm9ybXMsIG1hdGVyaWFsLCBfcGl4ZWxSYXRpbywgX2hlaWdodCwgY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnRyYW5zbWlzc2lvblJlbmRlclRhcmdldFsgY2FtZXJhLmlkIF0gKTtcblxuXHRcdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBnZXRVbmlmb3JtTGlzdCggbWF0ZXJpYWxQcm9wZXJ0aWVzICksIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmIG1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZCggX2dsLCBnZXRVbmlmb3JtTGlzdCggbWF0ZXJpYWxQcm9wZXJ0aWVzICksIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdjZW50ZXInLCBvYmplY3QuY2VudGVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY29tbW9uIG1hdHJpY2VzXG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsVmlld01hdHJpeCcsIG9iamVjdC5tb2RlbFZpZXdNYXRyaXggKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ25vcm1hbE1hdHJpeCcsIG9iamVjdC5ub3JtYWxNYXRyaXggKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsTWF0cml4Jywgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdC8vIFVCT3NcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzUmF3U2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0Y29uc3QgZ3JvdXBzID0gbWF0ZXJpYWwudW5pZm9ybXNHcm91cHM7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXG5cdFx0XHRcdFx0dW5pZm9ybXNHcm91cHMudXBkYXRlKCBncm91cCwgcHJvZ3JhbSApO1xuXHRcdFx0XHRcdHVuaWZvcm1zR3JvdXBzLmJpbmQoIGdyb3VwLCBwcm9ncmFtICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBwcm9ncmFtO1xuXG5cdFx0fVxuXG5cdFx0Ly8gSWYgdW5pZm9ybXMgYXJlIG1hcmtlZCBhcyBjbGVhbiwgdGhleSBkb24ndCBuZWVkIHRvIGJlIGxvYWRlZCB0byB0aGUgR1BVLlxuXG5cdFx0ZnVuY3Rpb24gbWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIHVuaWZvcm1zLCB2YWx1ZSApIHtcblxuXHRcdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0UHJvYmUubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblxuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdFx0dW5pZm9ybXMucG9pbnRMaWdodFNoYWRvd3MubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodFNoYWRvd3MubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHRcdHVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBtYXRlcmlhbE5lZWRzTGlnaHRzKCBtYXRlcmlhbCApIHtcblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgfHxcblx0XHRcdFx0KCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmIG1hdGVyaWFsLmxpZ2h0cyA9PT0gdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgYWN0aXZlIGN1YmUgZmFjZS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFjdGl2ZSBjdWJlIGZhY2UuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRBY3RpdmVDdWJlRmFjZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9jdXJyZW50QWN0aXZlQ3ViZUZhY2U7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgYWN0aXZlIG1pcG1hcCBsZXZlbC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFjdGl2ZSBtaXBtYXAgbGV2ZWwuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgYWN0aXZlIHJlbmRlciB0YXJnZXQuXG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuIHs/V2ViR0xSZW5kZXJUYXJnZXR9IFRoZSBhY3RpdmUgcmVuZGVyIHRhcmdldC4gUmV0dXJucyBgbnVsbGAgaWYgbm8gcmVuZGVyIHRhcmdldFxuXHRcdCAqIGlzIGN1cnJlbnRseSBzZXQuXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRSZW5kZXJUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldDtcblxuXHRcdH07XG5cblx0XHR0aGlzLnNldFJlbmRlclRhcmdldFRleHR1cmVzID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGNvbG9yVGV4dHVyZSwgZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRjb25zdCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIgPSByZW5kZXJUYXJnZXQucmVzb2x2ZURlcHRoQnVmZmVyID09PSBmYWxzZTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBUaGUgbXVsdGlzYW1wbGVfcmVuZGVyX3RvX3RleHR1cmUgZXh0ZW5zaW9uIGRvZXNuJ3Qgd29yayBwcm9wZXJseSBpZiB0aGVyZVxuXHRcdFx0XHQvLyBhcmUgbWlkZnJhbWUgZmx1c2hlcyBhbmQgYW4gZXh0ZXJuYWwgZGVwdGggYnVmZmVyLiBEaXNhYmxlIHVzZSBvZiB0aGUgZXh0ZW5zaW9uLlxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlUmVuZGVyVG9UZXh0dXJlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICkuX193ZWJnbFRleHR1cmUgPSBjb2xvclRleHR1cmU7XG5cdFx0XHRwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX2F1dG9BbGxvY2F0ZURlcHRoQnVmZmVyID8gdW5kZWZpbmVkIDogZGVwdGhUZXh0dXJlO1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyA9IHRydWU7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXRGcmFtZWJ1ZmZlciA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBkZWZhdWx0RnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IGRlZmF1bHRGcmFtZWJ1ZmZlcjtcblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX191c2VEZWZhdWx0RnJhbWVidWZmZXIgPSBkZWZhdWx0RnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZDtcblxuXHRcdH07XG5cblx0XHRjb25zdCBfc2NyYXRjaEZyYW1lQnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIHRoZSBhY3RpdmUgcmVuZGVydGFyZ2V0LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHs/V2ViR0xSZW5kZXJUYXJnZXR9IHJlbmRlclRhcmdldCAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIHNldC4gV2hlbiBgbnVsbGAgaXMgZ2l2ZW4sXG5cdFx0ICogdGhlIGNhbnZhcyBpcyBzZXQgYXMgdGhlIGFjdGl2ZSByZW5kZXIgdGFyZ2V0IGluc3RlYWQuXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IFthY3RpdmVDdWJlRmFjZT0wXSAtIFRoZSBhY3RpdmUgY3ViZSBmYWNlIHdoZW4gdXNpbmcgYSBjdWJlIHJlbmRlciB0YXJnZXQuXG5cdFx0ICogSW5kaWNhdGVzIHRoZSB6IGxheWVyIHRvIHJlbmRlciBpbiB0byB3aGVuIHVzaW5nIDNEIG9yIGFycmF5IHJlbmRlciB0YXJnZXRzLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbYWN0aXZlTWlwbWFwTGV2ZWw9MF0gLSBUaGUgYWN0aXZlIG1pcG1hcCBsZXZlbC5cblx0XHQgKi9cblx0XHR0aGlzLnNldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICggcmVuZGVyVGFyZ2V0LCBhY3RpdmVDdWJlRmFjZSA9IDAsIGFjdGl2ZU1pcG1hcExldmVsID0gMCApIHtcblxuXHRcdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQ7XG5cdFx0XHRfY3VycmVudEFjdGl2ZUN1YmVGYWNlID0gYWN0aXZlQ3ViZUZhY2U7XG5cdFx0XHRfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHRcdGxldCB1c2VEZWZhdWx0RnJhbWVidWZmZXIgPSB0cnVlO1xuXHRcdFx0bGV0IGZyYW1lYnVmZmVyID0gbnVsbDtcblx0XHRcdGxldCBpc0N1YmUgPSBmYWxzZTtcblx0XHRcdGxldCBpc1JlbmRlclRhcmdldDNEID0gZmFsc2U7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdGNvbnN0IHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fdXNlRGVmYXVsdEZyYW1lYnVmZmVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byByZWJpbmQgdGhlIGZyYW1lYnVmZmVyLlxuXHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBudWxsICk7XG5cdFx0XHRcdFx0dXNlRGVmYXVsdEZyYW1lYnVmZmVyID0gZmFsc2U7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9faGFzRXh0ZXJuYWxUZXh0dXJlcyApIHtcblxuXHRcdFx0XHRcdC8vIENvbG9yIGFuZCBkZXB0aCB0ZXh0dXJlIG11c3QgYmUgcmVib3VuZCBpbiBvcmRlciBmb3IgdGhlIHN3YXBjaGFpbiB0byB1cGRhdGUuXG5cdFx0XHRcdFx0dGV4dHVyZXMucmViaW5kVGV4dHVyZXMoIHJlbmRlclRhcmdldCwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICkuX193ZWJnbFRleHR1cmUsIHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlICkuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgZGVwdGggdGV4dHVyZSBpcyBhbHJlYWR5IGJvdW5kIHRvIHRoZSBmcmFtZSBidWZmZXIgYW5kIHRoYXQgaXQncyBiZWVuIGluaXRpYWxpemVkXG5cdFx0XHRcdFx0Y29uc3QgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZTtcblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX19ib3VuZERlcHRoVGV4dHVyZSAhPT0gZGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgZGVwdGggdGV4dHVyZSBpcyBjb21wYXRpYmxlXG5cdFx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHRcdGRlcHRoVGV4dHVyZSAhPT0gbnVsbCAmJlxuXHRcdFx0XHRcdFx0XHRwcm9wZXJ0aWVzLmhhcyggZGVwdGhUZXh0dXJlICkgJiZcblx0XHRcdFx0XHRcdFx0KCByZW5kZXJUYXJnZXQud2lkdGggIT09IGRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aCB8fCByZW5kZXJUYXJnZXQuaGVpZ2h0ICE9PSBkZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0IClcblx0XHRcdFx0XHRcdCkge1xuXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1dlYkdMUmVuZGVyVGFyZ2V0OiBBdHRhY2hlZCBEZXB0aFRleHR1cmUgaXMgaW5pdGlhbGl6ZWQgdG8gdGhlIGluY29ycmVjdCBzaXplLicgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBTd2FwIHRoZSBkZXB0aCBidWZmZXIgdG8gdGhlIGN1cnJlbnRseSBhdHRhY2hlZCBvbmVcblx0XHRcdFx0XHRcdHRleHR1cmVzLnNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSB8fCB0ZXh0dXJlLmlzRGF0YUFycmF5VGV4dHVyZSB8fCB0ZXh0dXJlLmlzQ29tcHJlc3NlZEFycmF5VGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGlzUmVuZGVyVGFyZ2V0M0QgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBfX3dlYmdsRnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlIF1bIGFjdGl2ZU1pcG1hcExldmVsIF07XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2UgXTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlzQ3ViZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggKCByZW5kZXJUYXJnZXQuc2FtcGxlcyA+IDAgKSAmJiB0ZXh0dXJlcy51c2VNdWx0aXNhbXBsZWRSVFQoIHJlbmRlclRhcmdldCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBfX3dlYmdsRnJhbWVidWZmZXIgKSApIHtcblxuXHRcdFx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbIGFjdGl2ZU1pcG1hcExldmVsIF07XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRmcmFtZWJ1ZmZlciA9IF9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2N1cnJlbnRWaWV3cG9ydC5jb3B5KCByZW5kZXJUYXJnZXQudmlld3BvcnQgKTtcblx0XHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkoIHJlbmRlclRhcmdldC5zY2lzc29yICk7XG5cdFx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gX3NjaXNzb3JUZXN0O1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIHNjcmF0Y2ggZnJhbWUgYnVmZmVyIGlmIHJlbmRlcmluZyB0byBhIG1pcCBsZXZlbCB0byBhdm9pZCBkZXB0aCBidWZmZXJzXG5cdFx0XHQvLyBiZWluZyBib3VuZCB0aGF0IGFyZSBkaWZmZXJlbnQgc2l6ZXMuXG5cdFx0XHRpZiAoIGFjdGl2ZU1pcG1hcExldmVsICE9PSAwICkge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX3NjcmF0Y2hGcmFtZUJ1ZmZlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBmcmFtZWJ1ZmZlckJvdW5kID0gc3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmZmVyICk7XG5cblx0XHRcdGlmICggZnJhbWVidWZmZXJCb3VuZCAmJiB1c2VEZWZhdWx0RnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdFx0c3RhdGUuZHJhd0J1ZmZlcnMoIHJlbmRlclRhcmdldCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydCApO1xuXHRcdFx0c3RhdGUuc2Npc3NvciggX2N1cnJlbnRTY2lzc29yICk7XG5cdFx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX2N1cnJlbnRTY2lzc29yVGVzdCApO1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0XHRjb25zdCB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIF9nbC5GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBfZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgYWN0aXZlQ3ViZUZhY2UsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpc1JlbmRlclRhcmdldDNEICkge1xuXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRcdGNvbnN0IGxheWVyID0gYWN0aXZlQ3ViZUZhY2U7XG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCwgbGF5ZXIgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0ICE9PSBudWxsICYmIGFjdGl2ZU1pcG1hcExldmVsICE9PSAwICkge1xuXG5cdFx0XHRcdC8vIE9ubHkgYmluZCB0aGUgZnJhbWUgYnVmZmVyIGlmIHdlIGFyZSB1c2luZyBhIHNjcmF0Y2ggZnJhbWUgYnVmZmVyIHRvIHJlbmRlciB0byBhIG1pcG1hcC5cblx0XHRcdFx0Ly8gSWYgd2UgcmViaW5kIHRoZSB0ZXh0dXJlIHdoZW4gdXNpbmcgYSBtdWx0aSBzYW1wbGUgYnVmZmVyIHRoZW4gYW4gZXJyb3IgYWJvdXQgaW5jb25zaXN0ZW50IHNhbXBsZXMgd2lsbCBiZSB0aHJvd24uXG5cdFx0XHRcdGNvbnN0IHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIF9nbC5URVhUVVJFXzJELCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSwgYWN0aXZlTWlwbWFwTGV2ZWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtMTsgLy8gcmVzZXQgY3VycmVudCBtYXRlcmlhbCB0byBlbnN1cmUgY29ycmVjdCB1bmlmb3JtIGJpbmRpbmdzXG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVhZHMgdGhlIHBpeGVsIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcmVuZGVyIHRhcmdldCBpbnRvIHRoZSBnaXZlbiBidWZmZXIuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1dlYkdMUmVuZGVyVGFyZ2V0fSByZW5kZXJUYXJnZXQgLSBUaGUgcmVuZGVyIHRhcmdldCB0byByZWFkIGZyb20uXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHggLSBUaGUgYHhgIGNvb3JkaW5hdGUgb2YgdGhlIGNvcHkgcmVnaW9uJ3Mgb3JpZ2luLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gVGhlIGB5YCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IHJlZ2lvbidzIG9yaWdpbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGNvcHkgcmVnaW9uLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSBjb3B5IHJlZ2lvbi5cblx0XHQgKiBAcGFyYW0ge1R5cGVkQXJyYXl9IGJ1ZmZlciAtIFRoZSByZXN1bHQgYnVmZmVyLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBbYWN0aXZlQ3ViZUZhY2VJbmRleF0gLSBUaGUgYWN0aXZlIGN1YmUgZmFjZSBpbmRleC5cblx0XHQgKi9cblx0XHR0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyLCBhY3RpdmVDdWJlRmFjZUluZGV4ICkge1xuXG5cdFx0XHRpZiAoICEgKCByZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXQgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxldCBmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICYmIGFjdGl2ZUN1YmVGYWNlSW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyWyBhY3RpdmVDdWJlRmFjZUluZGV4IF07XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmVGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZUZvcm1hdFJlYWRhYmxlKCB0ZXh0dXJlRm9ybWF0ICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gUkdCQSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIGZvcm1hdC4nICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgY2FwYWJpbGl0aWVzLnRleHR1cmVUeXBlUmVhZGFibGUoIHRleHR1cmVUeXBlICkgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gVW5zaWduZWRCeXRlVHlwZSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIHR5cGUuJyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXG5cdFx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRcdC8vIHJlc3RvcmUgZnJhbWVidWZmZXIgb2YgY3VycmVudCByZW5kZXIgdGFyZ2V0IGlmIG5lY2Vzc2FyeVxuXG5cdFx0XHRcdFx0Y29uc3QgZnJhbWVidWZmZXIgPSAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkgPyBwcm9wZXJ0aWVzLmdldCggX2N1cnJlbnRSZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXIgOiBudWxsO1xuXHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFzeW5jaHJvbm91cywgbm9uLWJsb2NraW5nIHZlcnNpb24gb2Yge0BsaW5rIFdlYkdMUmVuZGVyZXIjcmVhZFJlbmRlclRhcmdldFBpeGVsc30uXG5cdFx0ICpcblx0XHQgKiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhpcyB2ZXJzaW9uIG9mIGByZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzKClgIHdoZW5ldmVyIHBvc3NpYmxlLlxuXHRcdCAqXG5cdFx0ICogQGFzeW5jXG5cdFx0ICogQHBhcmFtIHtXZWJHTFJlbmRlclRhcmdldH0gcmVuZGVyVGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gcmVhZCBmcm9tLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGB4YCBjb29yZGluYXRlIG9mIHRoZSBjb3B5IHJlZ2lvbidzIG9yaWdpbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBgeWAgY29vcmRpbmF0ZSBvZiB0aGUgY29weSByZWdpb24ncyBvcmlnaW4uXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBjb3B5IHJlZ2lvbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIGhlaWdodCBvZiB0aGUgY29weSByZWdpb24uXG5cdFx0ICogQHBhcmFtIHtUeXBlZEFycmF5fSBidWZmZXIgLSBUaGUgcmVzdWx0IGJ1ZmZlci5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW2FjdGl2ZUN1YmVGYWNlSW5kZXhdIC0gVGhlIGFjdGl2ZSBjdWJlIGZhY2UgaW5kZXguXG5cdFx0ICogQHJldHVybiB7UHJvbWlzZTxUeXBlZEFycmF5Pn0gQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVhZCBoYXMgYmVlbiBmaW5pc2hlZC4gVGhlIHJlc29sdmUgcHJvdmlkZXMgdGhlIHJlYWQgZGF0YSBhcyBhIHR5cGVkIGFycmF5LlxuXHRcdCAqL1xuXHRcdHRoaXMucmVhZFJlbmRlclRhcmdldFBpeGVsc0FzeW5jID0gYXN5bmMgZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciwgYWN0aXZlQ3ViZUZhY2VJbmRleCApIHtcblxuXHRcdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgJiYgYWN0aXZlQ3ViZUZhY2VJbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXJbIGFjdGl2ZUN1YmVGYWNlSW5kZXggXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGZyYW1lYnVmZmVyICkge1xuXG5cdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50IGVuc3VyZXMgdmFsaWQgcmVhZCByZXF1ZXN0cyAobm8gb3V0LW9mLWJvdW5kcyBwaXhlbHMsIHNlZSAjODYwNClcblx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIHNldCB0aGUgYWN0aXZlIGZyYW1lIGJ1ZmZlciB0byB0aGUgb25lIHdlIHdhbnQgdG8gcmVhZFxuXHRcdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdFx0Y29uc3QgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xuXHRcdFx0XHRcdGNvbnN0IHRleHR1cmVGb3JtYXQgPSB0ZXh0dXJlLmZvcm1hdDtcblx0XHRcdFx0XHRjb25zdCB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRcdGlmICggISBjYXBhYmlsaXRpZXMudGV4dHVyZUZvcm1hdFJlYWRhYmxlKCB0ZXh0dXJlRm9ybWF0ICkgKSB7XG5cblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsc0FzeW5jOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFJHQkEgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCBmb3JtYXQuJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhIGNhcGFiaWxpdGllcy50ZXh0dXJlVHlwZVJlYWRhYmxlKCB0ZXh0dXJlVHlwZSApICkge1xuXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBnbEJ1ZmZlciA9IF9nbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdFx0XHRfZ2wuYmluZEJ1ZmZlciggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCBnbEJ1ZmZlciApO1xuXHRcdFx0XHRcdF9nbC5idWZmZXJEYXRhKCBfZ2wuUElYRUxfUEFDS19CVUZGRVIsIGJ1ZmZlci5ieXRlTGVuZ3RoLCBfZ2wuU1RSRUFNX1JFQUQgKTtcblx0XHRcdFx0XHRfZ2wucmVhZFBpeGVscyggeCwgeSwgd2lkdGgsIGhlaWdodCwgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApLCB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlVHlwZSApLCAwICk7XG5cblx0XHRcdFx0XHQvLyByZXNldCB0aGUgZnJhbWUgYnVmZmVyIHRvIHRoZSBjdXJyZW50bHkgc2V0IGJ1ZmZlciBiZWZvcmUgd2FpdGluZ1xuXHRcdFx0XHRcdGNvbnN0IGN1cnJGcmFtZWJ1ZmZlciA9IF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsID8gcHJvcGVydGllcy5nZXQoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyIDogbnVsbDtcblx0XHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5GUkFNRUJVRkZFUiwgY3VyckZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0XHQvLyBjaGVjayBpZiB0aGUgY29tbWFuZHMgaGF2ZSBmaW5pc2hlZCBldmVyeSA4IG1zXG5cdFx0XHRcdFx0Y29uc3Qgc3luYyA9IF9nbC5mZW5jZVN5bmMoIF9nbC5TWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSwgMCApO1xuXG5cdFx0XHRcdFx0X2dsLmZsdXNoKCk7XG5cblx0XHRcdFx0XHRhd2FpdCBwcm9iZUFzeW5jKCBfZ2wsIHN5bmMsIDQgKTtcblxuXHRcdFx0XHRcdC8vIHJlYWQgdGhlIGRhdGEgYW5kIGRlbGV0ZSB0aGUgYnVmZmVyXG5cdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIF9nbC5QSVhFTF9QQUNLX0JVRkZFUiwgZ2xCdWZmZXIgKTtcblx0XHRcdFx0XHRfZ2wuZ2V0QnVmZmVyU3ViRGF0YSggX2dsLlBJWEVMX1BBQ0tfQlVGRkVSLCAwLCBidWZmZXIgKTtcblx0XHRcdFx0XHRfZ2wuZGVsZXRlQnVmZmVyKCBnbEJ1ZmZlciApO1xuXHRcdFx0XHRcdF9nbC5kZWxldGVTeW5jKCBzeW5jICk7XG5cblx0XHRcdFx0XHRyZXR1cm4gYnVmZmVyO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYzogcmVxdWVzdGVkIHJlYWQgYm91bmRzIGFyZSBvdXQgb2YgcmFuZ2UuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENvcGllcyBwaXhlbHMgZnJvbSB0aGUgY3VycmVudCBib3VuZCBmcmFtZWJ1ZmZlciBpbnRvIHRoZSBnaXZlbiB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtGcmFtZWJ1ZmZlclRleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjJ9IHBvc2l0aW9uIC0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBjb3B5IG9wZXJhdGlvbi5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gW2xldmVsPTBdIC0gVGhlIG1pcCBsZXZlbC4gVGhlIGRlZmF1bHQgcmVwcmVzZW50cyB0aGUgYmFzZSBtaXAuXG5cdFx0ICovXG5cdFx0dGhpcy5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmUsIHBvc2l0aW9uID0gbnVsbCwgbGV2ZWwgPSAwICkge1xuXG5cdFx0XHRjb25zdCBsZXZlbFNjYWxlID0gTWF0aC5wb3coIDIsIC0gbGV2ZWwgKTtcblx0XHRcdGNvbnN0IHdpZHRoID0gTWF0aC5mbG9vciggdGV4dHVyZS5pbWFnZS53aWR0aCAqIGxldmVsU2NhbGUgKTtcblx0XHRcdGNvbnN0IGhlaWdodCA9IE1hdGguZmxvb3IoIHRleHR1cmUuaW1hZ2UuaGVpZ2h0ICogbGV2ZWxTY2FsZSApO1xuXG5cdFx0XHRjb25zdCB4ID0gcG9zaXRpb24gIT09IG51bGwgPyBwb3NpdGlvbi54IDogMDtcblx0XHRcdGNvbnN0IHkgPSBwb3NpdGlvbiAhPT0gbnVsbCA/IHBvc2l0aW9uLnkgOiAwO1xuXG5cdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0X2dsLmNvcHlUZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgbGV2ZWwsIDAsIDAsIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdGNvbnN0IF9zcmNGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdGNvbnN0IF9kc3RGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29waWVzIGRhdGEgb2YgdGhlIGdpdmVuIHNvdXJjZSB0ZXh0dXJlIGludG8gYSBkZXN0aW5hdGlvbiB0ZXh0dXJlLlxuXHRcdCAqXG5cdFx0ICogV2hlbiB1c2luZyByZW5kZXIgdGFyZ2V0IHRleHR1cmVzIGFzIGBzcmNUZXh0dXJlYCBhbmQgYGRzdFRleHR1cmVgLCB5b3UgbXVzdCBtYWtlIHN1cmUgYm90aCByZW5kZXIgdGFyZ2V0cyBhcmUgaW5pdGlhbGl6ZWRcblx0XHQgKiB7QGxpbmsgV2ViR0xSZW5kZXJlciNpbml0UmVuZGVyVGFyZ2V0fS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7VGV4dHVyZX0gc3JjVGV4dHVyZSAtIFRoZSBzb3VyY2UgdGV4dHVyZS5cblx0XHQgKiBAcGFyYW0ge1RleHR1cmV9IGRzdFRleHR1cmUgLSBUaGUgZGVzdGluYXRpb24gdGV4dHVyZS5cblx0XHQgKiBAcGFyYW0ge0JveDJ8Qm94M30gW3NyY1JlZ2lvbj1udWxsXSAtIEEgYm91bmRpbmcgYm94IHdoaWNoIGRlc2NyaWJlcyB0aGUgc291cmNlIHJlZ2lvbi4gQ2FuIGJlIHR3byBvciB0aHJlZS1kaW1lbnNpb25hbC5cblx0XHQgKiBAcGFyYW0ge1ZlY3RvcjJ8VmVjdG9yM30gW2RzdFBvc2l0aW9uPW51bGxdIC0gQSB2ZWN0b3IgdGhhdCByZXByZXNlbnRzIHRoZSBvcmlnaW4gb2YgdGhlIGRlc3RpbmF0aW9uIHJlZ2lvbi4gQ2FuIGJlIHR3byBvciB0aHJlZS1kaW1lbnNpb25hbC5cblx0XHQgKiBAcGFyYW0ge251bWJlcn0gc3JjTGV2ZWwgLSBUaGUgc291cmNlIG1pcG1hcCBsZXZlbCB0byBjb3B5LlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBkc3RMZXZlbCAtIFRoZSBkZXN0aW5hdGlvbiBtaXBtYXAgbGV2ZWwuXG5cdFx0ICovXG5cdFx0dGhpcy5jb3B5VGV4dHVyZVRvVGV4dHVyZSA9IGZ1bmN0aW9uICggc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgc3JjUmVnaW9uID0gbnVsbCwgZHN0UG9zaXRpb24gPSBudWxsLCBzcmNMZXZlbCA9IDAsIGRzdExldmVsID0gbnVsbCApIHtcblxuXHRcdFx0Ly8gc3VwcG9ydCB0aGUgcHJldmlvdXMgc2lnbmF0dXJlIHdpdGgganVzdCBhIHNpbmdsZSBkc3QgbWlwbWFwIGxldmVsXG5cdFx0XHRpZiAoIGRzdExldmVsID09PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggc3JjTGV2ZWwgIT09IDAgKSB7XG5cblx0XHRcdFx0XHQvLyBAZGVwcmVjYXRlZCwgcjE3MVxuXHRcdFx0XHRcdHdhcm5PbmNlKCAnV2ViR0xSZW5kZXJlcjogY29weVRleHR1cmVUb1RleHR1cmUgZnVuY3Rpb24gc2lnbmF0dXJlIGhhcyBjaGFuZ2VkIHRvIHN1cHBvcnQgc3JjIGFuZCBkc3QgbWlwbWFwIGxldmVscy4nICk7XG5cdFx0XHRcdFx0ZHN0TGV2ZWwgPSBzcmNMZXZlbDtcblx0XHRcdFx0XHRzcmNMZXZlbCA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGRzdExldmVsID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2F0aGVyIHRoZSBuZWNlc3NhcnkgZGltZW5zaW9ucyB0byBjb3B5XG5cdFx0XHRsZXQgd2lkdGgsIGhlaWdodCwgZGVwdGgsIG1pblgsIG1pblksIG1pblo7XG5cdFx0XHRsZXQgZHN0WCwgZHN0WSwgZHN0Wjtcblx0XHRcdGNvbnN0IGltYWdlID0gc3JjVGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlID8gc3JjVGV4dHVyZS5taXBtYXBzWyBkc3RMZXZlbCBdIDogc3JjVGV4dHVyZS5pbWFnZTtcblx0XHRcdGlmICggc3JjUmVnaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHdpZHRoID0gc3JjUmVnaW9uLm1heC54IC0gc3JjUmVnaW9uLm1pbi54O1xuXHRcdFx0XHRoZWlnaHQgPSBzcmNSZWdpb24ubWF4LnkgLSBzcmNSZWdpb24ubWluLnk7XG5cdFx0XHRcdGRlcHRoID0gc3JjUmVnaW9uLmlzQm94MyA/IHNyY1JlZ2lvbi5tYXgueiAtIHNyY1JlZ2lvbi5taW4ueiA6IDE7XG5cdFx0XHRcdG1pblggPSBzcmNSZWdpb24ubWluLng7XG5cdFx0XHRcdG1pblkgPSBzcmNSZWdpb24ubWluLnk7XG5cdFx0XHRcdG1pblogPSBzcmNSZWdpb24uaXNCb3gzID8gc3JjUmVnaW9uLm1pbi56IDogMDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zdCBsZXZlbFNjYWxlID0gTWF0aC5wb3coIDIsIC0gc3JjTGV2ZWwgKTtcblx0XHRcdFx0d2lkdGggPSBNYXRoLmZsb29yKCBpbWFnZS53aWR0aCAqIGxldmVsU2NhbGUgKTtcblx0XHRcdFx0aGVpZ2h0ID0gTWF0aC5mbG9vciggaW1hZ2UuaGVpZ2h0ICogbGV2ZWxTY2FsZSApO1xuXHRcdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0ZGVwdGggPSBpbWFnZS5kZXB0aDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzcmNUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGRlcHRoID0gTWF0aC5mbG9vciggaW1hZ2UuZGVwdGggKiBsZXZlbFNjYWxlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGRlcHRoID0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWluWCA9IDA7XG5cdFx0XHRcdG1pblkgPSAwO1xuXHRcdFx0XHRtaW5aID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGRzdFBvc2l0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGRzdFggPSBkc3RQb3NpdGlvbi54O1xuXHRcdFx0XHRkc3RZID0gZHN0UG9zaXRpb24ueTtcblx0XHRcdFx0ZHN0WiA9IGRzdFBvc2l0aW9uLno7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZHN0WCA9IDA7XG5cdFx0XHRcdGRzdFkgPSAwO1xuXHRcdFx0XHRkc3RaID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdXAgdGhlIGRlc3RpbmF0aW9uIHRhcmdldFxuXHRcdFx0Y29uc3QgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCBkc3RUZXh0dXJlLmZvcm1hdCApO1xuXHRcdFx0Y29uc3QgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7XG5cdFx0XHRsZXQgZ2xUYXJnZXQ7XG5cblx0XHRcdGlmICggZHN0VGV4dHVyZS5pc0RhdGEzRFRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTNEKCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRcdGdsVGFyZ2V0ID0gX2dsLlRFWFRVUkVfM0Q7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGRzdFRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IGRzdFRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRcdGdsVGFyZ2V0ID0gX2dsLlRFWFRVUkVfMkRfQVJSQVk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCBkc3RUZXh0dXJlLCAwICk7XG5cdFx0XHRcdGdsVGFyZ2V0ID0gX2dsLlRFWFRVUkVfMkQ7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZHN0VGV4dHVyZS5mbGlwWSApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBkc3RUZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19BTElHTk1FTlQsIGRzdFRleHR1cmUudW5wYWNrQWxpZ25tZW50ICk7XG5cblx0XHRcdC8vIHVzZWQgZm9yIGNvcHlpbmcgZGF0YSBmcm9tIGNwdVxuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1Jvd0xlbiA9IF9nbC5nZXRQYXJhbWV0ZXIoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja0ltYWdlSGVpZ2h0ID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQgKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1BJWEVMUyApO1xuXHRcdFx0Y29uc3QgY3VycmVudFVucGFja1NraXBSb3dzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX1JPV1MgKTtcblx0XHRcdGNvbnN0IGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzID0gX2dsLmdldFBhcmFtZXRlciggX2dsLlVOUEFDS19TS0lQX0lNQUdFUyApO1xuXG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfUk9XX0xFTkdUSCwgaW1hZ2Uud2lkdGggKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGltYWdlLmhlaWdodCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBtaW5YICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9ST1dTLCBtaW5ZICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9JTUFHRVMsIG1pblogKTtcblxuXHRcdFx0Ly8gc2V0IHVwIHRoZSBzcmMgdGV4dHVyZVxuXHRcdFx0Y29uc3QgaXNTcmMzRCA9IHNyY1RleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IHNyY1RleHR1cmUuaXNEYXRhM0RUZXh0dXJlO1xuXHRcdFx0Y29uc3QgaXNEc3QzRCA9IGRzdFRleHR1cmUuaXNEYXRhQXJyYXlUZXh0dXJlIHx8IGRzdFRleHR1cmUuaXNEYXRhM0RUZXh0dXJlO1xuXHRcdFx0aWYgKCBzcmNUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHRcdGNvbnN0IHNyY1RleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNyY1RleHR1cmUgKTtcblx0XHRcdFx0Y29uc3QgZHN0VGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggZHN0VGV4dHVyZSApO1xuXHRcdFx0XHRjb25zdCBzcmNSZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNyY1RleHR1cmVQcm9wZXJ0aWVzLl9fcmVuZGVyVGFyZ2V0ICk7XG5cdFx0XHRcdGNvbnN0IGRzdFJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggZHN0VGV4dHVyZVByb3BlcnRpZXMuX19yZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgc3JjUmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuRFJBV19GUkFNRUJVRkZFUiwgZHN0UmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkZXB0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdC8vIGlmIHRoZSBzb3VyY2Ugb3IgZGVzdGluYXRpb24gYXJlIGEgM2QgdGFyZ2V0IHRoZW4gYSBsYXllciBuZWVkcyB0byBiZSBib3VuZFxuXHRcdFx0XHRcdGlmICggaXNTcmMzRCApIHtcblxuXHRcdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZUxheWVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgX2dsLkNPTE9SX0FUVEFDSE1FTlQwLCBwcm9wZXJ0aWVzLmdldCggc3JjVGV4dHVyZSApLl9fd2ViZ2xUZXh0dXJlLCBzcmNMZXZlbCwgbWluWiArIGkgKTtcblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmVMYXllciggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgcHJvcGVydGllcy5nZXQoIGRzdFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSwgZHN0TGV2ZWwsIGRzdFogKyBpICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfZ2wuYmxpdEZyYW1lYnVmZmVyKCBtaW5YLCBtaW5ZLCB3aWR0aCwgaGVpZ2h0LCBkc3RYLCBkc3RZLCB3aWR0aCwgaGVpZ2h0LCBfZ2wuREVQVEhfQlVGRkVSX0JJVCwgX2dsLk5FQVJFU1QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHNyY0xldmVsICE9PSAwIHx8IHNyY1RleHR1cmUuaXNSZW5kZXJUYXJnZXRUZXh0dXJlIHx8IHByb3BlcnRpZXMuaGFzKCBzcmNUZXh0dXJlICkgKSB7XG5cblx0XHRcdFx0Ly8gZ2V0IHRoZSBhcHByb3ByaWF0ZSBmcmFtZSBidWZmZXJzXG5cdFx0XHRcdGNvbnN0IHNyY1RleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHNyY1RleHR1cmUgKTtcblx0XHRcdFx0Y29uc3QgZHN0VGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggZHN0VGV4dHVyZSApO1xuXG5cdFx0XHRcdC8vIGJpbmQgdGhlIGZyYW1lIGJ1ZmZlciB0YXJnZXRzXG5cdFx0XHRcdHN0YXRlLmJpbmRGcmFtZWJ1ZmZlciggX2dsLlJFQURfRlJBTUVCVUZGRVIsIF9zcmNGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZHN0RnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCBkZXB0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdC8vIGFzc2lnbiB0aGUgY29ycmVjdCBsYXllcnMgYW5kIG1pcCBtYXBzIHRvIHRoZSBmcmFtZSBidWZmZXJzXG5cdFx0XHRcdFx0aWYgKCBpc1NyYzNEICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIF9nbC5SRUFEX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIHNyY1RleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBzcmNMZXZlbCwgbWluWiArIGkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLlJFQURfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfMkQsIHNyY1RleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBzcmNMZXZlbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCBpc0RzdDNEICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBfZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGRzdFRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBkc3RMZXZlbCwgZHN0WiArIGkgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggX2dsLkRSQVdfRlJBTUVCVUZGRVIsIF9nbC5DT0xPUl9BVFRBQ0hNRU5UMCwgX2dsLlRFWFRVUkVfMkQsIGRzdFRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBkc3RMZXZlbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gY29weSB0aGUgZGF0YSB1c2luZyB0aGUgZmFzdGVzdCBmdW5jdGlvbiB0aGF0IGNhbiBhY2hpZXZlIHRoZSBjb3B5XG5cdFx0XHRcdFx0aWYgKCBzcmNMZXZlbCAhPT0gMCApIHtcblxuXHRcdFx0XHRcdFx0X2dsLmJsaXRGcmFtZWJ1ZmZlciggbWluWCwgbWluWSwgd2lkdGgsIGhlaWdodCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgX2dsLkNPTE9SX0JVRkZFUl9CSVQsIF9nbC5ORUFSRVNUICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBpc0RzdDNEICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuY29weVRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgZHN0WiArIGksIG1pblgsIG1pblksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9nbC5jb3B5VGV4U3ViSW1hZ2UyRCggZ2xUYXJnZXQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBtaW5YLCBtaW5ZLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHVuYmluZCByZWFkLCBkcmF3IGJ1ZmZlcnNcblx0XHRcdFx0c3RhdGUuYmluZEZyYW1lYnVmZmVyKCBfZ2wuUkVBRF9GUkFNRUJVRkZFUiwgbnVsbCApO1xuXHRcdFx0XHRzdGF0ZS5iaW5kRnJhbWVidWZmZXIoIF9nbC5EUkFXX0ZSQU1FQlVGRkVSLCBudWxsICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBpc0RzdDNEICkge1xuXG5cdFx0XHRcdFx0Ly8gY29weSBkYXRhIGludG8gdGhlIDNkIHRleHR1cmVcblx0XHRcdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNEYXRhVGV4dHVyZSB8fCBzcmNUZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgZHN0Wiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRzdFRleHR1cmUuaXNDb21wcmVzc2VkQXJyYXlUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlM0QoIGdsVGFyZ2V0LCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgZHN0Wiwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdsRm9ybWF0LCBpbWFnZS5kYXRhICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRfZ2wudGV4U3ViSW1hZ2UzRCggZ2xUYXJnZXQsIGRzdExldmVsLCBkc3RYLCBkc3RZLCBkc3RaLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gY29weSBkYXRhIGludG8gdGhlIDJkIHRleHR1cmVcblx0XHRcdFx0XHRpZiAoIHNyY1RleHR1cmUuaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggc3JjVGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkge1xuXG5cdFx0XHRcdFx0XHRfZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoIF9nbC5URVhUVVJFXzJELCBkc3RMZXZlbCwgZHN0WCwgZHN0WSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgZ2xGb3JtYXQsIGltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9nbC50ZXhTdWJJbWFnZTJEKCBfZ2wuVEVYVFVSRV8yRCwgZHN0TGV2ZWwsIGRzdFgsIGRzdFksIHdpZHRoLCBoZWlnaHQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlc2V0IHZhbHVlc1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1JPV19MRU5HVEgsIGN1cnJlbnRVbnBhY2tSb3dMZW4gKTtcblx0XHRcdF9nbC5waXhlbFN0b3JlaSggX2dsLlVOUEFDS19JTUFHRV9IRUlHSFQsIGN1cnJlbnRVbnBhY2tJbWFnZUhlaWdodCApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUElYRUxTLCBjdXJyZW50VW5wYWNrU2tpcFBpeGVscyApO1xuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKCBfZ2wuVU5QQUNLX1NLSVBfUk9XUywgY3VycmVudFVucGFja1NraXBSb3dzICk7XG5cdFx0XHRfZ2wucGl4ZWxTdG9yZWkoIF9nbC5VTlBBQ0tfU0tJUF9JTUFHRVMsIGN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzICk7XG5cblx0XHRcdC8vIEdlbmVyYXRlIG1pcG1hcHMgb25seSB3aGVuIGNvcHlpbmcgbGV2ZWwgMFxuXHRcdFx0aWYgKCBkc3RMZXZlbCA9PT0gMCAmJiBkc3RUZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyApIHtcblxuXHRcdFx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAoIGdsVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdFx0fTtcblxuXHRcdHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUzRCA9IGZ1bmN0aW9uICggc3JjVGV4dHVyZSwgZHN0VGV4dHVyZSwgc3JjUmVnaW9uID0gbnVsbCwgZHN0UG9zaXRpb24gPSBudWxsLCBsZXZlbCA9IDAgKSB7XG5cblx0XHRcdC8vIEBkZXByZWNhdGVkLCByMTcwXG5cdFx0XHR3YXJuT25jZSggJ1dlYkdMUmVuZGVyZXI6IGNvcHlUZXh0dXJlVG9UZXh0dXJlM0QgZnVuY3Rpb24gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFwiY29weVRleHR1cmVUb1RleHR1cmVcIiBpbnN0ZWFkLicgKTtcblxuXHRcdFx0cmV0dXJuIHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUoIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIHNyY1JlZ2lvbiwgZHN0UG9zaXRpb24sIGxldmVsICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXMgdGhlIGdpdmVuIFdlYkdMUmVuZGVyVGFyZ2V0IG1lbW9yeS4gVXNlZnVsIGZvciBpbml0aWFsaXppbmcgYSByZW5kZXIgdGFyZ2V0IHNvIGRhdGFcblx0XHQgKiBjYW4gYmUgY29waWVkIGludG8gaXQgdXNpbmcge0BsaW5rIFdlYkdMUmVuZGVyZXIjY29weVRleHR1cmVUb1RleHR1cmV9IGJlZm9yZSBpdCBoYXMgYmVlblxuXHRcdCAqIHJlbmRlcmVkIHRvLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtXZWJHTFJlbmRlclRhcmdldH0gdGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQuXG5cdFx0ICovXG5cdFx0dGhpcy5pbml0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRcdGlmICggcHJvcGVydGllcy5nZXQoIHRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCB0YXJnZXQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEluaXRpYWxpemVzIHRoZSBnaXZlbiB0ZXh0dXJlLiBVc2VmdWwgZm9yIHByZWxvYWRpbmcgYSB0ZXh0dXJlIHJhdGhlciB0aGFuIHdhaXRpbmcgdW50aWwgZmlyc3Rcblx0XHQgKiByZW5kZXIgKHdoaWNoIGNhbiBjYXVzZSBub3RpY2VhYmxlIGxhZ3MgZHVlIHRvIGRlY29kZSBhbmQgR1BVIHVwbG9hZCBvdmVyaGVhZCkuXG5cdFx0ICpcblx0XHQgKiBAcGFyYW0ge1RleHR1cmV9IHRleHR1cmUgLSBUaGUgdGV4dHVyZS5cblx0XHQgKi9cblx0XHR0aGlzLmluaXRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuaXNDdWJlVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgMCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YTNEVGV4dHVyZSApIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFBcnJheVRleHR1cmUgfHwgdGV4dHVyZS5pc0NvbXByZXNzZWRBcnJheVRleHR1cmUgKSB7XG5cblx0XHRcdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIHRleHR1cmUsIDAgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS51bmJpbmRUZXh0dXJlKCk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ2FuIGJlIHVzZWQgdG8gcmVzZXQgdGhlIGludGVybmFsIFdlYkdMIHN0YXRlLiBUaGlzIG1ldGhvZCBpcyBtb3N0bHlcblx0XHQgKiByZWxldmFudCBmb3IgYXBwbGljYXRpb25zIHdoaWNoIHNoYXJlIGEgc2luZ2xlIFdlYkdMIGNvbnRleHQgYWNyb3NzXG5cdFx0ICogbXVsdGlwbGUgV2ViR0wgbGlicmFyaWVzLlxuXHRcdCAqL1xuXHRcdHRoaXMucmVzZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDA7XG5cdFx0XHRfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMDtcblx0XHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuXHRcdFx0c3RhdGUucmVzZXQoKTtcblx0XHRcdGJpbmRpbmdTdGF0ZXMucmVzZXQoKTtcblxuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAnb2JzZXJ2ZScsIHsgZGV0YWlsOiB0aGlzIH0gKSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gb2YgdGhlIHJlbmRlcmVyLlxuXHQgKlxuXHQgKiBJbiBgV2ViR0xSZW5kZXJlcmAsIHRoZSB2YWx1ZSBpcyBhbHdheXMgYFdlYkdMQ29vcmRpbmF0ZVN5c3RlbWAuXG5cdCAqXG5cdCAqIEB0eXBlIHtXZWJHTENvb3JkaW5hdGVTeXN0ZW18V2ViR1BVQ29vcmRpbmF0ZVN5c3RlbX1cblx0ICogQGRlZmF1bHQgV2ViR0xDb29yZGluYXRlU3lzdGVtXG5cdCAqIEByZWFkb25seVxuXHQgKi9cblx0Z2V0IGNvb3JkaW5hdGVTeXN0ZW0oKSB7XG5cblx0XHRyZXR1cm4gV2ViR0xDb29yZGluYXRlU3lzdGVtO1xuXG5cdH1cblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgb3V0cHV0IGNvbG9yIHNwYWNlIG9mIHRoZSByZW5kZXJlci5cblx0ICpcblx0ICogQHR5cGUge1NSR0JDb2xvclNwYWNlfExpbmVhclNSR0JDb2xvclNwYWNlfVxuXHQgKiBAZGVmYXVsdCBTUkdCQ29sb3JTcGFjZVxuXHQgKi9cblx0Z2V0IG91dHB1dENvbG9yU3BhY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fb3V0cHV0Q29sb3JTcGFjZTtcblxuXHR9XG5cblx0c2V0IG91dHB1dENvbG9yU3BhY2UoIGNvbG9yU3BhY2UgKSB7XG5cblx0XHR0aGlzLl9vdXRwdXRDb2xvclNwYWNlID0gY29sb3JTcGFjZTtcblxuXHRcdGNvbnN0IGdsID0gdGhpcy5nZXRDb250ZXh0KCk7XG5cdFx0Z2wuZHJhd2luZ0J1ZmZlckNvbG9yU3BhY2UgPSBDb2xvck1hbmFnZW1lbnQuX2dldERyYXdpbmdCdWZmZXJDb2xvclNwYWNlKCBjb2xvclNwYWNlICk7XG5cdFx0Z2wudW5wYWNrQ29sb3JTcGFjZSA9IENvbG9yTWFuYWdlbWVudC5fZ2V0VW5wYWNrQ29sb3JTcGFjZSgpO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcsIEFkZEVxdWF0aW9uLCBBZGRPcGVyYXRpb24sIEFkZGl0aXZlQmxlbmRpbmcsIEFnWFRvbmVNYXBwaW5nLCBBbHBoYUZvcm1hdCwgQWx3YXlzQ29tcGFyZSwgQWx3YXlzRGVwdGgsIEFycmF5Q2FtZXJhLCBCYWNrU2lkZSwgQm94R2VvbWV0cnksIEJ1ZmZlckF0dHJpYnV0ZSwgQnVmZmVyR2VvbWV0cnksIEJ5dGVUeXBlLCBDaW5lb25Ub25lTWFwcGluZywgQ2xhbXBUb0VkZ2VXcmFwcGluZywgQ29sb3IsIENvbG9yTWFuYWdlbWVudCwgQ29uc3RhbnRBbHBoYUZhY3RvciwgQ29uc3RhbnRDb2xvckZhY3RvciwgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIEN1YmVUZXh0dXJlLCBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZywgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdWxsRmFjZU5vbmUsIEN1c3RvbUJsZW5kaW5nLCBDdXN0b21Ub25lTWFwcGluZywgRGF0YTNEVGV4dHVyZSwgRGF0YUFycmF5VGV4dHVyZSwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgRGVwdGhUZXh0dXJlLCBEb3VibGVTaWRlLCBEc3RBbHBoYUZhY3RvciwgRHN0Q29sb3JGYWN0b3IsIEVxdWFsQ29tcGFyZSwgRXF1YWxEZXB0aCwgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLCBFdWxlciwgRXZlbnREaXNwYXRjaGVyLCBGbG9hdFR5cGUsIEZyb250U2lkZSwgRnJ1c3R1bSwgR0xTTDMsIEdyZWF0ZXJDb21wYXJlLCBHcmVhdGVyRGVwdGgsIEdyZWF0ZXJFcXVhbENvbXBhcmUsIEdyZWF0ZXJFcXVhbERlcHRoLCBIYWxmRmxvYXRUeXBlLCBJbnRUeXBlLCBMYXllcnMsIExlc3NDb21wYXJlLCBMZXNzRGVwdGgsIExlc3NFcXVhbENvbXBhcmUsIExlc3NFcXVhbERlcHRoLCBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcExpbmVhckZpbHRlciwgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciwgTGluZWFyU1JHQkNvbG9yU3BhY2UsIExpbmVhclRvbmVNYXBwaW5nLCBMaW5lYXJUcmFuc2ZlciwgTHVtaW5hbmNlQWxwaGFGb3JtYXQsIEx1bWluYW5jZUZvcm1hdCwgTWF0cml4MywgTWF0cml4NCwgTWF4RXF1YXRpb24sIE1lc2gsIE1lc2hCYXNpY01hdGVyaWFsLCBNZXNoRGVwdGhNYXRlcmlhbCwgTWVzaERpc3RhbmNlTWF0ZXJpYWwsIE1pbkVxdWF0aW9uLCBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nLCBNaXhPcGVyYXRpb24sIE11bHRpcGx5QmxlbmRpbmcsIE11bHRpcGx5T3BlcmF0aW9uLCBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwgTmV1dHJhbFRvbmVNYXBwaW5nLCBOZXZlckNvbXBhcmUsIE5ldmVyRGVwdGgsIE5vQmxlbmRpbmcsIE5vQ29sb3JTcGFjZSwgTm9Ub25lTWFwcGluZywgTm9ybWFsQmxlbmRpbmcsIE5vdEVxdWFsQ29tcGFyZSwgTm90RXF1YWxEZXB0aCwgT2JqZWN0U3BhY2VOb3JtYWxNYXAsIE9uZUZhY3RvciwgT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yLCBPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IsIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IsIE9uZU1pbnVzRHN0Q29sb3JGYWN0b3IsIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IsIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IsIE9ydGhvZ3JhcGhpY0NhbWVyYSwgUENGU2hhZG93TWFwLCBQQ0ZTb2Z0U2hhZG93TWFwLCBQTVJFTUdlbmVyYXRvciwgUGVyc3BlY3RpdmVDYW1lcmEsIFBsYW5lLCBQbGFuZUdlb21ldHJ5LCBSRURfR1JFRU5fUkdUQzJfRm9ybWF0LCBSRURfUkdUQzFfRm9ybWF0LCBSRVZJU0lPTiwgUkdCQURlcHRoUGFja2luZywgUkdCQUZvcm1hdCwgUkdCQUludGVnZXJGb3JtYXQsIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzEweDZfRm9ybWF0LCBSR0JBX0FTVENfMTB4OF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQsIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQsIFJHQkFfQVNUQ180eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg0X0Zvcm1hdCwgUkdCQV9BU1RDXzV4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDVfRm9ybWF0LCBSR0JBX0FTVENfNng2X0Zvcm1hdCwgUkdCQV9BU1RDXzh4NV9Gb3JtYXQsIFJHQkFfQVNUQ184eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg4X0Zvcm1hdCwgUkdCQV9CUFRDX0Zvcm1hdCwgUkdCQV9FVEMyX0VBQ19Gb3JtYXQsIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCwgUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JBX1MzVENfRFhUMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDVfRm9ybWF0LCBSR0JGb3JtYXQsIFJHQl9CUFRDX1NJR05FRF9Gb3JtYXQsIFJHQl9CUFRDX1VOU0lHTkVEX0Zvcm1hdCwgUkdCX0VUQzFfRm9ybWF0LCBSR0JfRVRDMl9Gb3JtYXQsIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCwgUkdCX1MzVENfRFhUMV9Gb3JtYXQsIFJHRm9ybWF0LCBSR0ludGVnZXJGb3JtYXQsIFJlZEZvcm1hdCwgUmVkSW50ZWdlckZvcm1hdCwgUmVpbmhhcmRUb25lTWFwcGluZywgUmVwZWF0V3JhcHBpbmcsIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uLCBTSUdORURfUkVEX0dSRUVOX1JHVEMyX0Zvcm1hdCwgU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQsIFNSR0JDb2xvclNwYWNlLCBTUkdCVHJhbnNmZXIsIFNoYWRlckNodW5rLCBTaGFkZXJMaWIsIFNoYWRlck1hdGVyaWFsLCBTaG9ydFR5cGUsIFNyY0FscGhhRmFjdG9yLCBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yLCBTcmNDb2xvckZhY3RvciwgU3VidHJhY3RFcXVhdGlvbiwgU3VidHJhY3RpdmVCbGVuZGluZywgVGFuZ2VudFNwYWNlTm9ybWFsTWFwLCBUZXh0dXJlLCBVaW50MTZCdWZmZXJBdHRyaWJ1dGUsIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgVW5pZm9ybXNMaWIsIFVuaWZvcm1zVXRpbHMsIFVuc2lnbmVkQnl0ZVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgVW5zaWduZWRJbnQ1OTk5VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydFR5cGUsIFZTTVNoYWRvd01hcCwgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCwgV2ViR0xDb29yZGluYXRlU3lzdGVtLCBXZWJHTEN1YmVSZW5kZXJUYXJnZXQsIFdlYkdMUmVuZGVyVGFyZ2V0LCBXZWJHTFJlbmRlcmVyLCBXZWJHTFV0aWxzLCBXZWJYUkNvbnRyb2xsZXIsIFplcm9GYWN0b3IsIGNyZWF0ZUNhbnZhc0VsZW1lbnQgfTtcbiIsImltcG9ydCB7XG5cdENvbnRyb2xzLFxuXHRNT1VTRSxcblx0UXVhdGVybmlvbixcblx0U3BoZXJpY2FsLFxuXHRUT1VDSCxcblx0VmVjdG9yMixcblx0VmVjdG9yMyxcblx0UGxhbmUsXG5cdFJheSxcblx0TWF0aFV0aWxzXG59IGZyb20gJ3RocmVlJztcblxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZSBjYW1lcmEgaGFzIGJlZW4gdHJhbnNmb3JtZWQgYnkgdGhlIGNvbnRyb2xzLlxuICpcbiAqIEBldmVudCBPcmJpdENvbnRyb2xzI2NoYW5nZVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgX2NoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xuXG4vKipcbiAqIEZpcmVzIHdoZW4gYW4gaW50ZXJhY3Rpb24gd2FzIGluaXRpYXRlZC5cbiAqXG4gKiBAZXZlbnQgT3JiaXRDb250cm9scyNzdGFydFxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgX3N0YXJ0RXZlbnQgPSB7IHR5cGU6ICdzdGFydCcgfTtcblxuLyoqXG4gKiBGaXJlcyB3aGVuIGFuIGludGVyYWN0aW9uIGhhcyBmaW5pc2hlZC5cbiAqXG4gKiBAZXZlbnQgT3JiaXRDb250cm9scyNlbmRcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNvbnN0IF9lbmRFdmVudCA9IHsgdHlwZTogJ2VuZCcgfTtcblxuY29uc3QgX3JheSA9IG5ldyBSYXkoKTtcbmNvbnN0IF9wbGFuZSA9IG5ldyBQbGFuZSgpO1xuY29uc3QgX1RJTFRfTElNSVQgPSBNYXRoLmNvcyggNzAgKiBNYXRoVXRpbHMuREVHMlJBRCApO1xuXG5jb25zdCBfdiA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfdHdvUEkgPSAyICogTWF0aC5QSTtcblxuY29uc3QgX1NUQVRFID0ge1xuXHROT05FOiAtIDEsXG5cdFJPVEFURTogMCxcblx0RE9MTFk6IDEsXG5cdFBBTjogMixcblx0VE9VQ0hfUk9UQVRFOiAzLFxuXHRUT1VDSF9QQU46IDQsXG5cdFRPVUNIX0RPTExZX1BBTjogNSxcblx0VE9VQ0hfRE9MTFlfUk9UQVRFOiA2XG59O1xuY29uc3QgX0VQUyA9IDAuMDAwMDAxO1xuXG5cbi8qKlxuICogT3JiaXQgY29udHJvbHMgYWxsb3cgdGhlIGNhbWVyYSB0byBvcmJpdCBhcm91bmQgYSB0YXJnZXQuXG4gKlxuICogT3JiaXRDb250cm9scyBwZXJmb3JtcyBvcmJpdGluZywgZG9sbHlpbmcgKHpvb21pbmcpLCBhbmQgcGFubmluZy4gVW5saWtlIHtAbGluayBUcmFja2JhbGxDb250cm9sc30sXG4gKiBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gYG9iamVjdC51cGAgKCtZIGJ5IGRlZmF1bHQpLlxuICpcbiAqIC0gT3JiaXQ6IExlZnQgbW91c2UgLyB0b3VjaDogb25lLWZpbmdlciBtb3ZlLlxuICogLSBab29tOiBNaWRkbGUgbW91c2UsIG9yIG1vdXNld2hlZWwgLyB0b3VjaDogdHdvLWZpbmdlciBzcHJlYWQgb3Igc3F1aXNoLlxuICogLSBQYW46IFJpZ2h0IG1vdXNlLCBvciBsZWZ0IG1vdXNlICsgY3RybC9tZXRhL3NoaWZ0S2V5LCBvciBhcnJvdyBrZXlzIC8gdG91Y2g6IHR3by1maW5nZXIgbW92ZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyggY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50ICk7XG4gKlxuICogLy8gY29udHJvbHMudXBkYXRlKCkgbXVzdCBiZSBjYWxsZWQgYWZ0ZXIgYW55IG1hbnVhbCBjaGFuZ2VzIHRvIHRoZSBjYW1lcmEncyB0cmFuc2Zvcm1cbiAqIGNhbWVyYS5wb3NpdGlvbi5zZXQoIDAsIDIwLCAxMDAgKTtcbiAqIGNvbnRyb2xzLnVwZGF0ZSgpO1xuICpcbiAqIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gKlxuICogXHQvLyByZXF1aXJlZCBpZiBjb250cm9scy5lbmFibGVEYW1waW5nIG9yIGNvbnRyb2xzLmF1dG9Sb3RhdGUgYXJlIHNldCB0byB0cnVlXG4gKiBcdGNvbnRyb2xzLnVwZGF0ZSgpO1xuICpcbiAqIFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhICk7XG4gKlxuICogfVxuICogYGBgXG4gKlxuICogQGF1Z21lbnRzIENvbnRyb2xzXG4gKi9cbmNsYXNzIE9yYml0Q29udHJvbHMgZXh0ZW5kcyBDb250cm9scyB7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgY29udHJvbHMgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iamVjdCAtIFRoZSBvYmplY3QgdGhhdCBpcyBtYW5hZ2VkIGJ5IHRoZSBjb250cm9scy5cblx0ICogQHBhcmFtIHs/SFRNTERPTUVsZW1lbnR9IGRvbUVsZW1lbnQgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgZm9yIGV2ZW50IGxpc3RlbmVycy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCBvYmplY3QsIGRvbUVsZW1lbnQgPSBudWxsICkge1xuXG5cdFx0c3VwZXIoIG9iamVjdCwgZG9tRWxlbWVudCApO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGZvY3VzIHBvaW50IG9mIHRoZSBjb250cm9scywgdGhlIGBvYmplY3RgIG9yYml0cyBhcm91bmQgdGhpcy5cblx0XHQgKiBJdCBjYW4gYmUgdXBkYXRlZCBtYW51YWxseSBhdCBhbnkgcG9pbnQgdG8gY2hhbmdlIHRoZSBmb2N1cyBvZiB0aGUgY29udHJvbHMuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZm9jdXMgcG9pbnQgb2YgdGhlIGBtaW5UYXJnZXRSYWRpdXNgIGFuZCBgbWF4VGFyZ2V0UmFkaXVzYCBsaW1pdHMuXG5cdFx0ICogSXQgY2FuIGJlIHVwZGF0ZWQgbWFudWFsbHkgYXQgYW55IHBvaW50IHRvIGNoYW5nZSB0aGUgY2VudGVyIG9mIGludGVyZXN0XG5cdFx0ICogZm9yIHRoZSBgdGFyZ2V0YC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtWZWN0b3IzfVxuXHRcdCAqL1xuXHRcdHRoaXMuY3Vyc29yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiAocGVyc3BlY3RpdmUgY2FtZXJhIG9ubHkpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgb3V0IChwZXJzcGVjdGl2ZSBjYW1lcmEgb25seSkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IEluZmluaXR5XG5cdFx0ICovXG5cdFx0dGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIHpvb20gaW4gKG9ydGhvZ3JhcGhpYyBjYW1lcmEgb25seSkuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLm1pblpvb20gPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIHpvb20gb3V0IChvcnRob2dyYXBoaWMgY2FtZXJhIG9ubHkpLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBJbmZpbml0eVxuXHRcdCAqL1xuXHRcdHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGNsb3NlIHlvdSBjYW4gZ2V0IHRoZSB0YXJnZXQgdG8gdGhlIDNEIGBjdXJzb3JgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5taW5UYXJnZXRSYWRpdXMgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIG1vdmUgdGhlIHRhcmdldCBmcm9tIHRoZSAzRCBgY3Vyc29yYC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLm1heFRhcmdldFJhZGl1cyA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIGxvd2VyIGxpbWl0LiBSYW5nZSBpcyBgWzAsIE1hdGguUEldYCByYWRpYW5zLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICovXG5cdFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEhvdyBmYXIgeW91IGNhbiBvcmJpdCB2ZXJ0aWNhbGx5LCB1cHBlciBsaW1pdC4gUmFuZ2UgaXMgYFswLCBNYXRoLlBJXWAgcmFkaWFucy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgTWF0aC5QSVxuXHRcdCAqL1xuXHRcdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCBsb3dlciBsaW1pdC4gSWYgc2V0LCB0aGUgaW50ZXJ2YWwgYFsgbWluLCBtYXggXWBcblx0XHQgKiBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIGBbIC0gMiBQSSwgMiBQSSBdYCwgd2l0aCBgKCBtYXggLSBtaW4gPCAyIFBJIClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLm1pbkF6aW11dGhBbmdsZSA9IC0gSW5maW5pdHk7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBsaW1pdC4gSWYgc2V0LCB0aGUgaW50ZXJ2YWwgYFsgbWluLCBtYXggXWBcblx0XHQgKiBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIGBbIC0gMiBQSSwgMiBQSSBdYCwgd2l0aCBgKCBtYXggLSBtaW4gPCAyIFBJIClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAtSW5maW5pdHlcblx0XHQgKi9cblx0XHR0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5O1xuXG5cdFx0LyoqXG5cdFx0ICogU2V0IHRvIGB0cnVlYCB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSksIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGdpdmUgYSBzZW5zZSBvZiB3ZWlnaHRcblx0XHQgKiB0byB0aGUgY29udHJvbHMuIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgYHVwZGF0ZSgpYCBpbiB5b3VyIGFuaW1hdGlvblxuXHRcdCAqIGxvb3AuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5hYmxlRGFtcGluZyA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRhbXBpbmcgaW5lcnRpYSB1c2VkIGlmIGBlbmFibGVEYW1waW5nYCBpcyBzZXQgdG8gYHRydWVgLlxuXHRcdCAqXG5cdFx0ICogTm90ZSB0aGF0IGZvciB0aGlzIHRvIHdvcmssIHlvdSBtdXN0IGNhbGwgYHVwZGF0ZSgpYCBpbiB5b3VyIGFuaW1hdGlvbiBsb29wLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwLjA1XG5cdFx0ICovXG5cdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gMC4wNTtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIHpvb21pbmcgKGRvbGx5aW5nKSBvZiB0aGUgY2FtZXJhLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge2Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgdHJ1ZVxuXHRcdCAqL1xuXHRcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBTcGVlZCBvZiB6b29taW5nIC8gZG9sbHlpbmcuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBvciBkaXNhYmxlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHJvdGF0aW9uIG9mIHRoZSBjYW1lcmEuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZGlzYWJsZSBhIHNpbmdsZSBheGlzIGJ5IHNldHRpbmcgdGhlIG1pbiBhbmQgbWF4IG9mIHRoZVxuXHRcdCAqIGBtaW5Qb2xhckFuZ2xlYCBvciBgbWluQXppbXV0aEFuZ2xlYCB0byB0aGUgc2FtZSB2YWx1ZSwgd2hpY2ggd2lsbCBjYXVzZSB0aGUgdmVydGljYWxcblx0XHQgKiBvciBob3Jpem9udGFsIHJvdGF0aW9uIHRvIGJlIGZpeGVkIGF0IHRoYXQgdmFsdWUuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCB0cnVlXG5cdFx0ICovXG5cdFx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xuXG5cdFx0LyoqXG5cdFx0ICogU3BlZWQgb2Ygcm90YXRpb24uXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKi9cblx0XHR0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhc3QgdG8gcm90YXRlIHRoZSBjYW1lcmEgd2hlbiB0aGUga2V5Ym9hcmQgaXMgdXNlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMVxuXHRcdCAqL1xuXHRcdHRoaXMua2V5Um90YXRlU3BlZWQgPSAxLjA7XG5cblx0XHQvKipcblx0XHQgKiBFbmFibGUgb3IgZGlzYWJsZSBjYW1lcmEgcGFubmluZy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBTcGVlZCBvZiBwYW5uaW5nLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5wYW5TcGVlZCA9IDEuMDtcblxuXHRcdC8qKlxuXHRcdCAqIERlZmluZXMgaG93IHRoZSBjYW1lcmEncyBwb3NpdGlvbiBpcyB0cmFuc2xhdGVkIHdoZW4gcGFubmluZy4gSWYgYHRydWVgLCB0aGUgY2FtZXJhIHBhbnNcblx0XHQgKiBpbiBzY3JlZW4gc3BhY2UuIE90aGVyd2lzZSwgdGhlIGNhbWVyYSBwYW5zIGluIHRoZSBwbGFuZSBvcnRob2dvbmFsIHRvIHRoZSBjYW1lcmEncyB1cFxuXHRcdCAqIGRpcmVjdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IHRydWVcblx0XHQgKi9cblx0XHR0aGlzLnNjcmVlblNwYWNlUGFubmluZyA9IHRydWU7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgZmFzdCB0byBwYW4gdGhlIGNhbWVyYSB3aGVuIHRoZSBrZXlib2FyZCBpcyB1c2VkIGluXG5cdFx0ICogcGl4ZWxzIHBlciBrZXlwcmVzcy5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgN1xuXHRcdCAqL1xuXHRcdHRoaXMua2V5UGFuU3BlZWQgPSA3LjA7XG5cblx0XHQvKipcblx0XHQgKiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgdG8gYHRydWVgIGFsbG93cyB0byB6b29tIHRvIHRoZSBjdXJzb3IncyBwb3NpdGlvbi5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICovXG5cdFx0dGhpcy56b29tVG9DdXJzb3IgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCB0byB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0XG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgaWYgdGhpcyBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGB1cGRhdGUoKWAgaW4geW91ciBhbmltYXRpb24gbG9vcC5cblx0XHQgKiBJZiB5b3Ugd2FudCB0aGUgYXV0by1yb3RhdGUgc3BlZWQgdG8gYmUgaW5kZXBlbmRlbnQgb2YgdGhlIGZyYW1lIHJhdGUgKHRoZSByZWZyZXNoXG5cdFx0ICogcmF0ZSBvZiB0aGUgZGlzcGxheSksIHlvdSBtdXN0IHBhc3MgdGhlIHRpbWUgYGRlbHRhVGltZWAsIGluIHNlY29uZHMsIHRvIGB1cGRhdGUoKWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogSG93IGZhc3QgdG8gcm90YXRlIGFyb3VuZCB0aGUgdGFyZ2V0IGlmIGBhdXRvUm90YXRlYCBpcyBgdHJ1ZWAuIFRoZSBkZWZhdWx0ICBlcXVhdGVzIHRvIDMwIHNlY29uZHNcblx0XHQgKiBwZXIgb3JiaXQgYXQgNjBmcHMuXG5cdFx0ICpcblx0XHQgKiBOb3RlIHRoYXQgaWYgYGF1dG9Sb3RhdGVgIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgYHVwZGF0ZSgpYCBpbiB5b3VyIGFuaW1hdGlvbiBsb29wLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAyXG5cdFx0ICovXG5cdFx0dGhpcy5hdXRvUm90YXRlU3BlZWQgPSAyLjA7XG5cblx0XHQvKipcblx0XHQgKiBUaGlzIG9iamVjdCBjb250YWlucyByZWZlcmVuY2VzIHRvIHRoZSBrZXljb2RlcyBmb3IgY29udHJvbGxpbmcgY2FtZXJhIHBhbm5pbmcuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnRyb2xzLmtleXMgPSB7XG5cdFx0ICogXHRMRUZUOiAnQXJyb3dMZWZ0JywgLy9sZWZ0IGFycm93XG5cdFx0ICogXHRVUDogJ0Fycm93VXAnLCAvLyB1cCBhcnJvd1xuXHRcdCAqIFx0UklHSFQ6ICdBcnJvd1JpZ2h0JywgLy8gcmlnaHQgYXJyb3dcblx0XHQgKiBcdEJPVFRPTTogJ0Fycm93RG93bicgLy8gZG93biBhcnJvd1xuXHRcdCAqIH1cblx0XHQgKiBgYGBcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMua2V5cyA9IHsgTEVGVDogJ0Fycm93TGVmdCcsIFVQOiAnQXJyb3dVcCcsIFJJR0hUOiAnQXJyb3dSaWdodCcsIEJPVFRPTTogJ0Fycm93RG93bicgfTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgb2JqZWN0IGNvbnRhaW5zIHJlZmVyZW5jZXMgdG8gdGhlIG1vdXNlIGFjdGlvbnMgdXNlZCBieSB0aGUgY29udHJvbHMuXG5cdFx0ICpcblx0XHQgKiBgYGBqc1xuXHRcdCAqIGNvbnRyb2xzLm1vdXNlQnV0dG9ucyA9IHtcblx0XHQgKiBcdExFRlQ6IFRIUkVFLk1PVVNFLlJPVEFURSxcblx0XHQgKiBcdE1JRERMRTogVEhSRUUuTU9VU0UuRE9MTFksXG5cdFx0ICogXHRSSUdIVDogVEhSRUUuTU9VU0UuUEFOXG5cdFx0ICogfVxuXHRcdCAqIGBgYFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5tb3VzZUJ1dHRvbnMgPSB7IExFRlQ6IE1PVVNFLlJPVEFURSwgTUlERExFOiBNT1VTRS5ET0xMWSwgUklHSFQ6IE1PVVNFLlBBTiB9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBvYmplY3QgY29udGFpbnMgcmVmZXJlbmNlcyB0byB0aGUgdG91Y2ggYWN0aW9ucyB1c2VkIGJ5IHRoZSBjb250cm9scy5cblx0XHQgKlxuXHRcdCAqIGBgYGpzXG5cdFx0ICogY29udHJvbHMubW91c2VCdXR0b25zID0ge1xuXHRcdCAqIFx0T05FOiBUSFJFRS5UT1VDSC5ST1RBVEUsXG5cdFx0ICogXHRUV086IFRIUkVFLlRPVUNILkRPTExZX1BBTlxuXHRcdCAqIH1cblx0XHQgKiBgYGBcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMudG91Y2hlcyA9IHsgT05FOiBUT1VDSC5ST1RBVEUsIFRXTzogVE9VQ0guRE9MTFlfUEFOIH07XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIGludGVybmFsbHkgYnkgYHNhdmVTdGF0ZSgpYCBhbmQgYHJlc2V0KClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge1ZlY3RvcjN9XG5cdFx0ICovXG5cdFx0dGhpcy50YXJnZXQwID0gdGhpcy50YXJnZXQuY2xvbmUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgaW50ZXJuYWxseSBieSBgc2F2ZVN0YXRlKClgIGFuZCBgcmVzZXQoKWAuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSB7VmVjdG9yM31cblx0XHQgKi9cblx0XHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cblx0XHQvKipcblx0XHQgKiBVc2VkIGludGVybmFsbHkgYnkgYHNhdmVTdGF0ZSgpYCBhbmQgYHJlc2V0KClgLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcblxuXHRcdC8vIHRoZSB0YXJnZXQgRE9NIGVsZW1lbnQgZm9yIGtleSBldmVudHNcblx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gbnVsbDtcblxuXHRcdC8vIGludGVybmFsc1xuXG5cdFx0dGhpcy5fbGFzdFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0XHR0aGlzLl9sYXN0UXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdFx0dGhpcy5fbGFzdFRhcmdldFBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdC8vIHNvIGNhbWVyYS51cCBpcyB0aGUgb3JiaXQgYXhpc1xuXHRcdHRoaXMuX3F1YXQgPSBuZXcgUXVhdGVybmlvbigpLnNldEZyb21Vbml0VmVjdG9ycyggb2JqZWN0LnVwLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdFx0dGhpcy5fcXVhdEludmVyc2UgPSB0aGlzLl9xdWF0LmNsb25lKCkuaW52ZXJ0KCk7XG5cblx0XHQvLyBjdXJyZW50IHBvc2l0aW9uIGluIHNwaGVyaWNhbCBjb29yZGluYXRlc1xuXHRcdHRoaXMuX3NwaGVyaWNhbCA9IG5ldyBTcGhlcmljYWwoKTtcblx0XHR0aGlzLl9zcGhlcmljYWxEZWx0YSA9IG5ldyBTcGhlcmljYWwoKTtcblxuXHRcdHRoaXMuX3NjYWxlID0gMTtcblx0XHR0aGlzLl9wYW5PZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dGhpcy5fcm90YXRlU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX3JvdGF0ZUVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fcm90YXRlRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dGhpcy5fcGFuU3RhcnQgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX3BhbkVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fcGFuRGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dGhpcy5fZG9sbHlTdGFydCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fZG9sbHlFbmQgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX2RvbGx5RGVsdGEgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0dGhpcy5fZG9sbHlEaXJlY3Rpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHRoaXMuX21vdXNlID0gbmV3IFZlY3RvcjIoKTtcblx0XHR0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5fcG9pbnRlcnMgPSBbXTtcblx0XHR0aGlzLl9wb2ludGVyUG9zaXRpb25zID0ge307XG5cblx0XHR0aGlzLl9jb250cm9sQWN0aXZlID0gZmFsc2U7XG5cblx0XHQvLyBldmVudCBsaXN0ZW5lcnNcblxuXHRcdHRoaXMuX29uUG9pbnRlck1vdmUgPSBvblBvaW50ZXJNb3ZlLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vblBvaW50ZXJEb3duID0gb25Qb2ludGVyRG93bi5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Qb2ludGVyVXAgPSBvblBvaW50ZXJVcC5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Db250ZXh0TWVudSA9IG9uQ29udGV4dE1lbnUuYmluZCggdGhpcyApO1xuXHRcdHRoaXMuX29uTW91c2VXaGVlbCA9IG9uTW91c2VXaGVlbC5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25LZXlEb3duID0gb25LZXlEb3duLmJpbmQoIHRoaXMgKTtcblxuXHRcdHRoaXMuX29uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKCB0aGlzICk7XG5cblx0XHR0aGlzLl9vbk1vdXNlRG93biA9IG9uTW91c2VEb3duLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vbk1vdXNlTW92ZSA9IG9uTW91c2VNb3ZlLmJpbmQoIHRoaXMgKTtcblxuXHRcdHRoaXMuX2ludGVyY2VwdENvbnRyb2xEb3duID0gaW50ZXJjZXB0Q29udHJvbERvd24uYmluZCggdGhpcyApO1xuXHRcdHRoaXMuX2ludGVyY2VwdENvbnRyb2xVcCA9IGludGVyY2VwdENvbnRyb2xVcC5iaW5kKCB0aGlzICk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmRvbUVsZW1lbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuY29ubmVjdCggdGhpcy5kb21FbGVtZW50ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRjb25uZWN0KCBlbGVtZW50ICkge1xuXG5cdFx0c3VwZXIuY29ubmVjdCggZWxlbWVudCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVyZG93bicsIHRoaXMuX29uUG9pbnRlckRvd24gKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0gKTtcblxuXHRcdGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb21FbGVtZW50LmdldFJvb3ROb2RlKCk7IC8vIG9mZnNjcmVlbiBjYW52YXMgY29tcGF0aWJpbGl0eVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcy5faW50ZXJjZXB0Q29udHJvbERvd24sIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9ICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7IC8vIGRpc2FibGUgdG91Y2ggc2Nyb2xsXG5cblx0fVxuXG5cdGRpc2Nvbm5lY3QoKSB7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJkb3duJywgdGhpcy5fb25Qb2ludGVyRG93biApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblBvaW50ZXJNb3ZlICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdwb2ludGVydXAnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcmNhbmNlbCcsIHRoaXMuX29uUG9pbnRlclVwICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUgKTtcblxuXHRcdHRoaXMuc3RvcExpc3RlblRvS2V5RXZlbnRzKCk7XG5cblx0XHRjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9tRWxlbWVudC5nZXRSb290Tm9kZSgpOyAvLyBvZmZzY3JlZW4gY2FudmFzIGNvbXBhdGliaWxpdHlcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMuX2ludGVyY2VwdENvbnRyb2xEb3duLCB7IGNhcHR1cmU6IHRydWUgfSApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgdmVydGljYWwgcm90YXRpb24sIGluIHJhZGlhbnMuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGN1cnJlbnQgdmVydGljYWwgcm90YXRpb24sIGluIHJhZGlhbnMuXG5cdCAqL1xuXHRnZXRQb2xhckFuZ2xlKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3NwaGVyaWNhbC5waGk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGN1cnJlbnQgaG9yaXpvbnRhbCByb3RhdGlvbiwgaW4gcmFkaWFucy5cblx0ICpcblx0ICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3VycmVudCBob3Jpem9udGFsIHJvdGF0aW9uLCBpbiByYWRpYW5zLlxuXHQgKi9cblx0Z2V0QXppbXV0aGFsQW5nbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc3BoZXJpY2FsLnRoZXRhO1xuXG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2FtZXJhIHRvIHRoZSB0YXJnZXQuXG5cdCAqXG5cdCAqIEByZXR1cm4ge251bWJlcn0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIGNhbWVyYSB0byB0aGUgdGFyZ2V0LlxuXHQgKi9cblx0Z2V0RGlzdGFuY2UoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5vYmplY3QucG9zaXRpb24uZGlzdGFuY2VUbyggdGhpcy50YXJnZXQgKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMga2V5IGV2ZW50IGxpc3RlbmVycyB0byB0aGUgZ2l2ZW4gRE9NIGVsZW1lbnQuXG5cdCAqIGB3aW5kb3dgIGlzIGEgcmVjb21tZW5kZWQgYXJndW1lbnQgZm9yIHVzaW5nIHRoaXMgbWV0aG9kLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0hUTUxET01FbGVtZW50fSBkb21FbGVtZW50IC0gVGhlIERPTSBlbGVtZW50XG5cdCAqL1xuXHRsaXN0ZW5Ub0tleUV2ZW50cyggZG9tRWxlbWVudCApIHtcblxuXHRcdGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24gKTtcblx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gZG9tRWxlbWVudDtcblxuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGtleSBldmVudCBsaXN0ZW5lciBwcmV2aW91c2x5IGRlZmluZWQgd2l0aCBgbGlzdGVuVG9LZXlFdmVudHMoKWAuXG5cdCAqL1xuXHRzdG9wTGlzdGVuVG9LZXlFdmVudHMoKSB7XG5cblx0XHRpZiAoIHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24gKTtcblx0XHRcdHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgPSBudWxsO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU2F2ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29udHJvbHMuIFRoaXMgY2FuIGxhdGVyIGJlIHJlY292ZXJlZCB3aXRoIGByZXNldCgpYC5cblx0ICovXG5cdHNhdmVTdGF0ZSgpIHtcblxuXHRcdHRoaXMudGFyZ2V0MC5jb3B5KCB0aGlzLnRhcmdldCApO1xuXHRcdHRoaXMucG9zaXRpb24wLmNvcHkoIHRoaXMub2JqZWN0LnBvc2l0aW9uICk7XG5cdFx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldCB0aGUgY29udHJvbHMgdG8gdGhlaXIgc3RhdGUgZnJvbSBlaXRoZXIgdGhlIGxhc3QgdGltZSB0aGUgYHNhdmVTdGF0ZSgpYFxuXHQgKiB3YXMgY2FsbGVkLCBvciB0aGUgaW5pdGlhbCBzdGF0ZS5cblx0ICovXG5cdHJlc2V0KCkge1xuXG5cdFx0dGhpcy50YXJnZXQuY29weSggdGhpcy50YXJnZXQwICk7XG5cdFx0dGhpcy5vYmplY3QucG9zaXRpb24uY29weSggdGhpcy5wb3NpdGlvbjAgKTtcblx0XHR0aGlzLm9iamVjdC56b29tID0gdGhpcy56b29tMDtcblxuXHRcdHRoaXMub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9jaGFuZ2VFdmVudCApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHR9XG5cblx0dXBkYXRlKCBkZWx0YVRpbWUgPSBudWxsICkge1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLm9iamVjdC5wb3NpdGlvbjtcblxuXHRcdF92LmNvcHkoIHBvc2l0aW9uICkuc3ViKCB0aGlzLnRhcmdldCApO1xuXG5cdFx0Ly8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXG5cdFx0X3YuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLl9xdWF0ICk7XG5cblx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXG5cdFx0dGhpcy5fc3BoZXJpY2FsLnNldEZyb21WZWN0b3IzKCBfdiApO1xuXG5cdFx0aWYgKCB0aGlzLmF1dG9Sb3RhdGUgJiYgdGhpcy5zdGF0ZSA9PT0gX1NUQVRFLk5PTkUgKSB7XG5cblx0XHRcdHRoaXMuX3JvdGF0ZUxlZnQoIHRoaXMuX2dldEF1dG9Sb3RhdGlvbkFuZ2xlKCBkZWx0YVRpbWUgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZURhbXBpbmcgKSB7XG5cblx0XHRcdHRoaXMuX3NwaGVyaWNhbC50aGV0YSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS50aGV0YSAqIHRoaXMuZGFtcGluZ0ZhY3Rvcjtcblx0XHRcdHRoaXMuX3NwaGVyaWNhbC5waGkgKz0gdGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpICogdGhpcy5kYW1waW5nRmFjdG9yO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnRoZXRhICs9IHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnBoaSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS5waGk7XG5cblx0XHR9XG5cblx0XHQvLyByZXN0cmljdCB0aGV0YSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cblx0XHRsZXQgbWluID0gdGhpcy5taW5BemltdXRoQW5nbGU7XG5cdFx0bGV0IG1heCA9IHRoaXMubWF4QXppbXV0aEFuZ2xlO1xuXG5cdFx0aWYgKCBpc0Zpbml0ZSggbWluICkgJiYgaXNGaW5pdGUoIG1heCApICkge1xuXG5cdFx0XHRpZiAoIG1pbiA8IC0gTWF0aC5QSSApIG1pbiArPSBfdHdvUEk7IGVsc2UgaWYgKCBtaW4gPiBNYXRoLlBJICkgbWluIC09IF90d29QSTtcblxuXHRcdFx0aWYgKCBtYXggPCAtIE1hdGguUEkgKSBtYXggKz0gX3R3b1BJOyBlbHNlIGlmICggbWF4ID4gTWF0aC5QSSApIG1heCAtPSBfdHdvUEk7XG5cblx0XHRcdGlmICggbWluIDw9IG1heCApIHtcblxuXHRcdFx0XHR0aGlzLl9zcGhlcmljYWwudGhldGEgPSBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCB0aGlzLl9zcGhlcmljYWwudGhldGEgKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3NwaGVyaWNhbC50aGV0YSA9ICggdGhpcy5fc3BoZXJpY2FsLnRoZXRhID4gKCBtaW4gKyBtYXggKSAvIDIgKSA/XG5cdFx0XHRcdFx0TWF0aC5tYXgoIG1pbiwgdGhpcy5fc3BoZXJpY2FsLnRoZXRhICkgOlxuXHRcdFx0XHRcdE1hdGgubWluKCBtYXgsIHRoaXMuX3NwaGVyaWNhbC50aGV0YSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXHRcdHRoaXMuX3NwaGVyaWNhbC5waGkgPSBNYXRoLm1heCggdGhpcy5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggdGhpcy5tYXhQb2xhckFuZ2xlLCB0aGlzLl9zcGhlcmljYWwucGhpICkgKTtcblxuXHRcdHRoaXMuX3NwaGVyaWNhbC5tYWtlU2FmZSgpO1xuXG5cblx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cblxuXHRcdGlmICggdGhpcy5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuX3Bhbk9mZnNldCwgdGhpcy5kYW1waW5nRmFjdG9yICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRhcmdldC5hZGQoIHRoaXMuX3Bhbk9mZnNldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gTGltaXQgdGhlIHRhcmdldCBkaXN0YW5jZSBmcm9tIHRoZSBjdXJzb3IgdG8gY3JlYXRlIGEgc3BoZXJlIGFyb3VuZCB0aGUgY2VudGVyIG9mIGludGVyZXN0XG5cdFx0dGhpcy50YXJnZXQuc3ViKCB0aGlzLmN1cnNvciApO1xuXHRcdHRoaXMudGFyZ2V0LmNsYW1wTGVuZ3RoKCB0aGlzLm1pblRhcmdldFJhZGl1cywgdGhpcy5tYXhUYXJnZXRSYWRpdXMgKTtcblx0XHR0aGlzLnRhcmdldC5hZGQoIHRoaXMuY3Vyc29yICk7XG5cblx0XHRsZXQgem9vbUNoYW5nZWQgPSBmYWxzZTtcblx0XHQvLyBhZGp1c3QgdGhlIGNhbWVyYSBwb3NpdGlvbiBiYXNlZCBvbiB6b29tIG9ubHkgaWYgd2UncmUgbm90IHpvb21pbmcgdG8gdGhlIGN1cnNvciBvciBpZiBpdCdzIGFuIG9ydGhvIGNhbWVyYVxuXHRcdC8vIHdlIGFkanVzdCB6b29tIGxhdGVyIGluIHRoZXNlIGNhc2VzXG5cdFx0aWYgKCB0aGlzLnpvb21Ub0N1cnNvciAmJiB0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSB8fCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnJhZGl1cyA9IHRoaXMuX2NsYW1wRGlzdGFuY2UoIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHByZXZSYWRpdXMgPSB0aGlzLl9zcGhlcmljYWwucmFkaXVzO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnJhZGl1cyA9IHRoaXMuX2NsYW1wRGlzdGFuY2UoIHRoaXMuX3NwaGVyaWNhbC5yYWRpdXMgKiB0aGlzLl9zY2FsZSApO1xuXHRcdFx0em9vbUNoYW5nZWQgPSBwcmV2UmFkaXVzICE9IHRoaXMuX3NwaGVyaWNhbC5yYWRpdXM7XG5cblx0XHR9XG5cblx0XHRfdi5zZXRGcm9tU3BoZXJpY2FsKCB0aGlzLl9zcGhlcmljYWwgKTtcblxuXHRcdC8vIHJvdGF0ZSBvZmZzZXQgYmFjayB0byBcImNhbWVyYS11cC12ZWN0b3ItaXMtdXBcIiBzcGFjZVxuXHRcdF92LmFwcGx5UXVhdGVybmlvbiggdGhpcy5fcXVhdEludmVyc2UgKTtcblxuXHRcdHBvc2l0aW9uLmNvcHkoIHRoaXMudGFyZ2V0ICkuYWRkKCBfdiApO1xuXG5cdFx0dGhpcy5vYmplY3QubG9va0F0KCB0aGlzLnRhcmdldCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZURhbXBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhICo9ICggMSAtIHRoaXMuZGFtcGluZ0ZhY3RvciApO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpICo9ICggMSAtIHRoaXMuZGFtcGluZ0ZhY3RvciApO1xuXG5cdFx0XHR0aGlzLl9wYW5PZmZzZXQubXVsdGlwbHlTY2FsYXIoIDEgLSB0aGlzLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhLnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHR0aGlzLl9wYW5PZmZzZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBhZGp1c3QgY2FtZXJhIHBvc2l0aW9uXG5cdFx0aWYgKCB0aGlzLnpvb21Ub0N1cnNvciAmJiB0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSApIHtcblxuXHRcdFx0bGV0IG5ld1JhZGl1cyA9IG51bGw7XG5cdFx0XHRpZiAoIHRoaXMub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdFx0Ly8gbW92ZSB0aGUgY2FtZXJhIGRvd24gdGhlIHBvaW50ZXIgcmF5XG5cdFx0XHRcdC8vIHRoaXMgbWV0aG9kIGF2b2lkcyBmbG9hdGluZyBwb2ludCBlcnJvclxuXHRcdFx0XHRjb25zdCBwcmV2UmFkaXVzID0gX3YubGVuZ3RoKCk7XG5cdFx0XHRcdG5ld1JhZGl1cyA9IHRoaXMuX2NsYW1wRGlzdGFuY2UoIHByZXZSYWRpdXMgKiB0aGlzLl9zY2FsZSApO1xuXG5cdFx0XHRcdGNvbnN0IHJhZGl1c0RlbHRhID0gcHJldlJhZGl1cyAtIG5ld1JhZGl1cztcblx0XHRcdFx0dGhpcy5vYmplY3QucG9zaXRpb24uYWRkU2NhbGVkVmVjdG9yKCB0aGlzLl9kb2xseURpcmVjdGlvbiwgcmFkaXVzRGVsdGEgKTtcblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHR6b29tQ2hhbmdlZCA9ICEhIHJhZGl1c0RlbHRhO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBhZGp1c3QgdGhlIG9ydGhvIGNhbWVyYSBwb3NpdGlvbiBiYXNlZCBvbiB6b29tIGNoYW5nZXNcblx0XHRcdFx0Y29uc3QgbW91c2VCZWZvcmUgPSBuZXcgVmVjdG9yMyggdGhpcy5fbW91c2UueCwgdGhpcy5fbW91c2UueSwgMCApO1xuXHRcdFx0XHRtb3VzZUJlZm9yZS51bnByb2plY3QoIHRoaXMub2JqZWN0ICk7XG5cblx0XHRcdFx0Y29uc3QgcHJldlpvb20gPSB0aGlzLm9iamVjdC56b29tO1xuXHRcdFx0XHR0aGlzLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHRoaXMubWluWm9vbSwgTWF0aC5taW4oIHRoaXMubWF4Wm9vbSwgdGhpcy5vYmplY3Quem9vbSAvIHRoaXMuX3NjYWxlICkgKTtcblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gcHJldlpvb20gIT09IHRoaXMub2JqZWN0Lnpvb207XG5cblx0XHRcdFx0Y29uc3QgbW91c2VBZnRlciA9IG5ldyBWZWN0b3IzKCB0aGlzLl9tb3VzZS54LCB0aGlzLl9tb3VzZS55LCAwICk7XG5cdFx0XHRcdG1vdXNlQWZ0ZXIudW5wcm9qZWN0KCB0aGlzLm9iamVjdCApO1xuXG5cdFx0XHRcdHRoaXMub2JqZWN0LnBvc2l0aW9uLnN1YiggbW91c2VBZnRlciApLmFkZCggbW91c2VCZWZvcmUgKTtcblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdFx0XHRuZXdSYWRpdXMgPSBfdi5sZW5ndGgoKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSB6b29tIHRvIGN1cnNvciBkaXNhYmxlZC4nICk7XG5cdFx0XHRcdHRoaXMuem9vbVRvQ3Vyc29yID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaGFuZGxlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHRhcmdldFxuXHRcdFx0aWYgKCBuZXdSYWRpdXMgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLnNjcmVlblNwYWNlUGFubmluZyApIHtcblxuXHRcdFx0XHRcdC8vIHBvc2l0aW9uIHRoZSBvcmJpdCB0YXJnZXQgaW4gZnJvbnQgb2YgdGhlIG5ldyBjYW1lcmEgcG9zaXRpb25cblx0XHRcdFx0XHR0aGlzLnRhcmdldC5zZXQoIDAsIDAsIC0gMSApXG5cdFx0XHRcdFx0XHQudHJhbnNmb3JtRGlyZWN0aW9uKCB0aGlzLm9iamVjdC5tYXRyaXggKVxuXHRcdFx0XHRcdFx0Lm11bHRpcGx5U2NhbGFyKCBuZXdSYWRpdXMgKVxuXHRcdFx0XHRcdFx0LmFkZCggdGhpcy5vYmplY3QucG9zaXRpb24gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gZ2V0IHRoZSByYXkgYW5kIHRyYW5zbGF0aW9uIHBsYW5lIHRvIGNvbXB1dGUgdGFyZ2V0XG5cdFx0XHRcdFx0X3JheS5vcmlnaW4uY29weSggdGhpcy5vYmplY3QucG9zaXRpb24gKTtcblx0XHRcdFx0XHRfcmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggdGhpcy5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdFx0XHQvLyBpZiB0aGUgY2FtZXJhIGlzIDIwIGRlZ3JlZXMgYWJvdmUgdGhlIGhvcml6b24gdGhlbiBkb24ndCBhZGp1c3QgdGhlIGZvY3VzIHRhcmdldCB0byBhdm9pZFxuXHRcdFx0XHRcdC8vIGV4dHJlbWVseSBsYXJnZSB2YWx1ZXNcblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCB0aGlzLm9iamVjdC51cC5kb3QoIF9yYXkuZGlyZWN0aW9uICkgKSA8IF9USUxUX0xJTUlUICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLm9iamVjdC5sb29rQXQoIHRoaXMudGFyZ2V0ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRfcGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoIHRoaXMub2JqZWN0LnVwLCB0aGlzLnRhcmdldCApO1xuXHRcdFx0XHRcdFx0X3JheS5pbnRlcnNlY3RQbGFuZSggX3BsYW5lLCB0aGlzLnRhcmdldCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdGNvbnN0IHByZXZab29tID0gdGhpcy5vYmplY3Quem9vbTtcblx0XHRcdHRoaXMub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggdGhpcy5taW5ab29tLCBNYXRoLm1pbiggdGhpcy5tYXhab29tLCB0aGlzLm9iamVjdC56b29tIC8gdGhpcy5fc2NhbGUgKSApO1xuXG5cdFx0XHRpZiAoIHByZXZab29tICE9PSB0aGlzLm9iamVjdC56b29tICkge1xuXG5cdFx0XHRcdHRoaXMub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdFx0em9vbUNoYW5nZWQgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9zY2FsZSA9IDE7XG5cdFx0dGhpcy5fcGVyZm9ybUN1cnNvclpvb20gPSBmYWxzZTtcblxuXHRcdC8vIHVwZGF0ZSBjb25kaXRpb24gaXM6XG5cdFx0Ly8gbWluKGNhbWVyYSBkaXNwbGFjZW1lbnQsIGNhbWVyYSByb3RhdGlvbiBpbiByYWRpYW5zKV4yID4gRVBTXG5cdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cblx0XHRpZiAoIHpvb21DaGFuZ2VkIHx8XG5cdFx0XHR0aGlzLl9sYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMub2JqZWN0LnBvc2l0aW9uICkgPiBfRVBTIHx8XG5cdFx0XHQ4ICogKCAxIC0gdGhpcy5fbGFzdFF1YXRlcm5pb24uZG90KCB0aGlzLm9iamVjdC5xdWF0ZXJuaW9uICkgKSA+IF9FUFMgfHxcblx0XHRcdHRoaXMuX2xhc3RUYXJnZXRQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy50YXJnZXQgKSA+IF9FUFMgKSB7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX2NoYW5nZUV2ZW50ICk7XG5cblx0XHRcdHRoaXMuX2xhc3RQb3NpdGlvbi5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xuXHRcdFx0dGhpcy5fbGFzdFF1YXRlcm5pb24uY29weSggdGhpcy5vYmplY3QucXVhdGVybmlvbiApO1xuXHRcdFx0dGhpcy5fbGFzdFRhcmdldFBvc2l0aW9uLmNvcHkoIHRoaXMudGFyZ2V0ICk7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRfZ2V0QXV0b1JvdGF0aW9uQW5nbGUoIGRlbHRhVGltZSApIHtcblxuXHRcdGlmICggZGVsdGFUaW1lICE9PSBudWxsICkge1xuXG5cdFx0XHRyZXR1cm4gKCBfdHdvUEkgLyA2MCAqIHRoaXMuYXV0b1JvdGF0ZVNwZWVkICkgKiBkZWx0YVRpbWU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gX3R3b1BJIC8gNjAgLyA2MCAqIHRoaXMuYXV0b1JvdGF0ZVNwZWVkO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZ2V0Wm9vbVNjYWxlKCBkZWx0YSApIHtcblxuXHRcdGNvbnN0IG5vcm1hbGl6ZWREZWx0YSA9IE1hdGguYWJzKCBkZWx0YSAqIDAuMDEgKTtcblx0XHRyZXR1cm4gTWF0aC5wb3coIDAuOTUsIHRoaXMuem9vbVNwZWVkICogbm9ybWFsaXplZERlbHRhICk7XG5cblx0fVxuXG5cdF9yb3RhdGVMZWZ0KCBhbmdsZSApIHtcblxuXHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xuXG5cdH1cblxuXHRfcm90YXRlVXAoIGFuZ2xlICkge1xuXG5cdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEucGhpIC09IGFuZ2xlO1xuXG5cdH1cblxuXHRfcGFuTGVmdCggZGlzdGFuY2UsIG9iamVjdE1hdHJpeCApIHtcblxuXHRcdF92LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMCApOyAvLyBnZXQgWCBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XG5cdFx0X3YubXVsdGlwbHlTY2FsYXIoIC0gZGlzdGFuY2UgKTtcblxuXHRcdHRoaXMuX3Bhbk9mZnNldC5hZGQoIF92ICk7XG5cblx0fVxuXG5cdF9wYW5VcCggZGlzdGFuY2UsIG9iamVjdE1hdHJpeCApIHtcblxuXHRcdGlmICggdGhpcy5zY3JlZW5TcGFjZVBhbm5pbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdF92LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3Yuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAwICk7XG5cdFx0XHRfdi5jcm9zc1ZlY3RvcnMoIHRoaXMub2JqZWN0LnVwLCBfdiApO1xuXG5cdFx0fVxuXG5cdFx0X3YubXVsdGlwbHlTY2FsYXIoIGRpc3RhbmNlICk7XG5cblx0XHR0aGlzLl9wYW5PZmZzZXQuYWRkKCBfdiApO1xuXG5cdH1cblxuXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0X3BhbiggZGVsdGFYLCBkZWx0YVkgKSB7XG5cblx0XHRjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xuXG5cdFx0aWYgKCB0aGlzLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHQvLyBwZXJzcGVjdGl2ZVxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLm9iamVjdC5wb3NpdGlvbjtcblx0XHRcdF92LmNvcHkoIHBvc2l0aW9uICkuc3ViKCB0aGlzLnRhcmdldCApO1xuXHRcdFx0bGV0IHRhcmdldERpc3RhbmNlID0gX3YubGVuZ3RoKCk7XG5cblx0XHRcdC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxuXHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oICggdGhpcy5vYmplY3QuZm92IC8gMiApICogTWF0aC5QSSAvIDE4MC4wICk7XG5cblx0XHRcdC8vIHdlIHVzZSBvbmx5IGNsaWVudEhlaWdodCBoZXJlIHNvIGFzcGVjdCByYXRpbyBkb2VzIG5vdCBkaXN0b3J0IHNwZWVkXG5cdFx0XHR0aGlzLl9wYW5MZWZ0KCAyICogZGVsdGFYICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgdGhpcy5vYmplY3QubWF0cml4ICk7XG5cdFx0XHR0aGlzLl9wYW5VcCggMiAqIGRlbHRhWSAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHRoaXMub2JqZWN0Lm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdC8vIG9ydGhvZ3JhcGhpY1xuXHRcdFx0dGhpcy5fcGFuTGVmdCggZGVsdGFYICogKCB0aGlzLm9iamVjdC5yaWdodCAtIHRoaXMub2JqZWN0LmxlZnQgKSAvIHRoaXMub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudFdpZHRoLCB0aGlzLm9iamVjdC5tYXRyaXggKTtcblx0XHRcdHRoaXMuX3BhblVwKCBkZWx0YVkgKiAoIHRoaXMub2JqZWN0LnRvcCAtIHRoaXMub2JqZWN0LmJvdHRvbSApIC8gdGhpcy5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCB0aGlzLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHBhbiBkaXNhYmxlZC4nICk7XG5cdFx0XHR0aGlzLmVuYWJsZVBhbiA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZG9sbHlPdXQoIGRvbGx5U2NhbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgfHwgdGhpcy5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHRoaXMuX3NjYWxlIC89IGRvbGx5U2NhbGU7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfZG9sbHlJbiggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggdGhpcy5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSB8fCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5fc2NhbGUgKj0gZG9sbHlTY2FsZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVab29tID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdF91cGRhdGVab29tUGFyYW1ldGVycyggeCwgeSApIHtcblxuXHRcdGlmICggISB0aGlzLnpvb21Ub0N1cnNvciApIHtcblxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGVyZm9ybUN1cnNvclpvb20gPSB0cnVlO1xuXG5cdFx0Y29uc3QgcmVjdCA9IHRoaXMuZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRjb25zdCBkeCA9IHggLSByZWN0LmxlZnQ7XG5cdFx0Y29uc3QgZHkgPSB5IC0gcmVjdC50b3A7XG5cdFx0Y29uc3QgdyA9IHJlY3Qud2lkdGg7XG5cdFx0Y29uc3QgaCA9IHJlY3QuaGVpZ2h0O1xuXG5cdFx0dGhpcy5fbW91c2UueCA9ICggZHggLyB3ICkgKiAyIC0gMTtcblx0XHR0aGlzLl9tb3VzZS55ID0gLSAoIGR5IC8gaCApICogMiArIDE7XG5cblx0XHR0aGlzLl9kb2xseURpcmVjdGlvbi5zZXQoIHRoaXMuX21vdXNlLngsIHRoaXMuX21vdXNlLnksIDEgKS51bnByb2plY3QoIHRoaXMub2JqZWN0ICkuc3ViKCB0aGlzLm9iamVjdC5wb3NpdGlvbiApLm5vcm1hbGl6ZSgpO1xuXG5cdH1cblxuXHRfY2xhbXBEaXN0YW5jZSggZGlzdCApIHtcblxuXHRcdHJldHVybiBNYXRoLm1heCggdGhpcy5taW5EaXN0YW5jZSwgTWF0aC5taW4oIHRoaXMubWF4RGlzdGFuY2UsIGRpc3QgKSApO1xuXG5cdH1cblxuXHQvL1xuXHQvLyBldmVudCBjYWxsYmFja3MgLSB1cGRhdGUgdGhlIG9iamVjdCBzdGF0ZVxuXHQvL1xuXG5cdF9oYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcm90YXRlU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZURvd25Eb2xseSggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl91cGRhdGVab29tUGFyYW1ldGVycyggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WCApO1xuXHRcdHRoaXMuX2RvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcGFuU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcm90YXRlRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0dGhpcy5fcm90YXRlRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcm90YXRlRW5kLCB0aGlzLl9yb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xuXG5cdFx0dGhpcy5fcm90YXRlTGVmdCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7IC8vIHllcywgaGVpZ2h0XG5cblx0XHR0aGlzLl9yb3RhdGVVcCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHR0aGlzLl9yb3RhdGVTdGFydC5jb3B5KCB0aGlzLl9yb3RhdGVFbmQgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZU1vdmVEb2xseSggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl9kb2xseUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdHRoaXMuX2RvbGx5RGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fZG9sbHlFbmQsIHRoaXMuX2RvbGx5U3RhcnQgKTtcblxuXHRcdGlmICggdGhpcy5fZG9sbHlEZWx0YS55ID4gMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlPdXQoIHRoaXMuX2dldFpvb21TY2FsZSggdGhpcy5fZG9sbHlEZWx0YS55ICkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuX2RvbGx5RGVsdGEueSA8IDAgKSB7XG5cblx0XHRcdHRoaXMuX2RvbGx5SW4oIHRoaXMuX2dldFpvb21TY2FsZSggdGhpcy5fZG9sbHlEZWx0YS55ICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuX2RvbGx5U3RhcnQuY29weSggdGhpcy5fZG9sbHlFbmQgKTtcblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdF9oYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0dGhpcy5fcGFuRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcGFuRW5kLCB0aGlzLl9wYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnBhblNwZWVkICk7XG5cblx0XHR0aGlzLl9wYW4oIHRoaXMuX3BhbkRlbHRhLngsIHRoaXMuX3BhbkRlbHRhLnkgKTtcblxuXHRcdHRoaXMuX3BhblN0YXJ0LmNvcHkoIHRoaXMuX3BhbkVuZCApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fdXBkYXRlWm9vbVBhcmFtZXRlcnMoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdGlmICggZXZlbnQuZGVsdGFZIDwgMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlJbiggdGhpcy5fZ2V0Wm9vbVNjYWxlKCBldmVudC5kZWx0YVkgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZXZlbnQuZGVsdGFZID4gMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlPdXQoIHRoaXMuX2dldFpvb21TY2FsZSggZXZlbnQuZGVsdGFZICkgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlKCk7XG5cblx0fVxuXG5cdF9oYW5kbGVLZXlEb3duKCBldmVudCApIHtcblxuXHRcdGxldCBuZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0c3dpdGNoICggZXZlbnQuY29kZSApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLmtleXMuVVA6XG5cblx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9yb3RhdGVVcCggX3R3b1BJICogdGhpcy5rZXlSb3RhdGVTcGVlZCAvIHRoaXMuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fcGFuKCAwLCB0aGlzLmtleVBhblNwZWVkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgdGhpcy5rZXlzLkJPVFRPTTpcblxuXHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3JvdGF0ZVVwKCAtIF90d29QSSAqIHRoaXMua2V5Um90YXRlU3BlZWQgLyB0aGlzLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3BhbiggMCwgLSB0aGlzLmtleVBhblNwZWVkICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgdGhpcy5rZXlzLkxFRlQ6XG5cblx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9yb3RhdGVMZWZ0KCBfdHdvUEkgKiB0aGlzLmtleVJvdGF0ZVNwZWVkIC8gdGhpcy5kb21FbGVtZW50LmNsaWVudEhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9wYW4oIHRoaXMua2V5UGFuU3BlZWQsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSB0aGlzLmtleXMuUklHSFQ6XG5cblx0XHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9yb3RhdGVMZWZ0KCAtIF90d29QSSAqIHRoaXMua2V5Um90YXRlU3BlZWQgLyB0aGlzLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3BhbiggLSB0aGlzLmtleVBhblNwZWVkLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHQvLyBwcmV2ZW50IHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIG9uIGN1cnNvciBrZXlzXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5fcG9pbnRlcnMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0aGlzLl9yb3RhdGVTdGFydC5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLl9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRcdGNvbnN0IHggPSAwLjUgKiAoIGV2ZW50LnBhZ2VYICsgcG9zaXRpb24ueCApO1xuXHRcdFx0Y29uc3QgeSA9IDAuNSAqICggZXZlbnQucGFnZVkgKyBwb3NpdGlvbi55ICk7XG5cblx0XHRcdHRoaXMuX3JvdGF0ZVN0YXJ0LnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hTdGFydFBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dGhpcy5fcGFuU3RhcnQuc2V0KCBldmVudC5wYWdlWCwgZXZlbnQucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApO1xuXG5cdFx0XHRjb25zdCB4ID0gMC41ICogKCBldmVudC5wYWdlWCArIHBvc2l0aW9uLnggKTtcblx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSApO1xuXG5cdFx0XHR0aGlzLl9wYW5TdGFydC5zZXQoIHgsIHkgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdGNvbnN0IGR4ID0gZXZlbnQucGFnZVggLSBwb3NpdGlvbi54O1xuXHRcdGNvbnN0IGR5ID0gZXZlbnQucGFnZVkgLSBwb3NpdGlvbi55O1xuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG5cblx0XHR0aGlzLl9kb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoU3RhcnREb2xseVBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSApIHRoaXMuX2hhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKTtcblxuXHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVab29tICkgdGhpcy5faGFuZGxlVG91Y2hTdGFydERvbGx5KCBldmVudCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSApIHRoaXMuX2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9wb2ludGVycy5sZW5ndGggPT0gMSApIHtcblxuXHRcdFx0dGhpcy5fcm90YXRlRW5kLnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdFx0Y29uc3QgeCA9IDAuNSAqICggZXZlbnQucGFnZVggKyBwb3NpdGlvbi54ICk7XG5cdFx0XHRjb25zdCB5ID0gMC41ICogKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKTtcblxuXHRcdFx0dGhpcy5fcm90YXRlRW5kLnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcm90YXRlRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcm90YXRlRW5kLCB0aGlzLl9yb3RhdGVTdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRjb25zdCBlbGVtZW50ID0gdGhpcy5kb21FbGVtZW50O1xuXG5cdFx0dGhpcy5fcm90YXRlTGVmdCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7IC8vIHllcywgaGVpZ2h0XG5cblx0XHR0aGlzLl9yb3RhdGVVcCggX3R3b1BJICogdGhpcy5fcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHR0aGlzLl9yb3RhdGVTdGFydC5jb3B5KCB0aGlzLl9yb3RhdGVFbmQgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0dGhpcy5fcGFuRW5kLnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdFx0Y29uc3QgeCA9IDAuNSAqICggZXZlbnQucGFnZVggKyBwb3NpdGlvbi54ICk7XG5cdFx0XHRjb25zdCB5ID0gMC41ICogKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKTtcblxuXHRcdFx0dGhpcy5fcGFuRW5kLnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGFuRGVsdGEuc3ViVmVjdG9ycyggdGhpcy5fcGFuRW5kLCB0aGlzLl9wYW5TdGFydCApLm11bHRpcGx5U2NhbGFyKCB0aGlzLnBhblNwZWVkICk7XG5cblx0XHR0aGlzLl9wYW4oIHRoaXMuX3BhbkRlbHRhLngsIHRoaXMuX3BhbkRlbHRhLnkgKTtcblxuXHRcdHRoaXMuX3BhblN0YXJ0LmNvcHkoIHRoaXMuX3BhbkVuZCApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLl9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRjb25zdCBkeCA9IGV2ZW50LnBhZ2VYIC0gcG9zaXRpb24ueDtcblx0XHRjb25zdCBkeSA9IGV2ZW50LnBhZ2VZIC0gcG9zaXRpb24ueTtcblxuXHRcdGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0dGhpcy5fZG9sbHlFbmQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdFx0dGhpcy5fZG9sbHlEZWx0YS5zZXQoIDAsIE1hdGgucG93KCB0aGlzLl9kb2xseUVuZC55IC8gdGhpcy5fZG9sbHlTdGFydC55LCB0aGlzLnpvb21TcGVlZCApICk7XG5cblx0XHR0aGlzLl9kb2xseU91dCggdGhpcy5fZG9sbHlEZWx0YS55ICk7XG5cblx0XHR0aGlzLl9kb2xseVN0YXJ0LmNvcHkoIHRoaXMuX2RvbGx5RW5kICk7XG5cblx0XHRjb25zdCBjZW50ZXJYID0gKCBldmVudC5wYWdlWCArIHBvc2l0aW9uLnggKSAqIDAuNTtcblx0XHRjb25zdCBjZW50ZXJZID0gKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKSAqIDAuNTtcblxuXHRcdHRoaXMuX3VwZGF0ZVpvb21QYXJhbWV0ZXJzKCBjZW50ZXJYLCBjZW50ZXJZICk7XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaE1vdmVEb2xseVBhbiggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSApIHRoaXMuX2hhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHRoaXMuX2hhbmRsZVRvdWNoTW92ZVBhbiggZXZlbnQgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVab29tICkgdGhpcy5faGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkgdGhpcy5faGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdH1cblxuXHQvLyBwb2ludGVyc1xuXG5cdF9hZGRQb2ludGVyKCBldmVudCApIHtcblxuXHRcdHRoaXMuX3BvaW50ZXJzLnB1c2goIGV2ZW50LnBvaW50ZXJJZCApO1xuXG5cdH1cblxuXHRfcmVtb3ZlUG9pbnRlciggZXZlbnQgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5fcG9pbnRlclBvc2l0aW9uc1sgZXZlbnQucG9pbnRlcklkIF07XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9wb2ludGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGhpcy5fcG9pbnRlcnNbIGkgXSA9PSBldmVudC5wb2ludGVySWQgKSB7XG5cblx0XHRcdFx0dGhpcy5fcG9pbnRlcnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRfaXNUcmFja2luZ1BvaW50ZXIoIGV2ZW50ICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5fcG9pbnRlcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzWyBpIF0gPT0gZXZlbnQucG9pbnRlcklkICkgcmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdF90cmFja1BvaW50ZXIoIGV2ZW50ICkge1xuXG5cdFx0bGV0IHBvc2l0aW9uID0gdGhpcy5fcG9pbnRlclBvc2l0aW9uc1sgZXZlbnQucG9pbnRlcklkIF07XG5cblx0XHRpZiAoIHBvc2l0aW9uID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcblx0XHRcdHRoaXMuX3BvaW50ZXJQb3NpdGlvbnNbIGV2ZW50LnBvaW50ZXJJZCBdID0gcG9zaXRpb247XG5cblx0XHR9XG5cblx0XHRwb3NpdGlvbi5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdH1cblxuXHRfZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApIHtcblxuXHRcdGNvbnN0IHBvaW50ZXJJZCA9ICggZXZlbnQucG9pbnRlcklkID09PSB0aGlzLl9wb2ludGVyc1sgMCBdICkgPyB0aGlzLl9wb2ludGVyc1sgMSBdIDogdGhpcy5fcG9pbnRlcnNbIDAgXTtcblxuXHRcdHJldHVybiB0aGlzLl9wb2ludGVyUG9zaXRpb25zWyBwb2ludGVySWQgXTtcblxuXHR9XG5cblx0Ly9cblxuXHRfY3VzdG9tV2hlZWxFdmVudCggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBtb2RlID0gZXZlbnQuZGVsdGFNb2RlO1xuXG5cdFx0Ly8gbWluaW1hbCB3aGVlbCBldmVudCBhbHRlcmVkIHRvIG1lZXQgZGVsdGEtem9vbSBkZW1hbmRcblx0XHRjb25zdCBuZXdFdmVudCA9IHtcblx0XHRcdGNsaWVudFg6IGV2ZW50LmNsaWVudFgsXG5cdFx0XHRjbGllbnRZOiBldmVudC5jbGllbnRZLFxuXHRcdFx0ZGVsdGFZOiBldmVudC5kZWx0YVksXG5cdFx0fTtcblxuXHRcdHN3aXRjaCAoIG1vZGUgKSB7XG5cblx0XHRcdGNhc2UgMTogLy8gTElORV9NT0RFXG5cdFx0XHRcdG5ld0V2ZW50LmRlbHRhWSAqPSAxNjtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjogLy8gUEFHRV9NT0RFXG5cdFx0XHRcdG5ld0V2ZW50LmRlbHRhWSAqPSAxMDA7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZGV0ZWN0IGlmIGV2ZW50IHdhcyB0cmlnZ2VyZWQgYnkgcGluY2hpbmdcblx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgJiYgISB0aGlzLl9jb250cm9sQWN0aXZlICkge1xuXG5cdFx0XHRuZXdFdmVudC5kZWx0YVkgKj0gMTA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3RXZlbnQ7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uUG9pbnRlckRvd24oIGV2ZW50ICkge1xuXG5cdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdHRoaXMuZG9tRWxlbWVudC5zZXRQb2ludGVyQ2FwdHVyZSggZXZlbnQucG9pbnRlcklkICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Qb2ludGVyTW92ZSApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcnVwJywgdGhpcy5fb25Qb2ludGVyVXAgKTtcblxuXHR9XG5cblx0Ly9cblxuXHRpZiAoIHRoaXMuX2lzVHJhY2tpbmdQb2ludGVyKCBldmVudCApICkgcmV0dXJuO1xuXG5cdC8vXG5cblx0dGhpcy5fYWRkUG9pbnRlciggZXZlbnQgKTtcblxuXHRpZiAoIGV2ZW50LnBvaW50ZXJUeXBlID09PSAndG91Y2gnICkge1xuXG5cdFx0dGhpcy5fb25Ub3VjaFN0YXJ0KCBldmVudCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLl9vbk1vdXNlRG93biggZXZlbnQgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Qb2ludGVyTW92ZSggZXZlbnQgKSB7XG5cblx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdGlmICggZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgKSB7XG5cblx0XHR0aGlzLl9vblRvdWNoTW92ZSggZXZlbnQgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0dGhpcy5fb25Nb3VzZU1vdmUoIGV2ZW50ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uUG9pbnRlclVwKCBldmVudCApIHtcblxuXHR0aGlzLl9yZW1vdmVQb2ludGVyKCBldmVudCApO1xuXG5cdHN3aXRjaCAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCApIHtcblxuXHRcdGNhc2UgMDpcblxuXHRcdFx0dGhpcy5kb21FbGVtZW50LnJlbGVhc2VQb2ludGVyQ2FwdHVyZSggZXZlbnQucG9pbnRlcklkICk7XG5cblx0XHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblBvaW50ZXJNb3ZlICk7XG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJ1cCcsIHRoaXMuX29uUG9pbnRlclVwICk7XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX2VuZEV2ZW50ICk7XG5cblx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIDE6XG5cblx0XHRcdGNvbnN0IHBvaW50ZXJJZCA9IHRoaXMuX3BvaW50ZXJzWyAwIF07XG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX3BvaW50ZXJQb3NpdGlvbnNbIHBvaW50ZXJJZCBdO1xuXG5cdFx0XHQvLyBtaW5pbWFsIHBsYWNlaG9sZGVyIGV2ZW50IC0gYWxsb3dzIHN0YXRlIGNvcnJlY3Rpb24gb24gcG9pbnRlci11cFxuXHRcdFx0dGhpcy5fb25Ub3VjaFN0YXJ0KCB7IHBvaW50ZXJJZDogcG9pbnRlcklkLCBwYWdlWDogcG9zaXRpb24ueCwgcGFnZVk6IHBvc2l0aW9uLnkgfSApO1xuXG5cdFx0XHRicmVhaztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Nb3VzZURvd24oIGV2ZW50ICkge1xuXG5cdGxldCBtb3VzZUFjdGlvbjtcblxuXHRzd2l0Y2ggKCBldmVudC5idXR0b24gKSB7XG5cblx0XHRjYXNlIDA6XG5cblx0XHRcdG1vdXNlQWN0aW9uID0gdGhpcy5tb3VzZUJ1dHRvbnMuTEVGVDtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAxOlxuXG5cdFx0XHRtb3VzZUFjdGlvbiA9IHRoaXMubW91c2VCdXR0b25zLk1JRERMRTtcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAyOlxuXG5cdFx0XHRtb3VzZUFjdGlvbiA9IHRoaXMubW91c2VCdXR0b25zLlJJR0hUO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHRtb3VzZUFjdGlvbiA9IC0gMTtcblxuXHR9XG5cblx0c3dpdGNoICggbW91c2VBY3Rpb24gKSB7XG5cblx0XHRjYXNlIE1PVVNFLkRPTExZOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApO1xuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLkRPTExZO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgTU9VU0UuUk9UQVRFOlxuXG5cdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLl9oYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5QQU47XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0dGhpcy5faGFuZGxlTW91c2VEb3duUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBNT1VTRS5QQU46XG5cblx0XHRcdGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5ICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlJPVEFURTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLl9oYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5QQU47XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0fVxuXG5cdGlmICggdGhpcy5zdGF0ZSAhPT0gX1NUQVRFLk5PTkUgKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VNb3ZlKCBldmVudCApIHtcblxuXHRzd2l0Y2ggKCB0aGlzLnN0YXRlICkge1xuXG5cdFx0Y2FzZSBfU1RBVEUuUk9UQVRFOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlTW91c2VNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgX1NUQVRFLkRPTExZOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgX1NUQVRFLlBBTjpcblxuXHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlTW92ZVBhbiggZXZlbnQgKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uTW91c2VXaGVlbCggZXZlbnQgKSB7XG5cblx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlIHx8IHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgfHwgdGhpcy5zdGF0ZSAhPT0gX1NUQVRFLk5PTkUgKSByZXR1cm47XG5cblx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0dGhpcy5faGFuZGxlTW91c2VXaGVlbCggdGhpcy5fY3VzdG9tV2hlZWxFdmVudCggZXZlbnQgKSApO1xuXG5cdHRoaXMuZGlzcGF0Y2hFdmVudCggX2VuZEV2ZW50ICk7XG5cbn1cblxuZnVuY3Rpb24gb25LZXlEb3duKCBldmVudCApIHtcblxuXHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0dGhpcy5faGFuZGxlS2V5RG93biggZXZlbnQgKTtcblxufVxuXG5mdW5jdGlvbiBvblRvdWNoU3RhcnQoIGV2ZW50ICkge1xuXG5cdHRoaXMuX3RyYWNrUG9pbnRlciggZXZlbnQgKTtcblxuXHRzd2l0Y2ggKCB0aGlzLl9wb2ludGVycy5sZW5ndGggKSB7XG5cblx0XHRjYXNlIDE6XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMudG91Y2hlcy5PTkUgKSB7XG5cblx0XHRcdFx0Y2FzZSBUT1VDSC5ST1RBVEU6XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlRPVUNIX1JPVEFURTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgVE9VQ0guUEFOOlxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHR0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5UT1VDSF9QQU47XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAyOlxuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLnRvdWNoZXMuVFdPICkge1xuXG5cdFx0XHRcdGNhc2UgVE9VQ0guRE9MTFlfUEFOOlxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoU3RhcnREb2xseVBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuVE9VQ0hfRE9MTFlfUEFOO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBUT1VDSC5ET0xMWV9ST1RBVEU6XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0dGhpcy5faGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5UT1VDSF9ET0xMWV9ST1RBVEU7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblxuXHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdH1cblxuXHRpZiAoIHRoaXMuc3RhdGUgIT09IF9TVEFURS5OT05FICkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfc3RhcnRFdmVudCApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBvblRvdWNoTW92ZSggZXZlbnQgKSB7XG5cblx0dGhpcy5fdHJhY2tQb2ludGVyKCBldmVudCApO1xuXG5cdHN3aXRjaCAoIHRoaXMuc3RhdGUgKSB7XG5cblx0XHRjYXNlIF9TVEFURS5UT1VDSF9ST1RBVEU6XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuVE9VQ0hfUEFOOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgX1NUQVRFLlRPVUNIX0RPTExZX1BBTjpcblxuXHRcdFx0aWYgKCB0aGlzLmVuYWJsZVpvb20gPT09IGZhbHNlICYmIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4oIGV2ZW50ICk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuVE9VQ0hfRE9MTFlfUk9UQVRFOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoIGV2ZW50ICkge1xuXG5cdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG59XG5cbmZ1bmN0aW9uIGludGVyY2VwdENvbnRyb2xEb3duKCBldmVudCApIHtcblxuXHRpZiAoIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnICkge1xuXG5cdFx0dGhpcy5fY29udHJvbEFjdGl2ZSA9IHRydWU7XG5cblx0XHRjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9tRWxlbWVudC5nZXRSb290Tm9kZSgpOyAvLyBvZmZzY3JlZW4gY2FudmFzIGNvbXBhdGliaWxpdHlcblxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXl1cCcsIHRoaXMuX2ludGVyY2VwdENvbnRyb2xVcCwgeyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH0gKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0Q29udHJvbFVwKCBldmVudCApIHtcblxuXHRpZiAoIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnICkge1xuXG5cdFx0dGhpcy5fY29udHJvbEFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0Y29uc3QgZG9jdW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQuZ2V0Um9vdE5vZGUoKTsgLy8gb2Zmc2NyZWVuIGNhbnZhcyBjb21wYXRpYmlsaXR5XG5cblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5dXAnLCB0aGlzLl9pbnRlcmNlcHRDb250cm9sVXAsIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9ICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IE9yYml0Q29udHJvbHMgfTtcbiIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgc3RhcnRDYW1lcmFBbmRDb250cm9scyB9IGZyb20gXCIuL3RocmVlL2NhbWVyYVwiO1xuY29uc3QgbWFpbiA9ICgpID0+IHtcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgIHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoJ2JsYWNrJyk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcigpO1xuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICBjb25zdCB7IGNhbWVyYSwgY29udHJvbHMgfSA9IHN0YXJ0Q2FtZXJhQW5kQ29udHJvbHMocmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAge1xuICAgICAgICBjb25zdCBwbGFuZVNpemUgPSA0MDtcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCdodHRwczovL3RocmVlanMub3JnL21hbnVhbC9leGFtcGxlcy9yZXNvdXJjZXMvaW1hZ2VzL2NoZWNrZXIucG5nJyk7XG4gICAgICAgIHRleHR1cmUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgdGV4dHVyZS53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICB0ZXh0dXJlLm1hZ0ZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgICAgIHRleHR1cmUuY29sb3JTcGFjZSA9IFRIUkVFLlNSR0JDb2xvclNwYWNlO1xuICAgICAgICBjb25zdCByZXBlYXRzID0gcGxhbmVTaXplIC8gMjtcbiAgICAgICAgdGV4dHVyZS5yZXBlYXQuc2V0KHJlcGVhdHMsIHJlcGVhdHMpO1xuICAgICAgICBjb25zdCBwbGFuZUdlbyA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHBsYW5lU2l6ZSwgcGxhbmVTaXplKTtcbiAgICAgICAgY29uc3QgcGxhbmVNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuICAgICAgICAgICAgbWFwOiB0ZXh0dXJlLFxuICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChwbGFuZUdlbywgcGxhbmVNYXQpO1xuICAgICAgICBtZXNoLnJvdGF0aW9uLnggPSBNYXRoLlBJICogLS41O1xuICAgICAgICBzY2VuZS5hZGQobWVzaCk7XG4gICAgfVxuICAgIHtcbiAgICAgICAgY29uc3QgY3ViZVNpemUgPSA0O1xuICAgICAgICBjb25zdCBjdWJlR2VvID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KGN1YmVTaXplLCBjdWJlU2l6ZSwgY3ViZVNpemUpO1xuICAgICAgICBjb25zdCBjdWJlTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgY29sb3I6ICcjOEFDJyB9KTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGN1YmVHZW8sIGN1YmVNYXQpO1xuICAgICAgICBtZXNoLnBvc2l0aW9uLnNldChjdWJlU2l6ZSArIDEsIGN1YmVTaXplIC8gMiwgMCk7XG4gICAgICAgIHNjZW5lLmFkZChtZXNoKTtcbiAgICB9XG4gICAge1xuICAgICAgICBjb25zdCBzcGhlcmVSYWRpdXMgPSAzO1xuICAgICAgICBjb25zdCBzcGhlcmVXaWR0aERpdmlzaW9ucyA9IDMyO1xuICAgICAgICBjb25zdCBzcGhlcmVIZWlnaHREaXZpc2lvbnMgPSAxNjtcbiAgICAgICAgY29uc3Qgc3BoZXJlR2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHNwaGVyZVJhZGl1cywgc3BoZXJlV2lkdGhEaXZpc2lvbnMsIHNwaGVyZUhlaWdodERpdmlzaW9ucyk7XG4gICAgICAgIGNvbnN0IHNwaGVyZU1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiAnI0NBOCcgfSk7XG4gICAgICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChzcGhlcmVHZW8sIHNwaGVyZU1hdCk7XG4gICAgICAgIG1lc2gucG9zaXRpb24uc2V0KC1zcGhlcmVSYWRpdXMgLSAxLCBzcGhlcmVSYWRpdXMgKyAyLCAwKTtcbiAgICAgICAgc2NlbmUuYWRkKG1lc2gpO1xuICAgIH1cbiAgICB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gMHhGRkZGRkY7XG4gICAgICAgIGNvbnN0IGludGVuc2l0eSA9IDE7XG4gICAgICAgIGNvbnN0IGxpZ2h0ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodChjb2xvciwgaW50ZW5zaXR5KTtcbiAgICAgICAgc2NlbmUuYWRkKGxpZ2h0KTtcbiAgICB9XG4gICAgY29uc3QgcmVzaXplUmVuZGVyZXJUb0Rpc3BsYXlTaXplID0gKHJlbmRlcmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHJlbmRlcmVyLmRvbUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICBjb25zdCBuZWVkUmVzaXplID0gY2FudmFzLndpZHRoICE9PSB3aWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9PSBoZWlnaHQ7XG4gICAgICAgIGlmIChuZWVkUmVzaXplKSB7XG4gICAgICAgICAgICByZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmVlZFJlc2l6ZTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHJlc2l6ZVJlbmRlcmVyVG9EaXNwbGF5U2l6ZShyZW5kZXJlcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHJlbmRlcmVyLmRvbUVsZW1lbnQ7XG4gICAgICAgICAgICBjYW1lcmEuYXNwZWN0ID0gY2FudmFzLmNsaWVudFdpZHRoIC8gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG59O1xubWFpbigpO1xuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzJztcbmV4cG9ydCBjb25zdCBzdGFydENhbWVyYUFuZENvbnRyb2xzID0gKGNhbnZhcykgPT4ge1xuICAgIGNvbnN0IGZvdiA9IDQ1O1xuICAgIGNvbnN0IGFzcGVjdCA9IDI7IC8vIHRoZSBjYW52YXMgZGVmYXVsdFxuICAgIGNvbnN0IG5lYXIgPSAwLjE7XG4gICAgY29uc3QgZmFyID0gMTAwO1xuICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDEwLCAyMCk7XG4gICAgY29uc3QgY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyhjYW1lcmEsIGNhbnZhcyk7XG4gICAgY29udHJvbHMudGFyZ2V0LnNldCgwLCA1LCAwKTtcbiAgICBjb250cm9scy51cGRhdGUoKTtcbiAgICByZXR1cm4geyBjYW1lcmEsIGNvbnRyb2xzIH07XG59O1xuIl0sIm5hbWVzIjpbIlJFVklTSU9OIiwiRnJvbnRTaWRlIiwiQmFja1NpZGUiLCJEb3VibGVTaWRlIiwiQWRkRXF1YXRpb24iLCJTdWJ0cmFjdEVxdWF0aW9uIiwiUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24iLCJaZXJvRmFjdG9yIiwiT25lRmFjdG9yIiwiU3JjQ29sb3JGYWN0b3IiLCJPbmVNaW51c1NyY0NvbG9yRmFjdG9yIiwiU3JjQWxwaGFGYWN0b3IiLCJPbmVNaW51c1NyY0FscGhhRmFjdG9yIiwiRHN0QWxwaGFGYWN0b3IiLCJPbmVNaW51c0RzdEFscGhhRmFjdG9yIiwiRHN0Q29sb3JGYWN0b3IiLCJPbmVNaW51c0RzdENvbG9yRmFjdG9yIiwiU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciIsIkNvbnN0YW50Q29sb3JGYWN0b3IiLCJPbmVNaW51c0NvbnN0YW50Q29sb3JGYWN0b3IiLCJDb25zdGFudEFscGhhRmFjdG9yIiwiT25lTWludXNDb25zdGFudEFscGhhRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiQ3ViZVJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVJlZnJhY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciIsIkxpbmVhckZpbHRlciIsIkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIiLCJVbnNpZ25lZEJ5dGVUeXBlIiwiVW5zaWduZWRTaG9ydFR5cGUiLCJJbnRUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiRmxvYXRUeXBlIiwiSGFsZkZsb2F0VHlwZSIsIlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSIsIlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIlJHQkFGb3JtYXQiLCJEZXB0aEZvcm1hdCIsIkRlcHRoU3RlbmNpbEZvcm1hdCIsIlJlZEludGVnZXJGb3JtYXQiLCJSR0ludGVnZXJGb3JtYXQiLCJSR0JBSW50ZWdlckZvcm1hdCIsIlJHQl9TM1RDX0RYVDFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDNfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDVfRm9ybWF0IiwiUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQiLCJSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCIsIlJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCIsIlJHQl9FVEMxX0Zvcm1hdCIsIlJHQl9FVEMyX0Zvcm1hdCIsIlJHQkFfRVRDMl9FQUNfRm9ybWF0IiwiUkdCQV9BU1RDXzR4NF9Gb3JtYXQiLCJSR0JBX0FTVENfNXg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzZ4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDVfRm9ybWF0IiwiUkdCQV9BU1RDXzh4Nl9Gb3JtYXQiLCJSR0JBX0FTVENfOHg4X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg1X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHg4X0Zvcm1hdCIsIlJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTBfRm9ybWF0IiwiUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCIsIlJHQkFfQlBUQ19Gb3JtYXQiLCJSR0JfQlBUQ19TSUdORURfRm9ybWF0IiwiUkdCX0JQVENfVU5TSUdORURfRm9ybWF0IiwiU0lHTkVEX1JFRF9SR1RDMV9Gb3JtYXQiLCJSRURfR1JFRU5fUkdUQzJfRm9ybWF0IiwiU0lHTkVEX1JFRF9HUkVFTl9SR1RDMl9Gb3JtYXQiLCJJbnRlcnBvbGF0ZURpc2NyZXRlIiwiSW50ZXJwb2xhdGVMaW5lYXIiLCJJbnRlcnBvbGF0ZVNtb290aCIsIk5vQ29sb3JTcGFjZSIsIlNSR0JDb2xvclNwYWNlIiwiTGluZWFyU1JHQkNvbG9yU3BhY2UiLCJMaW5lYXJUcmFuc2ZlciIsIlNSR0JUcmFuc2ZlciIsIktlZXBTdGVuY2lsT3AiLCJOZXZlckNvbXBhcmUiLCJMZXNzQ29tcGFyZSIsIkVxdWFsQ29tcGFyZSIsIkxlc3NFcXVhbENvbXBhcmUiLCJHcmVhdGVyQ29tcGFyZSIsIk5vdEVxdWFsQ29tcGFyZSIsIkdyZWF0ZXJFcXVhbENvbXBhcmUiLCJBbHdheXNDb21wYXJlIiwiR0xTTDMiLCJXZWJHTENvb3JkaW5hdGVTeXN0ZW0iLCJXZWJHUFVDb29yZGluYXRlU3lzdGVtIiwiRXZlbnREaXNwYXRjaGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInR5cGUiLCJsaXN0ZW5lciIsInVuZGVmaW5lZCIsInRoaXMiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJpbmRleCIsInNwbGljZSIsImRpc3BhdGNoRXZlbnQiLCJldmVudCIsInRhcmdldCIsImFycmF5Iiwic2xpY2UiLCJpIiwibCIsImxlbmd0aCIsImNhbGwiLCJfbHV0IiwiREVHMlJBRCIsIk1hdGgiLCJQSSIsIlJBRDJERUciLCJnZW5lcmF0ZVVVSUQiLCJkMCIsInJhbmRvbSIsImQxIiwiZDIiLCJkMyIsInRvTG93ZXJDYXNlIiwiY2xhbXAiLCJ2YWx1ZSIsIm1pbiIsIm1heCIsImxlcnAiLCJ4IiwieSIsInQiLCJkZW5vcm1hbGl6ZSIsImNvbnN0cnVjdG9yIiwiRmxvYXQzMkFycmF5IiwiVWludDMyQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQ4QXJyYXkiLCJJbnQzMkFycmF5IiwiSW50MTZBcnJheSIsIkludDhBcnJheSIsIkVycm9yIiwibm9ybWFsaXplIiwicm91bmQiLCJNYXRoVXRpbHMiLCJWZWN0b3IyIiwicHJvdG90eXBlIiwiaXNWZWN0b3IyIiwid2lkdGgiLCJoZWlnaHQiLCJzZXQiLCJzZXRTY2FsYXIiLCJzY2FsYXIiLCJzZXRYIiwic2V0WSIsInNldENvbXBvbmVudCIsImdldENvbXBvbmVudCIsImNsb25lIiwiY29weSIsInYiLCJhZGQiLCJhZGRTY2FsYXIiLCJzIiwiYWRkVmVjdG9ycyIsImEiLCJiIiwiYWRkU2NhbGVkVmVjdG9yIiwic3ViIiwic3ViU2NhbGFyIiwic3ViVmVjdG9ycyIsIm11bHRpcGx5IiwibXVsdGlwbHlTY2FsYXIiLCJkaXZpZGUiLCJkaXZpZGVTY2FsYXIiLCJhcHBseU1hdHJpeDMiLCJtIiwiZSIsImVsZW1lbnRzIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsImZsb29yIiwiY2VpbCIsInJvdW5kVG9aZXJvIiwidHJ1bmMiLCJuZWdhdGUiLCJkb3QiLCJjcm9zcyIsImxlbmd0aFNxIiwic3FydCIsIm1hbmhhdHRhbkxlbmd0aCIsImFicyIsImFuZ2xlIiwiYXRhbjIiLCJhbmdsZVRvIiwiZGVub21pbmF0b3IiLCJ0aGV0YSIsImFjb3MiLCJkaXN0YW5jZVRvIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJkeCIsImR5IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldExlbmd0aCIsImFscGhhIiwibGVycFZlY3RvcnMiLCJ2MSIsInYyIiwiZXF1YWxzIiwiZnJvbUFycmF5Iiwib2Zmc2V0IiwidG9BcnJheSIsImZyb21CdWZmZXJBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRYIiwiZ2V0WSIsInJvdGF0ZUFyb3VuZCIsImNlbnRlciIsImMiLCJjb3MiLCJzaW4iLCJTeW1ib2wiLCJpdGVyYXRvciIsIk1hdHJpeDMiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMzEiLCJuMzIiLCJuMzMiLCJpc01hdHJpeDMiLCJ0ZSIsImlkZW50aXR5IiwibWUiLCJleHRyYWN0QmFzaXMiLCJ4QXhpcyIsInlBeGlzIiwiekF4aXMiLCJzZXRGcm9tTWF0cml4M0NvbHVtbiIsInNldEZyb21NYXRyaXg0IiwibXVsdGlwbHlNYXRyaWNlcyIsInByZW11bHRpcGx5IiwiYWUiLCJiZSIsImExMSIsImExMiIsImExMyIsImEyMSIsImEyMiIsImEyMyIsImEzMSIsImEzMiIsImEzMyIsImIxMSIsImIxMiIsImIxMyIsImIyMSIsImIyMiIsImIyMyIsImIzMSIsImIzMiIsImIzMyIsImRldGVybWluYW50IiwiZCIsImYiLCJnIiwiaCIsImludmVydCIsInQxMSIsInQxMiIsInQxMyIsImRldCIsImRldEludiIsInRyYW5zcG9zZSIsInRtcCIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeDQiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJyIiwic2V0VXZUcmFuc2Zvcm0iLCJ0eCIsInR5Iiwic3giLCJzeSIsInJvdGF0aW9uIiwiY3giLCJjeSIsInNjYWxlIiwiX20zIiwibWFrZVNjYWxlIiwicm90YXRlIiwibWFrZVJvdGF0aW9uIiwidHJhbnNsYXRlIiwibWFrZVRyYW5zbGF0aW9uIiwibWF0cml4IiwiYXJyYXlOZWVkc1VpbnQzMiIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWUiLCJkb2N1bWVudCIsImNyZWF0ZUNhbnZhc0VsZW1lbnQiLCJjYW52YXMiLCJzdHlsZSIsImRpc3BsYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkZsb2F0NjRBcnJheSIsIl9jYWNoZSIsIndhcm5PbmNlIiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwiTElORUFSX1JFQzcwOV9UT19YWVoiLCJYWVpfVE9fTElORUFSX1JFQzcwOSIsImNyZWF0ZUNvbG9yTWFuYWdlbWVudCIsIkNvbG9yTWFuYWdlbWVudCIsImVuYWJsZWQiLCJ3b3JraW5nQ29sb3JTcGFjZSIsInNwYWNlcyIsImNvbnZlcnQiLCJjb2xvciIsInNvdXJjZUNvbG9yU3BhY2UiLCJ0YXJnZXRDb2xvclNwYWNlIiwidHJhbnNmZXIiLCJTUkdCVG9MaW5lYXIiLCJwcmltYXJpZXMiLCJ0b1hZWiIsImZyb21YWVoiLCJMaW5lYXJUb1NSR0IiLCJmcm9tV29ya2luZ0NvbG9yU3BhY2UiLCJ0b1dvcmtpbmdDb2xvclNwYWNlIiwiZ2V0UHJpbWFyaWVzIiwiY29sb3JTcGFjZSIsImdldFRyYW5zZmVyIiwiZ2V0THVtaW5hbmNlQ29lZmZpY2llbnRzIiwibHVtaW5hbmNlQ29lZmZpY2llbnRzIiwiZGVmaW5lIiwiY29sb3JTcGFjZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJfZ2V0TWF0cml4IiwidGFyZ2V0TWF0cml4IiwiX2dldERyYXdpbmdCdWZmZXJDb2xvclNwYWNlIiwib3V0cHV0Q29sb3JTcGFjZUNvbmZpZyIsImRyYXdpbmdCdWZmZXJDb2xvclNwYWNlIiwiX2dldFVucGFja0NvbG9yU3BhY2UiLCJ3b3JraW5nQ29sb3JTcGFjZUNvbmZpZyIsInVucGFja0NvbG9yU3BhY2UiLCJSRUM3MDlfUFJJTUFSSUVTIiwiUkVDNzA5X0xVTUlOQU5DRV9DT0VGRklDSUVOVFMiLCJENjUiLCJ3aGl0ZVBvaW50IiwicG93IiwiX2NhbnZhcyIsIkltYWdlVXRpbHMiLCJnZXREYXRhVVJMIiwiaW1hZ2UiLCJ0ZXN0Iiwic3JjIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIkltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInNSR0JUb0xpbmVhciIsIkhUTUxJbWFnZUVsZW1lbnQiLCJJbWFnZUJpdG1hcCIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImRhdGEiLCJfc291cmNlSWQiLCJTb3VyY2UiLCJpc1NvdXJjZSIsImRlZmluZVByb3BlcnR5IiwidXVpZCIsImRhdGFSZWFkeSIsInZlcnNpb24iLCJuZWVkc1VwZGF0ZSIsInRvSlNPTiIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJpbWFnZXMiLCJvdXRwdXQiLCJ1cmwiLCJBcnJheSIsImlzQXJyYXkiLCJpc0RhdGFUZXh0dXJlIiwic2VyaWFsaXplSW1hZ2UiLCJmcm9tIiwiX3RleHR1cmVJZCIsIlRleHR1cmUiLCJERUZBVUxUX0lNQUdFIiwibWFwcGluZyIsIkRFRkFVTFRfTUFQUElORyIsIndyYXBTIiwid3JhcFQiLCJtYWdGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJmb3JtYXQiLCJhbmlzb3Ryb3B5IiwiREVGQVVMVF9BTklTT1RST1BZIiwic3VwZXIiLCJpc1RleHR1cmUiLCJzb3VyY2UiLCJtaXBtYXBzIiwiY2hhbm5lbCIsImludGVybmFsRm9ybWF0IiwicmVwZWF0IiwibWF0cml4QXV0b1VwZGF0ZSIsImdlbmVyYXRlTWlwbWFwcyIsInByZW11bHRpcGx5QWxwaGEiLCJmbGlwWSIsInVucGFja0FsaWdubWVudCIsInVzZXJEYXRhIiwib25VcGRhdGUiLCJyZW5kZXJUYXJnZXQiLCJpc1JlbmRlclRhcmdldFRleHR1cmUiLCJwbXJlbVZlcnNpb24iLCJ1cGRhdGVNYXRyaXgiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImtleXMiLCJkaXNwb3NlIiwidHJhbnNmb3JtVXYiLCJ1diIsIm5lZWRzUE1SRU1VcGRhdGUiLCJWZWN0b3I0IiwieiIsInciLCJpc1ZlY3RvcjQiLCJzZXRaIiwic2V0VyIsImFwcGx5TWF0cml4NCIsInNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uIiwicSIsInNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeCIsImVwc2lsb24iLCJlcHNpbG9uMiIsIm0xMSIsIm0xMiIsIm0xMyIsIm0yMSIsIm0yMiIsIm0yMyIsIm0zMSIsIm0zMiIsIm0zMyIsInh4IiwieXkiLCJ6eiIsInh5IiwieHoiLCJ5eiIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsImdldFoiLCJnZXRXIiwiUmVuZGVyVGFyZ2V0Iiwib3B0aW9ucyIsImlzUmVuZGVyVGFyZ2V0IiwiZGVwdGgiLCJzY2lzc29yIiwic2Npc3NvclRlc3QiLCJ2aWV3cG9ydCIsImRlcHRoQnVmZmVyIiwic3RlbmNpbEJ1ZmZlciIsInJlc29sdmVEZXB0aEJ1ZmZlciIsInJlc29sdmVTdGVuY2lsQnVmZmVyIiwiZGVwdGhUZXh0dXJlIiwic2FtcGxlcyIsImNvdW50IiwidGV4dHVyZSIsIl9kZXB0aFRleHR1cmUiLCJjdXJyZW50Iiwic2V0U2l6ZSIsImlsIiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJpc1dlYkdMUmVuZGVyVGFyZ2V0IiwiRGF0YUFycmF5VGV4dHVyZSIsImlzRGF0YUFycmF5VGV4dHVyZSIsIndyYXBSIiwibGF5ZXJVcGRhdGVzIiwiU2V0IiwiYWRkTGF5ZXJVcGRhdGUiLCJsYXllckluZGV4IiwiY2xlYXJMYXllclVwZGF0ZXMiLCJjbGVhciIsIkRhdGEzRFRleHR1cmUiLCJpc0RhdGEzRFRleHR1cmUiLCJRdWF0ZXJuaW9uIiwiaXNRdWF0ZXJuaW9uIiwiX3giLCJfeSIsIl96IiwiX3ciLCJzbGVycEZsYXQiLCJkc3QiLCJkc3RPZmZzZXQiLCJzcmMwIiwic3JjT2Zmc2V0MCIsInNyYzEiLCJzcmNPZmZzZXQxIiwieDAiLCJ5MCIsInowIiwidzAiLCJ4MSIsInkxIiwiejEiLCJ3MSIsImRpciIsInNxclNpbiIsIk51bWJlciIsIkVQU0lMT04iLCJsZW4iLCJ0RGlyIiwibXVsdGlwbHlRdWF0ZXJuaW9uc0ZsYXQiLCJfb25DaGFuZ2VDYWxsYmFjayIsInF1YXRlcm5pb24iLCJzZXRGcm9tRXVsZXIiLCJldWxlciIsInVwZGF0ZSIsIm9yZGVyIiwiX29yZGVyIiwiYzEiLCJjMiIsImMzIiwiczEiLCJzMiIsInMzIiwic2V0RnJvbUF4aXNBbmdsZSIsImF4aXMiLCJoYWxmQW5nbGUiLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJ0cmFjZSIsInNldEZyb21Vbml0VmVjdG9ycyIsInZGcm9tIiwidlRvIiwicm90YXRlVG93YXJkcyIsInN0ZXAiLCJzbGVycCIsImNvbmp1Z2F0ZSIsIm11bHRpcGx5UXVhdGVybmlvbnMiLCJxYXgiLCJxYXkiLCJxYXoiLCJxYXciLCJxYngiLCJxYnkiLCJxYnoiLCJxYnciLCJxYiIsImNvc0hhbGZUaGV0YSIsInNxclNpbkhhbGZUaGV0YSIsInNpbkhhbGZUaGV0YSIsImhhbGZUaGV0YSIsInJhdGlvQSIsInJhdGlvQiIsInNsZXJwUXVhdGVybmlvbnMiLCJxYSIsInRoZXRhMSIsInRoZXRhMiIsInIxIiwicjIiLCJfb25DaGFuZ2UiLCJjYWxsYmFjayIsIlZlY3RvcjMiLCJpc1ZlY3RvcjMiLCJtdWx0aXBseVZlY3RvcnMiLCJhcHBseUV1bGVyIiwiYXBwbHlRdWF0ZXJuaW9uIiwiX3F1YXRlcm5pb24kNCIsImFwcGx5QXhpc0FuZ2xlIiwiYXBwbHlOb3JtYWxNYXRyaXgiLCJ2eCIsInZ5IiwidnoiLCJxeCIsInF5IiwicXoiLCJxdyIsInR6IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSIsIm1hdHJpeFdvcmxkIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiY3Jvc3NWZWN0b3JzIiwiYXgiLCJheSIsImF6IiwiYngiLCJieSIsImJ6IiwicHJvamVjdE9uVmVjdG9yIiwicHJvamVjdE9uUGxhbmUiLCJwbGFuZU5vcm1hbCIsIl92ZWN0b3IkYyIsInJlZmxlY3QiLCJub3JtYWwiLCJkeiIsInNldEZyb21TcGhlcmljYWwiLCJzZXRGcm9tU3BoZXJpY2FsQ29vcmRzIiwicmFkaXVzIiwicGhpIiwic2luUGhpUmFkaXVzIiwic2V0RnJvbUN5bGluZHJpY2FsIiwic2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzIiwic2V0RnJvbU1hdHJpeFNjYWxlIiwic2V0RnJvbU1hdHJpeENvbHVtbiIsInN6Iiwic2V0RnJvbUNvbG9yIiwicmFuZG9tRGlyZWN0aW9uIiwidSIsIkJveDMiLCJpc0JveDMiLCJzZXRGcm9tQXJyYXkiLCJtYWtlRW1wdHkiLCJleHBhbmRCeVBvaW50IiwiX3ZlY3RvciRiIiwic2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSIsInNldEZyb21Qb2ludHMiLCJwb2ludHMiLCJzZXRGcm9tQ2VudGVyQW5kU2l6ZSIsInNpemUiLCJoYWxmU2l6ZSIsInNldEZyb21PYmplY3QiLCJvYmplY3QiLCJwcmVjaXNlIiwiZXhwYW5kQnlPYmplY3QiLCJib3giLCJpc0VtcHR5IiwiZ2V0Q2VudGVyIiwiZ2V0U2l6ZSIsInBvaW50IiwiZXhwYW5kQnlWZWN0b3IiLCJ2ZWN0b3IiLCJleHBhbmRCeVNjYWxhciIsInVwZGF0ZVdvcmxkTWF0cml4IiwiZ2VvbWV0cnkiLCJwb3NpdGlvbkF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImlzSW5zdGFuY2VkTWVzaCIsImlzTWVzaCIsImdldFZlcnRleFBvc2l0aW9uIiwiYm91bmRpbmdCb3giLCJjb21wdXRlQm91bmRpbmdCb3giLCJfYm94JDQiLCJ1bmlvbiIsImNoaWxkcmVuIiwiY29udGFpbnNQb2ludCIsImNvbnRhaW5zQm94IiwiZ2V0UGFyYW1ldGVyIiwiaW50ZXJzZWN0c0JveCIsImludGVyc2VjdHNTcGhlcmUiLCJzcGhlcmUiLCJjbGFtcFBvaW50IiwiaW50ZXJzZWN0c1BsYW5lIiwicGxhbmUiLCJjb25zdGFudCIsImludGVyc2VjdHNUcmlhbmdsZSIsInRyaWFuZ2xlIiwiX2NlbnRlciIsIl9leHRlbnRzIiwiX3YwJDIiLCJfdjEkNyIsIl92MiQ0IiwiX2YwIiwiX2YxIiwiX2YyIiwiYXhlcyIsInNhdEZvckF4ZXMiLCJfdHJpYW5nbGVOb3JtYWwiLCJkaXN0YW5jZVRvUG9pbnQiLCJnZXRCb3VuZGluZ1NwaGVyZSIsImludGVyc2VjdCIsIl9wb2ludHMiLCJfdGVzdEF4aXMiLCJ2MCIsImV4dGVudHMiLCJqIiwicDAiLCJwMSIsInAyIiwiX2JveCQzIiwiX3YxJDYiLCJfdjIkMyIsIlNwaGVyZSIsImlzU3BoZXJlIiwib3B0aW9uYWxDZW50ZXIiLCJtYXhSYWRpdXNTcSIsInJhZGl1c1N1bSIsImRlbHRhTGVuZ3RoU3EiLCJnZXRCb3VuZGluZ0JveCIsImdldE1heFNjYWxlT25BeGlzIiwiZGVsdGEiLCJfdmVjdG9yJGEiLCJfc2VnQ2VudGVyIiwiX3NlZ0RpciIsIl9kaWZmIiwiX2VkZ2UxIiwiX2VkZ2UyIiwiX25vcm1hbCQxIiwiUmF5Iiwib3JpZ2luIiwiZGlyZWN0aW9uIiwicmF5IiwiYXQiLCJsb29rQXQiLCJyZWNhc3QiLCJjbG9zZXN0UG9pbnRUb1BvaW50IiwiZGlyZWN0aW9uRGlzdGFuY2UiLCJkaXN0YW5jZVNxVG9Qb2ludCIsImRpc3RhbmNlU3FUb1NlZ21lbnQiLCJvcHRpb25hbFBvaW50T25SYXkiLCJvcHRpb25hbFBvaW50T25TZWdtZW50Iiwic2VnRXh0ZW50IiwiYTAxIiwiYjAiLCJiMSIsInMwIiwic3FyRGlzdCIsImV4dERldCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpc05hTiIsImludGVyc2VjdFRyaWFuZ2xlIiwiYmFja2ZhY2VDdWxsaW5nIiwic2lnbiIsIkRkTiIsIkRkUXhFMiIsIkRkRTF4USIsIlFkTiIsIk1hdHJpeDQiLCJuMTQiLCJuMjQiLCJuMzQiLCJuNDEiLCJuNDIiLCJuNDMiLCJuNDQiLCJpc01hdHJpeDQiLCJjb3B5UG9zaXRpb24iLCJzZXRGcm9tTWF0cml4MyIsIm1ha2VCYXNpcyIsImV4dHJhY3RSb3RhdGlvbiIsInNjYWxlWCIsIl92MSQ1Iiwic2NhbGVZIiwic2NhbGVaIiwibWFrZVJvdGF0aW9uRnJvbUV1bGVyIiwiYWYiLCJiZiIsImNlIiwiY2YiLCJkZSIsImRmIiwiYWMiLCJhZCIsImJjIiwiYmQiLCJtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiIsImNvbXBvc2UiLCJfemVybyIsIl9vbmUiLCJleWUiLCJ1cCIsImExNCIsImEyNCIsImEzNCIsImE0MSIsImE0MiIsImE0MyIsImE0NCIsImIxNCIsImIyNCIsImIzNCIsImI0MSIsImI0MiIsImI0MyIsImI0NCIsInNldFBvc2l0aW9uIiwidDE0Iiwic2NhbGVYU3EiLCJzY2FsZVlTcSIsInNjYWxlWlNxIiwibWFrZVJvdGF0aW9uWCIsIm1ha2VSb3RhdGlvblkiLCJtYWtlUm90YXRpb25aIiwibWFrZVJvdGF0aW9uQXhpcyIsIm1ha2VTaGVhciIsInl4IiwiengiLCJ6eSIsInBvc2l0aW9uIiwieDIiLCJ5MiIsInoyIiwid3giLCJ3eSIsInd6IiwiZGVjb21wb3NlIiwiX20xJDIiLCJpbnZTWCIsImludlNZIiwiaW52U1oiLCJtYWtlUGVyc3BlY3RpdmUiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJuZWFyIiwiZmFyIiwiY29vcmRpbmF0ZVN5c3RlbSIsIm1ha2VPcnRob2dyYXBoaWMiLCJwIiwiekludiIsIl9tYXRyaXgkMiIsIl9xdWF0ZXJuaW9uJDMiLCJFdWxlciIsIkRFRkFVTFRfT1JERVIiLCJpc0V1bGVyIiwiYXNpbiIsInNldEZyb21RdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyZW9yZGVyIiwibmV3T3JkZXIiLCJMYXllcnMiLCJtYXNrIiwibGF5ZXIiLCJlbmFibGUiLCJlbmFibGVBbGwiLCJ0b2dnbGUiLCJkaXNhYmxlIiwiZGlzYWJsZUFsbCIsImxheWVycyIsImlzRW5hYmxlZCIsIl9vYmplY3QzRElkIiwiX3YxJDQiLCJfcTEiLCJfbTEkMSIsIl90YXJnZXQiLCJfcG9zaXRpb24kMyIsIl9zY2FsZSQyIiwiX3F1YXRlcm5pb24kMiIsIl94QXhpcyIsIl95QXhpcyIsIl96QXhpcyIsIl9hZGRlZEV2ZW50IiwiX3JlbW92ZWRFdmVudCIsIl9jaGlsZGFkZGVkRXZlbnQiLCJjaGlsZCIsIl9jaGlsZHJlbW92ZWRFdmVudCIsIk9iamVjdDNEIiwiaXNPYmplY3QzRCIsInBhcmVudCIsIkRFRkFVTFRfVVAiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIkRFRkFVTFRfTUFUUklYX0FVVE9fVVBEQVRFIiwibWF0cml4V29ybGRBdXRvVXBkYXRlIiwiREVGQVVMVF9NQVRSSVhfV09STERfQVVUT19VUERBVEUiLCJtYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwidmlzaWJsZSIsImNhc3RTaGFkb3ciLCJyZWNlaXZlU2hhZG93IiwiZnJ1c3R1bUN1bGxlZCIsInJlbmRlck9yZGVyIiwiYW5pbWF0aW9ucyIsImN1c3RvbURlcHRoTWF0ZXJpYWwiLCJjdXN0b21EaXN0YW5jZU1hdGVyaWFsIiwib25CZWZvcmVTaGFkb3ciLCJvbkFmdGVyU2hhZG93Iiwib25CZWZvcmVSZW5kZXIiLCJvbkFmdGVyUmVuZGVyIiwic2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlIiwic2V0Um90YXRpb25Gcm9tRXVsZXIiLCJzZXRSb3RhdGlvbkZyb21NYXRyaXgiLCJzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uIiwicm90YXRlT25BeGlzIiwicm90YXRlT25Xb3JsZEF4aXMiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJ0cmFuc2xhdGVPbkF4aXMiLCJkaXN0YW5jZSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsImxvY2FsVG9Xb3JsZCIsIndvcmxkVG9Mb2NhbCIsImlzQ2FtZXJhIiwiaXNMaWdodCIsImFyZ3VtZW50cyIsImVycm9yIiwicmVtb3ZlRnJvbVBhcmVudCIsInJlbW92ZSIsImF0dGFjaCIsImdldE9iamVjdEJ5SWQiLCJpZCIsImdldE9iamVjdEJ5UHJvcGVydHkiLCJnZXRPYmplY3RCeU5hbWUiLCJnZXRPYmplY3RzQnlQcm9wZXJ0eSIsInJlc3VsdCIsImdldFdvcmxkUG9zaXRpb24iLCJnZXRXb3JsZFF1YXRlcm5pb24iLCJnZXRXb3JsZFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJyYXljYXN0IiwidHJhdmVyc2UiLCJ0cmF2ZXJzZVZpc2libGUiLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiZm9yY2UiLCJ1cGRhdGVQYXJlbnRzIiwidXBkYXRlQ2hpbGRyZW4iLCJnZW9tZXRyaWVzIiwibWF0ZXJpYWxzIiwic2hhcGVzIiwic2tlbGV0b25zIiwibm9kZXMiLCJzZXJpYWxpemUiLCJsaWJyYXJ5IiwiZWxlbWVudCIsImluc3RhbmNlTWF0cml4IiwiaW5zdGFuY2VDb2xvciIsImlzQmF0Y2hlZE1lc2giLCJwZXJPYmplY3RGcnVzdHVtQ3VsbGVkIiwic29ydE9iamVjdHMiLCJkcmF3UmFuZ2VzIiwiX2RyYXdSYW5nZXMiLCJyZXNlcnZlZFJhbmdlcyIsIl9yZXNlcnZlZFJhbmdlcyIsInZpc2liaWxpdHkiLCJfdmlzaWJpbGl0eSIsImFjdGl2ZSIsIl9hY3RpdmUiLCJib3VuZHMiLCJfYm91bmRzIiwibWFwIiwiYm91bmQiLCJib3hJbml0aWFsaXplZCIsImJveE1pbiIsImJveE1heCIsInNwaGVyZUluaXRpYWxpemVkIiwic3BoZXJlUmFkaXVzIiwic3BoZXJlQ2VudGVyIiwibWF4SW5zdGFuY2VDb3VudCIsIl9tYXhJbnN0YW5jZUNvdW50IiwibWF4VmVydGV4Q291bnQiLCJfbWF4VmVydGV4Q291bnQiLCJtYXhJbmRleENvdW50IiwiX21heEluZGV4Q291bnQiLCJnZW9tZXRyeUluaXRpYWxpemVkIiwiX2dlb21ldHJ5SW5pdGlhbGl6ZWQiLCJnZW9tZXRyeUNvdW50IiwiX2dlb21ldHJ5Q291bnQiLCJtYXRyaWNlc1RleHR1cmUiLCJfbWF0cmljZXNUZXh0dXJlIiwiX2NvbG9yc1RleHR1cmUiLCJjb2xvcnNUZXh0dXJlIiwiYm91bmRpbmdTcGhlcmUiLCJpc1NjZW5lIiwiYmFja2dyb3VuZCIsImlzQ29sb3IiLCJlbnZpcm9ubWVudCIsImlzTGluZSIsImlzUG9pbnRzIiwicGFyYW1ldGVycyIsInNoYXBlIiwiaXNTa2lubmVkTWVzaCIsImJpbmRNb2RlIiwiYmluZE1hdHJpeCIsInNrZWxldG9uIiwibWF0ZXJpYWwiLCJ1dWlkcyIsImFuaW1hdGlvbiIsImV4dHJhY3RGcm9tQ2FjaGUiLCJjYWNoZSIsInZhbHVlcyIsImtleSIsInJlY3Vyc2l2ZSIsIl92MCQxIiwiX3YxJDMiLCJfdjIkMiIsIl92MyQyIiwiX3ZhYiIsIl92YWMiLCJfdmJjIiwiX3ZhcCIsIl92YnAiLCJfdmNwIiwiX3Y0MCIsIl92NDEiLCJfdjQyIiwiVHJpYW5nbGUiLCJnZXROb3JtYWwiLCJ0YXJnZXRMZW5ndGhTcSIsImdldEJhcnljb29yZCIsImRvdDAwIiwiZG90MDEiLCJkb3QwMiIsImRvdDExIiwiZG90MTIiLCJkZW5vbSIsImludkRlbm9tIiwiZ2V0SW50ZXJwb2xhdGlvbiIsInAzIiwidjMiLCJnZXRJbnRlcnBvbGF0ZWRBdHRyaWJ1dGUiLCJhdHRyIiwiaTEiLCJpMiIsImkzIiwiYmFyeWNvb3JkIiwiaXNGcm9udEZhY2luZyIsInNldEZyb21Qb2ludHNBbmRJbmRpY2VzIiwiaTAiLCJzZXRGcm9tQXR0cmlidXRlQW5kSW5kaWNlcyIsImdldEFyZWEiLCJnZXRNaWRwb2ludCIsImdldFBsYW5lIiwic2V0RnJvbUNvcGxhbmFyUG9pbnRzIiwiZDQiLCJ2YyIsImQ1IiwiZDYiLCJ2YiIsInZhIiwiX2NvbG9yS2V5d29yZHMiLCJfaHNsQSIsIl9oc2xCIiwiaHVlMnJnYiIsIkNvbG9yIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJzZXRSR0IiLCJoZXgiLCJzZXRIU0wiLCJoYW5kbGVBbHBoYSIsInN0cmluZyIsInBhcnNlRmxvYXQiLCJleGVjIiwiY29tcG9uZW50cyIsInBhcnNlSW50IiwiY2hhckF0Iiwic2V0Q29sb3JOYW1lIiwiY29weVNSR0JUb0xpbmVhciIsImNvcHlMaW5lYXJUb1NSR0IiLCJjb252ZXJ0U1JHQlRvTGluZWFyIiwiY29udmVydExpbmVhclRvU1JHQiIsImdldEhleCIsIl9jb2xvciIsImdldEhleFN0cmluZyIsInRvU3RyaW5nIiwiZ2V0SFNMIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImdldFJHQiIsImdldFN0eWxlIiwidG9GaXhlZCIsIm9mZnNldEhTTCIsImFkZENvbG9ycyIsImNvbG9yMSIsImNvbG9yMiIsImxlcnBDb2xvcnMiLCJsZXJwSFNMIiwiTkFNRVMiLCJfbWF0ZXJpYWxJZCIsIk1hdGVyaWFsIiwiaXNNYXRlcmlhbCIsImJsZW5kaW5nIiwic2lkZSIsInZlcnRleENvbG9ycyIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImFscGhhSGFzaCIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJibGVuZENvbG9yIiwiYmxlbmRBbHBoYSIsImRlcHRoRnVuYyIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJzdGVuY2lsV3JpdGVNYXNrIiwic3RlbmNpbEZ1bmMiLCJzdGVuY2lsUmVmIiwic3RlbmNpbEZ1bmNNYXNrIiwic3RlbmNpbEZhaWwiLCJzdGVuY2lsWkZhaWwiLCJzdGVuY2lsWlBhc3MiLCJzdGVuY2lsV3JpdGUiLCJjbGlwcGluZ1BsYW5lcyIsImNsaXBJbnRlcnNlY3Rpb24iLCJjbGlwU2hhZG93cyIsInNoYWRvd1NpZGUiLCJjb2xvcldyaXRlIiwicHJlY2lzaW9uIiwicG9seWdvbk9mZnNldCIsInBvbHlnb25PZmZzZXRGYWN0b3IiLCJwb2x5Z29uT2Zmc2V0VW5pdHMiLCJkaXRoZXJpbmciLCJhbHBoYVRvQ292ZXJhZ2UiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJmb3JjZVNpbmdsZVBhc3MiLCJhbGxvd092ZXJyaWRlIiwidG9uZU1hcHBlZCIsIl9hbHBoYVRlc3QiLCJhbHBoYVRlc3QiLCJvbkJlZm9yZUNvbXBpbGUiLCJjdXN0b21Qcm9ncmFtQ2FjaGVLZXkiLCJzZXRWYWx1ZXMiLCJuZXdWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsInNoZWVuIiwic2hlZW5Db2xvciIsInNoZWVuUm91Z2huZXNzIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsInNwZWN1bGFyIiwic3BlY3VsYXJJbnRlbnNpdHkiLCJzcGVjdWxhckNvbG9yIiwic2hpbmluZXNzIiwiY2xlYXJjb2F0IiwiY2xlYXJjb2F0Um91Z2huZXNzIiwiY2xlYXJjb2F0TWFwIiwiY2xlYXJjb2F0Um91Z2huZXNzTWFwIiwiY2xlYXJjb2F0Tm9ybWFsTWFwIiwiY2xlYXJjb2F0Tm9ybWFsU2NhbGUiLCJkaXNwZXJzaW9uIiwiaXJpZGVzY2VuY2UiLCJpcmlkZXNjZW5jZUlPUiIsImlyaWRlc2NlbmNlVGhpY2tuZXNzUmFuZ2UiLCJpcmlkZXNjZW5jZU1hcCIsImlyaWRlc2NlbmNlVGhpY2tuZXNzTWFwIiwiYW5pc290cm9weVJvdGF0aW9uIiwiYW5pc290cm9weU1hcCIsIm1hdGNhcCIsImFscGhhTWFwIiwibGlnaHRNYXAiLCJsaWdodE1hcEludGVuc2l0eSIsImFvTWFwIiwiYW9NYXBJbnRlbnNpdHkiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwibm9ybWFsTWFwIiwibm9ybWFsTWFwVHlwZSIsIm5vcm1hbFNjYWxlIiwiZGlzcGxhY2VtZW50TWFwIiwiZGlzcGxhY2VtZW50U2NhbGUiLCJkaXNwbGFjZW1lbnRCaWFzIiwicm91Z2huZXNzTWFwIiwibWV0YWxuZXNzTWFwIiwiZW1pc3NpdmVNYXAiLCJzcGVjdWxhck1hcCIsInNwZWN1bGFySW50ZW5zaXR5TWFwIiwic3BlY3VsYXJDb2xvck1hcCIsImVudk1hcCIsImNvbWJpbmUiLCJlbnZNYXBSb3RhdGlvbiIsImVudk1hcEludGVuc2l0eSIsInJlZmxlY3Rpdml0eSIsInJlZnJhY3Rpb25SYXRpbyIsImdyYWRpZW50TWFwIiwidHJhbnNtaXNzaW9uIiwidHJhbnNtaXNzaW9uTWFwIiwidGhpY2tuZXNzIiwidGhpY2tuZXNzTWFwIiwiYXR0ZW51YXRpb25EaXN0YW5jZSIsIkluZmluaXR5IiwiYXR0ZW51YXRpb25Db2xvciIsInNpemVBdHRlbnVhdGlvbiIsImxpbmV3aWR0aCIsImRhc2hTaXplIiwiZ2FwU2l6ZSIsIndpcmVmcmFtZSIsIndpcmVmcmFtZUxpbmV3aWR0aCIsIndpcmVmcmFtZUxpbmVjYXAiLCJ3aXJlZnJhbWVMaW5lam9pbiIsImZsYXRTaGFkaW5nIiwiZm9nIiwic3JjUGxhbmVzIiwiZHN0UGxhbmVzIiwibiIsIm9uQnVpbGQiLCJNZXNoQmFzaWNNYXRlcmlhbCIsImlzTWVzaEJhc2ljTWF0ZXJpYWwiLCJfdmVjdG9yJDkiLCJfdmVjdG9yMiQxIiwiX2lkJDIiLCJCdWZmZXJBdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsIm5vcm1hbGl6ZWQiLCJUeXBlRXJyb3IiLCJpc0J1ZmZlckF0dHJpYnV0ZSIsInVzYWdlIiwidXBkYXRlUmFuZ2VzIiwiZ3B1VHlwZSIsIm9uVXBsb2FkQ2FsbGJhY2siLCJzZXRVc2FnZSIsImFkZFVwZGF0ZVJhbmdlIiwic3RhcnQiLCJjbGVhclVwZGF0ZVJhbmdlcyIsImNvcHlBdCIsImluZGV4MSIsImluZGV4MiIsImNvcHlBcnJheSIsInNldFhZIiwic2V0WFlaIiwiY29tcG9uZW50Iiwic2V0WFlaVyIsIm9uVXBsb2FkIiwiVWludDE2QnVmZmVyQXR0cmlidXRlIiwiVWludDMyQnVmZmVyQXR0cmlidXRlIiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsIl9pZCQxIiwiX20xIiwiX29iaiIsIl9vZmZzZXQiLCJfYm94JDIiLCJfYm94TW9ycGhUYXJnZXRzIiwiX3ZlY3RvciQ4IiwiQnVmZmVyR2VvbWV0cnkiLCJpc0J1ZmZlckdlb21ldHJ5IiwiaW5kaXJlY3QiLCJhdHRyaWJ1dGVzIiwibW9ycGhBdHRyaWJ1dGVzIiwibW9ycGhUYXJnZXRzUmVsYXRpdmUiLCJncm91cHMiLCJkcmF3UmFuZ2UiLCJnZXRJbmRleCIsInNldEluZGV4Iiwic2V0SW5kaXJlY3QiLCJnZXRJbmRpcmVjdCIsInNldEF0dHJpYnV0ZSIsImRlbGV0ZUF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsImFkZEdyb3VwIiwibWF0ZXJpYWxJbmRleCIsImNsZWFyR3JvdXBzIiwic2V0RHJhd1JhbmdlIiwidGFuZ2VudCIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsIm1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uIiwiaXNHTEJ1ZmZlckF0dHJpYnV0ZSIsIm1vcnBoQXR0cmlidXRlIiwiamwiLCJjb21wdXRlVGFuZ2VudHMiLCJub3JtYWxBdHRyaWJ1dGUiLCJ1dkF0dHJpYnV0ZSIsInRhbmdlbnRBdHRyaWJ1dGUiLCJ0YW4xIiwidGFuMiIsInZBIiwidkIiLCJ2QyIsInV2QSIsInV2QiIsInV2QyIsInNkaXIiLCJ0ZGlyIiwiaGFuZGxlVHJpYW5nbGUiLCJpc0Zpbml0ZSIsImdyb3VwIiwidG1wMiIsIm4yIiwiaGFuZGxlVmVydGV4IiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJwQSIsInBCIiwicEMiLCJuQSIsIm5CIiwibkMiLCJjYiIsImFiIiwibm9ybWFsaXplTm9ybWFscyIsIm5vcm1hbHMiLCJ0b05vbkluZGV4ZWQiLCJjb252ZXJ0QnVmZmVyQXR0cmlidXRlIiwiaW5kaWNlcyIsImFycmF5MiIsImlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJzdHJpZGUiLCJnZW9tZXRyeTIiLCJuZXdBdHRyaWJ1dGUiLCJtb3JwaEFycmF5IiwiaGFzTW9ycGhBdHRyaWJ1dGVzIiwiYXR0cmlidXRlQXJyYXkiLCJfaW52ZXJzZU1hdHJpeCQzIiwiX3JheSQzIiwiX3NwaGVyZSQ2IiwiX3NwaGVyZUhpdEF0IiwiX3ZBJDEiLCJfdkIkMSIsIl92QyQxIiwiX3RlbXBBIiwiX21vcnBoQSIsIl9pbnRlcnNlY3Rpb25Qb2ludCIsIl9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkIiwiTWVzaCIsIm1vcnBoVGFyZ2V0RGljdGlvbmFyeSIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsInVwZGF0ZU1vcnBoVGFyZ2V0cyIsIm1sIiwiU3RyaW5nIiwibW9ycGhQb3NpdGlvbiIsIm1vcnBoSW5mbHVlbmNlcyIsImluZmx1ZW5jZSIsInJheWNhc3RlciIsImludGVyc2VjdHMiLCJfY29tcHV0ZUludGVyc2VjdGlvbnMiLCJyYXlMb2NhbFNwYWNlIiwiaW50ZXJzZWN0aW9uIiwidXYxIiwiZ3JvdXBNYXRlcmlhbCIsImNoZWNrR2VvbWV0cnlJbnRlcnNlY3Rpb24iLCJmYWNlSW5kZXgiLCJmYWNlIiwiY2hlY2tJbnRlcnNlY3Rpb24kMSIsIkJveEdlb21ldHJ5Iiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsInNjb3BlIiwidmVydGljZXMiLCJ1dnMiLCJudW1iZXJPZlZlcnRpY2VzIiwiZ3JvdXBTdGFydCIsImJ1aWxkUGxhbmUiLCJ1ZGlyIiwidmRpciIsImdyaWRYIiwiZ3JpZFkiLCJzZWdtZW50V2lkdGgiLCJzZWdtZW50SGVpZ2h0Iiwid2lkdGhIYWxmIiwiaGVpZ2h0SGFsZiIsImRlcHRoSGFsZiIsImdyaWRYMSIsImdyaWRZMSIsInZlcnRleENvdW50ZXIiLCJncm91cENvdW50IiwiaXkiLCJpeCIsImZyb21KU09OIiwiY2xvbmVVbmlmb3JtcyIsInByb3BlcnR5IiwibWVyZ2VVbmlmb3JtcyIsInVuaWZvcm1zIiwibWVyZ2VkIiwiZ2V0VW5saXRVbmlmb3JtQ29sb3JTcGFjZSIsInJlbmRlcmVyIiwiY3VycmVudFJlbmRlclRhcmdldCIsImdldFJlbmRlclRhcmdldCIsIm91dHB1dENvbG9yU3BhY2UiLCJpc1hSUmVuZGVyVGFyZ2V0IiwiVW5pZm9ybXNVdGlscyIsIm1lcmdlIiwiU2hhZGVyTWF0ZXJpYWwiLCJpc1NoYWRlck1hdGVyaWFsIiwiZGVmaW5lcyIsInVuaWZvcm1zR3JvdXBzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJsaWdodHMiLCJjbGlwcGluZyIsImV4dGVuc2lvbnMiLCJjbGlwQ3VsbERpc3RhbmNlIiwibXVsdGlEcmF3IiwiZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsImluZGV4MEF0dHJpYnV0ZU5hbWUiLCJ1bmlmb3Jtc05lZWRVcGRhdGUiLCJnbHNsVmVyc2lvbiIsImNsb25lVW5pZm9ybXNHcm91cHMiLCJDYW1lcmEiLCJfdjMkMSIsIl9taW5UYXJnZXQiLCJfbWF4VGFyZ2V0IiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJmb3YiLCJhc3BlY3QiLCJpc1BlcnNwZWN0aXZlQ2FtZXJhIiwiem9vbSIsImZvY3VzIiwidmlldyIsImZpbG1HYXVnZSIsImZpbG1PZmZzZXQiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4Iiwic2V0Rm9jYWxMZW5ndGgiLCJmb2NhbExlbmd0aCIsInZFeHRlbnRTbG9wZSIsImdldEZpbG1IZWlnaHQiLCJhdGFuIiwiZ2V0Rm9jYWxMZW5ndGgiLCJ0YW4iLCJnZXRFZmZlY3RpdmVGT1YiLCJnZXRGaWxtV2lkdGgiLCJnZXRWaWV3Qm91bmRzIiwibWluVGFyZ2V0IiwibWF4VGFyZ2V0IiwiZ2V0Vmlld1NpemUiLCJzZXRWaWV3T2Zmc2V0IiwiZnVsbFdpZHRoIiwiZnVsbEhlaWdodCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiY2xlYXJWaWV3T2Zmc2V0Iiwic2tldyIsIkN1YmVDYW1lcmEiLCJhY3RpdmVNaXBtYXBMZXZlbCIsImNhbWVyYVBYIiwiY2FtZXJhTlgiLCJjYW1lcmFQWSIsImNhbWVyYU5ZIiwiY2FtZXJhUFoiLCJjYW1lcmFOWiIsInVwZGF0ZUNvb3JkaW5hdGVTeXN0ZW0iLCJjYW1lcmFzIiwiY29uY2F0Iiwic2NlbmUiLCJjdXJyZW50QWN0aXZlQ3ViZUZhY2UiLCJnZXRBY3RpdmVDdWJlRmFjZSIsImN1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCIsImdldEFjdGl2ZU1pcG1hcExldmVsIiwiY3VycmVudFhyRW5hYmxlZCIsInhyIiwic2V0UmVuZGVyVGFyZ2V0IiwicmVuZGVyIiwiQ3ViZVRleHR1cmUiLCJpc0N1YmVUZXh0dXJlIiwiV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IiwiaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSIsInNoYWRlciIsInRFcXVpcmVjdCIsIm1lc2giLCJjdXJyZW50TWluRmlsdGVyIiwic3RlbmNpbCIsIkdyb3VwIiwiaXNHcm91cCIsIl9tb3ZlRXZlbnQiLCJXZWJYUkNvbnRyb2xsZXIiLCJfdGFyZ2V0UmF5IiwiX2dyaXAiLCJfaGFuZCIsImdldEhhbmRTcGFjZSIsImpvaW50cyIsImlucHV0U3RhdGUiLCJwaW5jaGluZyIsImdldFRhcmdldFJheVNwYWNlIiwiaGFzTGluZWFyVmVsb2NpdHkiLCJsaW5lYXJWZWxvY2l0eSIsImhhc0FuZ3VsYXJWZWxvY2l0eSIsImFuZ3VsYXJWZWxvY2l0eSIsImdldEdyaXBTcGFjZSIsImNvbm5lY3QiLCJpbnB1dFNvdXJjZSIsImhhbmQiLCJpbnB1dGpvaW50IiwiX2dldEhhbmRKb2ludCIsImRpc2Nvbm5lY3QiLCJmcmFtZSIsInJlZmVyZW5jZVNwYWNlIiwiaW5wdXRQb3NlIiwiZ3JpcFBvc2UiLCJoYW5kUG9zZSIsInRhcmdldFJheSIsImdyaXAiLCJzZXNzaW9uIiwidmlzaWJpbGl0eVN0YXRlIiwiam9pbnRQb3NlIiwiZ2V0Sm9pbnRQb3NlIiwiam9pbnQiLCJ0cmFuc2Zvcm0iLCJqb2ludFJhZGl1cyIsImluZGV4VGlwIiwidGh1bWJUaXAiLCJkaXN0YW5jZVRvUGluY2giLCJ0aHJlc2hvbGQiLCJoYW5kZWRuZXNzIiwiZ3JpcFNwYWNlIiwiZ2V0UG9zZSIsInRhcmdldFJheVNwYWNlIiwiam9pbnROYW1lIiwiU2NlbmUiLCJiYWNrZ3JvdW5kQmx1cnJpbmVzcyIsImJhY2tncm91bmRJbnRlbnNpdHkiLCJiYWNrZ3JvdW5kUm90YXRpb24iLCJlbnZpcm9ubWVudEludGVuc2l0eSIsImVudmlyb25tZW50Um90YXRpb24iLCJvdmVycmlkZU1hdGVyaWFsIiwiX19USFJFRV9ERVZUT09MU19fIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJfdmVjdG9yMSIsIl92ZWN0b3IyIiwiX25vcm1hbE1hdHJpeCIsIlBsYW5lIiwiaXNQbGFuZSIsInNldENvbXBvbmVudHMiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsImludmVyc2VOb3JtYWxMZW5ndGgiLCJkaXN0YW5jZVRvU3BoZXJlIiwicHJvamVjdFBvaW50IiwiaW50ZXJzZWN0TGluZSIsImxpbmUiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJlbmQiLCJjb3BsYW5hclBvaW50Iiwib3B0aW9uYWxOb3JtYWxNYXRyaXgiLCJyZWZlcmVuY2VQb2ludCIsIl9zcGhlcmUkMyIsIl92ZWN0b3IkNiIsIkZydXN0dW0iLCJwNCIsInA1IiwicGxhbmVzIiwiZnJ1c3R1bSIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImludGVyc2VjdHNTcHJpdGUiLCJzcHJpdGUiLCJuZWdSYWRpdXMiLCJEZXB0aFRleHR1cmUiLCJpc0RlcHRoVGV4dHVyZSIsImNvbXBhcmVGdW5jdGlvbiIsIlBsYW5lR2VvbWV0cnkiLCJ3aWR0aF9oYWxmIiwiaGVpZ2h0X2hhbGYiLCJzZWdtZW50X3dpZHRoIiwic2VnbWVudF9oZWlnaHQiLCJTcGhlcmVHZW9tZXRyeSIsInBoaVN0YXJ0IiwicGhpTGVuZ3RoIiwidGhldGFTdGFydCIsInRoZXRhTGVuZ3RoIiwidGhldGFFbmQiLCJncmlkIiwidmVydGV4IiwidmVydGljZXNSb3ciLCJ1T2Zmc2V0IiwiTWVzaFBob25nTWF0ZXJpYWwiLCJpc01lc2hQaG9uZ01hdGVyaWFsIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJpc01lc2hEZXB0aE1hdGVyaWFsIiwiZGVwdGhQYWNraW5nIiwiTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJpc01lc2hEaXN0YW5jZU1hdGVyaWFsIiwiY29udmVydEFycmF5IiwiQllURVNfUEVSX0VMRU1FTlQiLCJJbnRlcnBvbGFudCIsInBhcmFtZXRlclBvc2l0aW9ucyIsInNhbXBsZVZhbHVlcyIsInNhbXBsZVNpemUiLCJyZXN1bHRCdWZmZXIiLCJfY2FjaGVkSW5kZXgiLCJ2YWx1ZVNpemUiLCJzZXR0aW5ncyIsIkRlZmF1bHRTZXR0aW5nc18iLCJldmFsdWF0ZSIsInBwIiwidmFsaWRhdGVfaW50ZXJ2YWwiLCJzZWVrIiwibGluZWFyX3NjYW4iLCJmb3J3YXJkX3NjYW4iLCJnaXZlVXBBdCIsImNvcHlTYW1wbGVWYWx1ZV8iLCJ0MWdsb2JhbCIsIm1pZCIsImludGVydmFsQ2hhbmdlZF8iLCJpbnRlcnBvbGF0ZV8iLCJnZXRTZXR0aW5nc18iLCJDdWJpY0ludGVycG9sYW50IiwiX3dlaWdodFByZXYiLCJfb2Zmc2V0UHJldiIsIl93ZWlnaHROZXh0IiwiX29mZnNldE5leHQiLCJlbmRpbmdTdGFydCIsImVuZGluZ0VuZCIsImlQcmV2IiwiaU5leHQiLCJ0UHJldiIsInROZXh0IiwiaGFsZkR0IiwibzEiLCJvMCIsIm9QIiwib04iLCJ3UCIsIndOIiwicHBwIiwic1AiLCJzTiIsIkxpbmVhckludGVycG9sYW50Iiwib2Zmc2V0MSIsIm9mZnNldDAiLCJ3ZWlnaHQxIiwid2VpZ2h0MCIsIkRpc2NyZXRlSW50ZXJwb2xhbnQiLCJLZXlmcmFtZVRyYWNrIiwidGltZXMiLCJpbnRlcnBvbGF0aW9uIiwiVGltZUJ1ZmZlclR5cGUiLCJWYWx1ZUJ1ZmZlclR5cGUiLCJzZXRJbnRlcnBvbGF0aW9uIiwiRGVmYXVsdEludGVycG9sYXRpb24iLCJ0cmFjayIsInRyYWNrVHlwZSIsImpzb24iLCJWYWx1ZVR5cGVOYW1lIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUiLCJnZXRWYWx1ZVNpemUiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGgiLCJmYWN0b3J5TWV0aG9kIiwiY3JlYXRlSW50ZXJwb2xhbnQiLCJzaGlmdCIsInRpbWVPZmZzZXQiLCJ0aW1lU2NhbGUiLCJ0cmltIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsIm5LZXlzIiwidG8iLCJ2YWxpZGF0ZSIsInZhbGlkIiwicHJldlRpbWUiLCJjdXJyVGltZSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJvcHRpbWl6ZSIsInNtb290aEludGVycG9sYXRpb24iLCJsYXN0SW5kZXgiLCJ3cml0ZUluZGV4Iiwia2VlcCIsInRpbWUiLCJvZmZzZXRQIiwib2Zmc2V0TiIsInJlYWRPZmZzZXQiLCJ3cml0ZU9mZnNldCIsIlR5cGVkS2V5ZnJhbWVUcmFjayIsIkJvb2xlYW5LZXlmcmFtZVRyYWNrIiwiUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwiQ2FjaGUiLCJmaWxlcyIsImZpbGUiLCJnZXQiLCJMb2FkaW5nTWFuYWdlciIsIm9uTG9hZCIsIm9uUHJvZ3Jlc3MiLCJvbkVycm9yIiwidXJsTW9kaWZpZXIiLCJpc0xvYWRpbmciLCJpdGVtc0xvYWRlZCIsIml0ZW1zVG90YWwiLCJoYW5kbGVycyIsIm9uU3RhcnQiLCJpdGVtU3RhcnQiLCJpdGVtRW5kIiwiaXRlbUVycm9yIiwicmVzb2x2ZVVSTCIsInNldFVSTE1vZGlmaWVyIiwiYWRkSGFuZGxlciIsInJlZ2V4IiwibG9hZGVyIiwicmVtb3ZlSGFuZGxlciIsImdldEhhbmRsZXIiLCJnbG9iYWwiLCJEZWZhdWx0TG9hZGluZ01hbmFnZXIiLCJMb2FkZXIiLCJtYW5hZ2VyIiwiY3Jvc3NPcmlnaW4iLCJ3aXRoQ3JlZGVudGlhbHMiLCJwYXRoIiwicmVzb3VyY2VQYXRoIiwicmVxdWVzdEhlYWRlciIsImxvYWQiLCJsb2FkQXN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNldENyb3NzT3JpZ2luIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0UGF0aCIsInNldFJlc291cmNlUGF0aCIsInNldFJlcXVlc3RIZWFkZXIiLCJERUZBVUxUX01BVEVSSUFMX05BTUUiLCJJbWFnZUxvYWRlciIsImNhY2hlZCIsInNldFRpbWVvdXQiLCJvbkltYWdlTG9hZCIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwib25JbWFnZUVycm9yIiwiVGV4dHVyZUxvYWRlciIsIkxpZ2h0IiwiaW50ZW5zaXR5IiwiZ3JvdW5kQ29sb3IiLCJkZWNheSIsInBlbnVtYnJhIiwic2hhZG93IiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwiaXNPcnRob2dyYXBoaWNDYW1lcmEiLCJzY2FsZVciLCJzY2FsZUgiLCJBbWJpZW50TGlnaHQiLCJpc0FtYmllbnRMaWdodCIsIkFycmF5Q2FtZXJhIiwiaXNBcnJheUNhbWVyYSIsIl9SRVNFUlZFRF9DSEFSU19SRSIsIl9yZXNlcnZlZFJlIiwiUmVnRXhwIiwiX3dvcmRDaGFyIiwiX3dvcmRDaGFyT3JEb3QiLCJyZXBsYWNlIiwiX3RyYWNrUmUiLCJfc3VwcG9ydGVkT2JqZWN0TmFtZXMiLCJQcm9wZXJ0eUJpbmRpbmciLCJyb290Tm9kZSIsInBhcnNlZFBhdGgiLCJwYXJzZVRyYWNrTmFtZSIsIm5vZGUiLCJmaW5kTm9kZSIsIm5vZGVOYW1lIiwiZ2V0VmFsdWUiLCJfZ2V0VmFsdWVfdW5ib3VuZCIsInNldFZhbHVlIiwiX3NldFZhbHVlX3VuYm91bmQiLCJjcmVhdGUiLCJyb290IiwiaXNBbmltYXRpb25PYmplY3RHcm91cCIsIkNvbXBvc2l0ZSIsInNhbml0aXplTm9kZU5hbWUiLCJ0cmFja05hbWUiLCJtYXRjaGVzIiwicmVzdWx0cyIsIm9iamVjdE5hbWUiLCJvYmplY3RJbmRleCIsInByb3BlcnR5TmFtZSIsInByb3BlcnR5SW5kZXgiLCJsYXN0RG90IiwibGFzdEluZGV4T2YiLCJzdWJzdHJpbmciLCJib25lIiwiZ2V0Qm9uZUJ5TmFtZSIsInNlYXJjaE5vZGVTdWJ0cmVlIiwiY2hpbGROb2RlIiwic3ViVHJlZU5vZGUiLCJfZ2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfc2V0VmFsdWVfdW5hdmFpbGFibGUiLCJfZ2V0VmFsdWVfZGlyZWN0IiwiYnVmZmVyIiwidGFyZ2V0T2JqZWN0IiwiX2dldFZhbHVlX2FycmF5IiwicmVzb2x2ZWRQcm9wZXJ0eSIsIl9nZXRWYWx1ZV9hcnJheUVsZW1lbnQiLCJfZ2V0VmFsdWVfdG9BcnJheSIsIl9zZXRWYWx1ZV9kaXJlY3QiLCJfc2V0VmFsdWVfZGlyZWN0X3NldE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2RpcmVjdF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5IiwiZGVzdCIsIl9zZXRWYWx1ZV9hcnJheV9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlIiwiX3NldFZhbHVlX2FycmF5RWxlbWVudCIsIl9zZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJfc2V0VmFsdWVfZnJvbUFycmF5IiwiX3NldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZSIsIl9zZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInRhcmdldEFycmF5IiwiYmluZCIsInNvdXJjZUFycmF5IiwiYm9uZXMiLCJub2RlUHJvcGVydHkiLCJ2ZXJzaW9uaW5nIiwiVmVyc2lvbmluZyIsIk5vbmUiLCJOZWVkc1VwZGF0ZSIsIk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJiaW5kaW5nVHlwZSIsIkJpbmRpbmdUeXBlIiwiRGlyZWN0IiwiQXJyYXlFbGVtZW50IiwiSGFzRnJvbVRvQXJyYXkiLCJFbnRpcmVBcnJheSIsIkdldHRlckJ5QmluZGluZ1R5cGUiLCJTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZyIsInVuYmluZCIsInRhcmdldEdyb3VwIiwib3B0aW9uYWxQYXJzZWRQYXRoIiwiX3RhcmdldEdyb3VwIiwiX2JpbmRpbmdzIiwic3Vic2NyaWJlXyIsImZpcnN0VmFsaWRJbmRleCIsIm5DYWNoZWRPYmplY3RzXyIsImJpbmRpbmciLCJiaW5kaW5ncyIsIlNwaGVyaWNhbCIsIm90aGVyIiwibWFrZVNhZmUiLCJFUFMiLCJzZXRGcm9tQ2FydGVzaWFuQ29vcmRzIiwiQ29udHJvbHMiLCJkb21FbGVtZW50Iiwic3RhdGUiLCJtb3VzZUJ1dHRvbnMiLCJMRUZUIiwiTUlERExFIiwiUklHSFQiLCJ0b3VjaGVzIiwiT05FIiwiVFdPIiwiZ2V0Qnl0ZUxlbmd0aCIsInR5cGVCeXRlTGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImdldFRleHR1cmVUeXBlQnl0ZUxlbmd0aCIsIldlYkdMQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJhbmltYXRpb25Mb29wIiwicmVxdWVzdElkIiwib25BbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0b3AiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNldEFuaW1hdGlvbkxvb3AiLCJzZXRDb250ZXh0IiwiV2ViR0xBdHRyaWJ1dGVzIiwiZ2wiLCJidWZmZXJzIiwiV2Vha01hcCIsImRlbGV0ZUJ1ZmZlciIsImRlbGV0ZSIsImJ1ZmZlclR5cGUiLCJieXRlc1BlckVsZW1lbnQiLCJlbGVtZW50U2l6ZSIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiRkxPQVQiLCJpc0Zsb2F0MTZCdWZmZXJBdHRyaWJ1dGUiLCJIQUxGX0ZMT0FUIiwiVU5TSUdORURfU0hPUlQiLCJTSE9SVCIsIlVOU0lHTkVEX0lOVCIsIklOVCIsIkJZVEUiLCJVTlNJR05FRF9CWVRFIiwiYnVmZmVyU3ViRGF0YSIsInNvcnQiLCJtZXJnZUluZGV4IiwicHJldmlvdXNSYW5nZSIsInJhbmdlIiwidXBkYXRlQnVmZmVyIiwicmV2aXNpb24iLCJ3aW5kb3ciLCJfX1RIUkVFX18iLCJTaGFkZXJDaHVuayIsImFscGhhaGFzaF9mcmFnbWVudCIsImFscGhhaGFzaF9wYXJzX2ZyYWdtZW50IiwiYWxwaGFtYXBfZnJhZ21lbnQiLCJhbHBoYW1hcF9wYXJzX2ZyYWdtZW50IiwiYWxwaGF0ZXN0X2ZyYWdtZW50IiwiYWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQiLCJhb21hcF9mcmFnbWVudCIsImFvbWFwX3BhcnNfZnJhZ21lbnQiLCJiYXRjaGluZ19wYXJzX3ZlcnRleCIsImJhdGNoaW5nX3ZlcnRleCIsImJlZ2luX3ZlcnRleCIsImJlZ2lubm9ybWFsX3ZlcnRleCIsImJzZGZzIiwiaXJpZGVzY2VuY2VfZnJhZ21lbnQiLCJidW1wbWFwX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCIsImNsaXBwaW5nX3BsYW5lc192ZXJ0ZXgiLCJjb2xvcl9mcmFnbWVudCIsImNvbG9yX3BhcnNfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX3ZlcnRleCIsImNvbG9yX3ZlcnRleCIsImNvbW1vbiIsImN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCIsImRlZmF1bHRub3JtYWxfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4IiwiZGlzcGxhY2VtZW50bWFwX3ZlcnRleCIsImVtaXNzaXZlbWFwX2ZyYWdtZW50IiwiZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCIsImNvbG9yc3BhY2VfZnJhZ21lbnQiLCJjb2xvcnNwYWNlX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfZnJhZ21lbnQiLCJlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfcGFyc19mcmFnbWVudCIsImVudm1hcF9wYXJzX3ZlcnRleCIsImVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3ZlcnRleCIsImZvZ192ZXJ0ZXgiLCJmb2dfcGFyc192ZXJ0ZXgiLCJmb2dfZnJhZ21lbnQiLCJmb2dfcGFyc19mcmFnbWVudCIsImdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQiLCJsaWdodG1hcF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2xhbWJlcnRfZnJhZ21lbnQiLCJsaWdodHNfbGFtYmVydF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX3BhcnNfYmVnaW4iLCJsaWdodHNfdG9vbl9mcmFnbWVudCIsImxpZ2h0c190b29uX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGhvbmdfZnJhZ21lbnQiLCJsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCIsImxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCIsImxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50IiwibGlnaHRzX2ZyYWdtZW50X2JlZ2luIiwibGlnaHRzX2ZyYWdtZW50X21hcHMiLCJsaWdodHNfZnJhZ21lbnRfZW5kIiwibG9nZGVwdGhidWZfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgiLCJsb2dkZXB0aGJ1Zl92ZXJ0ZXgiLCJtYXBfZnJhZ21lbnQiLCJtYXBfcGFyc19mcmFnbWVudCIsIm1hcF9wYXJ0aWNsZV9mcmFnbWVudCIsIm1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50IiwibWV0YWxuZXNzbWFwX2ZyYWdtZW50IiwibWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQiLCJtb3JwaGluc3RhbmNlX3ZlcnRleCIsIm1vcnBoY29sb3JfdmVydGV4IiwibW9ycGhub3JtYWxfdmVydGV4IiwibW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgiLCJtb3JwaHRhcmdldF92ZXJ0ZXgiLCJub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJub3JtYWxfZnJhZ21lbnRfbWFwcyIsIm5vcm1hbF9wYXJzX2ZyYWdtZW50Iiwibm9ybWFsX3BhcnNfdmVydGV4Iiwibm9ybWFsX3ZlcnRleCIsIm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbiIsImNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcyIsImNsZWFyY29hdF9wYXJzX2ZyYWdtZW50IiwiaXJpZGVzY2VuY2VfcGFyc19mcmFnbWVudCIsIm9wYXF1ZV9mcmFnbWVudCIsInBhY2tpbmciLCJwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50IiwicHJvamVjdF92ZXJ0ZXgiLCJkaXRoZXJpbmdfZnJhZ21lbnQiLCJkaXRoZXJpbmdfcGFyc19mcmFnbWVudCIsInJvdWdobmVzc21hcF9mcmFnbWVudCIsInJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc192ZXJ0ZXgiLCJzaGFkb3dtYXBfdmVydGV4Iiwic2hhZG93bWFza19wYXJzX2ZyYWdtZW50Iiwic2tpbmJhc2VfdmVydGV4Iiwic2tpbm5pbmdfcGFyc192ZXJ0ZXgiLCJza2lubmluZ192ZXJ0ZXgiLCJza2lubm9ybWFsX3ZlcnRleCIsInNwZWN1bGFybWFwX2ZyYWdtZW50Iiwic3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCIsInRvbmVtYXBwaW5nX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCIsInRyYW5zbWlzc2lvbl9mcmFnbWVudCIsInRyYW5zbWlzc2lvbl9wYXJzX2ZyYWdtZW50IiwidXZfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfdmVydGV4IiwidXZfdmVydGV4Iiwid29ybGRwb3NfdmVydGV4IiwiYmFja2dyb3VuZF92ZXJ0IiwiYmFja2dyb3VuZF9mcmFnIiwiYmFja2dyb3VuZEN1YmVfdmVydCIsImJhY2tncm91bmRDdWJlX2ZyYWciLCJjdWJlX3ZlcnQiLCJjdWJlX2ZyYWciLCJkZXB0aF92ZXJ0IiwiZGVwdGhfZnJhZyIsImRpc3RhbmNlUkdCQV92ZXJ0IiwiZGlzdGFuY2VSR0JBX2ZyYWciLCJlcXVpcmVjdF92ZXJ0IiwiZXF1aXJlY3RfZnJhZyIsImxpbmVkYXNoZWRfdmVydCIsImxpbmVkYXNoZWRfZnJhZyIsIm1lc2hiYXNpY192ZXJ0IiwibWVzaGJhc2ljX2ZyYWciLCJtZXNobGFtYmVydF92ZXJ0IiwibWVzaGxhbWJlcnRfZnJhZyIsIm1lc2htYXRjYXBfdmVydCIsIm1lc2htYXRjYXBfZnJhZyIsIm1lc2hub3JtYWxfdmVydCIsIm1lc2hub3JtYWxfZnJhZyIsIm1lc2hwaG9uZ192ZXJ0IiwibWVzaHBob25nX2ZyYWciLCJtZXNocGh5c2ljYWxfdmVydCIsIm1lc2hwaHlzaWNhbF9mcmFnIiwibWVzaHRvb25fdmVydCIsIm1lc2h0b29uX2ZyYWciLCJwb2ludHNfdmVydCIsInBvaW50c19mcmFnIiwic2hhZG93X3ZlcnQiLCJzaGFkb3dfZnJhZyIsInNwcml0ZV92ZXJ0Iiwic3ByaXRlX2ZyYWciLCJVbmlmb3Jtc0xpYiIsImRpZmZ1c2UiLCJtYXBUcmFuc2Zvcm0iLCJhbHBoYU1hcFRyYW5zZm9ybSIsInNwZWN1bGFybWFwIiwic3BlY3VsYXJNYXBUcmFuc2Zvcm0iLCJlbnZtYXAiLCJmbGlwRW52TWFwIiwiaW9yIiwiYW9tYXAiLCJhb01hcFRyYW5zZm9ybSIsImxpZ2h0bWFwIiwibGlnaHRNYXBUcmFuc2Zvcm0iLCJidW1wbWFwIiwiYnVtcE1hcFRyYW5zZm9ybSIsIm5vcm1hbG1hcCIsIm5vcm1hbE1hcFRyYW5zZm9ybSIsImRpc3BsYWNlbWVudG1hcCIsImRpc3BsYWNlbWVudE1hcFRyYW5zZm9ybSIsImVtaXNzaXZlbWFwIiwiZW1pc3NpdmVNYXBUcmFuc2Zvcm0iLCJtZXRhbG5lc3NtYXAiLCJtZXRhbG5lc3NNYXBUcmFuc2Zvcm0iLCJyb3VnaG5lc3NtYXAiLCJyb3VnaG5lc3NNYXBUcmFuc2Zvcm0iLCJncmFkaWVudG1hcCIsImZvZ0RlbnNpdHkiLCJmb2dOZWFyIiwiZm9nRmFyIiwiZm9nQ29sb3IiLCJhbWJpZW50TGlnaHRDb2xvciIsImxpZ2h0UHJvYmUiLCJkaXJlY3Rpb25hbExpZ2h0cyIsInByb3BlcnRpZXMiLCJkaXJlY3Rpb25hbExpZ2h0U2hhZG93cyIsInNoYWRvd0ludGVuc2l0eSIsInNoYWRvd0JpYXMiLCJzaGFkb3dOb3JtYWxCaWFzIiwic2hhZG93UmFkaXVzIiwic2hhZG93TWFwU2l6ZSIsImRpcmVjdGlvbmFsU2hhZG93TWFwIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgiLCJzcG90TGlnaHRzIiwiY29uZUNvcyIsInBlbnVtYnJhQ29zIiwic3BvdExpZ2h0U2hhZG93cyIsInNwb3RMaWdodE1hcCIsInNwb3RTaGFkb3dNYXAiLCJzcG90TGlnaHRNYXRyaXgiLCJwb2ludExpZ2h0cyIsInBvaW50TGlnaHRTaGFkb3dzIiwic2hhZG93Q2FtZXJhTmVhciIsInNoYWRvd0NhbWVyYUZhciIsInBvaW50U2hhZG93TWFwIiwicG9pbnRTaGFkb3dNYXRyaXgiLCJoZW1pc3BoZXJlTGlnaHRzIiwic2t5Q29sb3IiLCJyZWN0QXJlYUxpZ2h0cyIsImx0Y18xIiwibHRjXzIiLCJ1dlRyYW5zZm9ybSIsIlNoYWRlckxpYiIsImJhc2ljIiwibGFtYmVydCIsInBob25nIiwic3RhbmRhcmQiLCJ0b29uIiwiZGFzaGVkIiwidG90YWxTaXplIiwidDJEIiwiYmFja2dyb3VuZEN1YmUiLCJjdWJlIiwidEN1YmUiLCJ0RmxpcCIsImVxdWlyZWN0IiwiZGlzdGFuY2VSR0JBIiwicmVmZXJlbmNlUG9zaXRpb24iLCJuZWFyRGlzdGFuY2UiLCJmYXJEaXN0YW5jZSIsInBoeXNpY2FsIiwiY2xlYXJjb2F0TWFwVHJhbnNmb3JtIiwiY2xlYXJjb2F0Tm9ybWFsTWFwVHJhbnNmb3JtIiwiY2xlYXJjb2F0Um91Z2huZXNzTWFwVHJhbnNmb3JtIiwiaXJpZGVzY2VuY2VNYXBUcmFuc2Zvcm0iLCJpcmlkZXNjZW5jZVRoaWNrbmVzc01pbmltdW0iLCJpcmlkZXNjZW5jZVRoaWNrbmVzc01heGltdW0iLCJpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFRyYW5zZm9ybSIsInNoZWVuQ29sb3JNYXAiLCJzaGVlbkNvbG9yTWFwVHJhbnNmb3JtIiwic2hlZW5Sb3VnaG5lc3NNYXAiLCJzaGVlblJvdWdobmVzc01hcFRyYW5zZm9ybSIsInRyYW5zbWlzc2lvbk1hcFRyYW5zZm9ybSIsInRyYW5zbWlzc2lvblNhbXBsZXJTaXplIiwidHJhbnNtaXNzaW9uU2FtcGxlck1hcCIsInRoaWNrbmVzc01hcFRyYW5zZm9ybSIsInNwZWN1bGFyQ29sb3JNYXBUcmFuc2Zvcm0iLCJzcGVjdWxhckludGVuc2l0eU1hcFRyYW5zZm9ybSIsImFuaXNvdHJvcHlWZWN0b3IiLCJhbmlzb3Ryb3B5TWFwVHJhbnNmb3JtIiwiX3JnYiIsIl9lMSQxIiwiV2ViR0xCYWNrZ3JvdW5kIiwiY3ViZW1hcHMiLCJjdWJldXZtYXBzIiwib2JqZWN0cyIsImNsZWFyQ29sb3IiLCJwbGFuZU1lc2giLCJib3hNZXNoIiwiY2xlYXJBbHBoYSIsImN1cnJlbnRCYWNrZ3JvdW5kIiwiY3VycmVudEJhY2tncm91bmRWZXJzaW9uIiwiY3VycmVudFRvbmVtYXBwaW5nIiwiZ2V0QmFja2dyb3VuZCIsInNldENsZWFyIiwiZ2V0Q2xlYXJDb2xvciIsInNldENsZWFyQ29sb3IiLCJnZXRDbGVhckFscGhhIiwic2V0Q2xlYXJBbHBoYSIsImZvcmNlQ2xlYXIiLCJlbnZpcm9ubWVudEJsZW5kTW9kZSIsImdldEVudmlyb25tZW50QmxlbmRNb2RlIiwiYXV0b0NsZWFyIiwic2V0VGVzdCIsInNldE1hc2siLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsImFkZFRvUmVuZGVyTGlzdCIsInJlbmRlckxpc3QiLCJ0b25lTWFwcGluZyIsInVuc2hpZnQiLCJXZWJHTEJpbmRpbmdTdGF0ZXMiLCJtYXhWZXJ0ZXhBdHRyaWJ1dGVzIiwiTUFYX1ZFUlRFWF9BVFRSSUJTIiwiYmluZGluZ1N0YXRlcyIsImRlZmF1bHRTdGF0ZSIsImNyZWF0ZUJpbmRpbmdTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiYmluZFZlcnRleEFycmF5T2JqZWN0IiwidmFvIiwiYmluZFZlcnRleEFycmF5IiwiZGVsZXRlVmVydGV4QXJyYXlPYmplY3QiLCJkZWxldGVWZXJ0ZXhBcnJheSIsIm5ld0F0dHJpYnV0ZXMiLCJlbmFibGVkQXR0cmlidXRlcyIsImF0dHJpYnV0ZURpdmlzb3JzIiwicHJvZ3JhbSIsImluaXRBdHRyaWJ1dGVzIiwiZW5hYmxlQXR0cmlidXRlIiwiZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciIsIm1lc2hQZXJBdHRyaWJ1dGUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYkRpdmlzb3IiLCJkaXNhYmxlVW51c2VkQXR0cmlidXRlcyIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJpbnRlZ2VyIiwidmVydGV4QXR0cmliSVBvaW50ZXIiLCJyZXNldCIsInJlc2V0RGVmYXVsdFN0YXRlIiwic2V0dXAiLCJ1cGRhdGVCdWZmZXJzIiwicHJvZ3JhbU1hcCIsInN0YXRlTWFwIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJnZXRCaW5kaW5nU3RhdGUiLCJjYWNoZWRBdHRyaWJ1dGVzIiwiZ2VvbWV0cnlBdHRyaWJ1dGVzIiwiYXR0cmlidXRlc051bSIsInByb2dyYW1BdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlcyIsImxvY2F0aW9uIiwiY2FjaGVkQXR0cmlidXRlIiwiZ2VvbWV0cnlBdHRyaWJ1dGUiLCJzYXZlQ2FjaGUiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIm1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsInByb2dyYW1BdHRyaWJ1dGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibG9jYXRpb25TaXplIiwiQVJSQVlfQlVGRkVSIiwiaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJ2ZXJ0ZXhBdHRyaWIyZnYiLCJ2ZXJ0ZXhBdHRyaWIzZnYiLCJ2ZXJ0ZXhBdHRyaWI0ZnYiLCJ2ZXJ0ZXhBdHRyaWIxZnYiLCJzZXR1cFZlcnRleEF0dHJpYnV0ZXMiLCJnZW9tZXRyeUlkIiwicHJvZ3JhbUlkIiwicmVsZWFzZVN0YXRlc09mR2VvbWV0cnkiLCJyZWxlYXNlU3RhdGVzT2ZQcm9ncmFtIiwiV2ViR0xCdWZmZXJSZW5kZXJlciIsImluZm8iLCJtb2RlIiwicmVuZGVySW5zdGFuY2VzIiwicHJpbWNvdW50IiwiZHJhd0FycmF5c0luc3RhbmNlZCIsInNldE1vZGUiLCJkcmF3QXJyYXlzIiwicmVuZGVyTXVsdGlEcmF3Iiwic3RhcnRzIiwiY291bnRzIiwiZHJhd0NvdW50IiwibXVsdGlEcmF3QXJyYXlzV0VCR0wiLCJlbGVtZW50Q291bnQiLCJyZW5kZXJNdWx0aURyYXdJbnN0YW5jZXMiLCJleHRlbnNpb24iLCJtdWx0aURyYXdBcnJheXNJbnN0YW5jZWRXRUJHTCIsIldlYkdMQ2FwYWJpbGl0aWVzIiwidXRpbHMiLCJtYXhBbmlzb3Ryb3B5IiwiZ2V0TWF4UHJlY2lzaW9uIiwiZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0IiwiVkVSVEVYX1NIQURFUiIsIkhJR0hfRkxPQVQiLCJGUkFHTUVOVF9TSEFERVIiLCJNRURJVU1fRkxPQVQiLCJtYXhQcmVjaXNpb24iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwicmV2ZXJzZURlcHRoQnVmZmVyIiwiaGFzIiwibWF4VGV4dHVyZXMiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsIm1heFZlcnRleFRleHR1cmVzIiwiTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiaXNXZWJHTDIiLCJnZXRNYXhBbmlzb3Ryb3B5IiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwidGV4dHVyZUZvcm1hdFJlYWRhYmxlIiwidGV4dHVyZUZvcm1hdCIsIklNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUIiwidGV4dHVyZVR5cGVSZWFkYWJsZSIsInRleHR1cmVUeXBlIiwiaGFsZkZsb2F0U3VwcG9ydGVkQnlFeHQiLCJJTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX1RZUEUiLCJtYXhUZXh0dXJlU2l6ZSIsIk1BWF9URVhUVVJFX1NJWkUiLCJtYXhDdWJlbWFwU2l6ZSIsIk1BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyIsIm1heFZhcnlpbmdzIiwiTUFYX1ZBUllJTkdfVkVDVE9SUyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTIiwidmVydGV4VGV4dHVyZXMiLCJtYXhTYW1wbGVzIiwiTUFYX1NBTVBMRVMiLCJXZWJHTENsaXBwaW5nIiwiZ2xvYmFsU3RhdGUiLCJudW1HbG9iYWxQbGFuZXMiLCJsb2NhbENsaXBwaW5nRW5hYmxlZCIsInJlbmRlcmluZ1NoYWRvd3MiLCJ2aWV3Tm9ybWFsTWF0cml4IiwidW5pZm9ybSIsInByb2plY3RQbGFuZXMiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJ2aWV3TWF0cml4IiwiaTQiLCJudW1QbGFuZXMiLCJudW1JbnRlcnNlY3Rpb24iLCJpbml0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImJlZ2luU2hhZG93cyIsImVuZFNoYWRvd3MiLCJzZXRHbG9iYWxTdGF0ZSIsInNldFN0YXRlIiwidXNlQ2FjaGUiLCJtYXRlcmlhbFByb3BlcnRpZXMiLCJuR2xvYmFsIiwibEdsb2JhbCIsImNsaXBwaW5nU3RhdGUiLCJXZWJHTEN1YmVNYXBzIiwibWFwVGV4dHVyZU1hcHBpbmciLCJvblRleHR1cmVEaXNwb3NlIiwiY3ViZW1hcCIsIkVYVFJBX0xPRF9TSUdNQSIsIl9mbGF0Q2FtZXJhIiwiX2NsZWFyQ29sb3IiLCJfb2xkVGFyZ2V0IiwiX29sZEFjdGl2ZUN1YmVGYWNlIiwiX29sZEFjdGl2ZU1pcG1hcExldmVsIiwiX29sZFhyRW5hYmxlZCIsIlBISSIsIklOVl9QSEkiLCJfYXhpc0RpcmVjdGlvbnMiLCJfb3JpZ2luIiwiUE1SRU1HZW5lcmF0b3IiLCJfcmVuZGVyZXIiLCJfcGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfbG9kTWF4IiwiX2N1YmVTaXplIiwiX2xvZFBsYW5lcyIsIl9zaXplTG9kcyIsIl9zaWdtYXMiLCJfYmx1ck1hdGVyaWFsIiwiX2N1YmVtYXBNYXRlcmlhbCIsIl9lcXVpcmVjdE1hdGVyaWFsIiwiX2NvbXBpbGVNYXRlcmlhbCIsImZyb21TY2VuZSIsInNpZ21hIiwiX3NldFNpemUiLCJjdWJlVVZSZW5kZXJUYXJnZXQiLCJfYWxsb2NhdGVUYXJnZXRzIiwiX3NjZW5lVG9DdWJlVVYiLCJfYmx1ciIsIl9hcHBseVBNUkVNIiwiX2NsZWFudXAiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyIiwiZXF1aXJlY3Rhbmd1bGFyIiwiX2Zyb21UZXh0dXJlIiwiZnJvbUN1YmVtYXAiLCJjb21waWxlQ3ViZW1hcFNoYWRlciIsIl9nZXRDdWJlbWFwTWF0ZXJpYWwiLCJjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyIiwiX2dldEVxdWlyZWN0TWF0ZXJpYWwiLCJfZGlzcG9zZSIsImN1YmVTaXplIiwibG9nMiIsIm91dHB1dFRhcmdldCIsIl9zZXRWaWV3cG9ydCIsIl90ZXh0dXJlVG9DdWJlVVYiLCJwYXJhbXMiLCJfY3JlYXRlUmVuZGVyVGFyZ2V0Iiwic2l6ZUxvZHMiLCJsb2RQbGFuZXMiLCJzaWdtYXMiLCJsb2RNYXgiLCJsb2QiLCJ0b3RhbExvZHMiLCJzaXplTG9kIiwidGV4ZWxTaXplIiwiY3ViZUZhY2VzIiwicG9zaXRpb25TaXplIiwidXZTaXplIiwiZmFjZUluZGV4U2l6ZSIsImNvb3JkaW5hdGVzIiwiZmlsbCIsIl9jcmVhdGVQbGFuZXMiLCJ3ZWlnaHRzIiwicG9sZUF4aXMiLCJfZ2V0Qmx1clNoYWRlciIsInRtcE1lc2giLCJjb21waWxlIiwiY3ViZUNhbWVyYSIsInVwU2lnbiIsImZvcndhcmRTaWduIiwib3JpZ2luYWxBdXRvQ2xlYXIiLCJiYWNrZ3JvdW5kTWF0ZXJpYWwiLCJiYWNrZ3JvdW5kQm94IiwidXNlU29saWRDb2xvciIsImNvbCIsImxvZEluIiwibG9kT3V0IiwicGluZ1BvbmdSZW5kZXJUYXJnZXQiLCJfaGFsZkJsdXIiLCJ0YXJnZXRJbiIsInRhcmdldE91dCIsInNpZ21hUmFkaWFucyIsImJsdXJNYXRlcmlhbCIsImJsdXJNZXNoIiwiYmx1clVuaWZvcm1zIiwicGl4ZWxzIiwicmFkaWFuc1BlclBpeGVsIiwic2lnbWFQaXhlbHMiLCJzdW0iLCJ3ZWlnaHQiLCJleHAiLCJvdXRwdXRTaXplIiwiV2ViR0xDdWJlVVZNYXBzIiwiY3ViZVVWbWFwcyIsInBtcmVtR2VuZXJhdG9yIiwiY3ViZW1hcFVWIiwiaXNFcXVpcmVjdE1hcCIsImlzQ3ViZU1hcCIsImN1cnJlbnRQTVJFTVZlcnNpb24iLCJpc0N1YmVUZXh0dXJlQ29tcGxldGUiLCJXZWJHTEV4dGVuc2lvbnMiLCJnZXRFeHRlbnNpb24iLCJXZWJHTEdlb21ldHJpZXMiLCJ3aXJlZnJhbWVBdHRyaWJ1dGVzIiwib25HZW9tZXRyeURpc3Bvc2UiLCJpc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IiwibWVtb3J5IiwidXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlIiwiZ2VvbWV0cnlJbmRleCIsImdlb21ldHJ5UG9zaXRpb24iLCJwcmV2aW91c0F0dHJpYnV0ZSIsImdldFdpcmVmcmFtZUF0dHJpYnV0ZSIsImN1cnJlbnRBdHRyaWJ1dGUiLCJXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciIsImRyYXdFbGVtZW50c0luc3RhbmNlZCIsImRyYXdFbGVtZW50cyIsIm11bHRpRHJhd0VsZW1lbnRzV0VCR0wiLCJtdWx0aURyYXdFbGVtZW50c0luc3RhbmNlZFdFQkdMIiwiV2ViR0xJbmZvIiwiY2FsbHMiLCJ0cmlhbmdsZXMiLCJsaW5lcyIsInByb2dyYW1zIiwiYXV0b1Jlc2V0IiwiaW5zdGFuY2VDb3VudCIsIlRSSUFOR0xFUyIsIkxJTkVTIiwiTElORV9TVFJJUCIsIkxJTkVfTE9PUCIsIlBPSU5UUyIsIldlYkdMTW9ycGh0YXJnZXRzIiwiY2FwYWJpbGl0aWVzIiwibW9ycGhUZXh0dXJlcyIsIm1vcnBoIiwib2JqZWN0SW5mbHVlbmNlcyIsIm1vcnBoVGFyZ2V0c0NvdW50IiwiZW50cnkiLCJoYXNNb3JwaFBvc2l0aW9uIiwiaGFzTW9ycGhOb3JtYWxzIiwiaGFzTW9ycGhDb2xvcnMiLCJtb3JwaFRhcmdldHMiLCJtb3JwaE5vcm1hbHMiLCJtb3JwaENvbG9ycyIsInZlcnRleERhdGFDb3VudCIsInZlcnRleERhdGFTdHJpZGUiLCJtb3JwaFRhcmdldCIsIm1vcnBoTm9ybWFsIiwibW9ycGhDb2xvciIsImRpc3Bvc2VUZXh0dXJlIiwibW9ycGhUZXh0dXJlIiwiZ2V0VW5pZm9ybXMiLCJtb3JwaEluZmx1ZW5jZXNTdW0iLCJtb3JwaEJhc2VJbmZsdWVuY2UiLCJXZWJHTE9iamVjdHMiLCJ1cGRhdGVNYXAiLCJvbkluc3RhbmNlZE1lc2hEaXNwb3NlIiwiaW5zdGFuY2VkTWVzaCIsImJ1ZmZlcmdlb21ldHJ5IiwiZW1wdHlUZXh0dXJlIiwiZW1wdHlTaGFkb3dUZXh0dXJlIiwiZW1wdHlBcnJheVRleHR1cmUiLCJlbXB0eTNkVGV4dHVyZSIsImVtcHR5Q3ViZVRleHR1cmUiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NhdGVUZXh0dXJlVW5pdCIsInNldFZhbHVlVjFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJ1bmlmb3JtTWF0cml4MmZ2Iiwic2V0VmFsdWVNMyIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZU00IiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVjFpIiwidW5pZm9ybTFpIiwic2V0VmFsdWVWMmkiLCJ1bmlmb3JtMmkiLCJ1bmlmb3JtMml2Iiwic2V0VmFsdWVWM2kiLCJ1bmlmb3JtM2kiLCJ1bmlmb3JtM2l2Iiwic2V0VmFsdWVWNGkiLCJ1bmlmb3JtNGkiLCJ1bmlmb3JtNGl2Iiwic2V0VmFsdWVWMXVpIiwidW5pZm9ybTF1aSIsInNldFZhbHVlVjJ1aSIsInVuaWZvcm0ydWkiLCJ1bmlmb3JtMnVpdiIsInNldFZhbHVlVjN1aSIsInVuaWZvcm0zdWkiLCJ1bmlmb3JtM3VpdiIsInNldFZhbHVlVjR1aSIsInVuaWZvcm00dWkiLCJ1bmlmb3JtNHVpdiIsInNldFZhbHVlVDEiLCJ1bml0IiwiZW1wdHlUZXh0dXJlMkQiLCJTQU1QTEVSXzJEX1NIQURPVyIsInNldFRleHR1cmUyRCIsInNldFZhbHVlVDNEMSIsInNldFRleHR1cmUzRCIsInNldFZhbHVlVDYiLCJzZXRUZXh0dXJlQ3ViZSIsInNldFZhbHVlVDJEQXJyYXkxIiwic2V0VGV4dHVyZTJEQXJyYXkiLCJzZXRWYWx1ZVYxZkFycmF5IiwidW5pZm9ybTFmdiIsInNldFZhbHVlVjJmQXJyYXkiLCJzZXRWYWx1ZVYzZkFycmF5Iiwic2V0VmFsdWVWNGZBcnJheSIsInNldFZhbHVlTTJBcnJheSIsInNldFZhbHVlTTNBcnJheSIsInNldFZhbHVlTTRBcnJheSIsInNldFZhbHVlVjFpQXJyYXkiLCJ1bmlmb3JtMWl2Iiwic2V0VmFsdWVWMmlBcnJheSIsInNldFZhbHVlVjNpQXJyYXkiLCJzZXRWYWx1ZVY0aUFycmF5Iiwic2V0VmFsdWVWMXVpQXJyYXkiLCJ1bmlmb3JtMXVpdiIsInNldFZhbHVlVjJ1aUFycmF5Iiwic2V0VmFsdWVWM3VpQXJyYXkiLCJzZXRWYWx1ZVY0dWlBcnJheSIsInNldFZhbHVlVDFBcnJheSIsInVuaXRzIiwic2V0VmFsdWVUM0RBcnJheSIsInNldFZhbHVlVDZBcnJheSIsInNldFZhbHVlVDJEQXJyYXlBcnJheSIsIlNpbmdsZVVuaWZvcm0iLCJhY3RpdmVJbmZvIiwiZ2V0U2luZ3VsYXJTZXR0ZXIiLCJQdXJlQXJyYXlVbmlmb3JtIiwiZ2V0UHVyZUFycmF5U2V0dGVyIiwiU3RydWN0dXJlZFVuaWZvcm0iLCJzZXEiLCJSZVBhdGhQYXJ0IiwiYWRkVW5pZm9ybSIsImNvbnRhaW5lciIsInVuaWZvcm1PYmplY3QiLCJwYXJzZVVuaWZvcm0iLCJwYXRoTGVuZ3RoIiwibWF0Y2giLCJtYXRjaEVuZCIsImlkSXNJbmRleCIsInN1YnNjcmlwdCIsIm5leHQiLCJXZWJHTFVuaWZvcm1zIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkFDVElWRV9VTklGT1JNUyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXRPcHRpb25hbCIsInVwbG9hZCIsInNlcVdpdGhWYWx1ZSIsIldlYkdMU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsInByb2dyYW1JZENvdW50IiwiX20wIiwiZ2V0U2hhZGVyRXJyb3JzIiwic3RhdHVzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJlcnJvcnMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZXJyb3JNYXRjaGVzIiwiZXJyb3JMaW5lIiwidG9VcHBlckNhc2UiLCJzcGxpdCIsImxpbmVzMiIsImpvaW4iLCJoYW5kbGVTb3VyY2UiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJlbmNvZGluZ01hdHJpeCIsImdldEVuY29kaW5nQ29tcG9uZW50cyIsImdldFRvbmVNYXBwaW5nRnVuY3Rpb24iLCJ0b25lTWFwcGluZ05hbWUiLCJmaWx0ZXJFbXB0eUxpbmUiLCJyZXBsYWNlTGlnaHROdW1zIiwibnVtU3BvdExpZ2h0Q29vcmRzIiwibnVtU3BvdExpZ2h0U2hhZG93cyIsIm51bVNwb3RMaWdodE1hcHMiLCJudW1TcG90TGlnaHRTaGFkb3dzV2l0aE1hcHMiLCJudW1EaXJMaWdodHMiLCJudW1TcG90TGlnaHRzIiwibnVtUmVjdEFyZWFMaWdodHMiLCJudW1Qb2ludExpZ2h0cyIsIm51bUhlbWlMaWdodHMiLCJudW1EaXJMaWdodFNoYWRvd3MiLCJudW1Qb2ludExpZ2h0U2hhZG93cyIsInJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyIsIm51bUNsaXBwaW5nUGxhbmVzIiwibnVtQ2xpcEludGVyc2VjdGlvbiIsImluY2x1ZGVQYXR0ZXJuIiwicmVzb2x2ZUluY2x1ZGVzIiwiaW5jbHVkZVJlcGxhY2VyIiwic2hhZGVyQ2h1bmtNYXAiLCJNYXAiLCJpbmNsdWRlIiwibmV3SW5jbHVkZSIsInVucm9sbExvb3BQYXR0ZXJuIiwidW5yb2xsTG9vcHMiLCJsb29wUmVwbGFjZXIiLCJzbmlwcGV0IiwiZ2VuZXJhdGVQcmVjaXNpb24iLCJwcmVjaXNpb25zdHJpbmciLCJXZWJHTFByb2dyYW0iLCJjYWNoZUtleSIsInNoYWRvd01hcFR5cGVEZWZpbmUiLCJzaGFkb3dNYXBUeXBlIiwiZ2VuZXJhdGVTaGFkb3dNYXBUeXBlRGVmaW5lIiwiZW52TWFwVHlwZURlZmluZSIsImVudk1hcE1vZGUiLCJnZW5lcmF0ZUVudk1hcFR5cGVEZWZpbmUiLCJlbnZNYXBNb2RlRGVmaW5lIiwiZ2VuZXJhdGVFbnZNYXBNb2RlRGVmaW5lIiwiZW52TWFwQmxlbmRpbmdEZWZpbmUiLCJnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lIiwiZW52TWFwQ3ViZVVWU2l6ZSIsImltYWdlSGVpZ2h0IiwiZW52TWFwQ3ViZVVWSGVpZ2h0IiwibWF4TWlwIiwidGV4ZWxIZWlnaHQiLCJ0ZXhlbFdpZHRoIiwiZ2VuZXJhdGVDdWJlVVZTaXplIiwiY3VzdG9tVmVydGV4RXh0ZW5zaW9ucyIsImV4dGVuc2lvbkNsaXBDdWxsRGlzdGFuY2UiLCJleHRlbnNpb25NdWx0aURyYXciLCJmaWx0ZXIiLCJnZW5lcmF0ZVZlcnRleEV4dGVuc2lvbnMiLCJjdXN0b21EZWZpbmVzIiwiY2h1bmtzIiwiZ2VuZXJhdGVEZWZpbmVzIiwiY3JlYXRlUHJvZ3JhbSIsInByZWZpeFZlcnRleCIsInByZWZpeEZyYWdtZW50IiwidmVyc2lvblN0cmluZyIsImlzUmF3U2hhZGVyTWF0ZXJpYWwiLCJzaGFkZXJUeXBlIiwic2hhZGVyTmFtZSIsImJhdGNoaW5nIiwiYmF0Y2hpbmdDb2xvciIsImluc3RhbmNpbmciLCJpbnN0YW5jaW5nQ29sb3IiLCJpbnN0YW5jaW5nTW9ycGgiLCJ1c2VGb2ciLCJmb2dFeHAyIiwibm9ybWFsTWFwT2JqZWN0U3BhY2UiLCJub3JtYWxNYXBUYW5nZW50U3BhY2UiLCJtYXBVdiIsImFscGhhTWFwVXYiLCJsaWdodE1hcFV2IiwiYW9NYXBVdiIsImVtaXNzaXZlTWFwVXYiLCJidW1wTWFwVXYiLCJub3JtYWxNYXBVdiIsImRpc3BsYWNlbWVudE1hcFV2IiwibWV0YWxuZXNzTWFwVXYiLCJyb3VnaG5lc3NNYXBVdiIsImFuaXNvdHJvcHlNYXBVdiIsImNsZWFyY29hdE1hcFV2IiwiY2xlYXJjb2F0Tm9ybWFsTWFwVXYiLCJjbGVhcmNvYXRSb3VnaG5lc3NNYXBVdiIsImlyaWRlc2NlbmNlTWFwVXYiLCJpcmlkZXNjZW5jZVRoaWNrbmVzc01hcFV2Iiwic2hlZW5Db2xvck1hcFV2Iiwic2hlZW5Sb3VnaG5lc3NNYXBVdiIsInNwZWN1bGFyTWFwVXYiLCJzcGVjdWxhckNvbG9yTWFwVXYiLCJzcGVjdWxhckludGVuc2l0eU1hcFV2IiwidHJhbnNtaXNzaW9uTWFwVXYiLCJ0aGlja25lc3NNYXBVdiIsInZlcnRleFRhbmdlbnRzIiwidmVydGV4QWxwaGFzIiwidmVydGV4VXYxcyIsInZlcnRleFV2MnMiLCJ2ZXJ0ZXhVdjNzIiwicG9pbnRzVXZzIiwic2tpbm5pbmciLCJtb3JwaFRleHR1cmVTdHJpZGUiLCJkb3VibGVTaWRlZCIsImZsaXBTaWRlZCIsInNoYWRvd01hcEVuYWJsZWQiLCJudW1MaWdodFByb2JlcyIsImRlY29kZVZpZGVvVGV4dHVyZSIsImRlY29kZVZpZGVvVGV4dHVyZUVtaXNzaXZlIiwib3BhcXVlIiwidXNlRGVwdGhQYWNraW5nIiwidmVydGV4R2xzbCIsImZyYWdtZW50R2xzbCIsImdsVmVydGV4U2hhZGVyIiwiZ2xGcmFnbWVudFNoYWRlciIsIm9uRmlyc3RVc2UiLCJzZWxmIiwiZGVidWciLCJjaGVja1NoYWRlckVycm9ycyIsInByb2dyYW1Mb2ciLCJnZXRQcm9ncmFtSW5mb0xvZyIsInZlcnRleExvZyIsImZyYWdtZW50TG9nIiwicnVubmFibGUiLCJoYXZlRGlhZ25vc3RpY3MiLCJMSU5LX1NUQVRVUyIsIm9uU2hhZGVyRXJyb3IiLCJ2ZXJ0ZXhFcnJvcnMiLCJmcmFnbWVudEVycm9ycyIsImdldEVycm9yIiwiVkFMSURBVEVfU1RBVFVTIiwiZGlhZ25vc3RpY3MiLCJsb2ciLCJwcmVmaXgiLCJkZWxldGVTaGFkZXIiLCJjYWNoZWRVbmlmb3JtcyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiZ2V0QWN0aXZlQXR0cmliIiwiRkxPQVRfTUFUMiIsIkZMT0FUX01BVDMiLCJGTE9BVF9NQVQ0IiwiZ2V0QXR0cmliTG9jYXRpb24iLCJmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyIsImF0dGFjaFNoYWRlciIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwicHJvZ3JhbVJlYWR5IiwicmVuZGVyZXJFeHRlbnNpb25QYXJhbGxlbFNoYWRlckNvbXBpbGUiLCJpc1JlYWR5IiwiZGVzdHJveSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VkVGltZXMiLCJXZWJHTFNoYWRlckNhY2hlIiwic2hhZGVyQ2FjaGUiLCJtYXRlcmlhbENhY2hlIiwidmVydGV4U2hhZGVyU3RhZ2UiLCJfZ2V0U2hhZGVyU3RhZ2UiLCJmcmFnbWVudFNoYWRlclN0YWdlIiwibWF0ZXJpYWxTaGFkZXJzIiwiX2dldFNoYWRlckNhY2hlRm9yTWF0ZXJpYWwiLCJzaGFkZXJTdGFnZSIsImNvZGUiLCJnZXRWZXJ0ZXhTaGFkZXJJRCIsImdldEZyYWdtZW50U2hhZGVySUQiLCJzdGFnZSIsIldlYkdMU2hhZGVyU3RhZ2UiLCJXZWJHTFByb2dyYW1zIiwiX3Byb2dyYW1MYXllcnMiLCJfY3VzdG9tU2hhZGVycyIsIl9hY3RpdmVDaGFubmVscyIsIlNVUFBPUlRTX1ZFUlRFWF9URVhUVVJFUyIsInNoYWRlcklEcyIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoVG9vbk1hdGVyaWFsIiwiTWVzaFN0YW5kYXJkTWF0ZXJpYWwiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsIk1lc2hNYXRjYXBNYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwiTGluZURhc2hlZE1hdGVyaWFsIiwiUG9pbnRzTWF0ZXJpYWwiLCJTaGFkb3dNYXRlcmlhbCIsIlNwcml0ZU1hdGVyaWFsIiwiZ2V0Q2hhbm5lbCIsImdldFBhcmFtZXRlcnMiLCJzaGFkb3dzIiwiaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCIsInNoYWRlcklEIiwiY3VzdG9tVmVydGV4U2hhZGVySUQiLCJjdXN0b21GcmFnbWVudFNoYWRlcklEIiwiZ2V0UmV2ZXJzZWQiLCJJU19JTlNUQU5DRURNRVNIIiwiSVNfQkFUQ0hFRE1FU0giLCJIQVNfTUFQIiwiSEFTX01BVENBUCIsIkhBU19FTlZNQVAiLCJIQVNfQU9NQVAiLCJIQVNfTElHSFRNQVAiLCJIQVNfQlVNUE1BUCIsIkhBU19OT1JNQUxNQVAiLCJIQVNfRElTUExBQ0VNRU5UTUFQIiwiSEFTX0VNSVNTSVZFTUFQIiwiSEFTX01FVEFMTkVTU01BUCIsIkhBU19ST1VHSE5FU1NNQVAiLCJIQVNfQU5JU09UUk9QWSIsIkhBU19DTEVBUkNPQVQiLCJIQVNfRElTUEVSU0lPTiIsIkhBU19JUklERVNDRU5DRSIsIkhBU19TSEVFTiIsIkhBU19UUkFOU01JU1NJT04iLCJIQVNfQU5JU09UUk9QWU1BUCIsIkhBU19DTEVBUkNPQVRNQVAiLCJIQVNfQ0xFQVJDT0FUX05PUk1BTE1BUCIsIkhBU19DTEVBUkNPQVRfUk9VR0hORVNTTUFQIiwiSEFTX0lSSURFU0NFTkNFTUFQIiwiSEFTX0lSSURFU0NFTkNFX1RISUNLTkVTU01BUCIsIkhBU19TSEVFTl9DT0xPUk1BUCIsIkhBU19TSEVFTl9ST1VHSE5FU1NNQVAiLCJIQVNfU1BFQ1VMQVJNQVAiLCJIQVNfU1BFQ1VMQVJfQ09MT1JNQVAiLCJIQVNfU1BFQ1VMQVJfSU5URU5TSVRZTUFQIiwiSEFTX1RSQU5TTUlTU0lPTk1BUCIsIkhBU19USElDS05FU1NNQVAiLCJIQVNfR1JBRElFTlRNQVAiLCJIQVNfQUxQSEFNQVAiLCJIQVNfQUxQSEFURVNUIiwiSEFTX0FMUEhBSEFTSCIsIkhBU19FWFRFTlNJT05TIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsImlzRm9nRXhwMiIsImRpcmVjdGlvbmFsIiwic3BvdCIsInJlY3RBcmVhIiwiaGVtaSIsInNoYWRvd01hcCIsImlzVmlkZW9UZXh0dXJlIiwiZ2V0UHJvZ3JhbUNhY2hlS2V5IiwibW9ycGhBdHRyaWJ1dGVDb3VudCIsImdldFByb2dyYW1DYWNoZUtleVBhcmFtZXRlcnMiLCJnZXRQcm9ncmFtQ2FjaGVLZXlCb29sZWFucyIsImFjcXVpcmVQcm9ncmFtIiwicGwiLCJwcmVleGlzdGluZ1Byb2dyYW0iLCJyZWxlYXNlUHJvZ3JhbSIsInBvcCIsInJlbGVhc2VTaGFkZXJDYWNoZSIsIldlYkdMUHJvcGVydGllcyIsInBhaW50ZXJTb3J0U3RhYmxlIiwiZ3JvdXBPcmRlciIsInJldmVyc2VQYWludGVyU29ydFN0YWJsZSIsIldlYkdMUmVuZGVyTGlzdCIsInJlbmRlckl0ZW1zIiwicmVuZGVySXRlbXNJbmRleCIsInRyYW5zbWlzc2l2ZSIsImdldE5leHRSZW5kZXJJdGVtIiwicmVuZGVySXRlbSIsImZpbmlzaCIsImN1c3RvbU9wYXF1ZVNvcnQiLCJjdXN0b21UcmFuc3BhcmVudFNvcnQiLCJXZWJHTFJlbmRlckxpc3RzIiwibGlzdHMiLCJyZW5kZXJDYWxsRGVwdGgiLCJsaXN0QXJyYXkiLCJsaXN0IiwiVW5pZm9ybXNDYWNoZSIsImxpZ2h0IiwiaGFsZldpZHRoIiwiaGFsZkhlaWdodCIsIm5leHRWZXJzaW9uIiwic2hhZG93Q2FzdGluZ0FuZFRleHR1cmluZ0xpZ2h0c0ZpcnN0IiwibGlnaHRBIiwibGlnaHRCIiwiV2ViR0xMaWdodHMiLCJzaGFkb3dDYWNoZSIsIlNoYWRvd1VuaWZvcm1zQ2FjaGUiLCJoYXNoIiwiZGlyZWN0aW9uYWxMZW5ndGgiLCJwb2ludExlbmd0aCIsInNwb3RMZW5ndGgiLCJyZWN0QXJlYUxlbmd0aCIsImhlbWlMZW5ndGgiLCJudW1EaXJlY3Rpb25hbFNoYWRvd3MiLCJudW1Qb2ludFNoYWRvd3MiLCJudW1TcG90U2hhZG93cyIsIm51bVNwb3RNYXBzIiwiYW1iaWVudCIsInByb2JlIiwiZGlyZWN0aW9uYWxTaGFkb3ciLCJzcG90U2hhZG93IiwicmVjdEFyZWFMVEMxIiwicmVjdEFyZWFMVEMyIiwicG9pbnRTaGFkb3ciLCJ2ZWN0b3IzIiwibWF0cml4NDIiLCJudW1TcG90U2hhZG93c1dpdGhNYXBzIiwiaXNMaWdodFByb2JlIiwic2giLCJjb2VmZmljaWVudHMiLCJpc0RpcmVjdGlvbmFsTGlnaHQiLCJzaGFkb3dVbmlmb3JtcyIsImJpYXMiLCJub3JtYWxCaWFzIiwibWFwU2l6ZSIsImlzU3BvdExpZ2h0IiwidXBkYXRlTWF0cmljZXMiLCJpc1JlY3RBcmVhTGlnaHQiLCJpc1BvaW50TGlnaHQiLCJpc0hlbWlzcGhlcmVMaWdodCIsIkxUQ19GTE9BVF8xIiwiTFRDX0ZMT0FUXzIiLCJMVENfSEFMRl8xIiwiTFRDX0hBTEZfMiIsInNldHVwVmlldyIsIldlYkdMUmVuZGVyU3RhdGUiLCJsaWdodHNBcnJheSIsInNoYWRvd3NBcnJheSIsInRyYW5zbWlzc2lvblJlbmRlclRhcmdldCIsInNldHVwTGlnaHRzIiwic2V0dXBMaWdodHNWaWV3IiwicHVzaExpZ2h0IiwicHVzaFNoYWRvdyIsInNoYWRvd0xpZ2h0IiwiV2ViR0xSZW5kZXJTdGF0ZXMiLCJyZW5kZXJTdGF0ZXMiLCJyZW5kZXJTdGF0ZUFycmF5IiwicmVuZGVyU3RhdGUiLCJXZWJHTFNoYWRvd01hcCIsIl9mcnVzdHVtIiwiX3NoYWRvd01hcFNpemUiLCJfdmlld3BvcnRTaXplIiwiX3ZpZXdwb3J0IiwiX2RlcHRoTWF0ZXJpYWwiLCJfZGlzdGFuY2VNYXRlcmlhbCIsIl9tYXRlcmlhbENhY2hlIiwiX21heFRleHR1cmVTaXplIiwic2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCIsIlZTTV9TQU1QTEVTIiwic2hhZG93X3Bhc3MiLCJyZXNvbHV0aW9uIiwic2hhZG93TWF0ZXJpYWxIb3Jpem9udGFsIiwiSE9SSVpPTlRBTF9QQVNTIiwiZnVsbFNjcmVlblRyaSIsImZ1bGxTY3JlZW5NZXNoIiwiYXV0b1VwZGF0ZSIsIl9wcmV2aW91c1R5cGUiLCJWU01QYXNzIiwiYmx1clNhbXBsZXMiLCJtYXBQYXNzIiwicmVuZGVyQnVmZmVyRGlyZWN0IiwiZ2V0RGVwdGhNYXRlcmlhbCIsImN1c3RvbU1hdGVyaWFsIiwia2V5QSIsImtleUIiLCJtYXRlcmlhbHNGb3JWYXJpYW50IiwiY2FjaGVkTWF0ZXJpYWwiLCJvbk1hdGVyaWFsRGlzcG9zZSIsInJlbmRlck9iamVjdCIsInNoYWRvd0NhbWVyYSIsImsiLCJrbCIsImRlcHRoTWF0ZXJpYWwiLCJhY3RpdmVDdWJlRmFjZSIsIl9zdGF0ZSIsInNldEJsZW5kaW5nIiwic2V0U2Npc3NvclRlc3QiLCJ0b1ZTTSIsImZyb21WU00iLCJzaGFkb3dGcmFtZUV4dGVudHMiLCJnZXRGcmFtZUV4dGVudHMiLCJwYXJzIiwidmlld3BvcnRDb3VudCIsImdldFZpZXdwb3J0Q291bnQiLCJ2cCIsImdldFZpZXdwb3J0IiwiZ2V0RnJ1c3R1bSIsImlzUG9pbnRMaWdodFNoYWRvdyIsInJldmVyc2VkRnVuY3MiLCJXZWJHTFN0YXRlIiwiY29sb3JCdWZmZXIiLCJsb2NrZWQiLCJjdXJyZW50Q29sb3JNYXNrIiwiY3VycmVudENvbG9yQ2xlYXIiLCJjb2xvck1hc2siLCJzZXRMb2NrZWQiLCJsb2NrIiwiY3VycmVudFJldmVyc2VkIiwiY3VycmVudERlcHRoTWFzayIsImN1cnJlbnREZXB0aEZ1bmMiLCJjdXJyZW50RGVwdGhDbGVhciIsInNldFJldmVyc2VkIiwicmV2ZXJzZWQiLCJleHQiLCJjbGlwQ29udHJvbEVYVCIsIkxPV0VSX0xFRlRfRVhUIiwiWkVST19UT19PTkVfRVhUIiwiTkVHQVRJVkVfT05FX1RPX09ORV9FWFQiLCJvbGREZXB0aCIsIkRFUFRIX1RFU1QiLCJkZXB0aE1hc2siLCJzZXRGdW5jIiwiTkVWRVIiLCJBTFdBWVMiLCJMRVNTIiwiTEVRVUFMIiwiRVFVQUwiLCJHRVFVQUwiLCJHUkVBVEVSIiwiTk9URVFVQUwiLCJjbGVhckRlcHRoIiwiY3VycmVudFN0ZW5jaWxNYXNrIiwiY3VycmVudFN0ZW5jaWxGdW5jIiwiY3VycmVudFN0ZW5jaWxSZWYiLCJjdXJyZW50U3RlbmNpbEZ1bmNNYXNrIiwiY3VycmVudFN0ZW5jaWxGYWlsIiwiY3VycmVudFN0ZW5jaWxaRmFpbCIsImN1cnJlbnRTdGVuY2lsWlBhc3MiLCJjdXJyZW50U3RlbmNpbENsZWFyIiwic3RlbmNpbFRlc3QiLCJTVEVOQ0lMX1RFU1QiLCJzdGVuY2lsTWFzayIsInNldE9wIiwic3RlbmNpbE9wIiwiY2xlYXJTdGVuY2lsIiwidWJvQmluZGluZ3MiLCJ1Ym9Qcm9ncmFtTWFwIiwiZW5hYmxlZENhcGFiaWxpdGllcyIsImN1cnJlbnRCb3VuZEZyYW1lYnVmZmVycyIsImN1cnJlbnREcmF3YnVmZmVycyIsImRlZmF1bHREcmF3YnVmZmVycyIsImN1cnJlbnRQcm9ncmFtIiwiY3VycmVudEJsZW5kaW5nRW5hYmxlZCIsImN1cnJlbnRCbGVuZGluZyIsImN1cnJlbnRCbGVuZEVxdWF0aW9uIiwiY3VycmVudEJsZW5kU3JjIiwiY3VycmVudEJsZW5kRHN0IiwiY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSIsImN1cnJlbnRCbGVuZFNyY0FscGhhIiwiY3VycmVudEJsZW5kRHN0QWxwaGEiLCJjdXJyZW50QmxlbmRDb2xvciIsImN1cnJlbnRCbGVuZEFscGhhIiwiY3VycmVudFByZW11bHRpcGxlZEFscGhhIiwiY3VycmVudEZsaXBTaWRlZCIsImN1cnJlbnRDdWxsRmFjZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMiLCJNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyIsImxpbmVXaWR0aEF2YWlsYWJsZSIsImdsVmVyc2lvbiIsIlZFUlNJT04iLCJjdXJyZW50VGV4dHVyZVNsb3QiLCJjdXJyZW50Qm91bmRUZXh0dXJlcyIsInNjaXNzb3JQYXJhbSIsIlNDSVNTT1JfQk9YIiwidmlld3BvcnRQYXJhbSIsIlZJRVdQT1JUIiwiY3VycmVudFNjaXNzb3IiLCJjdXJyZW50Vmlld3BvcnQiLCJjcmVhdGVUZXh0dXJlIiwiZGltZW5zaW9ucyIsImJpbmRUZXh0dXJlIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFXzNEIiwiVEVYVFVSRV8yRF9BUlJBWSIsInRleEltYWdlM0QiLCJSR0JBIiwidGV4SW1hZ2UyRCIsImVtcHR5VGV4dHVyZXMiLCJURVhUVVJFXzJEIiwiVEVYVFVSRV9DVUJFX01BUCIsIlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCIsInNldEZsaXBTaWRlZCIsInNldEN1bGxGYWNlIiwiQ1VMTF9GQUNFIiwiZXF1YXRpb25Ub0dMIiwiRlVOQ19BREQiLCJGVU5DX1NVQlRSQUNUIiwiRlVOQ19SRVZFUlNFX1NVQlRSQUNUIiwiTUlOIiwiTUFYIiwiZmFjdG9yVG9HTCIsIlpFUk8iLCJTUkNfQ09MT1IiLCJTUkNfQUxQSEEiLCJTUkNfQUxQSEFfU0FUVVJBVEUiLCJEU1RfQ09MT1IiLCJEU1RfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIk9ORV9NSU5VU19EU1RfQ09MT1IiLCJPTkVfTUlOVVNfRFNUX0FMUEhBIiwiQ09OU1RBTlRfQ09MT1IiLCJPTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1IiLCJDT05TVEFOVF9BTFBIQSIsIk9ORV9NSU5VU19DT05TVEFOVF9BTFBIQSIsIkJMRU5EIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiYmxlbmRGdW5jU2VwYXJhdGUiLCJibGVuZEZ1bmMiLCJmcm9udEZhY2UiLCJDVyIsIkNDVyIsImN1bGxGYWNlIiwiQkFDSyIsIkZST05UIiwiRlJPTlRfQU5EX0JBQ0siLCJzZXRQb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwiUE9MWUdPTl9PRkZTRVRfRklMTCIsImJpbmRGcmFtZWJ1ZmZlciIsImZyYW1lYnVmZmVyIiwiRFJBV19GUkFNRUJVRkZFUiIsIkZSQU1FQlVGRkVSIiwiZHJhd0J1ZmZlcnMiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsInVzZVByb2dyYW0iLCJzZXRNYXRlcmlhbCIsImZyb250RmFjZUNXIiwiU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFIiwic2V0TGluZVdpZHRoIiwibGluZVdpZHRoIiwiU0NJU1NPUl9URVNUIiwiYWN0aXZlVGV4dHVyZSIsIndlYmdsU2xvdCIsIlRFWFRVUkUwIiwid2ViZ2xUeXBlIiwid2ViZ2xUZXh0dXJlIiwiYm91bmRUZXh0dXJlIiwidW5iaW5kVGV4dHVyZSIsImNvbXByZXNzZWRUZXhJbWFnZTJEIiwiY29tcHJlc3NlZFRleEltYWdlM0QiLCJ1cGRhdGVVQk9NYXBwaW5nIiwidW5pZm9ybXNHcm91cCIsImJsb2NrSW5kZXgiLCJnZXRVbmlmb3JtQmxvY2tJbmRleCIsInVuaWZvcm1CbG9ja0JpbmRpbmciLCJfX2JpbmRpbmdQb2ludEluZGV4IiwidGV4U3RvcmFnZTJEIiwidGV4U3RvcmFnZTNEIiwidGV4U3ViSW1hZ2UyRCIsInRleFN1YkltYWdlM0QiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCIsImNvbXByZXNzZWRUZXhTdWJJbWFnZTNEIiwiS0VFUCIsIlJFQURfRlJBTUVCVUZGRVIiLCJXZWJHTFRleHR1cmVzIiwiX2dsIiwibXVsdGlzYW1wbGVkUlRURXh0Iiwic3VwcG9ydHNJbnZhbGlkYXRlRnJhbWVidWZmZXIiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfaW1hZ2VEaW1lbnNpb25zIiwiX3ZpZGVvVGV4dHVyZXMiLCJfc291cmNlcyIsInVzZU9mZnNjcmVlbkNhbnZhcyIsIk9mZnNjcmVlbkNhbnZhcyIsImVyciIsImNyZWF0ZUNhbnZhcyIsInJlc2l6ZUltYWdlIiwibmVlZHNOZXdDYW52YXMiLCJtYXhTaXplIiwiZ2V0RGltZW5zaW9ucyIsIlZpZGVvRnJhbWUiLCJ0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMiLCJnZW5lcmF0ZU1pcG1hcCIsImdldFRhcmdldFR5cGUiLCJpc1dlYkdMM0RSZW5kZXJUYXJnZXQiLCJpc1dlYkdMQXJyYXlSZW5kZXJUYXJnZXQiLCJpc0NvbXByZXNzZWRBcnJheVRleHR1cmUiLCJnZXRJbnRlcm5hbEZvcm1hdCIsImludGVybmFsRm9ybWF0TmFtZSIsImdsRm9ybWF0IiwiZ2xUeXBlIiwiZm9yY2VMaW5lYXJUcmFuc2ZlciIsIlJFRCIsIlIzMkYiLCJSMTZGIiwiUjgiLCJSRURfSU5URUdFUiIsIlI4VUkiLCJSMTZVSSIsIlIzMlVJIiwiUjhJIiwiUjE2SSIsIlIzMkkiLCJSRyIsIlJHMzJGIiwiUkcxNkYiLCJSRzgiLCJSR19JTlRFR0VSIiwiUkc4VUkiLCJSRzE2VUkiLCJSRzMyVUkiLCJSRzhJIiwiUkcxNkkiLCJSRzMySSIsIlJHQl9JTlRFR0VSIiwiUkdCOFVJIiwiUkdCMTZVSSIsIlJHQjMyVUkiLCJSR0I4SSIsIlJHQjE2SSIsIlJHQjMySSIsIlJHQkFfSU5URUdFUiIsIlJHQkE4VUkiLCJSR0JBMTZVSSIsIlJHQkEzMlVJIiwiUkdCQThJIiwiUkdCQTE2SSIsIlJHQkEzMkkiLCJSR0IiLCJVTlNJR05FRF9JTlRfNV85XzlfOV9SRVYiLCJSR0I5X0U1IiwiUkdCQTMyRiIsIlJHQkExNkYiLCJTUkdCOF9BTFBIQTgiLCJSR0JBOCIsIlVOU0lHTkVEX1NIT1JUXzRfNF80XzQiLCJSR0JBNCIsIlVOU0lHTkVEX1NIT1JUXzVfNV81XzEiLCJSR0I1X0ExIiwiZ2V0SW50ZXJuYWxEZXB0aEZvcm1hdCIsInVzZVN0ZW5jaWwiLCJkZXB0aFR5cGUiLCJnbEludGVybmFsRm9ybWF0IiwiREVQVEgyNF9TVEVOQ0lMOCIsIkRFUFRIMzJGX1NURU5DSUw4IiwiREVQVEhfQ09NUE9ORU5UMjQiLCJERVBUSF9DT01QT05FTlQzMkYiLCJERVBUSF9DT01QT05FTlQxNiIsImdldE1pcExldmVscyIsImlzRnJhbWVidWZmZXJUZXh0dXJlIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsInRleHR1cmVQcm9wZXJ0aWVzIiwiX193ZWJnbEluaXQiLCJ3ZWJnbFRleHR1cmVzIiwiX19jYWNoZUtleSIsImRlbGV0ZVRleHR1cmUiLCJkZWFsbG9jYXRlVGV4dHVyZSIsIm9uUmVuZGVyVGFyZ2V0RGlzcG9zZSIsInJlbmRlclRhcmdldFByb3BlcnRpZXMiLCJfX3dlYmdsRnJhbWVidWZmZXIiLCJsZXZlbCIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiX193ZWJnbERlcHRoYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyIiwiX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyIiwiX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyIiwiYXR0YWNobWVudFByb3BlcnRpZXMiLCJfX3dlYmdsVGV4dHVyZSIsImRlYWxsb2NhdGVSZW5kZXJUYXJnZXQiLCJ0ZXh0dXJlVW5pdHMiLCJzbG90IiwidXBkYXRlVmlkZW9UZXh0dXJlIiwiX192ZXJzaW9uIiwiY29tcGxldGUiLCJ1cGxvYWRUZXh0dXJlIiwid3JhcHBpbmdUb0dMIiwiUkVQRUFUIiwiQ0xBTVBfVE9fRURHRSIsIk1JUlJPUkVEX1JFUEVBVCIsImZpbHRlclRvR0wiLCJORUFSRVNUX01JUE1BUF9ORUFSRVNUIiwiTkVBUkVTVF9NSVBNQVBfTElORUFSIiwiTElORUFSIiwiTElORUFSX01JUE1BUF9ORUFSRVNUIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJjb21wYXJlVG9HTCIsInNldFRleHR1cmVQYXJhbWV0ZXJzIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfV1JBUF9SIiwiVEVYVFVSRV9DT01QQVJFX01PREUiLCJDT01QQVJFX1JFRl9UT19URVhUVVJFIiwiVEVYVFVSRV9DT01QQVJFX0ZVTkMiLCJfX2N1cnJlbnRBbmlzb3Ryb3B5IiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiaW5pdFRleHR1cmUiLCJmb3JjZVVwbG9hZCIsInRleHR1cmVDYWNoZUtleSIsImdldFRleHR1cmVDYWNoZUtleSIsInNvdXJjZVByb3BlcnRpZXMiLCJ3b3JraW5nUHJpbWFyaWVzIiwidGV4dHVyZVByaW1hcmllcyIsInVucGFja0NvbnZlcnNpb24iLCJOT05FIiwiQlJPV1NFUl9ERUZBVUxUX1dFQkdMIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiVU5QQUNLX0FMSUdOTUVOVCIsIlVOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0wiLCJ2ZXJpZnlDb2xvclNwYWNlIiwibWlwbWFwIiwidXNlVGV4U3RvcmFnZSIsImFsbG9jYXRlTWVtb3J5IiwibGV2ZWxzIiwibGF5ZXJCeXRlTGVuZ3RoIiwibGF5ZXJEYXRhIiwic3ViYXJyYXkiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiX19yZW5kZXJUYXJnZXQiLCJfX2hhc0V4dGVybmFsVGV4dHVyZXMiLCJ1c2VNdWx0aXNhbXBsZWRSVFQiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRE11bHRpc2FtcGxlRVhUIiwiZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyIsIlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwic2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlIiwicmVuZGVyYnVmZmVyIiwiaXNNdWx0aXNhbXBsZSIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJnbEF0dGFjaG1lbnRUeXBlIiwiREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIiwiREVQVEhfQVRUQUNITUVOVCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZUVYVCIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsInNldHVwRGVwdGhSZW5kZXJidWZmZXIiLCJpc0N1YmUiLCJfX2JvdW5kRGVwdGhUZXh0dXJlIiwiX19kZXB0aERpc3Bvc2VDYWxsYmFjayIsImRpc3Bvc2VFdmVudCIsIl9fYXV0b0FsbG9jYXRlRGVwdGhCdWZmZXIiLCJ3ZWJnbERlcHRoVGV4dHVyZSIsInNldHVwRGVwdGhUZXh0dXJlIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiaW52YWxpZGF0aW9uQXJyYXlSZWFkIiwiaW52YWxpZGF0aW9uQXJyYXlEcmF3IiwiX191c2VSZW5kZXJUb1RleHR1cmUiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiZGlzcGxheVdpZHRoIiwiZGlzcGxheUhlaWdodCIsInRleHR1cmVVbml0IiwicmVzZXRUZXh0dXJlVW5pdHMiLCJpc0NvbXByZXNzZWQiLCJjdWJlSW1hZ2UiLCJtaXBtYXBJbWFnZSIsInVwbG9hZEN1YmVUZXh0dXJlIiwicmViaW5kVGV4dHVyZXMiLCJjb2xvclRleHR1cmUiLCJzZXR1cFJlbmRlclRhcmdldCIsImlzTXVsdGlwbGVSZW5kZXJUYXJnZXRzIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJnbFRleHR1cmVUeXBlIiwidXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwIiwidGFyZ2V0VHlwZSIsInVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiQ09MT1JfQlVGRkVSX0JJVCIsImRlcHRoU3R5bGUiLCJERVBUSF9CVUZGRVJfQklUIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwiYmxpdEZyYW1lYnVmZmVyIiwiaW52YWxpZGF0ZUZyYW1lYnVmZmVyIiwiV2ViR0xVdGlscyIsIkFMUEhBIiwiTFVNSU5BTkNFIiwiTFVNSU5BTkNFX0FMUEhBIiwiREVQVEhfQ09NUE9ORU5UIiwiREVQVEhfU1RFTkNJTCIsIkNPTVBSRVNTRURfU1JHQl9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfU1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfRVRDMl9FQUMiLCJDT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ180eDRfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNHg0X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNXg0X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzV4NF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzV4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ181eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ182eDVfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfNng1X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfNng2X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzZ4Nl9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzh4NV9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ184eDVfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ184eDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfOHg2X0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfOHg4X0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzh4OF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDVfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4NV9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDZfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4Nl9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDhfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTB4OF9LSFIiLCJDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9BU1RDXzEweDEwX0tIUiIsIkNPTVBSRVNTRURfUkdCQV9BU1RDXzEweDEwX0tIUiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfS0hSIiwiQ09NUFJFU1NFRF9SR0JBX0FTVENfMTJ4MTBfS0hSIiwiQ09NUFJFU1NFRF9TUkdCOF9BTFBIQThfQVNUQ18xMngxMl9LSFIiLCJDT01QUkVTU0VEX1JHQkFfQVNUQ18xMngxMl9LSFIiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfQlBUQ19VTk9STV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfQlBUQ19VTk9STV9FWFQiLCJDT01QUkVTU0VEX1JHQl9CUFRDX1NJR05FRF9GTE9BVF9FWFQiLCJDT01QUkVTU0VEX1JHQl9CUFRDX1VOU0lHTkVEX0ZMT0FUX0VYVCIsIkNPTVBSRVNTRURfUkVEX1JHVEMxX0VYVCIsIkNPTVBSRVNTRURfU0lHTkVEX1JFRF9SR1RDMV9FWFQiLCJDT01QUkVTU0VEX1JFRF9HUkVFTl9SR1RDMl9FWFQiLCJDT01QUkVTU0VEX1NJR05FRF9SRURfR1JFRU5fUkdUQzJfRVhUIiwiVU5TSUdORURfSU5UXzI0XzgiLCJXZWJYUkRlcHRoU2Vuc2luZyIsImRlcHRoTmVhciIsImRlcHRoRmFyIiwiZGVwdGhEYXRhIiwiZ2V0TWVzaCIsImNhbWVyYVhSIiwiZGVwdGhDb2xvciIsImRlcHRoV2lkdGgiLCJkZXB0aEhlaWdodCIsImdldERlcHRoVGV4dHVyZSIsIldlYlhSTWFuYWdlciIsImZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJyZWZlcmVuY2VTcGFjZVR5cGUiLCJmb3ZlYXRpb24iLCJjdXN0b21SZWZlcmVuY2VTcGFjZSIsInBvc2UiLCJnbEJpbmRpbmciLCJnbFByb2pMYXllciIsImdsQmFzZUxheWVyIiwieHJGcmFtZSIsImRlcHRoU2Vuc2luZyIsImdldENvbnRleHRBdHRyaWJ1dGVzIiwiaW5pdGlhbFJlbmRlclRhcmdldCIsIm5ld1JlbmRlclRhcmdldCIsImNvbnRyb2xsZXJzIiwiY29udHJvbGxlcklucHV0U291cmNlcyIsImN1cnJlbnRTaXplIiwiY3VycmVudFBpeGVsUmF0aW8iLCJjYW1lcmFMIiwiY2FtZXJhUiIsIl9jdXJyZW50RGVwdGhOZWFyIiwiX2N1cnJlbnREZXB0aEZhciIsIm9uU2Vzc2lvbkV2ZW50IiwiY29udHJvbGxlckluZGV4IiwiY29udHJvbGxlciIsIm9uU2Vzc2lvbkVuZCIsIm9uSW5wdXRTb3VyY2VzQ2hhbmdlIiwiaXNQcmVzZW50aW5nIiwic2V0UGl4ZWxSYXRpbyIsInJlbW92ZWQiLCJhZGRlZCIsImNhbWVyYUF1dG9VcGRhdGUiLCJnZXRDb250cm9sbGVyIiwiZ2V0Q29udHJvbGxlckdyaXAiLCJnZXRIYW5kIiwic2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciIsInNldFJlZmVyZW5jZVNwYWNlVHlwZSIsImdldFJlZmVyZW5jZVNwYWNlIiwic2V0UmVmZXJlbmNlU3BhY2UiLCJzcGFjZSIsImdldEJhc2VMYXllciIsImdldEJpbmRpbmciLCJnZXRGcmFtZSIsImdldFNlc3Npb24iLCJzZXRTZXNzaW9uIiwiYXN5bmMiLCJ4ckNvbXBhdGlibGUiLCJtYWtlWFJDb21wYXRpYmxlIiwiZ2V0UGl4ZWxSYXRpbyIsIlhSV2ViR0xCaW5kaW5nIiwiZGVwdGhGb3JtYXQiLCJnbERlcHRoRm9ybWF0IiwicHJvamVjdGlvbmxheWVySW5pdCIsImNvbG9yRm9ybWF0Iiwic2NhbGVGYWN0b3IiLCJjcmVhdGVQcm9qZWN0aW9uTGF5ZXIiLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsInRleHR1cmVXaWR0aCIsInRleHR1cmVIZWlnaHQiLCJhbnRpYWxpYXMiLCJpZ25vcmVEZXB0aFZhbHVlcyIsImxheWVySW5pdCIsIlhSV2ViR0xMYXllciIsImJhc2VMYXllciIsImZyYW1lYnVmZmVyV2lkdGgiLCJmcmFtZWJ1ZmZlckhlaWdodCIsInNldEZvdmVhdGlvbiIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsImNhbWVyYUxQb3MiLCJjYW1lcmFSUG9zIiwidXBkYXRlQ2FtZXJhIiwiaXBkIiwicHJvakwiLCJwcm9qUiIsInRvcEZvdiIsImJvdHRvbUZvdiIsImxlZnRGb3YiLCJyaWdodEZvdiIsInpPZmZzZXQiLCJ4T2Zmc2V0IiwibmVhcjIiLCJmYXIyIiwibGVmdDIiLCJyaWdodDIiLCJ0b3AyIiwiYm90dG9tMiIsInNldFByb2plY3Rpb25Gcm9tVW5pb24iLCJ1cGRhdGVVc2VyQ2FtZXJhIiwiZ2V0Q2FtZXJhIiwiZ2V0Rm92ZWF0aW9uIiwiZml4ZWRGb3ZlYXRpb24iLCJoYXNEZXB0aFNlbnNpbmciLCJnZXREZXB0aFNlbnNpbmdNZXNoIiwib25BbmltYXRpb25GcmFtZUNhbGxiYWNrIiwiZ2V0Vmlld2VyUG9zZSIsInZpZXdzIiwic2V0UmVuZGVyVGFyZ2V0RnJhbWVidWZmZXIiLCJjYW1lcmFYUk5lZWRzVXBkYXRlIiwiZ2xTdWJJbWFnZSIsImdldFZpZXdTdWJJbWFnZSIsInNldFJlbmRlclRhcmdldFRleHR1cmVzIiwiZGVwdGhTdGVuY2lsVGV4dHVyZSIsImVuYWJsZWRGZWF0dXJlcyIsImluY2x1ZGVzIiwiZGVwdGhVc2FnZSIsImdldERlcHRoSW5mb3JtYXRpb24iLCJpc1ZhbGlkIiwiZGV0ZWN0ZWRQbGFuZXMiLCJfZTEiLCJXZWJHTE1hdGVyaWFscyIsInJlZnJlc2hUcmFuc2Zvcm1Vbmlmb3JtIiwicmVmcmVzaFVuaWZvcm1zQ29tbW9uIiwicmVmcmVzaEZvZ1VuaWZvcm1zIiwiaXNGb2ciLCJkZW5zaXR5IiwicmVmcmVzaE1hdGVyaWFsVW5pZm9ybXMiLCJwaXhlbFJhdGlvIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsInJlZnJlc2hVbmlmb3Jtc1Bob25nIiwicmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQiLCJpc01lc2hQaHlzaWNhbE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwiLCJpc01lc2hNYXRjYXBNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc01hdGNhcCIsInJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlIiwiaXNNZXNoTm9ybWFsTWF0ZXJpYWwiLCJpc0xpbmVCYXNpY01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTGluZSIsImlzTGluZURhc2hlZE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zRGFzaCIsImlzUG9pbnRzTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQb2ludHMiLCJpc1Nwcml0ZU1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zU3ByaXRlcyIsImlzU2hhZG93TWF0ZXJpYWwiLCJXZWJHTFVuaWZvcm1zR3JvdXBzIiwidXBkYXRlTGlzdCIsImFsbG9jYXRlZEJpbmRpbmdQb2ludHMiLCJtYXhCaW5kaW5nUG9pbnRzIiwiTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTIiwiaGFzVW5pZm9ybUNoYW5nZWQiLCJpbmRleEFycmF5IiwiaW5kZXhTdHJpbmciLCJjYWNoZWRPYmplY3QiLCJnZXRVbmlmb3JtU2l6ZSIsImJvdW5kYXJ5Iiwic3RvcmFnZSIsIm9uVW5pZm9ybXNHcm91cHNEaXNwb3NlIiwid2ViZ2xQcm9ncmFtIiwidW5pZm9ybUFycmF5IiwiY2h1bmtPZmZzZXQiLCJjaHVua1BhZGRpbmciLCJjaHVua1N0YXJ0IiwiX19kYXRhIiwiX19vZmZzZXQiLCJfX3NpemUiLCJfX2NhY2hlIiwicHJlcGFyZVVuaWZvcm1zR3JvdXAiLCJiaW5kaW5nUG9pbnRJbmRleCIsImFsbG9jYXRlQmluZGluZ1BvaW50SW5kZXgiLCJVTklGT1JNX0JVRkZFUiIsImJpbmRCdWZmZXJCYXNlIiwiYXJyYXlPZmZzZXQiLCJ1cGRhdGVCdWZmZXJEYXRhIiwiV2ViR0xSZW5kZXJlciIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsInBvd2VyUHJlZmVyZW5jZSIsImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJfYWxwaGEiLCJpc1dlYkdMUmVuZGVyZXIiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJ1aW50Q2xlYXJDb2xvciIsImludENsZWFyQ29sb3IiLCJjdXJyZW50UmVuZGVyTGlzdCIsImN1cnJlbnRSZW5kZXJTdGF0ZSIsInJlbmRlckxpc3RTdGFjayIsInJlbmRlclN0YXRlU3RhY2siLCJ0b25lTWFwcGluZ0V4cG9zdXJlIiwidHJhbnNtaXNzaW9uUmVzb2x1dGlvblNjYWxlIiwiX3RoaXMiLCJfaXNDb250ZXh0TG9zdCIsIl9vdXRwdXRDb2xvclNwYWNlIiwiX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSIsIl9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwiLCJfY3VycmVudFJlbmRlclRhcmdldCIsIl9jdXJyZW50TWF0ZXJpYWxJZCIsIl9jdXJyZW50Q2FtZXJhIiwiX2N1cnJlbnRWaWV3cG9ydCIsIl9jdXJyZW50U2Npc3NvciIsIl9jdXJyZW50U2Npc3NvclRlc3QiLCJfY3VycmVudENsZWFyQ29sb3IiLCJfY3VycmVudENsZWFyQWxwaGEiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3BpeGVsUmF0aW8iLCJfb3BhcXVlU29ydCIsIl90cmFuc3BhcmVudFNvcnQiLCJfc2Npc3NvciIsIl9zY2lzc29yVGVzdCIsIl9jbGlwcGluZ0VuYWJsZWQiLCJfbG9jYWxDbGlwcGluZ0VuYWJsZWQiLCJfY3VycmVudFByb2plY3Rpb25NYXRyaXgiLCJfcHJvalNjcmVlbk1hdHJpeCIsIl92ZWN0b3IzIiwiX3ZlY3RvcjQiLCJfZW1wdHlTY2VuZSIsIl9yZW5kZXJCYWNrZ3JvdW5kIiwiZ2V0VGFyZ2V0UGl4ZWxSYXRpbyIsInByb2dyYW1DYWNoZSIsInJlbmRlckxpc3RzIiwibW9ycGh0YXJnZXRzIiwiYnVmZmVyUmVuZGVyZXIiLCJpbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJjb250ZXh0TmFtZSIsImNvbnRleHRBdHRyaWJ1dGVzIiwib25Db250ZXh0TG9zdCIsIm9uQ29udGV4dFJlc3RvcmUiLCJvbkNvbnRleHRDcmVhdGlvbkVycm9yIiwiaW5pdEdMQ29udGV4dCIsInByZXZlbnREZWZhdWx0IiwiaW5mb0F1dG9SZXNldCIsInNoYWRvd01hcEF1dG9VcGRhdGUiLCJzaGFkb3dNYXBOZWVkc1VwZGF0ZSIsInN0YXR1c01lc3NhZ2UiLCJmb3JFYWNoIiwicmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZXMiLCJkZWFsbG9jYXRlTWF0ZXJpYWwiLCJwcmVwYXJlTWF0ZXJpYWwiLCJnZXRQcm9ncmFtIiwiZm9yY2VDb250ZXh0TG9zcyIsImxvc2VDb250ZXh0IiwiZm9yY2VDb250ZXh0UmVzdG9yZSIsInJlc3RvcmVDb250ZXh0IiwidXBkYXRlU3R5bGUiLCJzZXRWaWV3cG9ydCIsImdldERyYXdpbmdCdWZmZXJTaXplIiwic2V0RHJhd2luZ0J1ZmZlclNpemUiLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJnZXRTY2lzc29yIiwic2V0U2Npc3NvciIsImdldFNjaXNzb3JUZXN0IiwiYm9vbGVhbiIsInNldE9wYXF1ZVNvcnQiLCJtZXRob2QiLCJzZXRUcmFuc3BhcmVudFNvcnQiLCJiaXRzIiwiaXNJbnRlZ2VyRm9ybWF0IiwidGFyZ2V0Rm9ybWF0IiwiaXNVbnNpZ25lZFR5cGUiLCJjbGVhckJ1ZmZlcnVpdiIsIkNPTE9SIiwiY2xlYXJCdWZmZXJpdiIsIm9uWFJTZXNzaW9uU3RhcnQiLCJvblhSU2Vzc2lvbkVuZCIsIm5lZWRzUHJvZ3JhbUNoYW5nZSIsIm5lZWRzTGlnaHRzIiwibGlnaHRzU3RhdGVWZXJzaW9uIiwicmVmcmVzaFByb2dyYW0iLCJyZWZyZXNoTWF0ZXJpYWwiLCJyZWZyZXNoTGlnaHRzIiwicF91bmlmb3JtcyIsIm1fdW5pZm9ybXMiLCJ0b05vcm1hbGl6ZWRQcm9qZWN0aW9uTWF0cml4IiwidG9SZXZlcnNlZFByb2plY3Rpb25NYXRyaXgiLCJ1Q2FtUG9zIiwiY2FtZXJhUG9zaXRpb24iLCJMTjIiLCJib25lVGV4dHVyZSIsImNvbXB1dGVCb25lVGV4dHVyZSIsIl9pbmRpcmVjdFRleHR1cmUiLCJpc01lc2hHb3VyYXVkTWF0ZXJpYWwiLCJnZXRVbmlmb3JtTGlzdCIsInNldFByb2dyYW0iLCJyYW5nZUZhY3RvciIsImRyYXdTdGFydCIsImRyYXdFbmQiLCJpc0xpbmVTZWdtZW50cyIsImlzTGluZUxvb3AiLCJpc1Nwcml0ZSIsIl9tdWx0aURyYXdJbnN0YW5jZXMiLCJfbXVsdGlEcmF3U3RhcnRzIiwiX211bHRpRHJhd0NvdW50cyIsIl9tdWx0aURyYXdDb3VudCIsInRhcmdldFNjZW5lIiwibWF0ZXJpYWwyIiwiY29tcGlsZUFzeW5jIiwiY2hlY2tNYXRlcmlhbHNSZWFkeSIsInByb2plY3RPYmplY3QiLCJpc0xPRCIsInJlbmRlclNjZW5lIiwib3BhcXVlT2JqZWN0cyIsInRyYW5zbWlzc2l2ZU9iamVjdHMiLCJ0cmFuc3BhcmVudE9iamVjdHMiLCJyZW5kZXJPYmplY3RzIiwicmVuZGVyVHJhbnNtaXNzaW9uUGFzcyIsImFjdGl2ZVZpZXdwb3J0IiwiY3VycmVudFRvbmVNYXBwaW5nIiwiY3VycmVudENhbWVyYVZpZXdwb3J0IiwicmVuZGVyVGFyZ2V0TmVlZHNVcGRhdGUiLCJjdXJyZW50U2lkZSIsInByb2dyYW1DYWNoZUtleSIsInVwZGF0ZUNvbW1vbk1hdGVyaWFsUHJvcGVydGllcyIsIm1hdGVyaWFsTmVlZHNMaWdodHMiLCJ1bmlmb3Jtc0xpc3QiLCJwcm9nVW5pZm9ybXMiLCJkZXB0aFNlbnNpbmdNZXNoIiwiY2FtZXJhMiIsImRlZmF1bHRGcmFtZWJ1ZmZlciIsIl9fdXNlRGVmYXVsdEZyYW1lYnVmZmVyIiwiX3NjcmF0Y2hGcmFtZUJ1ZmZlciIsInVzZURlZmF1bHRGcmFtZWJ1ZmZlciIsImlzUmVuZGVyVGFyZ2V0M0QiLCJmcmFtZWJ1ZmZlclRleHR1cmVMYXllciIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHMiLCJhY3RpdmVDdWJlRmFjZUluZGV4IiwicmVhZFBpeGVscyIsInJlYWRSZW5kZXJUYXJnZXRQaXhlbHNBc3luYyIsImdsQnVmZmVyIiwiUElYRUxfUEFDS19CVUZGRVIiLCJTVFJFQU1fUkVBRCIsImN1cnJGcmFtZWJ1ZmZlciIsInN5bmMiLCJmZW5jZVN5bmMiLCJTWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSIsImZsdXNoIiwiY2xpZW50V2FpdFN5bmMiLCJTWU5DX0ZMVVNIX0NPTU1BTkRTX0JJVCIsIldBSVRfRkFJTEVEIiwiVElNRU9VVF9FWFBJUkVEIiwicHJvYmVBc3luYyIsImdldEJ1ZmZlclN1YkRhdGEiLCJkZWxldGVTeW5jIiwiY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlIiwibGV2ZWxTY2FsZSIsImNvcHlUZXhTdWJJbWFnZTJEIiwiX3NyY0ZyYW1lYnVmZmVyIiwiX2RzdEZyYW1lYnVmZmVyIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJzcmNUZXh0dXJlIiwiZHN0VGV4dHVyZSIsInNyY1JlZ2lvbiIsImRzdFBvc2l0aW9uIiwic3JjTGV2ZWwiLCJkc3RMZXZlbCIsIm1pblgiLCJtaW5ZIiwibWluWiIsImRzdFgiLCJkc3RZIiwiZHN0WiIsImdsVGFyZ2V0IiwiY3VycmVudFVucGFja1Jvd0xlbiIsIlVOUEFDS19ST1dfTEVOR1RIIiwiY3VycmVudFVucGFja0ltYWdlSGVpZ2h0IiwiVU5QQUNLX0lNQUdFX0hFSUdIVCIsImN1cnJlbnRVbnBhY2tTa2lwUGl4ZWxzIiwiVU5QQUNLX1NLSVBfUElYRUxTIiwiY3VycmVudFVucGFja1NraXBSb3dzIiwiVU5QQUNLX1NLSVBfUk9XUyIsImN1cnJlbnRVbnBhY2tTa2lwSW1hZ2VzIiwiVU5QQUNLX1NLSVBfSU1BR0VTIiwiaXNTcmMzRCIsImlzRHN0M0QiLCJzcmNUZXh0dXJlUHJvcGVydGllcyIsImRzdFRleHR1cmVQcm9wZXJ0aWVzIiwic3JjUmVuZGVyVGFyZ2V0UHJvcGVydGllcyIsImRzdFJlbmRlclRhcmdldFByb3BlcnRpZXMiLCJjb3B5VGV4U3ViSW1hZ2UzRCIsImNvcHlUZXh0dXJlVG9UZXh0dXJlM0QiLCJpbml0UmVuZGVyVGFyZ2V0IiwicmVzZXRTdGF0ZSIsIl9jaGFuZ2VFdmVudCIsIl9zdGFydEV2ZW50IiwiX2VuZEV2ZW50IiwiX3BsYW5lIiwiX1RJTFRfTElNSVQiLCJfdiIsIl90d29QSSIsIl9TVEFURSIsIl9FUFMiLCJPcmJpdENvbnRyb2xzIiwiY3Vyc29yIiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsIm1pblpvb20iLCJtYXhab29tIiwibWluVGFyZ2V0UmFkaXVzIiwibWF4VGFyZ2V0UmFkaXVzIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJtaW5BemltdXRoQW5nbGUiLCJtYXhBemltdXRoQW5nbGUiLCJlbmFibGVEYW1waW5nIiwiZGFtcGluZ0ZhY3RvciIsImVuYWJsZVpvb20iLCJ6b29tU3BlZWQiLCJlbmFibGVSb3RhdGUiLCJyb3RhdGVTcGVlZCIsImtleVJvdGF0ZVNwZWVkIiwiZW5hYmxlUGFuIiwicGFuU3BlZWQiLCJzY3JlZW5TcGFjZVBhbm5pbmciLCJrZXlQYW5TcGVlZCIsInpvb21Ub0N1cnNvciIsImF1dG9Sb3RhdGUiLCJhdXRvUm90YXRlU3BlZWQiLCJVUCIsIkJPVFRPTSIsInRhcmdldDAiLCJwb3NpdGlvbjAiLCJ6b29tMCIsIl9kb21FbGVtZW50S2V5RXZlbnRzIiwiX2xhc3RQb3NpdGlvbiIsIl9sYXN0UXVhdGVybmlvbiIsIl9sYXN0VGFyZ2V0UG9zaXRpb24iLCJfcXVhdCIsIl9xdWF0SW52ZXJzZSIsIl9zcGhlcmljYWwiLCJfc3BoZXJpY2FsRGVsdGEiLCJfc2NhbGUiLCJfcGFuT2Zmc2V0IiwiX3JvdGF0ZVN0YXJ0IiwiX3JvdGF0ZUVuZCIsIl9yb3RhdGVEZWx0YSIsIl9wYW5TdGFydCIsIl9wYW5FbmQiLCJfcGFuRGVsdGEiLCJfZG9sbHlTdGFydCIsIl9kb2xseUVuZCIsIl9kb2xseURlbHRhIiwiX2RvbGx5RGlyZWN0aW9uIiwiX21vdXNlIiwiX3BlcmZvcm1DdXJzb3Jab29tIiwiX3BvaW50ZXJzIiwiX3BvaW50ZXJQb3NpdGlvbnMiLCJfY29udHJvbEFjdGl2ZSIsIl9vblBvaW50ZXJNb3ZlIiwib25Qb2ludGVyTW92ZSIsIl9vblBvaW50ZXJEb3duIiwib25Qb2ludGVyRG93biIsIl9vblBvaW50ZXJVcCIsIm9uUG9pbnRlclVwIiwiX29uQ29udGV4dE1lbnUiLCJvbkNvbnRleHRNZW51IiwiX29uTW91c2VXaGVlbCIsIm9uTW91c2VXaGVlbCIsIl9vbktleURvd24iLCJvbktleURvd24iLCJfb25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0IiwiX29uVG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJfb25Nb3VzZURvd24iLCJvbk1vdXNlRG93biIsIl9vbk1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiX2ludGVyY2VwdENvbnRyb2xEb3duIiwiaW50ZXJjZXB0Q29udHJvbERvd24iLCJfaW50ZXJjZXB0Q29udHJvbFVwIiwiaW50ZXJjZXB0Q29udHJvbFVwIiwicGFzc2l2ZSIsImdldFJvb3ROb2RlIiwiY2FwdHVyZSIsInRvdWNoQWN0aW9uIiwic3RvcExpc3RlblRvS2V5RXZlbnRzIiwiZ2V0UG9sYXJBbmdsZSIsImdldEF6aW11dGhhbEFuZ2xlIiwiZ2V0RGlzdGFuY2UiLCJsaXN0ZW5Ub0tleUV2ZW50cyIsInNhdmVTdGF0ZSIsImRlbHRhVGltZSIsIl9yb3RhdGVMZWZ0IiwiX2dldEF1dG9Sb3RhdGlvbkFuZ2xlIiwiem9vbUNoYW5nZWQiLCJfY2xhbXBEaXN0YW5jZSIsInByZXZSYWRpdXMiLCJuZXdSYWRpdXMiLCJyYWRpdXNEZWx0YSIsIm1vdXNlQmVmb3JlIiwicHJldlpvb20iLCJtb3VzZUFmdGVyIiwiX2dldFpvb21TY2FsZSIsIm5vcm1hbGl6ZWREZWx0YSIsIl9yb3RhdGVVcCIsIl9wYW5MZWZ0Iiwib2JqZWN0TWF0cml4IiwiX3BhblVwIiwiX3BhbiIsImRlbHRhWCIsImRlbHRhWSIsInRhcmdldERpc3RhbmNlIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJfZG9sbHlPdXQiLCJkb2xseVNjYWxlIiwiX2RvbGx5SW4iLCJfdXBkYXRlWm9vbVBhcmFtZXRlcnMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZGlzdCIsIl9oYW5kbGVNb3VzZURvd25Sb3RhdGUiLCJjbGllbnRYIiwiY2xpZW50WSIsIl9oYW5kbGVNb3VzZURvd25Eb2xseSIsIl9oYW5kbGVNb3VzZURvd25QYW4iLCJfaGFuZGxlTW91c2VNb3ZlUm90YXRlIiwiX2hhbmRsZU1vdXNlTW92ZURvbGx5IiwiX2hhbmRsZU1vdXNlTW92ZVBhbiIsIl9oYW5kbGVNb3VzZVdoZWVsIiwiX2hhbmRsZUtleURvd24iLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiX2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUiLCJwYWdlWCIsInBhZ2VZIiwiX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiIsIl9oYW5kbGVUb3VjaFN0YXJ0UGFuIiwiX2hhbmRsZVRvdWNoU3RhcnREb2xseSIsIl9oYW5kbGVUb3VjaFN0YXJ0RG9sbHlQYW4iLCJfaGFuZGxlVG91Y2hTdGFydERvbGx5Um90YXRlIiwiX2hhbmRsZVRvdWNoTW92ZVJvdGF0ZSIsIl9oYW5kbGVUb3VjaE1vdmVQYW4iLCJfaGFuZGxlVG91Y2hNb3ZlRG9sbHkiLCJjZW50ZXJYIiwiY2VudGVyWSIsIl9oYW5kbGVUb3VjaE1vdmVEb2xseVBhbiIsIl9oYW5kbGVUb3VjaE1vdmVEb2xseVJvdGF0ZSIsIl9hZGRQb2ludGVyIiwicG9pbnRlcklkIiwiX3JlbW92ZVBvaW50ZXIiLCJfaXNUcmFja2luZ1BvaW50ZXIiLCJfdHJhY2tQb2ludGVyIiwiX2N1c3RvbVdoZWVsRXZlbnQiLCJkZWx0YU1vZGUiLCJuZXdFdmVudCIsInNldFBvaW50ZXJDYXB0dXJlIiwicG9pbnRlclR5cGUiLCJyZWxlYXNlUG9pbnRlckNhcHR1cmUiLCJtb3VzZUFjdGlvbiIsImJ1dHRvbiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNvbnRyb2xzIiwic3RhcnRDYW1lcmFBbmRDb250cm9scyIsInBsYW5lU2l6ZSIsInJlcGVhdHMiLCJwbGFuZUdlbyIsInBsYW5lTWF0IiwiY3ViZUdlbyIsImN1YmVNYXQiLCJzcGhlcmVHZW8iLCJzcGhlcmVNYXQiLCJuZWVkUmVzaXplIiwicmVzaXplUmVuZGVyZXJUb0Rpc3BsYXlTaXplIiwibWFpbiJdLCJzb3VyY2VSb290IjoiIn0=